
AX12TESTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800200  000013f4  00001488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800292  00800292  0000151a  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000558  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea4  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000370  00000000  00000000  00002956  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fc6  00000000  00000000  00002cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000400  00000000  00000000  00003c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051e  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000444  00000000  00000000  000045aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__vector_36>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 ef       	ldi	r30, 0xF4	; 244
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 39       	cpi	r26, 0x92	; 146
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	12 e0       	ldi	r17, 0x02	; 2
     112:	a2 e9       	ldi	r26, 0x92	; 146
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	aa 3f       	cpi	r26, 0xFA	; 250
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 11 04 	call	0x822	; 0x822 <main>
     124:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <PWM_Init_timer1_LED>:

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     12c:	89 30       	cpi	r24, 0x09	; 9
     12e:	49 f4       	brne	.+18     	; 0x142 <PWM_Init_timer1_LED+0x16>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     130:	80 91 80 00 	lds	r24, 0x0080
     134:	82 60       	ori	r24, 0x02	; 2
     136:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,PWM10);
     13a:	80 91 80 00 	lds	r24, 0x0080
     13e:	8e 7f       	andi	r24, 0xFE	; 254
     140:	0e c0       	rjmp	.+28     	; 0x15e <PWM_Init_timer1_LED+0x32>
	}
	else if( bitRes == 10 )
     142:	8a 30       	cpi	r24, 0x0A	; 10
     144:	21 f4       	brne	.+8      	; 0x14e <PWM_Init_timer1_LED+0x22>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     146:	80 91 80 00 	lds	r24, 0x0080
     14a:	82 60       	ori	r24, 0x02	; 2
     14c:	03 c0       	rjmp	.+6      	; 0x154 <PWM_Init_timer1_LED+0x28>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     14e:	80 91 80 00 	lds	r24, 0x0080
     152:	8d 7f       	andi	r24, 0xFD	; 253
     154:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,PWM10);
     158:	80 91 80 00 	lds	r24, 0x0080
     15c:	81 60       	ori	r24, 0x01	; 1
     15e:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     162:	10 92 8b 00 	sts	0x008B, r1
     166:	10 92 8a 00 	sts	0x008A, r1
}
     16a:	08 95       	ret

0000016c <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     16c:	89 30       	cpi	r24, 0x09	; 9
     16e:	49 f4       	brne	.+18     	; 0x182 <PWM_Init_timer2_H6+0x16>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
     170:	80 91 b0 00 	lds	r24, 0x00B0
     174:	82 60       	ori	r24, 0x02	; 2
     176:	80 93 b0 00 	sts	0x00B0, r24
		cbi(TCCR2A,PWM10);
     17a:	80 91 b0 00 	lds	r24, 0x00B0
     17e:	8e 7f       	andi	r24, 0xFE	; 254
     180:	0e c0       	rjmp	.+28     	; 0x19e <PWM_Init_timer2_H6+0x32>
	}
	else if( bitRes == 10 )
     182:	8a 30       	cpi	r24, 0x0A	; 10
     184:	21 f4       	brne	.+8      	; 0x18e <PWM_Init_timer2_H6+0x22>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
     186:	80 91 b0 00 	lds	r24, 0x00B0
     18a:	82 60       	ori	r24, 0x02	; 2
     18c:	03 c0       	rjmp	.+6      	; 0x194 <PWM_Init_timer2_H6+0x28>
		sbi(TCCR2A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
     18e:	80 91 b0 00 	lds	r24, 0x00B0
     192:	8d 7f       	andi	r24, 0xFD	; 253
     194:	80 93 b0 00 	sts	0x00B0, r24
		sbi(TCCR2A,PWM10);
     198:	80 91 b0 00 	lds	r24, 0x00B0
     19c:	81 60       	ori	r24, 0x01	; 1
     19e:	80 93 b0 00 	sts	0x00B0, r24
	}
	// clear output compare values
	OCR2B = 0;
     1a2:	10 92 b4 00 	sts	0x00B4, r1
}
     1a6:	08 95       	ret

000001a8 <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     1a8:	89 30       	cpi	r24, 0x09	; 9
     1aa:	49 f4       	brne	.+18     	; 0x1be <PWM_Init_timer3_E3+0x16>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
     1ac:	80 91 90 00 	lds	r24, 0x0090
     1b0:	82 60       	ori	r24, 0x02	; 2
     1b2:	80 93 90 00 	sts	0x0090, r24
		cbi(TCCR3A,PWM10);
     1b6:	80 91 90 00 	lds	r24, 0x0090
     1ba:	8e 7f       	andi	r24, 0xFE	; 254
     1bc:	0e c0       	rjmp	.+28     	; 0x1da <PWM_Init_timer3_E3+0x32>
	}
	else if( bitRes == 10 )
     1be:	8a 30       	cpi	r24, 0x0A	; 10
     1c0:	21 f4       	brne	.+8      	; 0x1ca <PWM_Init_timer3_E3+0x22>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
     1c2:	80 91 90 00 	lds	r24, 0x0090
     1c6:	82 60       	ori	r24, 0x02	; 2
     1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <PWM_Init_timer3_E3+0x28>
		sbi(TCCR3A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
     1ca:	80 91 90 00 	lds	r24, 0x0090
     1ce:	8d 7f       	andi	r24, 0xFD	; 253
     1d0:	80 93 90 00 	sts	0x0090, r24
		sbi(TCCR3A,PWM10);
     1d4:	80 91 90 00 	lds	r24, 0x0090
     1d8:	81 60       	ori	r24, 0x01	; 1
     1da:	80 93 90 00 	sts	0x0090, r24
	}
	// clear output compare values
	OCR3A = 0;
     1de:	10 92 99 00 	sts	0x0099, r1
     1e2:	10 92 98 00 	sts	0x0098, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     1e6:	08 95       	ret

000001e8 <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     1e8:	89 30       	cpi	r24, 0x09	; 9
     1ea:	49 f4       	brne	.+18     	; 0x1fe <PWM_Init_timer3_E4+0x16>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
     1ec:	80 91 91 00 	lds	r24, 0x0091
     1f0:	82 60       	ori	r24, 0x02	; 2
     1f2:	80 93 91 00 	sts	0x0091, r24
		cbi(TCCR3B,PWM10);
     1f6:	80 91 91 00 	lds	r24, 0x0091
     1fa:	8e 7f       	andi	r24, 0xFE	; 254
     1fc:	0e c0       	rjmp	.+28     	; 0x21a <PWM_Init_timer3_E4+0x32>
	}
	else if( bitRes == 10 )
     1fe:	8a 30       	cpi	r24, 0x0A	; 10
     200:	21 f4       	brne	.+8      	; 0x20a <PWM_Init_timer3_E4+0x22>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
     202:	80 91 91 00 	lds	r24, 0x0091
     206:	82 60       	ori	r24, 0x02	; 2
     208:	03 c0       	rjmp	.+6      	; 0x210 <PWM_Init_timer3_E4+0x28>
		sbi(TCCR3B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
     20a:	80 91 91 00 	lds	r24, 0x0091
     20e:	8d 7f       	andi	r24, 0xFD	; 253
     210:	80 93 91 00 	sts	0x0091, r24
		sbi(TCCR3B,PWM10);
     214:	80 91 91 00 	lds	r24, 0x0091
     218:	81 60       	ori	r24, 0x01	; 1
     21a:	80 93 91 00 	sts	0x0091, r24
	}
	// clear output compare values
	OCR3B = 0;
     21e:	10 92 9b 00 	sts	0x009B, r1
     222:	10 92 9a 00 	sts	0x009A, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     226:	08 95       	ret

00000228 <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     228:	89 30       	cpi	r24, 0x09	; 9
     22a:	49 f4       	brne	.+18     	; 0x23e <PWM_Init_timer3_E5+0x16>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
     22c:	80 91 92 00 	lds	r24, 0x0092
     230:	82 60       	ori	r24, 0x02	; 2
     232:	80 93 92 00 	sts	0x0092, r24
		cbi(TCCR3C,PWM10);
     236:	80 91 92 00 	lds	r24, 0x0092
     23a:	8e 7f       	andi	r24, 0xFE	; 254
     23c:	0e c0       	rjmp	.+28     	; 0x25a <PWM_Init_timer3_E5+0x32>
	}
	else if( bitRes == 10 )
     23e:	8a 30       	cpi	r24, 0x0A	; 10
     240:	21 f4       	brne	.+8      	; 0x24a <PWM_Init_timer3_E5+0x22>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
     242:	80 91 92 00 	lds	r24, 0x0092
     246:	82 60       	ori	r24, 0x02	; 2
     248:	03 c0       	rjmp	.+6      	; 0x250 <PWM_Init_timer3_E5+0x28>
		sbi(TCCR3C,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
     24a:	80 91 92 00 	lds	r24, 0x0092
     24e:	8d 7f       	andi	r24, 0xFD	; 253
     250:	80 93 92 00 	sts	0x0092, r24
		sbi(TCCR3C,PWM10);
     254:	80 91 92 00 	lds	r24, 0x0092
     258:	81 60       	ori	r24, 0x01	; 1
     25a:	80 93 92 00 	sts	0x0092, r24
	}
	// clear output compare values
	OCR3C = 0;
     25e:	10 92 9d 00 	sts	0x009D, r1
     262:	10 92 9c 00 	sts	0x009C, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     266:	08 95       	ret

00000268 <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     268:	89 30       	cpi	r24, 0x09	; 9
     26a:	49 f4       	brne	.+18     	; 0x27e <PWM_Init_timer4_H3+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     26c:	80 91 a0 00 	lds	r24, 0x00A0
     270:	82 60       	ori	r24, 0x02	; 2
     272:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     276:	80 91 a0 00 	lds	r24, 0x00A0
     27a:	8e 7f       	andi	r24, 0xFE	; 254
     27c:	0e c0       	rjmp	.+28     	; 0x29a <PWM_Init_timer4_H3+0x32>
	}
	else if( bitRes == 10 )
     27e:	8a 30       	cpi	r24, 0x0A	; 10
     280:	21 f4       	brne	.+8      	; 0x28a <PWM_Init_timer4_H3+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     282:	80 91 a0 00 	lds	r24, 0x00A0
     286:	82 60       	ori	r24, 0x02	; 2
     288:	03 c0       	rjmp	.+6      	; 0x290 <PWM_Init_timer4_H3+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     28a:	80 91 a0 00 	lds	r24, 0x00A0
     28e:	8d 7f       	andi	r24, 0xFD	; 253
     290:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     294:	80 91 a0 00 	lds	r24, 0x00A0
     298:	81 60       	ori	r24, 0x01	; 1
     29a:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4A = 0;
     29e:	10 92 a9 00 	sts	0x00A9, r1
     2a2:	10 92 a8 00 	sts	0x00A8, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     2a6:	08 95       	ret

000002a8 <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     2a8:	89 30       	cpi	r24, 0x09	; 9
     2aa:	49 f4       	brne	.+18     	; 0x2be <PWM_Init_timer4_H4+0x16>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
     2ac:	80 91 a1 00 	lds	r24, 0x00A1
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	80 93 a1 00 	sts	0x00A1, r24
		cbi(TCCR4B,PWM10);
     2b6:	80 91 a1 00 	lds	r24, 0x00A1
     2ba:	8e 7f       	andi	r24, 0xFE	; 254
     2bc:	0e c0       	rjmp	.+28     	; 0x2da <PWM_Init_timer4_H4+0x32>
	}
	else if( bitRes == 10 )
     2be:	8a 30       	cpi	r24, 0x0A	; 10
     2c0:	21 f4       	brne	.+8      	; 0x2ca <PWM_Init_timer4_H4+0x22>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
     2c2:	80 91 a1 00 	lds	r24, 0x00A1
     2c6:	82 60       	ori	r24, 0x02	; 2
     2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <PWM_Init_timer4_H4+0x28>
		sbi(TCCR4B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
     2ca:	80 91 a1 00 	lds	r24, 0x00A1
     2ce:	8d 7f       	andi	r24, 0xFD	; 253
     2d0:	80 93 a1 00 	sts	0x00A1, r24
		sbi(TCCR4B,PWM10);
     2d4:	80 91 a1 00 	lds	r24, 0x00A1
     2d8:	81 60       	ori	r24, 0x01	; 1
     2da:	80 93 a1 00 	sts	0x00A1, r24
	}
	// clear output compare values
	OCR4B = 0;
     2de:	10 92 ab 00 	sts	0x00AB, r1
     2e2:	10 92 aa 00 	sts	0x00AA, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     2e6:	08 95       	ret

000002e8 <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     2e8:	89 30       	cpi	r24, 0x09	; 9
     2ea:	49 f4       	brne	.+18     	; 0x2fe <PWM_Init_timer4_H5+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     2ec:	80 91 a0 00 	lds	r24, 0x00A0
     2f0:	82 60       	ori	r24, 0x02	; 2
     2f2:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     2f6:	80 91 a0 00 	lds	r24, 0x00A0
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	0e c0       	rjmp	.+28     	; 0x31a <PWM_Init_timer4_H5+0x32>
	}
	else if( bitRes == 10 )
     2fe:	8a 30       	cpi	r24, 0x0A	; 10
     300:	21 f4       	brne	.+8      	; 0x30a <PWM_Init_timer4_H5+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     302:	80 91 a0 00 	lds	r24, 0x00A0
     306:	82 60       	ori	r24, 0x02	; 2
     308:	03 c0       	rjmp	.+6      	; 0x310 <PWM_Init_timer4_H5+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     30a:	80 91 a0 00 	lds	r24, 0x00A0
     30e:	8d 7f       	andi	r24, 0xFD	; 253
     310:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     314:	80 91 a0 00 	lds	r24, 0x00A0
     318:	81 60       	ori	r24, 0x01	; 1
     31a:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4C = 0;
     31e:	10 92 ad 00 	sts	0x00AD, r1
     322:	10 92 ac 00 	sts	0x00AC, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     326:	08 95       	ret

00000328 <timer1PWMInitICR>:
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     328:	e0 e8       	ldi	r30, 0x80	; 128
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	20 81       	ld	r18, Z
     32e:	2e 7f       	andi	r18, 0xFE	; 254
     330:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     332:	20 81       	ld	r18, Z
     334:	22 60       	ori	r18, 0x02	; 2
     336:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     338:	e1 e8       	ldi	r30, 0x81	; 129
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	20 81       	ld	r18, Z
     33e:	28 60       	ori	r18, 0x08	; 8
     340:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     342:	20 81       	ld	r18, Z
     344:	20 61       	ori	r18, 0x10	; 16
     346:	20 83       	st	Z, r18
	
	// set top count value
	ICR1 = topcount;
     348:	90 93 87 00 	sts	0x0087, r25
     34c:	80 93 86 00 	sts	0x0086, r24
	
	// clear output compare values
	OCR1A = 0;
     350:	10 92 89 00 	sts	0x0089, r1
     354:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     358:	10 92 8b 00 	sts	0x008B, r1
     35c:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     360:	10 92 8d 00 	sts	0x008D, r1
     364:	10 92 8c 00 	sts	0x008C, r1
}
     368:	08 95       	ret

0000036a <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
     36a:	e0 e9       	ldi	r30, 0x90	; 144
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	20 81       	ld	r18, Z
     370:	2e 7f       	andi	r18, 0xFE	; 254
     372:	20 83       	st	Z, r18
	sbi(TCCR3A,WGM11);
     374:	20 81       	ld	r18, Z
     376:	22 60       	ori	r18, 0x02	; 2
     378:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM12);
     37a:	e1 e9       	ldi	r30, 0x91	; 145
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	20 81       	ld	r18, Z
     380:	28 60       	ori	r18, 0x08	; 8
     382:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM13);
     384:	20 81       	ld	r18, Z
     386:	20 61       	ori	r18, 0x10	; 16
     388:	20 83       	st	Z, r18
	
	// set top count value
	ICR3 = topcount;
     38a:	90 93 97 00 	sts	0x0097, r25
     38e:	80 93 96 00 	sts	0x0096, r24
	
	// clear output compare values
	OCR3A = 0;
     392:	10 92 99 00 	sts	0x0099, r1
     396:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
     39a:	10 92 9b 00 	sts	0x009B, r1
     39e:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
     3a2:	10 92 9d 00 	sts	0x009D, r1
     3a6:	10 92 9c 00 	sts	0x009C, r1
}
     3aa:	08 95       	ret

000003ac <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
     3ac:	e0 ea       	ldi	r30, 0xA0	; 160
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	20 81       	ld	r18, Z
     3b2:	2e 7f       	andi	r18, 0xFE	; 254
     3b4:	20 83       	st	Z, r18
	sbi(TCCR4A,WGM11);
     3b6:	20 81       	ld	r18, Z
     3b8:	22 60       	ori	r18, 0x02	; 2
     3ba:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM12);
     3bc:	e1 ea       	ldi	r30, 0xA1	; 161
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	20 81       	ld	r18, Z
     3c2:	28 60       	ori	r18, 0x08	; 8
     3c4:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM13);
     3c6:	20 81       	ld	r18, Z
     3c8:	20 61       	ori	r18, 0x10	; 16
     3ca:	20 83       	st	Z, r18
	
	// set top count value
	ICR4 = topcount;
     3cc:	90 93 a7 00 	sts	0x00A7, r25
     3d0:	80 93 a6 00 	sts	0x00A6, r24
	
	// clear output compare values
	OCR4A = 0;
     3d4:	10 92 a9 00 	sts	0x00A9, r1
     3d8:	10 92 a8 00 	sts	0x00A8, r1
	OCR4B = 0;
     3dc:	10 92 ab 00 	sts	0x00AB, r1
     3e0:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
     3e4:	10 92 ad 00 	sts	0x00AD, r1
     3e8:	10 92 ac 00 	sts	0x00AC, r1
}
     3ec:	08 95       	ret

000003ee <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
	sbi(TCCR1A,COM1B1);
     3ee:	e0 e8       	ldi	r30, 0x80	; 128
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	80 62       	ori	r24, 0x20	; 32
     3f6:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     3f8:	80 81       	ld	r24, Z
     3fa:	8f 7e       	andi	r24, 0xEF	; 239
     3fc:	80 83       	st	Z, r24
}
     3fe:	08 95       	ret

00000400 <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
	sbi(TCCR2A,COM2B1);
     400:	e0 eb       	ldi	r30, 0xB0	; 176
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	80 62       	ori	r24, 0x20	; 32
     408:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     40a:	80 81       	ld	r24, Z
     40c:	8f 7e       	andi	r24, 0xEF	; 239
     40e:	80 83       	st	Z, r24
}
     410:	08 95       	ret

00000412 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
	sbi(TCCR3A,COM3A1);
     412:	e0 e9       	ldi	r30, 0x90	; 144
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	80 68       	ori	r24, 0x80	; 128
     41a:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     41c:	80 81       	ld	r24, Z
     41e:	8f 7b       	andi	r24, 0xBF	; 191
     420:	80 83       	st	Z, r24
}
     422:	08 95       	ret

00000424 <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
	sbi(TCCR3A,COM3B1);
     424:	e0 e9       	ldi	r30, 0x90	; 144
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	80 62       	ori	r24, 0x20	; 32
     42c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     42e:	80 81       	ld	r24, Z
     430:	8f 7e       	andi	r24, 0xEF	; 239
     432:	80 83       	st	Z, r24
}
     434:	08 95       	ret

00000436 <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
	sbi(TCCR3A,COM3C1);
     436:	e0 e9       	ldi	r30, 0x90	; 144
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	88 60       	ori	r24, 0x08	; 8
     43e:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     440:	80 81       	ld	r24, Z
     442:	8b 7f       	andi	r24, 0xFB	; 251
     444:	80 83       	st	Z, r24
}
     446:	08 95       	ret

00000448 <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
	sbi(TCCR4A,COM4A1);
     448:	e0 ea       	ldi	r30, 0xA0	; 160
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	80 68       	ori	r24, 0x80	; 128
     450:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     452:	80 81       	ld	r24, Z
     454:	8f 7b       	andi	r24, 0xBF	; 191
     456:	80 83       	st	Z, r24
}
     458:	08 95       	ret

0000045a <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
	sbi(TCCR4A,COM4B1);
     45a:	e0 ea       	ldi	r30, 0xA0	; 160
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	80 62       	ori	r24, 0x20	; 32
     462:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     464:	80 81       	ld	r24, Z
     466:	8f 7e       	andi	r24, 0xEF	; 239
     468:	80 83       	st	Z, r24
}
     46a:	08 95       	ret

0000046c <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
	sbi(TCCR4A,COM4C1);
     46c:	e0 ea       	ldi	r30, 0xA0	; 160
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	88 60       	ori	r24, 0x08	; 8
     474:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     476:	80 81       	ld	r24, Z
     478:	8b 7f       	andi	r24, 0xFB	; 251
     47a:	80 83       	st	Z, r24
}
     47c:	08 95       	ret

0000047e <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     47e:	e0 e8       	ldi	r30, 0x80	; 128
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	8f 7d       	andi	r24, 0xDF	; 223
     486:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     488:	80 81       	ld	r24, Z
     48a:	8f 7e       	andi	r24, 0xEF	; 239
     48c:	80 83       	st	Z, r24
}
     48e:	08 95       	ret

00000490 <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     490:	e0 eb       	ldi	r30, 0xB0	; 176
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	8f 7d       	andi	r24, 0xDF	; 223
     498:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     49a:	80 81       	ld	r24, Z
     49c:	8f 7e       	andi	r24, 0xEF	; 239
     49e:	80 83       	st	Z, r24
}
     4a0:	08 95       	ret

000004a2 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     4a2:	e0 e9       	ldi	r30, 0x90	; 144
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	8f 77       	andi	r24, 0x7F	; 127
     4aa:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     4ac:	80 81       	ld	r24, Z
     4ae:	8f 7b       	andi	r24, 0xBF	; 191
     4b0:	80 83       	st	Z, r24
}
     4b2:	08 95       	ret

000004b4 <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     4b4:	e0 e9       	ldi	r30, 0x90	; 144
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	8f 7d       	andi	r24, 0xDF	; 223
     4bc:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     4be:	80 81       	ld	r24, Z
     4c0:	8f 7e       	andi	r24, 0xEF	; 239
     4c2:	80 83       	st	Z, r24
}
     4c4:	08 95       	ret

000004c6 <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     4c6:	e0 e9       	ldi	r30, 0x90	; 144
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	87 7f       	andi	r24, 0xF7	; 247
     4ce:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     4d0:	80 81       	ld	r24, Z
     4d2:	8b 7f       	andi	r24, 0xFB	; 251
     4d4:	80 83       	st	Z, r24
}
     4d6:	08 95       	ret

000004d8 <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     4d8:	e0 ea       	ldi	r30, 0xA0	; 160
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	8f 77       	andi	r24, 0x7F	; 127
     4e0:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     4e2:	80 81       	ld	r24, Z
     4e4:	8f 7b       	andi	r24, 0xBF	; 191
     4e6:	80 83       	st	Z, r24
}
     4e8:	08 95       	ret

000004ea <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     4ea:	e0 ea       	ldi	r30, 0xA0	; 160
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	8f 7d       	andi	r24, 0xDF	; 223
     4f2:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     4f4:	80 81       	ld	r24, Z
     4f6:	8f 7e       	andi	r24, 0xEF	; 239
     4f8:	80 83       	st	Z, r24
}
     4fa:	08 95       	ret

000004fc <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     4fc:	e0 ea       	ldi	r30, 0xA0	; 160
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	87 7f       	andi	r24, 0xF7	; 247
     504:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     506:	80 81       	ld	r24, Z
     508:	8b 7f       	andi	r24, 0xFB	; 251
     50a:	80 83       	st	Z, r24
}
     50c:	08 95       	ret

0000050e <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
	cbi(TCCR1A,PWM11);
     50e:	e0 e8       	ldi	r30, 0x80	; 128
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	8d 7f       	andi	r24, 0xFD	; 253
     516:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM10);
     518:	80 81       	ld	r24, Z
     51a:	8e 7f       	andi	r24, 0xFE	; 254
     51c:	80 83       	st	Z, r24
}

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     51e:	80 81       	ld	r24, Z
     520:	8f 7d       	andi	r24, 0xDF	; 223
     522:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     524:	80 81       	ld	r24, Z
     526:	8f 7e       	andi	r24, 0xEF	; 239
     528:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
	//timer2PWMCOff();
}
     52a:	08 95       	ret

0000052c <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
	cbi(TCCR2A,PWM11);
     52c:	e0 eb       	ldi	r30, 0xB0	; 176
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	8d 7f       	andi	r24, 0xFD	; 253
     534:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM10);
     536:	80 81       	ld	r24, Z
     538:	8e 7f       	andi	r24, 0xFE	; 254
     53a:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     53c:	80 81       	ld	r24, Z
     53e:	8f 7d       	andi	r24, 0xDF	; 223
     540:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     542:	80 81       	ld	r24, Z
     544:	8f 7e       	andi	r24, 0xEF	; 239
     546:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM11);
	cbi(TCCR2A,PWM10);
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
	//timer2PWMCOff();
}
     548:	08 95       	ret

0000054a <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
	cbi(TCCR3A,PWM11);
     54a:	e0 e9       	ldi	r30, 0x90	; 144
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	8d 7f       	andi	r24, 0xFD	; 253
     552:	80 83       	st	Z, r24
	cbi(TCCR3A,PWM10);
     554:	80 81       	ld	r24, Z
     556:	8e 7f       	andi	r24, 0xFE	; 254
     558:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B1);
	cbi(TCCR2A,COM2B0);
}
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     55a:	80 81       	ld	r24, Z
     55c:	8f 77       	andi	r24, 0x7F	; 127
     55e:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     560:	80 81       	ld	r24, Z
     562:	8f 7b       	andi	r24, 0xBF	; 191
     564:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     566:	80 81       	ld	r24, Z
     568:	8f 7d       	andi	r24, 0xDF	; 223
     56a:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     56c:	80 81       	ld	r24, Z
     56e:	8f 7e       	andi	r24, 0xEF	; 239
     570:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     572:	80 81       	ld	r24, Z
     574:	87 7f       	andi	r24, 0xF7	; 247
     576:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     578:	80 81       	ld	r24, Z
     57a:	8b 7f       	andi	r24, 0xFB	; 251
     57c:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
	PWM_timer3_Off_E4();
	PWM_timer3_Off_E5();
	//timer2PWMCOff();
}
     57e:	08 95       	ret

00000580 <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
	cbi(TCCR4A,PWM11);
     580:	e0 ea       	ldi	r30, 0xA0	; 160
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	8d 7f       	andi	r24, 0xFD	; 253
     588:	80 83       	st	Z, r24
	cbi(TCCR4A,PWM10);
     58a:	80 81       	ld	r24, Z
     58c:	8e 7f       	andi	r24, 0xFE	; 254
     58e:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C1);
	cbi(TCCR3A,COM3C0);
}
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     590:	80 81       	ld	r24, Z
     592:	8f 77       	andi	r24, 0x7F	; 127
     594:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     596:	80 81       	ld	r24, Z
     598:	8f 7b       	andi	r24, 0xBF	; 191
     59a:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     59c:	80 81       	ld	r24, Z
     59e:	8f 7d       	andi	r24, 0xDF	; 223
     5a0:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     5a2:	80 81       	ld	r24, Z
     5a4:	8f 7e       	andi	r24, 0xEF	; 239
     5a6:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     5a8:	80 81       	ld	r24, Z
     5aa:	87 7f       	andi	r24, 0xF7	; 247
     5ac:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     5ae:	80 81       	ld	r24, Z
     5b0:	8b 7f       	andi	r24, 0xFB	; 251
     5b2:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
	PWM_timer4_Off_H4();
	PWM_timer4_Off_H5();
	//timer2PWMCOff();
}
     5b4:	08 95       	ret

000005b6 <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
     5b6:	90 93 8b 00 	sts	0x008B, r25
     5ba:	80 93 8a 00 	sts	0x008A, r24
     5be:	08 95       	ret

000005c0 <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     5c0:	80 93 b4 00 	sts	0x00B4, r24
     5c4:	08 95       	ret

000005c6 <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
     5c6:	90 93 99 00 	sts	0x0099, r25
     5ca:	80 93 98 00 	sts	0x0098, r24
     5ce:	08 95       	ret

000005d0 <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
     5d0:	90 93 9b 00 	sts	0x009B, r25
     5d4:	80 93 9a 00 	sts	0x009A, r24
     5d8:	08 95       	ret

000005da <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
     5da:	90 93 9d 00 	sts	0x009D, r25
     5de:	80 93 9c 00 	sts	0x009C, r24
     5e2:	08 95       	ret

000005e4 <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
     5e4:	90 93 a9 00 	sts	0x00A9, r25
     5e8:	80 93 a8 00 	sts	0x00A8, r24
     5ec:	08 95       	ret

000005ee <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
     5ee:	90 93 ab 00 	sts	0x00AB, r25
     5f2:	80 93 aa 00 	sts	0x00AA, r24
     5f6:	08 95       	ret

000005f8 <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
     5f8:	90 93 ad 00 	sts	0x00AD, r25
     5fc:	80 93 ac 00 	sts	0x00AC, r24
     600:	08 95       	ret

00000602 <configure_ports>:
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
     602:	10 ba       	out	0x10, r1	; 16
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
     604:	11 ba       	out	0x11, r1	; 17
	DDRK = 0b00000000;  //configure all K ports for input				0x00
     606:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
     60a:	10 92 08 01 	sts	0x0108, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
     60e:	9f ef       	ldi	r25, 0xFF	; 255
     610:	91 b9       	out	0x01, r25	; 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;  //configure ports for output
     616:	97 b9       	out	0x07, r25	; 7
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
     618:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, PD1); // SDA pull-up
     61a:	59 9a       	sbi	0x0b, 1	; 11
	DDRD = 0b11110011;  //configure ports for output
     61c:	83 ef       	ldi	r24, 0xF3	; 243
     61e:	8a b9       	out	0x0a, r24	; 10
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
     620:	8e ef       	ldi	r24, 0xFE	; 254
     622:	8d b9       	out	0x0d, r24	; 13
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
     624:	a5 9a       	sbi	0x14, 5	; 20
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
     626:	9d 98       	cbi	0x13, 5	; 19
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
     628:	80 93 01 01 	sts	0x0101, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
     62c:	80 93 04 01 	sts	0x0104, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
     630:	08 95       	ret

00000632 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
	}
     632:	08 95       	ret

00000634 <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     634:	2e 9a       	sbi	0x05, 6	; 5
     636:	08 95       	ret

00000638 <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     638:	2e 98       	cbi	0x05, 6	; 5
     63a:	08 95       	ret

0000063c <button_pressed>:


//*****************BUTTON****************
int button_pressed(void)
	{
	return (bit_is_clear(PING, 5));
     63c:	22 b3       	in	r18, 0x12	; 18
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	85 e0       	ldi	r24, 0x05	; 5
     642:	36 95       	lsr	r19
     644:	27 95       	ror	r18
     646:	8a 95       	dec	r24
     648:	e1 f7       	brne	.-8      	; 0x642 <button_pressed+0x6>
     64a:	20 95       	com	r18
     64c:	30 95       	com	r19
     64e:	21 70       	andi	r18, 0x01	; 1
     650:	30 70       	andi	r19, 0x00	; 0
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
     652:	c9 01       	movw	r24, r18
     654:	08 95       	ret

00000656 <cos_SoR>:
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
	if (degrees >= 0)//positive angles
     656:	97 fd       	sbrc	r25, 7
     658:	10 c0       	rjmp	.+32     	; 0x67a <cos_SoR+0x24>
		return angtable[degrees/5];
     65a:	25 e0       	ldi	r18, 0x05	; 5
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	0e 94 c9 09 	call	0x1392	; 0x1392 <__divmodsi4>
     666:	da 01       	movw	r26, r20
     668:	c9 01       	movw	r24, r18
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	80 50       	subi	r24, 0x00	; 0
     670:	9e 4f       	sbci	r25, 0xFE	; 254
     672:	fc 01       	movw	r30, r24
     674:	20 81       	ld	r18, Z
     676:	31 81       	ldd	r19, Z+1	; 0x01
     678:	17 c0       	rjmp	.+46     	; 0x6a8 <cos_SoR+0x52>
	else
		return -angtable[72-(-degrees)/5];
     67a:	25 e0       	ldi	r18, 0x05	; 5
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	0e 94 c9 09 	call	0x1392	; 0x1392 <__divmodsi4>
     686:	da 01       	movw	r26, r20
     688:	c9 01       	movw	r24, r18
     68a:	88 5b       	subi	r24, 0xB8	; 184
     68c:	9f 4f       	sbci	r25, 0xFF	; 255
     68e:	af 4f       	sbci	r26, 0xFF	; 255
     690:	bf 4f       	sbci	r27, 0xFF	; 255
     692:	88 0f       	add	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	80 50       	subi	r24, 0x00	; 0
     698:	9e 4f       	sbci	r25, 0xFE	; 254
     69a:	fc 01       	movw	r30, r24
     69c:	80 81       	ld	r24, Z
     69e:	91 81       	ldd	r25, Z+1	; 0x01
     6a0:	22 27       	eor	r18, r18
     6a2:	33 27       	eor	r19, r19
     6a4:	28 1b       	sub	r18, r24
     6a6:	39 0b       	sbc	r19, r25
	}
     6a8:	c9 01       	movw	r24, r18
     6aa:	08 95       	ret

000006ac <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
	degrees=degrees - 90;//phase shift 90 degrees
     6ac:	6a 55       	subi	r22, 0x5A	; 90
     6ae:	70 40       	sbci	r23, 0x00	; 0
     6b0:	80 40       	sbci	r24, 0x00	; 0
     6b2:	90 40       	sbci	r25, 0x00	; 0

	if (degrees >= 0)//positive angles
     6b4:	97 fd       	sbrc	r25, 7
     6b6:	10 c0       	rjmp	.+32     	; 0x6d8 <sin_SoR+0x2c>
		return angtable[degrees/5];
     6b8:	25 e0       	ldi	r18, 0x05	; 5
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	0e 94 c9 09 	call	0x1392	; 0x1392 <__divmodsi4>
     6c4:	da 01       	movw	r26, r20
     6c6:	c9 01       	movw	r24, r18
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	80 50       	subi	r24, 0x00	; 0
     6ce:	9e 4f       	sbci	r25, 0xFE	; 254
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 81       	ld	r18, Z
     6d4:	31 81       	ldd	r19, Z+1	; 0x01
     6d6:	17 c0       	rjmp	.+46     	; 0x706 <sin_SoR+0x5a>
	else
		return -angtable[72-(-degrees)/5];
     6d8:	25 e0       	ldi	r18, 0x05	; 5
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	0e 94 c9 09 	call	0x1392	; 0x1392 <__divmodsi4>
     6e4:	da 01       	movw	r26, r20
     6e6:	c9 01       	movw	r24, r18
     6e8:	88 5b       	subi	r24, 0xB8	; 184
     6ea:	9f 4f       	sbci	r25, 0xFF	; 255
     6ec:	af 4f       	sbci	r26, 0xFF	; 255
     6ee:	bf 4f       	sbci	r27, 0xFF	; 255
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	80 50       	subi	r24, 0x00	; 0
     6f6:	9e 4f       	sbci	r25, 0xFE	; 254
     6f8:	fc 01       	movw	r30, r24
     6fa:	80 81       	ld	r24, Z
     6fc:	91 81       	ldd	r25, Z+1	; 0x01
     6fe:	22 27       	eor	r18, r18
     700:	33 27       	eor	r19, r19
     702:	28 1b       	sub	r18, r24
     704:	39 0b       	sbc	r19, r25
	}
     706:	c9 01       	movw	r24, r18
     708:	08 95       	ret

0000070a <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	6b 01       	movw	r12, r22
     718:	7c 01       	movw	r14, r24
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
     71a:	8a e5       	ldi	r24, 0x5A	; 90
     71c:	c8 16       	cp	r12, r24
     71e:	d1 04       	cpc	r13, r1
     720:	e1 04       	cpc	r14, r1
     722:	f1 04       	cpc	r15, r1
     724:	a1 f1       	breq	.+104    	; 0x78e <tan_SoR+0x84>
     726:	86 ea       	ldi	r24, 0xA6	; 166
     728:	c8 16       	cp	r12, r24
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	d8 06       	cpc	r13, r24
     72e:	8f ef       	ldi	r24, 0xFF	; 255
     730:	e8 06       	cpc	r14, r24
     732:	8f ef       	ldi	r24, 0xFF	; 255
     734:	f8 06       	cpc	r15, r24
     736:	59 f1       	breq	.+86     	; 0x78e <tan_SoR+0x84>
     738:	8e e0       	ldi	r24, 0x0E	; 14
     73a:	c8 16       	cp	r12, r24
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	d8 06       	cpc	r13, r24
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	e8 06       	cpc	r14, r24
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	f8 06       	cpc	r15, r24
     748:	11 f1       	breq	.+68     	; 0x78e <tan_SoR+0x84>
     74a:	82 ef       	ldi	r24, 0xF2	; 242
     74c:	c8 16       	cp	r12, r24
     74e:	8e ef       	ldi	r24, 0xFE	; 254
     750:	d8 06       	cpc	r13, r24
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	e8 06       	cpc	r14, r24
     756:	8f ef       	ldi	r24, 0xFF	; 255
     758:	f8 06       	cpc	r15, r24
     75a:	c9 f0       	breq	.+50     	; 0x78e <tan_SoR+0x84>
		return 0;//what else should I return?!?!?
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
     75c:	c7 01       	movw	r24, r14
     75e:	b6 01       	movw	r22, r12
     760:	0e 94 56 03 	call	0x6ac	; 0x6ac <sin_SoR>
     764:	8c 01       	movw	r16, r24
     766:	c7 01       	movw	r24, r14
     768:	b6 01       	movw	r22, r12
     76a:	0e 94 2b 03 	call	0x656	; 0x656 <cos_SoR>
     76e:	bc 01       	movw	r22, r24
     770:	c8 01       	movw	r24, r16
     772:	0e 94 94 09 	call	0x1328	; 0x1328 <__divmodhi4>
     776:	cb 01       	movw	r24, r22
     778:	9b 01       	movw	r18, r22
     77a:	73 e0       	ldi	r23, 0x03	; 3
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	7a 95       	dec	r23
     782:	e1 f7       	brne	.-8      	; 0x77c <tan_SoR+0x72>
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	28 0f       	add	r18, r24
     78a:	39 1f       	adc	r19, r25
     78c:	02 c0       	rjmp	.+4      	; 0x792 <tan_SoR+0x88>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
	}
     792:	c9 01       	movw	r24, r18
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	df 90       	pop	r13
     79e:	cf 90       	pop	r12
     7a0:	08 95       	ret

000007a2 <get_intpos>:
  ax12Init(1000000);
//  Serial.begin(115200);

}

int get_intpos(int degree){
     7a2:	aa 27       	eor	r26, r26
     7a4:	97 fd       	sbrc	r25, 7
     7a6:	a0 95       	com	r26
     7a8:	ba 2f       	mov	r27, r26
     7aa:	bc 01       	movw	r22, r24
     7ac:	cd 01       	movw	r24, r26
     7ae:	0e 94 a5 08 	call	0x114a	; 0x114a <__floatsisf>
     7b2:	28 e9       	ldi	r18, 0x98	; 152
     7b4:	3e e6       	ldi	r19, 0x6E	; 110
     7b6:	4a e5       	ldi	r20, 0x5A	; 90
     7b8:	50 e4       	ldi	r21, 0x40	; 64
     7ba:	0e 94 31 09 	call	0x1262	; 0x1262 <__mulsf3>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e8       	ldi	r20, 0x80	; 128
     7c4:	5f e3       	ldi	r21, 0x3F	; 63
     7c6:	0e 94 0d 08 	call	0x101a	; 0x101a <__subsf3>
     7ca:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fixsfsi>
  return (int)(3.413*(float)degree - 1.0f);
}
     7ce:	cb 01       	movw	r24, r22
     7d0:	08 95       	ret

000007d2 <loop>:

void loop(){


  SetPosition(1, 511);
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	6e e1       	ldi	r22, 0x1E	; 30
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	4f ef       	ldi	r20, 0xFF	; 255
     7dc:	51 e0       	ldi	r21, 0x01	; 1
     7de:	0e 94 14 07 	call	0xe28	; 0xe28 <ax12SetRegister2>
  SetPosition(5, 511);
     7e2:	85 e0       	ldi	r24, 0x05	; 5
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	6e e1       	ldi	r22, 0x1E	; 30
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	4f ef       	ldi	r20, 0xFF	; 255
     7ec:	51 e0       	ldi	r21, 0x01	; 1
     7ee:	0e 94 14 07 	call	0xe28	; 0xe28 <ax12SetRegister2>
  SetPosition(9, 511);
     7f2:	89 e0       	ldi	r24, 0x09	; 9
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	6e e1       	ldi	r22, 0x1E	; 30
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	4f ef       	ldi	r20, 0xFF	; 255
     7fc:	51 e0       	ldi	r21, 0x01	; 1
     7fe:	0e 94 14 07 	call	0xe28	; 0xe28 <ax12SetRegister2>
  SetPosition(13, 511);
     802:	8d e0       	ldi	r24, 0x0D	; 13
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	6e e1       	ldi	r22, 0x1E	; 30
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	4f ef       	ldi	r20, 0xFF	; 255
     80c:	51 e0       	ldi	r21, 0x01	; 1
     80e:	0e 94 14 07 	call	0xe28	; 0xe28 <ax12SetRegister2>
  SetPosition(4, 511);
  SetPosition(8, 511);
  SetPosition(12, 511);
  SetPosition(16, 511);
  */
}
     812:	08 95       	ret

00000814 <setup>:
#include <SoR_Utils.h>
#include <ax12.h>


void setup(){
  ax12Init(1000000);
     814:	60 e4       	ldi	r22, 0x40	; 64
     816:	72 e4       	ldi	r23, 0x42	; 66
     818:	8f e0       	ldi	r24, 0x0F	; 15
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 ef 04 	call	0x9de	; 0x9de <ax12Init>
//  Serial.begin(115200);

}
     820:	08 95       	ret

00000822 <main>:
#include <SoR_Utils.h>
#include <ax12.h>


void setup(){
  ax12Init(1000000);
     822:	60 e4       	ldi	r22, 0x40	; 64
     824:	72 e4       	ldi	r23, 0x42	; 66
     826:	8f e0       	ldi	r24, 0x0F	; 15
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 ef 04 	call	0x9de	; 0x9de <ax12Init>
int main(){
	
	setup();
	
	while(1){
		loop();
     82e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <loop>
     832:	fd cf       	rjmp	.-6      	; 0x82e <main+0xc>

00000834 <setTX>:
  #else
    // emulate half-duplex on ArbotiX, ArbotiX w/ RX Bridge
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitClear(UCSR1B, RXEN1);    
     834:	e9 ec       	ldi	r30, 0xC9	; 201
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	8f 7e       	andi	r24, 0xEF	; 239
     83c:	80 83       	st	Z, r24
    bitSet(UCSR1B, TXEN1);
     83e:	80 81       	ld	r24, Z
     840:	88 60       	ori	r24, 0x08	; 8
     842:	80 83       	st	Z, r24
    bitClear(UCSR1B, RXCIE1);
     844:	80 81       	ld	r24, Z
     846:	8f 77       	andi	r24, 0x7F	; 127
     848:	80 83       	st	Z, r24
    ax_tx_Pointer = 0;
     84a:	10 92 d7 02 	sts	0x02D7, r1
     84e:	10 92 d6 02 	sts	0x02D6, r1
  #endif
}
     852:	08 95       	ret

00000854 <setRX>:
      while (bit_is_clear(UCSR1A, UDRE1));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR1B, TXEN1);
     854:	e9 ec       	ldi	r30, 0xC9	; 201
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	87 7f       	andi	r24, 0xF7	; 247
     85c:	80 83       	st	Z, r24
    bitSet(UCSR1B, RXEN1);
     85e:	80 81       	ld	r24, Z
     860:	80 61       	ori	r24, 0x10	; 16
     862:	80 83       	st	Z, r24
    bitSet(UCSR1B, RXCIE1);
     864:	80 81       	ld	r24, Z
     866:	80 68       	ori	r24, 0x80	; 128
     868:	80 83       	st	Z, r24
    ax_rx_int_Pointer = 0;
     86a:	10 92 f9 02 	sts	0x02F9, r1
     86e:	10 92 f8 02 	sts	0x02F8, r1
    ax_rx_Pointer = 0;
     872:	10 92 d3 02 	sts	0x02D3, r1
     876:	10 92 d2 02 	sts	0x02D2, r1
  #endif  
}
     87a:	08 95       	ret

0000087c <setTXall>:
    setAX_WR();
  #else
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitClear(UCSR1B, RXEN1);    
     87c:	e9 ec       	ldi	r30, 0xC9	; 201
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	8f 7e       	andi	r24, 0xEF	; 239
     884:	80 83       	st	Z, r24
    bitSet(UCSR1B, TXEN1);
     886:	80 81       	ld	r24, Z
     888:	88 60       	ori	r24, 0x08	; 8
     88a:	80 83       	st	Z, r24
    bitClear(UCSR1B, RXCIE1);
     88c:	80 81       	ld	r24, Z
     88e:	8f 77       	andi	r24, 0x7F	; 127
     890:	80 83       	st	Z, r24
    ax_tx_Pointer = 0;
     892:	10 92 d7 02 	sts	0x02D7, r1
     896:	10 92 d6 02 	sts	0x02D6, r1
  #endif
}
     89a:	08 95       	ret

0000089c <ax12write>:

/** Sends a character out the serial port. */
void ax12write(unsigned char data){
     89c:	98 2f       	mov	r25, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     89e:	80 91 c8 00 	lds	r24, 0x00C8
     8a2:	85 ff       	sbrs	r24, 5
     8a4:	fc cf       	rjmp	.-8      	; 0x89e <ax12write+0x2>
    UDR1 = data;
     8a6:	90 93 ce 00 	sts	0x00CE, r25
}
     8aa:	08 95       	ret

000008ac <ax12writeB>:
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
     8ac:	28 2f       	mov	r18, r24
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     8ae:	80 91 d6 02 	lds	r24, 0x02D6
     8b2:	90 91 d7 02 	lds	r25, 0x02D7
     8b6:	fc 01       	movw	r30, r24
     8b8:	ee 56       	subi	r30, 0x6E	; 110
     8ba:	fd 4f       	sbci	r31, 0xFD	; 253
     8bc:	20 83       	st	Z, r18
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	90 93 d7 02 	sts	0x02D7, r25
     8c4:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     8c8:	80 91 c8 00 	lds	r24, 0x00C8
     8cc:	85 ff       	sbrs	r24, 5
     8ce:	fc cf       	rjmp	.-8      	; 0x8c8 <ax12writeB+0x1c>
    UDR1 = data;
     8d0:	20 93 ce 00 	sts	0x00CE, r18
}
     8d4:	08 95       	ret

000008d6 <__vector_36>:
/** We have a one-way recieve buffer, which is reset after each packet is receieved.
    A wrap-around buffer does not appear to be fast enough to catch all bytes at 1Mbps. */
ISR(USART1_RX_vect){
     8d6:	1f 92       	push	r1
     8d8:	0f 92       	push	r0
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	0f 92       	push	r0
     8de:	0b b6       	in	r0, 0x3b	; 59
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	2f 93       	push	r18
     8e6:	8f 93       	push	r24
     8e8:	9f 93       	push	r25
     8ea:	ef 93       	push	r30
     8ec:	ff 93       	push	r31
    ax_rx_int_buffer[(ax_rx_int_Pointer++)] = UDR1;
     8ee:	80 91 f8 02 	lds	r24, 0x02F8
     8f2:	90 91 f9 02 	lds	r25, 0x02F9
     8f6:	20 91 ce 00 	lds	r18, 0x00CE
     8fa:	fc 01       	movw	r30, r24
     8fc:	ee 54       	subi	r30, 0x4E	; 78
     8fe:	fd 4f       	sbci	r31, 0xFD	; 253
     900:	20 83       	st	Z, r18
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	90 93 f9 02 	sts	0x02F9, r25
     908:	80 93 f8 02 	sts	0x02F8, r24
}
     90c:	ff 91       	pop	r31
     90e:	ef 91       	pop	r30
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	2f 91       	pop	r18
     916:	0f 90       	pop	r0
     918:	0b be       	out	0x3b, r0	; 59
     91a:	0f 90       	pop	r0
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	0f 90       	pop	r0
     920:	1f 90       	pop	r1
     922:	18 95       	reti

00000924 <ax12ReadPacket>:

/** read back the error code for our latest packet read */
int ax12Error;
/** > 0 = success */
int ax12ReadPacket(int length){
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	0f 92       	push	r0
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	8c 01       	movw	r16, r24
    unsigned char offset, blength, checksum, timeout;
    unsigned char volatile bcount; 

    offset = 0;
    timeout = 0;
    bcount = 0;
     934:	19 82       	std	Y+1, r1	; 0x01
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	1b c0       	rjmp	.+54     	; 0x970 <ax12ReadPacket+0x4c>
    while(bcount < length){
     93a:	4f 5f       	subi	r20, 0xFF	; 255
     93c:	5f 4f       	sbci	r21, 0xFF	; 255
        ulCounter = 0;
        while((bcount + offset) == ax_rx_int_Pointer){
            if(ulCounter++ > 1000L){ // was 3000
     93e:	83 e0       	ldi	r24, 0x03	; 3
     940:	4a 3e       	cpi	r20, 0xEA	; 234
     942:	58 07       	cpc	r21, r24
     944:	f9 f0       	breq	.+62     	; 0x984 <ax12ReadPacket+0x60>
    offset = 0;
    timeout = 0;
    bcount = 0;
    while(bcount < length){
        ulCounter = 0;
        while((bcount + offset) == ax_rx_int_Pointer){
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	20 91 f8 02 	lds	r18, 0x02F8
     94c:	30 91 f9 02 	lds	r19, 0x02F9
     950:	fd 01       	movw	r30, r26
     952:	e8 0f       	add	r30, r24
     954:	f1 1d       	adc	r31, r1
     956:	e2 17       	cp	r30, r18
     958:	f3 07       	cpc	r31, r19
     95a:	79 f3       	breq	.-34     	; 0x93a <ax12ReadPacket+0x16>
     95c:	31 c0       	rjmp	.+98     	; 0x9c0 <ax12ReadPacket+0x9c>
                break;
            }
        }
        if(timeout) break;
        ax_rx_buffer[bcount] = ax_rx_int_buffer[bcount + offset];
        if((bcount == 0) && (ax_rx_buffer[0] != 0xff))
     95e:	80 91 d8 02 	lds	r24, 0x02D8
     962:	8f 3f       	cpi	r24, 0xFF	; 255
     964:	11 f0       	breq	.+4      	; 0x96a <ax12ReadPacket+0x46>
            offset++;
     966:	6f 5f       	subi	r22, 0xFF	; 255
     968:	03 c0       	rjmp	.+6      	; 0x970 <ax12ReadPacket+0x4c>
        else
            bcount++;
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	8f 5f       	subi	r24, 0xFF	; 255
     96e:	89 83       	std	Y+1, r24	; 0x01
    unsigned char volatile bcount; 

    offset = 0;
    timeout = 0;
    bcount = 0;
    while(bcount < length){
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	80 17       	cp	r24, r16
     976:	91 07       	cpc	r25, r17
     978:	2c f4       	brge	.+10     	; 0x984 <ax12ReadPacket+0x60>
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e0       	ldi	r21, 0x00	; 0
        ulCounter = 0;
        while((bcount + offset) == ax_rx_int_Pointer){
     97e:	a6 2f       	mov	r26, r22
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	e1 cf       	rjmp	.-62     	; 0x946 <ax12ReadPacket+0x22>
            offset++;
        else
            bcount++;
    }

    blength = bcount;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	22 e0       	ldi	r18, 0x02	; 2
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	07 c0       	rjmp	.+14     	; 0x99a <ax12ReadPacket+0x76>
    checksum = 0;
    for(offset=2;offset<bcount;offset++)
        checksum += ax_rx_buffer[offset];
     98c:	e2 2f       	mov	r30, r18
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	e8 52       	subi	r30, 0x28	; 40
     992:	fd 4f       	sbci	r31, 0xFD	; 253
     994:	80 81       	ld	r24, Z
     996:	98 0f       	add	r25, r24
            bcount++;
    }

    blength = bcount;
    checksum = 0;
    for(offset=2;offset<bcount;offset++)
     998:	2f 5f       	subi	r18, 0xFF	; 255
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	28 17       	cp	r18, r24
     99e:	b0 f3       	brcs	.-20     	; 0x98c <ax12ReadPacket+0x68>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	89 2f       	mov	r24, r25
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	8f 3f       	cpi	r24, 0xFF	; 255
     9aa:	91 05       	cpc	r25, r1
     9ac:	11 f4       	brne	.+4      	; 0x9b2 <ax12ReadPacket+0x8e>
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	30 e0       	ldi	r19, 0x00	; 0
    if((checksum%256) != 255){
        return 0;
    }else{
        return 1;
    }
}
     9b2:	c9 01       	movw	r24, r18
     9b4:	0f 90       	pop	r0
     9b6:	cf 91       	pop	r28
     9b8:	df 91       	pop	r29
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	08 95       	ret
                timeout = 1;
                break;
            }
        }
        if(timeout) break;
        ax_rx_buffer[bcount] = ax_rx_int_buffer[bcount + offset];
     9c0:	e9 81       	ldd	r30, Y+1	; 0x01
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	e8 52       	subi	r30, 0x28	; 40
     9c8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ca:	ae 54       	subi	r26, 0x4E	; 78
     9cc:	bd 4f       	sbci	r27, 0xFD	; 253
     9ce:	a8 0f       	add	r26, r24
     9d0:	b1 1d       	adc	r27, r1
     9d2:	8c 91       	ld	r24, X
     9d4:	80 83       	st	Z, r24
        if((bcount == 0) && (ax_rx_buffer[0] != 0xff))
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	88 23       	and	r24, r24
     9da:	39 f6       	brne	.-114    	; 0x96a <ax12ReadPacket+0x46>
     9dc:	c0 cf       	rjmp	.-128    	; 0x95e <ax12ReadPacket+0x3a>

000009de <ax12Init>:
        return 1;
    }
}

/** initializes serial1 transmit at baud, 8-N-1 */
void ax12Init(long baud){
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
    //UBRR1H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    //UBRR1L = ((F_CPU / 16 + baud / 2) / baud - 1);
    UBRR1H = (F_CPU / (8 * baud) - 1 ) >> 8;
     9e2:	63 e0       	ldi	r22, 0x03	; 3
     9e4:	22 0f       	add	r18, r18
     9e6:	33 1f       	adc	r19, r19
     9e8:	44 1f       	adc	r20, r20
     9ea:	55 1f       	adc	r21, r21
     9ec:	6a 95       	dec	r22
     9ee:	d1 f7       	brne	.-12     	; 0x9e4 <ax12Init+0x6>
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	74 e2       	ldi	r23, 0x24	; 36
     9f4:	84 ef       	ldi	r24, 0xF4	; 244
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 a7 09 	call	0x134e	; 0x134e <__udivmodsi4>
     9fc:	c9 01       	movw	r24, r18
     9fe:	da 01       	movw	r26, r20
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	a1 09       	sbc	r26, r1
     a04:	b1 09       	sbc	r27, r1
     a06:	29 2f       	mov	r18, r25
     a08:	3a 2f       	mov	r19, r26
     a0a:	4b 2f       	mov	r20, r27
     a0c:	55 27       	eor	r21, r21
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	a1 1d       	adc	r26, r1
     a12:	b1 1d       	adc	r27, r1
     a14:	20 93 cd 00 	sts	0x00CD, r18
    UBRR1L = (F_CPU / (8 * baud) - 1 );
     a18:	81 50       	subi	r24, 0x01	; 1
     a1a:	80 93 cc 00 	sts	0x00CC, r24
    bitSet(UCSR1A, U2X1);
     a1e:	e8 ec       	ldi	r30, 0xC8	; 200
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	82 60       	ori	r24, 0x02	; 2
     a26:	80 83       	st	Z, r24
    ax_rx_int_Pointer = 0;
     a28:	10 92 f9 02 	sts	0x02F9, r1
     a2c:	10 92 f8 02 	sts	0x02F8, r1
    ax_rx_Pointer = 0;
     a30:	10 92 d3 02 	sts	0x02D3, r1
     a34:	10 92 d2 02 	sts	0x02D2, r1
    ax_tx_Pointer = 0;
     a38:	10 92 d7 02 	sts	0x02D7, r1
     a3c:	10 92 d6 02 	sts	0x02D6, r1
      while (bit_is_clear(UCSR1A, UDRE1));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR1B, TXEN1);
     a40:	e9 ec       	ldi	r30, 0xC9	; 201
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	87 7f       	andi	r24, 0xF7	; 247
     a48:	80 83       	st	Z, r24
    bitSet(UCSR1B, RXEN1);
     a4a:	80 81       	ld	r24, Z
     a4c:	80 61       	ori	r24, 0x10	; 16
     a4e:	80 83       	st	Z, r24
    bitSet(UCSR1B, RXCIE1);
     a50:	80 81       	ld	r24, Z
     a52:	80 68       	ori	r24, 0x80	; 128
     a54:	80 83       	st	Z, r24
    ax_rx_int_Pointer = 0;
     a56:	10 92 f9 02 	sts	0x02F9, r1
     a5a:	10 92 f8 02 	sts	0x02F8, r1
    ax_rx_Pointer = 0;
     a5e:	10 92 d3 02 	sts	0x02D3, r1
     a62:	10 92 d2 02 	sts	0x02D2, r1
    PORTD &= 0xEF;  // Servo B low
  #endif
    // enable rx
    setRX(0);    
#endif
}
     a66:	08 95       	ret

00000a68 <ax12GetRegister>:
/******************************************************************************
 * Packet Level
 */

/** Read register value(s) */
int ax12GetRegister(int id, int regstart, int length){  
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	dc 01       	movw	r26, r24
     a6e:	ea 01       	movw	r28, r20
  #else
    // emulate half-duplex on ArbotiX, ArbotiX w/ RX Bridge
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitClear(UCSR1B, RXEN1);    
     a70:	80 91 c9 00 	lds	r24, 0x00C9
     a74:	8f 7e       	andi	r24, 0xEF	; 239
     a76:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, TXEN1);
     a7a:	80 91 c9 00 	lds	r24, 0x00C9
     a7e:	88 60       	ori	r24, 0x08	; 8
     a80:	80 93 c9 00 	sts	0x00C9, r24
    bitClear(UCSR1B, RXCIE1);
     a84:	80 91 c9 00 	lds	r24, 0x00C9
     a88:	8f 77       	andi	r24, 0x7F	; 127
     a8a:	80 93 c9 00 	sts	0x00C9, r24
    ax_tx_Pointer = 0;
     a8e:	10 92 d7 02 	sts	0x02D7, r1
     a92:	10 92 d6 02 	sts	0x02D6, r1
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     a96:	80 91 d6 02 	lds	r24, 0x02D6
     a9a:	90 91 d7 02 	lds	r25, 0x02D7
     a9e:	fc 01       	movw	r30, r24
     aa0:	ee 56       	subi	r30, 0x6E	; 110
     aa2:	fd 4f       	sbci	r31, 0xFD	; 253
     aa4:	2f ef       	ldi	r18, 0xFF	; 255
     aa6:	20 83       	st	Z, r18
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	90 93 d7 02 	sts	0x02D7, r25
     aae:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     ab2:	80 91 c8 00 	lds	r24, 0x00C8
     ab6:	85 ff       	sbrs	r24, 5
     ab8:	fc cf       	rjmp	.-8      	; 0xab2 <ax12GetRegister+0x4a>
    UDR1 = data;
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	80 93 ce 00 	sts	0x00CE, r24
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     ac0:	20 91 d6 02 	lds	r18, 0x02D6
     ac4:	30 91 d7 02 	lds	r19, 0x02D7
     ac8:	f9 01       	movw	r30, r18
     aca:	ee 56       	subi	r30, 0x6E	; 110
     acc:	fd 4f       	sbci	r31, 0xFD	; 253
     ace:	80 83       	st	Z, r24
     ad0:	2f 5f       	subi	r18, 0xFF	; 255
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	30 93 d7 02 	sts	0x02D7, r19
     ad8:	20 93 d6 02 	sts	0x02D6, r18
    while (bit_is_clear(UCSR1A, UDRE1));
     adc:	80 91 c8 00 	lds	r24, 0x00C8
     ae0:	85 ff       	sbrs	r24, 5
     ae2:	fc cf       	rjmp	.-8      	; 0xadc <ax12GetRegister+0x74>
    UDR1 = data;
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	80 93 ce 00 	sts	0x00CE, r24
    setTX(id);
    // 0xFF 0xFF ID LENGTH INSTRUCTION PARAM... CHECKSUM    
    int checksum = ~((id + 6 + regstart + length)%256);
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
     aea:	2a 2f       	mov	r18, r26
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     aec:	80 91 d6 02 	lds	r24, 0x02D6
     af0:	90 91 d7 02 	lds	r25, 0x02D7
     af4:	fc 01       	movw	r30, r24
     af6:	ee 56       	subi	r30, 0x6E	; 110
     af8:	fd 4f       	sbci	r31, 0xFD	; 253
     afa:	a0 83       	st	Z, r26
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	90 93 d7 02 	sts	0x02D7, r25
     b02:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     b06:	80 91 c8 00 	lds	r24, 0x00C8
     b0a:	85 ff       	sbrs	r24, 5
     b0c:	fc cf       	rjmp	.-8      	; 0xb06 <ax12GetRegister+0x9e>
    UDR1 = data;
     b0e:	20 93 ce 00 	sts	0x00CE, r18
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     b12:	80 91 d6 02 	lds	r24, 0x02D6
     b16:	90 91 d7 02 	lds	r25, 0x02D7
     b1a:	fc 01       	movw	r30, r24
     b1c:	ee 56       	subi	r30, 0x6E	; 110
     b1e:	fd 4f       	sbci	r31, 0xFD	; 253
     b20:	24 e0       	ldi	r18, 0x04	; 4
     b22:	20 83       	st	Z, r18
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	90 93 d7 02 	sts	0x02D7, r25
     b2a:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     b2e:	80 91 c8 00 	lds	r24, 0x00C8
     b32:	85 ff       	sbrs	r24, 5
     b34:	fc cf       	rjmp	.-8      	; 0xb2e <ax12GetRegister+0xc6>
    UDR1 = data;
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	80 93 ce 00 	sts	0x00CE, r24
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     b3c:	80 91 d6 02 	lds	r24, 0x02D6
     b40:	90 91 d7 02 	lds	r25, 0x02D7
     b44:	fc 01       	movw	r30, r24
     b46:	ee 56       	subi	r30, 0x6E	; 110
     b48:	fd 4f       	sbci	r31, 0xFD	; 253
     b4a:	22 e0       	ldi	r18, 0x02	; 2
     b4c:	20 83       	st	Z, r18
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	90 93 d7 02 	sts	0x02D7, r25
     b54:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     b58:	80 91 c8 00 	lds	r24, 0x00C8
     b5c:	85 ff       	sbrs	r24, 5
     b5e:	fc cf       	rjmp	.-8      	; 0xb58 <ax12GetRegister+0xf0>
    UDR1 = data;
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	80 93 ce 00 	sts	0x00CE, r24
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(4);    // length
    ax12writeB(AX_READ_DATA);
    ax12writeB(regstart);
     b66:	26 2f       	mov	r18, r22
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     b68:	80 91 d6 02 	lds	r24, 0x02D6
     b6c:	90 91 d7 02 	lds	r25, 0x02D7
     b70:	fc 01       	movw	r30, r24
     b72:	ee 56       	subi	r30, 0x6E	; 110
     b74:	fd 4f       	sbci	r31, 0xFD	; 253
     b76:	60 83       	st	Z, r22
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	90 93 d7 02 	sts	0x02D7, r25
     b7e:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     b82:	80 91 c8 00 	lds	r24, 0x00C8
     b86:	85 ff       	sbrs	r24, 5
     b88:	fc cf       	rjmp	.-8      	; 0xb82 <ax12GetRegister+0x11a>
    UDR1 = data;
     b8a:	20 93 ce 00 	sts	0x00CE, r18
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(4);    // length
    ax12writeB(AX_READ_DATA);
    ax12writeB(regstart);
    ax12writeB(length);
     b8e:	2c 2f       	mov	r18, r28
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     b90:	80 91 d6 02 	lds	r24, 0x02D6
     b94:	90 91 d7 02 	lds	r25, 0x02D7
     b98:	fc 01       	movw	r30, r24
     b9a:	ee 56       	subi	r30, 0x6E	; 110
     b9c:	fd 4f       	sbci	r31, 0xFD	; 253
     b9e:	c0 83       	st	Z, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	90 93 d7 02 	sts	0x02D7, r25
     ba6:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     baa:	80 91 c8 00 	lds	r24, 0x00C8
     bae:	85 ff       	sbrs	r24, 5
     bb0:	fc cf       	rjmp	.-8      	; 0xbaa <ax12GetRegister+0x142>
    UDR1 = data;
     bb2:	20 93 ce 00 	sts	0x00CE, r18
    ax12writeB(id);
    ax12writeB(4);    // length
    ax12writeB(AX_READ_DATA);
    ax12writeB(regstart);
    ax12writeB(length);
    ax12writeB(checksum);  
     bb6:	16 96       	adiw	r26, 0x06	; 6
     bb8:	a6 0f       	add	r26, r22
     bba:	b7 1f       	adc	r27, r23
     bbc:	cd 01       	movw	r24, r26
     bbe:	8c 0f       	add	r24, r28
     bc0:	9d 1f       	adc	r25, r29
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	0e 94 94 09 	call	0x1328	; 0x1328 <__divmodhi4>
     bca:	80 95       	com	r24
     bcc:	90 95       	com	r25
     bce:	98 2f       	mov	r25, r24
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     bd0:	20 91 d6 02 	lds	r18, 0x02D6
     bd4:	30 91 d7 02 	lds	r19, 0x02D7
     bd8:	f9 01       	movw	r30, r18
     bda:	ee 56       	subi	r30, 0x6E	; 110
     bdc:	fd 4f       	sbci	r31, 0xFD	; 253
     bde:	80 83       	st	Z, r24
     be0:	2f 5f       	subi	r18, 0xFF	; 255
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	30 93 d7 02 	sts	0x02D7, r19
     be8:	20 93 d6 02 	sts	0x02D6, r18
    while (bit_is_clear(UCSR1A, UDRE1));
     bec:	80 91 c8 00 	lds	r24, 0x00C8
     bf0:	85 ff       	sbrs	r24, 5
     bf2:	fc cf       	rjmp	.-8      	; 0xbec <ax12GetRegister+0x184>
    UDR1 = data;
     bf4:	90 93 ce 00 	sts	0x00CE, r25
      while (bit_is_clear(UCSR1A, UDRE1));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR1B, TXEN1);
     bf8:	80 91 c9 00 	lds	r24, 0x00C9
     bfc:	87 7f       	andi	r24, 0xF7	; 247
     bfe:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, RXEN1);
     c02:	80 91 c9 00 	lds	r24, 0x00C9
     c06:	80 61       	ori	r24, 0x10	; 16
     c08:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, RXCIE1);
     c0c:	80 91 c9 00 	lds	r24, 0x00C9
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	80 93 c9 00 	sts	0x00C9, r24
    ax_rx_int_Pointer = 0;
     c16:	10 92 f9 02 	sts	0x02F9, r1
     c1a:	10 92 f8 02 	sts	0x02F8, r1
    ax_rx_Pointer = 0;
     c1e:	10 92 d3 02 	sts	0x02D3, r1
     c22:	10 92 d2 02 	sts	0x02D2, r1
    ax12writeB(AX_READ_DATA);
    ax12writeB(regstart);
    ax12writeB(length);
    ax12writeB(checksum);  
    setRX(id);    
    if(ax12ReadPacket(length + 6) > 0){
     c26:	ce 01       	movw	r24, r28
     c28:	06 96       	adiw	r24, 0x06	; 6
     c2a:	0e 94 92 04 	call	0x924	; 0x924 <ax12ReadPacket>
     c2e:	18 16       	cp	r1, r24
     c30:	19 06       	cpc	r1, r25
     c32:	1c f0       	brlt	.+6      	; 0xc3a <ax12GetRegister+0x1d2>
     c34:	2f ef       	ldi	r18, 0xFF	; 255
     c36:	3f ef       	ldi	r19, 0xFF	; 255
     c38:	16 c0       	rjmp	.+44     	; 0xc66 <ax12GetRegister+0x1fe>
        ax12Error = ax_rx_buffer[4];
     c3a:	80 91 dc 02 	lds	r24, 0x02DC
     c3e:	80 93 d4 02 	sts	0x02D4, r24
     c42:	10 92 d5 02 	sts	0x02D5, r1
        if(length == 1)
     c46:	21 97       	sbiw	r28, 0x01	; 1
     c48:	29 f4       	brne	.+10     	; 0xc54 <ax12GetRegister+0x1ec>
            return ax_rx_buffer[5];
     c4a:	80 91 dd 02 	lds	r24, 0x02DD
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	09 c0       	rjmp	.+18     	; 0xc66 <ax12GetRegister+0x1fe>
        else
            return ax_rx_buffer[5] + (ax_rx_buffer[6]<<8);
     c54:	90 91 de 02 	lds	r25, 0x02DE
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	20 91 dd 02 	lds	r18, 0x02DD
     c5e:	ac 01       	movw	r20, r24
     c60:	42 0f       	add	r20, r18
     c62:	51 1d       	adc	r21, r1
     c64:	9a 01       	movw	r18, r20
    }else{
        return -1;
    }
}
     c66:	c9 01       	movw	r24, r18
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <ax12SetRegister>:

/* Set the value of a single-byte register. */
void ax12SetRegister(int id, int regstart, int data){
     c6e:	dc 01       	movw	r26, r24
  #else
    // emulate half-duplex on ArbotiX, ArbotiX w/ RX Bridge
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitClear(UCSR1B, RXEN1);    
     c70:	80 91 c9 00 	lds	r24, 0x00C9
     c74:	8f 7e       	andi	r24, 0xEF	; 239
     c76:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, TXEN1);
     c7a:	80 91 c9 00 	lds	r24, 0x00C9
     c7e:	88 60       	ori	r24, 0x08	; 8
     c80:	80 93 c9 00 	sts	0x00C9, r24
    bitClear(UCSR1B, RXCIE1);
     c84:	80 91 c9 00 	lds	r24, 0x00C9
     c88:	8f 77       	andi	r24, 0x7F	; 127
     c8a:	80 93 c9 00 	sts	0x00C9, r24
    ax_tx_Pointer = 0;
     c8e:	10 92 d7 02 	sts	0x02D7, r1
     c92:	10 92 d6 02 	sts	0x02D6, r1
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     c96:	80 91 d6 02 	lds	r24, 0x02D6
     c9a:	90 91 d7 02 	lds	r25, 0x02D7
     c9e:	fc 01       	movw	r30, r24
     ca0:	ee 56       	subi	r30, 0x6E	; 110
     ca2:	fd 4f       	sbci	r31, 0xFD	; 253
     ca4:	2f ef       	ldi	r18, 0xFF	; 255
     ca6:	20 83       	st	Z, r18
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	90 93 d7 02 	sts	0x02D7, r25
     cae:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     cb2:	80 91 c8 00 	lds	r24, 0x00C8
     cb6:	85 ff       	sbrs	r24, 5
     cb8:	fc cf       	rjmp	.-8      	; 0xcb2 <ax12SetRegister+0x44>
    UDR1 = data;
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 93 ce 00 	sts	0x00CE, r24
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     cc0:	20 91 d6 02 	lds	r18, 0x02D6
     cc4:	30 91 d7 02 	lds	r19, 0x02D7
     cc8:	f9 01       	movw	r30, r18
     cca:	ee 56       	subi	r30, 0x6E	; 110
     ccc:	fd 4f       	sbci	r31, 0xFD	; 253
     cce:	80 83       	st	Z, r24
     cd0:	2f 5f       	subi	r18, 0xFF	; 255
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	30 93 d7 02 	sts	0x02D7, r19
     cd8:	20 93 d6 02 	sts	0x02D6, r18
    while (bit_is_clear(UCSR1A, UDRE1));
     cdc:	80 91 c8 00 	lds	r24, 0x00C8
     ce0:	85 ff       	sbrs	r24, 5
     ce2:	fc cf       	rjmp	.-8      	; 0xcdc <ax12SetRegister+0x6e>
    UDR1 = data;
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	80 93 ce 00 	sts	0x00CE, r24
void ax12SetRegister(int id, int regstart, int data){
    setTX(id);    
    int checksum = ~((id + 4 + AX_WRITE_DATA + regstart + (data&0xff)) % 256);
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
     cea:	2a 2f       	mov	r18, r26
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     cec:	80 91 d6 02 	lds	r24, 0x02D6
     cf0:	90 91 d7 02 	lds	r25, 0x02D7
     cf4:	fc 01       	movw	r30, r24
     cf6:	ee 56       	subi	r30, 0x6E	; 110
     cf8:	fd 4f       	sbci	r31, 0xFD	; 253
     cfa:	a0 83       	st	Z, r26
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	90 93 d7 02 	sts	0x02D7, r25
     d02:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     d06:	80 91 c8 00 	lds	r24, 0x00C8
     d0a:	85 ff       	sbrs	r24, 5
     d0c:	fc cf       	rjmp	.-8      	; 0xd06 <ax12SetRegister+0x98>
    UDR1 = data;
     d0e:	20 93 ce 00 	sts	0x00CE, r18
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     d12:	80 91 d6 02 	lds	r24, 0x02D6
     d16:	90 91 d7 02 	lds	r25, 0x02D7
     d1a:	fc 01       	movw	r30, r24
     d1c:	ee 56       	subi	r30, 0x6E	; 110
     d1e:	fd 4f       	sbci	r31, 0xFD	; 253
     d20:	24 e0       	ldi	r18, 0x04	; 4
     d22:	20 83       	st	Z, r18
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	90 93 d7 02 	sts	0x02D7, r25
     d2a:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     d2e:	80 91 c8 00 	lds	r24, 0x00C8
     d32:	85 ff       	sbrs	r24, 5
     d34:	fc cf       	rjmp	.-8      	; 0xd2e <ax12SetRegister+0xc0>
    UDR1 = data;
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	80 93 ce 00 	sts	0x00CE, r24
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     d3c:	80 91 d6 02 	lds	r24, 0x02D6
     d40:	90 91 d7 02 	lds	r25, 0x02D7
     d44:	fc 01       	movw	r30, r24
     d46:	ee 56       	subi	r30, 0x6E	; 110
     d48:	fd 4f       	sbci	r31, 0xFD	; 253
     d4a:	23 e0       	ldi	r18, 0x03	; 3
     d4c:	20 83       	st	Z, r18
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	90 93 d7 02 	sts	0x02D7, r25
     d54:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     d58:	80 91 c8 00 	lds	r24, 0x00C8
     d5c:	85 ff       	sbrs	r24, 5
     d5e:	fc cf       	rjmp	.-8      	; 0xd58 <ax12SetRegister+0xea>
    UDR1 = data;
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	80 93 ce 00 	sts	0x00CE, r24
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(4);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
     d66:	26 2f       	mov	r18, r22
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     d68:	80 91 d6 02 	lds	r24, 0x02D6
     d6c:	90 91 d7 02 	lds	r25, 0x02D7
     d70:	fc 01       	movw	r30, r24
     d72:	ee 56       	subi	r30, 0x6E	; 110
     d74:	fd 4f       	sbci	r31, 0xFD	; 253
     d76:	60 83       	st	Z, r22
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	90 93 d7 02 	sts	0x02D7, r25
     d7e:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     d82:	80 91 c8 00 	lds	r24, 0x00C8
     d86:	85 ff       	sbrs	r24, 5
     d88:	fc cf       	rjmp	.-8      	; 0xd82 <ax12SetRegister+0x114>
    UDR1 = data;
     d8a:	20 93 ce 00 	sts	0x00CE, r18
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(4);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    ax12writeB(data&0xff);
     d8e:	24 2f       	mov	r18, r20
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     d90:	80 91 d6 02 	lds	r24, 0x02D6
     d94:	90 91 d7 02 	lds	r25, 0x02D7
     d98:	fc 01       	movw	r30, r24
     d9a:	ee 56       	subi	r30, 0x6E	; 110
     d9c:	fd 4f       	sbci	r31, 0xFD	; 253
     d9e:	40 83       	st	Z, r20
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	90 93 d7 02 	sts	0x02D7, r25
     da6:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     daa:	80 91 c8 00 	lds	r24, 0x00C8
     dae:	85 ff       	sbrs	r24, 5
     db0:	fc cf       	rjmp	.-8      	; 0xdaa <ax12SetRegister+0x13c>
    UDR1 = data;
     db2:	20 93 ce 00 	sts	0x00CE, r18
    ax12writeB(4);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    ax12writeB(data&0xff);
    // checksum = 
    ax12writeB(checksum);
     db6:	17 96       	adiw	r26, 0x07	; 7
     db8:	a6 0f       	add	r26, r22
     dba:	b7 1f       	adc	r27, r23
     dbc:	cd 01       	movw	r24, r26
     dbe:	84 0f       	add	r24, r20
     dc0:	91 1d       	adc	r25, r1
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	71 e0       	ldi	r23, 0x01	; 1
     dc6:	0e 94 94 09 	call	0x1328	; 0x1328 <__divmodhi4>
     dca:	80 95       	com	r24
     dcc:	90 95       	com	r25
     dce:	98 2f       	mov	r25, r24
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     dd0:	20 91 d6 02 	lds	r18, 0x02D6
     dd4:	30 91 d7 02 	lds	r19, 0x02D7
     dd8:	f9 01       	movw	r30, r18
     dda:	ee 56       	subi	r30, 0x6E	; 110
     ddc:	fd 4f       	sbci	r31, 0xFD	; 253
     dde:	80 83       	st	Z, r24
     de0:	2f 5f       	subi	r18, 0xFF	; 255
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	30 93 d7 02 	sts	0x02D7, r19
     de8:	20 93 d6 02 	sts	0x02D6, r18
    while (bit_is_clear(UCSR1A, UDRE1));
     dec:	80 91 c8 00 	lds	r24, 0x00C8
     df0:	85 ff       	sbrs	r24, 5
     df2:	fc cf       	rjmp	.-8      	; 0xdec <ax12SetRegister+0x17e>
    UDR1 = data;
     df4:	90 93 ce 00 	sts	0x00CE, r25
      while (bit_is_clear(UCSR1A, UDRE1));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR1B, TXEN1);
     df8:	80 91 c9 00 	lds	r24, 0x00C9
     dfc:	87 7f       	andi	r24, 0xF7	; 247
     dfe:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, RXEN1);
     e02:	80 91 c9 00 	lds	r24, 0x00C9
     e06:	80 61       	ori	r24, 0x10	; 16
     e08:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, RXCIE1);
     e0c:	80 91 c9 00 	lds	r24, 0x00C9
     e10:	80 68       	ori	r24, 0x80	; 128
     e12:	80 93 c9 00 	sts	0x00C9, r24
    ax_rx_int_Pointer = 0;
     e16:	10 92 f9 02 	sts	0x02F9, r1
     e1a:	10 92 f8 02 	sts	0x02F8, r1
    ax_rx_Pointer = 0;
     e1e:	10 92 d3 02 	sts	0x02D3, r1
     e22:	10 92 d2 02 	sts	0x02D2, r1
    ax12writeB(data&0xff);
    // checksum = 
    ax12writeB(checksum);
    setRX(id);
    //ax12ReadPacket();
}
     e26:	08 95       	ret

00000e28 <ax12SetRegister2>:
/* Set the value of a double-byte register. */
void ax12SetRegister2(int id, int regstart, int data){
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
  #else
    // emulate half-duplex on ArbotiX, ArbotiX w/ RX Bridge
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitClear(UCSR1B, RXEN1);    
     e2e:	80 91 c9 00 	lds	r24, 0x00C9
     e32:	8f 7e       	andi	r24, 0xEF	; 239
     e34:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, TXEN1);
     e38:	80 91 c9 00 	lds	r24, 0x00C9
     e3c:	88 60       	ori	r24, 0x08	; 8
     e3e:	80 93 c9 00 	sts	0x00C9, r24
    bitClear(UCSR1B, RXCIE1);
     e42:	80 91 c9 00 	lds	r24, 0x00C9
     e46:	8f 77       	andi	r24, 0x7F	; 127
     e48:	80 93 c9 00 	sts	0x00C9, r24
    ax_tx_Pointer = 0;
     e4c:	10 92 d7 02 	sts	0x02D7, r1
     e50:	10 92 d6 02 	sts	0x02D6, r1
    //ax12ReadPacket();
}
/* Set the value of a double-byte register. */
void ax12SetRegister2(int id, int regstart, int data){
    setTX(id);    
    int checksum = ~((id + 5 + AX_WRITE_DATA + regstart + (data&0xFF) + ((data&0xFF00)>>8)) % 256);
     e54:	a5 2f       	mov	r26, r21
     e56:	b0 e0       	ldi	r27, 0x00	; 0
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     e58:	80 91 d6 02 	lds	r24, 0x02D6
     e5c:	90 91 d7 02 	lds	r25, 0x02D7
     e60:	fc 01       	movw	r30, r24
     e62:	ee 56       	subi	r30, 0x6E	; 110
     e64:	fd 4f       	sbci	r31, 0xFD	; 253
     e66:	2f ef       	ldi	r18, 0xFF	; 255
     e68:	20 83       	st	Z, r18
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	90 93 d7 02 	sts	0x02D7, r25
     e70:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     e74:	80 91 c8 00 	lds	r24, 0x00C8
     e78:	85 ff       	sbrs	r24, 5
     e7a:	fc cf       	rjmp	.-8      	; 0xe74 <ax12SetRegister2+0x4c>
    UDR1 = data;
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	80 93 ce 00 	sts	0x00CE, r24
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     e82:	20 91 d6 02 	lds	r18, 0x02D6
     e86:	30 91 d7 02 	lds	r19, 0x02D7
     e8a:	f9 01       	movw	r30, r18
     e8c:	ee 56       	subi	r30, 0x6E	; 110
     e8e:	fd 4f       	sbci	r31, 0xFD	; 253
     e90:	80 83       	st	Z, r24
     e92:	2f 5f       	subi	r18, 0xFF	; 255
     e94:	3f 4f       	sbci	r19, 0xFF	; 255
     e96:	30 93 d7 02 	sts	0x02D7, r19
     e9a:	20 93 d6 02 	sts	0x02D6, r18
    while (bit_is_clear(UCSR1A, UDRE1));
     e9e:	80 91 c8 00 	lds	r24, 0x00C8
     ea2:	85 ff       	sbrs	r24, 5
     ea4:	fc cf       	rjmp	.-8      	; 0xe9e <ax12SetRegister2+0x76>
    UDR1 = data;
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	80 93 ce 00 	sts	0x00CE, r24
void ax12SetRegister2(int id, int regstart, int data){
    setTX(id);    
    int checksum = ~((id + 5 + AX_WRITE_DATA + regstart + (data&0xFF) + ((data&0xFF00)>>8)) % 256);
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
     eac:	2c 2f       	mov	r18, r28
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     eae:	80 91 d6 02 	lds	r24, 0x02D6
     eb2:	90 91 d7 02 	lds	r25, 0x02D7
     eb6:	fc 01       	movw	r30, r24
     eb8:	ee 56       	subi	r30, 0x6E	; 110
     eba:	fd 4f       	sbci	r31, 0xFD	; 253
     ebc:	c0 83       	st	Z, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	90 93 d7 02 	sts	0x02D7, r25
     ec4:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     ec8:	80 91 c8 00 	lds	r24, 0x00C8
     ecc:	85 ff       	sbrs	r24, 5
     ece:	fc cf       	rjmp	.-8      	; 0xec8 <ax12SetRegister2+0xa0>
    UDR1 = data;
     ed0:	20 93 ce 00 	sts	0x00CE, r18
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     ed4:	80 91 d6 02 	lds	r24, 0x02D6
     ed8:	90 91 d7 02 	lds	r25, 0x02D7
     edc:	fc 01       	movw	r30, r24
     ede:	ee 56       	subi	r30, 0x6E	; 110
     ee0:	fd 4f       	sbci	r31, 0xFD	; 253
     ee2:	25 e0       	ldi	r18, 0x05	; 5
     ee4:	20 83       	st	Z, r18
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	90 93 d7 02 	sts	0x02D7, r25
     eec:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     ef0:	80 91 c8 00 	lds	r24, 0x00C8
     ef4:	85 ff       	sbrs	r24, 5
     ef6:	fc cf       	rjmp	.-8      	; 0xef0 <ax12SetRegister2+0xc8>
    UDR1 = data;
     ef8:	85 e0       	ldi	r24, 0x05	; 5
     efa:	80 93 ce 00 	sts	0x00CE, r24
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     efe:	80 91 d6 02 	lds	r24, 0x02D6
     f02:	90 91 d7 02 	lds	r25, 0x02D7
     f06:	fc 01       	movw	r30, r24
     f08:	ee 56       	subi	r30, 0x6E	; 110
     f0a:	fd 4f       	sbci	r31, 0xFD	; 253
     f0c:	23 e0       	ldi	r18, 0x03	; 3
     f0e:	20 83       	st	Z, r18
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	90 93 d7 02 	sts	0x02D7, r25
     f16:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     f1a:	80 91 c8 00 	lds	r24, 0x00C8
     f1e:	85 ff       	sbrs	r24, 5
     f20:	fc cf       	rjmp	.-8      	; 0xf1a <ax12SetRegister2+0xf2>
    UDR1 = data;
     f22:	83 e0       	ldi	r24, 0x03	; 3
     f24:	80 93 ce 00 	sts	0x00CE, r24
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(5);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
     f28:	26 2f       	mov	r18, r22
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     f2a:	80 91 d6 02 	lds	r24, 0x02D6
     f2e:	90 91 d7 02 	lds	r25, 0x02D7
     f32:	fc 01       	movw	r30, r24
     f34:	ee 56       	subi	r30, 0x6E	; 110
     f36:	fd 4f       	sbci	r31, 0xFD	; 253
     f38:	60 83       	st	Z, r22
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	90 93 d7 02 	sts	0x02D7, r25
     f40:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     f44:	80 91 c8 00 	lds	r24, 0x00C8
     f48:	85 ff       	sbrs	r24, 5
     f4a:	fc cf       	rjmp	.-8      	; 0xf44 <ax12SetRegister2+0x11c>
    UDR1 = data;
     f4c:	20 93 ce 00 	sts	0x00CE, r18
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(5);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    ax12writeB(data&0xff);
     f50:	24 2f       	mov	r18, r20
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     f52:	80 91 d6 02 	lds	r24, 0x02D6
     f56:	90 91 d7 02 	lds	r25, 0x02D7
     f5a:	fc 01       	movw	r30, r24
     f5c:	ee 56       	subi	r30, 0x6E	; 110
     f5e:	fd 4f       	sbci	r31, 0xFD	; 253
     f60:	40 83       	st	Z, r20
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	90 93 d7 02 	sts	0x02D7, r25
     f68:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     f6c:	80 91 c8 00 	lds	r24, 0x00C8
     f70:	85 ff       	sbrs	r24, 5
     f72:	fc cf       	rjmp	.-8      	; 0xf6c <ax12SetRegister2+0x144>
    UDR1 = data;
     f74:	20 93 ce 00 	sts	0x00CE, r18
    ax12writeB(id);
    ax12writeB(5);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    ax12writeB(data&0xff);
    ax12writeB((data&0xff00)>>8);
     f78:	2a 2f       	mov	r18, r26
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     f7a:	80 91 d6 02 	lds	r24, 0x02D6
     f7e:	90 91 d7 02 	lds	r25, 0x02D7
     f82:	fc 01       	movw	r30, r24
     f84:	ee 56       	subi	r30, 0x6E	; 110
     f86:	fd 4f       	sbci	r31, 0xFD	; 253
     f88:	a0 83       	st	Z, r26
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	90 93 d7 02 	sts	0x02D7, r25
     f90:	80 93 d6 02 	sts	0x02D6, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     f94:	80 91 c8 00 	lds	r24, 0x00C8
     f98:	85 ff       	sbrs	r24, 5
     f9a:	fc cf       	rjmp	.-8      	; 0xf94 <ax12SetRegister2+0x16c>
    UDR1 = data;
     f9c:	20 93 ce 00 	sts	0x00CE, r18
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    ax12writeB(data&0xff);
    ax12writeB((data&0xff00)>>8);
    // checksum = 
    ax12writeB(checksum);
     fa0:	ce 01       	movw	r24, r28
     fa2:	08 96       	adiw	r24, 0x08	; 8
     fa4:	86 0f       	add	r24, r22
     fa6:	97 1f       	adc	r25, r23
     fa8:	84 0f       	add	r24, r20
     faa:	91 1d       	adc	r25, r1
     fac:	8a 0f       	add	r24, r26
     fae:	9b 1f       	adc	r25, r27
     fb0:	90 70       	andi	r25, 0x00	; 0
     fb2:	80 95       	com	r24
     fb4:	90 95       	com	r25
     fb6:	98 2f       	mov	r25, r24
    while (bit_is_clear(UCSR1A, UDRE1));
    UDR1 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     fb8:	20 91 d6 02 	lds	r18, 0x02D6
     fbc:	30 91 d7 02 	lds	r19, 0x02D7
     fc0:	f9 01       	movw	r30, r18
     fc2:	ee 56       	subi	r30, 0x6E	; 110
     fc4:	fd 4f       	sbci	r31, 0xFD	; 253
     fc6:	80 83       	st	Z, r24
     fc8:	2f 5f       	subi	r18, 0xFF	; 255
     fca:	3f 4f       	sbci	r19, 0xFF	; 255
     fcc:	30 93 d7 02 	sts	0x02D7, r19
     fd0:	20 93 d6 02 	sts	0x02D6, r18
    while (bit_is_clear(UCSR1A, UDRE1));
     fd4:	80 91 c8 00 	lds	r24, 0x00C8
     fd8:	85 ff       	sbrs	r24, 5
     fda:	fc cf       	rjmp	.-8      	; 0xfd4 <ax12SetRegister2+0x1ac>
    UDR1 = data;
     fdc:	90 93 ce 00 	sts	0x00CE, r25
      while (bit_is_clear(UCSR1A, UDRE1));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR1B, TXEN1);
     fe0:	80 91 c9 00 	lds	r24, 0x00C9
     fe4:	87 7f       	andi	r24, 0xF7	; 247
     fe6:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, RXEN1);
     fea:	80 91 c9 00 	lds	r24, 0x00C9
     fee:	80 61       	ori	r24, 0x10	; 16
     ff0:	80 93 c9 00 	sts	0x00C9, r24
    bitSet(UCSR1B, RXCIE1);
     ff4:	80 91 c9 00 	lds	r24, 0x00C9
     ff8:	80 68       	ori	r24, 0x80	; 128
     ffa:	80 93 c9 00 	sts	0x00C9, r24
    ax_rx_int_Pointer = 0;
     ffe:	10 92 f9 02 	sts	0x02F9, r1
    1002:	10 92 f8 02 	sts	0x02F8, r1
    ax_rx_Pointer = 0;
    1006:	10 92 d3 02 	sts	0x02D3, r1
    100a:	10 92 d2 02 	sts	0x02D2, r1
    ax12writeB((data&0xff00)>>8);
    // checksum = 
    ax12writeB(checksum);
    setRX(id);
    //ax12ReadPacket();
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	08 95       	ret

00001014 <exit>:
    1014:	f8 94       	cli
    1016:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <_exit>

0000101a <__subsf3>:
    101a:	50 58       	subi	r21, 0x80	; 128

0000101c <__addsf3>:
    101c:	bb 27       	eor	r27, r27
    101e:	aa 27       	eor	r26, r26
    1020:	0e d0       	rcall	.+28     	; 0x103e <__addsf3x>
    1022:	e5 c0       	rjmp	.+458    	; 0x11ee <__fp_round>
    1024:	d6 d0       	rcall	.+428    	; 0x11d2 <__fp_pscA>
    1026:	30 f0       	brcs	.+12     	; 0x1034 <__addsf3+0x18>
    1028:	db d0       	rcall	.+438    	; 0x11e0 <__fp_pscB>
    102a:	20 f0       	brcs	.+8      	; 0x1034 <__addsf3+0x18>
    102c:	31 f4       	brne	.+12     	; 0x103a <__addsf3+0x1e>
    102e:	9f 3f       	cpi	r25, 0xFF	; 255
    1030:	11 f4       	brne	.+4      	; 0x1036 <__addsf3+0x1a>
    1032:	1e f4       	brtc	.+6      	; 0x103a <__addsf3+0x1e>
    1034:	cb c0       	rjmp	.+406    	; 0x11cc <__fp_nan>
    1036:	0e f4       	brtc	.+2      	; 0x103a <__addsf3+0x1e>
    1038:	e0 95       	com	r30
    103a:	e7 fb       	bst	r30, 7
    103c:	c1 c0       	rjmp	.+386    	; 0x11c0 <__fp_inf>

0000103e <__addsf3x>:
    103e:	e9 2f       	mov	r30, r25
    1040:	e7 d0       	rcall	.+462    	; 0x1210 <__fp_split3>
    1042:	80 f3       	brcs	.-32     	; 0x1024 <__addsf3+0x8>
    1044:	ba 17       	cp	r27, r26
    1046:	62 07       	cpc	r22, r18
    1048:	73 07       	cpc	r23, r19
    104a:	84 07       	cpc	r24, r20
    104c:	95 07       	cpc	r25, r21
    104e:	18 f0       	brcs	.+6      	; 0x1056 <__addsf3x+0x18>
    1050:	71 f4       	brne	.+28     	; 0x106e <__addsf3x+0x30>
    1052:	9e f5       	brtc	.+102    	; 0x10ba <__addsf3x+0x7c>
    1054:	ff c0       	rjmp	.+510    	; 0x1254 <__fp_zero>
    1056:	0e f4       	brtc	.+2      	; 0x105a <__addsf3x+0x1c>
    1058:	e0 95       	com	r30
    105a:	0b 2e       	mov	r0, r27
    105c:	ba 2f       	mov	r27, r26
    105e:	a0 2d       	mov	r26, r0
    1060:	0b 01       	movw	r0, r22
    1062:	b9 01       	movw	r22, r18
    1064:	90 01       	movw	r18, r0
    1066:	0c 01       	movw	r0, r24
    1068:	ca 01       	movw	r24, r20
    106a:	a0 01       	movw	r20, r0
    106c:	11 24       	eor	r1, r1
    106e:	ff 27       	eor	r31, r31
    1070:	59 1b       	sub	r21, r25
    1072:	99 f0       	breq	.+38     	; 0x109a <__addsf3x+0x5c>
    1074:	59 3f       	cpi	r21, 0xF9	; 249
    1076:	50 f4       	brcc	.+20     	; 0x108c <__addsf3x+0x4e>
    1078:	50 3e       	cpi	r21, 0xE0	; 224
    107a:	68 f1       	brcs	.+90     	; 0x10d6 <__addsf3x+0x98>
    107c:	1a 16       	cp	r1, r26
    107e:	f0 40       	sbci	r31, 0x00	; 0
    1080:	a2 2f       	mov	r26, r18
    1082:	23 2f       	mov	r18, r19
    1084:	34 2f       	mov	r19, r20
    1086:	44 27       	eor	r20, r20
    1088:	58 5f       	subi	r21, 0xF8	; 248
    108a:	f3 cf       	rjmp	.-26     	; 0x1072 <__addsf3x+0x34>
    108c:	46 95       	lsr	r20
    108e:	37 95       	ror	r19
    1090:	27 95       	ror	r18
    1092:	a7 95       	ror	r26
    1094:	f0 40       	sbci	r31, 0x00	; 0
    1096:	53 95       	inc	r21
    1098:	c9 f7       	brne	.-14     	; 0x108c <__addsf3x+0x4e>
    109a:	7e f4       	brtc	.+30     	; 0x10ba <__addsf3x+0x7c>
    109c:	1f 16       	cp	r1, r31
    109e:	ba 0b       	sbc	r27, r26
    10a0:	62 0b       	sbc	r22, r18
    10a2:	73 0b       	sbc	r23, r19
    10a4:	84 0b       	sbc	r24, r20
    10a6:	ba f0       	brmi	.+46     	; 0x10d6 <__addsf3x+0x98>
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	a1 f0       	breq	.+40     	; 0x10d4 <__addsf3x+0x96>
    10ac:	ff 0f       	add	r31, r31
    10ae:	bb 1f       	adc	r27, r27
    10b0:	66 1f       	adc	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	c2 f7       	brpl	.-16     	; 0x10a8 <__addsf3x+0x6a>
    10b8:	0e c0       	rjmp	.+28     	; 0x10d6 <__addsf3x+0x98>
    10ba:	ba 0f       	add	r27, r26
    10bc:	62 1f       	adc	r22, r18
    10be:	73 1f       	adc	r23, r19
    10c0:	84 1f       	adc	r24, r20
    10c2:	48 f4       	brcc	.+18     	; 0x10d6 <__addsf3x+0x98>
    10c4:	87 95       	ror	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	b7 95       	ror	r27
    10cc:	f7 95       	ror	r31
    10ce:	9e 3f       	cpi	r25, 0xFE	; 254
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <__addsf3x+0x96>
    10d2:	b3 cf       	rjmp	.-154    	; 0x103a <__addsf3+0x1e>
    10d4:	93 95       	inc	r25
    10d6:	88 0f       	add	r24, r24
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <__addsf3x+0x9e>
    10da:	99 27       	eor	r25, r25
    10dc:	ee 0f       	add	r30, r30
    10de:	97 95       	ror	r25
    10e0:	87 95       	ror	r24
    10e2:	08 95       	ret

000010e4 <__fixsfsi>:
    10e4:	04 d0       	rcall	.+8      	; 0x10ee <__fixunssfsi>
    10e6:	68 94       	set
    10e8:	b1 11       	cpse	r27, r1
    10ea:	b5 c0       	rjmp	.+362    	; 0x1256 <__fp_szero>
    10ec:	08 95       	ret

000010ee <__fixunssfsi>:
    10ee:	98 d0       	rcall	.+304    	; 0x1220 <__fp_splitA>
    10f0:	88 f0       	brcs	.+34     	; 0x1114 <__fixunssfsi+0x26>
    10f2:	9f 57       	subi	r25, 0x7F	; 127
    10f4:	90 f0       	brcs	.+36     	; 0x111a <__fixunssfsi+0x2c>
    10f6:	b9 2f       	mov	r27, r25
    10f8:	99 27       	eor	r25, r25
    10fa:	b7 51       	subi	r27, 0x17	; 23
    10fc:	a0 f0       	brcs	.+40     	; 0x1126 <__fixunssfsi+0x38>
    10fe:	d1 f0       	breq	.+52     	; 0x1134 <__fixunssfsi+0x46>
    1100:	66 0f       	add	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	1a f0       	brmi	.+6      	; 0x1110 <__fixunssfsi+0x22>
    110a:	ba 95       	dec	r27
    110c:	c9 f7       	brne	.-14     	; 0x1100 <__fixunssfsi+0x12>
    110e:	12 c0       	rjmp	.+36     	; 0x1134 <__fixunssfsi+0x46>
    1110:	b1 30       	cpi	r27, 0x01	; 1
    1112:	81 f0       	breq	.+32     	; 0x1134 <__fixunssfsi+0x46>
    1114:	9f d0       	rcall	.+318    	; 0x1254 <__fp_zero>
    1116:	b1 e0       	ldi	r27, 0x01	; 1
    1118:	08 95       	ret
    111a:	9c c0       	rjmp	.+312    	; 0x1254 <__fp_zero>
    111c:	67 2f       	mov	r22, r23
    111e:	78 2f       	mov	r23, r24
    1120:	88 27       	eor	r24, r24
    1122:	b8 5f       	subi	r27, 0xF8	; 248
    1124:	39 f0       	breq	.+14     	; 0x1134 <__fixunssfsi+0x46>
    1126:	b9 3f       	cpi	r27, 0xF9	; 249
    1128:	cc f3       	brlt	.-14     	; 0x111c <__fixunssfsi+0x2e>
    112a:	86 95       	lsr	r24
    112c:	77 95       	ror	r23
    112e:	67 95       	ror	r22
    1130:	b3 95       	inc	r27
    1132:	d9 f7       	brne	.-10     	; 0x112a <__fixunssfsi+0x3c>
    1134:	3e f4       	brtc	.+14     	; 0x1144 <__fixunssfsi+0x56>
    1136:	90 95       	com	r25
    1138:	80 95       	com	r24
    113a:	70 95       	com	r23
    113c:	61 95       	neg	r22
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	8f 4f       	sbci	r24, 0xFF	; 255
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	08 95       	ret

00001146 <__floatunsisf>:
    1146:	e8 94       	clt
    1148:	09 c0       	rjmp	.+18     	; 0x115c <__floatsisf+0x12>

0000114a <__floatsisf>:
    114a:	97 fb       	bst	r25, 7
    114c:	3e f4       	brtc	.+14     	; 0x115c <__floatsisf+0x12>
    114e:	90 95       	com	r25
    1150:	80 95       	com	r24
    1152:	70 95       	com	r23
    1154:	61 95       	neg	r22
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	8f 4f       	sbci	r24, 0xFF	; 255
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	99 23       	and	r25, r25
    115e:	a9 f0       	breq	.+42     	; 0x118a <__floatsisf+0x40>
    1160:	f9 2f       	mov	r31, r25
    1162:	96 e9       	ldi	r25, 0x96	; 150
    1164:	bb 27       	eor	r27, r27
    1166:	93 95       	inc	r25
    1168:	f6 95       	lsr	r31
    116a:	87 95       	ror	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	b7 95       	ror	r27
    1172:	f1 11       	cpse	r31, r1
    1174:	f8 cf       	rjmp	.-16     	; 0x1166 <__floatsisf+0x1c>
    1176:	fa f4       	brpl	.+62     	; 0x11b6 <__floatsisf+0x6c>
    1178:	bb 0f       	add	r27, r27
    117a:	11 f4       	brne	.+4      	; 0x1180 <__floatsisf+0x36>
    117c:	60 ff       	sbrs	r22, 0
    117e:	1b c0       	rjmp	.+54     	; 0x11b6 <__floatsisf+0x6c>
    1180:	6f 5f       	subi	r22, 0xFF	; 255
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8f 4f       	sbci	r24, 0xFF	; 255
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	16 c0       	rjmp	.+44     	; 0x11b6 <__floatsisf+0x6c>
    118a:	88 23       	and	r24, r24
    118c:	11 f0       	breq	.+4      	; 0x1192 <__floatsisf+0x48>
    118e:	96 e9       	ldi	r25, 0x96	; 150
    1190:	11 c0       	rjmp	.+34     	; 0x11b4 <__floatsisf+0x6a>
    1192:	77 23       	and	r23, r23
    1194:	21 f0       	breq	.+8      	; 0x119e <__floatsisf+0x54>
    1196:	9e e8       	ldi	r25, 0x8E	; 142
    1198:	87 2f       	mov	r24, r23
    119a:	76 2f       	mov	r23, r22
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <__floatsisf+0x5e>
    119e:	66 23       	and	r22, r22
    11a0:	71 f0       	breq	.+28     	; 0x11be <__floatsisf+0x74>
    11a2:	96 e8       	ldi	r25, 0x86	; 134
    11a4:	86 2f       	mov	r24, r22
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	2a f0       	brmi	.+10     	; 0x11b6 <__floatsisf+0x6c>
    11ac:	9a 95       	dec	r25
    11ae:	66 0f       	add	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	88 1f       	adc	r24, r24
    11b4:	da f7       	brpl	.-10     	; 0x11ac <__floatsisf+0x62>
    11b6:	88 0f       	add	r24, r24
    11b8:	96 95       	lsr	r25
    11ba:	87 95       	ror	r24
    11bc:	97 f9       	bld	r25, 7
    11be:	08 95       	ret

000011c0 <__fp_inf>:
    11c0:	97 f9       	bld	r25, 7
    11c2:	9f 67       	ori	r25, 0x7F	; 127
    11c4:	80 e8       	ldi	r24, 0x80	; 128
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	08 95       	ret

000011cc <__fp_nan>:
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	80 ec       	ldi	r24, 0xC0	; 192
    11d0:	08 95       	ret

000011d2 <__fp_pscA>:
    11d2:	00 24       	eor	r0, r0
    11d4:	0a 94       	dec	r0
    11d6:	16 16       	cp	r1, r22
    11d8:	17 06       	cpc	r1, r23
    11da:	18 06       	cpc	r1, r24
    11dc:	09 06       	cpc	r0, r25
    11de:	08 95       	ret

000011e0 <__fp_pscB>:
    11e0:	00 24       	eor	r0, r0
    11e2:	0a 94       	dec	r0
    11e4:	12 16       	cp	r1, r18
    11e6:	13 06       	cpc	r1, r19
    11e8:	14 06       	cpc	r1, r20
    11ea:	05 06       	cpc	r0, r21
    11ec:	08 95       	ret

000011ee <__fp_round>:
    11ee:	09 2e       	mov	r0, r25
    11f0:	03 94       	inc	r0
    11f2:	00 0c       	add	r0, r0
    11f4:	11 f4       	brne	.+4      	; 0x11fa <__fp_round+0xc>
    11f6:	88 23       	and	r24, r24
    11f8:	52 f0       	brmi	.+20     	; 0x120e <__fp_round+0x20>
    11fa:	bb 0f       	add	r27, r27
    11fc:	40 f4       	brcc	.+16     	; 0x120e <__fp_round+0x20>
    11fe:	bf 2b       	or	r27, r31
    1200:	11 f4       	brne	.+4      	; 0x1206 <__fp_round+0x18>
    1202:	60 ff       	sbrs	r22, 0
    1204:	04 c0       	rjmp	.+8      	; 0x120e <__fp_round+0x20>
    1206:	6f 5f       	subi	r22, 0xFF	; 255
    1208:	7f 4f       	sbci	r23, 0xFF	; 255
    120a:	8f 4f       	sbci	r24, 0xFF	; 255
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	08 95       	ret

00001210 <__fp_split3>:
    1210:	57 fd       	sbrc	r21, 7
    1212:	90 58       	subi	r25, 0x80	; 128
    1214:	44 0f       	add	r20, r20
    1216:	55 1f       	adc	r21, r21
    1218:	59 f0       	breq	.+22     	; 0x1230 <__fp_splitA+0x10>
    121a:	5f 3f       	cpi	r21, 0xFF	; 255
    121c:	71 f0       	breq	.+28     	; 0x123a <__fp_splitA+0x1a>
    121e:	47 95       	ror	r20

00001220 <__fp_splitA>:
    1220:	88 0f       	add	r24, r24
    1222:	97 fb       	bst	r25, 7
    1224:	99 1f       	adc	r25, r25
    1226:	61 f0       	breq	.+24     	; 0x1240 <__fp_splitA+0x20>
    1228:	9f 3f       	cpi	r25, 0xFF	; 255
    122a:	79 f0       	breq	.+30     	; 0x124a <__fp_splitA+0x2a>
    122c:	87 95       	ror	r24
    122e:	08 95       	ret
    1230:	12 16       	cp	r1, r18
    1232:	13 06       	cpc	r1, r19
    1234:	14 06       	cpc	r1, r20
    1236:	55 1f       	adc	r21, r21
    1238:	f2 cf       	rjmp	.-28     	; 0x121e <__fp_split3+0xe>
    123a:	46 95       	lsr	r20
    123c:	f1 df       	rcall	.-30     	; 0x1220 <__fp_splitA>
    123e:	08 c0       	rjmp	.+16     	; 0x1250 <__fp_splitA+0x30>
    1240:	16 16       	cp	r1, r22
    1242:	17 06       	cpc	r1, r23
    1244:	18 06       	cpc	r1, r24
    1246:	99 1f       	adc	r25, r25
    1248:	f1 cf       	rjmp	.-30     	; 0x122c <__fp_splitA+0xc>
    124a:	86 95       	lsr	r24
    124c:	71 05       	cpc	r23, r1
    124e:	61 05       	cpc	r22, r1
    1250:	08 94       	sec
    1252:	08 95       	ret

00001254 <__fp_zero>:
    1254:	e8 94       	clt

00001256 <__fp_szero>:
    1256:	bb 27       	eor	r27, r27
    1258:	66 27       	eor	r22, r22
    125a:	77 27       	eor	r23, r23
    125c:	cb 01       	movw	r24, r22
    125e:	97 f9       	bld	r25, 7
    1260:	08 95       	ret

00001262 <__mulsf3>:
    1262:	0b d0       	rcall	.+22     	; 0x127a <__mulsf3x>
    1264:	c4 cf       	rjmp	.-120    	; 0x11ee <__fp_round>
    1266:	b5 df       	rcall	.-150    	; 0x11d2 <__fp_pscA>
    1268:	28 f0       	brcs	.+10     	; 0x1274 <__mulsf3+0x12>
    126a:	ba df       	rcall	.-140    	; 0x11e0 <__fp_pscB>
    126c:	18 f0       	brcs	.+6      	; 0x1274 <__mulsf3+0x12>
    126e:	95 23       	and	r25, r21
    1270:	09 f0       	breq	.+2      	; 0x1274 <__mulsf3+0x12>
    1272:	a6 cf       	rjmp	.-180    	; 0x11c0 <__fp_inf>
    1274:	ab cf       	rjmp	.-170    	; 0x11cc <__fp_nan>
    1276:	11 24       	eor	r1, r1
    1278:	ee cf       	rjmp	.-36     	; 0x1256 <__fp_szero>

0000127a <__mulsf3x>:
    127a:	ca df       	rcall	.-108    	; 0x1210 <__fp_split3>
    127c:	a0 f3       	brcs	.-24     	; 0x1266 <__mulsf3+0x4>

0000127e <__mulsf3_pse>:
    127e:	95 9f       	mul	r25, r21
    1280:	d1 f3       	breq	.-12     	; 0x1276 <__mulsf3+0x14>
    1282:	95 0f       	add	r25, r21
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	55 1f       	adc	r21, r21
    1288:	62 9f       	mul	r22, r18
    128a:	f0 01       	movw	r30, r0
    128c:	72 9f       	mul	r23, r18
    128e:	bb 27       	eor	r27, r27
    1290:	f0 0d       	add	r31, r0
    1292:	b1 1d       	adc	r27, r1
    1294:	63 9f       	mul	r22, r19
    1296:	aa 27       	eor	r26, r26
    1298:	f0 0d       	add	r31, r0
    129a:	b1 1d       	adc	r27, r1
    129c:	aa 1f       	adc	r26, r26
    129e:	64 9f       	mul	r22, r20
    12a0:	66 27       	eor	r22, r22
    12a2:	b0 0d       	add	r27, r0
    12a4:	a1 1d       	adc	r26, r1
    12a6:	66 1f       	adc	r22, r22
    12a8:	82 9f       	mul	r24, r18
    12aa:	22 27       	eor	r18, r18
    12ac:	b0 0d       	add	r27, r0
    12ae:	a1 1d       	adc	r26, r1
    12b0:	62 1f       	adc	r22, r18
    12b2:	73 9f       	mul	r23, r19
    12b4:	b0 0d       	add	r27, r0
    12b6:	a1 1d       	adc	r26, r1
    12b8:	62 1f       	adc	r22, r18
    12ba:	83 9f       	mul	r24, r19
    12bc:	a0 0d       	add	r26, r0
    12be:	61 1d       	adc	r22, r1
    12c0:	22 1f       	adc	r18, r18
    12c2:	74 9f       	mul	r23, r20
    12c4:	33 27       	eor	r19, r19
    12c6:	a0 0d       	add	r26, r0
    12c8:	61 1d       	adc	r22, r1
    12ca:	23 1f       	adc	r18, r19
    12cc:	84 9f       	mul	r24, r20
    12ce:	60 0d       	add	r22, r0
    12d0:	21 1d       	adc	r18, r1
    12d2:	82 2f       	mov	r24, r18
    12d4:	76 2f       	mov	r23, r22
    12d6:	6a 2f       	mov	r22, r26
    12d8:	11 24       	eor	r1, r1
    12da:	9f 57       	subi	r25, 0x7F	; 127
    12dc:	50 40       	sbci	r21, 0x00	; 0
    12de:	8a f0       	brmi	.+34     	; 0x1302 <__mulsf3_pse+0x84>
    12e0:	e1 f0       	breq	.+56     	; 0x131a <__mulsf3_pse+0x9c>
    12e2:	88 23       	and	r24, r24
    12e4:	4a f0       	brmi	.+18     	; 0x12f8 <__mulsf3_pse+0x7a>
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	bb 1f       	adc	r27, r27
    12ec:	66 1f       	adc	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	91 50       	subi	r25, 0x01	; 1
    12f4:	50 40       	sbci	r21, 0x00	; 0
    12f6:	a9 f7       	brne	.-22     	; 0x12e2 <__mulsf3_pse+0x64>
    12f8:	9e 3f       	cpi	r25, 0xFE	; 254
    12fa:	51 05       	cpc	r21, r1
    12fc:	70 f0       	brcs	.+28     	; 0x131a <__mulsf3_pse+0x9c>
    12fe:	60 cf       	rjmp	.-320    	; 0x11c0 <__fp_inf>
    1300:	aa cf       	rjmp	.-172    	; 0x1256 <__fp_szero>
    1302:	5f 3f       	cpi	r21, 0xFF	; 255
    1304:	ec f3       	brlt	.-6      	; 0x1300 <__mulsf3_pse+0x82>
    1306:	98 3e       	cpi	r25, 0xE8	; 232
    1308:	dc f3       	brlt	.-10     	; 0x1300 <__mulsf3_pse+0x82>
    130a:	86 95       	lsr	r24
    130c:	77 95       	ror	r23
    130e:	67 95       	ror	r22
    1310:	b7 95       	ror	r27
    1312:	f7 95       	ror	r31
    1314:	e7 95       	ror	r30
    1316:	9f 5f       	subi	r25, 0xFF	; 255
    1318:	c1 f7       	brne	.-16     	; 0x130a <__mulsf3_pse+0x8c>
    131a:	fe 2b       	or	r31, r30
    131c:	88 0f       	add	r24, r24
    131e:	91 1d       	adc	r25, r1
    1320:	96 95       	lsr	r25
    1322:	87 95       	ror	r24
    1324:	97 f9       	bld	r25, 7
    1326:	08 95       	ret

00001328 <__divmodhi4>:
    1328:	97 fb       	bst	r25, 7
    132a:	09 2e       	mov	r0, r25
    132c:	07 26       	eor	r0, r23
    132e:	0a d0       	rcall	.+20     	; 0x1344 <__divmodhi4_neg1>
    1330:	77 fd       	sbrc	r23, 7
    1332:	04 d0       	rcall	.+8      	; 0x133c <__divmodhi4_neg2>
    1334:	49 d0       	rcall	.+146    	; 0x13c8 <__udivmodhi4>
    1336:	06 d0       	rcall	.+12     	; 0x1344 <__divmodhi4_neg1>
    1338:	00 20       	and	r0, r0
    133a:	1a f4       	brpl	.+6      	; 0x1342 <__divmodhi4_exit>

0000133c <__divmodhi4_neg2>:
    133c:	70 95       	com	r23
    133e:	61 95       	neg	r22
    1340:	7f 4f       	sbci	r23, 0xFF	; 255

00001342 <__divmodhi4_exit>:
    1342:	08 95       	ret

00001344 <__divmodhi4_neg1>:
    1344:	f6 f7       	brtc	.-4      	; 0x1342 <__divmodhi4_exit>
    1346:	90 95       	com	r25
    1348:	81 95       	neg	r24
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	08 95       	ret

0000134e <__udivmodsi4>:
    134e:	a1 e2       	ldi	r26, 0x21	; 33
    1350:	1a 2e       	mov	r1, r26
    1352:	aa 1b       	sub	r26, r26
    1354:	bb 1b       	sub	r27, r27
    1356:	fd 01       	movw	r30, r26
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <__udivmodsi4_ep>

0000135a <__udivmodsi4_loop>:
    135a:	aa 1f       	adc	r26, r26
    135c:	bb 1f       	adc	r27, r27
    135e:	ee 1f       	adc	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	a2 17       	cp	r26, r18
    1364:	b3 07       	cpc	r27, r19
    1366:	e4 07       	cpc	r30, r20
    1368:	f5 07       	cpc	r31, r21
    136a:	20 f0       	brcs	.+8      	; 0x1374 <__udivmodsi4_ep>
    136c:	a2 1b       	sub	r26, r18
    136e:	b3 0b       	sbc	r27, r19
    1370:	e4 0b       	sbc	r30, r20
    1372:	f5 0b       	sbc	r31, r21

00001374 <__udivmodsi4_ep>:
    1374:	66 1f       	adc	r22, r22
    1376:	77 1f       	adc	r23, r23
    1378:	88 1f       	adc	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	1a 94       	dec	r1
    137e:	69 f7       	brne	.-38     	; 0x135a <__udivmodsi4_loop>
    1380:	60 95       	com	r22
    1382:	70 95       	com	r23
    1384:	80 95       	com	r24
    1386:	90 95       	com	r25
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	bd 01       	movw	r22, r26
    138e:	cf 01       	movw	r24, r30
    1390:	08 95       	ret

00001392 <__divmodsi4>:
    1392:	97 fb       	bst	r25, 7
    1394:	09 2e       	mov	r0, r25
    1396:	05 26       	eor	r0, r21
    1398:	0e d0       	rcall	.+28     	; 0x13b6 <__divmodsi4_neg1>
    139a:	57 fd       	sbrc	r21, 7
    139c:	04 d0       	rcall	.+8      	; 0x13a6 <__divmodsi4_neg2>
    139e:	d7 df       	rcall	.-82     	; 0x134e <__udivmodsi4>
    13a0:	0a d0       	rcall	.+20     	; 0x13b6 <__divmodsi4_neg1>
    13a2:	00 1c       	adc	r0, r0
    13a4:	38 f4       	brcc	.+14     	; 0x13b4 <__divmodsi4_exit>

000013a6 <__divmodsi4_neg2>:
    13a6:	50 95       	com	r21
    13a8:	40 95       	com	r20
    13aa:	30 95       	com	r19
    13ac:	21 95       	neg	r18
    13ae:	3f 4f       	sbci	r19, 0xFF	; 255
    13b0:	4f 4f       	sbci	r20, 0xFF	; 255
    13b2:	5f 4f       	sbci	r21, 0xFF	; 255

000013b4 <__divmodsi4_exit>:
    13b4:	08 95       	ret

000013b6 <__divmodsi4_neg1>:
    13b6:	f6 f7       	brtc	.-4      	; 0x13b4 <__divmodsi4_exit>
    13b8:	90 95       	com	r25
    13ba:	80 95       	com	r24
    13bc:	70 95       	com	r23
    13be:	61 95       	neg	r22
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255
    13c2:	8f 4f       	sbci	r24, 0xFF	; 255
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	08 95       	ret

000013c8 <__udivmodhi4>:
    13c8:	aa 1b       	sub	r26, r26
    13ca:	bb 1b       	sub	r27, r27
    13cc:	51 e1       	ldi	r21, 0x11	; 17
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <__udivmodhi4_ep>

000013d0 <__udivmodhi4_loop>:
    13d0:	aa 1f       	adc	r26, r26
    13d2:	bb 1f       	adc	r27, r27
    13d4:	a6 17       	cp	r26, r22
    13d6:	b7 07       	cpc	r27, r23
    13d8:	10 f0       	brcs	.+4      	; 0x13de <__udivmodhi4_ep>
    13da:	a6 1b       	sub	r26, r22
    13dc:	b7 0b       	sbc	r27, r23

000013de <__udivmodhi4_ep>:
    13de:	88 1f       	adc	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	5a 95       	dec	r21
    13e4:	a9 f7       	brne	.-22     	; 0x13d0 <__udivmodhi4_loop>
    13e6:	80 95       	com	r24
    13e8:	90 95       	com	r25
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	08 95       	ret

000013f0 <_exit>:
    13f0:	f8 94       	cli

000013f2 <__stop_program>:
    13f2:	ff cf       	rjmp	.-2      	; 0x13f2 <__stop_program>
