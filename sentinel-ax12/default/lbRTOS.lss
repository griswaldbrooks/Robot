
lbRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800200  00006e3c  00006ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000feb  00800298  00800298  00006f68  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00006f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000183d  00000000  00000000  00007128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005e3d  00000000  00000000  00008965  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001835  00000000  00000000  0000e7a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000047e2  00000000  00000000  0000ffd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001370  00000000  00000000  000147bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000023da  00000000  00000000  00015b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000031cd  00000000  00000000  00017f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0001b0d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__ctors_end>
       4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
       8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
       c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      10:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      14:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      18:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      1c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      20:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      24:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      28:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      2c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      30:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      34:	0c 94 47 20 	jmp	0x408e	; 0x408e <__vector_13>
      38:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__vector_14>
      3c:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__vector_15>
      40:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__vector_16>
      44:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__vector_17>
      48:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__vector_18>
      4c:	0c 94 1a 20 	jmp	0x4034	; 0x4034 <__vector_19>
      50:	0c 94 26 1e 	jmp	0x3c4c	; 0x3c4c <__vector_20>
      54:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__vector_21>
      58:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__vector_22>
      5c:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__vector_23>
      60:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      64:	0c 94 18 24 	jmp	0x4830	; 0x4830 <__vector_25>
      68:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      6c:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <__vector_27>
      70:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      74:	0c 94 2f 28 	jmp	0x505e	; 0x505e <__vector_29>
      78:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      7c:	0c 94 a1 20 	jmp	0x4142	; 0x4142 <__vector_31>
      80:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__vector_32>
      84:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <__vector_33>
      88:	0c 94 28 21 	jmp	0x4250	; 0x4250 <__vector_34>
      8c:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__vector_35>
      90:	0c 94 f3 23 	jmp	0x47e6	; 0x47e6 <__vector_36>
      94:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      98:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__vector_38>
      9c:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__vector_39>
      a0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      a4:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__vector_41>
      a8:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__vector_42>
      ac:	0c 94 af 21 	jmp	0x435e	; 0x435e <__vector_43>
      b0:	0c 94 dc 21 	jmp	0x43b8	; 0x43b8 <__vector_44>
      b4:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__vector_45>
      b8:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__vector_46>
      bc:	0c 94 36 22 	jmp	0x446c	; 0x446c <__vector_47>
      c0:	0c 94 63 22 	jmp	0x44c6	; 0x44c6 <__vector_48>
      c4:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__vector_49>
      c8:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__vector_50>
      cc:	0c 94 ca 2d 	jmp	0x5b94	; 0x5b94 <__vector_51>
      d0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      d4:	0c 94 2b 25 	jmp	0x4a56	; 0x4a56 <__vector_53>
      d8:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__vector_54>
      dc:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      e0:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__vector_56>
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	08 4a       	sbci	r16, 0xA8	; 168
      fa:	d7 3b       	cpi	r29, 0xB7	; 183
      fc:	3b ce       	rjmp	.-906    	; 0xfffffd74 <__eeprom_end+0xff7efd74>
      fe:	01 6e       	ori	r16, 0xE1	; 225
     100:	84 bc       	out	0x24, r8	; 36
     102:	bf fd       	.word	0xfdbf	; ????
     104:	c1 2f       	mov	r28, r17
     106:	3d 6c       	ori	r19, 0xCD	; 205
     108:	74 31       	cpi	r23, 0x14	; 20
     10a:	9a bd       	out	0x2a, r25	; 42
     10c:	56 83       	std	Z+6, r21	; 0x06
     10e:	3d da       	rcall	.-2950   	; 0xfffff58a <__eeprom_end+0xff7ef58a>
     110:	3d 00       	.word	0x003d	; ????
     112:	c7 7f       	andi	r28, 0xF7	; 247
     114:	11 be       	out	0x31, r1	; 49
     116:	d9 e4       	ldi	r29, 0x49	; 73
     118:	bb 4c       	sbci	r27, 0xCB	; 203
     11a:	3e 91       	ld	r19, -X
     11c:	6b aa       	std	Y+51, r6	; 0x33
     11e:	aa be       	out	0x3a, r10	; 58
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	3f 07       	cpc	r19, r31
     126:	2c 7a       	andi	r18, 0xAC	; 172
     128:	a5 ba       	out	0x15, r10	; 21
     12a:	6c c5       	rjmp	.+2776   	; 0xc04 <ewabs+0x20>
     12c:	90 da       	rcall	.-2784   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     12e:	3b 93       	.word	0x933b	; ????
     130:	65 fc       	sbrc	r6, 5
     132:	8b bc       	out	0x2b, r8	; 43
     134:	53 f8       	bld	r5, 3
     136:	10 fd       	sbrc	r17, 0
     138:	3c 56       	subi	r19, 0x6C	; 108
     13a:	92 83       	std	Z+2, r25	; 0x02
     13c:	4d bd       	out	0x2d, r20	; 45
     13e:	87 9d       	mul	r24, r7
     140:	3a b6       	in	r3, 0x3a	; 58
     142:	3d cb       	rjmp	.-2438   	; 0xfffff7be <__eeprom_end+0xff7ef7be>
     144:	c9 bf       	out	0x39, r28	; 57
     146:	5b be       	out	0x3b, r5	; 59
     148:	73 da       	rcall	.-2842   	; 0xfffff630 <__eeprom_end+0xff7ef630>
     14a:	0f c9       	rjmp	.-3554   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     14c:	3f 05       	cpc	r19, r15
     14e:	a8 4c       	sbci	r26, 0xC8	; 200
     150:	cd b2       	in	r12, 0x1d	; 29
     152:	d4 4e       	sbci	r29, 0xE4	; 228
     154:	b9 38       	cpi	r27, 0x89	; 137
     156:	36 a9       	ldd	r19, Z+54	; 0x36
     158:	02 0c       	add	r0, r2
     15a:	50 b9       	out	0x00, r21	; 0
     15c:	91 86       	std	Z+9, r9	; 0x09
     15e:	88 08       	sbc	r8, r8
     160:	3c a6       	std	Y+44, r3	; 0x2c
     162:	aa aa       	std	Y+50, r10	; 0x32
     164:	2a be       	out	0x3a, r2	; 58
     166:	00 00       	nop
     168:	00 80       	ld	r0, Z
     16a:	3f 06       	cpc	r3, r31
     16c:	64 ec       	ldi	r22, 0xC4	; 196
     16e:	1b 3c       	cpi	r17, 0xCB	; 203
     170:	04 bc       	out	0x24, r0	; 36
     172:	16 3e       	cpi	r17, 0xE6	; 230
     174:	3b e5       	ldi	r19, 0x5B	; 91
     176:	b9 3c       	cpi	r27, 0xC9	; 201
     178:	c9 3c       	cpi	r28, 0xC9	; 201
     17a:	37 c2       	rjmp	.+1134   	; 0x5ea <PWM_timer1_Off_LED+0xc>
     17c:	9e 5a       	subi	r25, 0xAE	; 174
     17e:	3d 66       	ori	r19, 0x6D	; 109
     180:	04 98       	cbi	0x00, 4	; 0
     182:	08 3e       	cpi	r16, 0xE8	; 232
     184:	ea 69       	ori	r30, 0x9A	; 154
     186:	aa aa       	std	Y+50, r10	; 0x32
     188:	3e 00       	.word	0x003e	; ????
     18a:	00 00       	nop
     18c:	80 3f       	cpi	r24, 0xF0	; 240
     18e:	07 63       	ori	r16, 0x37	; 55
     190:	42 36       	cpi	r20, 0x62	; 98
     192:	b7 9b       	sbis	0x16, 7	; 22
     194:	d8 a7       	std	Y+40, r29	; 0x28
     196:	1a 39       	cpi	r17, 0x9A	; 154
     198:	68 56       	subi	r22, 0x68	; 104
     19a:	18 ae       	std	Y+56, r1	; 0x38
     19c:	ba ab       	std	Y+50, r27	; 0x32
     19e:	55 8c       	ldd	r5, Z+29	; 0x1d
     1a0:	1d 3c       	cpi	r17, 0xCD	; 205
     1a2:	b7 cc       	rjmp	.-1682   	; 0xfffffb12 <__eeprom_end+0xff7efb12>
     1a4:	57 63       	ori	r21, 0x37	; 55
     1a6:	bd 6d       	ori	r27, 0xDD	; 221
     1a8:	ed fd       	.word	0xfded	; ????
     1aa:	75 3e       	cpi	r23, 0xE5	; 229
     1ac:	f6 17       	cp	r31, r22
     1ae:	72 31       	cpi	r23, 0x12	; 18
     1b0:	bf 00       	.word	0x00bf	; ????
     1b2:	00 00       	nop
     1b4:	80 3f       	cpi	r24, 0xF0	; 240
     1b6:	08 00       	.word	0x0008	; ????
     1b8:	00 00       	nop
     1ba:	be 92       	st	-X, r11
     1bc:	24 49       	sbci	r18, 0x94	; 148
     1be:	12 3e       	cpi	r17, 0xE2	; 226
     1c0:	ab aa       	std	Y+51, r10	; 0x33
     1c2:	aa 2a       	or	r10, r26
     1c4:	be cd       	rjmp	.-1156   	; 0xfffffd42 <__eeprom_end+0xff7efd42>
     1c6:	cc cc       	rjmp	.-1640   	; 0xfffffb60 <__eeprom_end+0xff7efb60>
     1c8:	4c 3e       	cpi	r20, 0xEC	; 236
     1ca:	00 00       	nop
     1cc:	00 80       	ld	r0, Z
     1ce:	be ab       	std	Y+54, r27	; 0x36
     1d0:	aa aa       	std	Y+50, r10	; 0x32
     1d2:	aa 3e       	cpi	r26, 0xEA	; 234
     1d4:	00 00       	nop
     1d6:	00 00       	nop
     1d8:	bf 00       	.word	0x00bf	; ????
     1da:	00 00       	nop
     1dc:	80 3f       	cpi	r24, 0xF0	; 240
     1de:	00 00       	nop
     1e0:	00 00       	nop
     1e2:	00 08       	sbc	r0, r0
     1e4:	41 78       	andi	r20, 0x81	; 129
     1e6:	d3 bb       	out	0x13, r29	; 19
     1e8:	43 87       	std	Z+11, r20	; 0x0b
     1ea:	d1 13       	cpse	r29, r17
     1ec:	3d 19       	sub	r19, r13
     1ee:	0e 3c       	cpi	r16, 0xCE	; 206
     1f0:	c3 bd       	out	0x23, r28	; 35
     1f2:	42 82       	std	Z+2, r4	; 0x02
     1f4:	ad 2b       	or	r26, r29
     1f6:	3e 68       	ori	r19, 0x8E	; 142
     1f8:	ec 82       	std	Y+4, r14	; 0x04
     1fa:	76 be       	out	0x36, r7	; 54
     1fc:	d9 8f       	std	Y+25, r29	; 0x19
     1fe:	e1 a9       	ldd	r30, Z+49	; 0x31
     200:	3e 4c       	sbci	r19, 0xCE	; 206
     202:	80 ef       	ldi	r24, 0xF0	; 240
     204:	ff be       	out	0x3f, r15	; 63
     206:	01 c4       	rjmp	.+2050   	; 0xa0a <ewadd+0x40>
     208:	ff 7f       	andi	r31, 0xFF	; 255
     20a:	3f 00       	.word	0x003f	; ????
     20c:	00 00       	nop
	...

00000210 <TimerPrescaleFactor>:
     210:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

0000021c <Timer2PrescaleFactor>:
     21c:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

0000022c <__c.1991>:
     22c:	42 41 44 5f 76 65 63 74 20 63 61 6c 6c 65 64 21     BAD_vect called!
	...

0000023d <HexChars>:
     23d:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000024e <__ctors_end>:
     24e:	11 24       	eor	r1, r1
     250:	1f be       	out	0x3f, r1	; 63
     252:	cf ef       	ldi	r28, 0xFF	; 255
     254:	d1 e2       	ldi	r29, 0x21	; 33
     256:	de bf       	out	0x3e, r29	; 62
     258:	cd bf       	out	0x3d, r28	; 61

0000025a <__do_copy_data>:
     25a:	12 e0       	ldi	r17, 0x02	; 2
     25c:	a0 e0       	ldi	r26, 0x00	; 0
     25e:	b2 e0       	ldi	r27, 0x02	; 2
     260:	ec e3       	ldi	r30, 0x3C	; 60
     262:	fe e6       	ldi	r31, 0x6E	; 110
     264:	02 c0       	rjmp	.+4      	; 0x26a <.do_copy_data_start>

00000266 <.do_copy_data_loop>:
     266:	05 90       	lpm	r0, Z+
     268:	0d 92       	st	X+, r0

0000026a <.do_copy_data_start>:
     26a:	a8 39       	cpi	r26, 0x98	; 152
     26c:	b1 07       	cpc	r27, r17
     26e:	d9 f7       	brne	.-10     	; 0x266 <.do_copy_data_loop>

00000270 <__do_clear_bss>:
     270:	12 e1       	ldi	r17, 0x12	; 18
     272:	a8 e9       	ldi	r26, 0x98	; 152
     274:	b2 e0       	ldi	r27, 0x02	; 2
     276:	01 c0       	rjmp	.+2      	; 0x27a <.do_clear_bss_start>

00000278 <.do_clear_bss_loop>:
     278:	1d 92       	st	X+, r1

0000027a <.do_clear_bss_start>:
     27a:	a3 38       	cpi	r26, 0x83	; 131
     27c:	b1 07       	cpc	r27, r17
     27e:	e1 f7       	brne	.-8      	; 0x278 <.do_clear_bss_loop>
     280:	0e 94 4a 0c 	call	0x1894	; 0x1894 <main>
     284:	0c 94 65 31 	jmp	0x62ca	; 0x62ca <exit>

00000288 <__bad_interrupt>:
     288:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__vector_default>

0000028c <PWM_Init_timer1_LED>:

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     28c:	89 30       	cpi	r24, 0x09	; 9
     28e:	49 f4       	brne	.+18     	; 0x2a2 <PWM_Init_timer1_LED+0x16>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     290:	80 91 80 00 	lds	r24, 0x0080
     294:	82 60       	ori	r24, 0x02	; 2
     296:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,PWM10);
     29a:	80 91 80 00 	lds	r24, 0x0080
     29e:	8e 7f       	andi	r24, 0xFE	; 254
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <PWM_Init_timer1_LED+0x32>
	}
	else if( bitRes == 10 )
     2a2:	8a 30       	cpi	r24, 0x0A	; 10
     2a4:	21 f4       	brne	.+8      	; 0x2ae <PWM_Init_timer1_LED+0x22>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     2a6:	80 91 80 00 	lds	r24, 0x0080
     2aa:	82 60       	ori	r24, 0x02	; 2
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <PWM_Init_timer1_LED+0x28>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     2ae:	80 91 80 00 	lds	r24, 0x0080
     2b2:	8d 7f       	andi	r24, 0xFD	; 253
     2b4:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,PWM10);
     2b8:	80 91 80 00 	lds	r24, 0x0080
     2bc:	81 60       	ori	r24, 0x01	; 1
     2be:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     2c2:	10 92 8b 00 	sts	0x008B, r1
     2c6:	10 92 8a 00 	sts	0x008A, r1
}
     2ca:	08 95       	ret

000002cc <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     2cc:	89 30       	cpi	r24, 0x09	; 9
     2ce:	49 f4       	brne	.+18     	; 0x2e2 <PWM_Init_timer2_H6+0x16>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
     2d0:	80 91 b0 00 	lds	r24, 0x00B0
     2d4:	82 60       	ori	r24, 0x02	; 2
     2d6:	80 93 b0 00 	sts	0x00B0, r24
		cbi(TCCR2A,PWM10);
     2da:	80 91 b0 00 	lds	r24, 0x00B0
     2de:	8e 7f       	andi	r24, 0xFE	; 254
     2e0:	0e c0       	rjmp	.+28     	; 0x2fe <PWM_Init_timer2_H6+0x32>
	}
	else if( bitRes == 10 )
     2e2:	8a 30       	cpi	r24, 0x0A	; 10
     2e4:	21 f4       	brne	.+8      	; 0x2ee <PWM_Init_timer2_H6+0x22>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
     2e6:	80 91 b0 00 	lds	r24, 0x00B0
     2ea:	82 60       	ori	r24, 0x02	; 2
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <PWM_Init_timer2_H6+0x28>
		sbi(TCCR2A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
     2ee:	80 91 b0 00 	lds	r24, 0x00B0
     2f2:	8d 7f       	andi	r24, 0xFD	; 253
     2f4:	80 93 b0 00 	sts	0x00B0, r24
		sbi(TCCR2A,PWM10);
     2f8:	80 91 b0 00 	lds	r24, 0x00B0
     2fc:	81 60       	ori	r24, 0x01	; 1
     2fe:	80 93 b0 00 	sts	0x00B0, r24
	}
	// clear output compare values
	OCR2B = 0;
     302:	10 92 b4 00 	sts	0x00B4, r1
}
     306:	08 95       	ret

00000308 <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     308:	89 30       	cpi	r24, 0x09	; 9
     30a:	49 f4       	brne	.+18     	; 0x31e <PWM_Init_timer3_E3+0x16>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
     30c:	80 91 90 00 	lds	r24, 0x0090
     310:	82 60       	ori	r24, 0x02	; 2
     312:	80 93 90 00 	sts	0x0090, r24
		cbi(TCCR3A,PWM10);
     316:	80 91 90 00 	lds	r24, 0x0090
     31a:	8e 7f       	andi	r24, 0xFE	; 254
     31c:	0e c0       	rjmp	.+28     	; 0x33a <PWM_Init_timer3_E3+0x32>
	}
	else if( bitRes == 10 )
     31e:	8a 30       	cpi	r24, 0x0A	; 10
     320:	21 f4       	brne	.+8      	; 0x32a <PWM_Init_timer3_E3+0x22>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
     322:	80 91 90 00 	lds	r24, 0x0090
     326:	82 60       	ori	r24, 0x02	; 2
     328:	03 c0       	rjmp	.+6      	; 0x330 <PWM_Init_timer3_E3+0x28>
		sbi(TCCR3A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
     32a:	80 91 90 00 	lds	r24, 0x0090
     32e:	8d 7f       	andi	r24, 0xFD	; 253
     330:	80 93 90 00 	sts	0x0090, r24
		sbi(TCCR3A,PWM10);
     334:	80 91 90 00 	lds	r24, 0x0090
     338:	81 60       	ori	r24, 0x01	; 1
     33a:	80 93 90 00 	sts	0x0090, r24
	}
	// clear output compare values
	OCR3A = 0;
     33e:	10 92 99 00 	sts	0x0099, r1
     342:	10 92 98 00 	sts	0x0098, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     346:	08 95       	ret

00000348 <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     348:	89 30       	cpi	r24, 0x09	; 9
     34a:	49 f4       	brne	.+18     	; 0x35e <PWM_Init_timer3_E4+0x16>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
     34c:	80 91 91 00 	lds	r24, 0x0091
     350:	82 60       	ori	r24, 0x02	; 2
     352:	80 93 91 00 	sts	0x0091, r24
		cbi(TCCR3B,PWM10);
     356:	80 91 91 00 	lds	r24, 0x0091
     35a:	8e 7f       	andi	r24, 0xFE	; 254
     35c:	0e c0       	rjmp	.+28     	; 0x37a <PWM_Init_timer3_E4+0x32>
	}
	else if( bitRes == 10 )
     35e:	8a 30       	cpi	r24, 0x0A	; 10
     360:	21 f4       	brne	.+8      	; 0x36a <PWM_Init_timer3_E4+0x22>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
     362:	80 91 91 00 	lds	r24, 0x0091
     366:	82 60       	ori	r24, 0x02	; 2
     368:	03 c0       	rjmp	.+6      	; 0x370 <PWM_Init_timer3_E4+0x28>
		sbi(TCCR3B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
     36a:	80 91 91 00 	lds	r24, 0x0091
     36e:	8d 7f       	andi	r24, 0xFD	; 253
     370:	80 93 91 00 	sts	0x0091, r24
		sbi(TCCR3B,PWM10);
     374:	80 91 91 00 	lds	r24, 0x0091
     378:	81 60       	ori	r24, 0x01	; 1
     37a:	80 93 91 00 	sts	0x0091, r24
	}
	// clear output compare values
	OCR3B = 0;
     37e:	10 92 9b 00 	sts	0x009B, r1
     382:	10 92 9a 00 	sts	0x009A, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     386:	08 95       	ret

00000388 <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     388:	89 30       	cpi	r24, 0x09	; 9
     38a:	49 f4       	brne	.+18     	; 0x39e <PWM_Init_timer3_E5+0x16>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
     38c:	80 91 92 00 	lds	r24, 0x0092
     390:	82 60       	ori	r24, 0x02	; 2
     392:	80 93 92 00 	sts	0x0092, r24
		cbi(TCCR3C,PWM10);
     396:	80 91 92 00 	lds	r24, 0x0092
     39a:	8e 7f       	andi	r24, 0xFE	; 254
     39c:	0e c0       	rjmp	.+28     	; 0x3ba <PWM_Init_timer3_E5+0x32>
	}
	else if( bitRes == 10 )
     39e:	8a 30       	cpi	r24, 0x0A	; 10
     3a0:	21 f4       	brne	.+8      	; 0x3aa <PWM_Init_timer3_E5+0x22>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
     3a2:	80 91 92 00 	lds	r24, 0x0092
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <PWM_Init_timer3_E5+0x28>
		sbi(TCCR3C,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
     3aa:	80 91 92 00 	lds	r24, 0x0092
     3ae:	8d 7f       	andi	r24, 0xFD	; 253
     3b0:	80 93 92 00 	sts	0x0092, r24
		sbi(TCCR3C,PWM10);
     3b4:	80 91 92 00 	lds	r24, 0x0092
     3b8:	81 60       	ori	r24, 0x01	; 1
     3ba:	80 93 92 00 	sts	0x0092, r24
	}
	// clear output compare values
	OCR3C = 0;
     3be:	10 92 9d 00 	sts	0x009D, r1
     3c2:	10 92 9c 00 	sts	0x009C, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     3c6:	08 95       	ret

000003c8 <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     3c8:	89 30       	cpi	r24, 0x09	; 9
     3ca:	49 f4       	brne	.+18     	; 0x3de <PWM_Init_timer4_H3+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     3cc:	80 91 a0 00 	lds	r24, 0x00A0
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     3d6:	80 91 a0 00 	lds	r24, 0x00A0
     3da:	8e 7f       	andi	r24, 0xFE	; 254
     3dc:	0e c0       	rjmp	.+28     	; 0x3fa <PWM_Init_timer4_H3+0x32>
	}
	else if( bitRes == 10 )
     3de:	8a 30       	cpi	r24, 0x0A	; 10
     3e0:	21 f4       	brne	.+8      	; 0x3ea <PWM_Init_timer4_H3+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     3e2:	80 91 a0 00 	lds	r24, 0x00A0
     3e6:	82 60       	ori	r24, 0x02	; 2
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <PWM_Init_timer4_H3+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     3ea:	80 91 a0 00 	lds	r24, 0x00A0
     3ee:	8d 7f       	andi	r24, 0xFD	; 253
     3f0:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     3f4:	80 91 a0 00 	lds	r24, 0x00A0
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4A = 0;
     3fe:	10 92 a9 00 	sts	0x00A9, r1
     402:	10 92 a8 00 	sts	0x00A8, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     406:	08 95       	ret

00000408 <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     408:	89 30       	cpi	r24, 0x09	; 9
     40a:	49 f4       	brne	.+18     	; 0x41e <PWM_Init_timer4_H4+0x16>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
     40c:	80 91 a1 00 	lds	r24, 0x00A1
     410:	82 60       	ori	r24, 0x02	; 2
     412:	80 93 a1 00 	sts	0x00A1, r24
		cbi(TCCR4B,PWM10);
     416:	80 91 a1 00 	lds	r24, 0x00A1
     41a:	8e 7f       	andi	r24, 0xFE	; 254
     41c:	0e c0       	rjmp	.+28     	; 0x43a <PWM_Init_timer4_H4+0x32>
	}
	else if( bitRes == 10 )
     41e:	8a 30       	cpi	r24, 0x0A	; 10
     420:	21 f4       	brne	.+8      	; 0x42a <PWM_Init_timer4_H4+0x22>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
     422:	80 91 a1 00 	lds	r24, 0x00A1
     426:	82 60       	ori	r24, 0x02	; 2
     428:	03 c0       	rjmp	.+6      	; 0x430 <PWM_Init_timer4_H4+0x28>
		sbi(TCCR4B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
     42a:	80 91 a1 00 	lds	r24, 0x00A1
     42e:	8d 7f       	andi	r24, 0xFD	; 253
     430:	80 93 a1 00 	sts	0x00A1, r24
		sbi(TCCR4B,PWM10);
     434:	80 91 a1 00 	lds	r24, 0x00A1
     438:	81 60       	ori	r24, 0x01	; 1
     43a:	80 93 a1 00 	sts	0x00A1, r24
	}
	// clear output compare values
	OCR4B = 0;
     43e:	10 92 ab 00 	sts	0x00AB, r1
     442:	10 92 aa 00 	sts	0x00AA, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     446:	08 95       	ret

00000448 <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     448:	89 30       	cpi	r24, 0x09	; 9
     44a:	49 f4       	brne	.+18     	; 0x45e <PWM_Init_timer4_H5+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     44c:	80 91 a0 00 	lds	r24, 0x00A0
     450:	82 60       	ori	r24, 0x02	; 2
     452:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     456:	80 91 a0 00 	lds	r24, 0x00A0
     45a:	8e 7f       	andi	r24, 0xFE	; 254
     45c:	0e c0       	rjmp	.+28     	; 0x47a <PWM_Init_timer4_H5+0x32>
	}
	else if( bitRes == 10 )
     45e:	8a 30       	cpi	r24, 0x0A	; 10
     460:	21 f4       	brne	.+8      	; 0x46a <PWM_Init_timer4_H5+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     462:	80 91 a0 00 	lds	r24, 0x00A0
     466:	82 60       	ori	r24, 0x02	; 2
     468:	03 c0       	rjmp	.+6      	; 0x470 <PWM_Init_timer4_H5+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     46a:	80 91 a0 00 	lds	r24, 0x00A0
     46e:	8d 7f       	andi	r24, 0xFD	; 253
     470:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     474:	80 91 a0 00 	lds	r24, 0x00A0
     478:	81 60       	ori	r24, 0x01	; 1
     47a:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4C = 0;
     47e:	10 92 ad 00 	sts	0x00AD, r1
     482:	10 92 ac 00 	sts	0x00AC, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     486:	08 95       	ret

00000488 <timer1PWMInitICR>:
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     488:	e0 e8       	ldi	r30, 0x80	; 128
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	20 81       	ld	r18, Z
     48e:	2e 7f       	andi	r18, 0xFE	; 254
     490:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     492:	20 81       	ld	r18, Z
     494:	22 60       	ori	r18, 0x02	; 2
     496:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     498:	e1 e8       	ldi	r30, 0x81	; 129
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	20 81       	ld	r18, Z
     49e:	28 60       	ori	r18, 0x08	; 8
     4a0:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     4a2:	20 81       	ld	r18, Z
     4a4:	20 61       	ori	r18, 0x10	; 16
     4a6:	20 83       	st	Z, r18
	
	// set top count value
	ICR1 = topcount;
     4a8:	90 93 87 00 	sts	0x0087, r25
     4ac:	80 93 86 00 	sts	0x0086, r24
	
	// clear output compare values
	OCR1A = 0;
     4b0:	10 92 89 00 	sts	0x0089, r1
     4b4:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     4b8:	10 92 8b 00 	sts	0x008B, r1
     4bc:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     4c0:	10 92 8d 00 	sts	0x008D, r1
     4c4:	10 92 8c 00 	sts	0x008C, r1
}
     4c8:	08 95       	ret

000004ca <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
     4ca:	e0 e9       	ldi	r30, 0x90	; 144
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	20 81       	ld	r18, Z
     4d0:	2e 7f       	andi	r18, 0xFE	; 254
     4d2:	20 83       	st	Z, r18
	sbi(TCCR3A,WGM11);
     4d4:	20 81       	ld	r18, Z
     4d6:	22 60       	ori	r18, 0x02	; 2
     4d8:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM12);
     4da:	e1 e9       	ldi	r30, 0x91	; 145
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	20 81       	ld	r18, Z
     4e0:	28 60       	ori	r18, 0x08	; 8
     4e2:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM13);
     4e4:	20 81       	ld	r18, Z
     4e6:	20 61       	ori	r18, 0x10	; 16
     4e8:	20 83       	st	Z, r18
	
	// set top count value
	ICR3 = topcount;
     4ea:	90 93 97 00 	sts	0x0097, r25
     4ee:	80 93 96 00 	sts	0x0096, r24
	
	// clear output compare values
	OCR3A = 0;
     4f2:	10 92 99 00 	sts	0x0099, r1
     4f6:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
     4fa:	10 92 9b 00 	sts	0x009B, r1
     4fe:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
     502:	10 92 9d 00 	sts	0x009D, r1
     506:	10 92 9c 00 	sts	0x009C, r1
}
     50a:	08 95       	ret

0000050c <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
     50c:	e0 ea       	ldi	r30, 0xA0	; 160
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	20 81       	ld	r18, Z
     512:	2e 7f       	andi	r18, 0xFE	; 254
     514:	20 83       	st	Z, r18
	sbi(TCCR4A,WGM11);
     516:	20 81       	ld	r18, Z
     518:	22 60       	ori	r18, 0x02	; 2
     51a:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM12);
     51c:	e1 ea       	ldi	r30, 0xA1	; 161
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	20 81       	ld	r18, Z
     522:	28 60       	ori	r18, 0x08	; 8
     524:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM13);
     526:	20 81       	ld	r18, Z
     528:	20 61       	ori	r18, 0x10	; 16
     52a:	20 83       	st	Z, r18
	
	// set top count value
	ICR4 = topcount;
     52c:	90 93 a7 00 	sts	0x00A7, r25
     530:	80 93 a6 00 	sts	0x00A6, r24
	
	// clear output compare values
	OCR4A = 0;
     534:	10 92 a9 00 	sts	0x00A9, r1
     538:	10 92 a8 00 	sts	0x00A8, r1
	OCR4B = 0;
     53c:	10 92 ab 00 	sts	0x00AB, r1
     540:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
     544:	10 92 ad 00 	sts	0x00AD, r1
     548:	10 92 ac 00 	sts	0x00AC, r1
}
     54c:	08 95       	ret

0000054e <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
	sbi(TCCR1A,COM1B1);
     54e:	e0 e8       	ldi	r30, 0x80	; 128
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	80 81       	ld	r24, Z
     554:	80 62       	ori	r24, 0x20	; 32
     556:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     558:	80 81       	ld	r24, Z
     55a:	8f 7e       	andi	r24, 0xEF	; 239
     55c:	80 83       	st	Z, r24
}
     55e:	08 95       	ret

00000560 <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
	sbi(TCCR2A,COM2B1);
     560:	e0 eb       	ldi	r30, 0xB0	; 176
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	80 62       	ori	r24, 0x20	; 32
     568:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     56a:	80 81       	ld	r24, Z
     56c:	8f 7e       	andi	r24, 0xEF	; 239
     56e:	80 83       	st	Z, r24
}
     570:	08 95       	ret

00000572 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
	sbi(TCCR3A,COM3A1);
     572:	e0 e9       	ldi	r30, 0x90	; 144
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	80 68       	ori	r24, 0x80	; 128
     57a:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     57c:	80 81       	ld	r24, Z
     57e:	8f 7b       	andi	r24, 0xBF	; 191
     580:	80 83       	st	Z, r24
}
     582:	08 95       	ret

00000584 <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
	sbi(TCCR3A,COM3B1);
     584:	e0 e9       	ldi	r30, 0x90	; 144
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	80 62       	ori	r24, 0x20	; 32
     58c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     58e:	80 81       	ld	r24, Z
     590:	8f 7e       	andi	r24, 0xEF	; 239
     592:	80 83       	st	Z, r24
}
     594:	08 95       	ret

00000596 <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
	sbi(TCCR3A,COM3C1);
     596:	e0 e9       	ldi	r30, 0x90	; 144
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	88 60       	ori	r24, 0x08	; 8
     59e:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     5a0:	80 81       	ld	r24, Z
     5a2:	8b 7f       	andi	r24, 0xFB	; 251
     5a4:	80 83       	st	Z, r24
}
     5a6:	08 95       	ret

000005a8 <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
	sbi(TCCR4A,COM4A1);
     5a8:	e0 ea       	ldi	r30, 0xA0	; 160
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	80 68       	ori	r24, 0x80	; 128
     5b0:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     5b2:	80 81       	ld	r24, Z
     5b4:	8f 7b       	andi	r24, 0xBF	; 191
     5b6:	80 83       	st	Z, r24
}
     5b8:	08 95       	ret

000005ba <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
	sbi(TCCR4A,COM4B1);
     5ba:	e0 ea       	ldi	r30, 0xA0	; 160
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	80 62       	ori	r24, 0x20	; 32
     5c2:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     5c4:	80 81       	ld	r24, Z
     5c6:	8f 7e       	andi	r24, 0xEF	; 239
     5c8:	80 83       	st	Z, r24
}
     5ca:	08 95       	ret

000005cc <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
	sbi(TCCR4A,COM4C1);
     5cc:	e0 ea       	ldi	r30, 0xA0	; 160
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	88 60       	ori	r24, 0x08	; 8
     5d4:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     5d6:	80 81       	ld	r24, Z
     5d8:	8b 7f       	andi	r24, 0xFB	; 251
     5da:	80 83       	st	Z, r24
}
     5dc:	08 95       	ret

000005de <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     5de:	e0 e8       	ldi	r30, 0x80	; 128
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	8f 7d       	andi	r24, 0xDF	; 223
     5e6:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     5e8:	80 81       	ld	r24, Z
     5ea:	8f 7e       	andi	r24, 0xEF	; 239
     5ec:	80 83       	st	Z, r24
}
     5ee:	08 95       	ret

000005f0 <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     5f0:	e0 eb       	ldi	r30, 0xB0	; 176
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 81       	ld	r24, Z
     5f6:	8f 7d       	andi	r24, 0xDF	; 223
     5f8:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     5fa:	80 81       	ld	r24, Z
     5fc:	8f 7e       	andi	r24, 0xEF	; 239
     5fe:	80 83       	st	Z, r24
}
     600:	08 95       	ret

00000602 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     602:	e0 e9       	ldi	r30, 0x90	; 144
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	8f 77       	andi	r24, 0x7F	; 127
     60a:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     60c:	80 81       	ld	r24, Z
     60e:	8f 7b       	andi	r24, 0xBF	; 191
     610:	80 83       	st	Z, r24
}
     612:	08 95       	ret

00000614 <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     614:	e0 e9       	ldi	r30, 0x90	; 144
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	8f 7d       	andi	r24, 0xDF	; 223
     61c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     61e:	80 81       	ld	r24, Z
     620:	8f 7e       	andi	r24, 0xEF	; 239
     622:	80 83       	st	Z, r24
}
     624:	08 95       	ret

00000626 <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     626:	e0 e9       	ldi	r30, 0x90	; 144
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	87 7f       	andi	r24, 0xF7	; 247
     62e:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     630:	80 81       	ld	r24, Z
     632:	8b 7f       	andi	r24, 0xFB	; 251
     634:	80 83       	st	Z, r24
}
     636:	08 95       	ret

00000638 <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     638:	e0 ea       	ldi	r30, 0xA0	; 160
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	8f 77       	andi	r24, 0x7F	; 127
     640:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     642:	80 81       	ld	r24, Z
     644:	8f 7b       	andi	r24, 0xBF	; 191
     646:	80 83       	st	Z, r24
}
     648:	08 95       	ret

0000064a <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     64a:	e0 ea       	ldi	r30, 0xA0	; 160
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8f 7d       	andi	r24, 0xDF	; 223
     652:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     654:	80 81       	ld	r24, Z
     656:	8f 7e       	andi	r24, 0xEF	; 239
     658:	80 83       	st	Z, r24
}
     65a:	08 95       	ret

0000065c <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	87 7f       	andi	r24, 0xF7	; 247
     664:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     666:	80 81       	ld	r24, Z
     668:	8b 7f       	andi	r24, 0xFB	; 251
     66a:	80 83       	st	Z, r24
}
     66c:	08 95       	ret

0000066e <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
	cbi(TCCR1A,PWM11);
     66e:	e0 e8       	ldi	r30, 0x80	; 128
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	8d 7f       	andi	r24, 0xFD	; 253
     676:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM10);
     678:	80 81       	ld	r24, Z
     67a:	8e 7f       	andi	r24, 0xFE	; 254
     67c:	80 83       	st	Z, r24
}

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     67e:	80 81       	ld	r24, Z
     680:	8f 7d       	andi	r24, 0xDF	; 223
     682:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     684:	80 81       	ld	r24, Z
     686:	8f 7e       	andi	r24, 0xEF	; 239
     688:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
	//timer2PWMCOff();
}
     68a:	08 95       	ret

0000068c <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
	cbi(TCCR2A,PWM11);
     68c:	e0 eb       	ldi	r30, 0xB0	; 176
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	8d 7f       	andi	r24, 0xFD	; 253
     694:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM10);
     696:	80 81       	ld	r24, Z
     698:	8e 7f       	andi	r24, 0xFE	; 254
     69a:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     69c:	80 81       	ld	r24, Z
     69e:	8f 7d       	andi	r24, 0xDF	; 223
     6a0:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     6a2:	80 81       	ld	r24, Z
     6a4:	8f 7e       	andi	r24, 0xEF	; 239
     6a6:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM11);
	cbi(TCCR2A,PWM10);
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
	//timer2PWMCOff();
}
     6a8:	08 95       	ret

000006aa <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
	cbi(TCCR3A,PWM11);
     6aa:	e0 e9       	ldi	r30, 0x90	; 144
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	8d 7f       	andi	r24, 0xFD	; 253
     6b2:	80 83       	st	Z, r24
	cbi(TCCR3A,PWM10);
     6b4:	80 81       	ld	r24, Z
     6b6:	8e 7f       	andi	r24, 0xFE	; 254
     6b8:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B1);
	cbi(TCCR2A,COM2B0);
}
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     6ba:	80 81       	ld	r24, Z
     6bc:	8f 77       	andi	r24, 0x7F	; 127
     6be:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     6c0:	80 81       	ld	r24, Z
     6c2:	8f 7b       	andi	r24, 0xBF	; 191
     6c4:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     6c6:	80 81       	ld	r24, Z
     6c8:	8f 7d       	andi	r24, 0xDF	; 223
     6ca:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     6cc:	80 81       	ld	r24, Z
     6ce:	8f 7e       	andi	r24, 0xEF	; 239
     6d0:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     6d2:	80 81       	ld	r24, Z
     6d4:	87 7f       	andi	r24, 0xF7	; 247
     6d6:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     6d8:	80 81       	ld	r24, Z
     6da:	8b 7f       	andi	r24, 0xFB	; 251
     6dc:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
	PWM_timer3_Off_E4();
	PWM_timer3_Off_E5();
	//timer2PWMCOff();
}
     6de:	08 95       	ret

000006e0 <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
	cbi(TCCR4A,PWM11);
     6e0:	e0 ea       	ldi	r30, 0xA0	; 160
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	8d 7f       	andi	r24, 0xFD	; 253
     6e8:	80 83       	st	Z, r24
	cbi(TCCR4A,PWM10);
     6ea:	80 81       	ld	r24, Z
     6ec:	8e 7f       	andi	r24, 0xFE	; 254
     6ee:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C1);
	cbi(TCCR3A,COM3C0);
}
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     6f0:	80 81       	ld	r24, Z
     6f2:	8f 77       	andi	r24, 0x7F	; 127
     6f4:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     6f6:	80 81       	ld	r24, Z
     6f8:	8f 7b       	andi	r24, 0xBF	; 191
     6fa:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     6fc:	80 81       	ld	r24, Z
     6fe:	8f 7d       	andi	r24, 0xDF	; 223
     700:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     702:	80 81       	ld	r24, Z
     704:	8f 7e       	andi	r24, 0xEF	; 239
     706:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     708:	80 81       	ld	r24, Z
     70a:	87 7f       	andi	r24, 0xF7	; 247
     70c:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     70e:	80 81       	ld	r24, Z
     710:	8b 7f       	andi	r24, 0xFB	; 251
     712:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
	PWM_timer4_Off_H4();
	PWM_timer4_Off_H5();
	//timer2PWMCOff();
}
     714:	08 95       	ret

00000716 <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
     716:	90 93 8b 00 	sts	0x008B, r25
     71a:	80 93 8a 00 	sts	0x008A, r24
     71e:	08 95       	ret

00000720 <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     720:	80 93 b4 00 	sts	0x00B4, r24
     724:	08 95       	ret

00000726 <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
     726:	90 93 99 00 	sts	0x0099, r25
     72a:	80 93 98 00 	sts	0x0098, r24
     72e:	08 95       	ret

00000730 <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
     730:	90 93 9b 00 	sts	0x009B, r25
     734:	80 93 9a 00 	sts	0x009A, r24
     738:	08 95       	ret

0000073a <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
     73a:	90 93 9d 00 	sts	0x009D, r25
     73e:	80 93 9c 00 	sts	0x009C, r24
     742:	08 95       	ret

00000744 <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
     744:	90 93 a9 00 	sts	0x00A9, r25
     748:	80 93 a8 00 	sts	0x00A8, r24
     74c:	08 95       	ret

0000074e <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
     74e:	90 93 ab 00 	sts	0x00AB, r25
     752:	80 93 aa 00 	sts	0x00AA, r24
     756:	08 95       	ret

00000758 <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
     758:	90 93 ad 00 	sts	0x00AD, r25
     75c:	80 93 ac 00 	sts	0x00AC, r24
     760:	08 95       	ret

00000762 <configure_ports>:
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
     762:	10 ba       	out	0x10, r1	; 16
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
     764:	11 ba       	out	0x11, r1	; 17
	DDRK = 0b00000000;  //configure all K ports for input				0x00
     766:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
     76a:	10 92 08 01 	sts	0x0108, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
     76e:	9f ef       	ldi	r25, 0xFF	; 255
     770:	91 b9       	out	0x01, r25	; 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
     772:	80 e4       	ldi	r24, 0x40	; 64
     774:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;  //configure ports for output
     776:	97 b9       	out	0x07, r25	; 7
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
     778:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, PD1); // SDA pull-up
     77a:	59 9a       	sbi	0x0b, 1	; 11
	DDRD = 0b11110011;  //configure ports for output
     77c:	83 ef       	ldi	r24, 0xF3	; 243
     77e:	8a b9       	out	0x0a, r24	; 10
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
     780:	8e ef       	ldi	r24, 0xFE	; 254
     782:	8d b9       	out	0x0d, r24	; 13
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
     784:	a5 9a       	sbi	0x14, 5	; 20
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
     786:	9d 98       	cbi	0x13, 5	; 19
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
     788:	80 93 01 01 	sts	0x0101, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
     78c:	80 93 04 01 	sts	0x0104, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
     790:	08 95       	ret

00000792 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
	}
     792:	08 95       	ret

00000794 <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     794:	2e 9a       	sbi	0x05, 6	; 5
     796:	08 95       	ret

00000798 <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     798:	2e 98       	cbi	0x05, 6	; 5
     79a:	08 95       	ret

0000079c <button_pressed>:


//*****************BUTTON****************
int button_pressed(void)
	{
	return (bit_is_clear(PING, 5));
     79c:	22 b3       	in	r18, 0x12	; 18
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	85 e0       	ldi	r24, 0x05	; 5
     7a2:	36 95       	lsr	r19
     7a4:	27 95       	ror	r18
     7a6:	8a 95       	dec	r24
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <button_pressed+0x6>
     7aa:	20 95       	com	r18
     7ac:	30 95       	com	r19
     7ae:	21 70       	andi	r18, 0x01	; 1
     7b0:	30 70       	andi	r19, 0x00	; 0
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
     7b2:	c9 01       	movw	r24, r18
     7b4:	08 95       	ret

000007b6 <cos_SoR>:
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
	if (degrees >= 0)//positive angles
     7b6:	97 fd       	sbrc	r25, 7
     7b8:	10 c0       	rjmp	.+32     	; 0x7da <cos_SoR+0x24>
		return angtable[degrees/5];
     7ba:	25 e0       	ldi	r18, 0x05	; 5
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	0e 94 01 37 	call	0x6e02	; 0x6e02 <__divmodsi4>
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	80 50       	subi	r24, 0x00	; 0
     7d0:	9e 4f       	sbci	r25, 0xFE	; 254
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 81       	ld	r18, Z
     7d6:	31 81       	ldd	r19, Z+1	; 0x01
     7d8:	17 c0       	rjmp	.+46     	; 0x808 <cos_SoR+0x52>
	else
		return -angtable[72-(-degrees)/5];
     7da:	25 e0       	ldi	r18, 0x05	; 5
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	0e 94 01 37 	call	0x6e02	; 0x6e02 <__divmodsi4>
     7e6:	da 01       	movw	r26, r20
     7e8:	c9 01       	movw	r24, r18
     7ea:	88 5b       	subi	r24, 0xB8	; 184
     7ec:	9f 4f       	sbci	r25, 0xFF	; 255
     7ee:	af 4f       	sbci	r26, 0xFF	; 255
     7f0:	bf 4f       	sbci	r27, 0xFF	; 255
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	80 50       	subi	r24, 0x00	; 0
     7f8:	9e 4f       	sbci	r25, 0xFE	; 254
     7fa:	fc 01       	movw	r30, r24
     7fc:	80 81       	ld	r24, Z
     7fe:	91 81       	ldd	r25, Z+1	; 0x01
     800:	22 27       	eor	r18, r18
     802:	33 27       	eor	r19, r19
     804:	28 1b       	sub	r18, r24
     806:	39 0b       	sbc	r19, r25
	}
     808:	c9 01       	movw	r24, r18
     80a:	08 95       	ret

0000080c <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
	degrees=degrees - 90;//phase shift 90 degrees
     80c:	6a 55       	subi	r22, 0x5A	; 90
     80e:	70 40       	sbci	r23, 0x00	; 0
     810:	80 40       	sbci	r24, 0x00	; 0
     812:	90 40       	sbci	r25, 0x00	; 0

	if (degrees >= 0)//positive angles
     814:	97 fd       	sbrc	r25, 7
     816:	10 c0       	rjmp	.+32     	; 0x838 <sin_SoR+0x2c>
		return angtable[degrees/5];
     818:	25 e0       	ldi	r18, 0x05	; 5
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	0e 94 01 37 	call	0x6e02	; 0x6e02 <__divmodsi4>
     824:	da 01       	movw	r26, r20
     826:	c9 01       	movw	r24, r18
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	80 50       	subi	r24, 0x00	; 0
     82e:	9e 4f       	sbci	r25, 0xFE	; 254
     830:	fc 01       	movw	r30, r24
     832:	20 81       	ld	r18, Z
     834:	31 81       	ldd	r19, Z+1	; 0x01
     836:	17 c0       	rjmp	.+46     	; 0x866 <sin_SoR+0x5a>
	else
		return -angtable[72-(-degrees)/5];
     838:	25 e0       	ldi	r18, 0x05	; 5
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	0e 94 01 37 	call	0x6e02	; 0x6e02 <__divmodsi4>
     844:	da 01       	movw	r26, r20
     846:	c9 01       	movw	r24, r18
     848:	88 5b       	subi	r24, 0xB8	; 184
     84a:	9f 4f       	sbci	r25, 0xFF	; 255
     84c:	af 4f       	sbci	r26, 0xFF	; 255
     84e:	bf 4f       	sbci	r27, 0xFF	; 255
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	80 50       	subi	r24, 0x00	; 0
     856:	9e 4f       	sbci	r25, 0xFE	; 254
     858:	fc 01       	movw	r30, r24
     85a:	80 81       	ld	r24, Z
     85c:	91 81       	ldd	r25, Z+1	; 0x01
     85e:	22 27       	eor	r18, r18
     860:	33 27       	eor	r19, r19
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
	}
     866:	c9 01       	movw	r24, r18
     868:	08 95       	ret

0000086a <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
     86a:	cf 92       	push	r12
     86c:	df 92       	push	r13
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	6b 01       	movw	r12, r22
     878:	7c 01       	movw	r14, r24
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
     87a:	8a e5       	ldi	r24, 0x5A	; 90
     87c:	c8 16       	cp	r12, r24
     87e:	d1 04       	cpc	r13, r1
     880:	e1 04       	cpc	r14, r1
     882:	f1 04       	cpc	r15, r1
     884:	a1 f1       	breq	.+104    	; 0x8ee <tan_SoR+0x84>
     886:	86 ea       	ldi	r24, 0xA6	; 166
     888:	c8 16       	cp	r12, r24
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	d8 06       	cpc	r13, r24
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	e8 06       	cpc	r14, r24
     892:	8f ef       	ldi	r24, 0xFF	; 255
     894:	f8 06       	cpc	r15, r24
     896:	59 f1       	breq	.+86     	; 0x8ee <tan_SoR+0x84>
     898:	8e e0       	ldi	r24, 0x0E	; 14
     89a:	c8 16       	cp	r12, r24
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	d8 06       	cpc	r13, r24
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	e8 06       	cpc	r14, r24
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	f8 06       	cpc	r15, r24
     8a8:	11 f1       	breq	.+68     	; 0x8ee <tan_SoR+0x84>
     8aa:	82 ef       	ldi	r24, 0xF2	; 242
     8ac:	c8 16       	cp	r12, r24
     8ae:	8e ef       	ldi	r24, 0xFE	; 254
     8b0:	d8 06       	cpc	r13, r24
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	e8 06       	cpc	r14, r24
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	f8 06       	cpc	r15, r24
     8ba:	c9 f0       	breq	.+50     	; 0x8ee <tan_SoR+0x84>
		return 0;//what else should I return?!?!?
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
     8bc:	c7 01       	movw	r24, r14
     8be:	b6 01       	movw	r22, r12
     8c0:	0e 94 06 04 	call	0x80c	; 0x80c <sin_SoR>
     8c4:	8c 01       	movw	r16, r24
     8c6:	c7 01       	movw	r24, r14
     8c8:	b6 01       	movw	r22, r12
     8ca:	0e 94 db 03 	call	0x7b6	; 0x7b6 <cos_SoR>
     8ce:	bc 01       	movw	r22, r24
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 cc 36 	call	0x6d98	; 0x6d98 <__divmodhi4>
     8d6:	cb 01       	movw	r24, r22
     8d8:	9b 01       	movw	r18, r22
     8da:	73 e0       	ldi	r23, 0x03	; 3
     8dc:	22 0f       	add	r18, r18
     8de:	33 1f       	adc	r19, r19
     8e0:	7a 95       	dec	r23
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <tan_SoR+0x72>
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	28 0f       	add	r18, r24
     8ea:	39 1f       	adc	r19, r25
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <tan_SoR+0x88>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
	}
     8f2:	c9 01       	movw	r24, r18
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	08 95       	ret

00000902 <degrees>:


/*
Shortcuts:		name		input							operation									description
-------------------------------------------------------------------------------------------------------------------------------------------------- */
double 			degrees		( double _radians )				{ return( _radians*r2d_const ); }			// converts radians to degrees
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	44 e3       	ldi	r20, 0x34	; 52
     908:	53 e4       	ldi	r21, 0x43	; 67
     90a:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     90e:	20 e1       	ldi	r18, 0x10	; 16
     910:	38 e5       	ldi	r19, 0x58	; 88
     912:	49 e4       	ldi	r20, 0x49	; 73
     914:	50 e4       	ldi	r21, 0x40	; 64
     916:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
     91a:	08 95       	ret

0000091c <radians>:
double 			radians		( double _degrees ) 			{ return( _degrees*d2r_const ); }			// converts degrees to radians
     91c:	20 e1       	ldi	r18, 0x10	; 16
     91e:	38 e5       	ldi	r19, 0x58	; 88
     920:	49 e4       	ldi	r20, 0x49	; 73
     922:	50 e4       	ldi	r21, 0x40	; 64
     924:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	44 e3       	ldi	r20, 0x34	; 52
     92e:	53 e4       	ldi	r21, 0x43	; 67
     930:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
     934:	08 95       	ret

00000936 <clone>:
	Input Type	:  (double array), (double array), (int)
	Return Type :  none
*/

void clone( double array1[], double array2[], int dim )
{
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	7c 01       	movw	r14, r24
     944:	8b 01       	movw	r16, r22
     946:	ea 01       	movw	r28, r20
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	13 c0       	rjmp	.+38     	; 0x978 <clone+0x42>
	for( int i = 0; i < dim; i++ ){
		array2[i] = array1[i];
     952:	98 01       	movw	r18, r16
     954:	24 0f       	add	r18, r20
     956:	35 1f       	adc	r19, r21
     958:	f7 01       	movw	r30, r14
     95a:	e4 0f       	add	r30, r20
     95c:	f5 1f       	adc	r31, r21
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	a2 81       	ldd	r26, Z+2	; 0x02
     964:	b3 81       	ldd	r27, Z+3	; 0x03
     966:	f9 01       	movw	r30, r18
     968:	80 83       	st	Z, r24
     96a:	91 83       	std	Z+1, r25	; 0x01
     96c:	a2 83       	std	Z+2, r26	; 0x02
     96e:	b3 83       	std	Z+3, r27	; 0x03
	Return Type :  none
*/

void clone( double array1[], double array2[], int dim )
{
	for( int i = 0; i < dim; i++ ){
     970:	6f 5f       	subi	r22, 0xFF	; 255
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	4c 5f       	subi	r20, 0xFC	; 252
     976:	5f 4f       	sbci	r21, 0xFF	; 255
     978:	6c 17       	cp	r22, r28
     97a:	7d 07       	cpc	r23, r29
     97c:	54 f3       	brlt	.-44     	; 0x952 <clone+0x1c>
		array2[i] = array1[i];
	}
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	08 95       	ret

0000098c <clonei>:
	Input Type	:  (double array), (double array), (int)
	Return Type :  none
*/

void clonei( double array1[], double array2[], int i1, int i2 )
{
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	fb 01       	movw	r30, r22
     992:	b9 01       	movw	r22, r18
     994:	9a 01       	movw	r18, r20
     996:	22 0f       	add	r18, r18
     998:	33 1f       	adc	r19, r19
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	ec 01       	movw	r28, r24
     9a0:	c2 0f       	add	r28, r18
     9a2:	d3 1f       	adc	r29, r19
     9a4:	e2 0f       	add	r30, r18
     9a6:	f3 1f       	adc	r31, r19
     9a8:	0a c0       	rjmp	.+20     	; 0x9be <clonei+0x32>
	for( int i = i1; i <= i2; i++ ){
		array2[i] = array1[i];
     9aa:	89 91       	ld	r24, Y+
     9ac:	99 91       	ld	r25, Y+
     9ae:	a9 91       	ld	r26, Y+
     9b0:	b9 91       	ld	r27, Y+
     9b2:	81 93       	st	Z+, r24
     9b4:	91 93       	st	Z+, r25
     9b6:	a1 93       	st	Z+, r26
     9b8:	b1 93       	st	Z+, r27
	Return Type :  none
*/

void clonei( double array1[], double array2[], int i1, int i2 )
{
	for( int i = i1; i <= i2; i++ ){
     9ba:	4f 5f       	subi	r20, 0xFF	; 255
     9bc:	5f 4f       	sbci	r21, 0xFF	; 255
     9be:	64 17       	cp	r22, r20
     9c0:	75 07       	cpc	r23, r21
     9c2:	9c f7       	brge	.-26     	; 0x9aa <clonei+0x1e>
		array2[i] = array1[i];
	}
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <ewadd>:
	Input Type	:  (double array), (double array), (double array), (int)
	Return Type :  none
*/

void ewadd( double array1[], double array2[], double array3[], int dim )
{
     9ca:	6f 92       	push	r6
     9cc:	7f 92       	push	r7
     9ce:	8f 92       	push	r8
     9d0:	9f 92       	push	r9
     9d2:	af 92       	push	r10
     9d4:	bf 92       	push	r11
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	3c 01       	movw	r6, r24
     9e8:	4b 01       	movw	r8, r22
     9ea:	5a 01       	movw	r10, r20
     9ec:	69 01       	movw	r12, r18
     9ee:	ee 24       	eor	r14, r14
     9f0:	ff 24       	eor	r15, r15
     9f2:	c0 e0       	ldi	r28, 0x00	; 0
     9f4:	d0 e0       	ldi	r29, 0x00	; 0
     9f6:	1c c0       	rjmp	.+56     	; 0xa30 <ewadd+0x66>
	for( int i = 0; i < dim; i++ ){
		array3[i] = array1[i]+array2[i];
     9f8:	85 01       	movw	r16, r10
     9fa:	0c 0f       	add	r16, r28
     9fc:	1d 1f       	adc	r17, r29
     9fe:	f3 01       	movw	r30, r6
     a00:	ec 0f       	add	r30, r28
     a02:	fd 1f       	adc	r31, r29
     a04:	d4 01       	movw	r26, r8
     a06:	ac 0f       	add	r26, r28
     a08:	bd 1f       	adc	r27, r29
     a0a:	60 81       	ld	r22, Z
     a0c:	71 81       	ldd	r23, Z+1	; 0x01
     a0e:	82 81       	ldd	r24, Z+2	; 0x02
     a10:	93 81       	ldd	r25, Z+3	; 0x03
     a12:	2d 91       	ld	r18, X+
     a14:	3d 91       	ld	r19, X+
     a16:	4d 91       	ld	r20, X+
     a18:	5c 91       	ld	r21, X
     a1a:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
     a1e:	f8 01       	movw	r30, r16
     a20:	60 83       	st	Z, r22
     a22:	71 83       	std	Z+1, r23	; 0x01
     a24:	82 83       	std	Z+2, r24	; 0x02
     a26:	93 83       	std	Z+3, r25	; 0x03
	Return Type :  none
*/

void ewadd( double array1[], double array2[], double array3[], int dim )
{
	for( int i = 0; i < dim; i++ ){
     a28:	08 94       	sec
     a2a:	e1 1c       	adc	r14, r1
     a2c:	f1 1c       	adc	r15, r1
     a2e:	24 96       	adiw	r28, 0x04	; 4
     a30:	ec 14       	cp	r14, r12
     a32:	fd 04       	cpc	r15, r13
     a34:	0c f3       	brlt	.-62     	; 0x9f8 <ewadd+0x2e>
		array3[i] = array1[i]+array2[i];
	}
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	bf 90       	pop	r11
     a48:	af 90       	pop	r10
     a4a:	9f 90       	pop	r9
     a4c:	8f 90       	pop	r8
     a4e:	7f 90       	pop	r7
     a50:	6f 90       	pop	r6
     a52:	08 95       	ret

00000a54 <ewsub>:
	Input Type	:  (double array), (double array), (double array), (int)
	Return Type :  none
*/

void ewsub( double array1[], double array2[], double array3[], int dim )
{
     a54:	6f 92       	push	r6
     a56:	7f 92       	push	r7
     a58:	8f 92       	push	r8
     a5a:	9f 92       	push	r9
     a5c:	af 92       	push	r10
     a5e:	bf 92       	push	r11
     a60:	cf 92       	push	r12
     a62:	df 92       	push	r13
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	3c 01       	movw	r6, r24
     a72:	4b 01       	movw	r8, r22
     a74:	5a 01       	movw	r10, r20
     a76:	69 01       	movw	r12, r18
     a78:	ee 24       	eor	r14, r14
     a7a:	ff 24       	eor	r15, r15
     a7c:	c0 e0       	ldi	r28, 0x00	; 0
     a7e:	d0 e0       	ldi	r29, 0x00	; 0
     a80:	1c c0       	rjmp	.+56     	; 0xaba <ewsub+0x66>
	for( int i = 0; i < dim; i++ ){
		array3[i] = array1[i]-array2[i];
     a82:	85 01       	movw	r16, r10
     a84:	0c 0f       	add	r16, r28
     a86:	1d 1f       	adc	r17, r29
     a88:	f3 01       	movw	r30, r6
     a8a:	ec 0f       	add	r30, r28
     a8c:	fd 1f       	adc	r31, r29
     a8e:	d4 01       	movw	r26, r8
     a90:	ac 0f       	add	r26, r28
     a92:	bd 1f       	adc	r27, r29
     a94:	60 81       	ld	r22, Z
     a96:	71 81       	ldd	r23, Z+1	; 0x01
     a98:	82 81       	ldd	r24, Z+2	; 0x02
     a9a:	93 81       	ldd	r25, Z+3	; 0x03
     a9c:	2d 91       	ld	r18, X+
     a9e:	3d 91       	ld	r19, X+
     aa0:	4d 91       	ld	r20, X+
     aa2:	5c 91       	ld	r21, X
     aa4:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
     aa8:	f8 01       	movw	r30, r16
     aaa:	60 83       	st	Z, r22
     aac:	71 83       	std	Z+1, r23	; 0x01
     aae:	82 83       	std	Z+2, r24	; 0x02
     ab0:	93 83       	std	Z+3, r25	; 0x03
	Return Type :  none
*/

void ewsub( double array1[], double array2[], double array3[], int dim )
{
	for( int i = 0; i < dim; i++ ){
     ab2:	08 94       	sec
     ab4:	e1 1c       	adc	r14, r1
     ab6:	f1 1c       	adc	r15, r1
     ab8:	24 96       	adiw	r28, 0x04	; 4
     aba:	ec 14       	cp	r14, r12
     abc:	fd 04       	cpc	r15, r13
     abe:	0c f3       	brlt	.-62     	; 0xa82 <ewsub+0x2e>
		array3[i] = array1[i]-array2[i];
	}
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
     acc:	df 90       	pop	r13
     ace:	cf 90       	pop	r12
     ad0:	bf 90       	pop	r11
     ad2:	af 90       	pop	r10
     ad4:	9f 90       	pop	r9
     ad6:	8f 90       	pop	r8
     ad8:	7f 90       	pop	r7
     ada:	6f 90       	pop	r6
     adc:	08 95       	ret

00000ade <ewmul>:
	Input Type	:  (double array), (double array), (double array), (int)
	Return Type :  none
*/

void ewmul( double array1[], double array2[], double array3[], int dim )
{
     ade:	8f 92       	push	r8
     ae0:	9f 92       	push	r9
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	6c 01       	movw	r12, r24
     af8:	4a 01       	movw	r8, r20
     afa:	59 01       	movw	r10, r18
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	c0 e0       	ldi	r28, 0x00	; 0
     b02:	d0 e0       	ldi	r29, 0x00	; 0
     b04:	1a c0       	rjmp	.+52     	; 0xb3a <ewmul+0x5c>
	for( int i = 0; i < dim; i++ ){
		array3[i] = array1[i]*array1[2];
     b06:	84 01       	movw	r16, r8
     b08:	0c 0f       	add	r16, r28
     b0a:	1d 1f       	adc	r17, r29
     b0c:	f6 01       	movw	r30, r12
     b0e:	ec 0f       	add	r30, r28
     b10:	fd 1f       	adc	r31, r29
     b12:	60 81       	ld	r22, Z
     b14:	71 81       	ldd	r23, Z+1	; 0x01
     b16:	82 81       	ldd	r24, Z+2	; 0x02
     b18:	93 81       	ldd	r25, Z+3	; 0x03
     b1a:	f6 01       	movw	r30, r12
     b1c:	20 85       	ldd	r18, Z+8	; 0x08
     b1e:	31 85       	ldd	r19, Z+9	; 0x09
     b20:	42 85       	ldd	r20, Z+10	; 0x0a
     b22:	53 85       	ldd	r21, Z+11	; 0x0b
     b24:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     b28:	f8 01       	movw	r30, r16
     b2a:	60 83       	st	Z, r22
     b2c:	71 83       	std	Z+1, r23	; 0x01
     b2e:	82 83       	std	Z+2, r24	; 0x02
     b30:	93 83       	std	Z+3, r25	; 0x03
	Return Type :  none
*/

void ewmul( double array1[], double array2[], double array3[], int dim )
{
	for( int i = 0; i < dim; i++ ){
     b32:	08 94       	sec
     b34:	e1 1c       	adc	r14, r1
     b36:	f1 1c       	adc	r15, r1
     b38:	24 96       	adiw	r28, 0x04	; 4
     b3a:	ea 14       	cp	r14, r10
     b3c:	fb 04       	cpc	r15, r11
     b3e:	1c f3       	brlt	.-58     	; 0xb06 <ewmul+0x28>
		array3[i] = array1[i]*array1[2];
	}
}
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	bf 90       	pop	r11
     b52:	af 90       	pop	r10
     b54:	9f 90       	pop	r9
     b56:	8f 90       	pop	r8
     b58:	08 95       	ret

00000b5a <ewdiv>:
	Input Type	:  (double array), (double array), (double array), (int)
	Return Type :  none
*/

void ewdiv( double array1[], double array2[], double array3[], int dim )
{
     b5a:	6f 92       	push	r6
     b5c:	7f 92       	push	r7
     b5e:	8f 92       	push	r8
     b60:	9f 92       	push	r9
     b62:	af 92       	push	r10
     b64:	bf 92       	push	r11
     b66:	cf 92       	push	r12
     b68:	df 92       	push	r13
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	3c 01       	movw	r6, r24
     b78:	4b 01       	movw	r8, r22
     b7a:	5a 01       	movw	r10, r20
     b7c:	69 01       	movw	r12, r18
     b7e:	ee 24       	eor	r14, r14
     b80:	ff 24       	eor	r15, r15
     b82:	c0 e0       	ldi	r28, 0x00	; 0
     b84:	d0 e0       	ldi	r29, 0x00	; 0
     b86:	1c c0       	rjmp	.+56     	; 0xbc0 <ewdiv+0x66>
	for( int i = 0; i < dim; i++ ){
		array3[i] = array1[i]/array2[i];
     b88:	85 01       	movw	r16, r10
     b8a:	0c 0f       	add	r16, r28
     b8c:	1d 1f       	adc	r17, r29
     b8e:	f3 01       	movw	r30, r6
     b90:	ec 0f       	add	r30, r28
     b92:	fd 1f       	adc	r31, r29
     b94:	d4 01       	movw	r26, r8
     b96:	ac 0f       	add	r26, r28
     b98:	bd 1f       	adc	r27, r29
     b9a:	60 81       	ld	r22, Z
     b9c:	71 81       	ldd	r23, Z+1	; 0x01
     b9e:	82 81       	ldd	r24, Z+2	; 0x02
     ba0:	93 81       	ldd	r25, Z+3	; 0x03
     ba2:	2d 91       	ld	r18, X+
     ba4:	3d 91       	ld	r19, X+
     ba6:	4d 91       	ld	r20, X+
     ba8:	5c 91       	ld	r21, X
     baa:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
     bae:	f8 01       	movw	r30, r16
     bb0:	60 83       	st	Z, r22
     bb2:	71 83       	std	Z+1, r23	; 0x01
     bb4:	82 83       	std	Z+2, r24	; 0x02
     bb6:	93 83       	std	Z+3, r25	; 0x03
	Return Type :  none
*/

void ewdiv( double array1[], double array2[], double array3[], int dim )
{
	for( int i = 0; i < dim; i++ ){
     bb8:	08 94       	sec
     bba:	e1 1c       	adc	r14, r1
     bbc:	f1 1c       	adc	r15, r1
     bbe:	24 96       	adiw	r28, 0x04	; 4
     bc0:	ec 14       	cp	r14, r12
     bc2:	fd 04       	cpc	r15, r13
     bc4:	0c f3       	brlt	.-62     	; 0xb88 <ewdiv+0x2e>
		array3[i] = array1[i]/array2[i];
	}
}
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	9f 90       	pop	r9
     bdc:	8f 90       	pop	r8
     bde:	7f 90       	pop	r7
     be0:	6f 90       	pop	r6
     be2:	08 95       	ret

00000be4 <ewabs>:
	Input Type	:  (double array), (double array), (double array), (int)
	Return Type :  none
*/

void ewabs( double array1[], double array2[], int dim )
{
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	7c 01       	movw	r14, r24
     bf2:	8b 01       	movw	r16, r22
     bf4:	ea 01       	movw	r28, r20
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	14 c0       	rjmp	.+40     	; 0xc28 <ewabs+0x44>
	for( int i = 0; i < dim; i++ ){
		array2[i] = fabs( array1[i] );
     c00:	98 01       	movw	r18, r16
     c02:	24 0f       	add	r18, r20
     c04:	35 1f       	adc	r19, r21
     c06:	f7 01       	movw	r30, r14
     c08:	e4 0f       	add	r30, r20
     c0a:	f5 1f       	adc	r31, r21
     c0c:	80 81       	ld	r24, Z
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
     c10:	a2 81       	ldd	r26, Z+2	; 0x02
     c12:	b3 81       	ldd	r27, Z+3	; 0x03
     c14:	bf 77       	andi	r27, 0x7F	; 127
     c16:	f9 01       	movw	r30, r18
     c18:	80 83       	st	Z, r24
     c1a:	91 83       	std	Z+1, r25	; 0x01
     c1c:	a2 83       	std	Z+2, r26	; 0x02
     c1e:	b3 83       	std	Z+3, r27	; 0x03
	Return Type :  none
*/

void ewabs( double array1[], double array2[], int dim )
{
	for( int i = 0; i < dim; i++ ){
     c20:	6f 5f       	subi	r22, 0xFF	; 255
     c22:	7f 4f       	sbci	r23, 0xFF	; 255
     c24:	4c 5f       	subi	r20, 0xFC	; 252
     c26:	5f 4f       	sbci	r21, 0xFF	; 255
     c28:	6c 17       	cp	r22, r28
     c2a:	7d 07       	cpc	r23, r29
     c2c:	4c f3       	brlt	.-46     	; 0xc00 <ewabs+0x1c>
		array2[i] = fabs( array1[i] );
	}
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	08 95       	ret

00000c3c <fill>:
	Input Type	:  (double array), (double), (int)
	Return Type :  none
*/

void fill( double array1[], double n, int dim )
{
     c3c:	d9 01       	movw	r26, r18
     c3e:	fc 01       	movw	r30, r24
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <fill+0x14>
	for( int i = 0; i < dim; i++ ){
		array1[i] = n;
     c46:	41 93       	st	Z+, r20
     c48:	51 93       	st	Z+, r21
     c4a:	61 93       	st	Z+, r22
     c4c:	71 93       	st	Z+, r23
	Return Type :  none
*/

void fill( double array1[], double n, int dim )
{
	for( int i = 0; i < dim; i++ ){
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	8a 17       	cp	r24, r26
     c52:	9b 07       	cpc	r25, r27
     c54:	c4 f3       	brlt	.-16     	; 0xc46 <fill+0xa>
		array1[i] = n;
	}
}
     c56:	08 95       	ret

00000c58 <zero>:
	Input Type	:  (double array), (int)
	Return Type :  none
*/

void zero( double array1[], int dim )
{
     c58:	fc 01       	movw	r30, r24
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
	for( int i = 0; i < dim; i++ ){
		array1[i] = 0;
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	05 c0       	rjmp	.+10     	; 0xc72 <zero+0x1a>
     c68:	21 93       	st	Z+, r18
     c6a:	31 93       	st	Z+, r19
     c6c:	41 93       	st	Z+, r20
     c6e:	51 93       	st	Z+, r21
	Return Type :  none
*/

void zero( double array1[], int dim )
{
	for( int i = 0; i < dim; i++ ){
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	86 17       	cp	r24, r22
     c74:	97 07       	cpc	r25, r23
     c76:	c4 f3       	brlt	.-16     	; 0xc68 <zero+0x10>
		array1[i] = 0;
	}
}
     c78:	08 95       	ret

00000c7a <one>:
	Input Type	:  (double array), (int)
	Return Type :  none
*/

void one( double array1[], int dim )
{
     c7a:	fc 01       	movw	r30, r24
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
	for( int i = 0; i < dim; i++ ){
		array1[i] = 1;
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e8       	ldi	r20, 0x80	; 128
     c86:	5f e3       	ldi	r21, 0x3F	; 63
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <one+0x1a>
     c8a:	21 93       	st	Z+, r18
     c8c:	31 93       	st	Z+, r19
     c8e:	41 93       	st	Z+, r20
     c90:	51 93       	st	Z+, r21
	Return Type :  none
*/

void one( double array1[], int dim )
{
	for( int i = 0; i < dim; i++ ){
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	86 17       	cp	r24, r22
     c96:	97 07       	cpc	r25, r23
     c98:	c4 f3       	brlt	.-16     	; 0xc8a <one+0x10>
		array1[i] = 1;
	}
}
     c9a:	08 95       	ret

00000c9c <iesum>:
	Input Type	:  (double array), (int), (int)
	Return Type :  (double)
*/

double iesum( double input_arr[], int i1, int i2 )
{
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	7a 01       	movw	r14, r20
     caa:	8b 01       	movw	r16, r22
     cac:	00 0f       	add	r16, r16
     cae:	11 1f       	adc	r17, r17
     cb0:	00 0f       	add	r16, r16
     cb2:	11 1f       	adc	r17, r17
     cb4:	08 0f       	add	r16, r24
     cb6:	19 1f       	adc	r17, r25
     cb8:	eb 01       	movw	r28, r22
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <iesum+0x3a>
	double temp = 0;
	for( int i = i1; i <= i2 ; i++ ) 
	{ 
		temp += input_arr[i]; 
     cc4:	f8 01       	movw	r30, r16
     cc6:	21 91       	ld	r18, Z+
     cc8:	31 91       	ld	r19, Z+
     cca:	41 91       	ld	r20, Z+
     ccc:	51 91       	ld	r21, Z+
     cce:	8f 01       	movw	r16, r30
     cd0:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
*/

double iesum( double input_arr[], int i1, int i2 )
{
	double temp = 0;
	for( int i = i1; i <= i2 ; i++ ) 
     cd4:	21 96       	adiw	r28, 0x01	; 1
     cd6:	ec 16       	cp	r14, r28
     cd8:	fd 06       	cpc	r15, r29
     cda:	a4 f7       	brge	.-24     	; 0xcc4 <iesum+0x28>
	{ 
		temp += input_arr[i]; 
	}
	return( temp );
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	08 95       	ret

00000cea <iepro>:
	Input Type	:  (double array), (int), (int)
	Return Type :  (double)
*/

double iepro( double input_arr[], int i1, int i2 )
{
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	7a 01       	movw	r14, r20
     cf8:	8b 01       	movw	r16, r22
     cfa:	00 0f       	add	r16, r16
     cfc:	11 1f       	adc	r17, r17
     cfe:	00 0f       	add	r16, r16
     d00:	11 1f       	adc	r17, r17
     d02:	08 0f       	add	r16, r24
     d04:	19 1f       	adc	r17, r25
     d06:	eb 01       	movw	r28, r22
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	09 c0       	rjmp	.+18     	; 0xd24 <iepro+0x3a>
	double temp = 0;
	for( int i = i1; i <= i2 ; i++ ) 
	{ 
		temp *= input_arr[i]; 
     d12:	f8 01       	movw	r30, r16
     d14:	21 91       	ld	r18, Z+
     d16:	31 91       	ld	r19, Z+
     d18:	41 91       	ld	r20, Z+
     d1a:	51 91       	ld	r21, Z+
     d1c:	8f 01       	movw	r16, r30
     d1e:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
*/

double iepro( double input_arr[], int i1, int i2 )
{
	double temp = 0;
	for( int i = i1; i <= i2 ; i++ ) 
     d22:	21 96       	adiw	r28, 0x01	; 1
     d24:	ec 16       	cp	r14, r28
     d26:	fd 06       	cpc	r15, r29
     d28:	a4 f7       	brge	.-24     	; 0xd12 <iepro+0x28>
	{ 
		temp *= input_arr[i]; 
	}
	return( temp );
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	08 95       	ret

00000d38 <mmdot>:
	Input Type	:  (mat3x3), (mat3x3)
	Return Type :  (mat3x3)
*/

mat3x3 mmdot( mat3x3 lhs_mat, mat3x3 rhs_mat ) 
{
     d38:	2f 92       	push	r2
     d3a:	3f 92       	push	r3
     d3c:	4f 92       	push	r4
     d3e:	5f 92       	push	r5
     d40:	6f 92       	push	r6
     d42:	7f 92       	push	r7
     d44:	8f 92       	push	r8
     d46:	9f 92       	push	r9
     d48:	af 92       	push	r10
     d4a:	bf 92       	push	r11
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	ee 97       	sbiw	r28, 0x3e	; 62
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	9e af       	std	Y+62, r25	; 0x3e
     d6e:	8d af       	std	Y+61, r24	; 0x3d
     d70:	67 96       	adiw	r28, 0x17	; 23
     d72:	8c ad       	ldd	r24, Y+60	; 0x3c
     d74:	9d ad       	ldd	r25, Y+61	; 0x3d
     d76:	ae ad       	ldd	r26, Y+62	; 0x3e
     d78:	bf ad       	ldd	r27, Y+63	; 0x3f
     d7a:	67 97       	sbiw	r28, 0x17	; 23
     d7c:	89 af       	std	Y+57, r24	; 0x39
     d7e:	9a af       	std	Y+58, r25	; 0x3a
     d80:	ab af       	std	Y+59, r26	; 0x3b
     d82:	bc af       	std	Y+60, r27	; 0x3c
     d84:	6b 96       	adiw	r28, 0x1b	; 27
     d86:	8c ad       	ldd	r24, Y+60	; 0x3c
     d88:	9d ad       	ldd	r25, Y+61	; 0x3d
     d8a:	ae ad       	ldd	r26, Y+62	; 0x3e
     d8c:	bf ad       	ldd	r27, Y+63	; 0x3f
     d8e:	6b 97       	sbiw	r28, 0x1b	; 27
     d90:	8d ab       	std	Y+53, r24	; 0x35
     d92:	9e ab       	std	Y+54, r25	; 0x36
     d94:	af ab       	std	Y+55, r26	; 0x37
     d96:	b8 af       	std	Y+56, r27	; 0x38
     d98:	6f 96       	adiw	r28, 0x1f	; 31
     d9a:	8c ad       	ldd	r24, Y+60	; 0x3c
     d9c:	9d ad       	ldd	r25, Y+61	; 0x3d
     d9e:	ae ad       	ldd	r26, Y+62	; 0x3e
     da0:	bf ad       	ldd	r27, Y+63	; 0x3f
     da2:	6f 97       	sbiw	r28, 0x1f	; 31
     da4:	89 ab       	std	Y+49, r24	; 0x31
     da6:	9a ab       	std	Y+50, r25	; 0x32
     da8:	ab ab       	std	Y+51, r26	; 0x33
     daa:	bc ab       	std	Y+52, r27	; 0x34
     dac:	a3 96       	adiw	r28, 0x23	; 35
     dae:	8c ad       	ldd	r24, Y+60	; 0x3c
     db0:	9d ad       	ldd	r25, Y+61	; 0x3d
     db2:	ae ad       	ldd	r26, Y+62	; 0x3e
     db4:	bf ad       	ldd	r27, Y+63	; 0x3f
     db6:	a3 97       	sbiw	r28, 0x23	; 35
     db8:	8d a7       	std	Y+45, r24	; 0x2d
     dba:	9e a7       	std	Y+46, r25	; 0x2e
     dbc:	af a7       	std	Y+47, r26	; 0x2f
     dbe:	b8 ab       	std	Y+48, r27	; 0x30
     dc0:	a7 96       	adiw	r28, 0x27	; 39
     dc2:	8c ad       	ldd	r24, Y+60	; 0x3c
     dc4:	9d ad       	ldd	r25, Y+61	; 0x3d
     dc6:	ae ad       	ldd	r26, Y+62	; 0x3e
     dc8:	bf ad       	ldd	r27, Y+63	; 0x3f
     dca:	a7 97       	sbiw	r28, 0x27	; 39
     dcc:	89 a7       	std	Y+41, r24	; 0x29
     dce:	9a a7       	std	Y+42, r25	; 0x2a
     dd0:	ab a7       	std	Y+43, r26	; 0x2b
     dd2:	bc a7       	std	Y+44, r27	; 0x2c
     dd4:	ab 96       	adiw	r28, 0x2b	; 43
     dd6:	8c ad       	ldd	r24, Y+60	; 0x3c
     dd8:	9d ad       	ldd	r25, Y+61	; 0x3d
     dda:	ae ad       	ldd	r26, Y+62	; 0x3e
     ddc:	bf ad       	ldd	r27, Y+63	; 0x3f
     dde:	ab 97       	sbiw	r28, 0x2b	; 43
     de0:	8d a3       	std	Y+37, r24	; 0x25
     de2:	9e a3       	std	Y+38, r25	; 0x26
     de4:	af a3       	std	Y+39, r26	; 0x27
     de6:	b8 a7       	std	Y+40, r27	; 0x28
     de8:	af 96       	adiw	r28, 0x2f	; 47
     dea:	ac ac       	ldd	r10, Y+60	; 0x3c
     dec:	bd ac       	ldd	r11, Y+61	; 0x3d
     dee:	ce ac       	ldd	r12, Y+62	; 0x3e
     df0:	df ac       	ldd	r13, Y+63	; 0x3f
     df2:	af 97       	sbiw	r28, 0x2f	; 47
     df4:	e3 96       	adiw	r28, 0x33	; 51
     df6:	6c ac       	ldd	r6, Y+60	; 0x3c
     df8:	7d ac       	ldd	r7, Y+61	; 0x3d
     dfa:	8e ac       	ldd	r8, Y+62	; 0x3e
     dfc:	9f ac       	ldd	r9, Y+63	; 0x3f
     dfe:	e3 97       	sbiw	r28, 0x33	; 51
     e00:	e7 96       	adiw	r28, 0x37	; 55
     e02:	2c ac       	ldd	r2, Y+60	; 0x3c
     e04:	3d ac       	ldd	r3, Y+61	; 0x3d
     e06:	4e ac       	ldd	r4, Y+62	; 0x3e
     e08:	5f ac       	ldd	r5, Y+63	; 0x3f
     e0a:	e7 97       	sbiw	r28, 0x37	; 55
     e0c:	eb 96       	adiw	r28, 0x3b	; 59
     e0e:	8c ad       	ldd	r24, Y+60	; 0x3c
     e10:	9d ad       	ldd	r25, Y+61	; 0x3d
     e12:	ae ad       	ldd	r26, Y+62	; 0x3e
     e14:	bf ad       	ldd	r27, Y+63	; 0x3f
     e16:	eb 97       	sbiw	r28, 0x3b	; 59
     e18:	89 a3       	std	Y+33, r24	; 0x21
     e1a:	9a a3       	std	Y+34, r25	; 0x22
     e1c:	ab a3       	std	Y+35, r26	; 0x23
     e1e:	bc a3       	std	Y+36, r27	; 0x24
     e20:	cd 57       	subi	r28, 0x7D	; 125
     e22:	df 4f       	sbci	r29, 0xFF	; 255
     e24:	88 81       	ld	r24, Y
     e26:	99 81       	ldd	r25, Y+1	; 0x01
     e28:	aa 81       	ldd	r26, Y+2	; 0x02
     e2a:	bb 81       	ldd	r27, Y+3	; 0x03
     e2c:	c3 58       	subi	r28, 0x83	; 131
     e2e:	d0 40       	sbci	r29, 0x00	; 0
     e30:	8d 8f       	std	Y+29, r24	; 0x1d
     e32:	9e 8f       	std	Y+30, r25	; 0x1e
     e34:	af 8f       	std	Y+31, r26	; 0x1f
     e36:	b8 a3       	std	Y+32, r27	; 0x20
     e38:	c1 57       	subi	r28, 0x71	; 113
     e3a:	df 4f       	sbci	r29, 0xFF	; 255
     e3c:	88 81       	ld	r24, Y
     e3e:	99 81       	ldd	r25, Y+1	; 0x01
     e40:	aa 81       	ldd	r26, Y+2	; 0x02
     e42:	bb 81       	ldd	r27, Y+3	; 0x03
     e44:	cf 58       	subi	r28, 0x8F	; 143
     e46:	d0 40       	sbci	r29, 0x00	; 0
     e48:	89 8f       	std	Y+25, r24	; 0x19
     e4a:	9a 8f       	std	Y+26, r25	; 0x1a
     e4c:	ab 8f       	std	Y+27, r26	; 0x1b
     e4e:	bc 8f       	std	Y+28, r27	; 0x1c
     e50:	ef 96       	adiw	r28, 0x3f	; 63
     e52:	8c ad       	ldd	r24, Y+60	; 0x3c
     e54:	9d ad       	ldd	r25, Y+61	; 0x3d
     e56:	ae ad       	ldd	r26, Y+62	; 0x3e
     e58:	bf ad       	ldd	r27, Y+63	; 0x3f
     e5a:	ef 97       	sbiw	r28, 0x3f	; 63
     e5c:	8d 8b       	std	Y+21, r24	; 0x15
     e5e:	9e 8b       	std	Y+22, r25	; 0x16
     e60:	af 8b       	std	Y+23, r26	; 0x17
     e62:	b8 8f       	std	Y+24, r27	; 0x18
     e64:	c9 57       	subi	r28, 0x79	; 121
     e66:	df 4f       	sbci	r29, 0xFF	; 255
     e68:	88 81       	ld	r24, Y
     e6a:	99 81       	ldd	r25, Y+1	; 0x01
     e6c:	aa 81       	ldd	r26, Y+2	; 0x02
     e6e:	bb 81       	ldd	r27, Y+3	; 0x03
     e70:	c7 58       	subi	r28, 0x87	; 135
     e72:	d0 40       	sbci	r29, 0x00	; 0
     e74:	89 8b       	std	Y+17, r24	; 0x11
     e76:	9a 8b       	std	Y+18, r25	; 0x12
     e78:	ab 8b       	std	Y+19, r26	; 0x13
     e7a:	bc 8b       	std	Y+20, r27	; 0x14
     e7c:	fe 01       	movw	r30, r28
     e7e:	ed 56       	subi	r30, 0x6D	; 109
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	a2 81       	ldd	r26, Z+2	; 0x02
     e88:	b3 81       	ldd	r27, Z+3	; 0x03
     e8a:	8d 87       	std	Y+13, r24	; 0x0d
     e8c:	9e 87       	std	Y+14, r25	; 0x0e
     e8e:	af 87       	std	Y+15, r26	; 0x0f
     e90:	b8 8b       	std	Y+16, r27	; 0x10
     e92:	c1 58       	subi	r28, 0x81	; 129
     e94:	df 4f       	sbci	r29, 0xFF	; 255
     e96:	88 81       	ld	r24, Y
     e98:	99 81       	ldd	r25, Y+1	; 0x01
     e9a:	aa 81       	ldd	r26, Y+2	; 0x02
     e9c:	bb 81       	ldd	r27, Y+3	; 0x03
     e9e:	cf 57       	subi	r28, 0x7F	; 127
     ea0:	d0 40       	sbci	r29, 0x00	; 0
     ea2:	89 87       	std	Y+9, r24	; 0x09
     ea4:	9a 87       	std	Y+10, r25	; 0x0a
     ea6:	ab 87       	std	Y+11, r26	; 0x0b
     ea8:	bc 87       	std	Y+12, r27	; 0x0c
     eaa:	c5 57       	subi	r28, 0x75	; 117
     eac:	df 4f       	sbci	r29, 0xFF	; 255
     eae:	88 81       	ld	r24, Y
     eb0:	99 81       	ldd	r25, Y+1	; 0x01
     eb2:	aa 81       	ldd	r26, Y+2	; 0x02
     eb4:	bb 81       	ldd	r27, Y+3	; 0x03
     eb6:	cb 58       	subi	r28, 0x8B	; 139
     eb8:	d0 40       	sbci	r29, 0x00	; 0
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	af 83       	std	Y+7, r26	; 0x07
     ec0:	b8 87       	std	Y+8, r27	; 0x08
     ec2:	fe 01       	movw	r30, r28
     ec4:	e9 56       	subi	r30, 0x69	; 105
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	a2 81       	ldd	r26, Z+2	; 0x02
     ece:	b3 81       	ldd	r27, Z+3	; 0x03
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	ab 83       	std	Y+3, r26	; 0x03
     ed6:	bc 83       	std	Y+4, r27	; 0x04
	
	outmat.e31 = lhs_mat.e31*rhs_mat.e11 + lhs_mat.e32*rhs_mat.e21 + lhs_mat.e33*rhs_mat.e31;
	outmat.e32 = lhs_mat.e31*rhs_mat.e12 + lhs_mat.e32*rhs_mat.e22 + lhs_mat.e33*rhs_mat.e32;
	outmat.e33 = lhs_mat.e31*rhs_mat.e13 + lhs_mat.e32*rhs_mat.e23 + lhs_mat.e33*rhs_mat.e33;

	return( outmat );
     ed8:	c6 01       	movw	r24, r12
     eda:	b5 01       	movw	r22, r10
     edc:	29 85       	ldd	r18, Y+9	; 0x09
     ede:	3a 85       	ldd	r19, Y+10	; 0x0a
     ee0:	4b 85       	ldd	r20, Y+11	; 0x0b
     ee2:	5c 85       	ldd	r21, Y+12	; 0x0c
     ee4:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     ee8:	7b 01       	movw	r14, r22
     eea:	8c 01       	movw	r16, r24
     eec:	c4 01       	movw	r24, r8
     eee:	b3 01       	movw	r22, r6
     ef0:	2d 81       	ldd	r18, Y+5	; 0x05
     ef2:	3e 81       	ldd	r19, Y+6	; 0x06
     ef4:	4f 81       	ldd	r20, Y+7	; 0x07
     ef6:	58 85       	ldd	r21, Y+8	; 0x08
     ef8:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     efc:	9b 01       	movw	r18, r22
     efe:	ac 01       	movw	r20, r24
     f00:	c8 01       	movw	r24, r16
     f02:	b7 01       	movw	r22, r14
     f04:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
     f08:	7b 01       	movw	r14, r22
     f0a:	8c 01       	movw	r16, r24
     f0c:	c2 01       	movw	r24, r4
     f0e:	b1 01       	movw	r22, r2
     f10:	29 81       	ldd	r18, Y+1	; 0x01
     f12:	3a 81       	ldd	r19, Y+2	; 0x02
     f14:	4b 81       	ldd	r20, Y+3	; 0x03
     f16:	5c 81       	ldd	r21, Y+4	; 0x04
     f18:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     f1c:	9b 01       	movw	r18, r22
     f1e:	ac 01       	movw	r20, r24
     f20:	c8 01       	movw	r24, r16
     f22:	b7 01       	movw	r22, r14
     f24:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
     f28:	ad ad       	ldd	r26, Y+61	; 0x3d
     f2a:	be ad       	ldd	r27, Y+62	; 0x3e
     f2c:	90 96       	adiw	r26, 0x20	; 32
     f2e:	6d 93       	st	X+, r22
     f30:	7d 93       	st	X+, r23
     f32:	8d 93       	st	X+, r24
     f34:	9c 93       	st	X, r25
     f36:	93 97       	sbiw	r26, 0x23	; 35
     f38:	c6 01       	movw	r24, r12
     f3a:	b5 01       	movw	r22, r10
     f3c:	2d 89       	ldd	r18, Y+21	; 0x15
     f3e:	3e 89       	ldd	r19, Y+22	; 0x16
     f40:	4f 89       	ldd	r20, Y+23	; 0x17
     f42:	58 8d       	ldd	r21, Y+24	; 0x18
     f44:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     f48:	7b 01       	movw	r14, r22
     f4a:	8c 01       	movw	r16, r24
     f4c:	c4 01       	movw	r24, r8
     f4e:	b3 01       	movw	r22, r6
     f50:	29 89       	ldd	r18, Y+17	; 0x11
     f52:	3a 89       	ldd	r19, Y+18	; 0x12
     f54:	4b 89       	ldd	r20, Y+19	; 0x13
     f56:	5c 89       	ldd	r21, Y+20	; 0x14
     f58:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     f5c:	9b 01       	movw	r18, r22
     f5e:	ac 01       	movw	r20, r24
     f60:	c8 01       	movw	r24, r16
     f62:	b7 01       	movw	r22, r14
     f64:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
     f68:	7b 01       	movw	r14, r22
     f6a:	8c 01       	movw	r16, r24
     f6c:	c2 01       	movw	r24, r4
     f6e:	b1 01       	movw	r22, r2
     f70:	2d 85       	ldd	r18, Y+13	; 0x0d
     f72:	3e 85       	ldd	r19, Y+14	; 0x0e
     f74:	4f 85       	ldd	r20, Y+15	; 0x0f
     f76:	58 89       	ldd	r21, Y+16	; 0x10
     f78:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     f7c:	9b 01       	movw	r18, r22
     f7e:	ac 01       	movw	r20, r24
     f80:	c8 01       	movw	r24, r16
     f82:	b7 01       	movw	r22, r14
     f84:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
     f88:	ed ad       	ldd	r30, Y+61	; 0x3d
     f8a:	fe ad       	ldd	r31, Y+62	; 0x3e
     f8c:	64 8f       	std	Z+28, r22	; 0x1c
     f8e:	75 8f       	std	Z+29, r23	; 0x1d
     f90:	86 8f       	std	Z+30, r24	; 0x1e
     f92:	97 8f       	std	Z+31, r25	; 0x1f
     f94:	c6 01       	movw	r24, r12
     f96:	b5 01       	movw	r22, r10
     f98:	29 a1       	ldd	r18, Y+33	; 0x21
     f9a:	3a a1       	ldd	r19, Y+34	; 0x22
     f9c:	4b a1       	ldd	r20, Y+35	; 0x23
     f9e:	5c a1       	ldd	r21, Y+36	; 0x24
     fa0:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     fa4:	7b 01       	movw	r14, r22
     fa6:	8c 01       	movw	r16, r24
     fa8:	c4 01       	movw	r24, r8
     faa:	b3 01       	movw	r22, r6
     fac:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fae:	3e 8d       	ldd	r19, Y+30	; 0x1e
     fb0:	4f 8d       	ldd	r20, Y+31	; 0x1f
     fb2:	58 a1       	ldd	r21, Y+32	; 0x20
     fb4:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     fb8:	9b 01       	movw	r18, r22
     fba:	ac 01       	movw	r20, r24
     fbc:	c8 01       	movw	r24, r16
     fbe:	b7 01       	movw	r22, r14
     fc0:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
     fc4:	7b 01       	movw	r14, r22
     fc6:	8c 01       	movw	r16, r24
     fc8:	c2 01       	movw	r24, r4
     fca:	b1 01       	movw	r22, r2
     fcc:	29 8d       	ldd	r18, Y+25	; 0x19
     fce:	3a 8d       	ldd	r19, Y+26	; 0x1a
     fd0:	4b 8d       	ldd	r20, Y+27	; 0x1b
     fd2:	5c 8d       	ldd	r21, Y+28	; 0x1c
     fd4:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
     fd8:	9b 01       	movw	r18, r22
     fda:	ac 01       	movw	r20, r24
     fdc:	c8 01       	movw	r24, r16
     fde:	b7 01       	movw	r22, r14
     fe0:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
     fe4:	ad ad       	ldd	r26, Y+61	; 0x3d
     fe6:	be ad       	ldd	r27, Y+62	; 0x3e
     fe8:	58 96       	adiw	r26, 0x18	; 24
     fea:	6d 93       	st	X+, r22
     fec:	7d 93       	st	X+, r23
     fee:	8d 93       	st	X+, r24
     ff0:	9c 93       	st	X, r25
     ff2:	5b 97       	sbiw	r26, 0x1b	; 27
     ff4:	6d a5       	ldd	r22, Y+45	; 0x2d
     ff6:	7e a5       	ldd	r23, Y+46	; 0x2e
     ff8:	8f a5       	ldd	r24, Y+47	; 0x2f
     ffa:	98 a9       	ldd	r25, Y+48	; 0x30
     ffc:	29 85       	ldd	r18, Y+9	; 0x09
     ffe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1000:	4b 85       	ldd	r20, Y+11	; 0x0b
    1002:	5c 85       	ldd	r21, Y+12	; 0x0c
    1004:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1008:	7b 01       	movw	r14, r22
    100a:	8c 01       	movw	r16, r24
    100c:	69 a5       	ldd	r22, Y+41	; 0x29
    100e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1010:	8b a5       	ldd	r24, Y+43	; 0x2b
    1012:	9c a5       	ldd	r25, Y+44	; 0x2c
    1014:	2d 81       	ldd	r18, Y+5	; 0x05
    1016:	3e 81       	ldd	r19, Y+6	; 0x06
    1018:	4f 81       	ldd	r20, Y+7	; 0x07
    101a:	58 85       	ldd	r21, Y+8	; 0x08
    101c:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1020:	9b 01       	movw	r18, r22
    1022:	ac 01       	movw	r20, r24
    1024:	c8 01       	movw	r24, r16
    1026:	b7 01       	movw	r22, r14
    1028:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    102c:	7b 01       	movw	r14, r22
    102e:	8c 01       	movw	r16, r24
    1030:	6d a1       	ldd	r22, Y+37	; 0x25
    1032:	7e a1       	ldd	r23, Y+38	; 0x26
    1034:	8f a1       	ldd	r24, Y+39	; 0x27
    1036:	98 a5       	ldd	r25, Y+40	; 0x28
    1038:	29 81       	ldd	r18, Y+1	; 0x01
    103a:	3a 81       	ldd	r19, Y+2	; 0x02
    103c:	4b 81       	ldd	r20, Y+3	; 0x03
    103e:	5c 81       	ldd	r21, Y+4	; 0x04
    1040:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	c8 01       	movw	r24, r16
    104a:	b7 01       	movw	r22, r14
    104c:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1050:	ed ad       	ldd	r30, Y+61	; 0x3d
    1052:	fe ad       	ldd	r31, Y+62	; 0x3e
    1054:	64 8b       	std	Z+20, r22	; 0x14
    1056:	75 8b       	std	Z+21, r23	; 0x15
    1058:	86 8b       	std	Z+22, r24	; 0x16
    105a:	97 8b       	std	Z+23, r25	; 0x17
    105c:	6d a5       	ldd	r22, Y+45	; 0x2d
    105e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1060:	8f a5       	ldd	r24, Y+47	; 0x2f
    1062:	98 a9       	ldd	r25, Y+48	; 0x30
    1064:	2d 89       	ldd	r18, Y+21	; 0x15
    1066:	3e 89       	ldd	r19, Y+22	; 0x16
    1068:	4f 89       	ldd	r20, Y+23	; 0x17
    106a:	58 8d       	ldd	r21, Y+24	; 0x18
    106c:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1070:	7b 01       	movw	r14, r22
    1072:	8c 01       	movw	r16, r24
    1074:	69 a5       	ldd	r22, Y+41	; 0x29
    1076:	7a a5       	ldd	r23, Y+42	; 0x2a
    1078:	8b a5       	ldd	r24, Y+43	; 0x2b
    107a:	9c a5       	ldd	r25, Y+44	; 0x2c
    107c:	29 89       	ldd	r18, Y+17	; 0x11
    107e:	3a 89       	ldd	r19, Y+18	; 0x12
    1080:	4b 89       	ldd	r20, Y+19	; 0x13
    1082:	5c 89       	ldd	r21, Y+20	; 0x14
    1084:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1088:	9b 01       	movw	r18, r22
    108a:	ac 01       	movw	r20, r24
    108c:	c8 01       	movw	r24, r16
    108e:	b7 01       	movw	r22, r14
    1090:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1094:	7b 01       	movw	r14, r22
    1096:	8c 01       	movw	r16, r24
    1098:	6d a1       	ldd	r22, Y+37	; 0x25
    109a:	7e a1       	ldd	r23, Y+38	; 0x26
    109c:	8f a1       	ldd	r24, Y+39	; 0x27
    109e:	98 a5       	ldd	r25, Y+40	; 0x28
    10a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    10a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    10a4:	4f 85       	ldd	r20, Y+15	; 0x0f
    10a6:	58 89       	ldd	r21, Y+16	; 0x10
    10a8:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    10ac:	9b 01       	movw	r18, r22
    10ae:	ac 01       	movw	r20, r24
    10b0:	c8 01       	movw	r24, r16
    10b2:	b7 01       	movw	r22, r14
    10b4:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    10b8:	ad ad       	ldd	r26, Y+61	; 0x3d
    10ba:	be ad       	ldd	r27, Y+62	; 0x3e
    10bc:	50 96       	adiw	r26, 0x10	; 16
    10be:	6d 93       	st	X+, r22
    10c0:	7d 93       	st	X+, r23
    10c2:	8d 93       	st	X+, r24
    10c4:	9c 93       	st	X, r25
    10c6:	53 97       	sbiw	r26, 0x13	; 19
    10c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    10ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    10cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ce:	98 a9       	ldd	r25, Y+48	; 0x30
    10d0:	29 a1       	ldd	r18, Y+33	; 0x21
    10d2:	3a a1       	ldd	r19, Y+34	; 0x22
    10d4:	4b a1       	ldd	r20, Y+35	; 0x23
    10d6:	5c a1       	ldd	r21, Y+36	; 0x24
    10d8:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    10dc:	7b 01       	movw	r14, r22
    10de:	8c 01       	movw	r16, r24
    10e0:	69 a5       	ldd	r22, Y+41	; 0x29
    10e2:	7a a5       	ldd	r23, Y+42	; 0x2a
    10e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    10e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    10e8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    10ea:	3e 8d       	ldd	r19, Y+30	; 0x1e
    10ec:	4f 8d       	ldd	r20, Y+31	; 0x1f
    10ee:	58 a1       	ldd	r21, Y+32	; 0x20
    10f0:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
    10f8:	c8 01       	movw	r24, r16
    10fa:	b7 01       	movw	r22, r14
    10fc:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1100:	7b 01       	movw	r14, r22
    1102:	8c 01       	movw	r16, r24
    1104:	6d a1       	ldd	r22, Y+37	; 0x25
    1106:	7e a1       	ldd	r23, Y+38	; 0x26
    1108:	8f a1       	ldd	r24, Y+39	; 0x27
    110a:	98 a5       	ldd	r25, Y+40	; 0x28
    110c:	29 8d       	ldd	r18, Y+25	; 0x19
    110e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1110:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1112:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1114:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1118:	9b 01       	movw	r18, r22
    111a:	ac 01       	movw	r20, r24
    111c:	c8 01       	movw	r24, r16
    111e:	b7 01       	movw	r22, r14
    1120:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1124:	ed ad       	ldd	r30, Y+61	; 0x3d
    1126:	fe ad       	ldd	r31, Y+62	; 0x3e
    1128:	64 87       	std	Z+12, r22	; 0x0c
    112a:	75 87       	std	Z+13, r23	; 0x0d
    112c:	86 87       	std	Z+14, r24	; 0x0e
    112e:	97 87       	std	Z+15, r25	; 0x0f
    1130:	69 ad       	ldd	r22, Y+57	; 0x39
    1132:	7a ad       	ldd	r23, Y+58	; 0x3a
    1134:	8b ad       	ldd	r24, Y+59	; 0x3b
    1136:	9c ad       	ldd	r25, Y+60	; 0x3c
    1138:	29 85       	ldd	r18, Y+9	; 0x09
    113a:	3a 85       	ldd	r19, Y+10	; 0x0a
    113c:	4b 85       	ldd	r20, Y+11	; 0x0b
    113e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1140:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1144:	7b 01       	movw	r14, r22
    1146:	8c 01       	movw	r16, r24
    1148:	6d a9       	ldd	r22, Y+53	; 0x35
    114a:	7e a9       	ldd	r23, Y+54	; 0x36
    114c:	8f a9       	ldd	r24, Y+55	; 0x37
    114e:	98 ad       	ldd	r25, Y+56	; 0x38
    1150:	2d 81       	ldd	r18, Y+5	; 0x05
    1152:	3e 81       	ldd	r19, Y+6	; 0x06
    1154:	4f 81       	ldd	r20, Y+7	; 0x07
    1156:	58 85       	ldd	r21, Y+8	; 0x08
    1158:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    115c:	9b 01       	movw	r18, r22
    115e:	ac 01       	movw	r20, r24
    1160:	c8 01       	movw	r24, r16
    1162:	b7 01       	movw	r22, r14
    1164:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1168:	7b 01       	movw	r14, r22
    116a:	8c 01       	movw	r16, r24
    116c:	69 a9       	ldd	r22, Y+49	; 0x31
    116e:	7a a9       	ldd	r23, Y+50	; 0x32
    1170:	8b a9       	ldd	r24, Y+51	; 0x33
    1172:	9c a9       	ldd	r25, Y+52	; 0x34
    1174:	29 81       	ldd	r18, Y+1	; 0x01
    1176:	3a 81       	ldd	r19, Y+2	; 0x02
    1178:	4b 81       	ldd	r20, Y+3	; 0x03
    117a:	5c 81       	ldd	r21, Y+4	; 0x04
    117c:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1180:	9b 01       	movw	r18, r22
    1182:	ac 01       	movw	r20, r24
    1184:	c8 01       	movw	r24, r16
    1186:	b7 01       	movw	r22, r14
    1188:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    118c:	ad ad       	ldd	r26, Y+61	; 0x3d
    118e:	be ad       	ldd	r27, Y+62	; 0x3e
    1190:	18 96       	adiw	r26, 0x08	; 8
    1192:	6d 93       	st	X+, r22
    1194:	7d 93       	st	X+, r23
    1196:	8d 93       	st	X+, r24
    1198:	9c 93       	st	X, r25
    119a:	1b 97       	sbiw	r26, 0x0b	; 11
    119c:	69 ad       	ldd	r22, Y+57	; 0x39
    119e:	7a ad       	ldd	r23, Y+58	; 0x3a
    11a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    11a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    11a4:	2d 89       	ldd	r18, Y+21	; 0x15
    11a6:	3e 89       	ldd	r19, Y+22	; 0x16
    11a8:	4f 89       	ldd	r20, Y+23	; 0x17
    11aa:	58 8d       	ldd	r21, Y+24	; 0x18
    11ac:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    11b0:	7b 01       	movw	r14, r22
    11b2:	8c 01       	movw	r16, r24
    11b4:	6d a9       	ldd	r22, Y+53	; 0x35
    11b6:	7e a9       	ldd	r23, Y+54	; 0x36
    11b8:	8f a9       	ldd	r24, Y+55	; 0x37
    11ba:	98 ad       	ldd	r25, Y+56	; 0x38
    11bc:	29 89       	ldd	r18, Y+17	; 0x11
    11be:	3a 89       	ldd	r19, Y+18	; 0x12
    11c0:	4b 89       	ldd	r20, Y+19	; 0x13
    11c2:	5c 89       	ldd	r21, Y+20	; 0x14
    11c4:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    11c8:	9b 01       	movw	r18, r22
    11ca:	ac 01       	movw	r20, r24
    11cc:	c8 01       	movw	r24, r16
    11ce:	b7 01       	movw	r22, r14
    11d0:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    11d4:	7b 01       	movw	r14, r22
    11d6:	8c 01       	movw	r16, r24
    11d8:	69 a9       	ldd	r22, Y+49	; 0x31
    11da:	7a a9       	ldd	r23, Y+50	; 0x32
    11dc:	8b a9       	ldd	r24, Y+51	; 0x33
    11de:	9c a9       	ldd	r25, Y+52	; 0x34
    11e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    11e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    11e4:	4f 85       	ldd	r20, Y+15	; 0x0f
    11e6:	58 89       	ldd	r21, Y+16	; 0x10
    11e8:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    11ec:	9b 01       	movw	r18, r22
    11ee:	ac 01       	movw	r20, r24
    11f0:	c8 01       	movw	r24, r16
    11f2:	b7 01       	movw	r22, r14
    11f4:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    11f8:	ed ad       	ldd	r30, Y+61	; 0x3d
    11fa:	fe ad       	ldd	r31, Y+62	; 0x3e
    11fc:	64 83       	std	Z+4, r22	; 0x04
    11fe:	75 83       	std	Z+5, r23	; 0x05
    1200:	86 83       	std	Z+6, r24	; 0x06
    1202:	97 83       	std	Z+7, r25	; 0x07
    1204:	69 ad       	ldd	r22, Y+57	; 0x39
    1206:	7a ad       	ldd	r23, Y+58	; 0x3a
    1208:	8b ad       	ldd	r24, Y+59	; 0x3b
    120a:	9c ad       	ldd	r25, Y+60	; 0x3c
    120c:	29 a1       	ldd	r18, Y+33	; 0x21
    120e:	3a a1       	ldd	r19, Y+34	; 0x22
    1210:	4b a1       	ldd	r20, Y+35	; 0x23
    1212:	5c a1       	ldd	r21, Y+36	; 0x24
    1214:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1218:	7b 01       	movw	r14, r22
    121a:	8c 01       	movw	r16, r24
    121c:	6d a9       	ldd	r22, Y+53	; 0x35
    121e:	7e a9       	ldd	r23, Y+54	; 0x36
    1220:	8f a9       	ldd	r24, Y+55	; 0x37
    1222:	98 ad       	ldd	r25, Y+56	; 0x38
    1224:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1226:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1228:	4f 8d       	ldd	r20, Y+31	; 0x1f
    122a:	58 a1       	ldd	r21, Y+32	; 0x20
    122c:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1230:	9b 01       	movw	r18, r22
    1232:	ac 01       	movw	r20, r24
    1234:	c8 01       	movw	r24, r16
    1236:	b7 01       	movw	r22, r14
    1238:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    123c:	7b 01       	movw	r14, r22
    123e:	8c 01       	movw	r16, r24
    1240:	69 a9       	ldd	r22, Y+49	; 0x31
    1242:	7a a9       	ldd	r23, Y+50	; 0x32
    1244:	8b a9       	ldd	r24, Y+51	; 0x33
    1246:	9c a9       	ldd	r25, Y+52	; 0x34
    1248:	29 8d       	ldd	r18, Y+25	; 0x19
    124a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    124c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    124e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1250:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1254:	9b 01       	movw	r18, r22
    1256:	ac 01       	movw	r20, r24
    1258:	c8 01       	movw	r24, r16
    125a:	b7 01       	movw	r22, r14
    125c:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1260:	ad ad       	ldd	r26, Y+61	; 0x3d
    1262:	be ad       	ldd	r27, Y+62	; 0x3e
    1264:	6d 93       	st	X+, r22
    1266:	7d 93       	st	X+, r23
    1268:	8d 93       	st	X+, r24
    126a:	9c 93       	st	X, r25
    126c:	13 97       	sbiw	r26, 0x03	; 3
}
    126e:	cd 01       	movw	r24, r26
    1270:	ee 96       	adiw	r28, 0x3e	; 62
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	af 90       	pop	r10
    1290:	9f 90       	pop	r9
    1292:	8f 90       	pop	r8
    1294:	7f 90       	pop	r7
    1296:	6f 90       	pop	r6
    1298:	5f 90       	pop	r5
    129a:	4f 90       	pop	r4
    129c:	3f 90       	pop	r3
    129e:	2f 90       	pop	r2
    12a0:	08 95       	ret

000012a2 <mvdot>:
	Input Type	:  (mat3x3), (vec3x1)
	Return Type :  (mat3x3)
*/

vec3x1 mvdot( mat3x3 lhs_mat, vec3x1 rhs_vec ) 
{
    12a2:	2f 92       	push	r2
    12a4:	3f 92       	push	r3
    12a6:	4f 92       	push	r4
    12a8:	5f 92       	push	r5
    12aa:	6f 92       	push	r6
    12ac:	7f 92       	push	r7
    12ae:	8f 92       	push	r8
    12b0:	9f 92       	push	r9
    12b2:	af 92       	push	r10
    12b4:	bf 92       	push	r11
    12b6:	cf 92       	push	r12
    12b8:	df 92       	push	r13
    12ba:	ef 92       	push	r14
    12bc:	ff 92       	push	r15
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	2a 97       	sbiw	r28, 0x0a	; 10
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	9e 83       	std	Y+6, r25	; 0x06
    12d8:	8d 83       	std	Y+5, r24	; 0x05
    12da:	27 96       	adiw	r28, 0x07	; 7
    12dc:	6c ac       	ldd	r6, Y+60	; 0x3c
    12de:	7d ac       	ldd	r7, Y+61	; 0x3d
    12e0:	8e ac       	ldd	r8, Y+62	; 0x3e
    12e2:	9f ac       	ldd	r9, Y+63	; 0x3f
    12e4:	27 97       	sbiw	r28, 0x07	; 7
    12e6:	2b 96       	adiw	r28, 0x0b	; 11
    12e8:	2c ac       	ldd	r2, Y+60	; 0x3c
    12ea:	3d ac       	ldd	r3, Y+61	; 0x3d
    12ec:	4e ac       	ldd	r4, Y+62	; 0x3e
    12ee:	5f ac       	ldd	r5, Y+63	; 0x3f
    12f0:	2b 97       	sbiw	r28, 0x0b	; 11
    12f2:	2f 96       	adiw	r28, 0x0f	; 15
    12f4:	8c ad       	ldd	r24, Y+60	; 0x3c
    12f6:	9d ad       	ldd	r25, Y+61	; 0x3d
    12f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    12fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    12fc:	2f 97       	sbiw	r28, 0x0f	; 15
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	ab 83       	std	Y+3, r26	; 0x03
    1304:	bc 83       	std	Y+4, r27	; 0x04
	vec3x1 outvec = empty3x1;
	
	outvec.e11 = lhs_mat.e11*rhs_vec.e11 + lhs_mat.e12*rhs_vec.e21 + lhs_mat.e13*rhs_vec.e31;
    1306:	c4 01       	movw	r24, r8
    1308:	b3 01       	movw	r22, r6
    130a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    130c:	38 a1       	ldd	r19, Y+32	; 0x20
    130e:	49 a1       	ldd	r20, Y+33	; 0x21
    1310:	5a a1       	ldd	r21, Y+34	; 0x22
    1312:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1316:	7b 01       	movw	r14, r22
    1318:	8c 01       	movw	r16, r24
    131a:	c2 01       	movw	r24, r4
    131c:	b1 01       	movw	r22, r2
    131e:	2b a1       	ldd	r18, Y+35	; 0x23
    1320:	3c a1       	ldd	r19, Y+36	; 0x24
    1322:	4d a1       	ldd	r20, Y+37	; 0x25
    1324:	5e a1       	ldd	r21, Y+38	; 0x26
    1326:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
    132e:	c8 01       	movw	r24, r16
    1330:	b7 01       	movw	r22, r14
    1332:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1336:	7b 01       	movw	r14, r22
    1338:	8c 01       	movw	r16, r24
    133a:	69 81       	ldd	r22, Y+1	; 0x01
    133c:	7a 81       	ldd	r23, Y+2	; 0x02
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	2f a1       	ldd	r18, Y+39	; 0x27
    1344:	38 a5       	ldd	r19, Y+40	; 0x28
    1346:	49 a5       	ldd	r20, Y+41	; 0x29
    1348:	5a a5       	ldd	r21, Y+42	; 0x2a
    134a:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    134e:	9b 01       	movw	r18, r22
    1350:	ac 01       	movw	r20, r24
    1352:	c8 01       	movw	r24, r16
    1354:	b7 01       	movw	r22, r14
    1356:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    135a:	6f 83       	std	Y+7, r22	; 0x07
    135c:	78 87       	std	Y+8, r23	; 0x08
    135e:	89 87       	std	Y+9, r24	; 0x09
    1360:	9a 87       	std	Y+10, r25	; 0x0a
	outvec.e21 = lhs_mat.e21*rhs_vec.e11 + lhs_mat.e22*rhs_vec.e21 + lhs_mat.e23*rhs_vec.e31;
    1362:	c4 01       	movw	r24, r8
    1364:	b3 01       	movw	r22, r6
    1366:	2b a5       	ldd	r18, Y+43	; 0x2b
    1368:	3c a5       	ldd	r19, Y+44	; 0x2c
    136a:	4d a5       	ldd	r20, Y+45	; 0x2d
    136c:	5e a5       	ldd	r21, Y+46	; 0x2e
    136e:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1372:	7b 01       	movw	r14, r22
    1374:	8c 01       	movw	r16, r24
    1376:	c2 01       	movw	r24, r4
    1378:	b1 01       	movw	r22, r2
    137a:	2f a5       	ldd	r18, Y+47	; 0x2f
    137c:	38 a9       	ldd	r19, Y+48	; 0x30
    137e:	49 a9       	ldd	r20, Y+49	; 0x31
    1380:	5a a9       	ldd	r21, Y+50	; 0x32
    1382:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	c8 01       	movw	r24, r16
    138c:	b7 01       	movw	r22, r14
    138e:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1392:	7b 01       	movw	r14, r22
    1394:	8c 01       	movw	r16, r24
    1396:	69 81       	ldd	r22, Y+1	; 0x01
    1398:	7a 81       	ldd	r23, Y+2	; 0x02
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	2b a9       	ldd	r18, Y+51	; 0x33
    13a0:	3c a9       	ldd	r19, Y+52	; 0x34
    13a2:	4d a9       	ldd	r20, Y+53	; 0x35
    13a4:	5e a9       	ldd	r21, Y+54	; 0x36
    13a6:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    13aa:	9b 01       	movw	r18, r22
    13ac:	ac 01       	movw	r20, r24
    13ae:	c8 01       	movw	r24, r16
    13b0:	b7 01       	movw	r22, r14
    13b2:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    13b6:	5b 01       	movw	r10, r22
    13b8:	6c 01       	movw	r12, r24
	outvec.e31 = lhs_mat.e31*rhs_vec.e11 + lhs_mat.e32*rhs_vec.e21 + lhs_mat.e33*rhs_vec.e31;
	
	return( outvec );
    13ba:	c4 01       	movw	r24, r8
    13bc:	b3 01       	movw	r22, r6
    13be:	2f a9       	ldd	r18, Y+55	; 0x37
    13c0:	38 ad       	ldd	r19, Y+56	; 0x38
    13c2:	49 ad       	ldd	r20, Y+57	; 0x39
    13c4:	5a ad       	ldd	r21, Y+58	; 0x3a
    13c6:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    13ca:	7b 01       	movw	r14, r22
    13cc:	8c 01       	movw	r16, r24
    13ce:	c2 01       	movw	r24, r4
    13d0:	b1 01       	movw	r22, r2
    13d2:	2b ad       	ldd	r18, Y+59	; 0x3b
    13d4:	3c ad       	ldd	r19, Y+60	; 0x3c
    13d6:	4d ad       	ldd	r20, Y+61	; 0x3d
    13d8:	5e ad       	ldd	r21, Y+62	; 0x3e
    13da:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    13de:	9b 01       	movw	r18, r22
    13e0:	ac 01       	movw	r20, r24
    13e2:	c8 01       	movw	r24, r16
    13e4:	b7 01       	movw	r22, r14
    13e6:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    13ea:	7b 01       	movw	r14, r22
    13ec:	8c 01       	movw	r16, r24
    13ee:	69 81       	ldd	r22, Y+1	; 0x01
    13f0:	7a 81       	ldd	r23, Y+2	; 0x02
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	23 96       	adiw	r28, 0x03	; 3
    13f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    13fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    13fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    13fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1400:	23 97       	sbiw	r28, 0x03	; 3
    1402:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1406:	9b 01       	movw	r18, r22
    1408:	ac 01       	movw	r20, r24
    140a:	c8 01       	movw	r24, r16
    140c:	b7 01       	movw	r22, r14
    140e:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1412:	ad 81       	ldd	r26, Y+5	; 0x05
    1414:	be 81       	ldd	r27, Y+6	; 0x06
    1416:	18 96       	adiw	r26, 0x08	; 8
    1418:	6d 93       	st	X+, r22
    141a:	7d 93       	st	X+, r23
    141c:	8d 93       	st	X+, r24
    141e:	9c 93       	st	X, r25
    1420:	1b 97       	sbiw	r26, 0x0b	; 11
    1422:	c5 01       	movw	r24, r10
    1424:	d6 01       	movw	r26, r12
    1426:	ed 81       	ldd	r30, Y+5	; 0x05
    1428:	fe 81       	ldd	r31, Y+6	; 0x06
    142a:	84 83       	std	Z+4, r24	; 0x04
    142c:	95 83       	std	Z+5, r25	; 0x05
    142e:	a6 83       	std	Z+6, r26	; 0x06
    1430:	b7 83       	std	Z+7, r27	; 0x07
    1432:	2f 81       	ldd	r18, Y+7	; 0x07
    1434:	38 85       	ldd	r19, Y+8	; 0x08
    1436:	49 85       	ldd	r20, Y+9	; 0x09
    1438:	5a 85       	ldd	r21, Y+10	; 0x0a
    143a:	c9 01       	movw	r24, r18
    143c:	da 01       	movw	r26, r20
    143e:	80 83       	st	Z, r24
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	a2 83       	std	Z+2, r26	; 0x02
    1444:	b3 83       	std	Z+3, r27	; 0x03
}
    1446:	cf 01       	movw	r24, r30
    1448:	2a 96       	adiw	r28, 0x0a	; 10
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	bf 90       	pop	r11
    1466:	af 90       	pop	r10
    1468:	9f 90       	pop	r9
    146a:	8f 90       	pop	r8
    146c:	7f 90       	pop	r7
    146e:	6f 90       	pop	r6
    1470:	5f 90       	pop	r5
    1472:	4f 90       	pop	r4
    1474:	3f 90       	pop	r3
    1476:	2f 90       	pop	r2
    1478:	08 95       	ret

0000147a <vec2arr>:
	Input Type	:  (vec3x1), (floar arr)
	Return Type :  none
*/

void vec2arr( vec3x1 vec, float out_arr[3] ) 
{
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	2c 97       	sbiw	r28, 0x0c	; 12
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	e9 82       	std	Y+1, r14	; 0x01
    149c:	fa 82       	std	Y+2, r15	; 0x02
    149e:	0b 83       	std	Y+3, r16	; 0x03
    14a0:	1c 83       	std	Y+4, r17	; 0x04
    14a2:	2d 83       	std	Y+5, r18	; 0x05
    14a4:	3e 83       	std	Y+6, r19	; 0x06
    14a6:	4f 83       	std	Y+7, r20	; 0x07
    14a8:	58 87       	std	Y+8, r21	; 0x08
    14aa:	69 87       	std	Y+9, r22	; 0x09
    14ac:	7a 87       	std	Y+10, r23	; 0x0a
    14ae:	8b 87       	std	Y+11, r24	; 0x0b
    14b0:	9c 87       	std	Y+12, r25	; 0x0c
    14b2:	f6 01       	movw	r30, r12
    14b4:	2d 81       	ldd	r18, Y+5	; 0x05
    14b6:	3e 81       	ldd	r19, Y+6	; 0x06
    14b8:	4f 81       	ldd	r20, Y+7	; 0x07
    14ba:	58 85       	ldd	r21, Y+8	; 0x08
    14bc:	e9 84       	ldd	r14, Y+9	; 0x09
    14be:	fa 84       	ldd	r15, Y+10	; 0x0a
    14c0:	0b 85       	ldd	r16, Y+11	; 0x0b
    14c2:	1c 85       	ldd	r17, Y+12	; 0x0c
	out_arr[0] = vec.e11;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	ab 81       	ldd	r26, Y+3	; 0x03
    14ca:	bc 81       	ldd	r27, Y+4	; 0x04
    14cc:	80 83       	st	Z, r24
    14ce:	91 83       	std	Z+1, r25	; 0x01
    14d0:	a2 83       	std	Z+2, r26	; 0x02
    14d2:	b3 83       	std	Z+3, r27	; 0x03
	out_arr[1] = vec.e21;
    14d4:	24 83       	std	Z+4, r18	; 0x04
    14d6:	35 83       	std	Z+5, r19	; 0x05
    14d8:	46 83       	std	Z+6, r20	; 0x06
    14da:	57 83       	std	Z+7, r21	; 0x07
	out_arr[2] = vec.e31;
    14dc:	e0 86       	std	Z+8, r14	; 0x08
    14de:	f1 86       	std	Z+9, r15	; 0x09
    14e0:	02 87       	std	Z+10, r16	; 0x0a
    14e2:	13 87       	std	Z+11, r17	; 0x0b
}
    14e4:	2c 96       	adiw	r28, 0x0c	; 12
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	08 95       	ret

00001502 <arr2vec>:
	Input Type	:  (vec3x1)
	Return Type :  (mat3x3)
*/

vec3x1 arr2vec( float in_arr[3] ) 
{
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	8c 01       	movw	r16, r24
    1510:	fb 01       	movw	r30, r22
	vec3x1 temp;	
	temp.e11 = in_arr[0];
    1512:	c0 80       	ld	r12, Z
    1514:	d1 80       	ldd	r13, Z+1	; 0x01
    1516:	e2 80       	ldd	r14, Z+2	; 0x02
    1518:	f3 80       	ldd	r15, Z+3	; 0x03
	temp.e21 = in_arr[1];
    151a:	24 81       	ldd	r18, Z+4	; 0x04
    151c:	35 81       	ldd	r19, Z+5	; 0x05
    151e:	46 81       	ldd	r20, Z+6	; 0x06
    1520:	57 81       	ldd	r21, Z+7	; 0x07
	temp.e31 = in_arr[2];
	return( temp );
    1522:	80 85       	ldd	r24, Z+8	; 0x08
    1524:	91 85       	ldd	r25, Z+9	; 0x09
    1526:	a2 85       	ldd	r26, Z+10	; 0x0a
    1528:	b3 85       	ldd	r27, Z+11	; 0x0b
    152a:	f8 01       	movw	r30, r16
    152c:	80 87       	std	Z+8, r24	; 0x08
    152e:	91 87       	std	Z+9, r25	; 0x09
    1530:	a2 87       	std	Z+10, r26	; 0x0a
    1532:	b3 87       	std	Z+11, r27	; 0x0b
    1534:	24 83       	std	Z+4, r18	; 0x04
    1536:	35 83       	std	Z+5, r19	; 0x05
    1538:	46 83       	std	Z+6, r20	; 0x06
    153a:	57 83       	std	Z+7, r21	; 0x07
    153c:	c0 82       	st	Z, r12
    153e:	d1 82       	std	Z+1, r13	; 0x01
    1540:	e2 82       	std	Z+2, r14	; 0x02
    1542:	f3 82       	std	Z+3, r15	; 0x03
}
    1544:	c8 01       	movw	r24, r16
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	08 95       	ret

00001554 <addvec>:
	Input Type	:  (vec3x1),(vec3x1)
	Return Type :  (vec3x1)
*/

vec3x1 addvec( vec3x1 vec1, vec3x1 vec2 ) 
{
    1554:	8f 92       	push	r8
    1556:	9f 92       	push	r9
    1558:	af 92       	push	r10
    155a:	bf 92       	push	r11
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	2c 97       	sbiw	r28, 0x0c	; 12
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	4c 01       	movw	r8, r24
    157e:	c9 82       	std	Y+1, r12	; 0x01
    1580:	da 82       	std	Y+2, r13	; 0x02
    1582:	eb 82       	std	Y+3, r14	; 0x03
    1584:	fc 82       	std	Y+4, r15	; 0x04
    1586:	0d 83       	std	Y+5, r16	; 0x05
    1588:	1e 83       	std	Y+6, r17	; 0x06
    158a:	2f 83       	std	Y+7, r18	; 0x07
    158c:	38 87       	std	Y+8, r19	; 0x08
    158e:	49 87       	std	Y+9, r20	; 0x09
    1590:	5a 87       	std	Y+10, r21	; 0x0a
    1592:	6b 87       	std	Y+11, r22	; 0x0b
    1594:	7c 87       	std	Y+12, r23	; 0x0c
	vec3x1 vec_out;	
	vec_out.e11 = vec1.e11 + vec2.e11;
    1596:	69 81       	ldd	r22, Y+1	; 0x01
    1598:	7a 81       	ldd	r23, Y+2	; 0x02
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    15a0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    15a2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    15a4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    15a6:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    15aa:	5b 01       	movw	r10, r22
    15ac:	6c 01       	movw	r12, r24
	vec_out.e21 = vec1.e21 + vec2.e21;
    15ae:	6d 81       	ldd	r22, Y+5	; 0x05
    15b0:	7e 81       	ldd	r23, Y+6	; 0x06
    15b2:	8f 81       	ldd	r24, Y+7	; 0x07
    15b4:	98 85       	ldd	r25, Y+8	; 0x08
    15b6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    15b8:	38 a1       	ldd	r19, Y+32	; 0x20
    15ba:	49 a1       	ldd	r20, Y+33	; 0x21
    15bc:	5a a1       	ldd	r21, Y+34	; 0x22
    15be:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    15c2:	7b 01       	movw	r14, r22
    15c4:	8c 01       	movw	r16, r24
	vec_out.e31 = vec1.e31 + vec2.e31;
	return( vec_out );
    15c6:	69 85       	ldd	r22, Y+9	; 0x09
    15c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    15ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    15cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ce:	2b a1       	ldd	r18, Y+35	; 0x23
    15d0:	3c a1       	ldd	r19, Y+36	; 0x24
    15d2:	4d a1       	ldd	r20, Y+37	; 0x25
    15d4:	5e a1       	ldd	r21, Y+38	; 0x26
    15d6:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    15da:	f4 01       	movw	r30, r8
    15dc:	60 87       	std	Z+8, r22	; 0x08
    15de:	71 87       	std	Z+9, r23	; 0x09
    15e0:	82 87       	std	Z+10, r24	; 0x0a
    15e2:	93 87       	std	Z+11, r25	; 0x0b
    15e4:	c7 01       	movw	r24, r14
    15e6:	d8 01       	movw	r26, r16
    15e8:	84 83       	std	Z+4, r24	; 0x04
    15ea:	95 83       	std	Z+5, r25	; 0x05
    15ec:	a6 83       	std	Z+6, r26	; 0x06
    15ee:	b7 83       	std	Z+7, r27	; 0x07
    15f0:	c5 01       	movw	r24, r10
    15f2:	d6 01       	movw	r26, r12
    15f4:	80 83       	st	Z, r24
    15f6:	91 83       	std	Z+1, r25	; 0x01
    15f8:	a2 83       	std	Z+2, r26	; 0x02
    15fa:	b3 83       	std	Z+3, r27	; 0x03
}
    15fc:	c4 01       	movw	r24, r8
    15fe:	2c 96       	adiw	r28, 0x0c	; 12
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	bf 90       	pop	r11
    161c:	af 90       	pop	r10
    161e:	9f 90       	pop	r9
    1620:	8f 90       	pop	r8
    1622:	08 95       	ret

00001624 <subvec>:
	Input Type	:  (vec3x1),(vec3x1)
	Return Type :  (vec3x1)
*/

vec3x1 subvec( vec3x1 vec1, vec3x1 vec2 ) 
{
    1624:	8f 92       	push	r8
    1626:	9f 92       	push	r9
    1628:	af 92       	push	r10
    162a:	bf 92       	push	r11
    162c:	cf 92       	push	r12
    162e:	df 92       	push	r13
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	2c 97       	sbiw	r28, 0x0c	; 12
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	4c 01       	movw	r8, r24
    164e:	c9 82       	std	Y+1, r12	; 0x01
    1650:	da 82       	std	Y+2, r13	; 0x02
    1652:	eb 82       	std	Y+3, r14	; 0x03
    1654:	fc 82       	std	Y+4, r15	; 0x04
    1656:	0d 83       	std	Y+5, r16	; 0x05
    1658:	1e 83       	std	Y+6, r17	; 0x06
    165a:	2f 83       	std	Y+7, r18	; 0x07
    165c:	38 87       	std	Y+8, r19	; 0x08
    165e:	49 87       	std	Y+9, r20	; 0x09
    1660:	5a 87       	std	Y+10, r21	; 0x0a
    1662:	6b 87       	std	Y+11, r22	; 0x0b
    1664:	7c 87       	std	Y+12, r23	; 0x0c
	vec3x1 vec_out;	
	vec_out.e11 = vec2.e11 - vec1.e11;
    1666:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1668:	7c 8d       	ldd	r23, Y+28	; 0x1c
    166a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    166c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    166e:	29 81       	ldd	r18, Y+1	; 0x01
    1670:	3a 81       	ldd	r19, Y+2	; 0x02
    1672:	4b 81       	ldd	r20, Y+3	; 0x03
    1674:	5c 81       	ldd	r21, Y+4	; 0x04
    1676:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    167a:	5b 01       	movw	r10, r22
    167c:	6c 01       	movw	r12, r24
	vec_out.e21 = vec2.e21 - vec1.e21;
    167e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1680:	78 a1       	ldd	r23, Y+32	; 0x20
    1682:	89 a1       	ldd	r24, Y+33	; 0x21
    1684:	9a a1       	ldd	r25, Y+34	; 0x22
    1686:	2d 81       	ldd	r18, Y+5	; 0x05
    1688:	3e 81       	ldd	r19, Y+6	; 0x06
    168a:	4f 81       	ldd	r20, Y+7	; 0x07
    168c:	58 85       	ldd	r21, Y+8	; 0x08
    168e:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    1692:	7b 01       	movw	r14, r22
    1694:	8c 01       	movw	r16, r24
	vec_out.e31 = vec2.e31 - vec1.e31;
	return( vec_out );
    1696:	6b a1       	ldd	r22, Y+35	; 0x23
    1698:	7c a1       	ldd	r23, Y+36	; 0x24
    169a:	8d a1       	ldd	r24, Y+37	; 0x25
    169c:	9e a1       	ldd	r25, Y+38	; 0x26
    169e:	29 85       	ldd	r18, Y+9	; 0x09
    16a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    16a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    16a6:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    16aa:	f4 01       	movw	r30, r8
    16ac:	60 87       	std	Z+8, r22	; 0x08
    16ae:	71 87       	std	Z+9, r23	; 0x09
    16b0:	82 87       	std	Z+10, r24	; 0x0a
    16b2:	93 87       	std	Z+11, r25	; 0x0b
    16b4:	c7 01       	movw	r24, r14
    16b6:	d8 01       	movw	r26, r16
    16b8:	84 83       	std	Z+4, r24	; 0x04
    16ba:	95 83       	std	Z+5, r25	; 0x05
    16bc:	a6 83       	std	Z+6, r26	; 0x06
    16be:	b7 83       	std	Z+7, r27	; 0x07
    16c0:	c5 01       	movw	r24, r10
    16c2:	d6 01       	movw	r26, r12
    16c4:	80 83       	st	Z, r24
    16c6:	91 83       	std	Z+1, r25	; 0x01
    16c8:	a2 83       	std	Z+2, r26	; 0x02
    16ca:	b3 83       	std	Z+3, r27	; 0x03
}
    16cc:	c4 01       	movw	r24, r8
    16ce:	2c 96       	adiw	r28, 0x0c	; 12
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	bf 90       	pop	r11
    16ec:	af 90       	pop	r10
    16ee:	9f 90       	pop	r9
    16f0:	8f 90       	pop	r8
    16f2:	08 95       	ret

000016f4 <mulvec>:
	Input Type	:  (vec3x1),(vec3x1)
	Return Type :  (vec3x1)
*/

vec3x1 mulvec( vec3x1 vec1, vec3x1 vec2 ) 
{
    16f4:	8f 92       	push	r8
    16f6:	9f 92       	push	r9
    16f8:	af 92       	push	r10
    16fa:	bf 92       	push	r11
    16fc:	cf 92       	push	r12
    16fe:	df 92       	push	r13
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	2c 97       	sbiw	r28, 0x0c	; 12
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	4c 01       	movw	r8, r24
    171e:	c9 82       	std	Y+1, r12	; 0x01
    1720:	da 82       	std	Y+2, r13	; 0x02
    1722:	eb 82       	std	Y+3, r14	; 0x03
    1724:	fc 82       	std	Y+4, r15	; 0x04
    1726:	0d 83       	std	Y+5, r16	; 0x05
    1728:	1e 83       	std	Y+6, r17	; 0x06
    172a:	2f 83       	std	Y+7, r18	; 0x07
    172c:	38 87       	std	Y+8, r19	; 0x08
    172e:	49 87       	std	Y+9, r20	; 0x09
    1730:	5a 87       	std	Y+10, r21	; 0x0a
    1732:	6b 87       	std	Y+11, r22	; 0x0b
    1734:	7c 87       	std	Y+12, r23	; 0x0c
	vec3x1 vec_out;	
	vec_out.e11 = vec2.e11*vec1.e11;
    1736:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1738:	7c 8d       	ldd	r23, Y+28	; 0x1c
    173a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    173c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    173e:	29 81       	ldd	r18, Y+1	; 0x01
    1740:	3a 81       	ldd	r19, Y+2	; 0x02
    1742:	4b 81       	ldd	r20, Y+3	; 0x03
    1744:	5c 81       	ldd	r21, Y+4	; 0x04
    1746:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    174a:	5b 01       	movw	r10, r22
    174c:	6c 01       	movw	r12, r24
	vec_out.e21 = vec2.e21*vec1.e21;
    174e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1750:	78 a1       	ldd	r23, Y+32	; 0x20
    1752:	89 a1       	ldd	r24, Y+33	; 0x21
    1754:	9a a1       	ldd	r25, Y+34	; 0x22
    1756:	2d 81       	ldd	r18, Y+5	; 0x05
    1758:	3e 81       	ldd	r19, Y+6	; 0x06
    175a:	4f 81       	ldd	r20, Y+7	; 0x07
    175c:	58 85       	ldd	r21, Y+8	; 0x08
    175e:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1762:	7b 01       	movw	r14, r22
    1764:	8c 01       	movw	r16, r24
	vec_out.e31 = vec2.e31*vec1.e31;
	return( vec_out );
    1766:	6b a1       	ldd	r22, Y+35	; 0x23
    1768:	7c a1       	ldd	r23, Y+36	; 0x24
    176a:	8d a1       	ldd	r24, Y+37	; 0x25
    176c:	9e a1       	ldd	r25, Y+38	; 0x26
    176e:	29 85       	ldd	r18, Y+9	; 0x09
    1770:	3a 85       	ldd	r19, Y+10	; 0x0a
    1772:	4b 85       	ldd	r20, Y+11	; 0x0b
    1774:	5c 85       	ldd	r21, Y+12	; 0x0c
    1776:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    177a:	f4 01       	movw	r30, r8
    177c:	60 87       	std	Z+8, r22	; 0x08
    177e:	71 87       	std	Z+9, r23	; 0x09
    1780:	82 87       	std	Z+10, r24	; 0x0a
    1782:	93 87       	std	Z+11, r25	; 0x0b
    1784:	c7 01       	movw	r24, r14
    1786:	d8 01       	movw	r26, r16
    1788:	84 83       	std	Z+4, r24	; 0x04
    178a:	95 83       	std	Z+5, r25	; 0x05
    178c:	a6 83       	std	Z+6, r26	; 0x06
    178e:	b7 83       	std	Z+7, r27	; 0x07
    1790:	c5 01       	movw	r24, r10
    1792:	d6 01       	movw	r26, r12
    1794:	80 83       	st	Z, r24
    1796:	91 83       	std	Z+1, r25	; 0x01
    1798:	a2 83       	std	Z+2, r26	; 0x02
    179a:	b3 83       	std	Z+3, r27	; 0x03
}
    179c:	c4 01       	movw	r24, r8
    179e:	2c 96       	adiw	r28, 0x0c	; 12
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	bf 90       	pop	r11
    17bc:	af 90       	pop	r10
    17be:	9f 90       	pop	r9
    17c0:	8f 90       	pop	r8
    17c2:	08 95       	ret

000017c4 <divvec>:
	Input Type	:  (vec3x1),(vec3x1)
	Return Type :  (vec3x1)
*/

vec3x1 divvec( vec3x1 vec1, vec3x1 vec2 ) 
{
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	af 92       	push	r10
    17ca:	bf 92       	push	r11
    17cc:	cf 92       	push	r12
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	2c 97       	sbiw	r28, 0x0c	; 12
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	4c 01       	movw	r8, r24
    17ee:	c9 82       	std	Y+1, r12	; 0x01
    17f0:	da 82       	std	Y+2, r13	; 0x02
    17f2:	eb 82       	std	Y+3, r14	; 0x03
    17f4:	fc 82       	std	Y+4, r15	; 0x04
    17f6:	0d 83       	std	Y+5, r16	; 0x05
    17f8:	1e 83       	std	Y+6, r17	; 0x06
    17fa:	2f 83       	std	Y+7, r18	; 0x07
    17fc:	38 87       	std	Y+8, r19	; 0x08
    17fe:	49 87       	std	Y+9, r20	; 0x09
    1800:	5a 87       	std	Y+10, r21	; 0x0a
    1802:	6b 87       	std	Y+11, r22	; 0x0b
    1804:	7c 87       	std	Y+12, r23	; 0x0c
	vec3x1 vec_out;	
	vec_out.e11 = vec2.e11/vec1.e11;
    1806:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1808:	7c 8d       	ldd	r23, Y+28	; 0x1c
    180a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    180c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    180e:	29 81       	ldd	r18, Y+1	; 0x01
    1810:	3a 81       	ldd	r19, Y+2	; 0x02
    1812:	4b 81       	ldd	r20, Y+3	; 0x03
    1814:	5c 81       	ldd	r21, Y+4	; 0x04
    1816:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    181a:	5b 01       	movw	r10, r22
    181c:	6c 01       	movw	r12, r24
	vec_out.e21 = vec2.e21/vec1.e21;
    181e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1820:	78 a1       	ldd	r23, Y+32	; 0x20
    1822:	89 a1       	ldd	r24, Y+33	; 0x21
    1824:	9a a1       	ldd	r25, Y+34	; 0x22
    1826:	2d 81       	ldd	r18, Y+5	; 0x05
    1828:	3e 81       	ldd	r19, Y+6	; 0x06
    182a:	4f 81       	ldd	r20, Y+7	; 0x07
    182c:	58 85       	ldd	r21, Y+8	; 0x08
    182e:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    1832:	7b 01       	movw	r14, r22
    1834:	8c 01       	movw	r16, r24
	vec_out.e31 = vec2.e31/vec1.e31;
	return( vec_out );
    1836:	6b a1       	ldd	r22, Y+35	; 0x23
    1838:	7c a1       	ldd	r23, Y+36	; 0x24
    183a:	8d a1       	ldd	r24, Y+37	; 0x25
    183c:	9e a1       	ldd	r25, Y+38	; 0x26
    183e:	29 85       	ldd	r18, Y+9	; 0x09
    1840:	3a 85       	ldd	r19, Y+10	; 0x0a
    1842:	4b 85       	ldd	r20, Y+11	; 0x0b
    1844:	5c 85       	ldd	r21, Y+12	; 0x0c
    1846:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    184a:	f4 01       	movw	r30, r8
    184c:	60 87       	std	Z+8, r22	; 0x08
    184e:	71 87       	std	Z+9, r23	; 0x09
    1850:	82 87       	std	Z+10, r24	; 0x0a
    1852:	93 87       	std	Z+11, r25	; 0x0b
    1854:	c7 01       	movw	r24, r14
    1856:	d8 01       	movw	r26, r16
    1858:	84 83       	std	Z+4, r24	; 0x04
    185a:	95 83       	std	Z+5, r25	; 0x05
    185c:	a6 83       	std	Z+6, r26	; 0x06
    185e:	b7 83       	std	Z+7, r27	; 0x07
    1860:	c5 01       	movw	r24, r10
    1862:	d6 01       	movw	r26, r12
    1864:	80 83       	st	Z, r24
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	a2 83       	std	Z+2, r26	; 0x02
    186a:	b3 83       	std	Z+3, r27	; 0x03
}
    186c:	c4 01       	movw	r24, r8
    186e:	2c 96       	adiw	r28, 0x0c	; 12
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	cf 90       	pop	r12
    188a:	bf 90       	pop	r11
    188c:	af 90       	pop	r10
    188e:	9f 90       	pop	r9
    1890:	8f 90       	pop	r8
    1892:	08 95       	ret

00001894 <main>:


// =========================================================================================================================================

int main(void)
{
    1894:	1f 93       	push	r17
	//vec3x1 A = empty3x1;
	
	//addvec( A, A );
	DDRC = 0xFF;
    1896:	8f ef       	ldi	r24, 0xFF	; 255
    1898:	87 b9       	out	0x07, r24	; 7
	while(1) {
	PORTC = 0xFF;
    189a:	1f ef       	ldi	r17, 0xFF	; 255
    189c:	18 b9       	out	0x08, r17	; 8
	delay_ms(50);
    189e:	82 e3       	ldi	r24, 0x32	; 50
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <sleep>
	PORTC = 0x00;
    18a6:	18 b8       	out	0x08, r1	; 8
	delay_ms(50);}
    18a8:	82 e3       	ldi	r24, 0x32	; 50
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <sleep>
    18b0:	f5 cf       	rjmp	.-22     	; 0x189c <main+0x8>

000018b2 <atand2>:
double 			tand		( double input   ) 				{ return( tan( radians( input ) ) );  }		// degree-input based tangent

double 			acosd		( double input   ) 				{ return( degrees( acos( input ) ) ); }		// degree-input based arc cosine
double 			asind		( double input   ) 				{ return( degrees( asin( input ) ) ); }		// degree-input based arc sine 
double 			atand		( double input   ) 				{ return( degrees( atan( input ) ) ); }		// degree-input based arc tangent
double 			atand2		( double y, double x  ) 		{ return( degrees( atan2( y, x ) ) ); }		// degree-input based arc tangent
    18b2:	0e 94 20 32 	call	0x6440	; 0x6440 <atan2>
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	44 e3       	ldi	r20, 0x34	; 52
    18bc:	53 e4       	ldi	r21, 0x43	; 67
    18be:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    18c2:	20 e1       	ldi	r18, 0x10	; 16
    18c4:	38 e5       	ldi	r19, 0x58	; 88
    18c6:	49 e4       	ldi	r20, 0x49	; 73
    18c8:	50 e4       	ldi	r21, 0x40	; 64
    18ca:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    18ce:	08 95       	ret

000018d0 <cosd>:
-------------------------------------------------------------------------------------------------------------------------------------------------- */
double 			degrees		( double _radians )				{ return( _radians*r2d_const ); }			// converts radians to degrees
double 			radians		( double _degrees ) 			{ return( _degrees*d2r_const ); }			// converts degrees to radians
int 			sign		( double input   ) 				{ return( trunc((input/fabs(input))) ); }	// extracts input sign {-1, 1 }

double 			cosd		( double input   ) 				{ return( cos( radians( input ) ) );  }		// degree-input based cosine
    18d0:	20 e1       	ldi	r18, 0x10	; 16
    18d2:	38 e5       	ldi	r19, 0x58	; 88
    18d4:	49 e4       	ldi	r20, 0x49	; 73
    18d6:	50 e4       	ldi	r21, 0x40	; 64
    18d8:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	44 e3       	ldi	r20, 0x34	; 52
    18e2:	53 e4       	ldi	r21, 0x43	; 67
    18e4:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    18e8:	0e 94 77 32 	call	0x64ee	; 0x64ee <cos>
    18ec:	08 95       	ret

000018ee <sind>:
double 			sind		( double input   ) 				{ return( sin( radians( input ) ) );  }		// degree-input based sine 
    18ee:	20 e1       	ldi	r18, 0x10	; 16
    18f0:	38 e5       	ldi	r19, 0x58	; 88
    18f2:	49 e4       	ldi	r20, 0x49	; 73
    18f4:	50 e4       	ldi	r21, 0x40	; 64
    18f6:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	44 e3       	ldi	r20, 0x34	; 52
    1900:	53 e4       	ldi	r21, 0x43	; 67
    1902:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    1906:	0e 94 12 35 	call	0x6a24	; 0x6a24 <sin>
    190a:	08 95       	ret

0000190c <ewpow>:
	Input Type	:  (double array), (double array), (double array), (int)
	Return Type :  none
*/

void ewpow( double array1[], double array2[], double array3[], int dim )
{
    190c:	8f 92       	push	r8
    190e:	9f 92       	push	r9
    1910:	af 92       	push	r10
    1912:	bf 92       	push	r11
    1914:	cf 92       	push	r12
    1916:	df 92       	push	r13
    1918:	ef 92       	push	r14
    191a:	ff 92       	push	r15
    191c:	0f 93       	push	r16
    191e:	1f 93       	push	r17
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	4c 01       	movw	r8, r24
    1926:	5b 01       	movw	r10, r22
    1928:	6a 01       	movw	r12, r20
    192a:	79 01       	movw	r14, r18
    192c:	00 e0       	ldi	r16, 0x00	; 0
    192e:	10 e0       	ldi	r17, 0x00	; 0
    1930:	c0 e0       	ldi	r28, 0x00	; 0
    1932:	d0 e0       	ldi	r29, 0x00	; 0
    1934:	1d c0       	rjmp	.+58     	; 0x1970 <ewpow+0x64>
	for( int i = 0; i < dim; i++ ){
		array3[i] = pow( array1[i], array2[i] );
    1936:	f4 01       	movw	r30, r8
    1938:	ec 0f       	add	r30, r28
    193a:	fd 1f       	adc	r31, r29
    193c:	60 81       	ld	r22, Z
    193e:	71 81       	ldd	r23, Z+1	; 0x01
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	f5 01       	movw	r30, r10
    1946:	ec 0f       	add	r30, r28
    1948:	fd 1f       	adc	r31, r29
    194a:	20 81       	ld	r18, Z
    194c:	31 81       	ldd	r19, Z+1	; 0x01
    194e:	42 81       	ldd	r20, Z+2	; 0x02
    1950:	53 81       	ldd	r21, Z+3	; 0x03
    1952:	0e 94 c6 34 	call	0x698c	; 0x698c <pow>
    1956:	f6 01       	movw	r30, r12
    1958:	ec 0f       	add	r30, r28
    195a:	fd 1f       	adc	r31, r29
    195c:	ac 01       	movw	r20, r24
    195e:	cb 01       	movw	r24, r22
    1960:	da 01       	movw	r26, r20
    1962:	80 83       	st	Z, r24
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	a2 83       	std	Z+2, r26	; 0x02
    1968:	b3 83       	std	Z+3, r27	; 0x03
	Return Type :  none
*/

void ewpow( double array1[], double array2[], double array3[], int dim )
{
	for( int i = 0; i < dim; i++ ){
    196a:	0f 5f       	subi	r16, 0xFF	; 255
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	24 96       	adiw	r28, 0x04	; 4
    1970:	0e 15       	cp	r16, r14
    1972:	1f 05       	cpc	r17, r15
    1974:	04 f3       	brlt	.-64     	; 0x1936 <ewpow+0x2a>
		array3[i] = pow( array1[i], array2[i] );
	}
}
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	df 90       	pop	r13
    1984:	cf 90       	pop	r12
    1986:	bf 90       	pop	r11
    1988:	af 90       	pop	r10
    198a:	9f 90       	pop	r9
    198c:	8f 90       	pop	r8
    198e:	08 95       	ret

00001990 <magvec>:
	Input Type	:  (vec3x1)
	Return Type :  double
*/

double magvec( vec3x1 in_vec ) 
{
    1990:	6f 92       	push	r6
    1992:	7f 92       	push	r7
    1994:	8f 92       	push	r8
    1996:	9f 92       	push	r9
    1998:	af 92       	push	r10
    199a:	bf 92       	push	r11
    199c:	cf 92       	push	r12
    199e:	df 92       	push	r13
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	2c 97       	sbiw	r28, 0x0c	; 12
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	e9 82       	std	Y+1, r14	; 0x01
    19be:	fa 82       	std	Y+2, r15	; 0x02
    19c0:	0b 83       	std	Y+3, r16	; 0x03
    19c2:	1c 83       	std	Y+4, r17	; 0x04
    19c4:	2d 83       	std	Y+5, r18	; 0x05
    19c6:	3e 83       	std	Y+6, r19	; 0x06
    19c8:	4f 83       	std	Y+7, r20	; 0x07
    19ca:	58 87       	std	Y+8, r21	; 0x08
    19cc:	69 87       	std	Y+9, r22	; 0x09
    19ce:	7a 87       	std	Y+10, r23	; 0x0a
    19d0:	8b 87       	std	Y+11, r24	; 0x0b
    19d2:	9c 87       	std	Y+12, r25	; 0x0c
	return( sqrt( pow( in_vec.e11, 2 )+pow( in_vec.e21, 2 )+pow( in_vec.e31, 2 ) ) );
    19d4:	29 81       	ldd	r18, Y+1	; 0x01
    19d6:	3a 81       	ldd	r19, Y+2	; 0x02
    19d8:	4b 81       	ldd	r20, Y+3	; 0x03
    19da:	5c 81       	ldd	r21, Y+4	; 0x04
    19dc:	ca 01       	movw	r24, r20
    19de:	b9 01       	movw	r22, r18
    19e0:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    19e4:	3b 01       	movw	r6, r22
    19e6:	4c 01       	movw	r8, r24
    19e8:	2d 81       	ldd	r18, Y+5	; 0x05
    19ea:	3e 81       	ldd	r19, Y+6	; 0x06
    19ec:	4f 81       	ldd	r20, Y+7	; 0x07
    19ee:	58 85       	ldd	r21, Y+8	; 0x08
    19f0:	ca 01       	movw	r24, r20
    19f2:	b9 01       	movw	r22, r18
    19f4:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    19f8:	5b 01       	movw	r10, r22
    19fa:	6c 01       	movw	r12, r24
    19fc:	29 85       	ldd	r18, Y+9	; 0x09
    19fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a00:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a02:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a04:	ca 01       	movw	r24, r20
    1a06:	b9 01       	movw	r22, r18
    1a08:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1a0c:	7b 01       	movw	r14, r22
    1a0e:	8c 01       	movw	r16, r24
    1a10:	c4 01       	movw	r24, r8
    1a12:	b3 01       	movw	r22, r6
    1a14:	a6 01       	movw	r20, r12
    1a16:	95 01       	movw	r18, r10
    1a18:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1a1c:	a8 01       	movw	r20, r16
    1a1e:	97 01       	movw	r18, r14
    1a20:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1a24:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <sqrt>
}
    1a28:	2c 96       	adiw	r28, 0x0c	; 12
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	df 90       	pop	r13
    1a42:	cf 90       	pop	r12
    1a44:	bf 90       	pop	r11
    1a46:	af 90       	pop	r10
    1a48:	9f 90       	pop	r9
    1a4a:	8f 90       	pop	r8
    1a4c:	7f 90       	pop	r7
    1a4e:	6f 90       	pop	r6
    1a50:	08 95       	ret

00001a52 <mag>:
	Input Type	:  (double array), (int), (int)
	Return Type :  (double)
*/

double mag( double input_arr[], int i1, int i2 )
{
    1a52:	af 92       	push	r10
    1a54:	bf 92       	push	r11
    1a56:	cf 92       	push	r12
    1a58:	df 92       	push	r13
    1a5a:	ef 92       	push	r14
    1a5c:	ff 92       	push	r15
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	5a 01       	movw	r10, r20
    1a68:	eb 01       	movw	r28, r22
    1a6a:	cc 0f       	add	r28, r28
    1a6c:	dd 1f       	adc	r29, r29
    1a6e:	cc 0f       	add	r28, r28
    1a70:	dd 1f       	adc	r29, r29
    1a72:	c8 0f       	add	r28, r24
    1a74:	d9 1f       	adc	r29, r25
    1a76:	6b 01       	movw	r12, r22
    1a78:	0f 2e       	mov	r0, r31
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	ef 2e       	mov	r14, r31
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	ff 2e       	mov	r15, r31
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	0f 2f       	mov	r16, r31
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	1f 2f       	mov	r17, r31
    1a8a:	f0 2d       	mov	r31, r0
    1a8c:	13 c0       	rjmp	.+38     	; 0x1ab4 <mag+0x62>
	double temp = 0;
	for( int i = i1; i <= i2 ; i++ ) 
	{ 
		temp += pow( input_arr[i], 2 ); 
    1a8e:	29 91       	ld	r18, Y+
    1a90:	39 91       	ld	r19, Y+
    1a92:	49 91       	ld	r20, Y+
    1a94:	59 91       	ld	r21, Y+
    1a96:	ca 01       	movw	r24, r20
    1a98:	b9 01       	movw	r22, r18
    1a9a:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ac 01       	movw	r20, r24
    1aa2:	c8 01       	movw	r24, r16
    1aa4:	b7 01       	movw	r22, r14
    1aa6:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1aaa:	7b 01       	movw	r14, r22
    1aac:	8c 01       	movw	r16, r24
*/

double mag( double input_arr[], int i1, int i2 )
{
	double temp = 0;
	for( int i = i1; i <= i2 ; i++ ) 
    1aae:	08 94       	sec
    1ab0:	c1 1c       	adc	r12, r1
    1ab2:	d1 1c       	adc	r13, r1
    1ab4:	ac 14       	cp	r10, r12
    1ab6:	bd 04       	cpc	r11, r13
    1ab8:	54 f7       	brge	.-44     	; 0x1a8e <mag+0x3c>
	{ 
		temp += pow( input_arr[i], 2 ); 
	}
	return( sqrt( temp ) );
    1aba:	c8 01       	movw	r24, r16
    1abc:	b7 01       	movw	r22, r14
    1abe:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <sqrt>
}
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	1f 91       	pop	r17
    1ac8:	0f 91       	pop	r16
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	df 90       	pop	r13
    1ad0:	cf 90       	pop	r12
    1ad2:	bf 90       	pop	r11
    1ad4:	af 90       	pop	r10
    1ad6:	08 95       	ret

00001ad8 <sidelaw>:
	Input Type	:  (double), (double), (double)
	Return Type :  (double)
*/

double sidelaw( double x, double y, double A )
{	
    1ad8:	2f 92       	push	r2
    1ada:	3f 92       	push	r3
    1adc:	4f 92       	push	r4
    1ade:	5f 92       	push	r5
    1ae0:	6f 92       	push	r6
    1ae2:	7f 92       	push	r7
    1ae4:	8f 92       	push	r8
    1ae6:	9f 92       	push	r9
    1ae8:	af 92       	push	r10
    1aea:	bf 92       	push	r11
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	28 97       	sbiw	r28, 0x08	; 8
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	1b 01       	movw	r2, r22
    1b0e:	2c 01       	movw	r4, r24
    1b10:	2d 83       	std	Y+5, r18	; 0x05
    1b12:	3e 83       	std	Y+6, r19	; 0x06
    1b14:	4f 83       	std	Y+7, r20	; 0x07
    1b16:	58 87       	std	Y+8, r21	; 0x08
	return( sqrt( pow( x, 2 )+pow( y, 2 ) + 2*x*y*cos( A ) ) );
    1b18:	a2 01       	movw	r20, r4
    1b1a:	91 01       	movw	r18, r2
    1b1c:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1b20:	3b 01       	movw	r6, r22
    1b22:	4c 01       	movw	r8, r24
    1b24:	6d 81       	ldd	r22, Y+5	; 0x05
    1b26:	7e 81       	ldd	r23, Y+6	; 0x06
    1b28:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2a:	98 85       	ldd	r25, Y+8	; 0x08
    1b2c:	9b 01       	movw	r18, r22
    1b2e:	ac 01       	movw	r20, r24
    1b30:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1b34:	5b 01       	movw	r10, r22
    1b36:	6c 01       	movw	r12, r24
    1b38:	c8 01       	movw	r24, r16
    1b3a:	b7 01       	movw	r22, r14
    1b3c:	0e 94 77 32 	call	0x64ee	; 0x64ee <cos>
    1b40:	69 83       	std	Y+1, r22	; 0x01
    1b42:	7a 83       	std	Y+2, r23	; 0x02
    1b44:	8b 83       	std	Y+3, r24	; 0x03
    1b46:	9c 83       	std	Y+4, r25	; 0x04
    1b48:	c4 01       	movw	r24, r8
    1b4a:	b3 01       	movw	r22, r6
    1b4c:	a6 01       	movw	r20, r12
    1b4e:	95 01       	movw	r18, r10
    1b50:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1b54:	7b 01       	movw	r14, r22
    1b56:	8c 01       	movw	r16, r24
    1b58:	c2 01       	movw	r24, r4
    1b5a:	b1 01       	movw	r22, r2
    1b5c:	a2 01       	movw	r20, r4
    1b5e:	91 01       	movw	r18, r2
    1b60:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1b64:	2d 81       	ldd	r18, Y+5	; 0x05
    1b66:	3e 81       	ldd	r19, Y+6	; 0x06
    1b68:	4f 81       	ldd	r20, Y+7	; 0x07
    1b6a:	58 85       	ldd	r21, Y+8	; 0x08
    1b6c:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1b70:	29 81       	ldd	r18, Y+1	; 0x01
    1b72:	3a 81       	ldd	r19, Y+2	; 0x02
    1b74:	4b 81       	ldd	r20, Y+3	; 0x03
    1b76:	5c 81       	ldd	r21, Y+4	; 0x04
    1b78:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1b7c:	9b 01       	movw	r18, r22
    1b7e:	ac 01       	movw	r20, r24
    1b80:	c8 01       	movw	r24, r16
    1b82:	b7 01       	movw	r22, r14
    1b84:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1b88:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <sqrt>
}
    1b8c:	28 96       	adiw	r28, 0x08	; 8
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	ff 90       	pop	r15
    1ba2:	ef 90       	pop	r14
    1ba4:	df 90       	pop	r13
    1ba6:	cf 90       	pop	r12
    1ba8:	bf 90       	pop	r11
    1baa:	af 90       	pop	r10
    1bac:	9f 90       	pop	r9
    1bae:	8f 90       	pop	r8
    1bb0:	7f 90       	pop	r7
    1bb2:	6f 90       	pop	r6
    1bb4:	5f 90       	pop	r5
    1bb6:	4f 90       	pop	r4
    1bb8:	3f 90       	pop	r3
    1bba:	2f 90       	pop	r2
    1bbc:	08 95       	ret

00001bbe <acos3>:
	Input Type	:  (double), (double), (double)
	Return Type :  (double)
*/

double acos3( double a, double b, double c )
{	
    1bbe:	2f 92       	push	r2
    1bc0:	3f 92       	push	r3
    1bc2:	4f 92       	push	r4
    1bc4:	5f 92       	push	r5
    1bc6:	6f 92       	push	r6
    1bc8:	7f 92       	push	r7
    1bca:	8f 92       	push	r8
    1bcc:	9f 92       	push	r9
    1bce:	af 92       	push	r10
    1bd0:	bf 92       	push	r11
    1bd2:	cf 92       	push	r12
    1bd4:	df 92       	push	r13
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <acos3+0x26>
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <acos3+0x28>
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	1b 01       	movw	r2, r22
    1bec:	2c 01       	movw	r4, r24
    1bee:	29 83       	std	Y+1, r18	; 0x01
    1bf0:	3a 83       	std	Y+2, r19	; 0x02
    1bf2:	4b 83       	std	Y+3, r20	; 0x03
    1bf4:	5c 83       	std	Y+4, r21	; 0x04
    1bf6:	a8 01       	movw	r20, r16
    1bf8:	97 01       	movw	r18, r14
	double temp = ( pow( c, 2 ) - pow( a, 2 ) - pow( b, 2 ) )/(-2*a*b);
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	b7 01       	movw	r22, r14
    1bfe:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1c02:	3b 01       	movw	r6, r22
    1c04:	4c 01       	movw	r8, r24
    1c06:	c2 01       	movw	r24, r4
    1c08:	b1 01       	movw	r22, r2
    1c0a:	a2 01       	movw	r20, r4
    1c0c:	91 01       	movw	r18, r2
    1c0e:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1c12:	5b 01       	movw	r10, r22
    1c14:	6c 01       	movw	r12, r24
    1c16:	69 81       	ldd	r22, Y+1	; 0x01
    1c18:	7a 81       	ldd	r23, Y+2	; 0x02
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	9b 01       	movw	r18, r22
    1c20:	ac 01       	movw	r20, r24
    1c22:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1c26:	7b 01       	movw	r14, r22
    1c28:	8c 01       	movw	r16, r24
    1c2a:	c4 01       	movw	r24, r8
    1c2c:	b3 01       	movw	r22, r6
    1c2e:	a6 01       	movw	r20, r12
    1c30:	95 01       	movw	r18, r10
    1c32:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    1c36:	a8 01       	movw	r20, r16
    1c38:	97 01       	movw	r18, r14
    1c3a:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    1c3e:	7b 01       	movw	r14, r22
    1c40:	8c 01       	movw	r16, r24
    1c42:	c2 01       	movw	r24, r4
    1c44:	b1 01       	movw	r22, r2
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	50 ec       	ldi	r21, 0xC0	; 192
    1c4e:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1c52:	29 81       	ldd	r18, Y+1	; 0x01
    1c54:	3a 81       	ldd	r19, Y+2	; 0x02
    1c56:	4b 81       	ldd	r20, Y+3	; 0x03
    1c58:	5c 81       	ldd	r21, Y+4	; 0x04
    1c5a:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1c5e:	9b 01       	movw	r18, r22
    1c60:	ac 01       	movw	r20, r24
    1c62:	c8 01       	movw	r24, r16
    1c64:	b7 01       	movw	r22, r14
    1c66:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    1c6a:	7b 01       	movw	r14, r22
    1c6c:	8c 01       	movw	r16, r24
	return( atan2( sqrt( 1 - pow( temp, 2 ) ), temp ) );
    1c6e:	a8 01       	movw	r20, r16
    1c70:	97 01       	movw	r18, r14
    1c72:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1c76:	9b 01       	movw	r18, r22
    1c78:	ac 01       	movw	r20, r24
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	80 e8       	ldi	r24, 0x80	; 128
    1c80:	9f e3       	ldi	r25, 0x3F	; 63
    1c82:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    1c86:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <sqrt>
    1c8a:	a8 01       	movw	r20, r16
    1c8c:	97 01       	movw	r18, r14
    1c8e:	0e 94 20 32 	call	0x6440	; 0x6440 <atan2>
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	df 90       	pop	r13
    1ca8:	cf 90       	pop	r12
    1caa:	bf 90       	pop	r11
    1cac:	af 90       	pop	r10
    1cae:	9f 90       	pop	r9
    1cb0:	8f 90       	pop	r8
    1cb2:	7f 90       	pop	r7
    1cb4:	6f 90       	pop	r6
    1cb6:	5f 90       	pop	r5
    1cb8:	4f 90       	pop	r4
    1cba:	3f 90       	pop	r3
    1cbc:	2f 90       	pop	r2
    1cbe:	08 95       	ret

00001cc0 <atand>:
double 			sind		( double input   ) 				{ return( sin( radians( input ) ) );  }		// degree-input based sine 
double 			tand		( double input   ) 				{ return( tan( radians( input ) ) );  }		// degree-input based tangent

double 			acosd		( double input   ) 				{ return( degrees( acos( input ) ) ); }		// degree-input based arc cosine
double 			asind		( double input   ) 				{ return( degrees( asin( input ) ) ); }		// degree-input based arc sine 
double 			atand		( double input   ) 				{ return( degrees( atan( input ) ) ); }		// degree-input based arc tangent
    1cc0:	0e 94 4b 32 	call	0x6496	; 0x6496 <atan>
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	44 e3       	ldi	r20, 0x34	; 52
    1cca:	53 e4       	ldi	r21, 0x43	; 67
    1ccc:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1cd0:	20 e1       	ldi	r18, 0x10	; 16
    1cd2:	38 e5       	ldi	r19, 0x58	; 88
    1cd4:	49 e4       	ldi	r20, 0x49	; 73
    1cd6:	50 e4       	ldi	r21, 0x40	; 64
    1cd8:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    1cdc:	08 95       	ret

00001cde <asind>:
double 			cosd		( double input   ) 				{ return( cos( radians( input ) ) );  }		// degree-input based cosine
double 			sind		( double input   ) 				{ return( sin( radians( input ) ) );  }		// degree-input based sine 
double 			tand		( double input   ) 				{ return( tan( radians( input ) ) );  }		// degree-input based tangent

double 			acosd		( double input   ) 				{ return( degrees( acos( input ) ) ); }		// degree-input based arc cosine
double 			asind		( double input   ) 				{ return( degrees( asin( input ) ) ); }		// degree-input based arc sine 
    1cde:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <asin>
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	44 e3       	ldi	r20, 0x34	; 52
    1ce8:	53 e4       	ldi	r21, 0x43	; 67
    1cea:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1cee:	20 e1       	ldi	r18, 0x10	; 16
    1cf0:	38 e5       	ldi	r19, 0x58	; 88
    1cf2:	49 e4       	ldi	r20, 0x49	; 73
    1cf4:	50 e4       	ldi	r21, 0x40	; 64
    1cf6:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    1cfa:	08 95       	ret

00001cfc <acosd>:

double 			cosd		( double input   ) 				{ return( cos( radians( input ) ) );  }		// degree-input based cosine
double 			sind		( double input   ) 				{ return( sin( radians( input ) ) );  }		// degree-input based sine 
double 			tand		( double input   ) 				{ return( tan( radians( input ) ) );  }		// degree-input based tangent

double 			acosd		( double input   ) 				{ return( degrees( acos( input ) ) ); }		// degree-input based arc cosine
    1cfc:	0e 94 87 31 	call	0x630e	; 0x630e <acos>
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	44 e3       	ldi	r20, 0x34	; 52
    1d06:	53 e4       	ldi	r21, 0x43	; 67
    1d08:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1d0c:	20 e1       	ldi	r18, 0x10	; 16
    1d0e:	38 e5       	ldi	r19, 0x58	; 88
    1d10:	49 e4       	ldi	r20, 0x49	; 73
    1d12:	50 e4       	ldi	r21, 0x40	; 64
    1d14:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    1d18:	08 95       	ret

00001d1a <tand>:
double 			radians		( double _degrees ) 			{ return( _degrees*d2r_const ); }			// converts degrees to radians
int 			sign		( double input   ) 				{ return( trunc((input/fabs(input))) ); }	// extracts input sign {-1, 1 }

double 			cosd		( double input   ) 				{ return( cos( radians( input ) ) );  }		// degree-input based cosine
double 			sind		( double input   ) 				{ return( sin( radians( input ) ) );  }		// degree-input based sine 
double 			tand		( double input   ) 				{ return( tan( radians( input ) ) );  }		// degree-input based tangent
    1d1a:	20 e1       	ldi	r18, 0x10	; 16
    1d1c:	38 e5       	ldi	r19, 0x58	; 88
    1d1e:	49 e4       	ldi	r20, 0x49	; 73
    1d20:	50 e4       	ldi	r21, 0x40	; 64
    1d22:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	44 e3       	ldi	r20, 0x34	; 52
    1d2c:	53 e4       	ldi	r21, 0x43	; 67
    1d2e:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    1d32:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <tan>
    1d36:	08 95       	ret

00001d38 <sign>:
/*
Shortcuts:		name		input							operation									description
-------------------------------------------------------------------------------------------------------------------------------------------------- */
double 			degrees		( double _radians )				{ return( _radians*r2d_const ); }			// converts radians to degrees
double 			radians		( double _degrees ) 			{ return( _degrees*d2r_const ); }			// converts degrees to radians
int 			sign		( double input   ) 				{ return( trunc((input/fabs(input))) ); }	// extracts input sign {-1, 1 }
    1d38:	9b 01       	movw	r18, r22
    1d3a:	ac 01       	movw	r20, r24
    1d3c:	5f 77       	andi	r21, 0x7F	; 127
    1d3e:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    1d42:	0e 94 89 35 	call	0x6b12	; 0x6b12 <trunc>
    1d46:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__fixsfsi>
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	08 95       	ret

00001d4e <leg_ik>:
*/
/*=================================================================================================================================================*/


vec3x1 leg_ik( vec3x1 position, double links[4], double tht3 )
{
    1d4e:	2f 92       	push	r2
    1d50:	3f 92       	push	r3
    1d52:	4f 92       	push	r4
    1d54:	5f 92       	push	r5
    1d56:	6f 92       	push	r6
    1d58:	7f 92       	push	r7
    1d5a:	8f 92       	push	r8
    1d5c:	9f 92       	push	r9
    1d5e:	af 92       	push	r10
    1d60:	bf 92       	push	r11
    1d62:	cf 92       	push	r12
    1d64:	df 92       	push	r13
    1d66:	ef 92       	push	r14
    1d68:	ff 92       	push	r15
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	c6 54       	subi	r28, 0x46	; 70
    1d78:	d0 40       	sbci	r29, 0x00	; 0
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	25 96       	adiw	r28, 0x05	; 5
    1d86:	9f af       	std	Y+63, r25	; 0x3f
    1d88:	8e af       	std	Y+62, r24	; 0x3e
    1d8a:	25 97       	sbiw	r28, 0x05	; 5
    1d8c:	c9 8e       	std	Y+25, r12	; 0x19
    1d8e:	da 8e       	std	Y+26, r13	; 0x1a
    1d90:	eb 8e       	std	Y+27, r14	; 0x1b
    1d92:	fc 8e       	std	Y+28, r15	; 0x1c
    1d94:	0d 8f       	std	Y+29, r16	; 0x1d
    1d96:	1e 8f       	std	Y+30, r17	; 0x1e
    1d98:	2f 8f       	std	Y+31, r18	; 0x1f
    1d9a:	38 a3       	std	Y+32, r19	; 0x20
    1d9c:	49 a3       	std	Y+33, r20	; 0x21
    1d9e:	5a a3       	std	Y+34, r21	; 0x22
    1da0:	6b a3       	std	Y+35, r22	; 0x23
    1da2:	7c a3       	std	Y+36, r23	; 0x24
    1da4:	27 96       	adiw	r28, 0x07	; 7
    1da6:	bf ae       	std	Y+63, r11	; 0x3f
    1da8:	ae ae       	std	Y+62, r10	; 0x3e
    1daa:	27 97       	sbiw	r28, 0x07	; 7
    1dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1db0:	af 8d       	ldd	r26, Y+31	; 0x1f
    1db2:	b8 a1       	ldd	r27, Y+32	; 0x20
    1db4:	89 a7       	std	Y+41, r24	; 0x29
    1db6:	9a a7       	std	Y+42, r25	; 0x2a
    1db8:	ab a7       	std	Y+43, r26	; 0x2b
    1dba:	bc a7       	std	Y+44, r27	; 0x2c
    1dbc:	89 8d       	ldd	r24, Y+25	; 0x19
    1dbe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dc0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1dc2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1dc4:	8d a3       	std	Y+37, r24	; 0x25
    1dc6:	9e a3       	std	Y+38, r25	; 0x26
    1dc8:	af a3       	std	Y+39, r26	; 0x27
    1dca:	b8 a7       	std	Y+40, r27	; 0x28
	vec3x1 tht = empty3x1;
	
	tht.e11 = atan2( position.e21, position.e11 );
	
	if( ( tht3 > pi ) && ( tht3 < 0 ) )
    1dcc:	6f 96       	adiw	r28, 0x1f	; 31
    1dce:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dd0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1dd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dd6:	6f 97       	sbiw	r28, 0x1f	; 31
    1dd8:	20 e1       	ldi	r18, 0x10	; 16
    1dda:	38 e5       	ldi	r19, 0x58	; 88
    1ddc:	49 e4       	ldi	r20, 0x49	; 73
    1dde:	50 e4       	ldi	r21, 0x40	; 64
    1de0:	0e 94 58 34 	call	0x68b0	; 0x68b0 <__gesf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	0c f5       	brge	.+66     	; 0x1e2a <leg_ik+0xdc>
    1de8:	6f 96       	adiw	r28, 0x1f	; 31
    1dea:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dec:	7d ad       	ldd	r23, Y+61	; 0x3d
    1dee:	8e ad       	ldd	r24, Y+62	; 0x3e
    1df0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df2:	6f 97       	sbiw	r28, 0x1f	; 31
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__cmpsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	9c f4       	brge	.+38     	; 0x1e2a <leg_ik+0xdc>
	{
		tht3 = pi-fabs( tht3 );
    1e04:	6f 96       	adiw	r28, 0x1f	; 31
    1e06:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e08:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e0a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e0c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e0e:	6f 97       	sbiw	r28, 0x1f	; 31
    1e10:	5f 77       	andi	r21, 0x7F	; 127
    1e12:	60 e1       	ldi	r22, 0x10	; 16
    1e14:	78 e5       	ldi	r23, 0x58	; 88
    1e16:	89 e4       	ldi	r24, 0x49	; 73
    1e18:	90 e4       	ldi	r25, 0x40	; 64
    1e1a:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    1e1e:	6f 96       	adiw	r28, 0x1f	; 31
    1e20:	6c af       	std	Y+60, r22	; 0x3c
    1e22:	7d af       	std	Y+61, r23	; 0x3d
    1e24:	8e af       	std	Y+62, r24	; 0x3e
    1e26:	9f af       	std	Y+63, r25	; 0x3f
    1e28:	6f 97       	sbiw	r28, 0x1f	; 31
	}
	
	vec3x1 l1	= { links[0], 0, 0 };
    1e2a:	27 96       	adiw	r28, 0x07	; 7
    1e2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e30:	27 97       	sbiw	r28, 0x07	; 7
    1e32:	2d 90       	ld	r2, X+
    1e34:	3d 90       	ld	r3, X+
    1e36:	4d 90       	ld	r4, X+
    1e38:	5c 90       	ld	r5, X
	mat3x3 R1	= Rz( tht3 );
    1e3a:	6f 96       	adiw	r28, 0x1f	; 31
    1e3c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e3e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e40:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e42:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e44:	6f 97       	sbiw	r28, 0x1f	; 31
    1e46:	0e 94 12 35 	call	0x6a24	; 0x6a24 <sin>
    1e4a:	6b af       	std	Y+59, r22	; 0x3b
    1e4c:	7c af       	std	Y+60, r23	; 0x3c
    1e4e:	8d af       	std	Y+61, r24	; 0x3d
    1e50:	9e af       	std	Y+62, r25	; 0x3e
    1e52:	6f 96       	adiw	r28, 0x1f	; 31
    1e54:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e56:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e58:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e5c:	6f 97       	sbiw	r28, 0x1f	; 31
    1e5e:	0e 94 77 32 	call	0x64ee	; 0x64ee <cos>
    1e62:	23 96       	adiw	r28, 0x03	; 3
    1e64:	6c af       	std	Y+60, r22	; 0x3c
    1e66:	7d af       	std	Y+61, r23	; 0x3d
    1e68:	8e af       	std	Y+62, r24	; 0x3e
    1e6a:	9f af       	std	Y+63, r25	; 0x3f
    1e6c:	23 97       	sbiw	r28, 0x03	; 3
	
	vec3x1 O4i1	= subvec( position, mvdot( R1, l1 ) );
    1e6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e72:	ab a5       	ldd	r26, Y+43	; 0x2b
    1e74:	bc a5       	ldd	r27, Y+44	; 0x2c
    1e76:	8d 8f       	std	Y+29, r24	; 0x1d
    1e78:	9e 8f       	std	Y+30, r25	; 0x1e
    1e7a:	af 8f       	std	Y+31, r26	; 0x1f
    1e7c:	b8 a3       	std	Y+32, r27	; 0x20
    1e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e80:	9e a1       	ldd	r25, Y+38	; 0x26
    1e82:	af a1       	ldd	r26, Y+39	; 0x27
    1e84:	b8 a5       	ldd	r27, Y+40	; 0x28
    1e86:	89 8f       	std	Y+25, r24	; 0x19
    1e88:	9a 8f       	std	Y+26, r25	; 0x1a
    1e8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e8c:	bc 8f       	std	Y+28, r27	; 0x1c
    1e8e:	de 01       	movw	r26, r28
    1e90:	1d 96       	adiw	r26, 0x0d	; 13
    1e92:	fe 01       	movw	r30, r28
    1e94:	79 96       	adiw	r30, 0x19	; 25
    1e96:	8c e0       	ldi	r24, 0x0C	; 12
    1e98:	01 90       	ld	r0, Z+
    1e9a:	0d 92       	st	X+, r0
    1e9c:	81 50       	subi	r24, 0x01	; 1
    1e9e:	e1 f7       	brne	.-8      	; 0x1e98 <leg_ik+0x14a>
*/

vec3x1 subvec( vec3x1 vec1, vec3x1 vec2 ) 
{
	vec3x1 vec_out;	
	vec_out.e11 = vec2.e11 - vec1.e11;
    1ea0:	23 96       	adiw	r28, 0x03	; 3
    1ea2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ea4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ea6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ea8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eaa:	23 97       	sbiw	r28, 0x03	; 3
    1eac:	a2 01       	movw	r20, r4
    1eae:	91 01       	movw	r18, r2
    1eb0:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1eb4:	7b 01       	movw	r14, r22
    1eb6:	8c 01       	movw	r16, r24
    1eb8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1eba:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ebc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ebe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ec0:	90 58       	subi	r25, 0x80	; 128
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1ece:	9b 01       	movw	r18, r22
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1ee6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ee8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1eea:	4f 85       	ldd	r20, Y+15	; 0x0f
    1eec:	58 89       	ldd	r21, Y+16	; 0x10
    1eee:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    1ef2:	3b 01       	movw	r6, r22
    1ef4:	4c 01       	movw	r8, r24
	vec_out.e21 = vec2.e21 - vec1.e21;
	vec_out.e31 = vec2.e31 - vec1.e31;
    1ef6:	c2 01       	movw	r24, r4
    1ef8:	b1 01       	movw	r22, r2
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	50 e0       	ldi	r21, 0x00	; 0
    1f1a:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1f1e:	2d 89       	ldd	r18, Y+21	; 0x15
    1f20:	3e 89       	ldd	r19, Y+22	; 0x16
    1f22:	4f 89       	ldd	r20, Y+23	; 0x17
    1f24:	58 8d       	ldd	r21, Y+24	; 0x18
    1f26:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    1f2a:	5b 01       	movw	r10, r22
    1f2c:	6c 01       	movw	r12, r24
	return( vec_out );
    1f2e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f30:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f32:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f34:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f36:	a2 01       	movw	r20, r4
    1f38:	91 01       	movw	r18, r2
    1f3a:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1f3e:	7b 01       	movw	r14, r22
    1f40:	8c 01       	movw	r16, r24
    1f42:	23 96       	adiw	r28, 0x03	; 3
    1f44:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f46:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f48:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f4c:	23 97       	sbiw	r28, 0x03	; 3
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    1f5a:	9b 01       	movw	r18, r22
    1f5c:	ac 01       	movw	r20, r24
    1f5e:	c8 01       	movw	r24, r16
    1f60:	b7 01       	movw	r22, r14
    1f62:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    1f72:	29 89       	ldd	r18, Y+17	; 0x11
    1f74:	3a 89       	ldd	r19, Y+18	; 0x12
    1f76:	4b 89       	ldd	r20, Y+19	; 0x13
    1f78:	5c 89       	ldd	r21, Y+20	; 0x14
    1f7a:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    1f7e:	6d 83       	std	Y+5, r22	; 0x05
    1f80:	7e 83       	std	Y+6, r23	; 0x06
    1f82:	8f 83       	std	Y+7, r24	; 0x07
    1f84:	98 87       	std	Y+8, r25	; 0x08
	vec3x1 l1	= { links[0], 0, 0 };
	mat3x3 R1	= Rz( tht3 );
	
	vec3x1 O4i1	= subvec( position, mvdot( R1, l1 ) );
	
	double R2t4	= sidelaw( links[2], links[3], tht3 );
    1f86:	27 96       	adiw	r28, 0x07	; 7
    1f88:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f8a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f8c:	27 97       	sbiw	r28, 0x07	; 7
    1f8e:	18 96       	adiw	r26, 0x08	; 8
    1f90:	6d 91       	ld	r22, X+
    1f92:	7d 91       	ld	r23, X+
    1f94:	8d 91       	ld	r24, X+
    1f96:	9c 91       	ld	r25, X
    1f98:	1b 97       	sbiw	r26, 0x0b	; 11
    1f9a:	1c 96       	adiw	r26, 0x0c	; 12
    1f9c:	2d 91       	ld	r18, X+
    1f9e:	3d 91       	ld	r19, X+
    1fa0:	4d 91       	ld	r20, X+
    1fa2:	5c 91       	ld	r21, X
    1fa4:	1f 97       	sbiw	r26, 0x0f	; 15
    1fa6:	6f 96       	adiw	r28, 0x1f	; 31
    1fa8:	ec ac       	ldd	r14, Y+60	; 0x3c
    1faa:	fd ac       	ldd	r15, Y+61	; 0x3d
    1fac:	0e ad       	ldd	r16, Y+62	; 0x3e
    1fae:	1f ad       	ldd	r17, Y+63	; 0x3f
    1fb0:	6f 97       	sbiw	r28, 0x1f	; 31
    1fb2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <sidelaw>
    1fb6:	1b 01       	movw	r2, r22
    1fb8:	2c 01       	movw	r4, r24
	double alpa = sign( tht3 )*acos3( R2t4, links[2], links[3] );
    1fba:	6f 96       	adiw	r28, 0x1f	; 31
    1fbc:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fbe:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fc0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fc4:	6f 97       	sbiw	r28, 0x1f	; 31
    1fc6:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <sign>
    1fca:	9a af       	std	Y+58, r25	; 0x3a
    1fcc:	89 af       	std	Y+57, r24	; 0x39
    1fce:	27 96       	adiw	r28, 0x07	; 7
    1fd0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fd2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fd4:	27 97       	sbiw	r28, 0x07	; 7
    1fd6:	20 85       	ldd	r18, Z+8	; 0x08
    1fd8:	31 85       	ldd	r19, Z+9	; 0x09
    1fda:	42 85       	ldd	r20, Z+10	; 0x0a
    1fdc:	53 85       	ldd	r21, Z+11	; 0x0b
    1fde:	e4 84       	ldd	r14, Z+12	; 0x0c
    1fe0:	f5 84       	ldd	r15, Z+13	; 0x0d
    1fe2:	06 85       	ldd	r16, Z+14	; 0x0e
    1fe4:	17 85       	ldd	r17, Z+15	; 0x0f
    1fe6:	c2 01       	movw	r24, r4
    1fe8:	b1 01       	movw	r22, r2
    1fea:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <acos3>
    1fee:	6d ab       	std	Y+53, r22	; 0x35
    1ff0:	7e ab       	std	Y+54, r23	; 0x36
    1ff2:	8f ab       	std	Y+55, r24	; 0x37
    1ff4:	98 af       	std	Y+56, r25	; 0x38
	double R1t4 = magvec( O4i1 );
    1ff6:	c3 01       	movw	r24, r6
    1ff8:	d4 01       	movw	r26, r8
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	ab 83       	std	Y+3, r26	; 0x03
    2000:	bc 83       	std	Y+4, r27	; 0x04
    2002:	c5 01       	movw	r24, r10
    2004:	d6 01       	movw	r26, r12
    2006:	89 87       	std	Y+9, r24	; 0x09
    2008:	9a 87       	std	Y+10, r25	; 0x0a
    200a:	ab 87       	std	Y+11, r26	; 0x0b
    200c:	bc 87       	std	Y+12, r27	; 0x0c
    200e:	e9 80       	ldd	r14, Y+1	; 0x01
    2010:	fa 80       	ldd	r15, Y+2	; 0x02
    2012:	0b 81       	ldd	r16, Y+3	; 0x03
    2014:	1c 81       	ldd	r17, Y+4	; 0x04
    2016:	2d 81       	ldd	r18, Y+5	; 0x05
    2018:	3e 81       	ldd	r19, Y+6	; 0x06
    201a:	4f 81       	ldd	r20, Y+7	; 0x07
    201c:	58 85       	ldd	r21, Y+8	; 0x08
    201e:	69 85       	ldd	r22, Y+9	; 0x09
    2020:	7a 85       	ldd	r23, Y+10	; 0x0a
    2022:	8b 85       	ldd	r24, Y+11	; 0x0b
    2024:	9c 85       	ldd	r25, Y+12	; 0x0c
    2026:	0e 94 c8 0c 	call	0x1990	; 0x1990 <magvec>
    202a:	69 ab       	std	Y+49, r22	; 0x31
    202c:	7a ab       	std	Y+50, r23	; 0x32
    202e:	8b ab       	std	Y+51, r24	; 0x33
    2030:	9c ab       	std	Y+52, r25	; 0x34
	double beta = acos3( R2t4, links[1], R1t4 );
    2032:	27 96       	adiw	r28, 0x07	; 7
    2034:	ae ad       	ldd	r26, Y+62	; 0x3e
    2036:	bf ad       	ldd	r27, Y+63	; 0x3f
    2038:	27 97       	sbiw	r28, 0x07	; 7
    203a:	14 96       	adiw	r26, 0x04	; 4
    203c:	2d 91       	ld	r18, X+
    203e:	3d 91       	ld	r19, X+
    2040:	4d 91       	ld	r20, X+
    2042:	5c 91       	ld	r21, X
    2044:	17 97       	sbiw	r26, 0x07	; 7
    2046:	c2 01       	movw	r24, r4
    2048:	b1 01       	movw	r22, r2
    204a:	e9 a8       	ldd	r14, Y+49	; 0x31
    204c:	fa a8       	ldd	r15, Y+50	; 0x32
    204e:	0b a9       	ldd	r16, Y+51	; 0x33
    2050:	1c a9       	ldd	r17, Y+52	; 0x34
    2052:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <acos3>
    2056:	6d a7       	std	Y+45, r22	; 0x2d
    2058:	7e a7       	std	Y+46, r23	; 0x2e
    205a:	8f a7       	std	Y+47, r24	; 0x2f
    205c:	98 ab       	std	Y+48, r25	; 0x30
	
	tht.e21 = pi - ( alpa + beta );
	tht.e31 = -acos3( links[1], R1t4, R2t4 ) + atan2( O4i1.e31, O4i1.e11 );
    205e:	b5 01       	movw	r22, r10
    2060:	c6 01       	movw	r24, r12
    2062:	93 01       	movw	r18, r6
    2064:	a4 01       	movw	r20, r8
    2066:	0e 94 20 32 	call	0x6440	; 0x6440 <atan2>
    206a:	5b 01       	movw	r10, r22
    206c:	6c 01       	movw	r12, r24
    206e:	27 96       	adiw	r28, 0x07	; 7
    2070:	ee ad       	ldd	r30, Y+62	; 0x3e
    2072:	ff ad       	ldd	r31, Y+63	; 0x3f
    2074:	27 97       	sbiw	r28, 0x07	; 7
    2076:	64 81       	ldd	r22, Z+4	; 0x04
    2078:	75 81       	ldd	r23, Z+5	; 0x05
    207a:	86 81       	ldd	r24, Z+6	; 0x06
    207c:	97 81       	ldd	r25, Z+7	; 0x07
    207e:	29 a9       	ldd	r18, Y+49	; 0x31
    2080:	3a a9       	ldd	r19, Y+50	; 0x32
    2082:	4b a9       	ldd	r20, Y+51	; 0x33
    2084:	5c a9       	ldd	r21, Y+52	; 0x34
    2086:	82 01       	movw	r16, r4
    2088:	71 01       	movw	r14, r2
    208a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <acos3>
    208e:	9b 01       	movw	r18, r22
    2090:	ac 01       	movw	r20, r24
	
	return( tht );
    2092:	c6 01       	movw	r24, r12
    2094:	b5 01       	movw	r22, r10
    2096:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    209a:	25 96       	adiw	r28, 0x05	; 5
    209c:	ae ad       	ldd	r26, Y+62	; 0x3e
    209e:	bf ad       	ldd	r27, Y+63	; 0x3f
    20a0:	25 97       	sbiw	r28, 0x05	; 5
    20a2:	18 96       	adiw	r26, 0x08	; 8
    20a4:	6d 93       	st	X+, r22
    20a6:	7d 93       	st	X+, r23
    20a8:	8d 93       	st	X+, r24
    20aa:	9c 93       	st	X, r25
    20ac:	1b 97       	sbiw	r26, 0x0b	; 11
    20ae:	e9 ad       	ldd	r30, Y+57	; 0x39
    20b0:	fa ad       	ldd	r31, Y+58	; 0x3a
    20b2:	bf 01       	movw	r22, r30
    20b4:	88 27       	eor	r24, r24
    20b6:	77 fd       	sbrc	r23, 7
    20b8:	80 95       	com	r24
    20ba:	98 2f       	mov	r25, r24
    20bc:	0e 94 15 33 	call	0x662a	; 0x662a <__floatsisf>
    20c0:	2d a9       	ldd	r18, Y+53	; 0x35
    20c2:	3e a9       	ldd	r19, Y+54	; 0x36
    20c4:	4f a9       	ldd	r20, Y+55	; 0x37
    20c6:	58 ad       	ldd	r21, Y+56	; 0x38
    20c8:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    20cc:	2d a5       	ldd	r18, Y+45	; 0x2d
    20ce:	3e a5       	ldd	r19, Y+46	; 0x2e
    20d0:	4f a5       	ldd	r20, Y+47	; 0x2f
    20d2:	58 a9       	ldd	r21, Y+48	; 0x30
    20d4:	0e 94 96 31 	call	0x632c	; 0x632c <__addsf3>
    20d8:	9b 01       	movw	r18, r22
    20da:	ac 01       	movw	r20, r24
    20dc:	60 e1       	ldi	r22, 0x10	; 16
    20de:	78 e5       	ldi	r23, 0x58	; 88
    20e0:	89 e4       	ldi	r24, 0x49	; 73
    20e2:	90 e4       	ldi	r25, 0x40	; 64
    20e4:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    20e8:	25 96       	adiw	r28, 0x05	; 5
    20ea:	ae ad       	ldd	r26, Y+62	; 0x3e
    20ec:	bf ad       	ldd	r27, Y+63	; 0x3f
    20ee:	25 97       	sbiw	r28, 0x05	; 5
    20f0:	14 96       	adiw	r26, 0x04	; 4
    20f2:	6d 93       	st	X+, r22
    20f4:	7d 93       	st	X+, r23
    20f6:	8d 93       	st	X+, r24
    20f8:	9c 93       	st	X, r25
    20fa:	17 97       	sbiw	r26, 0x07	; 7

vec3x1 leg_ik( vec3x1 position, double links[4], double tht3 )
{
	vec3x1 tht = empty3x1;
	
	tht.e11 = atan2( position.e21, position.e11 );
    20fc:	69 a5       	ldd	r22, Y+41	; 0x29
    20fe:	7a a5       	ldd	r23, Y+42	; 0x2a
    2100:	8b a5       	ldd	r24, Y+43	; 0x2b
    2102:	9c a5       	ldd	r25, Y+44	; 0x2c
    2104:	2d a1       	ldd	r18, Y+37	; 0x25
    2106:	3e a1       	ldd	r19, Y+38	; 0x26
    2108:	4f a1       	ldd	r20, Y+39	; 0x27
    210a:	58 a5       	ldd	r21, Y+40	; 0x28
    210c:	0e 94 20 32 	call	0x6440	; 0x6440 <atan2>
	double beta = acos3( R2t4, links[1], R1t4 );
	
	tht.e21 = pi - ( alpa + beta );
	tht.e31 = -acos3( links[1], R1t4, R2t4 ) + atan2( O4i1.e31, O4i1.e11 );
	
	return( tht );
    2110:	25 96       	adiw	r28, 0x05	; 5
    2112:	ee ad       	ldd	r30, Y+62	; 0x3e
    2114:	ff ad       	ldd	r31, Y+63	; 0x3f
    2116:	25 97       	sbiw	r28, 0x05	; 5
    2118:	60 83       	st	Z, r22
    211a:	71 83       	std	Z+1, r23	; 0x01
    211c:	82 83       	std	Z+2, r24	; 0x02
    211e:	93 83       	std	Z+3, r25	; 0x03
}
    2120:	cf 01       	movw	r24, r30
    2122:	ca 5b       	subi	r28, 0xBA	; 186
    2124:	df 4f       	sbci	r29, 0xFF	; 255
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	ff 90       	pop	r15
    213a:	ef 90       	pop	r14
    213c:	df 90       	pop	r13
    213e:	cf 90       	pop	r12
    2140:	bf 90       	pop	r11
    2142:	af 90       	pop	r10
    2144:	9f 90       	pop	r9
    2146:	8f 90       	pop	r8
    2148:	7f 90       	pop	r7
    214a:	6f 90       	pop	r6
    214c:	5f 90       	pop	r5
    214e:	4f 90       	pop	r4
    2150:	3f 90       	pop	r3
    2152:	2f 90       	pop	r2
    2154:	08 95       	ret

00002156 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2156:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2158:	9c 01       	movw	r18, r24
    215a:	2d 5f       	subi	r18, 0xFD	; 253
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	32 83       	std	Z+2, r19	; 0x02
    2160:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2162:	8f ef       	ldi	r24, 0xFF	; 255
    2164:	9f ef       	ldi	r25, 0xFF	; 255
    2166:	94 83       	std	Z+4, r25	; 0x04
    2168:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    216a:	36 83       	std	Z+6, r19	; 0x06
    216c:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    216e:	30 87       	std	Z+8, r19	; 0x08
    2170:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = 0;
    2172:	10 82       	st	Z, r1
}
    2174:	08 95       	ret

00002176 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2176:	fc 01       	movw	r30, r24
    2178:	11 86       	std	Z+9, r1	; 0x09
    217a:	10 86       	std	Z+8, r1	; 0x08
}
    217c:	08 95       	ret

0000217e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	ac 01       	movw	r20, r24
    2184:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2186:	ec 01       	movw	r28, r24
    2188:	29 81       	ldd	r18, Y+1	; 0x01
    218a:	3a 81       	ldd	r19, Y+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    218c:	f9 01       	movw	r30, r18
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	13 96       	adiw	r26, 0x03	; 3
    2194:	9c 93       	st	X, r25
    2196:	8e 93       	st	-X, r24
    2198:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	15 96       	adiw	r26, 0x05	; 5
    21a0:	9c 93       	st	X, r25
    21a2:	8e 93       	st	-X, r24
    21a4:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    21a6:	02 80       	ldd	r0, Z+2	; 0x02
    21a8:	f3 81       	ldd	r31, Z+3	; 0x03
    21aa:	e0 2d       	mov	r30, r0
    21ac:	75 83       	std	Z+5, r23	; 0x05
    21ae:	64 83       	std	Z+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    21b0:	e9 01       	movw	r28, r18
    21b2:	7b 83       	std	Y+3, r23	; 0x03
    21b4:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    21b6:	fa 01       	movw	r30, r20
    21b8:	72 83       	std	Z+2, r23	; 0x02
    21ba:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    21bc:	19 96       	adiw	r26, 0x09	; 9
    21be:	5c 93       	st	X, r21
    21c0:	4e 93       	st	-X, r20
    21c2:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
    21c4:	80 81       	ld	r24, Z
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	80 83       	st	Z, r24
}
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	08 95       	ret

000021d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	9c 01       	movw	r18, r24
    21d6:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    21d8:	48 81       	ld	r20, Y
    21da:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as 
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the 
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    21dc:	8f ef       	ldi	r24, 0xFF	; 255
    21de:	4f 3f       	cpi	r20, 0xFF	; 255
    21e0:	58 07       	cpc	r21, r24
    21e2:	21 f4       	brne	.+8      	; 0x21ec <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    21e4:	f9 01       	movw	r30, r18
    21e6:	a7 81       	ldd	r26, Z+7	; 0x07
    21e8:	b0 85       	ldd	r27, Z+8	; 0x08
    21ea:	10 c0       	rjmp	.+32     	; 0x220c <__stack+0xd>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips. 
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    21ec:	d9 01       	movw	r26, r18
    21ee:	13 96       	adiw	r26, 0x03	; 3
    21f0:	04 c0       	rjmp	.+8      	; 0x21fa <vListInsert+0x2a>
    21f2:	12 96       	adiw	r26, 0x02	; 2
    21f4:	0d 90       	ld	r0, X+
    21f6:	bc 91       	ld	r27, X
    21f8:	a0 2d       	mov	r26, r0
    21fa:	12 96       	adiw	r26, 0x02	; 2
    21fc:	ed 91       	ld	r30, X+
    21fe:	fc 91       	ld	r31, X
    2200:	13 97       	sbiw	r26, 0x03	; 3
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	48 17       	cp	r20, r24
    2208:	59 07       	cpc	r21, r25
    220a:	98 f7       	brcc	.-26     	; 0x21f2 <vListInsert+0x22>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    220c:	12 96       	adiw	r26, 0x02	; 2
    220e:	ed 91       	ld	r30, X+
    2210:	fc 91       	ld	r31, X
    2212:	13 97       	sbiw	r26, 0x03	; 3
    2214:	fb 83       	std	Y+3, r31	; 0x03
    2216:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2218:	d5 83       	std	Z+5, r29	; 0x05
    221a:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    221c:	bd 83       	std	Y+5, r27	; 0x05
    221e:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2220:	13 96       	adiw	r26, 0x03	; 3
    2222:	dc 93       	st	X, r29
    2224:	ce 93       	st	-X, r28
    2226:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2228:	39 87       	std	Y+9, r19	; 0x09
    222a:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    222c:	f9 01       	movw	r30, r18
    222e:	80 81       	ld	r24, Z
    2230:	8f 5f       	subi	r24, 0xFF	; 255
    2232:	80 83       	st	Z, r24
}
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	08 95       	ret

0000223a <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	dc 01       	movw	r26, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2240:	12 96       	adiw	r26, 0x02	; 2
    2242:	ed 91       	ld	r30, X+
    2244:	fc 91       	ld	r31, X
    2246:	13 97       	sbiw	r26, 0x03	; 3
    2248:	14 96       	adiw	r26, 0x04	; 4
    224a:	8d 91       	ld	r24, X+
    224c:	9c 91       	ld	r25, X
    224e:	15 97       	sbiw	r26, 0x05	; 5
    2250:	95 83       	std	Z+5, r25	; 0x05
    2252:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2254:	14 96       	adiw	r26, 0x04	; 4
    2256:	cd 91       	ld	r28, X+
    2258:	dc 91       	ld	r29, X
    225a:	15 97       	sbiw	r26, 0x05	; 5
    225c:	fb 83       	std	Y+3, r31	; 0x03
    225e:	ea 83       	std	Y+2, r30	; 0x02
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2260:	18 96       	adiw	r26, 0x08	; 8
    2262:	ed 91       	ld	r30, X+
    2264:	fc 91       	ld	r31, X
    2266:	19 97       	sbiw	r26, 0x09	; 9

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2268:	81 81       	ldd	r24, Z+1	; 0x01
    226a:	92 81       	ldd	r25, Z+2	; 0x02
    226c:	8a 17       	cp	r24, r26
    226e:	9b 07       	cpc	r25, r27
    2270:	11 f4       	brne	.+4      	; 0x2276 <vListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2272:	d2 83       	std	Z+2, r29	; 0x02
    2274:	c1 83       	std	Z+1, r28	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    2276:	19 96       	adiw	r26, 0x09	; 9
    2278:	1c 92       	st	X, r1
    227a:	1e 92       	st	-X, r1
    227c:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    227e:	80 81       	ld	r24, Z
    2280:	81 50       	subi	r24, 0x01	; 1
    2282:	80 83       	st	Z, r24
}
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	08 95       	ret

0000228a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    228a:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	taskENTER_CRITICAL();
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2292:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    2294:	0f 90       	pop	r0
    2296:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    2298:	08 95       	ret

0000229a <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    229a:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	uxReturn = pxQueue->uxMessagesWaiting;
    229c:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
}
    229e:	08 95       	ret

000022a0 <xQueueIsQueueEmptyFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    22a0:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    22a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	88 23       	and	r24, r24
    22a8:	09 f4       	brne	.+2      	; 0x22ac <xQueueIsQueueEmptyFromISR+0xc>
    22aa:	91 e0       	ldi	r25, 0x01	; 1

	return xReturn;
}
    22ac:	89 2f       	mov	r24, r25
    22ae:	08 95       	ret

000022b0 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    22b0:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    22b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	83 8d       	ldd	r24, Z+27	; 0x1b
    22b8:	98 17       	cp	r25, r24
    22ba:	09 f4       	brne	.+2      	; 0x22be <xQueueIsQueueFullFromISR+0xe>
    22bc:	21 e0       	ldi	r18, 0x01	; 1

	return xReturn;
}
    22be:	82 2f       	mov	r24, r18
    22c0:	08 95       	ret

000022c2 <vQueueDelete>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	8c 01       	movw	r16, r24
	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    22c8:	fc 01       	movw	r30, r24
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	0e 94 ba 1b 	call	0x3774	; 0x3774 <vPortFree>
	vPortFree( pxQueue );
    22d2:	c8 01       	movw	r24, r16
    22d4:	0e 94 ba 1b 	call	0x3774	; 0x3774 <vPortFree>
}
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	08 95       	ret

000022de <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	ec 01       	movw	r28, r24
    22e8:	fb 01       	movw	r30, r22
    22ea:	8a 01       	movw	r16, r20
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    22ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22ee:	88 23       	and	r24, r24
    22f0:	81 f1       	breq	.+96     	; 0x2352 <xQueueReceiveFromISR+0x74>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    22f2:	48 81       	ld	r20, Y
    22f4:	59 81       	ldd	r21, Y+1	; 0x01
    22f6:	41 15       	cp	r20, r1
    22f8:	51 05       	cpc	r21, r1
    22fa:	a9 f0       	breq	.+42     	; 0x2326 <xQueueReceiveFromISR+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    22fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22fe:	2e 81       	ldd	r18, Y+6	; 0x06
    2300:	3f 81       	ldd	r19, Y+7	; 0x07
    2302:	28 0f       	add	r18, r24
    2304:	31 1d       	adc	r19, r1
    2306:	3f 83       	std	Y+7, r19	; 0x07
    2308:	2e 83       	std	Y+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	9b 81       	ldd	r25, Y+3	; 0x03
    230e:	28 17       	cp	r18, r24
    2310:	39 07       	cpc	r19, r25
    2312:	10 f0       	brcs	.+4      	; 0x2318 <xQueueReceiveFromISR+0x3a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    2314:	5f 83       	std	Y+7, r21	; 0x07
    2316:	4e 83       	std	Y+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2318:	4c 8d       	ldd	r20, Y+28	; 0x1c
    231a:	6e 81       	ldd	r22, Y+6	; 0x06
    231c:	7f 81       	ldd	r23, Y+7	; 0x07
    231e:	cf 01       	movw	r24, r30
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	0e 94 68 31 	call	0x62d0	; 0x62d0 <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    2326:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2328:	81 50       	subi	r24, 0x01	; 1
    232a:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    232c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    232e:	8f 3f       	cpi	r24, 0xFF	; 255
    2330:	69 f4       	brne	.+26     	; 0x234c <xQueueReceiveFromISR+0x6e>
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    2332:	88 85       	ldd	r24, Y+8	; 0x08
    2334:	88 23       	and	r24, r24
    2336:	61 f0       	breq	.+24     	; 0x2350 <xQueueReceiveFromISR+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2338:	ce 01       	movw	r24, r28
    233a:	08 96       	adiw	r24, 0x08	; 8
    233c:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    2340:	88 23       	and	r24, r24
    2342:	31 f0       	breq	.+12     	; 0x2350 <xQueueReceiveFromISR+0x72>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	f8 01       	movw	r30, r16
    2348:	80 83       	st	Z, r24
    234a:	03 c0       	rjmp	.+6      	; 0x2352 <xQueueReceiveFromISR+0x74>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	8d 8f       	std	Y+29, r24	; 0x1d
    2350:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	08 95       	ret

0000235c <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	ec 01       	movw	r28, r24
    2362:	84 2f       	mov	r24, r20
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2364:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2366:	44 23       	and	r20, r20
    2368:	a1 f1       	breq	.+104    	; 0x23d2 <prvCopyDataToQueue+0x76>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    236a:	88 23       	and	r24, r24
    236c:	b1 f4       	brne	.+44     	; 0x239a <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    236e:	8c 81       	ldd	r24, Y+4	; 0x04
    2370:	9d 81       	ldd	r25, Y+5	; 0x05
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	0e 94 68 31 	call	0x62d0	; 0x62d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2378:	8c 8d       	ldd	r24, Y+28	; 0x1c
    237a:	2c 81       	ldd	r18, Y+4	; 0x04
    237c:	3d 81       	ldd	r19, Y+5	; 0x05
    237e:	28 0f       	add	r18, r24
    2380:	31 1d       	adc	r19, r1
    2382:	3d 83       	std	Y+5, r19	; 0x05
    2384:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	28 17       	cp	r18, r24
    238c:	39 07       	cpc	r19, r25
    238e:	08 f1       	brcs	.+66     	; 0x23d2 <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2390:	88 81       	ld	r24, Y
    2392:	99 81       	ldd	r25, Y+1	; 0x01
    2394:	9d 83       	std	Y+5, r25	; 0x05
    2396:	8c 83       	std	Y+4, r24	; 0x04
    2398:	1c c0       	rjmp	.+56     	; 0x23d2 <prvCopyDataToQueue+0x76>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    239a:	8e 81       	ldd	r24, Y+6	; 0x06
    239c:	9f 81       	ldd	r25, Y+7	; 0x07
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	0e 94 68 31 	call	0x62d0	; 0x62d0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    23a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	44 27       	eor	r20, r20
    23aa:	55 27       	eor	r21, r21
    23ac:	48 1b       	sub	r20, r24
    23ae:	59 0b       	sbc	r21, r25
    23b0:	8e 81       	ldd	r24, Y+6	; 0x06
    23b2:	9f 81       	ldd	r25, Y+7	; 0x07
    23b4:	84 0f       	add	r24, r20
    23b6:	95 1f       	adc	r25, r21
    23b8:	9f 83       	std	Y+7, r25	; 0x07
    23ba:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    23bc:	28 81       	ld	r18, Y
    23be:	39 81       	ldd	r19, Y+1	; 0x01
    23c0:	82 17       	cp	r24, r18
    23c2:	93 07       	cpc	r25, r19
    23c4:	30 f4       	brcc	.+12     	; 0x23d2 <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ca:	84 0f       	add	r24, r20
    23cc:	95 1f       	adc	r25, r21
    23ce:	9f 83       	std	Y+7, r25	; 0x07
    23d0:	8e 83       	std	Y+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    23d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	8a 8f       	std	Y+26, r24	; 0x1a
}
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	08 95       	ret

000023de <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	ec 01       	movw	r28, r24
    23e8:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    23ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ee:	98 17       	cp	r25, r24
    23f0:	10 f0       	brcs	.+4      	; 0x23f6 <xQueueGenericSendFromISR+0x18>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	17 c0       	rjmp	.+46     	; 0x2424 <xQueueGenericSendFromISR+0x46>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    23f6:	ce 01       	movw	r24, r28
    23f8:	42 2f       	mov	r20, r18
    23fa:	0e 94 ae 11 	call	0x235c	; 0x235c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    23fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2400:	8f 3f       	cpi	r24, 0xFF	; 255
    2402:	69 f4       	brne	.+26     	; 0x241e <xQueueGenericSendFromISR+0x40>
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    2404:	89 89       	ldd	r24, Y+17	; 0x11
    2406:	88 23       	and	r24, r24
    2408:	61 f0       	breq	.+24     	; 0x2422 <xQueueGenericSendFromISR+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    240a:	ce 01       	movw	r24, r28
    240c:	41 96       	adiw	r24, 0x11	; 17
    240e:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    2412:	88 23       	and	r24, r24
    2414:	31 f0       	breq	.+12     	; 0x2422 <xQueueGenericSendFromISR+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	f8 01       	movw	r30, r16
    241a:	80 83       	st	Z, r24
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <xQueueGenericSendFromISR+0x46>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    241e:	8f 5f       	subi	r24, 0xFF	; 255
    2420:	8e 8f       	std	Y+30, r24	; 0x1e
    2422:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	08 95       	ret

0000242e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	0f 92       	push	r0
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    243e:	8c 01       	movw	r16, r24
    2440:	0f 5e       	subi	r16, 0xEF	; 239
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	0d c0       	rjmp	.+26     	; 0x2460 <prvUnlockQueue+0x32>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    2446:	89 89       	ldd	r24, Y+17	; 0x11
    2448:	88 23       	and	r24, r24
    244a:	69 f0       	breq	.+26     	; 0x2466 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    244c:	c8 01       	movw	r24, r16
    244e:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    2452:	88 23       	and	r24, r24
    2454:	11 f0       	breq	.+4      	; 0x245a <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    2456:	0e 94 cb 14 	call	0x2996	; 0x2996 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    245a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    245c:	81 50       	subi	r24, 0x01	; 1
    245e:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2460:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2462:	18 16       	cp	r1, r24
    2464:	84 f3       	brlt	.-32     	; 0x2446 <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2466:	8f ef       	ldi	r24, 0xFF	; 255
    2468:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    246a:	0f 90       	pop	r0
    246c:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2474:	8e 01       	movw	r16, r28
    2476:	08 5f       	subi	r16, 0xF8	; 248
    2478:	1f 4f       	sbci	r17, 0xFF	; 255
    247a:	0d c0       	rjmp	.+26     	; 0x2496 <prvUnlockQueue+0x68>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    247c:	88 85       	ldd	r24, Y+8	; 0x08
    247e:	88 23       	and	r24, r24
    2480:	69 f0       	breq	.+26     	; 0x249c <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2482:	c8 01       	movw	r24, r16
    2484:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    2488:	88 23       	and	r24, r24
    248a:	11 f0       	breq	.+4      	; 0x2490 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    248c:	0e 94 cb 14 	call	0x2996	; 0x2996 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    2490:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2492:	81 50       	subi	r24, 0x01	; 1
    2494:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2496:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2498:	18 16       	cp	r1, r24
    249a:	84 f3       	brlt	.-32     	; 0x247c <prvUnlockQueue+0x4e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    24a0:	0f 90       	pop	r0
    24a2:	0f be       	out	0x3f, r0	; 63
}
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	08 95       	ret

000024ae <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    24ae:	7f 92       	push	r7
    24b0:	8f 92       	push	r8
    24b2:	9f 92       	push	r9
    24b4:	af 92       	push	r10
    24b6:	bf 92       	push	r11
    24b8:	cf 92       	push	r12
    24ba:	df 92       	push	r13
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <xQueueGenericReceive+0x1c>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <xQueueGenericReceive+0x1e>
    24cc:	0f 92       	push	r0
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	8c 01       	movw	r16, r24
    24d4:	96 2e       	mov	r9, r22
    24d6:	87 2e       	mov	r8, r23
    24d8:	5d 83       	std	Y+5, r21	; 0x05
    24da:	4c 83       	std	Y+4, r20	; 0x04
    24dc:	72 2e       	mov	r7, r18
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    24de:	91 e1       	ldi	r25, 0x11	; 17
    24e0:	c9 2e       	mov	r12, r25
    24e2:	d1 2c       	mov	r13, r1
    24e4:	c0 0e       	add	r12, r16
    24e6:	d1 1e       	adc	r13, r17
    24e8:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    24ea:	7e 01       	movw	r14, r28
    24ec:	08 94       	sec
    24ee:	e1 1c       	adc	r14, r1
    24f0:	f1 1c       	adc	r15, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    24f2:	84 e0       	ldi	r24, 0x04	; 4
    24f4:	a8 2e       	mov	r10, r24
    24f6:	b1 2c       	mov	r11, r1
    24f8:	ac 0e       	add	r10, r28
    24fa:	bd 1e       	adc	r11, r29
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <xQueueGenericReceive+0x52>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    24fe:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2506:	f8 01       	movw	r30, r16
    2508:	82 8d       	ldd	r24, Z+26	; 0x1a
    250a:	88 23       	and	r24, r24
    250c:	09 f4       	brne	.+2      	; 0x2510 <xQueueGenericReceive+0x62>
    250e:	3e c0       	rjmp	.+124    	; 0x258c <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2510:	e6 80       	ldd	r14, Z+6	; 0x06
    2512:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    2514:	40 81       	ld	r20, Z
    2516:	51 81       	ldd	r21, Z+1	; 0x01
    2518:	41 15       	cp	r20, r1
    251a:	51 05       	cpc	r21, r1
    251c:	b1 f0       	breq	.+44     	; 0x254a <xQueueGenericReceive+0x9c>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    251e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2520:	97 01       	movw	r18, r14
    2522:	28 0f       	add	r18, r24
    2524:	31 1d       	adc	r19, r1
    2526:	37 83       	std	Z+7, r19	; 0x07
    2528:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	28 17       	cp	r18, r24
    2530:	39 07       	cpc	r19, r25
    2532:	10 f0       	brcs	.+4      	; 0x2538 <xQueueGenericReceive+0x8a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    2534:	57 83       	std	Z+7, r21	; 0x07
    2536:	46 83       	std	Z+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2538:	f8 01       	movw	r30, r16
    253a:	44 8d       	ldd	r20, Z+28	; 0x1c
    253c:	66 81       	ldd	r22, Z+6	; 0x06
    253e:	77 81       	ldd	r23, Z+7	; 0x07
    2540:	89 2d       	mov	r24, r9
    2542:	98 2d       	mov	r25, r8
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	0e 94 68 31 	call	0x62d0	; 0x62d0 <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    254a:	77 20       	and	r7, r7
    254c:	71 f4       	brne	.+28     	; 0x256a <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    254e:	f8 01       	movw	r30, r16
    2550:	82 8d       	ldd	r24, Z+26	; 0x1a
    2552:	81 50       	subi	r24, 0x01	; 1
    2554:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2556:	80 85       	ldd	r24, Z+8	; 0x08
    2558:	88 23       	and	r24, r24
    255a:	a1 f0       	breq	.+40     	; 0x2584 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    255c:	c8 01       	movw	r24, r16
    255e:	08 96       	adiw	r24, 0x08	; 8
    2560:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    2564:	81 30       	cpi	r24, 0x01	; 1
    2566:	71 f4       	brne	.+28     	; 0x2584 <xQueueGenericReceive+0xd6>
    2568:	0b c0       	rjmp	.+22     	; 0x2580 <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    256a:	f8 01       	movw	r30, r16
    256c:	f7 82       	std	Z+7, r15	; 0x07
    256e:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    2570:	81 89       	ldd	r24, Z+17	; 0x11
    2572:	88 23       	and	r24, r24
    2574:	39 f0       	breq	.+14     	; 0x2584 <xQueueGenericReceive+0xd6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2576:	c6 01       	movw	r24, r12
    2578:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    257c:	88 23       	and	r24, r24
    257e:	11 f0       	breq	.+4      	; 0x2584 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2580:	0e 94 97 19 	call	0x332e	; 0x332e <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    2584:	0f 90       	pop	r0
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	4a c0       	rjmp	.+148    	; 0x2620 <xQueueGenericReceive+0x172>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    258c:	8c 81       	ldd	r24, Y+4	; 0x04
    258e:	9d 81       	ldd	r25, Y+5	; 0x05
    2590:	89 2b       	or	r24, r25
    2592:	19 f4       	brne	.+6      	; 0x259a <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2594:	0f 90       	pop	r0
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	42 c0       	rjmp	.+132    	; 0x261e <xQueueGenericReceive+0x170>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    259a:	22 23       	and	r18, r18
    259c:	19 f4       	brne	.+6      	; 0x25a4 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    259e:	c7 01       	movw	r24, r14
    25a0:	0e 94 86 14 	call	0x290c	; 0x290c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    25a4:	0f 90       	pop	r0
    25a6:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    25a8:	0e 94 2a 14 	call	0x2854	; 0x2854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	0f 92       	push	r0
    25b2:	f8 01       	movw	r30, r16
    25b4:	85 8d       	ldd	r24, Z+29	; 0x1d
    25b6:	8f 3f       	cpi	r24, 0xFF	; 255
    25b8:	09 f4       	brne	.+2      	; 0x25bc <xQueueGenericReceive+0x10e>
    25ba:	15 8e       	std	Z+29, r1	; 0x1d
    25bc:	f8 01       	movw	r30, r16
    25be:	86 8d       	ldd	r24, Z+30	; 0x1e
    25c0:	8f 3f       	cpi	r24, 0xFF	; 255
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <xQueueGenericReceive+0x118>
    25c4:	16 8e       	std	Z+30, r1	; 0x1e
    25c6:	0f 90       	pop	r0
    25c8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    25ca:	c7 01       	movw	r24, r14
    25cc:	b5 01       	movw	r22, r10
    25ce:	0e 94 91 14 	call	0x2922	; 0x2922 <xTaskCheckForTimeOut>
    25d2:	88 23       	and	r24, r24
    25d4:	f9 f4       	brne	.+62     	; 0x2614 <xQueueGenericReceive+0x166>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    25dc:	f8 01       	movw	r30, r16
    25de:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    25e0:	0f 90       	pop	r0
    25e2:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
    25e4:	88 23       	and	r24, r24
    25e6:	81 f4       	brne	.+32     	; 0x2608 <xQueueGenericReceive+0x15a>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    25e8:	6c 81       	ldd	r22, Y+4	; 0x04
    25ea:	7d 81       	ldd	r23, Y+5	; 0x05
    25ec:	c6 01       	movw	r24, r12
    25ee:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    25f2:	c8 01       	movw	r24, r16
    25f4:	0e 94 17 12 	call	0x242e	; 0x242e <prvUnlockQueue>
				if( !xTaskResumeAll() )
    25f8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskResumeAll>
    25fc:	88 23       	and	r24, r24
    25fe:	09 f0       	breq	.+2      	; 0x2602 <xQueueGenericReceive+0x154>
    2600:	7e cf       	rjmp	.-260    	; 0x24fe <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    2602:	0e 94 97 19 	call	0x332e	; 0x332e <vPortYield>
    2606:	7b cf       	rjmp	.-266    	; 0x24fe <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2608:	c8 01       	movw	r24, r16
    260a:	0e 94 17 12 	call	0x242e	; 0x242e <prvUnlockQueue>
				( void ) xTaskResumeAll();
    260e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskResumeAll>
    2612:	75 cf       	rjmp	.-278    	; 0x24fe <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2614:	c8 01       	movw	r24, r16
    2616:	0e 94 17 12 	call	0x242e	; 0x242e <prvUnlockQueue>
			( void ) xTaskResumeAll();
    261a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskResumeAll>
    261e:	80 e0       	ldi	r24, 0x00	; 0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	df 90       	pop	r13
    2638:	cf 90       	pop	r12
    263a:	bf 90       	pop	r11
    263c:	af 90       	pop	r10
    263e:	9f 90       	pop	r9
    2640:	8f 90       	pop	r8
    2642:	7f 90       	pop	r7
    2644:	08 95       	ret

00002646 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2646:	7f 92       	push	r7
    2648:	8f 92       	push	r8
    264a:	9f 92       	push	r9
    264c:	af 92       	push	r10
    264e:	bf 92       	push	r11
    2650:	cf 92       	push	r12
    2652:	df 92       	push	r13
    2654:	ef 92       	push	r14
    2656:	ff 92       	push	r15
    2658:	0f 93       	push	r16
    265a:	1f 93       	push	r17
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	00 d0       	rcall	.+0      	; 0x2662 <xQueueGenericSend+0x1c>
    2662:	00 d0       	rcall	.+0      	; 0x2664 <xQueueGenericSend+0x1e>
    2664:	0f 92       	push	r0
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	8c 01       	movw	r16, r24
    266c:	6b 01       	movw	r12, r22
    266e:	5d 83       	std	Y+5, r21	; 0x05
    2670:	4c 83       	std	Y+4, r20	; 0x04
    2672:	72 2e       	mov	r7, r18
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2674:	48 e0       	ldi	r20, 0x08	; 8
    2676:	e4 2e       	mov	r14, r20
    2678:	f1 2c       	mov	r15, r1
    267a:	e8 0e       	add	r14, r24
    267c:	f9 1e       	adc	r15, r25
    267e:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2680:	5e 01       	movw	r10, r28
    2682:	08 94       	sec
    2684:	a1 1c       	adc	r10, r1
    2686:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2688:	34 e0       	ldi	r19, 0x04	; 4
    268a:	83 2e       	mov	r8, r19
    268c:	91 2c       	mov	r9, r1
    268e:	8c 0e       	add	r8, r28
    2690:	9d 1e       	adc	r9, r29
    2692:	01 c0       	rjmp	.+2      	; 0x2696 <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2694:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    269c:	f8 01       	movw	r30, r16
    269e:	92 8d       	ldd	r25, Z+26	; 0x1a
    26a0:	83 8d       	ldd	r24, Z+27	; 0x1b
    26a2:	98 17       	cp	r25, r24
    26a4:	a8 f4       	brcc	.+42     	; 0x26d0 <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    26a6:	c8 01       	movw	r24, r16
    26a8:	b6 01       	movw	r22, r12
    26aa:	47 2d       	mov	r20, r7
    26ac:	0e 94 ae 11 	call	0x235c	; 0x235c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    26b0:	f8 01       	movw	r30, r16
    26b2:	81 89       	ldd	r24, Z+17	; 0x11
    26b4:	88 23       	and	r24, r24
    26b6:	41 f0       	breq	.+16     	; 0x26c8 <xQueueGenericSend+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    26b8:	c8 01       	movw	r24, r16
    26ba:	41 96       	adiw	r24, 0x11	; 17
    26bc:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    26c0:	81 30       	cpi	r24, 0x01	; 1
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <xQueueGenericSend+0x82>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    26c4:	0e 94 97 19 	call	0x332e	; 0x332e <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    26c8:	0f 90       	pop	r0
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	4c c0       	rjmp	.+152    	; 0x2768 <xQueueGenericSend+0x122>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    26d0:	8c 81       	ldd	r24, Y+4	; 0x04
    26d2:	9d 81       	ldd	r25, Y+5	; 0x05
    26d4:	89 2b       	or	r24, r25
    26d6:	19 f4       	brne	.+6      	; 0x26de <xQueueGenericSend+0x98>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    26d8:	0f 90       	pop	r0
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	44 c0       	rjmp	.+136    	; 0x2766 <xQueueGenericSend+0x120>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    26de:	22 23       	and	r18, r18
    26e0:	19 f4       	brne	.+6      	; 0x26e8 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    26e2:	c5 01       	movw	r24, r10
    26e4:	0e 94 86 14 	call	0x290c	; 0x290c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    26e8:	0f 90       	pop	r0
    26ea:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    26ec:	0e 94 2a 14 	call	0x2854	; 0x2854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	0f 92       	push	r0
    26f6:	f8 01       	movw	r30, r16
    26f8:	85 8d       	ldd	r24, Z+29	; 0x1d
    26fa:	8f 3f       	cpi	r24, 0xFF	; 255
    26fc:	09 f4       	brne	.+2      	; 0x2700 <xQueueGenericSend+0xba>
    26fe:	15 8e       	std	Z+29, r1	; 0x1d
    2700:	f8 01       	movw	r30, r16
    2702:	86 8d       	ldd	r24, Z+30	; 0x1e
    2704:	8f 3f       	cpi	r24, 0xFF	; 255
    2706:	09 f4       	brne	.+2      	; 0x270a <xQueueGenericSend+0xc4>
    2708:	16 8e       	std	Z+30, r1	; 0x1e
    270a:	0f 90       	pop	r0
    270c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    270e:	c5 01       	movw	r24, r10
    2710:	b4 01       	movw	r22, r8
    2712:	0e 94 91 14 	call	0x2922	; 0x2922 <xTaskCheckForTimeOut>
    2716:	88 23       	and	r24, r24
    2718:	09 f5       	brne	.+66     	; 0x275c <xQueueGenericSend+0x116>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    2720:	f8 01       	movw	r30, r16
    2722:	92 8d       	ldd	r25, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    2724:	0f 90       	pop	r0
    2726:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
    2728:	f8 01       	movw	r30, r16
    272a:	83 8d       	ldd	r24, Z+27	; 0x1b
    272c:	98 17       	cp	r25, r24
    272e:	81 f4       	brne	.+32     	; 0x2750 <xQueueGenericSend+0x10a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2730:	6c 81       	ldd	r22, Y+4	; 0x04
    2732:	7d 81       	ldd	r23, Y+5	; 0x05
    2734:	c7 01       	movw	r24, r14
    2736:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    273a:	c8 01       	movw	r24, r16
    273c:	0e 94 17 12 	call	0x242e	; 0x242e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
    2740:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskResumeAll>
    2744:	88 23       	and	r24, r24
    2746:	09 f0       	breq	.+2      	; 0x274a <xQueueGenericSend+0x104>
    2748:	a5 cf       	rjmp	.-182    	; 0x2694 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    274a:	0e 94 97 19 	call	0x332e	; 0x332e <vPortYield>
    274e:	a2 cf       	rjmp	.-188    	; 0x2694 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2750:	c8 01       	movw	r24, r16
    2752:	0e 94 17 12 	call	0x242e	; 0x242e <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2756:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskResumeAll>
    275a:	9c cf       	rjmp	.-200    	; 0x2694 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    275c:	c8 01       	movw	r24, r16
    275e:	0e 94 17 12 	call	0x242e	; 0x242e <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2762:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskResumeAll>
    2766:	80 e0       	ldi	r24, 0x00	; 0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	df 90       	pop	r13
    2780:	cf 90       	pop	r12
    2782:	bf 90       	pop	r11
    2784:	af 90       	pop	r10
    2786:	9f 90       	pop	r9
    2788:	8f 90       	pop	r8
    278a:	7f 90       	pop	r7
    278c:	08 95       	ret

0000278e <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    278e:	8f 92       	push	r8
    2790:	9f 92       	push	r9
    2792:	af 92       	push	r10
    2794:	bf 92       	push	r11
    2796:	cf 92       	push	r12
    2798:	df 92       	push	r13
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	98 2e       	mov	r9, r24
    27a8:	86 2e       	mov	r8, r22
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    27aa:	88 23       	and	r24, r24
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <xQueueCreate+0x22>
    27ae:	42 c0       	rjmp	.+132    	; 0x2834 <xQueueCreate+0xa6>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    27b0:	8f e1       	ldi	r24, 0x1F	; 31
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	0e 94 ca 1b 	call	0x3794	; 0x3794 <pvPortMalloc>
    27b8:	8c 01       	movw	r16, r24
    27ba:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	e1 f1       	breq	.+120    	; 0x2838 <xQueueCreate+0xaa>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    27c0:	c9 2c       	mov	r12, r9
    27c2:	dd 24       	eor	r13, r13
    27c4:	a8 2c       	mov	r10, r8
    27c6:	bb 24       	eor	r11, r11
    27c8:	ac 9c       	mul	r10, r12
    27ca:	70 01       	movw	r14, r0
    27cc:	ad 9c       	mul	r10, r13
    27ce:	f0 0c       	add	r15, r0
    27d0:	bc 9c       	mul	r11, r12
    27d2:	f0 0c       	add	r15, r0
    27d4:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    27d6:	c7 01       	movw	r24, r14
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	0e 94 ca 1b 	call	0x3794	; 0x3794 <pvPortMalloc>
    27de:	9c 01       	movw	r18, r24
    27e0:	99 83       	std	Y+1, r25	; 0x01
    27e2:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	19 f1       	breq	.+70     	; 0x282e <xQueueCreate+0xa0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    27e8:	e8 0e       	add	r14, r24
    27ea:	f9 1e       	adc	r15, r25
    27ec:	fb 82       	std	Y+3, r15	; 0x03
    27ee:	ea 82       	std	Y+2, r14	; 0x02
				pxNewQueue->uxMessagesWaiting = 0;
    27f0:	1a 8e       	std	Y+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    27f2:	9d 83       	std	Y+5, r25	; 0x05
    27f4:	8c 83       	std	Y+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    27f6:	08 94       	sec
    27f8:	c1 08       	sbc	r12, r1
    27fa:	d1 08       	sbc	r13, r1
    27fc:	ca 9c       	mul	r12, r10
    27fe:	c0 01       	movw	r24, r0
    2800:	cb 9c       	mul	r12, r11
    2802:	90 0d       	add	r25, r0
    2804:	da 9c       	mul	r13, r10
    2806:	90 0d       	add	r25, r0
    2808:	11 24       	eor	r1, r1
    280a:	28 0f       	add	r18, r24
    280c:	39 1f       	adc	r19, r25
    280e:	3f 83       	std	Y+7, r19	; 0x07
    2810:	2e 83       	std	Y+6, r18	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    2812:	9b 8e       	std	Y+27, r9	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    2814:	8c 8e       	std	Y+28, r8	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    2816:	8f ef       	ldi	r24, 0xFF	; 255
    2818:	8d 8f       	std	Y+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    281a:	8e 8f       	std	Y+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    281c:	c8 01       	movw	r24, r16
    281e:	08 96       	adiw	r24, 0x08	; 8
    2820:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2824:	c8 01       	movw	r24, r16
    2826:	41 96       	adiw	r24, 0x11	; 17
    2828:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
    282c:	05 c0       	rjmp	.+10     	; 0x2838 <xQueueCreate+0xaa>
				return  pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    282e:	c8 01       	movw	r24, r16
    2830:	0e 94 ba 1b 	call	0x3774	; 0x3774 <vPortFree>
    2834:	c0 e0       	ldi	r28, 0x00	; 0
    2836:	d0 e0       	ldi	r29, 0x00	; 0
	}

	/* Will only reach here if we could not allocate enough memory or no memory
	was required. */
	return NULL;
}
    2838:	ce 01       	movw	r24, r28
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ff 90       	pop	r15
    2844:	ef 90       	pop	r14
    2846:	df 90       	pop	r13
    2848:	cf 90       	pop	r12
    284a:	bf 90       	pop	r11
    284c:	af 90       	pop	r10
    284e:	9f 90       	pop	r9
    2850:	8f 90       	pop	r8
    2852:	08 95       	ret

00002854 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2854:	80 91 9e 02 	lds	r24, 0x029E
    2858:	8f 5f       	subi	r24, 0xFF	; 255
    285a:	80 93 9e 02 	sts	0x029E, r24
}
    285e:	08 95       	ret

00002860 <xTaskGetTickCount>:
portTickType xTaskGetTickCount( void )
{
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portENTER_CRITICAL();
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    2866:	20 91 9c 02 	lds	r18, 0x029C
    286a:	30 91 9d 02 	lds	r19, 0x029D
	}
	portEXIT_CRITICAL();
    286e:	0f 90       	pop	r0
    2870:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    2872:	c9 01       	movw	r24, r18
    2874:	08 95       	ret

00002876 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
	return xTickCount;
    2876:	20 91 9c 02 	lds	r18, 0x029C
    287a:	30 91 9d 02 	lds	r19, 0x029D
}
    287e:	c9 01       	movw	r24, r18
    2880:	08 95       	ret

00002882 <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    2882:	80 91 a1 02 	lds	r24, 0x02A1
}
    2886:	08 95       	ret

00002888 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2888:	80 91 9e 02 	lds	r24, 0x029E
    288c:	88 23       	and	r24, r24
    288e:	51 f0       	breq	.+20     	; 0x28a4 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	80 93 9a 02 	sts	0x029A, r24
    2896:	08 95       	ret
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
	{
		--uxTopReadyPriority;
    2898:	80 91 9f 02 	lds	r24, 0x029F
    289c:	81 50       	subi	r24, 0x01	; 1
    289e:	80 93 9f 02 	sts	0x029F, r24
    28a2:	01 c0       	rjmp	.+2      	; 0x28a6 <vTaskSwitchContext+0x1e>

	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    28a4:	99 e0       	ldi	r25, 0x09	; 9
    28a6:	e0 91 9f 02 	lds	r30, 0x029F
    28aa:	e9 9f       	mul	r30, r25
    28ac:	f0 01       	movw	r30, r0
    28ae:	11 24       	eor	r1, r1
    28b0:	ea 55       	subi	r30, 0x5A	; 90
    28b2:	fd 4f       	sbci	r31, 0xFD	; 253
    28b4:	80 81       	ld	r24, Z
    28b6:	88 23       	and	r24, r24
    28b8:	79 f3       	breq	.-34     	; 0x2898 <vTaskSwitchContext+0x10>
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    28ba:	90 91 9f 02 	lds	r25, 0x029F
    28be:	89 e0       	ldi	r24, 0x09	; 9
    28c0:	98 9f       	mul	r25, r24
    28c2:	d0 01       	movw	r26, r0
    28c4:	11 24       	eor	r1, r1
    28c6:	aa 55       	subi	r26, 0x5A	; 90
    28c8:	bd 4f       	sbci	r27, 0xFD	; 253
    28ca:	11 96       	adiw	r26, 0x01	; 1
    28cc:	ed 91       	ld	r30, X+
    28ce:	fc 91       	ld	r31, X
    28d0:	12 97       	sbiw	r26, 0x02	; 2
    28d2:	02 80       	ldd	r0, Z+2	; 0x02
    28d4:	f3 81       	ldd	r31, Z+3	; 0x03
    28d6:	e0 2d       	mov	r30, r0
    28d8:	12 96       	adiw	r26, 0x02	; 2
    28da:	fc 93       	st	X, r31
    28dc:	ee 93       	st	-X, r30
    28de:	11 97       	sbiw	r26, 0x01	; 1
    28e0:	cd 01       	movw	r24, r26
    28e2:	03 96       	adiw	r24, 0x03	; 3
    28e4:	e8 17       	cp	r30, r24
    28e6:	f9 07       	cpc	r31, r25
    28e8:	31 f4       	brne	.+12     	; 0x28f6 <vTaskSwitchContext+0x6e>
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	12 96       	adiw	r26, 0x02	; 2
    28f0:	9c 93       	st	X, r25
    28f2:	8e 93       	st	-X, r24
    28f4:	11 97       	sbiw	r26, 0x01	; 1
    28f6:	11 96       	adiw	r26, 0x01	; 1
    28f8:	ed 91       	ld	r30, X+
    28fa:	fc 91       	ld	r31, X
    28fc:	12 97       	sbiw	r26, 0x02	; 2
    28fe:	86 81       	ldd	r24, Z+6	; 0x06
    2900:	97 81       	ldd	r25, Z+7	; 0x07
    2902:	90 93 99 02 	sts	0x0299, r25
    2906:	80 93 98 02 	sts	0x0298, r24
    290a:	08 95       	ret

0000290c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    290c:	fc 01       	movw	r30, r24
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    290e:	80 91 9b 02 	lds	r24, 0x029B
    2912:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    2914:	80 91 9c 02 	lds	r24, 0x029C
    2918:	90 91 9d 02 	lds	r25, 0x029D
    291c:	92 83       	std	Z+2, r25	; 0x02
    291e:	81 83       	std	Z+1, r24	; 0x01
}
    2920:	08 95       	ret

00002922 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    2922:	fc 01       	movw	r30, r24
    2924:	db 01       	movw	r26, r22
portBASE_TYPE xReturn;

	portENTER_CRITICAL();
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    292c:	90 91 9b 02 	lds	r25, 0x029B
    2930:	80 81       	ld	r24, Z
    2932:	98 17       	cp	r25, r24
    2934:	49 f0       	breq	.+18     	; 0x2948 <xTaskCheckForTimeOut+0x26>
    2936:	20 91 9c 02 	lds	r18, 0x029C
    293a:	30 91 9d 02 	lds	r19, 0x029D
    293e:	81 81       	ldd	r24, Z+1	; 0x01
    2940:	92 81       	ldd	r25, Z+2	; 0x02
    2942:	28 17       	cp	r18, r24
    2944:	39 07       	cpc	r19, r25
    2946:	18 f5       	brcc	.+70     	; 0x298e <xTaskCheckForTimeOut+0x6c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2948:	80 91 9c 02 	lds	r24, 0x029C
    294c:	90 91 9d 02 	lds	r25, 0x029D
    2950:	21 81       	ldd	r18, Z+1	; 0x01
    2952:	32 81       	ldd	r19, Z+2	; 0x02
    2954:	4d 91       	ld	r20, X+
    2956:	5c 91       	ld	r21, X
    2958:	11 97       	sbiw	r26, 0x01	; 1
    295a:	82 1b       	sub	r24, r18
    295c:	93 0b       	sbc	r25, r19
    295e:	84 17       	cp	r24, r20
    2960:	95 07       	cpc	r25, r21
    2962:	a8 f4       	brcc	.+42     	; 0x298e <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2964:	80 91 9c 02 	lds	r24, 0x029C
    2968:	90 91 9d 02 	lds	r25, 0x029D
    296c:	28 1b       	sub	r18, r24
    296e:	39 0b       	sbc	r19, r25
    2970:	24 0f       	add	r18, r20
    2972:	35 1f       	adc	r19, r21
    2974:	2d 93       	st	X+, r18
    2976:	3c 93       	st	X, r19
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2978:	80 91 9b 02 	lds	r24, 0x029B
    297c:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    297e:	80 91 9c 02 	lds	r24, 0x029C
    2982:	90 91 9d 02 	lds	r25, 0x029D
    2986:	92 83       	std	Z+2, r25	; 0x02
    2988:	81 83       	std	Z+1, r24	; 0x01
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	01 c0       	rjmp	.+2      	; 0x2990 <xTaskCheckForTimeOut+0x6e>
    298e:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	portEXIT_CRITICAL();
    2990:	0f 90       	pop	r0
    2992:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    2994:	08 95       	ret

00002996 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	80 93 9a 02 	sts	0x029A, r24
}
    299c:	08 95       	ret

0000299e <xTaskRemoveFromEventList>:
	#endif
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	fc 01       	movw	r30, r24
	it to the ready list.

	If an event is for a queue that is locked then this function will never
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    29a8:	80 81       	ld	r24, Z
    29aa:	88 23       	and	r24, r24
    29ac:	19 f4       	brne	.+6      	; 0x29b4 <xTaskRemoveFromEventList+0x16>
    29ae:	c0 e0       	ldi	r28, 0x00	; 0
    29b0:	d0 e0       	ldi	r29, 0x00	; 0
    29b2:	05 c0       	rjmp	.+10     	; 0x29be <xTaskRemoveFromEventList+0x20>
    29b4:	05 80       	ldd	r0, Z+5	; 0x05
    29b6:	f6 81       	ldd	r31, Z+6	; 0x06
    29b8:	e0 2d       	mov	r30, r0
    29ba:	c6 81       	ldd	r28, Z+6	; 0x06
    29bc:	d7 81       	ldd	r29, Z+7	; 0x07
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    29be:	8e 01       	movw	r16, r28
    29c0:	04 5f       	subi	r16, 0xF4	; 244
    29c2:	1f 4f       	sbci	r17, 0xFF	; 255
    29c4:	c8 01       	movw	r24, r16
    29c6:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    29ca:	80 91 9e 02 	lds	r24, 0x029E
    29ce:	88 23       	and	r24, r24
    29d0:	a1 f4       	brne	.+40     	; 0x29fa <xTaskRemoveFromEventList+0x5c>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    29d2:	8e 01       	movw	r16, r28
    29d4:	0e 5f       	subi	r16, 0xFE	; 254
    29d6:	1f 4f       	sbci	r17, 0xFF	; 255
    29d8:	c8 01       	movw	r24, r16
    29da:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    29de:	9e 89       	ldd	r25, Y+22	; 0x16
    29e0:	80 91 9f 02 	lds	r24, 0x029F
    29e4:	89 17       	cp	r24, r25
    29e6:	10 f4       	brcc	.+4      	; 0x29ec <xTaskRemoveFromEventList+0x4e>
    29e8:	90 93 9f 02 	sts	0x029F, r25
    29ec:	89 e0       	ldi	r24, 0x09	; 9
    29ee:	98 9f       	mul	r25, r24
    29f0:	c0 01       	movw	r24, r0
    29f2:	11 24       	eor	r1, r1
    29f4:	8a 55       	subi	r24, 0x5A	; 90
    29f6:	9d 4f       	sbci	r25, 0xFD	; 253
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    29fa:	80 ee       	ldi	r24, 0xE0	; 224
    29fc:	92 e0       	ldi	r25, 0x02	; 2
    29fe:	b8 01       	movw	r22, r16
    2a00:	0e 94 bf 10 	call	0x217e	; 0x217e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2a04:	e0 91 98 02 	lds	r30, 0x0298
    2a08:	f0 91 99 02 	lds	r31, 0x0299
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	9e 89       	ldd	r25, Y+22	; 0x16
    2a10:	86 89       	ldd	r24, Z+22	; 0x16
    2a12:	98 17       	cp	r25, r24
    2a14:	08 f0       	brcs	.+2      	; 0x2a18 <xTaskRemoveFromEventList+0x7a>
    2a16:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    2a18:	82 2f       	mov	r24, r18
    2a1a:	df 91       	pop	r29
    2a1c:	cf 91       	pop	r28
    2a1e:	1f 91       	pop	r17
    2a20:	0f 91       	pop	r16
    2a22:	08 95       	ret

00002a24 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
    2a24:	ff 92       	push	r15
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2a2e:	80 91 9e 02 	lds	r24, 0x029E
    2a32:	88 23       	and	r24, r24
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <vTaskIncrementTick+0x14>
    2a36:	61 c0       	rjmp	.+194    	; 0x2afa <vTaskIncrementTick+0xd6>
	{
		++xTickCount;
    2a38:	80 91 9c 02 	lds	r24, 0x029C
    2a3c:	90 91 9d 02 	lds	r25, 0x029D
    2a40:	01 96       	adiw	r24, 0x01	; 1
    2a42:	90 93 9d 02 	sts	0x029D, r25
    2a46:	80 93 9c 02 	sts	0x029C, r24
		if( xTickCount == ( portTickType ) 0 )
    2a4a:	80 91 9c 02 	lds	r24, 0x029C
    2a4e:	90 91 9d 02 	lds	r25, 0x029D
    2a52:	89 2b       	or	r24, r25
    2a54:	e9 f5       	brne	.+122    	; 0x2ad0 <vTaskIncrementTick+0xac>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
    2a56:	80 91 dc 02 	lds	r24, 0x02DC
    2a5a:	90 91 dd 02 	lds	r25, 0x02DD
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2a5e:	20 91 de 02 	lds	r18, 0x02DE
    2a62:	30 91 df 02 	lds	r19, 0x02DF
    2a66:	30 93 dd 02 	sts	0x02DD, r19
    2a6a:	20 93 dc 02 	sts	0x02DC, r18
			pxOverflowDelayedTaskList = pxTemp;
    2a6e:	90 93 df 02 	sts	0x02DF, r25
    2a72:	80 93 de 02 	sts	0x02DE, r24
			xNumOfOverflows++;
    2a76:	80 91 9b 02 	lds	r24, 0x029B
    2a7a:	8f 5f       	subi	r24, 0xFF	; 255
    2a7c:	80 93 9b 02 	sts	0x029B, r24
    2a80:	27 c0       	rjmp	.+78     	; 0x2ad0 <vTaskIncrementTick+0xac>
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2a82:	20 91 9c 02 	lds	r18, 0x029C
    2a86:	30 91 9d 02 	lds	r19, 0x029D
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8e:	28 17       	cp	r18, r24
    2a90:	39 07       	cpc	r19, r25
    2a92:	c0 f1       	brcs	.+112    	; 0x2b04 <vTaskIncrementTick+0xe0>
    2a94:	8e 01       	movw	r16, r28
    2a96:	0e 5f       	subi	r16, 0xFE	; 254
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	c8 01       	movw	r24, r16
    2a9c:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
    2aa0:	8c 89       	ldd	r24, Y+20	; 0x14
    2aa2:	9d 89       	ldd	r25, Y+21	; 0x15
    2aa4:	89 2b       	or	r24, r25
    2aa6:	21 f0       	breq	.+8      	; 0x2ab0 <vTaskIncrementTick+0x8c>
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	0c 96       	adiw	r24, 0x0c	; 12
    2aac:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
    2ab0:	9e 89       	ldd	r25, Y+22	; 0x16
    2ab2:	80 91 9f 02 	lds	r24, 0x029F
    2ab6:	89 17       	cp	r24, r25
    2ab8:	10 f4       	brcc	.+4      	; 0x2abe <vTaskIncrementTick+0x9a>
    2aba:	90 93 9f 02 	sts	0x029F, r25
    2abe:	9f 9d       	mul	r25, r15
    2ac0:	c0 01       	movw	r24, r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	8a 55       	subi	r24, 0x5A	; 90
    2ac6:	9d 4f       	sbci	r25, 0xFD	; 253
    2ac8:	b8 01       	movw	r22, r16
    2aca:	0e 94 bf 10 	call	0x217e	; 0x217e <vListInsertEnd>
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <vTaskIncrementTick+0xb0>
    2ad0:	89 e0       	ldi	r24, 0x09	; 9
    2ad2:	f8 2e       	mov	r15, r24
    2ad4:	e0 91 dc 02 	lds	r30, 0x02DC
    2ad8:	f0 91 dd 02 	lds	r31, 0x02DD
    2adc:	80 81       	ld	r24, Z
    2ade:	88 23       	and	r24, r24
    2ae0:	89 f0       	breq	.+34     	; 0x2b04 <vTaskIncrementTick+0xe0>
    2ae2:	e0 91 dc 02 	lds	r30, 0x02DC
    2ae6:	f0 91 dd 02 	lds	r31, 0x02DD
    2aea:	05 80       	ldd	r0, Z+5	; 0x05
    2aec:	f6 81       	ldd	r31, Z+6	; 0x06
    2aee:	e0 2d       	mov	r30, r0
    2af0:	c6 81       	ldd	r28, Z+6	; 0x06
    2af2:	d7 81       	ldd	r29, Z+7	; 0x07
    2af4:	20 97       	sbiw	r28, 0x00	; 0
    2af6:	29 f6       	brne	.-118    	; 0x2a82 <vTaskIncrementTick+0x5e>
    2af8:	05 c0       	rjmp	.+10     	; 0x2b04 <vTaskIncrementTick+0xe0>
	}
	else
	{
		++uxMissedTicks;
    2afa:	80 91 a0 02 	lds	r24, 0x02A0
    2afe:	8f 5f       	subi	r24, 0xFF	; 255
    2b00:	80 93 a0 02 	sts	0x02A0, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	1f 91       	pop	r17
    2b0a:	0f 91       	pop	r16
    2b0c:	ff 90       	pop	r15
    2b0e:	08 95       	ret

00002b10 <vTaskPlaceOnEventList>:
	vWriteTraceToBuffer();
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2b10:	0f 93       	push	r16
    2b12:	1f 93       	push	r17
    2b14:	8b 01       	movw	r16, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    2b16:	60 91 98 02 	lds	r22, 0x0298
    2b1a:	70 91 99 02 	lds	r23, 0x0299
    2b1e:	64 5f       	subi	r22, 0xF4	; 244
    2b20:	7f 4f       	sbci	r23, 0xFF	; 255
    2b22:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2b26:	80 91 98 02 	lds	r24, 0x0298
    2b2a:	90 91 99 02 	lds	r25, 0x0299
    2b2e:	02 96       	adiw	r24, 0x02	; 2
    2b30:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2b34:	80 91 9c 02 	lds	r24, 0x029C
    2b38:	90 91 9d 02 	lds	r25, 0x029D
    2b3c:	80 0f       	add	r24, r16
    2b3e:	91 1f       	adc	r25, r17

			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2b40:	e0 91 98 02 	lds	r30, 0x0298
    2b44:	f0 91 99 02 	lds	r31, 0x0299
    2b48:	93 83       	std	Z+3, r25	; 0x03
    2b4a:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xTickCount )
    2b4c:	20 91 9c 02 	lds	r18, 0x029C
    2b50:	30 91 9d 02 	lds	r19, 0x029D
    2b54:	82 17       	cp	r24, r18
    2b56:	93 07       	cpc	r25, r19
    2b58:	28 f4       	brcc	.+10     	; 0x2b64 <vTaskPlaceOnEventList+0x54>
			{
				/* Wake time has overflowed.  Place this item in the overflow list. */
				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2b5a:	80 91 de 02 	lds	r24, 0x02DE
    2b5e:	90 91 df 02 	lds	r25, 0x02DF
    2b62:	04 c0       	rjmp	.+8      	; 0x2b6c <vTaskPlaceOnEventList+0x5c>
			}
			else
			{
				/* The wake time has not overflowed, so we can use the current block list. */
				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2b64:	80 91 dc 02 	lds	r24, 0x02DC
    2b68:	90 91 dd 02 	lds	r25, 0x02DD
    2b6c:	60 91 98 02 	lds	r22, 0x0298
    2b70:	70 91 99 02 	lds	r23, 0x0299
    2b74:	6e 5f       	subi	r22, 0xFE	; 254
    2b76:	7f 4f       	sbci	r23, 0xFF	; 255
    2b78:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vListInsert>
			}
	}
	#endif
}
    2b7c:	1f 91       	pop	r17
    2b7e:	0f 91       	pop	r16
    2b80:	08 95       	ret

00002b82 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    2b82:	cf 92       	push	r12
    2b84:	df 92       	push	r13
    2b86:	ff 92       	push	r15
    2b88:	0f 93       	push	r16
    2b8a:	1f 93       	push	r17
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	0f 92       	push	r0
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	portENTER_CRITICAL();
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    2b9c:	80 91 9e 02 	lds	r24, 0x029E
    2ba0:	81 50       	subi	r24, 0x01	; 1
    2ba2:	80 93 9e 02 	sts	0x029E, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2ba6:	80 91 9e 02 	lds	r24, 0x029E
    2baa:	88 23       	and	r24, r24
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <xTaskResumeAll+0x2e>
    2bae:	5b c0       	rjmp	.+182    	; 0x2c66 <xTaskResumeAll+0xe4>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
    2bb0:	80 91 a1 02 	lds	r24, 0x02A1
    2bb4:	88 23       	and	r24, r24
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <xTaskResumeAll+0x38>
    2bb8:	56 c0       	rjmp	.+172    	; 0x2c66 <xTaskResumeAll+0xe4>
    2bba:	19 82       	std	Y+1, r1	; 0x01
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    2bbc:	99 e0       	ldi	r25, 0x09	; 9
    2bbe:	f9 2e       	mov	r15, r25
    2bc0:	27 c0       	rjmp	.+78     	; 0x2c10 <xTaskResumeAll+0x8e>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
    2bc2:	c6 01       	movw	r24, r12
    2bc4:	0c 96       	adiw	r24, 0x0c	; 12
    2bc6:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    2bca:	86 01       	movw	r16, r12
    2bcc:	0e 5f       	subi	r16, 0xFE	; 254
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	c8 01       	movw	r24, r16
    2bd2:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2bd6:	d6 01       	movw	r26, r12
    2bd8:	56 96       	adiw	r26, 0x16	; 22
    2bda:	9c 91       	ld	r25, X
    2bdc:	80 91 9f 02 	lds	r24, 0x029F
    2be0:	89 17       	cp	r24, r25
    2be2:	10 f4       	brcc	.+4      	; 0x2be8 <xTaskResumeAll+0x66>
    2be4:	90 93 9f 02 	sts	0x029F, r25
    2be8:	9f 9d       	mul	r25, r15
    2bea:	c0 01       	movw	r24, r0
    2bec:	11 24       	eor	r1, r1
    2bee:	8a 55       	subi	r24, 0x5A	; 90
    2bf0:	9d 4f       	sbci	r25, 0xFD	; 253
    2bf2:	b8 01       	movw	r22, r16
    2bf4:	0e 94 bf 10 	call	0x217e	; 0x217e <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2bf8:	e0 91 98 02 	lds	r30, 0x0298
    2bfc:	f0 91 99 02 	lds	r31, 0x0299
    2c00:	d6 01       	movw	r26, r12
    2c02:	56 96       	adiw	r26, 0x16	; 22
    2c04:	9c 91       	ld	r25, X
    2c06:	86 89       	ldd	r24, Z+22	; 0x16
    2c08:	98 17       	cp	r25, r24
    2c0a:	10 f0       	brcs	.+4      	; 0x2c10 <xTaskResumeAll+0x8e>
    2c0c:	b1 e0       	ldi	r27, 0x01	; 1
    2c0e:	b9 83       	std	Y+1, r27	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
    2c10:	80 91 e0 02 	lds	r24, 0x02E0
    2c14:	88 23       	and	r24, r24
    2c16:	49 f0       	breq	.+18     	; 0x2c2a <xTaskResumeAll+0xa8>
    2c18:	e0 91 e5 02 	lds	r30, 0x02E5
    2c1c:	f0 91 e6 02 	lds	r31, 0x02E6
    2c20:	c6 80       	ldd	r12, Z+6	; 0x06
    2c22:	d7 80       	ldd	r13, Z+7	; 0x07
    2c24:	c1 14       	cp	r12, r1
    2c26:	d1 04       	cpc	r13, r1
    2c28:	61 f6       	brne	.-104    	; 0x2bc2 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    2c2a:	80 91 a0 02 	lds	r24, 0x02A0
    2c2e:	88 23       	and	r24, r24
    2c30:	41 f4       	brne	.+16     	; 0x2c42 <xTaskResumeAll+0xc0>
    2c32:	0c c0       	rjmp	.+24     	; 0x2c4c <xTaskResumeAll+0xca>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
    2c34:	0e 94 12 15 	call	0x2a24	; 0x2a24 <vTaskIncrementTick>
						--uxMissedTicks;
    2c38:	80 91 a0 02 	lds	r24, 0x02A0
    2c3c:	81 50       	subi	r24, 0x01	; 1
    2c3e:	80 93 a0 02 	sts	0x02A0, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    2c42:	80 91 a0 02 	lds	r24, 0x02A0
    2c46:	88 23       	and	r24, r24
    2c48:	a9 f7       	brne	.-22     	; 0x2c34 <xTaskResumeAll+0xb2>
    2c4a:	07 c0       	rjmp	.+14     	; 0x2c5a <xTaskResumeAll+0xd8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4e:	e1 30       	cpi	r30, 0x01	; 1
    2c50:	21 f0       	breq	.+8      	; 0x2c5a <xTaskResumeAll+0xd8>
    2c52:	80 91 9a 02 	lds	r24, 0x029A
    2c56:	81 30       	cpi	r24, 0x01	; 1
    2c58:	31 f4       	brne	.+12     	; 0x2c66 <xTaskResumeAll+0xe4>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    2c5a:	10 92 9a 02 	sts	0x029A, r1
					portYIELD_WITHIN_API();
    2c5e:	0e 94 97 19 	call	0x332e	; 0x332e <vPortYield>
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	01 c0       	rjmp	.+2      	; 0x2c68 <xTaskResumeAll+0xe6>
    2c66:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	portEXIT_CRITICAL();
    2c68:	0f 90       	pop	r0
    2c6a:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	ff 90       	pop	r15
    2c78:	df 90       	pop	r13
    2c7a:	cf 90       	pop	r12
    2c7c:	08 95       	ret

00002c7e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    2c7e:	0f 93       	push	r16
    2c80:	1f 93       	push	r17
    2c82:	9c 01       	movw	r18, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	a1 f1       	breq	.+104    	; 0x2cf0 <vTaskDelay+0x72>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2c88:	80 91 9e 02 	lds	r24, 0x029E
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	80 93 9e 02 	sts	0x029E, r24
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2c92:	00 91 9c 02 	lds	r16, 0x029C
    2c96:	10 91 9d 02 	lds	r17, 0x029D
    2c9a:	02 0f       	add	r16, r18
    2c9c:	13 1f       	adc	r17, r19

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2c9e:	80 91 98 02 	lds	r24, 0x0298
    2ca2:	90 91 99 02 	lds	r25, 0x0299
    2ca6:	02 96       	adiw	r24, 0x02	; 2
    2ca8:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2cac:	e0 91 98 02 	lds	r30, 0x0298
    2cb0:	f0 91 99 02 	lds	r31, 0x0299
    2cb4:	13 83       	std	Z+3, r17	; 0x03
    2cb6:	02 83       	std	Z+2, r16	; 0x02

				if( xTimeToWake < xTickCount )
    2cb8:	80 91 9c 02 	lds	r24, 0x029C
    2cbc:	90 91 9d 02 	lds	r25, 0x029D
    2cc0:	08 17       	cp	r16, r24
    2cc2:	19 07       	cpc	r17, r25
    2cc4:	28 f4       	brcc	.+10     	; 0x2cd0 <vTaskDelay+0x52>
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2cc6:	80 91 de 02 	lds	r24, 0x02DE
    2cca:	90 91 df 02 	lds	r25, 0x02DF
    2cce:	04 c0       	rjmp	.+8      	; 0x2cd8 <vTaskDelay+0x5a>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2cd0:	80 91 dc 02 	lds	r24, 0x02DC
    2cd4:	90 91 dd 02 	lds	r25, 0x02DD
    2cd8:	60 91 98 02 	lds	r22, 0x0298
    2cdc:	70 91 99 02 	lds	r23, 0x0299
    2ce0:	6e 5f       	subi	r22, 0xFE	; 254
    2ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce4:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vListInsert>
				}
			}
			xAlreadyYielded = xTaskResumeAll();
    2ce8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    2cec:	88 23       	and	r24, r24
    2cee:	11 f4       	brne	.+4      	; 0x2cf4 <vTaskDelay+0x76>
		{
			portYIELD_WITHIN_API();
    2cf0:	0e 94 97 19 	call	0x332e	; 0x332e <vPortYield>
		}
	}
    2cf4:	1f 91       	pop	r17
    2cf6:	0f 91       	pop	r16
    2cf8:	08 95       	ret

00002cfa <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	fc 01       	movw	r30, r24
    2d00:	eb 01       	movw	r28, r22

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2d02:	80 91 9e 02 	lds	r24, 0x029E
    2d06:	8f 5f       	subi	r24, 0xFF	; 255
    2d08:	80 93 9e 02 	sts	0x029E, r24
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    2d0c:	20 81       	ld	r18, Z
    2d0e:	31 81       	ldd	r19, Z+1	; 0x01
    2d10:	c2 0f       	add	r28, r18
    2d12:	d3 1f       	adc	r29, r19

			if( xTickCount < *pxPreviousWakeTime )
    2d14:	80 91 9c 02 	lds	r24, 0x029C
    2d18:	90 91 9d 02 	lds	r25, 0x029D
    2d1c:	82 17       	cp	r24, r18
    2d1e:	93 07       	cpc	r25, r19
    2d20:	28 f4       	brcc	.+10     	; 0x2d2c <vTaskDelayUntil+0x32>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    2d22:	c2 17       	cp	r28, r18
    2d24:	d3 07       	cpc	r29, r19
    2d26:	28 f0       	brcs	.+10     	; 0x2d32 <vTaskDelayUntil+0x38>
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	0c c0       	rjmp	.+24     	; 0x2d44 <vTaskDelayUntil+0x4a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    2d2c:	c2 17       	cp	r28, r18
    2d2e:	d3 07       	cpc	r29, r19
    2d30:	40 f0       	brcs	.+16     	; 0x2d42 <vTaskDelayUntil+0x48>
    2d32:	80 91 9c 02 	lds	r24, 0x029C
    2d36:	90 91 9d 02 	lds	r25, 0x029D
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	8c 17       	cp	r24, r28
    2d3e:	9d 07       	cpc	r25, r29
    2d40:	08 f4       	brcc	.+2      	; 0x2d44 <vTaskDelayUntil+0x4a>
    2d42:	21 e0       	ldi	r18, 0x01	; 1
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2d44:	d1 83       	std	Z+1, r29	; 0x01
    2d46:	c0 83       	st	Z, r28

			if( xShouldDelay )
    2d48:	22 23       	and	r18, r18
    2d4a:	29 f1       	breq	.+74     	; 0x2d96 <vTaskDelayUntil+0x9c>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2d4c:	80 91 98 02 	lds	r24, 0x0298
    2d50:	90 91 99 02 	lds	r25, 0x0299
    2d54:	02 96       	adiw	r24, 0x02	; 2
    2d56:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2d5a:	e0 91 98 02 	lds	r30, 0x0298
    2d5e:	f0 91 99 02 	lds	r31, 0x0299
    2d62:	d3 83       	std	Z+3, r29	; 0x03
    2d64:	c2 83       	std	Z+2, r28	; 0x02

				if( xTimeToWake < xTickCount )
    2d66:	80 91 9c 02 	lds	r24, 0x029C
    2d6a:	90 91 9d 02 	lds	r25, 0x029D
    2d6e:	c8 17       	cp	r28, r24
    2d70:	d9 07       	cpc	r29, r25
    2d72:	28 f4       	brcc	.+10     	; 0x2d7e <vTaskDelayUntil+0x84>
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2d74:	80 91 de 02 	lds	r24, 0x02DE
    2d78:	90 91 df 02 	lds	r25, 0x02DF
    2d7c:	04 c0       	rjmp	.+8      	; 0x2d86 <vTaskDelayUntil+0x8c>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2d7e:	80 91 dc 02 	lds	r24, 0x02DC
    2d82:	90 91 dd 02 	lds	r25, 0x02DD
    2d86:	60 91 98 02 	lds	r22, 0x0298
    2d8a:	70 91 99 02 	lds	r23, 0x0299
    2d8e:	6e 5f       	subi	r22, 0xFE	; 254
    2d90:	7f 4f       	sbci	r23, 0xFF	; 255
    2d92:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vListInsert>
				}
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    2d96:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    2d9a:	88 23       	and	r24, r24
    2d9c:	11 f4       	brne	.+4      	; 0x2da2 <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
    2d9e:	0e 94 97 19 	call	0x332e	; 0x332e <vPortYield>
		}
	}
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	08 95       	ret

00002da8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    2da8:	ef 92       	push	r14
    2daa:	ff 92       	push	r15
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		portENTER_CRITICAL();
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    2dbc:	80 91 98 02 	lds	r24, 0x0298
    2dc0:	90 91 99 02 	lds	r25, 0x0299
    2dc4:	08 17       	cp	r16, r24
    2dc6:	19 07       	cpc	r17, r25
    2dc8:	19 f4       	brne	.+6      	; 0x2dd0 <vTaskDelete+0x28>
    2dca:	00 e0       	ldi	r16, 0x00	; 0
    2dcc:	10 e0       	ldi	r17, 0x00	; 0
    2dce:	03 c0       	rjmp	.+6      	; 0x2dd6 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    2dd0:	01 15       	cp	r16, r1
    2dd2:	11 05       	cpc	r17, r1
    2dd4:	29 f4       	brne	.+10     	; 0x2de0 <vTaskDelete+0x38>
    2dd6:	c0 91 98 02 	lds	r28, 0x0298
    2dda:	d0 91 99 02 	lds	r29, 0x0299
    2dde:	01 c0       	rjmp	.+2      	; 0x2de2 <vTaskDelete+0x3a>
    2de0:	e8 01       	movw	r28, r16

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2de2:	22 e0       	ldi	r18, 0x02	; 2
    2de4:	e2 2e       	mov	r14, r18
    2de6:	f1 2c       	mov	r15, r1
    2de8:	ec 0e       	add	r14, r28
    2dea:	fd 1e       	adc	r15, r29
    2dec:	c7 01       	movw	r24, r14
    2dee:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
    2df2:	8c 89       	ldd	r24, Y+20	; 0x14
    2df4:	9d 89       	ldd	r25, Y+21	; 0x15
    2df6:	89 2b       	or	r24, r25
    2df8:	21 f0       	breq	.+8      	; 0x2e02 <vTaskDelete+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	0c 96       	adiw	r24, 0x0c	; 12
    2dfe:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2e02:	89 ee       	ldi	r24, 0xE9	; 233
    2e04:	92 e0       	ldi	r25, 0x02	; 2
    2e06:	b7 01       	movw	r22, r14
    2e08:	0e 94 bf 10 	call	0x217e	; 0x217e <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2e0c:	80 91 a3 02 	lds	r24, 0x02A3
    2e10:	8f 5f       	subi	r24, 0xFF	; 255
    2e12:	80 93 a3 02 	sts	0x02A3, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2e16:	80 91 a4 02 	lds	r24, 0x02A4
    2e1a:	8f 5f       	subi	r24, 0xFF	; 255
    2e1c:	80 93 a4 02 	sts	0x02A4, r24

			traceTASK_DELETE( pxTCB );
		}
		portEXIT_CRITICAL();
    2e20:	0f 90       	pop	r0
    2e22:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    2e24:	80 91 a2 02 	lds	r24, 0x02A2
    2e28:	88 23       	and	r24, r24
    2e2a:	21 f0       	breq	.+8      	; 0x2e34 <vTaskDelete+0x8c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    2e2c:	01 2b       	or	r16, r17
    2e2e:	11 f4       	brne	.+4      	; 0x2e34 <vTaskDelete+0x8c>
			{
				portYIELD_WITHIN_API();
    2e30:	0e 94 97 19 	call	0x332e	; 0x332e <vPortYield>
			}
		}
	}
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	ff 90       	pop	r15
    2e3e:	ef 90       	pop	r14
    2e40:	08 95       	ret

00002e42 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    2e42:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    2e44:	10 92 a2 02 	sts	0x02A2, r1
	vPortEndScheduler();
    2e48:	0e 94 38 19 	call	0x3270	; 0x3270 <vPortEndScheduler>
}
    2e4c:	08 95       	ret

00002e4e <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
    2e54:	80 91 a3 02 	lds	r24, 0x02A3
    2e58:	88 23       	and	r24, r24
    2e5a:	91 f1       	breq	.+100    	; 0x2ec0 <prvIdleTask+0x72>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2e5c:	80 91 9e 02 	lds	r24, 0x029E
    2e60:	8f 5f       	subi	r24, 0xFF	; 255
    2e62:	80 93 9e 02 	sts	0x029E, r24
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2e66:	10 91 e9 02 	lds	r17, 0x02E9
			xTaskResumeAll();
    2e6a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskResumeAll>

			if( !xListIsEmpty )
    2e6e:	11 23       	and	r17, r17
    2e70:	39 f1       	breq	.+78     	; 0x2ec0 <prvIdleTask+0x72>
			{
				tskTCB *pxTCB;

				portENTER_CRITICAL();
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    2e78:	80 91 e9 02 	lds	r24, 0x02E9
    2e7c:	88 23       	and	r24, r24
    2e7e:	19 f4       	brne	.+6      	; 0x2e86 <prvIdleTask+0x38>
    2e80:	c0 e0       	ldi	r28, 0x00	; 0
    2e82:	d0 e0       	ldi	r29, 0x00	; 0
    2e84:	06 c0       	rjmp	.+12     	; 0x2e92 <prvIdleTask+0x44>
    2e86:	e0 91 ee 02 	lds	r30, 0x02EE
    2e8a:	f0 91 ef 02 	lds	r31, 0x02EF
    2e8e:	c6 81       	ldd	r28, Z+6	; 0x06
    2e90:	d7 81       	ldd	r29, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    2e92:	ce 01       	movw	r24, r28
    2e94:	02 96       	adiw	r24, 0x02	; 2
    2e96:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
					--uxCurrentNumberOfTasks;
    2e9a:	80 91 a1 02 	lds	r24, 0x02A1
    2e9e:	81 50       	subi	r24, 0x01	; 1
    2ea0:	80 93 a1 02 	sts	0x02A1, r24
					--uxTasksDeleted;
    2ea4:	80 91 a3 02 	lds	r24, 0x02A3
    2ea8:	81 50       	subi	r24, 0x01	; 1
    2eaa:	80 93 a3 02 	sts	0x02A3, r24
				}
				portEXIT_CRITICAL();
    2eae:	0f 90       	pop	r0
    2eb0:	0f be       	out	0x3f, r0	; 63

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    2eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb6:	0e 94 ba 1b 	call	0x3774	; 0x3774 <vPortFree>
		vPortFree( pxTCB );
    2eba:	ce 01       	movw	r24, r28
    2ebc:	0e 94 ba 1b 	call	0x3774	; 0x3774 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    2ec0:	80 91 a6 02 	lds	r24, 0x02A6
    2ec4:	82 30       	cpi	r24, 0x02	; 2
    2ec6:	30 f2       	brcs	.-116    	; 0x2e54 <prvIdleTask+0x6>
			{
				taskYIELD();
    2ec8:	0e 94 97 19 	call	0x332e	; 0x332e <vPortYield>
    2ecc:	c3 cf       	rjmp	.-122    	; 0x2e54 <prvIdleTask+0x6>

00002ece <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    2ece:	2f 92       	push	r2
    2ed0:	3f 92       	push	r3
    2ed2:	5f 92       	push	r5
    2ed4:	6f 92       	push	r6
    2ed6:	7f 92       	push	r7
    2ed8:	8f 92       	push	r8
    2eda:	9f 92       	push	r9
    2edc:	af 92       	push	r10
    2ede:	bf 92       	push	r11
    2ee0:	cf 92       	push	r12
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <xTaskGenericCreate+0x24>
    2ef2:	00 d0       	rcall	.+0      	; 0x2ef4 <xTaskGenericCreate+0x26>
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	89 83       	std	Y+1, r24	; 0x01
    2efc:	4b 01       	movw	r8, r22
    2efe:	5a 01       	movw	r10, r20
    2f00:	19 01       	movw	r2, r18
    2f02:	50 2e       	mov	r5, r16
    2f04:	37 01       	movw	r6, r14
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    2f06:	81 e2       	ldi	r24, 0x21	; 33
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	0e 94 ca 1b 	call	0x3794	; 0x3794 <pvPortMalloc>
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
    2f10:	9c 83       	std	Y+4, r25	; 0x04

	if( pxNewTCB != NULL )
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	9c 81       	ldd	r25, Y+4	; 0x04
    2f16:	89 2b       	or	r24, r25
    2f18:	89 f0       	breq	.+34     	; 0x2f3c <xTaskGenericCreate+0x6e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2f1a:	c1 14       	cp	r12, r1
    2f1c:	d1 04       	cpc	r13, r1
    2f1e:	21 f4       	brne	.+8      	; 0x2f28 <xTaskGenericCreate+0x5a>
    2f20:	c5 01       	movw	r24, r10
    2f22:	0e 94 ca 1b 	call	0x3794	; 0x3794 <pvPortMalloc>
    2f26:	6c 01       	movw	r12, r24
    2f28:	eb 81       	ldd	r30, Y+3	; 0x03
    2f2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f2c:	d0 8e       	std	Z+24, r13	; 0x18
    2f2e:	c7 8a       	std	Z+23, r12	; 0x17

		if( pxNewTCB->pxStack == NULL )
    2f30:	c1 14       	cp	r12, r1
    2f32:	d1 04       	cpc	r13, r1
    2f34:	29 f4       	brne	.+10     	; 0x2f40 <xTaskGenericCreate+0x72>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2f36:	cf 01       	movw	r24, r30
    2f38:	0e 94 ba 1b 	call	0x3774	; 0x3774 <vPortFree>
    2f3c:	8f ef       	ldi	r24, 0xFF	; 255
    2f3e:	d5 c0       	rjmp	.+426    	; 0x30ea <xTaskGenericCreate+0x21c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
    2f40:	c6 01       	movw	r24, r12
    2f42:	65 ea       	ldi	r22, 0xA5	; 165
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	a5 01       	movw	r20, r10
    2f48:	0e 94 71 31 	call	0x62e2	; 0x62e2 <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    2f4c:	08 94       	sec
    2f4e:	a1 08       	sbc	r10, r1
    2f50:	b1 08       	sbc	r11, r1
    2f52:	eb 81       	ldd	r30, Y+3	; 0x03
    2f54:	fc 81       	ldd	r31, Y+4	; 0x04
    2f56:	e7 88       	ldd	r14, Z+23	; 0x17
    2f58:	f0 8c       	ldd	r15, Z+24	; 0x18
    2f5a:	ea 0c       	add	r14, r10
    2f5c:	fb 1c       	adc	r15, r11
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    2f5e:	cf 01       	movw	r24, r30
    2f60:	49 96       	adiw	r24, 0x19	; 25
    2f62:	b4 01       	movw	r22, r8
    2f64:	48 e0       	ldi	r20, 0x08	; 8
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	0e 94 78 31 	call	0x62f0	; 0x62f0 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    2f6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f70:	10 a2       	std	Z+32, r1	; 0x20
    2f72:	05 2d       	mov	r16, r5
    2f74:	f3 e0       	ldi	r31, 0x03	; 3
    2f76:	f5 15       	cp	r31, r5
    2f78:	08 f4       	brcc	.+2      	; 0x2f7c <xTaskGenericCreate+0xae>
    2f7a:	03 e0       	ldi	r16, 0x03	; 3
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - 1;
	}

	pxTCB->uxPriority = uxPriority;
    2f7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f80:	06 8b       	std	Z+22, r16	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2f82:	42 e0       	ldi	r20, 0x02	; 2
    2f84:	c4 2e       	mov	r12, r20
    2f86:	d1 2c       	mov	r13, r1
    2f88:	ce 0e       	add	r12, r30
    2f8a:	df 1e       	adc	r13, r31
    2f8c:	c6 01       	movw	r24, r12
    2f8e:	0e 94 bb 10 	call	0x2176	; 0x2176 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	9c 81       	ldd	r25, Y+4	; 0x04
    2f96:	0c 96       	adiw	r24, 0x0c	; 12
    2f98:	0e 94 bb 10 	call	0x2176	; 0x2176 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	91 87       	std	Z+9, r25	; 0x09
    2fa4:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2fa6:	84 e0       	ldi	r24, 0x04	; 4
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	80 1b       	sub	r24, r16
    2fac:	91 09       	sbc	r25, r1
    2fae:	95 87       	std	Z+13, r25	; 0x0d
    2fb0:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2fb2:	f3 8b       	std	Z+19, r31	; 0x13
    2fb4:	e2 8b       	std	Z+18, r30	; 0x12
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2fb6:	c7 01       	movw	r24, r14
    2fb8:	69 81       	ldd	r22, Y+1	; 0x01
    2fba:	7a 81       	ldd	r23, Y+2	; 0x02
    2fbc:	a1 01       	movw	r20, r2
    2fbe:	0e 94 b6 18 	call	0x316c	; 0x316c <pxPortInitialiseStack>
    2fc2:	eb 81       	ldd	r30, Y+3	; 0x03
    2fc4:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
		}
		#endif

		if( ( void * ) pxCreatedTask != NULL )
    2fca:	61 14       	cp	r6, r1
    2fcc:	71 04       	cpc	r7, r1
    2fce:	21 f0       	breq	.+8      	; 0x2fd8 <xTaskGenericCreate+0x10a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    2fd0:	cf 01       	movw	r24, r30
    2fd2:	f3 01       	movw	r30, r6
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		portENTER_CRITICAL();
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    2fde:	80 91 a1 02 	lds	r24, 0x02A1
    2fe2:	8f 5f       	subi	r24, 0xFF	; 255
    2fe4:	80 93 a1 02 	sts	0x02A1, r24
			if( pxCurrentTCB == NULL )
    2fe8:	80 91 98 02 	lds	r24, 0x0298
    2fec:	90 91 99 02 	lds	r25, 0x0299
    2ff0:	89 2b       	or	r24, r25
    2ff2:	b9 f5       	brne	.+110    	; 0x3062 <xTaskGenericCreate+0x194>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2ff4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff8:	f0 93 99 02 	sts	0x0299, r31
    2ffc:	e0 93 98 02 	sts	0x0298, r30

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3000:	80 91 a1 02 	lds	r24, 0x02A1
    3004:	81 30       	cpi	r24, 0x01	; 1
    3006:	f1 f5       	brne	.+124    	; 0x3084 <xTaskGenericCreate+0x1b6>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    3008:	86 ea       	ldi	r24, 0xA6	; 166
    300a:	92 e0       	ldi	r25, 0x02	; 2
    300c:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
    3010:	8f ea       	ldi	r24, 0xAF	; 175
    3012:	92 e0       	ldi	r25, 0x02	; 2
    3014:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
    3018:	88 eb       	ldi	r24, 0xB8	; 184
    301a:	92 e0       	ldi	r25, 0x02	; 2
    301c:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
    3020:	81 ec       	ldi	r24, 0xC1	; 193
    3022:	92 e0       	ldi	r25, 0x02	; 2
    3024:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    3028:	3a ec       	ldi	r19, 0xCA	; 202
    302a:	e3 2e       	mov	r14, r19
    302c:	32 e0       	ldi	r19, 0x02	; 2
    302e:	f3 2e       	mov	r15, r19
    3030:	c7 01       	movw	r24, r14
    3032:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    3036:	03 ed       	ldi	r16, 0xD3	; 211
    3038:	12 e0       	ldi	r17, 0x02	; 2
    303a:	c8 01       	movw	r24, r16
    303c:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    3040:	80 ee       	ldi	r24, 0xE0	; 224
    3042:	92 e0       	ldi	r25, 0x02	; 2
    3044:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    3048:	89 ee       	ldi	r24, 0xE9	; 233
    304a:	92 e0       	ldi	r25, 0x02	; 2
    304c:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3050:	f0 92 dd 02 	sts	0x02DD, r15
    3054:	e0 92 dc 02 	sts	0x02DC, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3058:	10 93 df 02 	sts	0x02DF, r17
    305c:	00 93 de 02 	sts	0x02DE, r16
    3060:	11 c0       	rjmp	.+34     	; 0x3084 <xTaskGenericCreate+0x1b6>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    3062:	80 91 a2 02 	lds	r24, 0x02A2
    3066:	88 23       	and	r24, r24
    3068:	69 f4       	brne	.+26     	; 0x3084 <xTaskGenericCreate+0x1b6>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    306a:	e0 91 98 02 	lds	r30, 0x0298
    306e:	f0 91 99 02 	lds	r31, 0x0299
    3072:	86 89       	ldd	r24, Z+22	; 0x16
    3074:	58 16       	cp	r5, r24
    3076:	30 f0       	brcs	.+12     	; 0x3084 <xTaskGenericCreate+0x1b6>
					{
						pxCurrentTCB = pxNewTCB;
    3078:	8b 81       	ldd	r24, Y+3	; 0x03
    307a:	9c 81       	ldd	r25, Y+4	; 0x04
    307c:	90 93 99 02 	sts	0x0299, r25
    3080:	80 93 98 02 	sts	0x0298, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3084:	eb 81       	ldd	r30, Y+3	; 0x03
    3086:	fc 81       	ldd	r31, Y+4	; 0x04
    3088:	96 89       	ldd	r25, Z+22	; 0x16
    308a:	80 91 a5 02 	lds	r24, 0x02A5
    308e:	89 17       	cp	r24, r25
    3090:	10 f4       	brcc	.+4      	; 0x3096 <xTaskGenericCreate+0x1c8>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3092:	90 93 a5 02 	sts	0x02A5, r25
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3096:	80 91 a4 02 	lds	r24, 0x02A4
    309a:	8f 5f       	subi	r24, 0xFF	; 255
    309c:	80 93 a4 02 	sts	0x02A4, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    30a0:	eb 81       	ldd	r30, Y+3	; 0x03
    30a2:	fc 81       	ldd	r31, Y+4	; 0x04
    30a4:	96 89       	ldd	r25, Z+22	; 0x16
    30a6:	80 91 9f 02 	lds	r24, 0x029F
    30aa:	89 17       	cp	r24, r25
    30ac:	10 f4       	brcc	.+4      	; 0x30b2 <xTaskGenericCreate+0x1e4>
    30ae:	90 93 9f 02 	sts	0x029F, r25
    30b2:	eb 81       	ldd	r30, Y+3	; 0x03
    30b4:	fc 81       	ldd	r31, Y+4	; 0x04
    30b6:	86 89       	ldd	r24, Z+22	; 0x16
    30b8:	29 e0       	ldi	r18, 0x09	; 9
    30ba:	82 9f       	mul	r24, r18
    30bc:	c0 01       	movw	r24, r0
    30be:	11 24       	eor	r1, r1
    30c0:	8a 55       	subi	r24, 0x5A	; 90
    30c2:	9d 4f       	sbci	r25, 0xFD	; 253
    30c4:	b6 01       	movw	r22, r12
    30c6:	0e 94 bf 10 	call	0x217e	; 0x217e <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		portEXIT_CRITICAL();
    30ca:	0f 90       	pop	r0
    30cc:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED( pxNewTCB );
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    30ce:	80 91 a2 02 	lds	r24, 0x02A2
    30d2:	88 23       	and	r24, r24
    30d4:	49 f0       	breq	.+18     	; 0x30e8 <xTaskGenericCreate+0x21a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    30d6:	e0 91 98 02 	lds	r30, 0x0298
    30da:	f0 91 99 02 	lds	r31, 0x0299
    30de:	86 89       	ldd	r24, Z+22	; 0x16
    30e0:	85 15       	cp	r24, r5
    30e2:	10 f4       	brcc	.+4      	; 0x30e8 <xTaskGenericCreate+0x21a>
			{
				portYIELD_WITHIN_API();
    30e4:	0e 94 97 19 	call	0x332e	; 0x332e <vPortYield>
    30e8:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return xReturn;
}
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	0f 90       	pop	r0
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	1f 91       	pop	r17
    30f8:	0f 91       	pop	r16
    30fa:	ff 90       	pop	r15
    30fc:	ef 90       	pop	r14
    30fe:	df 90       	pop	r13
    3100:	cf 90       	pop	r12
    3102:	bf 90       	pop	r11
    3104:	af 90       	pop	r10
    3106:	9f 90       	pop	r9
    3108:	8f 90       	pop	r8
    310a:	7f 90       	pop	r7
    310c:	6f 90       	pop	r6
    310e:	5f 90       	pop	r5
    3110:	3f 90       	pop	r3
    3112:	2f 90       	pop	r2
    3114:	08 95       	ret

00003116 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3116:	af 92       	push	r10
    3118:	bf 92       	push	r11
    311a:	cf 92       	push	r12
    311c:	df 92       	push	r13
    311e:	ef 92       	push	r14
    3120:	ff 92       	push	r15
    3122:	0f 93       	push	r16
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
    3124:	87 e2       	ldi	r24, 0x27	; 39
    3126:	97 e1       	ldi	r25, 0x17	; 23
    3128:	62 e9       	ldi	r22, 0x92	; 146
    312a:	72 e0       	ldi	r23, 0x02	; 2
    312c:	45 e5       	ldi	r20, 0x55	; 85
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	00 e0       	ldi	r16, 0x00	; 0
    3136:	ee 24       	eor	r14, r14
    3138:	ff 24       	eor	r15, r15
    313a:	cc 24       	eor	r12, r12
    313c:	dd 24       	eor	r13, r13
    313e:	aa 24       	eor	r10, r10
    3140:	bb 24       	eor	r11, r11
    3142:	0e 94 67 17 	call	0x2ece	; 0x2ece <xTaskGenericCreate>

	if( xReturn == pdPASS )
    3146:	81 30       	cpi	r24, 0x01	; 1
    3148:	49 f4       	brne	.+18     	; 0x315c <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    314a:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    314c:	80 93 a2 02 	sts	0x02A2, r24
		xTickCount = ( portTickType ) 0;
    3150:	10 92 9d 02 	sts	0x029D, r1
    3154:	10 92 9c 02 	sts	0x029C, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
    3158:	0e 94 fe 18 	call	0x31fc	; 0x31fc <xPortStartScheduler>
		else
		{
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}
}
    315c:	0f 91       	pop	r16
    315e:	ff 90       	pop	r15
    3160:	ef 90       	pop	r14
    3162:	df 90       	pop	r13
    3164:	cf 90       	pop	r12
    3166:	bf 90       	pop	r11
    3168:	af 90       	pop	r10
    316a:	08 95       	ret

0000316c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    316c:	fc 01       	movw	r30, r24
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    316e:	91 e1       	ldi	r25, 0x11	; 17
    3170:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    3172:	22 e2       	ldi	r18, 0x22	; 34
    3174:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    3176:	83 e3       	ldi	r24, 0x33	; 51
    3178:	82 93       	st	-Z, r24
	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	

	usAddress = ( unsigned short ) pxCode;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    317a:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    317c:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    317e:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    3180:	80 e8       	ldi	r24, 0x80	; 128
    3182:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    3184:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    3186:	82 e0       	ldi	r24, 0x02	; 2
    3188:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    318a:	83 e0       	ldi	r24, 0x03	; 3
    318c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    318e:	84 e0       	ldi	r24, 0x04	; 4
    3190:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    3192:	85 e0       	ldi	r24, 0x05	; 5
    3194:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    3196:	86 e0       	ldi	r24, 0x06	; 6
    3198:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    319a:	87 e0       	ldi	r24, 0x07	; 7
    319c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    319e:	88 e0       	ldi	r24, 0x08	; 8
    31a0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    31a2:	89 e0       	ldi	r24, 0x09	; 9
    31a4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    31a6:	80 e1       	ldi	r24, 0x10	; 16
    31a8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    31aa:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    31ac:	82 e1       	ldi	r24, 0x12	; 18
    31ae:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    31b0:	83 e1       	ldi	r24, 0x13	; 19
    31b2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    31b4:	84 e1       	ldi	r24, 0x14	; 20
    31b6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    31b8:	85 e1       	ldi	r24, 0x15	; 21
    31ba:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    31bc:	86 e1       	ldi	r24, 0x16	; 22
    31be:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    31c0:	87 e1       	ldi	r24, 0x17	; 23
    31c2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    31c4:	88 e1       	ldi	r24, 0x18	; 24
    31c6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    31c8:	89 e1       	ldi	r24, 0x19	; 25
    31ca:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    31cc:	80 e2       	ldi	r24, 0x20	; 32
    31ce:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    31d0:	81 e2       	ldi	r24, 0x21	; 33
    31d2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    31d4:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    31d6:	83 e2       	ldi	r24, 0x23	; 35
    31d8:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */

	usAddress = ( unsigned short ) pvParameters;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    31da:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    31dc:	52 93       	st	-Z, r21
	pxTopOfStack--;


	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    31de:	86 e2       	ldi	r24, 0x26	; 38
    31e0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    31e2:	87 e2       	ldi	r24, 0x27	; 39
    31e4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    31e6:	88 e2       	ldi	r24, 0x28	; 40
    31e8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    31ea:	89 e2       	ldi	r24, 0x29	; 41
    31ec:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    31ee:	80 e3       	ldi	r24, 0x30	; 48
    31f0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    31f2:	81 e3       	ldi	r24, 0x31	; 49
    31f4:	82 93       	st	-Z, r24
    31f6:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    31f8:	cf 01       	movw	r24, r30
    31fa:	08 95       	ret

000031fc <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	OCR1AH = ucHighByte;
    31fc:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = ucLowByte;
    3200:	89 ef       	ldi	r24, 0xF9	; 249
    3202:	80 93 88 00 	sts	0x0088, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    3206:	8b e0       	ldi	r24, 0x0B	; 11
    3208:	80 93 81 00 	sts	0x0081, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    320c:	ef e6       	ldi	r30, 0x6F	; 111
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    3212:	82 60       	ori	r24, 0x02	; 2
	TIMSK1 = ucLowByte;
    3214:	80 83       	st	Z, r24
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    3216:	a0 91 98 02 	lds	r26, 0x0298
    321a:	b0 91 99 02 	lds	r27, 0x0299
    321e:	cd 91       	ld	r28, X+
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	dd 91       	ld	r29, X+
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	ff 91       	pop	r31
    3228:	ef 91       	pop	r30
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	bf 91       	pop	r27
    3230:	af 91       	pop	r26
    3232:	9f 91       	pop	r25
    3234:	8f 91       	pop	r24
    3236:	7f 91       	pop	r23
    3238:	6f 91       	pop	r22
    323a:	5f 91       	pop	r21
    323c:	4f 91       	pop	r20
    323e:	3f 91       	pop	r19
    3240:	2f 91       	pop	r18
    3242:	1f 91       	pop	r17
    3244:	0f 91       	pop	r16
    3246:	ff 90       	pop	r15
    3248:	ef 90       	pop	r14
    324a:	df 90       	pop	r13
    324c:	cf 90       	pop	r12
    324e:	bf 90       	pop	r11
    3250:	af 90       	pop	r10
    3252:	9f 90       	pop	r9
    3254:	8f 90       	pop	r8
    3256:	7f 90       	pop	r7
    3258:	6f 90       	pop	r6
    325a:	5f 90       	pop	r5
    325c:	4f 90       	pop	r4
    325e:	3f 90       	pop	r3
    3260:	2f 90       	pop	r2
    3262:	1f 90       	pop	r1
    3264:	0f 90       	pop	r0
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    326a:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	08 95       	ret

00003270 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    3270:	08 95       	ret

00003272 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    3272:	0f 92       	push	r0
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	f8 94       	cli
    3278:	0f 92       	push	r0
    327a:	1f 92       	push	r1
    327c:	11 24       	eor	r1, r1
    327e:	2f 92       	push	r2
    3280:	3f 92       	push	r3
    3282:	4f 92       	push	r4
    3284:	5f 92       	push	r5
    3286:	6f 92       	push	r6
    3288:	7f 92       	push	r7
    328a:	8f 92       	push	r8
    328c:	9f 92       	push	r9
    328e:	af 92       	push	r10
    3290:	bf 92       	push	r11
    3292:	cf 92       	push	r12
    3294:	df 92       	push	r13
    3296:	ef 92       	push	r14
    3298:	ff 92       	push	r15
    329a:	0f 93       	push	r16
    329c:	1f 93       	push	r17
    329e:	2f 93       	push	r18
    32a0:	3f 93       	push	r19
    32a2:	4f 93       	push	r20
    32a4:	5f 93       	push	r21
    32a6:	6f 93       	push	r22
    32a8:	7f 93       	push	r23
    32aa:	8f 93       	push	r24
    32ac:	9f 93       	push	r25
    32ae:	af 93       	push	r26
    32b0:	bf 93       	push	r27
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	ef 93       	push	r30
    32b8:	ff 93       	push	r31
    32ba:	a0 91 98 02 	lds	r26, 0x0298
    32be:	b0 91 99 02 	lds	r27, 0x0299
    32c2:	0d b6       	in	r0, 0x3d	; 61
    32c4:	0d 92       	st	X+, r0
    32c6:	0e b6       	in	r0, 0x3e	; 62
    32c8:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    32ca:	0e 94 12 15 	call	0x2a24	; 0x2a24 <vTaskIncrementTick>
	vTaskSwitchContext();
    32ce:	0e 94 44 14 	call	0x2888	; 0x2888 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    32d2:	a0 91 98 02 	lds	r26, 0x0298
    32d6:	b0 91 99 02 	lds	r27, 0x0299
    32da:	cd 91       	ld	r28, X+
    32dc:	cd bf       	out	0x3d, r28	; 61
    32de:	dd 91       	ld	r29, X+
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	ff 91       	pop	r31
    32e4:	ef 91       	pop	r30
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	bf 91       	pop	r27
    32ec:	af 91       	pop	r26
    32ee:	9f 91       	pop	r25
    32f0:	8f 91       	pop	r24
    32f2:	7f 91       	pop	r23
    32f4:	6f 91       	pop	r22
    32f6:	5f 91       	pop	r21
    32f8:	4f 91       	pop	r20
    32fa:	3f 91       	pop	r19
    32fc:	2f 91       	pop	r18
    32fe:	1f 91       	pop	r17
    3300:	0f 91       	pop	r16
    3302:	ff 90       	pop	r15
    3304:	ef 90       	pop	r14
    3306:	df 90       	pop	r13
    3308:	cf 90       	pop	r12
    330a:	bf 90       	pop	r11
    330c:	af 90       	pop	r10
    330e:	9f 90       	pop	r9
    3310:	8f 90       	pop	r8
    3312:	7f 90       	pop	r7
    3314:	6f 90       	pop	r6
    3316:	5f 90       	pop	r5
    3318:	4f 90       	pop	r4
    331a:	3f 90       	pop	r3
    331c:	2f 90       	pop	r2
    331e:	1f 90       	pop	r1
    3320:	0f 90       	pop	r0
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3326:	08 95       	ret

00003328 <__vector_17>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    3328:	0e 94 39 19 	call	0x3272	; 0x3272 <vPortYieldFromTick>
		asm volatile ( "reti" );
    332c:	18 95       	reti

0000332e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    332e:	0f 92       	push	r0
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	0f 92       	push	r0
    3336:	1f 92       	push	r1
    3338:	11 24       	eor	r1, r1
    333a:	2f 92       	push	r2
    333c:	3f 92       	push	r3
    333e:	4f 92       	push	r4
    3340:	5f 92       	push	r5
    3342:	6f 92       	push	r6
    3344:	7f 92       	push	r7
    3346:	8f 92       	push	r8
    3348:	9f 92       	push	r9
    334a:	af 92       	push	r10
    334c:	bf 92       	push	r11
    334e:	cf 92       	push	r12
    3350:	df 92       	push	r13
    3352:	ef 92       	push	r14
    3354:	ff 92       	push	r15
    3356:	0f 93       	push	r16
    3358:	1f 93       	push	r17
    335a:	2f 93       	push	r18
    335c:	3f 93       	push	r19
    335e:	4f 93       	push	r20
    3360:	5f 93       	push	r21
    3362:	6f 93       	push	r22
    3364:	7f 93       	push	r23
    3366:	8f 93       	push	r24
    3368:	9f 93       	push	r25
    336a:	af 93       	push	r26
    336c:	bf 93       	push	r27
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
    3372:	ef 93       	push	r30
    3374:	ff 93       	push	r31
    3376:	a0 91 98 02 	lds	r26, 0x0298
    337a:	b0 91 99 02 	lds	r27, 0x0299
    337e:	0d b6       	in	r0, 0x3d	; 61
    3380:	0d 92       	st	X+, r0
    3382:	0e b6       	in	r0, 0x3e	; 62
    3384:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    3386:	0e 94 44 14 	call	0x2888	; 0x2888 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    338a:	a0 91 98 02 	lds	r26, 0x0298
    338e:	b0 91 99 02 	lds	r27, 0x0299
    3392:	cd 91       	ld	r28, X+
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	dd 91       	ld	r29, X+
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	ff 91       	pop	r31
    339c:	ef 91       	pop	r30
    339e:	df 91       	pop	r29
    33a0:	cf 91       	pop	r28
    33a2:	bf 91       	pop	r27
    33a4:	af 91       	pop	r26
    33a6:	9f 91       	pop	r25
    33a8:	8f 91       	pop	r24
    33aa:	7f 91       	pop	r23
    33ac:	6f 91       	pop	r22
    33ae:	5f 91       	pop	r21
    33b0:	4f 91       	pop	r20
    33b2:	3f 91       	pop	r19
    33b4:	2f 91       	pop	r18
    33b6:	1f 91       	pop	r17
    33b8:	0f 91       	pop	r16
    33ba:	ff 90       	pop	r15
    33bc:	ef 90       	pop	r14
    33be:	df 90       	pop	r13
    33c0:	cf 90       	pop	r12
    33c2:	bf 90       	pop	r11
    33c4:	af 90       	pop	r10
    33c6:	9f 90       	pop	r9
    33c8:	8f 90       	pop	r8
    33ca:	7f 90       	pop	r7
    33cc:	6f 90       	pop	r6
    33ce:	5f 90       	pop	r5
    33d0:	4f 90       	pop	r4
    33d2:	3f 90       	pop	r3
    33d4:	2f 90       	pop	r2
    33d6:	1f 90       	pop	r1
    33d8:	0f 90       	pop	r0
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	0f 90       	pop	r0

	asm volatile ( "ret" );
    33de:	08 95       	ret

000033e0 <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	fc 01       	movw	r30, r24
corCRCB *pxUnblockedCRCB;
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    33ea:	80 81       	ld	r24, Z
    33ec:	88 23       	and	r24, r24
    33ee:	19 f4       	brne	.+6      	; 0x33f6 <xCoRoutineRemoveFromEventList+0x16>
    33f0:	c0 e0       	ldi	r28, 0x00	; 0
    33f2:	d0 e0       	ldi	r29, 0x00	; 0
    33f4:	05 c0       	rjmp	.+10     	; 0x3400 <xCoRoutineRemoveFromEventList+0x20>
    33f6:	05 80       	ldd	r0, Z+5	; 0x05
    33f8:	f6 81       	ldd	r31, Z+6	; 0x06
    33fa:	e0 2d       	mov	r30, r0
    33fc:	c6 81       	ldd	r28, Z+6	; 0x06
    33fe:	d7 81       	ldd	r29, Z+7	; 0x07
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    3400:	8e 01       	movw	r16, r28
    3402:	04 5f       	subi	r16, 0xF4	; 244
    3404:	1f 4f       	sbci	r17, 0xFF	; 255
    3406:	c8 01       	movw	r24, r16
    3408:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    340c:	83 e2       	ldi	r24, 0x23	; 35
    340e:	93 e0       	ldi	r25, 0x03	; 3
    3410:	b8 01       	movw	r22, r16
    3412:	0e 94 bf 10 	call	0x217e	; 0x217e <vListInsertEnd>
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	e0 91 f2 02 	lds	r30, 0x02F2
    341c:	f0 91 f3 02 	lds	r31, 0x02F3
    3420:	9e 89       	ldd	r25, Y+22	; 0x16
    3422:	86 89       	ldd	r24, Z+22	; 0x16
    3424:	98 17       	cp	r25, r24
    3426:	08 f0       	brcs	.+2      	; 0x342a <xCoRoutineRemoveFromEventList+0x4a>
    3428:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    342a:	82 2f       	mov	r24, r18
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	1f 91       	pop	r17
    3432:	0f 91       	pop	r16
    3434:	08 95       	ret

00003436 <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    3436:	ff 92       	push	r15
    3438:	0f 93       	push	r16
    343a:	1f 93       	push	r17
    343c:	cf 93       	push	r28
    343e:	df 93       	push	r29
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    3440:	99 e0       	ldi	r25, 0x09	; 9
    3442:	f9 2e       	mov	r15, r25
    3444:	28 c0       	rjmp	.+80     	; 0x3496 <vCoRoutineSchedule+0x60>
	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    3446:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    3448:	80 91 23 03 	lds	r24, 0x0323
    344c:	88 23       	and	r24, r24
    344e:	19 f4       	brne	.+6      	; 0x3456 <vCoRoutineSchedule+0x20>
    3450:	c0 e0       	ldi	r28, 0x00	; 0
    3452:	d0 e0       	ldi	r29, 0x00	; 0
    3454:	06 c0       	rjmp	.+12     	; 0x3462 <vCoRoutineSchedule+0x2c>
    3456:	e0 91 28 03 	lds	r30, 0x0328
    345a:	f0 91 29 03 	lds	r31, 0x0329
    345e:	c6 81       	ldd	r28, Z+6	; 0x06
    3460:	d7 81       	ldd	r29, Z+7	; 0x07
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    3462:	ce 01       	movw	r24, r28
    3464:	0c 96       	adiw	r24, 0x0c	; 12
    3466:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
		}
		portENABLE_INTERRUPTS();
    346a:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    346c:	8e 01       	movw	r16, r28
    346e:	0e 5f       	subi	r16, 0xFE	; 254
    3470:	1f 4f       	sbci	r17, 0xFF	; 255
    3472:	c8 01       	movw	r24, r16
    3474:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    3478:	9e 89       	ldd	r25, Y+22	; 0x16
    347a:	80 91 f4 02 	lds	r24, 0x02F4
    347e:	89 17       	cp	r24, r25
    3480:	10 f4       	brcc	.+4      	; 0x3486 <vCoRoutineSchedule+0x50>
    3482:	90 93 f4 02 	sts	0x02F4, r25
    3486:	9f 9d       	mul	r25, r15
    3488:	c0 01       	movw	r24, r0
    348a:	11 24       	eor	r1, r1
    348c:	85 50       	subi	r24, 0x05	; 5
    348e:	9d 4f       	sbci	r25, 0xFD	; 253
    3490:	b8 01       	movw	r22, r16
    3492:	0e 94 bf 10 	call	0x217e	; 0x217e <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
    3496:	80 91 23 03 	lds	r24, 0x0323
    349a:	88 23       	and	r24, r24
    349c:	a1 f6       	brne	.-88     	; 0x3446 <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    349e:	0e 94 30 14 	call	0x2860	; 0x2860 <xTaskGetTickCount>
    34a2:	20 91 f5 02 	lds	r18, 0x02F5
    34a6:	30 91 f6 02 	lds	r19, 0x02F6
    34aa:	82 1b       	sub	r24, r18
    34ac:	93 0b       	sbc	r25, r19
    34ae:	90 93 f8 02 	sts	0x02F8, r25
    34b2:	80 93 f7 02 	sts	0x02F7, r24
					vListRemove( &( pxCRCB->xEventListItem ) );											
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    34b6:	89 e0       	ldi	r24, 0x09	; 9
    34b8:	f8 2e       	mov	r15, r24
    34ba:	54 c0       	rjmp	.+168    	; 0x3564 <vCoRoutineSchedule+0x12e>
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    34bc:	01 96       	adiw	r24, 0x01	; 1
    34be:	90 93 fa 02 	sts	0x02FA, r25
    34c2:	80 93 f9 02 	sts	0x02F9, r24
		xPassedTicks--;
    34c6:	21 50       	subi	r18, 0x01	; 1
    34c8:	30 40       	sbci	r19, 0x00	; 0
    34ca:	30 93 f8 02 	sts	0x02F8, r19
    34ce:	20 93 f7 02 	sts	0x02F7, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    34d2:	89 2b       	or	r24, r25
    34d4:	c9 f5       	brne	.+114    	; 0x3548 <vCoRoutineSchedule+0x112>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    34d6:	20 91 1f 03 	lds	r18, 0x031F
    34da:	30 91 20 03 	lds	r19, 0x0320
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    34de:	80 91 21 03 	lds	r24, 0x0321
    34e2:	90 91 22 03 	lds	r25, 0x0322
    34e6:	90 93 20 03 	sts	0x0320, r25
    34ea:	80 93 1f 03 	sts	0x031F, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    34ee:	30 93 22 03 	sts	0x0322, r19
    34f2:	20 93 21 03 	sts	0x0321, r18
    34f6:	28 c0       	rjmp	.+80     	; 0x3548 <vCoRoutineSchedule+0x112>
		}

		/* See if this tick has made a timeout expire. */
		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
		{	
			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    34f8:	20 91 f9 02 	lds	r18, 0x02F9
    34fc:	30 91 fa 02 	lds	r19, 0x02FA
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	9b 81       	ldd	r25, Y+3	; 0x03
    3504:	28 17       	cp	r18, r24
    3506:	39 07       	cpc	r19, r25
    3508:	68 f1       	brcs	.+90     	; 0x3564 <vCoRoutineSchedule+0x12e>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    350a:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    350c:	8e 01       	movw	r16, r28
    350e:	0e 5f       	subi	r16, 0xFE	; 254
    3510:	1f 4f       	sbci	r17, 0xFF	; 255
    3512:	c8 01       	movw	r24, r16
    3514:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    3518:	8c 89       	ldd	r24, Y+20	; 0x14
    351a:	9d 89       	ldd	r25, Y+21	; 0x15
    351c:	89 2b       	or	r24, r25
    351e:	21 f0       	breq	.+8      	; 0x3528 <vCoRoutineSchedule+0xf2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    3520:	ce 01       	movw	r24, r28
    3522:	0c 96       	adiw	r24, 0x0c	; 12
    3524:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    3528:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    352a:	9e 89       	ldd	r25, Y+22	; 0x16
    352c:	80 91 f4 02 	lds	r24, 0x02F4
    3530:	89 17       	cp	r24, r25
    3532:	10 f4       	brcc	.+4      	; 0x3538 <vCoRoutineSchedule+0x102>
    3534:	90 93 f4 02 	sts	0x02F4, r25
    3538:	9f 9d       	mul	r25, r15
    353a:	c0 01       	movw	r24, r0
    353c:	11 24       	eor	r1, r1
    353e:	85 50       	subi	r24, 0x05	; 5
    3540:	9d 4f       	sbci	r25, 0xFD	; 253
    3542:	b8 01       	movw	r22, r16
    3544:	0e 94 bf 10 	call	0x217e	; 0x217e <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
    3548:	e0 91 1f 03 	lds	r30, 0x031F
    354c:	f0 91 20 03 	lds	r31, 0x0320
    3550:	80 81       	ld	r24, Z
    3552:	88 23       	and	r24, r24
    3554:	39 f0       	breq	.+14     	; 0x3564 <vCoRoutineSchedule+0x12e>
    3556:	05 80       	ldd	r0, Z+5	; 0x05
    3558:	f6 81       	ldd	r31, Z+6	; 0x06
    355a:	e0 2d       	mov	r30, r0
    355c:	c6 81       	ldd	r28, Z+6	; 0x06
    355e:	d7 81       	ldd	r29, Z+7	; 0x07
    3560:	20 97       	sbiw	r28, 0x00	; 0
    3562:	51 f6       	brne	.-108    	; 0x34f8 <vCoRoutineSchedule+0xc2>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    3564:	20 91 f7 02 	lds	r18, 0x02F7
    3568:	30 91 f8 02 	lds	r19, 0x02F8
    356c:	80 91 f9 02 	lds	r24, 0x02F9
    3570:	90 91 fa 02 	lds	r25, 0x02FA
    3574:	21 15       	cp	r18, r1
    3576:	31 05       	cpc	r19, r1
    3578:	09 f0       	breq	.+2      	; 0x357c <vCoRoutineSchedule+0x146>
    357a:	a0 cf       	rjmp	.-192    	; 0x34bc <vCoRoutineSchedule+0x86>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    357c:	90 93 f6 02 	sts	0x02F6, r25
    3580:	80 93 f5 02 	sts	0x02F5, r24
    3584:	90 91 f4 02 	lds	r25, 0x02F4

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    3588:	29 e0       	ldi	r18, 0x09	; 9
    358a:	06 c0       	rjmp	.+12     	; 0x3598 <vCoRoutineSchedule+0x162>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    358c:	99 23       	and	r25, r25
    358e:	19 f4       	brne	.+6      	; 0x3596 <vCoRoutineSchedule+0x160>
    3590:	10 92 f4 02 	sts	0x02F4, r1
    3594:	32 c0       	rjmp	.+100    	; 0x35fa <vCoRoutineSchedule+0x1c4>
    3596:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    3598:	92 9f       	mul	r25, r18
    359a:	d0 01       	movw	r26, r0
    359c:	11 24       	eor	r1, r1
    359e:	a5 50       	subi	r26, 0x05	; 5
    35a0:	bd 4f       	sbci	r27, 0xFD	; 253
    35a2:	8c 91       	ld	r24, X
    35a4:	88 23       	and	r24, r24
    35a6:	91 f3       	breq	.-28     	; 0x358c <vCoRoutineSchedule+0x156>
    35a8:	90 93 f4 02 	sts	0x02F4, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    35ac:	11 96       	adiw	r26, 0x01	; 1
    35ae:	ed 91       	ld	r30, X+
    35b0:	fc 91       	ld	r31, X
    35b2:	12 97       	sbiw	r26, 0x02	; 2
    35b4:	02 80       	ldd	r0, Z+2	; 0x02
    35b6:	f3 81       	ldd	r31, Z+3	; 0x03
    35b8:	e0 2d       	mov	r30, r0
    35ba:	12 96       	adiw	r26, 0x02	; 2
    35bc:	fc 93       	st	X, r31
    35be:	ee 93       	st	-X, r30
    35c0:	11 97       	sbiw	r26, 0x01	; 1
    35c2:	cd 01       	movw	r24, r26
    35c4:	03 96       	adiw	r24, 0x03	; 3
    35c6:	e8 17       	cp	r30, r24
    35c8:	f9 07       	cpc	r31, r25
    35ca:	31 f4       	brne	.+12     	; 0x35d8 <vCoRoutineSchedule+0x1a2>
    35cc:	82 81       	ldd	r24, Z+2	; 0x02
    35ce:	93 81       	ldd	r25, Z+3	; 0x03
    35d0:	12 96       	adiw	r26, 0x02	; 2
    35d2:	9c 93       	st	X, r25
    35d4:	8e 93       	st	-X, r24
    35d6:	11 97       	sbiw	r26, 0x01	; 1
    35d8:	11 96       	adiw	r26, 0x01	; 1
    35da:	ed 91       	ld	r30, X+
    35dc:	fc 91       	ld	r31, X
    35de:	12 97       	sbiw	r26, 0x02	; 2
    35e0:	06 80       	ldd	r0, Z+6	; 0x06
    35e2:	f7 81       	ldd	r31, Z+7	; 0x07
    35e4:	e0 2d       	mov	r30, r0
    35e6:	f0 93 f3 02 	sts	0x02F3, r31
    35ea:	e0 93 f2 02 	sts	0x02F2, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    35ee:	20 81       	ld	r18, Z
    35f0:	31 81       	ldd	r19, Z+1	; 0x01
    35f2:	cf 01       	movw	r24, r30
    35f4:	67 89       	ldd	r22, Z+23	; 0x17
    35f6:	f9 01       	movw	r30, r18
    35f8:	09 95       	icall

	return;
}
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	1f 91       	pop	r17
    3600:	0f 91       	pop	r16
    3602:	ff 90       	pop	r15
    3604:	08 95       	ret

00003606 <vCoRoutineAddToDelayedList>:
	return xReturn;	
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    3606:	0f 93       	push	r16
    3608:	1f 93       	push	r17
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	eb 01       	movw	r28, r22
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    3610:	00 91 f9 02 	lds	r16, 0x02F9
    3614:	10 91 fa 02 	lds	r17, 0x02FA
    3618:	08 0f       	add	r16, r24
    361a:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    361c:	80 91 f2 02 	lds	r24, 0x02F2
    3620:	90 91 f3 02 	lds	r25, 0x02F3
    3624:	02 96       	adiw	r24, 0x02	; 2
    3626:	0e 94 1d 11 	call	0x223a	; 0x223a <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    362a:	e0 91 f2 02 	lds	r30, 0x02F2
    362e:	f0 91 f3 02 	lds	r31, 0x02F3
    3632:	13 83       	std	Z+3, r17	; 0x03
    3634:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    3636:	80 91 f9 02 	lds	r24, 0x02F9
    363a:	90 91 fa 02 	lds	r25, 0x02FA
    363e:	bf 01       	movw	r22, r30
    3640:	6e 5f       	subi	r22, 0xFE	; 254
    3642:	7f 4f       	sbci	r23, 0xFF	; 255
    3644:	08 17       	cp	r16, r24
    3646:	19 07       	cpc	r17, r25
    3648:	28 f4       	brcc	.+10     	; 0x3654 <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    364a:	80 91 21 03 	lds	r24, 0x0321
    364e:	90 91 22 03 	lds	r25, 0x0322
    3652:	04 c0       	rjmp	.+8      	; 0x365c <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    3654:	80 91 1f 03 	lds	r24, 0x031F
    3658:	90 91 20 03 	lds	r25, 0x0320
    365c:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vListInsert>
	}

	if( pxEventList )
    3660:	20 97       	sbiw	r28, 0x00	; 0
    3662:	49 f0       	breq	.+18     	; 0x3676 <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    3664:	60 91 f2 02 	lds	r22, 0x02F2
    3668:	70 91 f3 02 	lds	r23, 0x02F3
    366c:	64 5f       	subi	r22, 0xF4	; 244
    366e:	7f 4f       	sbci	r23, 0xFF	; 255
    3670:	ce 01       	movw	r24, r28
    3672:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vListInsert>
	}
}
    3676:	df 91       	pop	r29
    3678:	cf 91       	pop	r28
    367a:	1f 91       	pop	r17
    367c:	0f 91       	pop	r16
    367e:	08 95       	ret

00003680 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    3680:	af 92       	push	r10
    3682:	bf 92       	push	r11
    3684:	cf 92       	push	r12
    3686:	df 92       	push	r13
    3688:	ef 92       	push	r14
    368a:	ff 92       	push	r15
    368c:	0f 93       	push	r16
    368e:	1f 93       	push	r17
    3690:	cf 93       	push	r28
    3692:	df 93       	push	r29
    3694:	6c 01       	movw	r12, r24
    3696:	b6 2e       	mov	r11, r22
    3698:	a4 2e       	mov	r10, r20
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    369a:	8a e1       	ldi	r24, 0x1A	; 26
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	0e 94 ca 1b 	call	0x3794	; 0x3794 <pvPortMalloc>
    36a2:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	11 f4       	brne	.+4      	; 0x36ac <xCoRoutineCreate+0x2c>
    36a8:	8f ef       	ldi	r24, 0xFF	; 255
    36aa:	59 c0       	rjmp	.+178    	; 0x375e <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    36ac:	80 91 f2 02 	lds	r24, 0x02F2
    36b0:	90 91 f3 02 	lds	r25, 0x02F3
    36b4:	89 2b       	or	r24, r25
    36b6:	21 f5       	brne	.+72     	; 0x3700 <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    36b8:	d0 93 f3 02 	sts	0x02F3, r29
    36bc:	c0 93 f2 02 	sts	0x02F2, r28
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    36c0:	8b ef       	ldi	r24, 0xFB	; 251
    36c2:	92 e0       	ldi	r25, 0x02	; 2
    36c4:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
    36c8:	84 e0       	ldi	r24, 0x04	; 4
    36ca:	93 e0       	ldi	r25, 0x03	; 3
    36cc:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    36d0:	2d e0       	ldi	r18, 0x0D	; 13
    36d2:	e2 2e       	mov	r14, r18
    36d4:	23 e0       	ldi	r18, 0x03	; 3
    36d6:	f2 2e       	mov	r15, r18
    36d8:	c7 01       	movw	r24, r14
    36da:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    36de:	06 e1       	ldi	r16, 0x16	; 22
    36e0:	13 e0       	ldi	r17, 0x03	; 3
    36e2:	c8 01       	movw	r24, r16
    36e4:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    36e8:	83 e2       	ldi	r24, 0x23	; 35
    36ea:	93 e0       	ldi	r25, 0x03	; 3
    36ec:	0e 94 ab 10 	call	0x2156	; 0x2156 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    36f0:	f0 92 20 03 	sts	0x0320, r15
    36f4:	e0 92 1f 03 	sts	0x031F, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    36f8:	10 93 22 03 	sts	0x0322, r17
    36fc:	00 93 21 03 	sts	0x0321, r16
    3700:	eb 2c       	mov	r14, r11
    3702:	bb 20       	and	r11, r11
    3704:	11 f0       	breq	.+4      	; 0x370a <xCoRoutineCreate+0x8a>
    3706:	ee 24       	eor	r14, r14
    3708:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    370a:	19 8e       	std	Y+25, r1	; 0x19
    370c:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    370e:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    3710:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    3712:	fe 01       	movw	r30, r28
    3714:	c1 92       	st	Z+, r12
    3716:	d1 92       	st	Z+, r13
    3718:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    371a:	cf 01       	movw	r24, r30
    371c:	0e 94 bb 10 	call	0x2176	; 0x2176 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    3720:	ce 01       	movw	r24, r28
    3722:	0c 96       	adiw	r24, 0x0c	; 12
    3724:	0e 94 bb 10 	call	0x2176	; 0x2176 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    3728:	d9 87       	std	Y+9, r29	; 0x09
    372a:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    372c:	db 8b       	std	Y+19, r29	; 0x13
    372e:	ca 8b       	std	Y+18, r28	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    3730:	84 e0       	ldi	r24, 0x04	; 4
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	8e 19       	sub	r24, r14
    3736:	91 09       	sbc	r25, r1
    3738:	9d 87       	std	Y+13, r25	; 0x0d
    373a:	8c 87       	std	Y+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    373c:	9e 89       	ldd	r25, Y+22	; 0x16
    373e:	80 91 f4 02 	lds	r24, 0x02F4
    3742:	89 17       	cp	r24, r25
    3744:	10 f4       	brcc	.+4      	; 0x374a <xCoRoutineCreate+0xca>
    3746:	90 93 f4 02 	sts	0x02F4, r25
    374a:	89 e0       	ldi	r24, 0x09	; 9
    374c:	98 9f       	mul	r25, r24
    374e:	c0 01       	movw	r24, r0
    3750:	11 24       	eor	r1, r1
    3752:	85 50       	subi	r24, 0x05	; 5
    3754:	9d 4f       	sbci	r25, 0xFD	; 253
    3756:	b8 01       	movw	r22, r16
    3758:	0e 94 bf 10 	call	0x217e	; 0x217e <vListInsertEnd>
    375c:	81 e0       	ldi	r24, 0x01	; 1
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}
	
	return xReturn;	
}
    375e:	df 91       	pop	r29
    3760:	cf 91       	pop	r28
    3762:	1f 91       	pop	r17
    3764:	0f 91       	pop	r16
    3766:	ff 90       	pop	r15
    3768:	ef 90       	pop	r14
    376a:	df 90       	pop	r13
    376c:	cf 90       	pop	r12
    376e:	bf 90       	pop	r11
    3770:	af 90       	pop	r10
    3772:	08 95       	ret

00003774 <vPortFree>:
{
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    3774:	08 95       	ret

00003776 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    3776:	10 92 2d 03 	sts	0x032D, r1
    377a:	10 92 2c 03 	sts	0x032C, r1
}
    377e:	08 95       	ret

00003780 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    3780:	28 eb       	ldi	r18, 0xB8	; 184
    3782:	3b e0       	ldi	r19, 0x0B	; 11
    3784:	80 91 2c 03 	lds	r24, 0x032C
    3788:	90 91 2d 03 	lds	r25, 0x032D
    378c:	28 1b       	sub	r18, r24
    378e:	39 0b       	sbc	r19, r25
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
}
    3790:	c9 01       	movw	r24, r18
    3792:	08 95       	ret

00003794 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3794:	0f 93       	push	r16
    3796:	1f 93       	push	r17
    3798:	cf 93       	push	r28
    379a:	df 93       	push	r29
    379c:	8c 01       	movw	r16, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    379e:	0e 94 2a 14 	call	0x2854	; 0x2854 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    37a2:	80 91 2c 03 	lds	r24, 0x032C
    37a6:	90 91 2d 03 	lds	r25, 0x032D
    37aa:	98 01       	movw	r18, r16
    37ac:	28 0f       	add	r18, r24
    37ae:	39 1f       	adc	r19, r25
    37b0:	4b e0       	ldi	r20, 0x0B	; 11
    37b2:	28 3b       	cpi	r18, 0xB8	; 184
    37b4:	34 07       	cpc	r19, r20
    37b6:	58 f4       	brcc	.+22     	; 0x37ce <pvPortMalloc+0x3a>
    37b8:	82 17       	cp	r24, r18
    37ba:	93 07       	cpc	r25, r19
    37bc:	40 f4       	brcc	.+16     	; 0x37ce <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    37be:	ec 01       	movw	r28, r24
    37c0:	c2 5d       	subi	r28, 0xD2	; 210
    37c2:	dc 4f       	sbci	r29, 0xFC	; 252
			xNextFreeByte += xWantedSize;			
    37c4:	30 93 2d 03 	sts	0x032D, r19
    37c8:	20 93 2c 03 	sts	0x032C, r18
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <pvPortMalloc+0x3e>
    37ce:	c0 e0       	ldi	r28, 0x00	; 0
    37d0:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}
	xTaskResumeAll();
    37d2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
    37d6:	ce 01       	movw	r24, r28
    37d8:	df 91       	pop	r29
    37da:	cf 91       	pop	r28
    37dc:	1f 91       	pop	r17
    37de:	0f 91       	pop	r16
    37e0:	08 95       	ret

000037e2 <prescaler_hex_to_value>:
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    37e2:	e8 2f       	mov	r30, r24
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	e7 70       	andi	r30, 0x07	; 7
    37e8:	f0 70       	andi	r31, 0x00	; 0
    37ea:	ee 0f       	add	r30, r30
    37ec:	ff 1f       	adc	r31, r31
    37ee:	e0 5f       	subi	r30, 0xF0	; 240
    37f0:	fd 4f       	sbci	r31, 0xFD	; 253
    37f2:	25 91       	lpm	r18, Z+
    37f4:	34 91       	lpm	r19, Z+
}
    37f6:	c9 01       	movw	r24, r18
    37f8:	08 95       	ret

000037fa <prescaler_hex_to_value_for_timer2>:
uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    37fa:	e8 2f       	mov	r30, r24
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	e7 70       	andi	r30, 0x07	; 7
    3800:	f0 70       	andi	r31, 0x00	; 0
    3802:	ee 0f       	add	r30, r30
    3804:	ff 1f       	adc	r31, r31
    3806:	e4 5e       	subi	r30, 0xE4	; 228
    3808:	fd 4f       	sbci	r31, 0xFD	; 253
    380a:	25 91       	lpm	r18, Z+
    380c:	34 91       	lpm	r19, Z+
}
    380e:	c9 01       	movw	r24, r18
    3810:	08 95       	ret

00003812 <get_timer0_prescaler>:

uint16_t get_timer0_prescaler(void)
{
  return prescaler_hex_to_value(TCCR0B);
    3812:	85 b5       	in	r24, 0x25	; 37
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    3814:	e8 2f       	mov	r30, r24
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	e7 70       	andi	r30, 0x07	; 7
    381a:	f0 70       	andi	r31, 0x00	; 0
    381c:	ee 0f       	add	r30, r30
    381e:	ff 1f       	adc	r31, r31
    3820:	e0 5f       	subi	r30, 0xF0	; 240
    3822:	fd 4f       	sbci	r31, 0xFD	; 253
    3824:	25 91       	lpm	r18, Z+
    3826:	34 91       	lpm	r19, Z+
}

uint16_t get_timer0_prescaler(void)
{
  return prescaler_hex_to_value(TCCR0B);
}
    3828:	c9 01       	movw	r24, r18
    382a:	08 95       	ret

0000382c <get_timer1_prescaler>:
uint16_t get_timer1_prescaler(void)
{
  return prescaler_hex_to_value(TCCR1B);
    382c:	80 91 81 00 	lds	r24, 0x0081
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    3830:	e8 2f       	mov	r30, r24
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	e7 70       	andi	r30, 0x07	; 7
    3836:	f0 70       	andi	r31, 0x00	; 0
    3838:	ee 0f       	add	r30, r30
    383a:	ff 1f       	adc	r31, r31
    383c:	e0 5f       	subi	r30, 0xF0	; 240
    383e:	fd 4f       	sbci	r31, 0xFD	; 253
    3840:	25 91       	lpm	r18, Z+
    3842:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR0B);
}
uint16_t get_timer1_prescaler(void)
{
  return prescaler_hex_to_value(TCCR1B);
}
    3844:	c9 01       	movw	r24, r18
    3846:	08 95       	ret

00003848 <get_timer2_prescaler>:
uint16_t get_timer2_prescaler(void)
{
  return prescaler_hex_to_value_for_timer2(TCCR2B);
    3848:	80 91 b1 00 	lds	r24, 0x00B1
uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    384c:	e8 2f       	mov	r30, r24
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	e7 70       	andi	r30, 0x07	; 7
    3852:	f0 70       	andi	r31, 0x00	; 0
    3854:	ee 0f       	add	r30, r30
    3856:	ff 1f       	adc	r31, r31
    3858:	e4 5e       	subi	r30, 0xE4	; 228
    385a:	fd 4f       	sbci	r31, 0xFD	; 253
    385c:	25 91       	lpm	r18, Z+
    385e:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR1B);
}
uint16_t get_timer2_prescaler(void)
{
  return prescaler_hex_to_value_for_timer2(TCCR2B);
}
    3860:	c9 01       	movw	r24, r18
    3862:	08 95       	ret

00003864 <get_timer3_prescaler>:
uint16_t get_timer3_prescaler(void)
{
  return prescaler_hex_to_value(TCCR3B);
    3864:	80 91 91 00 	lds	r24, 0x0091
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    3868:	e8 2f       	mov	r30, r24
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	e7 70       	andi	r30, 0x07	; 7
    386e:	f0 70       	andi	r31, 0x00	; 0
    3870:	ee 0f       	add	r30, r30
    3872:	ff 1f       	adc	r31, r31
    3874:	e0 5f       	subi	r30, 0xF0	; 240
    3876:	fd 4f       	sbci	r31, 0xFD	; 253
    3878:	25 91       	lpm	r18, Z+
    387a:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value_for_timer2(TCCR2B);
}
uint16_t get_timer3_prescaler(void)
{
  return prescaler_hex_to_value(TCCR3B);
}
    387c:	c9 01       	movw	r24, r18
    387e:	08 95       	ret

00003880 <get_timer4_prescaler>:
uint16_t get_timer4_prescaler(void)
{
  return prescaler_hex_to_value(TCCR4B);
    3880:	80 91 a1 00 	lds	r24, 0x00A1
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    3884:	e8 2f       	mov	r30, r24
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	e7 70       	andi	r30, 0x07	; 7
    388a:	f0 70       	andi	r31, 0x00	; 0
    388c:	ee 0f       	add	r30, r30
    388e:	ff 1f       	adc	r31, r31
    3890:	e0 5f       	subi	r30, 0xF0	; 240
    3892:	fd 4f       	sbci	r31, 0xFD	; 253
    3894:	25 91       	lpm	r18, Z+
    3896:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR3B);
}
uint16_t get_timer4_prescaler(void)
{
  return prescaler_hex_to_value(TCCR4B);
}
    3898:	c9 01       	movw	r24, r18
    389a:	08 95       	ret

0000389c <get_timer5_prescaler>:
uint16_t get_timer5_prescaler(void)
{
  return prescaler_hex_to_value(TCCR5B);
    389c:	80 91 21 01 	lds	r24, 0x0121
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    38a0:	e8 2f       	mov	r30, r24
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	e7 70       	andi	r30, 0x07	; 7
    38a6:	f0 70       	andi	r31, 0x00	; 0
    38a8:	ee 0f       	add	r30, r30
    38aa:	ff 1f       	adc	r31, r31
    38ac:	e0 5f       	subi	r30, 0xF0	; 240
    38ae:	fd 4f       	sbci	r31, 0xFD	; 253
    38b0:	25 91       	lpm	r18, Z+
    38b2:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR4B);
}
uint16_t get_timer5_prescaler(void)
{
  return prescaler_hex_to_value(TCCR5B);
}
    38b4:	c9 01       	movw	r24, r18
    38b6:	08 95       	ret

000038b8 <get_timer0_overflow>:

const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
    38b8:	20 91 b6 11 	lds	r18, 0x11B6
    38bc:	30 91 b7 11 	lds	r19, 0x11B7
    38c0:	40 91 b8 11 	lds	r20, 0x11B8
    38c4:	50 91 b9 11 	lds	r21, 0x11B9
}
    38c8:	b9 01       	movw	r22, r18
    38ca:	ca 01       	movw	r24, r20
    38cc:	08 95       	ret

000038ce <get_timer1_overflow>:
const uint32_t get_timer1_overflow(void)
{
    return timer1_ovrflow_cnt;
    38ce:	20 91 b2 11 	lds	r18, 0x11B2
    38d2:	30 91 b3 11 	lds	r19, 0x11B3
    38d6:	40 91 b4 11 	lds	r20, 0x11B4
    38da:	50 91 b5 11 	lds	r21, 0x11B5
}
    38de:	b9 01       	movw	r22, r18
    38e0:	ca 01       	movw	r24, r20
    38e2:	08 95       	ret

000038e4 <get_timer2_overflow>:
const uint32_t get_timer2_overflow(void)
{
    return timer2_ovrflow_cnt;
    38e4:	20 91 ba 11 	lds	r18, 0x11BA
    38e8:	30 91 bb 11 	lds	r19, 0x11BB
    38ec:	40 91 bc 11 	lds	r20, 0x11BC
    38f0:	50 91 bd 11 	lds	r21, 0x11BD
}
    38f4:	b9 01       	movw	r22, r18
    38f6:	ca 01       	movw	r24, r20
    38f8:	08 95       	ret

000038fa <get_timer3_overflow>:
const uint32_t get_timer3_overflow(void)
{
    return timer3_ovrflow_cnt;
    38fa:	20 91 c2 11 	lds	r18, 0x11C2
    38fe:	30 91 c3 11 	lds	r19, 0x11C3
    3902:	40 91 c4 11 	lds	r20, 0x11C4
    3906:	50 91 c5 11 	lds	r21, 0x11C5
}
    390a:	b9 01       	movw	r22, r18
    390c:	ca 01       	movw	r24, r20
    390e:	08 95       	ret

00003910 <get_timer4_overflow>:
const uint32_t get_timer4_overflow(void)
{
    return timer4_ovrflow_cnt;
    3910:	20 91 ae 11 	lds	r18, 0x11AE
    3914:	30 91 af 11 	lds	r19, 0x11AF
    3918:	40 91 b0 11 	lds	r20, 0x11B0
    391c:	50 91 b1 11 	lds	r21, 0x11B1
}
    3920:	b9 01       	movw	r22, r18
    3922:	ca 01       	movw	r24, r20
    3924:	08 95       	ret

00003926 <get_timer5_overflow>:
const uint32_t get_timer5_overflow(void)
{
    return timer5_ovrflow_cnt;
    3926:	20 91 c6 11 	lds	r18, 0x11C6
    392a:	30 91 c7 11 	lds	r19, 0x11C7
    392e:	40 91 c8 11 	lds	r20, 0x11C8
    3932:	50 91 c9 11 	lds	r21, 0x11C9
}
    3936:	b9 01       	movw	r22, r18
    3938:	ca 01       	movw	r24, r20
    393a:	08 95       	ret

0000393c <get_timer0_counter>:

const uint8_t get_timer0_counter(void)
{
    return TCNT0;
    393c:	86 b5       	in	r24, 0x26	; 38
}
    393e:	08 95       	ret

00003940 <get_timer1_counter>:
const uint16_t get_timer1_counter(void)
{
    return TCNT1;
    3940:	20 91 84 00 	lds	r18, 0x0084
    3944:	30 91 85 00 	lds	r19, 0x0085
}
    3948:	c9 01       	movw	r24, r18
    394a:	08 95       	ret

0000394c <get_timer2_counter>:
const uint8_t get_timer2_counter(void)
{
    return TCNT2;
    394c:	80 91 b2 00 	lds	r24, 0x00B2
}
    3950:	08 95       	ret

00003952 <get_timer3_counter>:
const uint16_t get_timer3_counter(void)
{
    return TCNT3;
    3952:	20 91 94 00 	lds	r18, 0x0094
    3956:	30 91 95 00 	lds	r19, 0x0095
}
    395a:	c9 01       	movw	r24, r18
    395c:	08 95       	ret

0000395e <get_timer4_counter>:
const uint16_t get_timer4_counter(void)
{
    return TCNT4;
    395e:	20 91 a4 00 	lds	r18, 0x00A4
    3962:	30 91 a5 00 	lds	r19, 0x00A5
}
    3966:	c9 01       	movw	r24, r18
    3968:	08 95       	ret

0000396a <get_timer5_counter>:
const uint16_t get_timer5_counter(void)
{
    return TCNT5;
    396a:	20 91 24 01 	lds	r18, 0x0124
    396e:	30 91 25 01 	lds	r19, 0x0125
}
    3972:	c9 01       	movw	r24, r18
    3974:	08 95       	ret

00003976 <reset_timer0>:

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    3976:	10 92 b6 11 	sts	0x11B6, r1
    397a:	10 92 b7 11 	sts	0x11B7, r1
    397e:	10 92 b8 11 	sts	0x11B8, r1
    3982:	10 92 b9 11 	sts	0x11B9, r1
    3986:	16 bc       	out	0x26, r1	; 38
}
    3988:	08 95       	ret

0000398a <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    398a:	10 92 b2 11 	sts	0x11B2, r1
    398e:	10 92 b3 11 	sts	0x11B3, r1
    3992:	10 92 b4 11 	sts	0x11B4, r1
    3996:	10 92 b5 11 	sts	0x11B5, r1
    399a:	10 92 85 00 	sts	0x0085, r1
    399e:	10 92 84 00 	sts	0x0084, r1
}
    39a2:	08 95       	ret

000039a4 <reset_timer2>:
void reset_timer2(void)
{
    TCNT2 = timer2_ovrflow_cnt = 0;
    39a4:	10 92 ba 11 	sts	0x11BA, r1
    39a8:	10 92 bb 11 	sts	0x11BB, r1
    39ac:	10 92 bc 11 	sts	0x11BC, r1
    39b0:	10 92 bd 11 	sts	0x11BD, r1
    39b4:	10 92 b2 00 	sts	0x00B2, r1
}
    39b8:	08 95       	ret

000039ba <reset_timer3>:
void reset_timer3(void)
{
    TCNT3 = timer3_ovrflow_cnt = 0;
    39ba:	10 92 c2 11 	sts	0x11C2, r1
    39be:	10 92 c3 11 	sts	0x11C3, r1
    39c2:	10 92 c4 11 	sts	0x11C4, r1
    39c6:	10 92 c5 11 	sts	0x11C5, r1
    39ca:	10 92 95 00 	sts	0x0095, r1
    39ce:	10 92 94 00 	sts	0x0094, r1
}
    39d2:	08 95       	ret

000039d4 <reset_timer4>:
void reset_timer4(void)
{
    TCNT4 = timer4_ovrflow_cnt = 0;
    39d4:	10 92 ae 11 	sts	0x11AE, r1
    39d8:	10 92 af 11 	sts	0x11AF, r1
    39dc:	10 92 b0 11 	sts	0x11B0, r1
    39e0:	10 92 b1 11 	sts	0x11B1, r1
    39e4:	10 92 a5 00 	sts	0x00A5, r1
    39e8:	10 92 a4 00 	sts	0x00A4, r1
}
    39ec:	08 95       	ret

000039ee <reset_timer5>:
void reset_timer5(void)
{
    TCNT5 = timer5_ovrflow_cnt = 0;
    39ee:	10 92 c6 11 	sts	0x11C6, r1
    39f2:	10 92 c7 11 	sts	0x11C7, r1
    39f6:	10 92 c8 11 	sts	0x11C8, r1
    39fa:	10 92 c9 11 	sts	0x11C9, r1
    39fe:	10 92 25 01 	sts	0x0125, r1
    3a02:	10 92 24 01 	sts	0x0124, r1
}
    3a06:	08 95       	ret

00003a08 <delay_us>:

	delay_loops = ((time_us * CYCLES_PER_US)+3) / 5; // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
}
    3a08:	08 95       	ret

00003a0a <init_timer0>:

void init_timer0(const uint8_t prescaler)
{
  TCCR0B = prescaler;
    3a0a:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	80 93 6e 00 	sts	0x006E, r24
    return TCNT5;
}

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    3a12:	10 92 b6 11 	sts	0x11B6, r1
    3a16:	10 92 b7 11 	sts	0x11B7, r1
    3a1a:	10 92 b8 11 	sts	0x11B8, r1
    3a1e:	10 92 b9 11 	sts	0x11B9, r1
    3a22:	16 bc       	out	0x26, r1	; 38
void init_timer0(const uint8_t prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
    3a24:	08 95       	ret

00003a26 <init_timer1>:
void init_timer1(const uint8_t prescaler)
{
  TCCR1B = prescaler;
    3a26:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    3a30:	10 92 b2 11 	sts	0x11B2, r1
    3a34:	10 92 b3 11 	sts	0x11B3, r1
    3a38:	10 92 b4 11 	sts	0x11B4, r1
    3a3c:	10 92 b5 11 	sts	0x11B5, r1
    3a40:	10 92 85 00 	sts	0x0085, r1
    3a44:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const uint8_t prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
    3a48:	08 95       	ret

00003a4a <init_timer2>:
void init_timer2(const uint8_t prescaler)
{
  TCCR2B = prescaler;
    3a4a:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = _BV(TOIE2); // enable interrupts
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	80 93 70 00 	sts	0x0070, r24
{
    TCNT1 = timer1_ovrflow_cnt = 0;
}
void reset_timer2(void)
{
    TCNT2 = timer2_ovrflow_cnt = 0;
    3a54:	10 92 ba 11 	sts	0x11BA, r1
    3a58:	10 92 bb 11 	sts	0x11BB, r1
    3a5c:	10 92 bc 11 	sts	0x11BC, r1
    3a60:	10 92 bd 11 	sts	0x11BD, r1
    3a64:	10 92 b2 00 	sts	0x00B2, r1
void init_timer2(const uint8_t prescaler)
{
  TCCR2B = prescaler;
  TIMSK2 = _BV(TOIE2); // enable interrupts
  reset_timer2(); // reset counter
}
    3a68:	08 95       	ret

00003a6a <init_timer3>:
void init_timer3(const uint8_t prescaler)
{
  TCCR3B = prescaler;
    3a6a:	80 93 91 00 	sts	0x0091, r24
  TIMSK3 = _BV(TOIE3); // enable interrupts
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	80 93 71 00 	sts	0x0071, r24
{
    TCNT2 = timer2_ovrflow_cnt = 0;
}
void reset_timer3(void)
{
    TCNT3 = timer3_ovrflow_cnt = 0;
    3a74:	10 92 c2 11 	sts	0x11C2, r1
    3a78:	10 92 c3 11 	sts	0x11C3, r1
    3a7c:	10 92 c4 11 	sts	0x11C4, r1
    3a80:	10 92 c5 11 	sts	0x11C5, r1
    3a84:	10 92 95 00 	sts	0x0095, r1
    3a88:	10 92 94 00 	sts	0x0094, r1
void init_timer3(const uint8_t prescaler)
{
  TCCR3B = prescaler;
  TIMSK3 = _BV(TOIE3); // enable interrupts
  reset_timer3(); // reset counter
}
    3a8c:	08 95       	ret

00003a8e <init_timer4>:
void init_timer4(const uint8_t prescaler)
{
  TCCR4B = prescaler;
    3a8e:	80 93 a1 00 	sts	0x00A1, r24
  TIMSK4 = _BV(TOIE4); // enable interrupts
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	80 93 72 00 	sts	0x0072, r24
{
    TCNT3 = timer3_ovrflow_cnt = 0;
}
void reset_timer4(void)
{
    TCNT4 = timer4_ovrflow_cnt = 0;
    3a98:	10 92 ae 11 	sts	0x11AE, r1
    3a9c:	10 92 af 11 	sts	0x11AF, r1
    3aa0:	10 92 b0 11 	sts	0x11B0, r1
    3aa4:	10 92 b1 11 	sts	0x11B1, r1
    3aa8:	10 92 a5 00 	sts	0x00A5, r1
    3aac:	10 92 a4 00 	sts	0x00A4, r1
void init_timer4(const uint8_t prescaler)
{
  TCCR4B = prescaler;
  TIMSK4 = _BV(TOIE4); // enable interrupts
  reset_timer4(); // reset counter
}
    3ab0:	08 95       	ret

00003ab2 <init_timer5>:
void init_timer5(const uint8_t prescaler)
{
  TCCR5B = prescaler;
    3ab2:	80 93 21 01 	sts	0x0121, r24
  TIMSK5 = _BV(TOIE5); // enable interrupts
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	80 93 73 00 	sts	0x0073, r24
{
    TCNT4 = timer4_ovrflow_cnt = 0;
}
void reset_timer5(void)
{
    TCNT5 = timer5_ovrflow_cnt = 0;
    3abc:	10 92 c6 11 	sts	0x11C6, r1
    3ac0:	10 92 c7 11 	sts	0x11C7, r1
    3ac4:	10 92 c8 11 	sts	0x11C8, r1
    3ac8:	10 92 c9 11 	sts	0x11C9, r1
    3acc:	10 92 25 01 	sts	0x0125, r1
    3ad0:	10 92 24 01 	sts	0x0124, r1
void init_timer5(const uint8_t prescaler)
{
  TCCR5B = prescaler;
  TIMSK5 = _BV(TOIE5); // enable interrupts
  reset_timer5(); // reset counter
}
    3ad4:	08 95       	ret

00003ad6 <timer_attach>:

void timer_attach(TimerInterrupt_t interrupt, void (*user_func)(void) )
{
  // set the interrupt function to run
  // the supplied user's function
  TimerIntFunc[interrupt] = user_func;
    3ad6:	e8 2f       	mov	r30, r24
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	ee 0f       	add	r30, r30
    3adc:	ff 1f       	adc	r31, r31
    3ade:	ea 51       	subi	r30, 0x1A	; 26
    3ae0:	f1 4f       	sbci	r31, 0xF1	; 241
    3ae2:	71 83       	std	Z+1, r23	; 0x01
    3ae4:	60 83       	st	Z, r22
}
    3ae6:	08 95       	ret

00003ae8 <timer_detach>:

void timer_detach(TimerInterrupt_t interrupt)
{
  // clear the user defined interrupt function
  TimerIntFunc[interrupt] = NULL;
    3ae8:	e8 2f       	mov	r30, r24
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	ee 0f       	add	r30, r30
    3aee:	ff 1f       	adc	r31, r31
    3af0:	ea 51       	subi	r30, 0x1A	; 26
    3af2:	f1 4f       	sbci	r31, 0xF1	; 241
    3af4:	11 82       	std	Z+1, r1	; 0x01
    3af6:	10 82       	st	Z, r1
}
    3af8:	08 95       	ret

00003afa <_delay_loop_2>:

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <_delay_loop_2>
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    3afe:	08 95       	ret

00003b00 <sleep>:

void sleep(uint16_t time_ms)
{
    3b00:	af 92       	push	r10
    3b02:	bf 92       	push	r11
    3b04:	cf 92       	push	r12
    3b06:	df 92       	push	r13
    3b08:	ef 92       	push	r14
    3b0a:	ff 92       	push	r15
    3b0c:	0f 93       	push	r16
    3b0e:	1f 93       	push	r17
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * time_ms;
    3b10:	a0 e0       	ldi	r26, 0x00	; 0
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	bc 01       	movw	r22, r24
    3b16:	cd 01       	movw	r24, r26
    3b18:	0e 94 13 33 	call	0x6626	; 0x6626 <__floatunsisf>
    3b1c:	5b 01       	movw	r10, r22
    3b1e:	6c 01       	movw	r12, r24
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	4a e7       	ldi	r20, 0x7A	; 122
    3b26:	55 e4       	ldi	r21, 0x45	; 69
    3b28:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    3b2c:	7b 01       	movw	r14, r22
    3b2e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	40 e8       	ldi	r20, 0x80	; 128
    3b36:	5f e3       	ldi	r21, 0x3F	; 63
    3b38:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__cmpsf2>
    3b3c:	88 23       	and	r24, r24
    3b3e:	1c f4       	brge	.+6      	; 0x3b46 <sleep+0x46>
    3b40:	61 e0       	ldi	r22, 0x01	; 1
    3b42:	70 e0       	ldi	r23, 0x00	; 0
    3b44:	24 c0       	rjmp	.+72     	; 0x3b8e <sleep+0x8e>
		__ticks = 1;
	else if (__tmp > 65535)
    3b46:	c8 01       	movw	r24, r16
    3b48:	b7 01       	movw	r22, r14
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	3f ef       	ldi	r19, 0xFF	; 255
    3b4e:	4f e7       	ldi	r20, 0x7F	; 127
    3b50:	57 e4       	ldi	r21, 0x47	; 71
    3b52:	0e 94 58 34 	call	0x68b0	; 0x68b0 <__gesf2>
    3b56:	18 16       	cp	r1, r24
    3b58:	b4 f4       	brge	.+44     	; 0x3b86 <sleep+0x86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
    3b5a:	c6 01       	movw	r24, r12
    3b5c:	b5 01       	movw	r22, r10
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e2       	ldi	r20, 0x20	; 32
    3b64:	51 e4       	ldi	r21, 0x41	; 65
    3b66:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    3b6a:	0e 94 e7 32 	call	0x65ce	; 0x65ce <__fixunssfsi>
}

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b6e:	80 e9       	ldi	r24, 0x90	; 144
    3b70:	91 e0       	ldi	r25, 0x01	; 1
    3b72:	05 c0       	rjmp	.+10     	; 0x3b7e <sleep+0x7e>
    3b74:	fc 01       	movw	r30, r24
    3b76:	31 97       	sbiw	r30, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <sleep+0x76>
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7a:	61 50       	subi	r22, 0x01	; 1
    3b7c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
    3b7e:	61 15       	cp	r22, r1
    3b80:	71 05       	cpc	r23, r1
    3b82:	c1 f7       	brne	.-16     	; 0x3b74 <sleep+0x74>
    3b84:	07 c0       	rjmp	.+14     	; 0x3b94 <sleep+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b86:	c8 01       	movw	r24, r16
    3b88:	b7 01       	movw	r22, r14
    3b8a:	0e 94 e7 32 	call	0x65ce	; 0x65ce <__fixunssfsi>
}

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b8e:	cb 01       	movw	r24, r22
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <sleep+0x90>
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}
    3b94:	1f 91       	pop	r17
    3b96:	0f 91       	pop	r16
    3b98:	ff 90       	pop	r15
    3b9a:	ef 90       	pop	r14
    3b9c:	df 90       	pop	r13
    3b9e:	cf 90       	pop	r12
    3ba0:	bf 90       	pop	r11
    3ba2:	af 90       	pop	r10
    3ba4:	08 95       	ret

00003ba6 <__vector_23>:
    }
  }
}*/

ISR(TIMER0_OVF_vect) 
{
    3ba6:	1f 92       	push	r1
    3ba8:	0f 92       	push	r0
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	0f 92       	push	r0
    3bae:	11 24       	eor	r1, r1
    3bb0:	2f 93       	push	r18
    3bb2:	3f 93       	push	r19
    3bb4:	4f 93       	push	r20
    3bb6:	5f 93       	push	r21
    3bb8:	6f 93       	push	r22
    3bba:	7f 93       	push	r23
    3bbc:	8f 93       	push	r24
    3bbe:	9f 93       	push	r25
    3bc0:	af 93       	push	r26
    3bc2:	bf 93       	push	r27
    3bc4:	ef 93       	push	r30
    3bc6:	ff 93       	push	r31
  timer0_ovrflow_cnt++;
    3bc8:	80 91 b6 11 	lds	r24, 0x11B6
    3bcc:	90 91 b7 11 	lds	r25, 0x11B7
    3bd0:	a0 91 b8 11 	lds	r26, 0x11B8
    3bd4:	b0 91 b9 11 	lds	r27, 0x11B9
    3bd8:	01 96       	adiw	r24, 0x01	; 1
    3bda:	a1 1d       	adc	r26, r1
    3bdc:	b1 1d       	adc	r27, r1
    3bde:	80 93 b6 11 	sts	0x11B6, r24
    3be2:	90 93 b7 11 	sts	0x11B7, r25
    3be6:	a0 93 b8 11 	sts	0x11B8, r26
    3bea:	b0 93 b9 11 	sts	0x11B9, r27
  timer_sleep_cnt++;
    3bee:	80 91 be 11 	lds	r24, 0x11BE
    3bf2:	90 91 bf 11 	lds	r25, 0x11BF
    3bf6:	a0 91 c0 11 	lds	r26, 0x11C0
    3bfa:	b0 91 c1 11 	lds	r27, 0x11C1
    3bfe:	01 96       	adiw	r24, 0x01	; 1
    3c00:	a1 1d       	adc	r26, r1
    3c02:	b1 1d       	adc	r27, r1
    3c04:	80 93 be 11 	sts	0x11BE, r24
    3c08:	90 93 bf 11 	sts	0x11BF, r25
    3c0c:	a0 93 c0 11 	sts	0x11C0, r26
    3c10:	b0 93 c1 11 	sts	0x11C1, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER0_OVF_interrupt);
    3c14:	80 91 ea 0e 	lds	r24, 0x0EEA
    3c18:	90 91 eb 0e 	lds	r25, 0x0EEB
    3c1c:	89 2b       	or	r24, r25
    3c1e:	29 f0       	breq	.+10     	; 0x3c2a <__vector_23+0x84>
    3c20:	e0 91 ea 0e 	lds	r30, 0x0EEA
    3c24:	f0 91 eb 0e 	lds	r31, 0x0EEB
    3c28:	09 95       	icall
}
    3c2a:	ff 91       	pop	r31
    3c2c:	ef 91       	pop	r30
    3c2e:	bf 91       	pop	r27
    3c30:	af 91       	pop	r26
    3c32:	9f 91       	pop	r25
    3c34:	8f 91       	pop	r24
    3c36:	7f 91       	pop	r23
    3c38:	6f 91       	pop	r22
    3c3a:	5f 91       	pop	r21
    3c3c:	4f 91       	pop	r20
    3c3e:	3f 91       	pop	r19
    3c40:	2f 91       	pop	r18
    3c42:	0f 90       	pop	r0
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	0f 90       	pop	r0
    3c48:	1f 90       	pop	r1
    3c4a:	18 95       	reti

00003c4c <__vector_20>:
ISR(TIMER1_OVF_vect) 
{
    3c4c:	1f 92       	push	r1
    3c4e:	0f 92       	push	r0
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	0f 92       	push	r0
    3c54:	11 24       	eor	r1, r1
    3c56:	2f 93       	push	r18
    3c58:	3f 93       	push	r19
    3c5a:	4f 93       	push	r20
    3c5c:	5f 93       	push	r21
    3c5e:	6f 93       	push	r22
    3c60:	7f 93       	push	r23
    3c62:	8f 93       	push	r24
    3c64:	9f 93       	push	r25
    3c66:	af 93       	push	r26
    3c68:	bf 93       	push	r27
    3c6a:	ef 93       	push	r30
    3c6c:	ff 93       	push	r31
  timer1_ovrflow_cnt++;
    3c6e:	80 91 b2 11 	lds	r24, 0x11B2
    3c72:	90 91 b3 11 	lds	r25, 0x11B3
    3c76:	a0 91 b4 11 	lds	r26, 0x11B4
    3c7a:	b0 91 b5 11 	lds	r27, 0x11B5
    3c7e:	01 96       	adiw	r24, 0x01	; 1
    3c80:	a1 1d       	adc	r26, r1
    3c82:	b1 1d       	adc	r27, r1
    3c84:	80 93 b2 11 	sts	0x11B2, r24
    3c88:	90 93 b3 11 	sts	0x11B3, r25
    3c8c:	a0 93 b4 11 	sts	0x11B4, r26
    3c90:	b0 93 b5 11 	sts	0x11B5, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER1_OVF_interrupt);
    3c94:	80 91 f4 0e 	lds	r24, 0x0EF4
    3c98:	90 91 f5 0e 	lds	r25, 0x0EF5
    3c9c:	89 2b       	or	r24, r25
    3c9e:	29 f0       	breq	.+10     	; 0x3caa <__vector_20+0x5e>
    3ca0:	e0 91 f4 0e 	lds	r30, 0x0EF4
    3ca4:	f0 91 f5 0e 	lds	r31, 0x0EF5
    3ca8:	09 95       	icall
}
    3caa:	ff 91       	pop	r31
    3cac:	ef 91       	pop	r30
    3cae:	bf 91       	pop	r27
    3cb0:	af 91       	pop	r26
    3cb2:	9f 91       	pop	r25
    3cb4:	8f 91       	pop	r24
    3cb6:	7f 91       	pop	r23
    3cb8:	6f 91       	pop	r22
    3cba:	5f 91       	pop	r21
    3cbc:	4f 91       	pop	r20
    3cbe:	3f 91       	pop	r19
    3cc0:	2f 91       	pop	r18
    3cc2:	0f 90       	pop	r0
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	0f 90       	pop	r0
    3cc8:	1f 90       	pop	r1
    3cca:	18 95       	reti

00003ccc <__vector_15>:
ISR(TIMER2_OVF_vect) 
{
    3ccc:	1f 92       	push	r1
    3cce:	0f 92       	push	r0
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	0f 92       	push	r0
    3cd4:	11 24       	eor	r1, r1
    3cd6:	2f 93       	push	r18
    3cd8:	3f 93       	push	r19
    3cda:	4f 93       	push	r20
    3cdc:	5f 93       	push	r21
    3cde:	6f 93       	push	r22
    3ce0:	7f 93       	push	r23
    3ce2:	8f 93       	push	r24
    3ce4:	9f 93       	push	r25
    3ce6:	af 93       	push	r26
    3ce8:	bf 93       	push	r27
    3cea:	ef 93       	push	r30
    3cec:	ff 93       	push	r31
  timer2_ovrflow_cnt++;
    3cee:	80 91 ba 11 	lds	r24, 0x11BA
    3cf2:	90 91 bb 11 	lds	r25, 0x11BB
    3cf6:	a0 91 bc 11 	lds	r26, 0x11BC
    3cfa:	b0 91 bd 11 	lds	r27, 0x11BD
    3cfe:	01 96       	adiw	r24, 0x01	; 1
    3d00:	a1 1d       	adc	r26, r1
    3d02:	b1 1d       	adc	r27, r1
    3d04:	80 93 ba 11 	sts	0x11BA, r24
    3d08:	90 93 bb 11 	sts	0x11BB, r25
    3d0c:	a0 93 bc 11 	sts	0x11BC, r26
    3d10:	b0 93 bd 11 	sts	0x11BD, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER2_OVF_interrupt);
    3d14:	80 91 fa 0e 	lds	r24, 0x0EFA
    3d18:	90 91 fb 0e 	lds	r25, 0x0EFB
    3d1c:	89 2b       	or	r24, r25
    3d1e:	29 f0       	breq	.+10     	; 0x3d2a <__vector_15+0x5e>
    3d20:	e0 91 fa 0e 	lds	r30, 0x0EFA
    3d24:	f0 91 fb 0e 	lds	r31, 0x0EFB
    3d28:	09 95       	icall
}
    3d2a:	ff 91       	pop	r31
    3d2c:	ef 91       	pop	r30
    3d2e:	bf 91       	pop	r27
    3d30:	af 91       	pop	r26
    3d32:	9f 91       	pop	r25
    3d34:	8f 91       	pop	r24
    3d36:	7f 91       	pop	r23
    3d38:	6f 91       	pop	r22
    3d3a:	5f 91       	pop	r21
    3d3c:	4f 91       	pop	r20
    3d3e:	3f 91       	pop	r19
    3d40:	2f 91       	pop	r18
    3d42:	0f 90       	pop	r0
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	0f 90       	pop	r0
    3d48:	1f 90       	pop	r1
    3d4a:	18 95       	reti

00003d4c <__vector_35>:
ISR(TIMER3_OVF_vect) 
{
    3d4c:	1f 92       	push	r1
    3d4e:	0f 92       	push	r0
    3d50:	0f b6       	in	r0, 0x3f	; 63
    3d52:	0f 92       	push	r0
    3d54:	11 24       	eor	r1, r1
    3d56:	2f 93       	push	r18
    3d58:	3f 93       	push	r19
    3d5a:	4f 93       	push	r20
    3d5c:	5f 93       	push	r21
    3d5e:	6f 93       	push	r22
    3d60:	7f 93       	push	r23
    3d62:	8f 93       	push	r24
    3d64:	9f 93       	push	r25
    3d66:	af 93       	push	r26
    3d68:	bf 93       	push	r27
    3d6a:	ef 93       	push	r30
    3d6c:	ff 93       	push	r31
  timer3_ovrflow_cnt++;
    3d6e:	80 91 c2 11 	lds	r24, 0x11C2
    3d72:	90 91 c3 11 	lds	r25, 0x11C3
    3d76:	a0 91 c4 11 	lds	r26, 0x11C4
    3d7a:	b0 91 c5 11 	lds	r27, 0x11C5
    3d7e:	01 96       	adiw	r24, 0x01	; 1
    3d80:	a1 1d       	adc	r26, r1
    3d82:	b1 1d       	adc	r27, r1
    3d84:	80 93 c2 11 	sts	0x11C2, r24
    3d88:	90 93 c3 11 	sts	0x11C3, r25
    3d8c:	a0 93 c4 11 	sts	0x11C4, r26
    3d90:	b0 93 c5 11 	sts	0x11C5, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER3_OVF_interrupt);
    3d94:	80 91 04 0f 	lds	r24, 0x0F04
    3d98:	90 91 05 0f 	lds	r25, 0x0F05
    3d9c:	89 2b       	or	r24, r25
    3d9e:	29 f0       	breq	.+10     	; 0x3daa <__vector_35+0x5e>
    3da0:	e0 91 04 0f 	lds	r30, 0x0F04
    3da4:	f0 91 05 0f 	lds	r31, 0x0F05
    3da8:	09 95       	icall
}
    3daa:	ff 91       	pop	r31
    3dac:	ef 91       	pop	r30
    3dae:	bf 91       	pop	r27
    3db0:	af 91       	pop	r26
    3db2:	9f 91       	pop	r25
    3db4:	8f 91       	pop	r24
    3db6:	7f 91       	pop	r23
    3db8:	6f 91       	pop	r22
    3dba:	5f 91       	pop	r21
    3dbc:	4f 91       	pop	r20
    3dbe:	3f 91       	pop	r19
    3dc0:	2f 91       	pop	r18
    3dc2:	0f 90       	pop	r0
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	0f 90       	pop	r0
    3dc8:	1f 90       	pop	r1
    3dca:	18 95       	reti

00003dcc <__vector_45>:
ISR(TIMER4_OVF_vect) 
{
    3dcc:	1f 92       	push	r1
    3dce:	0f 92       	push	r0
    3dd0:	0f b6       	in	r0, 0x3f	; 63
    3dd2:	0f 92       	push	r0
    3dd4:	11 24       	eor	r1, r1
    3dd6:	2f 93       	push	r18
    3dd8:	3f 93       	push	r19
    3dda:	4f 93       	push	r20
    3ddc:	5f 93       	push	r21
    3dde:	6f 93       	push	r22
    3de0:	7f 93       	push	r23
    3de2:	8f 93       	push	r24
    3de4:	9f 93       	push	r25
    3de6:	af 93       	push	r26
    3de8:	bf 93       	push	r27
    3dea:	ef 93       	push	r30
    3dec:	ff 93       	push	r31
  timer4_ovrflow_cnt++;
    3dee:	80 91 ae 11 	lds	r24, 0x11AE
    3df2:	90 91 af 11 	lds	r25, 0x11AF
    3df6:	a0 91 b0 11 	lds	r26, 0x11B0
    3dfa:	b0 91 b1 11 	lds	r27, 0x11B1
    3dfe:	01 96       	adiw	r24, 0x01	; 1
    3e00:	a1 1d       	adc	r26, r1
    3e02:	b1 1d       	adc	r27, r1
    3e04:	80 93 ae 11 	sts	0x11AE, r24
    3e08:	90 93 af 11 	sts	0x11AF, r25
    3e0c:	a0 93 b0 11 	sts	0x11B0, r26
    3e10:	b0 93 b1 11 	sts	0x11B1, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER4_OVF_interrupt);
    3e14:	80 91 0e 0f 	lds	r24, 0x0F0E
    3e18:	90 91 0f 0f 	lds	r25, 0x0F0F
    3e1c:	89 2b       	or	r24, r25
    3e1e:	29 f0       	breq	.+10     	; 0x3e2a <__vector_45+0x5e>
    3e20:	e0 91 0e 0f 	lds	r30, 0x0F0E
    3e24:	f0 91 0f 0f 	lds	r31, 0x0F0F
    3e28:	09 95       	icall
}
    3e2a:	ff 91       	pop	r31
    3e2c:	ef 91       	pop	r30
    3e2e:	bf 91       	pop	r27
    3e30:	af 91       	pop	r26
    3e32:	9f 91       	pop	r25
    3e34:	8f 91       	pop	r24
    3e36:	7f 91       	pop	r23
    3e38:	6f 91       	pop	r22
    3e3a:	5f 91       	pop	r21
    3e3c:	4f 91       	pop	r20
    3e3e:	3f 91       	pop	r19
    3e40:	2f 91       	pop	r18
    3e42:	0f 90       	pop	r0
    3e44:	0f be       	out	0x3f, r0	; 63
    3e46:	0f 90       	pop	r0
    3e48:	1f 90       	pop	r1
    3e4a:	18 95       	reti

00003e4c <__vector_50>:
ISR(TIMER5_OVF_vect) 
{
    3e4c:	1f 92       	push	r1
    3e4e:	0f 92       	push	r0
    3e50:	0f b6       	in	r0, 0x3f	; 63
    3e52:	0f 92       	push	r0
    3e54:	11 24       	eor	r1, r1
    3e56:	2f 93       	push	r18
    3e58:	3f 93       	push	r19
    3e5a:	4f 93       	push	r20
    3e5c:	5f 93       	push	r21
    3e5e:	6f 93       	push	r22
    3e60:	7f 93       	push	r23
    3e62:	8f 93       	push	r24
    3e64:	9f 93       	push	r25
    3e66:	af 93       	push	r26
    3e68:	bf 93       	push	r27
    3e6a:	ef 93       	push	r30
    3e6c:	ff 93       	push	r31
  timer5_ovrflow_cnt++;
    3e6e:	80 91 c6 11 	lds	r24, 0x11C6
    3e72:	90 91 c7 11 	lds	r25, 0x11C7
    3e76:	a0 91 c8 11 	lds	r26, 0x11C8
    3e7a:	b0 91 c9 11 	lds	r27, 0x11C9
    3e7e:	01 96       	adiw	r24, 0x01	; 1
    3e80:	a1 1d       	adc	r26, r1
    3e82:	b1 1d       	adc	r27, r1
    3e84:	80 93 c6 11 	sts	0x11C6, r24
    3e88:	90 93 c7 11 	sts	0x11C7, r25
    3e8c:	a0 93 c8 11 	sts	0x11C8, r26
    3e90:	b0 93 c9 11 	sts	0x11C9, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER5_OVF_interrupt);
    3e94:	80 91 18 0f 	lds	r24, 0x0F18
    3e98:	90 91 19 0f 	lds	r25, 0x0F19
    3e9c:	89 2b       	or	r24, r25
    3e9e:	29 f0       	breq	.+10     	; 0x3eaa <__vector_50+0x5e>
    3ea0:	e0 91 18 0f 	lds	r30, 0x0F18
    3ea4:	f0 91 19 0f 	lds	r31, 0x0F19
    3ea8:	09 95       	icall
}
    3eaa:	ff 91       	pop	r31
    3eac:	ef 91       	pop	r30
    3eae:	bf 91       	pop	r27
    3eb0:	af 91       	pop	r26
    3eb2:	9f 91       	pop	r25
    3eb4:	8f 91       	pop	r24
    3eb6:	7f 91       	pop	r23
    3eb8:	6f 91       	pop	r22
    3eba:	5f 91       	pop	r21
    3ebc:	4f 91       	pop	r20
    3ebe:	3f 91       	pop	r19
    3ec0:	2f 91       	pop	r18
    3ec2:	0f 90       	pop	r0
    3ec4:	0f be       	out	0x3f, r0	; 63
    3ec6:	0f 90       	pop	r0
    3ec8:	1f 90       	pop	r1
    3eca:	18 95       	reti

00003ecc <__vector_21>:
ISR(TIMER0_COMPA_vect)
{
    3ecc:	1f 92       	push	r1
    3ece:	0f 92       	push	r0
    3ed0:	0f b6       	in	r0, 0x3f	; 63
    3ed2:	0f 92       	push	r0
    3ed4:	11 24       	eor	r1, r1
    3ed6:	2f 93       	push	r18
    3ed8:	3f 93       	push	r19
    3eda:	4f 93       	push	r20
    3edc:	5f 93       	push	r21
    3ede:	6f 93       	push	r22
    3ee0:	7f 93       	push	r23
    3ee2:	8f 93       	push	r24
    3ee4:	9f 93       	push	r25
    3ee6:	af 93       	push	r26
    3ee8:	bf 93       	push	r27
    3eea:	ef 93       	push	r30
    3eec:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPA_interrupt);
    3eee:	80 91 e6 0e 	lds	r24, 0x0EE6
    3ef2:	90 91 e7 0e 	lds	r25, 0x0EE7
    3ef6:	89 2b       	or	r24, r25
    3ef8:	29 f0       	breq	.+10     	; 0x3f04 <__vector_21+0x38>
    3efa:	e0 91 e6 0e 	lds	r30, 0x0EE6
    3efe:	f0 91 e7 0e 	lds	r31, 0x0EE7
    3f02:	09 95       	icall
}
    3f04:	ff 91       	pop	r31
    3f06:	ef 91       	pop	r30
    3f08:	bf 91       	pop	r27
    3f0a:	af 91       	pop	r26
    3f0c:	9f 91       	pop	r25
    3f0e:	8f 91       	pop	r24
    3f10:	7f 91       	pop	r23
    3f12:	6f 91       	pop	r22
    3f14:	5f 91       	pop	r21
    3f16:	4f 91       	pop	r20
    3f18:	3f 91       	pop	r19
    3f1a:	2f 91       	pop	r18
    3f1c:	0f 90       	pop	r0
    3f1e:	0f be       	out	0x3f, r0	; 63
    3f20:	0f 90       	pop	r0
    3f22:	1f 90       	pop	r1
    3f24:	18 95       	reti

00003f26 <__vector_22>:
ISR(TIMER0_COMPB_vect)
{
    3f26:	1f 92       	push	r1
    3f28:	0f 92       	push	r0
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	0f 92       	push	r0
    3f2e:	11 24       	eor	r1, r1
    3f30:	2f 93       	push	r18
    3f32:	3f 93       	push	r19
    3f34:	4f 93       	push	r20
    3f36:	5f 93       	push	r21
    3f38:	6f 93       	push	r22
    3f3a:	7f 93       	push	r23
    3f3c:	8f 93       	push	r24
    3f3e:	9f 93       	push	r25
    3f40:	af 93       	push	r26
    3f42:	bf 93       	push	r27
    3f44:	ef 93       	push	r30
    3f46:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPB_interrupt);
    3f48:	80 91 e8 0e 	lds	r24, 0x0EE8
    3f4c:	90 91 e9 0e 	lds	r25, 0x0EE9
    3f50:	89 2b       	or	r24, r25
    3f52:	29 f0       	breq	.+10     	; 0x3f5e <__vector_22+0x38>
    3f54:	e0 91 e8 0e 	lds	r30, 0x0EE8
    3f58:	f0 91 e9 0e 	lds	r31, 0x0EE9
    3f5c:	09 95       	icall
}
    3f5e:	ff 91       	pop	r31
    3f60:	ef 91       	pop	r30
    3f62:	bf 91       	pop	r27
    3f64:	af 91       	pop	r26
    3f66:	9f 91       	pop	r25
    3f68:	8f 91       	pop	r24
    3f6a:	7f 91       	pop	r23
    3f6c:	6f 91       	pop	r22
    3f6e:	5f 91       	pop	r21
    3f70:	4f 91       	pop	r20
    3f72:	3f 91       	pop	r19
    3f74:	2f 91       	pop	r18
    3f76:	0f 90       	pop	r0
    3f78:	0f be       	out	0x3f, r0	; 63
    3f7a:	0f 90       	pop	r0
    3f7c:	1f 90       	pop	r1
    3f7e:	18 95       	reti

00003f80 <__vector_16>:
ISR(TIMER1_CAPT_vect)
{
    3f80:	1f 92       	push	r1
    3f82:	0f 92       	push	r0
    3f84:	0f b6       	in	r0, 0x3f	; 63
    3f86:	0f 92       	push	r0
    3f88:	11 24       	eor	r1, r1
    3f8a:	2f 93       	push	r18
    3f8c:	3f 93       	push	r19
    3f8e:	4f 93       	push	r20
    3f90:	5f 93       	push	r21
    3f92:	6f 93       	push	r22
    3f94:	7f 93       	push	r23
    3f96:	8f 93       	push	r24
    3f98:	9f 93       	push	r25
    3f9a:	af 93       	push	r26
    3f9c:	bf 93       	push	r27
    3f9e:	ef 93       	push	r30
    3fa0:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_CAPT_interrupt);
    3fa2:	80 91 ec 0e 	lds	r24, 0x0EEC
    3fa6:	90 91 ed 0e 	lds	r25, 0x0EED
    3faa:	89 2b       	or	r24, r25
    3fac:	29 f0       	breq	.+10     	; 0x3fb8 <__vector_16+0x38>
    3fae:	e0 91 ec 0e 	lds	r30, 0x0EEC
    3fb2:	f0 91 ed 0e 	lds	r31, 0x0EED
    3fb6:	09 95       	icall
}
    3fb8:	ff 91       	pop	r31
    3fba:	ef 91       	pop	r30
    3fbc:	bf 91       	pop	r27
    3fbe:	af 91       	pop	r26
    3fc0:	9f 91       	pop	r25
    3fc2:	8f 91       	pop	r24
    3fc4:	7f 91       	pop	r23
    3fc6:	6f 91       	pop	r22
    3fc8:	5f 91       	pop	r21
    3fca:	4f 91       	pop	r20
    3fcc:	3f 91       	pop	r19
    3fce:	2f 91       	pop	r18
    3fd0:	0f 90       	pop	r0
    3fd2:	0f be       	out	0x3f, r0	; 63
    3fd4:	0f 90       	pop	r0
    3fd6:	1f 90       	pop	r1
    3fd8:	18 95       	reti

00003fda <__vector_18>:
{
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPA_interrupt);
}
*/
ISR(TIMER1_COMPB_vect)
{
    3fda:	1f 92       	push	r1
    3fdc:	0f 92       	push	r0
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	0f 92       	push	r0
    3fe2:	11 24       	eor	r1, r1
    3fe4:	2f 93       	push	r18
    3fe6:	3f 93       	push	r19
    3fe8:	4f 93       	push	r20
    3fea:	5f 93       	push	r21
    3fec:	6f 93       	push	r22
    3fee:	7f 93       	push	r23
    3ff0:	8f 93       	push	r24
    3ff2:	9f 93       	push	r25
    3ff4:	af 93       	push	r26
    3ff6:	bf 93       	push	r27
    3ff8:	ef 93       	push	r30
    3ffa:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPB_interrupt);
    3ffc:	80 91 f0 0e 	lds	r24, 0x0EF0
    4000:	90 91 f1 0e 	lds	r25, 0x0EF1
    4004:	89 2b       	or	r24, r25
    4006:	29 f0       	breq	.+10     	; 0x4012 <__vector_18+0x38>
    4008:	e0 91 f0 0e 	lds	r30, 0x0EF0
    400c:	f0 91 f1 0e 	lds	r31, 0x0EF1
    4010:	09 95       	icall
}
    4012:	ff 91       	pop	r31
    4014:	ef 91       	pop	r30
    4016:	bf 91       	pop	r27
    4018:	af 91       	pop	r26
    401a:	9f 91       	pop	r25
    401c:	8f 91       	pop	r24
    401e:	7f 91       	pop	r23
    4020:	6f 91       	pop	r22
    4022:	5f 91       	pop	r21
    4024:	4f 91       	pop	r20
    4026:	3f 91       	pop	r19
    4028:	2f 91       	pop	r18
    402a:	0f 90       	pop	r0
    402c:	0f be       	out	0x3f, r0	; 63
    402e:	0f 90       	pop	r0
    4030:	1f 90       	pop	r1
    4032:	18 95       	reti

00004034 <__vector_19>:
ISR(TIMER1_COMPC_vect)
{
    4034:	1f 92       	push	r1
    4036:	0f 92       	push	r0
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	0f 92       	push	r0
    403c:	11 24       	eor	r1, r1
    403e:	2f 93       	push	r18
    4040:	3f 93       	push	r19
    4042:	4f 93       	push	r20
    4044:	5f 93       	push	r21
    4046:	6f 93       	push	r22
    4048:	7f 93       	push	r23
    404a:	8f 93       	push	r24
    404c:	9f 93       	push	r25
    404e:	af 93       	push	r26
    4050:	bf 93       	push	r27
    4052:	ef 93       	push	r30
    4054:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPC_interrupt);
    4056:	80 91 f2 0e 	lds	r24, 0x0EF2
    405a:	90 91 f3 0e 	lds	r25, 0x0EF3
    405e:	89 2b       	or	r24, r25
    4060:	29 f0       	breq	.+10     	; 0x406c <__vector_19+0x38>
    4062:	e0 91 f2 0e 	lds	r30, 0x0EF2
    4066:	f0 91 f3 0e 	lds	r31, 0x0EF3
    406a:	09 95       	icall
}
    406c:	ff 91       	pop	r31
    406e:	ef 91       	pop	r30
    4070:	bf 91       	pop	r27
    4072:	af 91       	pop	r26
    4074:	9f 91       	pop	r25
    4076:	8f 91       	pop	r24
    4078:	7f 91       	pop	r23
    407a:	6f 91       	pop	r22
    407c:	5f 91       	pop	r21
    407e:	4f 91       	pop	r20
    4080:	3f 91       	pop	r19
    4082:	2f 91       	pop	r18
    4084:	0f 90       	pop	r0
    4086:	0f be       	out	0x3f, r0	; 63
    4088:	0f 90       	pop	r0
    408a:	1f 90       	pop	r1
    408c:	18 95       	reti

0000408e <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
    408e:	1f 92       	push	r1
    4090:	0f 92       	push	r0
    4092:	0f b6       	in	r0, 0x3f	; 63
    4094:	0f 92       	push	r0
    4096:	11 24       	eor	r1, r1
    4098:	2f 93       	push	r18
    409a:	3f 93       	push	r19
    409c:	4f 93       	push	r20
    409e:	5f 93       	push	r21
    40a0:	6f 93       	push	r22
    40a2:	7f 93       	push	r23
    40a4:	8f 93       	push	r24
    40a6:	9f 93       	push	r25
    40a8:	af 93       	push	r26
    40aa:	bf 93       	push	r27
    40ac:	ef 93       	push	r30
    40ae:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPA_interrupt);
    40b0:	80 91 f6 0e 	lds	r24, 0x0EF6
    40b4:	90 91 f7 0e 	lds	r25, 0x0EF7
    40b8:	89 2b       	or	r24, r25
    40ba:	29 f0       	breq	.+10     	; 0x40c6 <__vector_13+0x38>
    40bc:	e0 91 f6 0e 	lds	r30, 0x0EF6
    40c0:	f0 91 f7 0e 	lds	r31, 0x0EF7
    40c4:	09 95       	icall
}
    40c6:	ff 91       	pop	r31
    40c8:	ef 91       	pop	r30
    40ca:	bf 91       	pop	r27
    40cc:	af 91       	pop	r26
    40ce:	9f 91       	pop	r25
    40d0:	8f 91       	pop	r24
    40d2:	7f 91       	pop	r23
    40d4:	6f 91       	pop	r22
    40d6:	5f 91       	pop	r21
    40d8:	4f 91       	pop	r20
    40da:	3f 91       	pop	r19
    40dc:	2f 91       	pop	r18
    40de:	0f 90       	pop	r0
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	0f 90       	pop	r0
    40e4:	1f 90       	pop	r1
    40e6:	18 95       	reti

000040e8 <__vector_14>:
ISR(TIMER2_COMPB_vect)
{
    40e8:	1f 92       	push	r1
    40ea:	0f 92       	push	r0
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	0f 92       	push	r0
    40f0:	11 24       	eor	r1, r1
    40f2:	2f 93       	push	r18
    40f4:	3f 93       	push	r19
    40f6:	4f 93       	push	r20
    40f8:	5f 93       	push	r21
    40fa:	6f 93       	push	r22
    40fc:	7f 93       	push	r23
    40fe:	8f 93       	push	r24
    4100:	9f 93       	push	r25
    4102:	af 93       	push	r26
    4104:	bf 93       	push	r27
    4106:	ef 93       	push	r30
    4108:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPB_interrupt);
    410a:	80 91 f8 0e 	lds	r24, 0x0EF8
    410e:	90 91 f9 0e 	lds	r25, 0x0EF9
    4112:	89 2b       	or	r24, r25
    4114:	29 f0       	breq	.+10     	; 0x4120 <__vector_14+0x38>
    4116:	e0 91 f8 0e 	lds	r30, 0x0EF8
    411a:	f0 91 f9 0e 	lds	r31, 0x0EF9
    411e:	09 95       	icall
}
    4120:	ff 91       	pop	r31
    4122:	ef 91       	pop	r30
    4124:	bf 91       	pop	r27
    4126:	af 91       	pop	r26
    4128:	9f 91       	pop	r25
    412a:	8f 91       	pop	r24
    412c:	7f 91       	pop	r23
    412e:	6f 91       	pop	r22
    4130:	5f 91       	pop	r21
    4132:	4f 91       	pop	r20
    4134:	3f 91       	pop	r19
    4136:	2f 91       	pop	r18
    4138:	0f 90       	pop	r0
    413a:	0f be       	out	0x3f, r0	; 63
    413c:	0f 90       	pop	r0
    413e:	1f 90       	pop	r1
    4140:	18 95       	reti

00004142 <__vector_31>:
ISR(TIMER3_CAPT_vect)
{
    4142:	1f 92       	push	r1
    4144:	0f 92       	push	r0
    4146:	0f b6       	in	r0, 0x3f	; 63
    4148:	0f 92       	push	r0
    414a:	11 24       	eor	r1, r1
    414c:	2f 93       	push	r18
    414e:	3f 93       	push	r19
    4150:	4f 93       	push	r20
    4152:	5f 93       	push	r21
    4154:	6f 93       	push	r22
    4156:	7f 93       	push	r23
    4158:	8f 93       	push	r24
    415a:	9f 93       	push	r25
    415c:	af 93       	push	r26
    415e:	bf 93       	push	r27
    4160:	ef 93       	push	r30
    4162:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_CAPT_interrupt);
    4164:	80 91 fc 0e 	lds	r24, 0x0EFC
    4168:	90 91 fd 0e 	lds	r25, 0x0EFD
    416c:	89 2b       	or	r24, r25
    416e:	29 f0       	breq	.+10     	; 0x417a <__vector_31+0x38>
    4170:	e0 91 fc 0e 	lds	r30, 0x0EFC
    4174:	f0 91 fd 0e 	lds	r31, 0x0EFD
    4178:	09 95       	icall
}
    417a:	ff 91       	pop	r31
    417c:	ef 91       	pop	r30
    417e:	bf 91       	pop	r27
    4180:	af 91       	pop	r26
    4182:	9f 91       	pop	r25
    4184:	8f 91       	pop	r24
    4186:	7f 91       	pop	r23
    4188:	6f 91       	pop	r22
    418a:	5f 91       	pop	r21
    418c:	4f 91       	pop	r20
    418e:	3f 91       	pop	r19
    4190:	2f 91       	pop	r18
    4192:	0f 90       	pop	r0
    4194:	0f be       	out	0x3f, r0	; 63
    4196:	0f 90       	pop	r0
    4198:	1f 90       	pop	r1
    419a:	18 95       	reti

0000419c <__vector_32>:
ISR(TIMER3_COMPA_vect)
{
    419c:	1f 92       	push	r1
    419e:	0f 92       	push	r0
    41a0:	0f b6       	in	r0, 0x3f	; 63
    41a2:	0f 92       	push	r0
    41a4:	11 24       	eor	r1, r1
    41a6:	2f 93       	push	r18
    41a8:	3f 93       	push	r19
    41aa:	4f 93       	push	r20
    41ac:	5f 93       	push	r21
    41ae:	6f 93       	push	r22
    41b0:	7f 93       	push	r23
    41b2:	8f 93       	push	r24
    41b4:	9f 93       	push	r25
    41b6:	af 93       	push	r26
    41b8:	bf 93       	push	r27
    41ba:	ef 93       	push	r30
    41bc:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPA_interrupt);
    41be:	80 91 fe 0e 	lds	r24, 0x0EFE
    41c2:	90 91 ff 0e 	lds	r25, 0x0EFF
    41c6:	89 2b       	or	r24, r25
    41c8:	29 f0       	breq	.+10     	; 0x41d4 <__vector_32+0x38>
    41ca:	e0 91 fe 0e 	lds	r30, 0x0EFE
    41ce:	f0 91 ff 0e 	lds	r31, 0x0EFF
    41d2:	09 95       	icall
}
    41d4:	ff 91       	pop	r31
    41d6:	ef 91       	pop	r30
    41d8:	bf 91       	pop	r27
    41da:	af 91       	pop	r26
    41dc:	9f 91       	pop	r25
    41de:	8f 91       	pop	r24
    41e0:	7f 91       	pop	r23
    41e2:	6f 91       	pop	r22
    41e4:	5f 91       	pop	r21
    41e6:	4f 91       	pop	r20
    41e8:	3f 91       	pop	r19
    41ea:	2f 91       	pop	r18
    41ec:	0f 90       	pop	r0
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	0f 90       	pop	r0
    41f2:	1f 90       	pop	r1
    41f4:	18 95       	reti

000041f6 <__vector_33>:
ISR(TIMER3_COMPB_vect)
{
    41f6:	1f 92       	push	r1
    41f8:	0f 92       	push	r0
    41fa:	0f b6       	in	r0, 0x3f	; 63
    41fc:	0f 92       	push	r0
    41fe:	11 24       	eor	r1, r1
    4200:	2f 93       	push	r18
    4202:	3f 93       	push	r19
    4204:	4f 93       	push	r20
    4206:	5f 93       	push	r21
    4208:	6f 93       	push	r22
    420a:	7f 93       	push	r23
    420c:	8f 93       	push	r24
    420e:	9f 93       	push	r25
    4210:	af 93       	push	r26
    4212:	bf 93       	push	r27
    4214:	ef 93       	push	r30
    4216:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPB_interrupt);
    4218:	80 91 00 0f 	lds	r24, 0x0F00
    421c:	90 91 01 0f 	lds	r25, 0x0F01
    4220:	89 2b       	or	r24, r25
    4222:	29 f0       	breq	.+10     	; 0x422e <__vector_33+0x38>
    4224:	e0 91 00 0f 	lds	r30, 0x0F00
    4228:	f0 91 01 0f 	lds	r31, 0x0F01
    422c:	09 95       	icall
}
    422e:	ff 91       	pop	r31
    4230:	ef 91       	pop	r30
    4232:	bf 91       	pop	r27
    4234:	af 91       	pop	r26
    4236:	9f 91       	pop	r25
    4238:	8f 91       	pop	r24
    423a:	7f 91       	pop	r23
    423c:	6f 91       	pop	r22
    423e:	5f 91       	pop	r21
    4240:	4f 91       	pop	r20
    4242:	3f 91       	pop	r19
    4244:	2f 91       	pop	r18
    4246:	0f 90       	pop	r0
    4248:	0f be       	out	0x3f, r0	; 63
    424a:	0f 90       	pop	r0
    424c:	1f 90       	pop	r1
    424e:	18 95       	reti

00004250 <__vector_34>:
ISR(TIMER3_COMPC_vect)
{
    4250:	1f 92       	push	r1
    4252:	0f 92       	push	r0
    4254:	0f b6       	in	r0, 0x3f	; 63
    4256:	0f 92       	push	r0
    4258:	11 24       	eor	r1, r1
    425a:	2f 93       	push	r18
    425c:	3f 93       	push	r19
    425e:	4f 93       	push	r20
    4260:	5f 93       	push	r21
    4262:	6f 93       	push	r22
    4264:	7f 93       	push	r23
    4266:	8f 93       	push	r24
    4268:	9f 93       	push	r25
    426a:	af 93       	push	r26
    426c:	bf 93       	push	r27
    426e:	ef 93       	push	r30
    4270:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPC_interrupt);
    4272:	80 91 02 0f 	lds	r24, 0x0F02
    4276:	90 91 03 0f 	lds	r25, 0x0F03
    427a:	89 2b       	or	r24, r25
    427c:	29 f0       	breq	.+10     	; 0x4288 <__vector_34+0x38>
    427e:	e0 91 02 0f 	lds	r30, 0x0F02
    4282:	f0 91 03 0f 	lds	r31, 0x0F03
    4286:	09 95       	icall
}
    4288:	ff 91       	pop	r31
    428a:	ef 91       	pop	r30
    428c:	bf 91       	pop	r27
    428e:	af 91       	pop	r26
    4290:	9f 91       	pop	r25
    4292:	8f 91       	pop	r24
    4294:	7f 91       	pop	r23
    4296:	6f 91       	pop	r22
    4298:	5f 91       	pop	r21
    429a:	4f 91       	pop	r20
    429c:	3f 91       	pop	r19
    429e:	2f 91       	pop	r18
    42a0:	0f 90       	pop	r0
    42a2:	0f be       	out	0x3f, r0	; 63
    42a4:	0f 90       	pop	r0
    42a6:	1f 90       	pop	r1
    42a8:	18 95       	reti

000042aa <__vector_41>:
ISR(TIMER4_CAPT_vect)
{
    42aa:	1f 92       	push	r1
    42ac:	0f 92       	push	r0
    42ae:	0f b6       	in	r0, 0x3f	; 63
    42b0:	0f 92       	push	r0
    42b2:	11 24       	eor	r1, r1
    42b4:	2f 93       	push	r18
    42b6:	3f 93       	push	r19
    42b8:	4f 93       	push	r20
    42ba:	5f 93       	push	r21
    42bc:	6f 93       	push	r22
    42be:	7f 93       	push	r23
    42c0:	8f 93       	push	r24
    42c2:	9f 93       	push	r25
    42c4:	af 93       	push	r26
    42c6:	bf 93       	push	r27
    42c8:	ef 93       	push	r30
    42ca:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_CAPT_interrupt);
    42cc:	80 91 06 0f 	lds	r24, 0x0F06
    42d0:	90 91 07 0f 	lds	r25, 0x0F07
    42d4:	89 2b       	or	r24, r25
    42d6:	29 f0       	breq	.+10     	; 0x42e2 <__vector_41+0x38>
    42d8:	e0 91 06 0f 	lds	r30, 0x0F06
    42dc:	f0 91 07 0f 	lds	r31, 0x0F07
    42e0:	09 95       	icall
}
    42e2:	ff 91       	pop	r31
    42e4:	ef 91       	pop	r30
    42e6:	bf 91       	pop	r27
    42e8:	af 91       	pop	r26
    42ea:	9f 91       	pop	r25
    42ec:	8f 91       	pop	r24
    42ee:	7f 91       	pop	r23
    42f0:	6f 91       	pop	r22
    42f2:	5f 91       	pop	r21
    42f4:	4f 91       	pop	r20
    42f6:	3f 91       	pop	r19
    42f8:	2f 91       	pop	r18
    42fa:	0f 90       	pop	r0
    42fc:	0f be       	out	0x3f, r0	; 63
    42fe:	0f 90       	pop	r0
    4300:	1f 90       	pop	r1
    4302:	18 95       	reti

00004304 <__vector_42>:
ISR(TIMER4_COMPA_vect)
{
    4304:	1f 92       	push	r1
    4306:	0f 92       	push	r0
    4308:	0f b6       	in	r0, 0x3f	; 63
    430a:	0f 92       	push	r0
    430c:	11 24       	eor	r1, r1
    430e:	2f 93       	push	r18
    4310:	3f 93       	push	r19
    4312:	4f 93       	push	r20
    4314:	5f 93       	push	r21
    4316:	6f 93       	push	r22
    4318:	7f 93       	push	r23
    431a:	8f 93       	push	r24
    431c:	9f 93       	push	r25
    431e:	af 93       	push	r26
    4320:	bf 93       	push	r27
    4322:	ef 93       	push	r30
    4324:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPA_interrupt);
    4326:	80 91 08 0f 	lds	r24, 0x0F08
    432a:	90 91 09 0f 	lds	r25, 0x0F09
    432e:	89 2b       	or	r24, r25
    4330:	29 f0       	breq	.+10     	; 0x433c <__vector_42+0x38>
    4332:	e0 91 08 0f 	lds	r30, 0x0F08
    4336:	f0 91 09 0f 	lds	r31, 0x0F09
    433a:	09 95       	icall
}
    433c:	ff 91       	pop	r31
    433e:	ef 91       	pop	r30
    4340:	bf 91       	pop	r27
    4342:	af 91       	pop	r26
    4344:	9f 91       	pop	r25
    4346:	8f 91       	pop	r24
    4348:	7f 91       	pop	r23
    434a:	6f 91       	pop	r22
    434c:	5f 91       	pop	r21
    434e:	4f 91       	pop	r20
    4350:	3f 91       	pop	r19
    4352:	2f 91       	pop	r18
    4354:	0f 90       	pop	r0
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	0f 90       	pop	r0
    435a:	1f 90       	pop	r1
    435c:	18 95       	reti

0000435e <__vector_43>:
ISR(TIMER4_COMPB_vect)
{
    435e:	1f 92       	push	r1
    4360:	0f 92       	push	r0
    4362:	0f b6       	in	r0, 0x3f	; 63
    4364:	0f 92       	push	r0
    4366:	11 24       	eor	r1, r1
    4368:	2f 93       	push	r18
    436a:	3f 93       	push	r19
    436c:	4f 93       	push	r20
    436e:	5f 93       	push	r21
    4370:	6f 93       	push	r22
    4372:	7f 93       	push	r23
    4374:	8f 93       	push	r24
    4376:	9f 93       	push	r25
    4378:	af 93       	push	r26
    437a:	bf 93       	push	r27
    437c:	ef 93       	push	r30
    437e:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPB_interrupt);
    4380:	80 91 0a 0f 	lds	r24, 0x0F0A
    4384:	90 91 0b 0f 	lds	r25, 0x0F0B
    4388:	89 2b       	or	r24, r25
    438a:	29 f0       	breq	.+10     	; 0x4396 <__vector_43+0x38>
    438c:	e0 91 0a 0f 	lds	r30, 0x0F0A
    4390:	f0 91 0b 0f 	lds	r31, 0x0F0B
    4394:	09 95       	icall
}
    4396:	ff 91       	pop	r31
    4398:	ef 91       	pop	r30
    439a:	bf 91       	pop	r27
    439c:	af 91       	pop	r26
    439e:	9f 91       	pop	r25
    43a0:	8f 91       	pop	r24
    43a2:	7f 91       	pop	r23
    43a4:	6f 91       	pop	r22
    43a6:	5f 91       	pop	r21
    43a8:	4f 91       	pop	r20
    43aa:	3f 91       	pop	r19
    43ac:	2f 91       	pop	r18
    43ae:	0f 90       	pop	r0
    43b0:	0f be       	out	0x3f, r0	; 63
    43b2:	0f 90       	pop	r0
    43b4:	1f 90       	pop	r1
    43b6:	18 95       	reti

000043b8 <__vector_44>:
ISR(TIMER4_COMPC_vect)
{
    43b8:	1f 92       	push	r1
    43ba:	0f 92       	push	r0
    43bc:	0f b6       	in	r0, 0x3f	; 63
    43be:	0f 92       	push	r0
    43c0:	11 24       	eor	r1, r1
    43c2:	2f 93       	push	r18
    43c4:	3f 93       	push	r19
    43c6:	4f 93       	push	r20
    43c8:	5f 93       	push	r21
    43ca:	6f 93       	push	r22
    43cc:	7f 93       	push	r23
    43ce:	8f 93       	push	r24
    43d0:	9f 93       	push	r25
    43d2:	af 93       	push	r26
    43d4:	bf 93       	push	r27
    43d6:	ef 93       	push	r30
    43d8:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPC_interrupt);
    43da:	80 91 0c 0f 	lds	r24, 0x0F0C
    43de:	90 91 0d 0f 	lds	r25, 0x0F0D
    43e2:	89 2b       	or	r24, r25
    43e4:	29 f0       	breq	.+10     	; 0x43f0 <__vector_44+0x38>
    43e6:	e0 91 0c 0f 	lds	r30, 0x0F0C
    43ea:	f0 91 0d 0f 	lds	r31, 0x0F0D
    43ee:	09 95       	icall
}
    43f0:	ff 91       	pop	r31
    43f2:	ef 91       	pop	r30
    43f4:	bf 91       	pop	r27
    43f6:	af 91       	pop	r26
    43f8:	9f 91       	pop	r25
    43fa:	8f 91       	pop	r24
    43fc:	7f 91       	pop	r23
    43fe:	6f 91       	pop	r22
    4400:	5f 91       	pop	r21
    4402:	4f 91       	pop	r20
    4404:	3f 91       	pop	r19
    4406:	2f 91       	pop	r18
    4408:	0f 90       	pop	r0
    440a:	0f be       	out	0x3f, r0	; 63
    440c:	0f 90       	pop	r0
    440e:	1f 90       	pop	r1
    4410:	18 95       	reti

00004412 <__vector_46>:
ISR(TIMER5_CAPT_vect)
{
    4412:	1f 92       	push	r1
    4414:	0f 92       	push	r0
    4416:	0f b6       	in	r0, 0x3f	; 63
    4418:	0f 92       	push	r0
    441a:	11 24       	eor	r1, r1
    441c:	2f 93       	push	r18
    441e:	3f 93       	push	r19
    4420:	4f 93       	push	r20
    4422:	5f 93       	push	r21
    4424:	6f 93       	push	r22
    4426:	7f 93       	push	r23
    4428:	8f 93       	push	r24
    442a:	9f 93       	push	r25
    442c:	af 93       	push	r26
    442e:	bf 93       	push	r27
    4430:	ef 93       	push	r30
    4432:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_CAPT_interrupt);
    4434:	80 91 10 0f 	lds	r24, 0x0F10
    4438:	90 91 11 0f 	lds	r25, 0x0F11
    443c:	89 2b       	or	r24, r25
    443e:	29 f0       	breq	.+10     	; 0x444a <__vector_46+0x38>
    4440:	e0 91 10 0f 	lds	r30, 0x0F10
    4444:	f0 91 11 0f 	lds	r31, 0x0F11
    4448:	09 95       	icall
}
    444a:	ff 91       	pop	r31
    444c:	ef 91       	pop	r30
    444e:	bf 91       	pop	r27
    4450:	af 91       	pop	r26
    4452:	9f 91       	pop	r25
    4454:	8f 91       	pop	r24
    4456:	7f 91       	pop	r23
    4458:	6f 91       	pop	r22
    445a:	5f 91       	pop	r21
    445c:	4f 91       	pop	r20
    445e:	3f 91       	pop	r19
    4460:	2f 91       	pop	r18
    4462:	0f 90       	pop	r0
    4464:	0f be       	out	0x3f, r0	; 63
    4466:	0f 90       	pop	r0
    4468:	1f 90       	pop	r1
    446a:	18 95       	reti

0000446c <__vector_47>:
ISR(TIMER5_COMPA_vect)
{
    446c:	1f 92       	push	r1
    446e:	0f 92       	push	r0
    4470:	0f b6       	in	r0, 0x3f	; 63
    4472:	0f 92       	push	r0
    4474:	11 24       	eor	r1, r1
    4476:	2f 93       	push	r18
    4478:	3f 93       	push	r19
    447a:	4f 93       	push	r20
    447c:	5f 93       	push	r21
    447e:	6f 93       	push	r22
    4480:	7f 93       	push	r23
    4482:	8f 93       	push	r24
    4484:	9f 93       	push	r25
    4486:	af 93       	push	r26
    4488:	bf 93       	push	r27
    448a:	ef 93       	push	r30
    448c:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPA_interrupt);
    448e:	80 91 12 0f 	lds	r24, 0x0F12
    4492:	90 91 13 0f 	lds	r25, 0x0F13
    4496:	89 2b       	or	r24, r25
    4498:	29 f0       	breq	.+10     	; 0x44a4 <__vector_47+0x38>
    449a:	e0 91 12 0f 	lds	r30, 0x0F12
    449e:	f0 91 13 0f 	lds	r31, 0x0F13
    44a2:	09 95       	icall
}
    44a4:	ff 91       	pop	r31
    44a6:	ef 91       	pop	r30
    44a8:	bf 91       	pop	r27
    44aa:	af 91       	pop	r26
    44ac:	9f 91       	pop	r25
    44ae:	8f 91       	pop	r24
    44b0:	7f 91       	pop	r23
    44b2:	6f 91       	pop	r22
    44b4:	5f 91       	pop	r21
    44b6:	4f 91       	pop	r20
    44b8:	3f 91       	pop	r19
    44ba:	2f 91       	pop	r18
    44bc:	0f 90       	pop	r0
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	0f 90       	pop	r0
    44c2:	1f 90       	pop	r1
    44c4:	18 95       	reti

000044c6 <__vector_48>:
ISR(TIMER5_COMPB_vect)
{
    44c6:	1f 92       	push	r1
    44c8:	0f 92       	push	r0
    44ca:	0f b6       	in	r0, 0x3f	; 63
    44cc:	0f 92       	push	r0
    44ce:	11 24       	eor	r1, r1
    44d0:	2f 93       	push	r18
    44d2:	3f 93       	push	r19
    44d4:	4f 93       	push	r20
    44d6:	5f 93       	push	r21
    44d8:	6f 93       	push	r22
    44da:	7f 93       	push	r23
    44dc:	8f 93       	push	r24
    44de:	9f 93       	push	r25
    44e0:	af 93       	push	r26
    44e2:	bf 93       	push	r27
    44e4:	ef 93       	push	r30
    44e6:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPB_interrupt);
    44e8:	80 91 14 0f 	lds	r24, 0x0F14
    44ec:	90 91 15 0f 	lds	r25, 0x0F15
    44f0:	89 2b       	or	r24, r25
    44f2:	29 f0       	breq	.+10     	; 0x44fe <__vector_48+0x38>
    44f4:	e0 91 14 0f 	lds	r30, 0x0F14
    44f8:	f0 91 15 0f 	lds	r31, 0x0F15
    44fc:	09 95       	icall
}
    44fe:	ff 91       	pop	r31
    4500:	ef 91       	pop	r30
    4502:	bf 91       	pop	r27
    4504:	af 91       	pop	r26
    4506:	9f 91       	pop	r25
    4508:	8f 91       	pop	r24
    450a:	7f 91       	pop	r23
    450c:	6f 91       	pop	r22
    450e:	5f 91       	pop	r21
    4510:	4f 91       	pop	r20
    4512:	3f 91       	pop	r19
    4514:	2f 91       	pop	r18
    4516:	0f 90       	pop	r0
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	0f 90       	pop	r0
    451c:	1f 90       	pop	r1
    451e:	18 95       	reti

00004520 <__vector_49>:
ISR(TIMER5_COMPC_vect)
{
    4520:	1f 92       	push	r1
    4522:	0f 92       	push	r0
    4524:	0f b6       	in	r0, 0x3f	; 63
    4526:	0f 92       	push	r0
    4528:	11 24       	eor	r1, r1
    452a:	2f 93       	push	r18
    452c:	3f 93       	push	r19
    452e:	4f 93       	push	r20
    4530:	5f 93       	push	r21
    4532:	6f 93       	push	r22
    4534:	7f 93       	push	r23
    4536:	8f 93       	push	r24
    4538:	9f 93       	push	r25
    453a:	af 93       	push	r26
    453c:	bf 93       	push	r27
    453e:	ef 93       	push	r30
    4540:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPC_interrupt);
    4542:	80 91 16 0f 	lds	r24, 0x0F16
    4546:	90 91 17 0f 	lds	r25, 0x0F17
    454a:	89 2b       	or	r24, r25
    454c:	29 f0       	breq	.+10     	; 0x4558 <__vector_49+0x38>
    454e:	e0 91 16 0f 	lds	r30, 0x0F16
    4552:	f0 91 17 0f 	lds	r31, 0x0F17
    4556:	09 95       	icall
}
    4558:	ff 91       	pop	r31
    455a:	ef 91       	pop	r30
    455c:	bf 91       	pop	r27
    455e:	af 91       	pop	r26
    4560:	9f 91       	pop	r25
    4562:	8f 91       	pop	r24
    4564:	7f 91       	pop	r23
    4566:	6f 91       	pop	r22
    4568:	5f 91       	pop	r21
    456a:	4f 91       	pop	r20
    456c:	3f 91       	pop	r19
    456e:	2f 91       	pop	r18
    4570:	0f 90       	pop	r0
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	0f 90       	pop	r0
    4576:	1f 90       	pop	r1
    4578:	18 95       	reti

0000457a <__vector_default>:

ISR(BADISR_vect)
{
    457a:	1f 92       	push	r1
    457c:	0f 92       	push	r0
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	0f 92       	push	r0
    4582:	11 24       	eor	r1, r1
    4584:	2f 93       	push	r18
    4586:	3f 93       	push	r19
    4588:	4f 93       	push	r20
    458a:	5f 93       	push	r21
    458c:	6f 93       	push	r22
    458e:	7f 93       	push	r23
    4590:	8f 93       	push	r24
    4592:	9f 93       	push	r25
    4594:	af 93       	push	r26
    4596:	bf 93       	push	r27
    4598:	ef 93       	push	r30
    459a:	ff 93       	push	r31
  rprintf("BAD_vect called!");
    459c:	00 d0       	rcall	.+0      	; 0x459e <__vector_default+0x24>
    459e:	0f 92       	push	r0
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	ed b7       	in	r30, 0x3d	; 61
    45a4:	fe b7       	in	r31, 0x3e	; 62
    45a6:	81 83       	std	Z+1, r24	; 0x01
    45a8:	8c e2       	ldi	r24, 0x2C	; 44
    45aa:	92 e0       	ldi	r25, 0x02	; 2
    45ac:	93 83       	std	Z+3, r25	; 0x03
    45ae:	82 83       	std	Z+2, r24	; 0x02
    45b0:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <rprintf1RamRom>
    45b4:	0f 90       	pop	r0
    45b6:	0f 90       	pop	r0
    45b8:	0f 90       	pop	r0
}
    45ba:	ff 91       	pop	r31
    45bc:	ef 91       	pop	r30
    45be:	bf 91       	pop	r27
    45c0:	af 91       	pop	r26
    45c2:	9f 91       	pop	r25
    45c4:	8f 91       	pop	r24
    45c6:	7f 91       	pop	r23
    45c8:	6f 91       	pop	r22
    45ca:	5f 91       	pop	r21
    45cc:	4f 91       	pop	r20
    45ce:	3f 91       	pop	r19
    45d0:	2f 91       	pop	r18
    45d2:	0f 90       	pop	r0
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	0f 90       	pop	r0
    45d8:	1f 90       	pop	r1
    45da:	18 95       	reti

000045dc <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
    45dc:	84 30       	cpi	r24, 0x04	; 4
    45de:	40 f4       	brcc	.+16     	; 0x45f0 <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
    45e0:	e8 2f       	mov	r30, r24
    45e2:	f0 e0       	ldi	r31, 0x00	; 0
    45e4:	ee 0f       	add	r30, r30
    45e6:	ff 1f       	adc	r31, r31
    45e8:	e6 5a       	subi	r30, 0xA6	; 166
    45ea:	fe 4e       	sbci	r31, 0xEE	; 238
    45ec:	71 83       	std	Z+1, r23	; 0x01
    45ee:	60 83       	st	Z, r22
    45f0:	08 95       	ret

000045f2 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
    45f2:	1f 93       	push	r17
    45f4:	18 2f       	mov	r17, r24
    45f6:	9a 01       	movw	r18, r20
    45f8:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    45fa:	ca 01       	movw	r24, r20
    45fc:	b9 01       	movw	r22, r18
    45fe:	60 58       	subi	r22, 0x80	; 128
    4600:	7b 47       	sbci	r23, 0x7B	; 123
    4602:	81 4e       	sbci	r24, 0xE1	; 225
    4604:	9f 4f       	sbci	r25, 0xFF	; 255
    4606:	f3 e0       	ldi	r31, 0x03	; 3
    4608:	66 0f       	add	r22, r22
    460a:	77 1f       	adc	r23, r23
    460c:	88 1f       	adc	r24, r24
    460e:	99 1f       	adc	r25, r25
    4610:	fa 95       	dec	r31
    4612:	d1 f7       	brne	.-12     	; 0x4608 <uartSetBaudRate+0x16>
    4614:	e4 e0       	ldi	r30, 0x04	; 4
    4616:	22 0f       	add	r18, r18
    4618:	33 1f       	adc	r19, r19
    461a:	44 1f       	adc	r20, r20
    461c:	55 1f       	adc	r21, r21
    461e:	ea 95       	dec	r30
    4620:	d1 f7       	brne	.-12     	; 0x4616 <uartSetBaudRate+0x24>
    4622:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__udivmodsi4>
    4626:	21 50       	subi	r18, 0x01	; 1
    4628:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==3)
    462a:	13 30       	cpi	r17, 0x03	; 3
    462c:	29 f4       	brne	.+10     	; 0x4638 <uartSetBaudRate+0x46>
	{
		outb(UBRR3L, bauddiv);
    462e:	20 93 34 01 	sts	0x0134, r18
		#ifdef UBRR3H
		outb(UBRR3H, bauddiv>>8);
    4632:	30 93 35 01 	sts	0x0135, r19
    4636:	12 c0       	rjmp	.+36     	; 0x465c <uartSetBaudRate+0x6a>
		#endif
	}
	else if(nUart==2)
    4638:	12 30       	cpi	r17, 0x02	; 2
    463a:	29 f4       	brne	.+10     	; 0x4646 <uartSetBaudRate+0x54>
	{
		outb(UBRR2L, bauddiv);
    463c:	20 93 d4 00 	sts	0x00D4, r18
		#ifdef UBRR2H
		outb(UBRR2H, bauddiv>>8);
    4640:	30 93 d5 00 	sts	0x00D5, r19
    4644:	0b c0       	rjmp	.+22     	; 0x465c <uartSetBaudRate+0x6a>
		#endif
	}
	else if(nUart==1)
    4646:	11 30       	cpi	r17, 0x01	; 1
    4648:	29 f4       	brne	.+10     	; 0x4654 <uartSetBaudRate+0x62>
	{
		outb(UBRR1L, bauddiv);
    464a:	20 93 cc 00 	sts	0x00CC, r18
		#ifdef UBRR1H
		outb(UBRR1H, bauddiv>>8);
    464e:	30 93 cd 00 	sts	0x00CD, r19
    4652:	04 c0       	rjmp	.+8      	; 0x465c <uartSetBaudRate+0x6a>
		#endif
	}
	else
	{
		outb(UBRR0L, bauddiv);
    4654:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
    4658:	30 93 c5 00 	sts	0x00C5, r19
		#endif
	}
}
    465c:	1f 91       	pop	r17
    465e:	08 95       	ret

00004660 <uartGetRxBuffer>:

cBuffer* uartGetRxBuffer(u08 nUart)
{
    4660:	28 2f       	mov	r18, r24
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	a3 e0       	ldi	r26, 0x03	; 3
    4666:	22 0f       	add	r18, r18
    4668:	33 1f       	adc	r19, r19
    466a:	aa 95       	dec	r26
    466c:	e1 f7       	brne	.-8      	; 0x4666 <uartGetRxBuffer+0x6>
    466e:	22 53       	subi	r18, 0x32	; 50
    4670:	3e 4e       	sbci	r19, 0xEE	; 238
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
    4672:	c9 01       	movw	r24, r18
    4674:	08 95       	ret

00004676 <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
    4676:	28 2f       	mov	r18, r24
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	b3 e0       	ldi	r27, 0x03	; 3
    467c:	22 0f       	add	r18, r18
    467e:	33 1f       	adc	r19, r19
    4680:	ba 95       	dec	r27
    4682:	e1 f7       	brne	.-8      	; 0x467c <uartGetTxBuffer+0x6>
    4684:	2e 50       	subi	r18, 0x0E	; 14
    4686:	3e 4e       	sbci	r19, 0xEE	; 238
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
    4688:	c9 01       	movw	r24, r18
    468a:	08 95       	ret

0000468c <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
    468c:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==3)
    468e:	83 30       	cpi	r24, 0x03	; 3
    4690:	39 f4       	brne	.+14     	; 0x46a0 <uartSendByte+0x14>
	{
		while(!(UCSR3A & (1<<UDRE3)));
    4692:	80 91 30 01 	lds	r24, 0x0130
    4696:	85 ff       	sbrs	r24, 5
    4698:	fc cf       	rjmp	.-8      	; 0x4692 <uartSendByte+0x6>
		outb(UDR3, txData);
    469a:	60 93 36 01 	sts	0x0136, r22
    469e:	18 c0       	rjmp	.+48     	; 0x46d0 <uartSendByte+0x44>
	}
	else if(nUart==2)
    46a0:	82 30       	cpi	r24, 0x02	; 2
    46a2:	39 f4       	brne	.+14     	; 0x46b2 <uartSendByte+0x26>
	{
		while(!(UCSR2A & (1<<UDRE2)));
    46a4:	80 91 d0 00 	lds	r24, 0x00D0
    46a8:	85 ff       	sbrs	r24, 5
    46aa:	fc cf       	rjmp	.-8      	; 0x46a4 <uartSendByte+0x18>
		outb(UDR2, txData);
    46ac:	60 93 d6 00 	sts	0x00D6, r22
    46b0:	0f c0       	rjmp	.+30     	; 0x46d0 <uartSendByte+0x44>
	}
	else if(nUart==1)
    46b2:	81 30       	cpi	r24, 0x01	; 1
    46b4:	39 f4       	brne	.+14     	; 0x46c4 <uartSendByte+0x38>
	{
		while(!(UCSR1A & (1<<UDRE1)));
    46b6:	80 91 c8 00 	lds	r24, 0x00C8
    46ba:	85 ff       	sbrs	r24, 5
    46bc:	fc cf       	rjmp	.-8      	; 0x46b6 <uartSendByte+0x2a>
		outb(UDR1, txData);
    46be:	60 93 ce 00 	sts	0x00CE, r22
    46c2:	06 c0       	rjmp	.+12     	; 0x46d0 <uartSendByte+0x44>
	}
	else
	{
		while(!(UCSR0A & (1<<UDRE0)));
    46c4:	80 91 c0 00 	lds	r24, 0x00C0
    46c8:	85 ff       	sbrs	r24, 5
    46ca:	fc cf       	rjmp	.-8      	; 0x46c4 <uartSendByte+0x38>
		outb(UDR0, txData);
    46cc:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    46d0:	f0 e0       	ldi	r31, 0x00	; 0
    46d2:	e6 53       	subi	r30, 0x36	; 54
    46d4:	fe 4e       	sbci	r31, 0xEE	; 238
    46d6:	10 82       	st	Z, r1
}
    46d8:	08 95       	ret

000046da <uart0SendByte>:

void uart0SendByte(u08 data)
{
    46da:	68 2f       	mov	r22, r24
	// send byte on UART0
	uartSendByte(0, data);
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	0e 94 46 23 	call	0x468c	; 0x468c <uartSendByte>
}
    46e2:	08 95       	ret

000046e4 <uart1SendByte>:

void uart1SendByte(u08 data)
{
    46e4:	68 2f       	mov	r22, r24
	// send byte on UART1
	uartSendByte(1, data);
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	0e 94 46 23 	call	0x468c	; 0x468c <uartSendByte>
}
    46ec:	08 95       	ret

000046ee <uart2SendByte>:

void uart2SendByte(u08 data)
{
    46ee:	68 2f       	mov	r22, r24
	// send byte on UART2
	uartSendByte(2, data);
    46f0:	82 e0       	ldi	r24, 0x02	; 2
    46f2:	0e 94 46 23 	call	0x468c	; 0x468c <uartSendByte>
}
    46f6:	08 95       	ret

000046f8 <uart3SendByte>:

void uart3SendByte(u08 data)
{
    46f8:	68 2f       	mov	r22, r24
	// send byte on UART3
	uartSendByte(3, data);
    46fa:	83 e0       	ldi	r24, 0x03	; 3
    46fc:	0e 94 46 23 	call	0x468c	; 0x468c <uartSendByte>
}
    4700:	08 95       	ret

00004702 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	e8 2f       	mov	r30, r24
    4706:	f0 e0       	ldi	r31, 0x00	; 0
    4708:	83 e0       	ldi	r24, 0x03	; 3
    470a:	ee 0f       	add	r30, r30
    470c:	ff 1f       	adc	r31, r31
    470e:	8a 95       	dec	r24
    4710:	e1 f7       	brne	.-8      	; 0x470a <uartReceiveBufferIsEmpty+0x8>
    4712:	ee 52       	subi	r30, 0x2E	; 46
    4714:	fe 4e       	sbci	r31, 0xEE	; 238
    4716:	80 81       	ld	r24, Z
    4718:	91 81       	ldd	r25, Z+1	; 0x01
    471a:	89 2b       	or	r24, r25
    471c:	09 f4       	brne	.+2      	; 0x4720 <uartReceiveBufferIsEmpty+0x1e>
    471e:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
    4720:	82 2f       	mov	r24, r18
    4722:	08 95       	ret

00004724 <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    4724:	cf 93       	push	r28
    4726:	df 93       	push	r29
	u08 c;
	// get received char
	if(nUart==3)
    4728:	83 30       	cpi	r24, 0x03	; 3
    472a:	19 f4       	brne	.+6      	; 0x4732 <uartReceiveService+0xe>
		c = inb(UDR3);
    472c:	60 91 36 01 	lds	r22, 0x0136
    4730:	0c c0       	rjmp	.+24     	; 0x474a <uartReceiveService+0x26>
	else if(nUart==2)
    4732:	82 30       	cpi	r24, 0x02	; 2
    4734:	19 f4       	brne	.+6      	; 0x473c <uartReceiveService+0x18>
		c = inb(UDR2);
    4736:	60 91 d6 00 	lds	r22, 0x00D6
    473a:	07 c0       	rjmp	.+14     	; 0x474a <uartReceiveService+0x26>
	else if(nUart==1)
    473c:	81 30       	cpi	r24, 0x01	; 1
    473e:	19 f4       	brne	.+6      	; 0x4746 <uartReceiveService+0x22>
		c = inb(UDR1);
    4740:	60 91 ce 00 	lds	r22, 0x00CE
    4744:	02 c0       	rjmp	.+4      	; 0x474a <uartReceiveService+0x26>
	else
		c = inb(UDR0);
    4746:	60 91 c6 00 	lds	r22, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    474a:	28 2f       	mov	r18, r24
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	e9 01       	movw	r28, r18
    4750:	cc 0f       	add	r28, r28
    4752:	dd 1f       	adc	r29, r29
    4754:	fe 01       	movw	r30, r28
    4756:	e6 5a       	subi	r30, 0xA6	; 166
    4758:	fe 4e       	sbci	r31, 0xEE	; 238
    475a:	80 81       	ld	r24, Z
    475c:	91 81       	ldd	r25, Z+1	; 0x01
    475e:	89 2b       	or	r24, r25
    4760:	31 f0       	breq	.+12     	; 0x476e <uartReceiveService+0x4a>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    4762:	01 90       	ld	r0, Z+
    4764:	f0 81       	ld	r31, Z
    4766:	e0 2d       	mov	r30, r0
    4768:	86 2f       	mov	r24, r22
    476a:	09 95       	icall
    476c:	14 c0       	rjmp	.+40     	; 0x4796 <uartReceiveService+0x72>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    476e:	93 e0       	ldi	r25, 0x03	; 3
    4770:	22 0f       	add	r18, r18
    4772:	33 1f       	adc	r19, r19
    4774:	9a 95       	dec	r25
    4776:	e1 f7       	brne	.-8      	; 0x4770 <uartReceiveService+0x4c>
    4778:	c9 01       	movw	r24, r18
    477a:	82 53       	subi	r24, 0x32	; 50
    477c:	9e 4e       	sbci	r25, 0xEE	; 238
    477e:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <bufferAddToEnd>
    4782:	88 23       	and	r24, r24
    4784:	41 f4       	brne	.+16     	; 0x4796 <uartReceiveService+0x72>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    4786:	fe 01       	movw	r30, r28
    4788:	ee 5e       	subi	r30, 0xEE	; 238
    478a:	fd 4e       	sbci	r31, 0xED	; 237
    478c:	80 81       	ld	r24, Z
    478e:	91 81       	ldd	r25, Z+1	; 0x01
    4790:	01 96       	adiw	r24, 0x01	; 1
    4792:	91 83       	std	Z+1, r25	; 0x01
    4794:	80 83       	st	Z, r24
		}
	}
}
    4796:	df 91       	pop	r29
    4798:	cf 91       	pop	r28
    479a:	08 95       	ret

0000479c <__vector_54>:
{
	uartReceiveService(2);
}
*/
UART_INTERRUPT_HANDLER(SIG_USART3_RECV)      
{
    479c:	1f 92       	push	r1
    479e:	0f 92       	push	r0
    47a0:	0f b6       	in	r0, 0x3f	; 63
    47a2:	0f 92       	push	r0
    47a4:	11 24       	eor	r1, r1
    47a6:	2f 93       	push	r18
    47a8:	3f 93       	push	r19
    47aa:	4f 93       	push	r20
    47ac:	5f 93       	push	r21
    47ae:	6f 93       	push	r22
    47b0:	7f 93       	push	r23
    47b2:	8f 93       	push	r24
    47b4:	9f 93       	push	r25
    47b6:	af 93       	push	r26
    47b8:	bf 93       	push	r27
    47ba:	ef 93       	push	r30
    47bc:	ff 93       	push	r31
	uartReceiveService(3);
    47be:	83 e0       	ldi	r24, 0x03	; 3
    47c0:	0e 94 92 23 	call	0x4724	; 0x4724 <uartReceiveService>
}
    47c4:	ff 91       	pop	r31
    47c6:	ef 91       	pop	r30
    47c8:	bf 91       	pop	r27
    47ca:	af 91       	pop	r26
    47cc:	9f 91       	pop	r25
    47ce:	8f 91       	pop	r24
    47d0:	7f 91       	pop	r23
    47d2:	6f 91       	pop	r22
    47d4:	5f 91       	pop	r21
    47d6:	4f 91       	pop	r20
    47d8:	3f 91       	pop	r19
    47da:	2f 91       	pop	r18
    47dc:	0f 90       	pop	r0
    47de:	0f be       	out	0x3f, r0	; 63
    47e0:	0f 90       	pop	r0
    47e2:	1f 90       	pop	r1
    47e4:	18 95       	reti

000047e6 <__vector_36>:
	uartReceiveService(0);
}


UART_INTERRUPT_HANDLER(SIG_USART1_RECV)      
{
    47e6:	1f 92       	push	r1
    47e8:	0f 92       	push	r0
    47ea:	0f b6       	in	r0, 0x3f	; 63
    47ec:	0f 92       	push	r0
    47ee:	11 24       	eor	r1, r1
    47f0:	2f 93       	push	r18
    47f2:	3f 93       	push	r19
    47f4:	4f 93       	push	r20
    47f6:	5f 93       	push	r21
    47f8:	6f 93       	push	r22
    47fa:	7f 93       	push	r23
    47fc:	8f 93       	push	r24
    47fe:	9f 93       	push	r25
    4800:	af 93       	push	r26
    4802:	bf 93       	push	r27
    4804:	ef 93       	push	r30
    4806:	ff 93       	push	r31
	uartReceiveService(1);
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	0e 94 92 23 	call	0x4724	; 0x4724 <uartReceiveService>
}
    480e:	ff 91       	pop	r31
    4810:	ef 91       	pop	r30
    4812:	bf 91       	pop	r27
    4814:	af 91       	pop	r26
    4816:	9f 91       	pop	r25
    4818:	8f 91       	pop	r24
    481a:	7f 91       	pop	r23
    481c:	6f 91       	pop	r22
    481e:	5f 91       	pop	r21
    4820:	4f 91       	pop	r20
    4822:	3f 91       	pop	r19
    4824:	2f 91       	pop	r18
    4826:	0f 90       	pop	r0
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	0f 90       	pop	r0
    482c:	1f 90       	pop	r1
    482e:	18 95       	reti

00004830 <__vector_25>:
	uartTransmitService(3);
}

	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
    4830:	1f 92       	push	r1
    4832:	0f 92       	push	r0
    4834:	0f b6       	in	r0, 0x3f	; 63
    4836:	0f 92       	push	r0
    4838:	11 24       	eor	r1, r1
    483a:	2f 93       	push	r18
    483c:	3f 93       	push	r19
    483e:	4f 93       	push	r20
    4840:	5f 93       	push	r21
    4842:	6f 93       	push	r22
    4844:	7f 93       	push	r23
    4846:	8f 93       	push	r24
    4848:	9f 93       	push	r25
    484a:	af 93       	push	r26
    484c:	bf 93       	push	r27
    484e:	ef 93       	push	r30
    4850:	ff 93       	push	r31
	uartReceiveService(0);
    4852:	80 e0       	ldi	r24, 0x00	; 0
    4854:	0e 94 92 23 	call	0x4724	; 0x4724 <uartReceiveService>
}
    4858:	ff 91       	pop	r31
    485a:	ef 91       	pop	r30
    485c:	bf 91       	pop	r27
    485e:	af 91       	pop	r26
    4860:	9f 91       	pop	r25
    4862:	8f 91       	pop	r24
    4864:	7f 91       	pop	r23
    4866:	6f 91       	pop	r22
    4868:	5f 91       	pop	r21
    486a:	4f 91       	pop	r20
    486c:	3f 91       	pop	r19
    486e:	2f 91       	pop	r18
    4870:	0f 90       	pop	r0
    4872:	0f be       	out	0x3f, r0	; 63
    4874:	0f 90       	pop	r0
    4876:	1f 90       	pop	r1
    4878:	18 95       	reti

0000487a <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    487a:	8f 92       	push	r8
    487c:	9f 92       	push	r9
    487e:	af 92       	push	r10
    4880:	bf 92       	push	r11
    4882:	cf 92       	push	r12
    4884:	df 92       	push	r13
    4886:	ef 92       	push	r14
    4888:	ff 92       	push	r15
    488a:	0f 93       	push	r16
    488c:	1f 93       	push	r17
    488e:	cf 93       	push	r28
    4890:	df 93       	push	r29
    4892:	88 2e       	mov	r8, r24
    4894:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    4896:	c8 2e       	mov	r12, r24
    4898:	dd 24       	eor	r13, r13
    489a:	f6 01       	movw	r30, r12
    489c:	13 e0       	ldi	r17, 0x03	; 3
    489e:	ee 0f       	add	r30, r30
    48a0:	ff 1f       	adc	r31, r31
    48a2:	1a 95       	dec	r17
    48a4:	e1 f7       	brne	.-8      	; 0x489e <uartSendBuffer+0x24>
    48a6:	ea 50       	subi	r30, 0x0A	; 10
    48a8:	fe 4e       	sbci	r31, 0xEE	; 238
    48aa:	20 81       	ld	r18, Z
    48ac:	31 81       	ldd	r19, Z+1	; 0x01
    48ae:	24 0f       	add	r18, r20
    48b0:	35 1f       	adc	r19, r21
    48b2:	f6 01       	movw	r30, r12
    48b4:	73 e0       	ldi	r23, 0x03	; 3
    48b6:	ee 0f       	add	r30, r30
    48b8:	ff 1f       	adc	r31, r31
    48ba:	7a 95       	dec	r23
    48bc:	e1 f7       	brne	.-8      	; 0x48b6 <uartSendBuffer+0x3c>
    48be:	ec 50       	subi	r30, 0x0C	; 12
    48c0:	fe 4e       	sbci	r31, 0xEE	; 238
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	28 17       	cp	r18, r24
    48c8:	39 07       	cpc	r19, r25
    48ca:	70 f5       	brcc	.+92     	; 0x4928 <uartSendBuffer+0xae>
    48cc:	41 15       	cp	r20, r1
    48ce:	51 05       	cpc	r21, r1
    48d0:	59 f1       	breq	.+86     	; 0x4928 <uartSendBuffer+0xae>
	{
		// grab first character
		first = *buffer++;
    48d2:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    48d4:	76 01       	movw	r14, r12
    48d6:	63 e0       	ldi	r22, 0x03	; 3
    48d8:	ee 0c       	add	r14, r14
    48da:	ff 1c       	adc	r15, r15
    48dc:	6a 95       	dec	r22
    48de:	e1 f7       	brne	.-8      	; 0x48d8 <uartSendBuffer+0x5e>
    48e0:	82 ef       	ldi	r24, 0xF2	; 242
    48e2:	91 e1       	ldi	r25, 0x11	; 17
    48e4:	e8 0e       	add	r14, r24
    48e6:	f9 1e       	adc	r15, r25
    48e8:	8d 01       	movw	r16, r26
    48ea:	c0 e0       	ldi	r28, 0x00	; 0
    48ec:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    48ee:	5a 01       	movw	r10, r20
    48f0:	08 94       	sec
    48f2:	a1 08       	sbc	r10, r1
    48f4:	b1 08       	sbc	r11, r1
    48f6:	06 c0       	rjmp	.+12     	; 0x4904 <uartSendBuffer+0x8a>
    48f8:	c7 01       	movw	r24, r14
    48fa:	f8 01       	movw	r30, r16
    48fc:	60 81       	ld	r22, Z
    48fe:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <bufferAddToEnd>
    4902:	21 96       	adiw	r28, 0x01	; 1
    4904:	0f 5f       	subi	r16, 0xFF	; 255
    4906:	1f 4f       	sbci	r17, 0xFF	; 255
    4908:	ca 15       	cp	r28, r10
    490a:	db 05       	cpc	r29, r11
    490c:	a8 f3       	brcs	.-22     	; 0x48f8 <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    490e:	8e ee       	ldi	r24, 0xEE	; 238
    4910:	91 e1       	ldi	r25, 0x11	; 17
    4912:	c8 0e       	add	r12, r24
    4914:	d9 1e       	adc	r13, r25
    4916:	8f ef       	ldi	r24, 0xFF	; 255
    4918:	f6 01       	movw	r30, r12
    491a:	80 83       	st	Z, r24
		uartSendByte(nUart, first);
    491c:	88 2d       	mov	r24, r8
    491e:	69 2d       	mov	r22, r9
    4920:	0e 94 46 23 	call	0x468c	; 0x468c <uartSendByte>
    4924:	8f ef       	ldi	r24, 0xFF	; 255
    4926:	01 c0       	rjmp	.+2      	; 0x492a <uartSendBuffer+0xb0>
		// return success
		return TRUE;
    4928:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    492a:	df 91       	pop	r29
    492c:	cf 91       	pop	r28
    492e:	1f 91       	pop	r17
    4930:	0f 91       	pop	r16
    4932:	ff 90       	pop	r15
    4934:	ef 90       	pop	r14
    4936:	df 90       	pop	r13
    4938:	cf 90       	pop	r12
    493a:	bf 90       	pop	r11
    493c:	af 90       	pop	r10
    493e:	9f 90       	pop	r9
    4940:	8f 90       	pop	r8
    4942:	08 95       	ret

00004944 <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	23 e0       	ldi	r18, 0x03	; 3
    4948:	88 0f       	add	r24, r24
    494a:	99 1f       	adc	r25, r25
    494c:	2a 95       	dec	r18
    494e:	e1 f7       	brne	.-8      	; 0x4948 <uartAddToTxBuffer+0x4>
    4950:	8e 50       	subi	r24, 0x0E	; 14
    4952:	9e 4e       	sbci	r25, 0xEE	; 238
    4954:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <bufferAddToEnd>
}
    4958:	08 95       	ret

0000495a <uart3AddToTxBuffer>:
{
	uartAddToTxBuffer(2,data);
}

void uart3AddToTxBuffer(u08 data)
{
    495a:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    495c:	8a e0       	ldi	r24, 0x0A	; 10
    495e:	92 e1       	ldi	r25, 0x12	; 18
    4960:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <bufferAddToEnd>
}

void uart3AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(3,data);
}
    4964:	08 95       	ret

00004966 <uart2AddToTxBuffer>:
{
	uartAddToTxBuffer(1,data);
}

void uart2AddToTxBuffer(u08 data)
{
    4966:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    4968:	82 e0       	ldi	r24, 0x02	; 2
    496a:	92 e1       	ldi	r25, 0x12	; 18
    496c:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <bufferAddToEnd>
}

void uart2AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(2,data);
}
    4970:	08 95       	ret

00004972 <uart1AddToTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uart1AddToTxBuffer(u08 data)
{
    4972:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    4974:	8a ef       	ldi	r24, 0xFA	; 250
    4976:	91 e1       	ldi	r25, 0x11	; 17
    4978:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <bufferAddToEnd>
}

void uart1AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(1,data);
}
    497c:	08 95       	ret

0000497e <uart0AddToTxBuffer>:
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
}

void uart0AddToTxBuffer(u08 data)
{
    497e:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    4980:	82 ef       	ldi	r24, 0xF2	; 242
    4982:	91 e1       	ldi	r25, 0x11	; 17
    4984:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    4988:	08 95       	ret

0000498a <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    498a:	cf 93       	push	r28
    498c:	df 93       	push	r29
    498e:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    4990:	a8 2f       	mov	r26, r24
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	ed 01       	movw	r28, r26
    4996:	c2 51       	subi	r28, 0x12	; 18
    4998:	de 4e       	sbci	r29, 0xEE	; 238
    499a:	88 81       	ld	r24, Y
    499c:	88 23       	and	r24, r24
    499e:	79 f1       	breq	.+94     	; 0x49fe <uartTransmitService+0x74>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    49a0:	fd 01       	movw	r30, r26
    49a2:	33 e0       	ldi	r19, 0x03	; 3
    49a4:	ee 0f       	add	r30, r30
    49a6:	ff 1f       	adc	r31, r31
    49a8:	3a 95       	dec	r19
    49aa:	e1 f7       	brne	.-8      	; 0x49a4 <uartTransmitService+0x1a>
    49ac:	ea 50       	subi	r30, 0x0A	; 10
    49ae:	fe 4e       	sbci	r31, 0xEE	; 238
    49b0:	80 81       	ld	r24, Z
    49b2:	91 81       	ldd	r25, Z+1	; 0x01
    49b4:	89 2b       	or	r24, r25
    49b6:	11 f1       	breq	.+68     	; 0x49fc <uartTransmitService+0x72>
		{
			// send byte from top of buffer
			if(nUart==3)
    49b8:	23 30       	cpi	r18, 0x03	; 3
    49ba:	39 f4       	brne	.+14     	; 0x49ca <uartTransmitService+0x40>
				outb(UDR3,  bufferGetFromFront(&uartTxBuffer[3]) );
    49bc:	8a e0       	ldi	r24, 0x0A	; 10
    49be:	92 e1       	ldi	r25, 0x12	; 18
    49c0:	0e 94 10 27 	call	0x4e20	; 0x4e20 <bufferGetFromFront>
    49c4:	80 93 36 01 	sts	0x0136, r24
    49c8:	1e c0       	rjmp	.+60     	; 0x4a06 <uartTransmitService+0x7c>
			else if(nUart==2)
    49ca:	22 30       	cpi	r18, 0x02	; 2
    49cc:	39 f4       	brne	.+14     	; 0x49dc <uartTransmitService+0x52>
				outb(UDR2,  bufferGetFromFront(&uartTxBuffer[2]) );
    49ce:	82 e0       	ldi	r24, 0x02	; 2
    49d0:	92 e1       	ldi	r25, 0x12	; 18
    49d2:	0e 94 10 27 	call	0x4e20	; 0x4e20 <bufferGetFromFront>
    49d6:	80 93 d6 00 	sts	0x00D6, r24
    49da:	15 c0       	rjmp	.+42     	; 0x4a06 <uartTransmitService+0x7c>
			else if(nUart==1)
    49dc:	21 30       	cpi	r18, 0x01	; 1
    49de:	39 f4       	brne	.+14     	; 0x49ee <uartTransmitService+0x64>
				outb(UDR1,  bufferGetFromFront(&uartTxBuffer[1]) );
    49e0:	8a ef       	ldi	r24, 0xFA	; 250
    49e2:	91 e1       	ldi	r25, 0x11	; 17
    49e4:	0e 94 10 27 	call	0x4e20	; 0x4e20 <bufferGetFromFront>
    49e8:	80 93 ce 00 	sts	0x00CE, r24
    49ec:	0c c0       	rjmp	.+24     	; 0x4a06 <uartTransmitService+0x7c>
			else
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    49ee:	82 ef       	ldi	r24, 0xF2	; 242
    49f0:	91 e1       	ldi	r25, 0x11	; 17
    49f2:	0e 94 10 27 	call	0x4e20	; 0x4e20 <bufferGetFromFront>
    49f6:	80 93 c6 00 	sts	0x00C6, r24
    49fa:	05 c0       	rjmp	.+10     	; 0x4a06 <uartTransmitService+0x7c>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    49fc:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    49fe:	a6 53       	subi	r26, 0x36	; 54
    4a00:	be 4e       	sbci	r27, 0xEE	; 238
    4a02:	8f ef       	ldi	r24, 0xFF	; 255
    4a04:	8c 93       	st	X, r24
	}
}
    4a06:	df 91       	pop	r29
    4a08:	cf 91       	pop	r28
    4a0a:	08 95       	ret

00004a0c <__vector_56>:
{
	uartTransmitService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_TRANS)      
{
    4a0c:	1f 92       	push	r1
    4a0e:	0f 92       	push	r0
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	0f 92       	push	r0
    4a14:	11 24       	eor	r1, r1
    4a16:	2f 93       	push	r18
    4a18:	3f 93       	push	r19
    4a1a:	4f 93       	push	r20
    4a1c:	5f 93       	push	r21
    4a1e:	6f 93       	push	r22
    4a20:	7f 93       	push	r23
    4a22:	8f 93       	push	r24
    4a24:	9f 93       	push	r25
    4a26:	af 93       	push	r26
    4a28:	bf 93       	push	r27
    4a2a:	ef 93       	push	r30
    4a2c:	ff 93       	push	r31
	uartTransmitService(3);
    4a2e:	83 e0       	ldi	r24, 0x03	; 3
    4a30:	0e 94 c5 24 	call	0x498a	; 0x498a <uartTransmitService>
}
    4a34:	ff 91       	pop	r31
    4a36:	ef 91       	pop	r30
    4a38:	bf 91       	pop	r27
    4a3a:	af 91       	pop	r26
    4a3c:	9f 91       	pop	r25
    4a3e:	8f 91       	pop	r24
    4a40:	7f 91       	pop	r23
    4a42:	6f 91       	pop	r22
    4a44:	5f 91       	pop	r21
    4a46:	4f 91       	pop	r20
    4a48:	3f 91       	pop	r19
    4a4a:	2f 91       	pop	r18
    4a4c:	0f 90       	pop	r0
    4a4e:	0f be       	out	0x3f, r0	; 63
    4a50:	0f 90       	pop	r0
    4a52:	1f 90       	pop	r1
    4a54:	18 95       	reti

00004a56 <__vector_53>:
{
	uartTransmitService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_TRANS)      
{
    4a56:	1f 92       	push	r1
    4a58:	0f 92       	push	r0
    4a5a:	0f b6       	in	r0, 0x3f	; 63
    4a5c:	0f 92       	push	r0
    4a5e:	11 24       	eor	r1, r1
    4a60:	2f 93       	push	r18
    4a62:	3f 93       	push	r19
    4a64:	4f 93       	push	r20
    4a66:	5f 93       	push	r21
    4a68:	6f 93       	push	r22
    4a6a:	7f 93       	push	r23
    4a6c:	8f 93       	push	r24
    4a6e:	9f 93       	push	r25
    4a70:	af 93       	push	r26
    4a72:	bf 93       	push	r27
    4a74:	ef 93       	push	r30
    4a76:	ff 93       	push	r31
	uartTransmitService(2);
    4a78:	82 e0       	ldi	r24, 0x02	; 2
    4a7a:	0e 94 c5 24 	call	0x498a	; 0x498a <uartTransmitService>
}
    4a7e:	ff 91       	pop	r31
    4a80:	ef 91       	pop	r30
    4a82:	bf 91       	pop	r27
    4a84:	af 91       	pop	r26
    4a86:	9f 91       	pop	r25
    4a88:	8f 91       	pop	r24
    4a8a:	7f 91       	pop	r23
    4a8c:	6f 91       	pop	r22
    4a8e:	5f 91       	pop	r21
    4a90:	4f 91       	pop	r20
    4a92:	3f 91       	pop	r19
    4a94:	2f 91       	pop	r18
    4a96:	0f 90       	pop	r0
    4a98:	0f be       	out	0x3f, r0	; 63
    4a9a:	0f 90       	pop	r0
    4a9c:	1f 90       	pop	r1
    4a9e:	18 95       	reti

00004aa0 <__vector_38>:
{
	uartTransmitService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_TRANS)      
{
    4aa0:	1f 92       	push	r1
    4aa2:	0f 92       	push	r0
    4aa4:	0f b6       	in	r0, 0x3f	; 63
    4aa6:	0f 92       	push	r0
    4aa8:	11 24       	eor	r1, r1
    4aaa:	2f 93       	push	r18
    4aac:	3f 93       	push	r19
    4aae:	4f 93       	push	r20
    4ab0:	5f 93       	push	r21
    4ab2:	6f 93       	push	r22
    4ab4:	7f 93       	push	r23
    4ab6:	8f 93       	push	r24
    4ab8:	9f 93       	push	r25
    4aba:	af 93       	push	r26
    4abc:	bf 93       	push	r27
    4abe:	ef 93       	push	r30
    4ac0:	ff 93       	push	r31
	uartTransmitService(1);
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	0e 94 c5 24 	call	0x498a	; 0x498a <uartTransmitService>
}
    4ac8:	ff 91       	pop	r31
    4aca:	ef 91       	pop	r30
    4acc:	bf 91       	pop	r27
    4ace:	af 91       	pop	r26
    4ad0:	9f 91       	pop	r25
    4ad2:	8f 91       	pop	r24
    4ad4:	7f 91       	pop	r23
    4ad6:	6f 91       	pop	r22
    4ad8:	5f 91       	pop	r21
    4ada:	4f 91       	pop	r20
    4adc:	3f 91       	pop	r19
    4ade:	2f 91       	pop	r18
    4ae0:	0f 90       	pop	r0
    4ae2:	0f be       	out	0x3f, r0	; 63
    4ae4:	0f 90       	pop	r0
    4ae6:	1f 90       	pop	r1
    4ae8:	18 95       	reti

00004aea <__vector_27>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    4aea:	1f 92       	push	r1
    4aec:	0f 92       	push	r0
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	0f 92       	push	r0
    4af2:	11 24       	eor	r1, r1
    4af4:	2f 93       	push	r18
    4af6:	3f 93       	push	r19
    4af8:	4f 93       	push	r20
    4afa:	5f 93       	push	r21
    4afc:	6f 93       	push	r22
    4afe:	7f 93       	push	r23
    4b00:	8f 93       	push	r24
    4b02:	9f 93       	push	r25
    4b04:	af 93       	push	r26
    4b06:	bf 93       	push	r27
    4b08:	ef 93       	push	r30
    4b0a:	ff 93       	push	r31
	uartTransmitService(0);
    4b0c:	80 e0       	ldi	r24, 0x00	; 0
    4b0e:	0e 94 c5 24 	call	0x498a	; 0x498a <uartTransmitService>
}
    4b12:	ff 91       	pop	r31
    4b14:	ef 91       	pop	r30
    4b16:	bf 91       	pop	r27
    4b18:	af 91       	pop	r26
    4b1a:	9f 91       	pop	r25
    4b1c:	8f 91       	pop	r24
    4b1e:	7f 91       	pop	r23
    4b20:	6f 91       	pop	r22
    4b22:	5f 91       	pop	r21
    4b24:	4f 91       	pop	r20
    4b26:	3f 91       	pop	r19
    4b28:	2f 91       	pop	r18
    4b2a:	0f 90       	pop	r0
    4b2c:	0f be       	out	0x3f, r0	; 63
    4b2e:	0f 90       	pop	r0
    4b30:	1f 90       	pop	r1
    4b32:	18 95       	reti

00004b34 <uartSendTxBuffer>:
{
	uartAddToTxBuffer(3,data);
}

void uartSendTxBuffer(u08 nUart)
{
    4b34:	1f 93       	push	r17
    4b36:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	e2 51       	subi	r30, 0x12	; 18
    4b3e:	fe 4e       	sbci	r31, 0xEE	; 238
    4b40:	2f ef       	ldi	r18, 0xFF	; 255
    4b42:	20 83       	st	Z, r18
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    4b44:	43 e0       	ldi	r20, 0x03	; 3
    4b46:	88 0f       	add	r24, r24
    4b48:	99 1f       	adc	r25, r25
    4b4a:	4a 95       	dec	r20
    4b4c:	e1 f7       	brne	.-8      	; 0x4b46 <uartSendTxBuffer+0x12>
    4b4e:	8e 50       	subi	r24, 0x0E	; 14
    4b50:	9e 4e       	sbci	r25, 0xEE	; 238
    4b52:	0e 94 10 27 	call	0x4e20	; 0x4e20 <bufferGetFromFront>
    4b56:	68 2f       	mov	r22, r24
    4b58:	81 2f       	mov	r24, r17
    4b5a:	0e 94 46 23 	call	0x468c	; 0x468c <uartSendByte>
}
    4b5e:	1f 91       	pop	r17
    4b60:	08 95       	ret

00004b62 <uartReceiveByte>:
		return -1;
}


u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
    4b66:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    4b68:	28 2f       	mov	r18, r24
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	f9 01       	movw	r30, r18
    4b6e:	73 e0       	ldi	r23, 0x03	; 3
    4b70:	ee 0f       	add	r30, r30
    4b72:	ff 1f       	adc	r31, r31
    4b74:	7a 95       	dec	r23
    4b76:	e1 f7       	brne	.-8      	; 0x4b70 <uartReceiveByte+0xe>
    4b78:	e0 53       	subi	r30, 0x30	; 48
    4b7a:	fe 4e       	sbci	r31, 0xEE	; 238
    4b7c:	80 81       	ld	r24, Z
    4b7e:	91 81       	ldd	r25, Z+1	; 0x01
    4b80:	89 2b       	or	r24, r25
    4b82:	c9 f0       	breq	.+50     	; 0x4bb6 <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    4b84:	f9 01       	movw	r30, r18
    4b86:	63 e0       	ldi	r22, 0x03	; 3
    4b88:	ee 0f       	add	r30, r30
    4b8a:	ff 1f       	adc	r31, r31
    4b8c:	6a 95       	dec	r22
    4b8e:	e1 f7       	brne	.-8      	; 0x4b88 <uartReceiveByte+0x26>
    4b90:	ee 52       	subi	r30, 0x2E	; 46
    4b92:	fe 4e       	sbci	r31, 0xEE	; 238
    4b94:	80 81       	ld	r24, Z
    4b96:	91 81       	ldd	r25, Z+1	; 0x01
    4b98:	89 2b       	or	r24, r25
    4b9a:	69 f0       	breq	.+26     	; 0x4bb6 <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    4b9c:	53 e0       	ldi	r21, 0x03	; 3
    4b9e:	22 0f       	add	r18, r18
    4ba0:	33 1f       	adc	r19, r19
    4ba2:	5a 95       	dec	r21
    4ba4:	e1 f7       	brne	.-8      	; 0x4b9e <uartReceiveByte+0x3c>
    4ba6:	c9 01       	movw	r24, r18
    4ba8:	82 53       	subi	r24, 0x32	; 50
    4baa:	9e 4e       	sbci	r25, 0xEE	; 238
    4bac:	0e 94 10 27 	call	0x4e20	; 0x4e20 <bufferGetFromFront>
    4bb0:	88 83       	st	Y, r24
    4bb2:	8f ef       	ldi	r24, 0xFF	; 255
    4bb4:	01 c0       	rjmp	.+2      	; 0x4bb8 <uartReceiveByte+0x56>
			return TRUE;
    4bb6:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    4bb8:	df 91       	pop	r29
    4bba:	cf 91       	pop	r28
    4bbc:	08 95       	ret

00004bbe <uart3GetByte>:
	else
		return -1;
}

int uart3GetByte(void)
{
    4bbe:	df 93       	push	r29
    4bc0:	cf 93       	push	r28
    4bc2:	0f 92       	push	r0
    4bc4:	cd b7       	in	r28, 0x3d	; 61
    4bc6:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(3,&c))
    4bc8:	83 e0       	ldi	r24, 0x03	; 3
    4bca:	be 01       	movw	r22, r28
    4bcc:	6f 5f       	subi	r22, 0xFF	; 255
    4bce:	7f 4f       	sbci	r23, 0xFF	; 255
    4bd0:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <uartReceiveByte>
    4bd4:	88 23       	and	r24, r24
    4bd6:	19 f4       	brne	.+6      	; 0x4bde <uart3GetByte+0x20>
    4bd8:	2f ef       	ldi	r18, 0xFF	; 255
    4bda:	3f ef       	ldi	r19, 0xFF	; 255
    4bdc:	03 c0       	rjmp	.+6      	; 0x4be4 <uart3GetByte+0x26>
		return c;
    4bde:	89 81       	ldd	r24, Y+1	; 0x01
    4be0:	28 2f       	mov	r18, r24
    4be2:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    4be4:	c9 01       	movw	r24, r18
    4be6:	0f 90       	pop	r0
    4be8:	cf 91       	pop	r28
    4bea:	df 91       	pop	r29
    4bec:	08 95       	ret

00004bee <uart2GetByte>:
	else
		return -1;
}

int uart2GetByte(void)
{
    4bee:	df 93       	push	r29
    4bf0:	cf 93       	push	r28
    4bf2:	0f 92       	push	r0
    4bf4:	cd b7       	in	r28, 0x3d	; 61
    4bf6:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(2,&c))
    4bf8:	82 e0       	ldi	r24, 0x02	; 2
    4bfa:	be 01       	movw	r22, r28
    4bfc:	6f 5f       	subi	r22, 0xFF	; 255
    4bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    4c00:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <uartReceiveByte>
    4c04:	88 23       	and	r24, r24
    4c06:	19 f4       	brne	.+6      	; 0x4c0e <uart2GetByte+0x20>
    4c08:	2f ef       	ldi	r18, 0xFF	; 255
    4c0a:	3f ef       	ldi	r19, 0xFF	; 255
    4c0c:	03 c0       	rjmp	.+6      	; 0x4c14 <uart2GetByte+0x26>
		return c;
    4c0e:	89 81       	ldd	r24, Y+1	; 0x01
    4c10:	28 2f       	mov	r18, r24
    4c12:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    4c14:	c9 01       	movw	r24, r18
    4c16:	0f 90       	pop	r0
    4c18:	cf 91       	pop	r28
    4c1a:	df 91       	pop	r29
    4c1c:	08 95       	ret

00004c1e <uart1GetByte>:
	else
		return -1;
}

int uart1GetByte(void)
{
    4c1e:	df 93       	push	r29
    4c20:	cf 93       	push	r28
    4c22:	0f 92       	push	r0
    4c24:	cd b7       	in	r28, 0x3d	; 61
    4c26:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(1,&c))
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	be 01       	movw	r22, r28
    4c2c:	6f 5f       	subi	r22, 0xFF	; 255
    4c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c30:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <uartReceiveByte>
    4c34:	88 23       	and	r24, r24
    4c36:	19 f4       	brne	.+6      	; 0x4c3e <uart1GetByte+0x20>
    4c38:	2f ef       	ldi	r18, 0xFF	; 255
    4c3a:	3f ef       	ldi	r19, 0xFF	; 255
    4c3c:	03 c0       	rjmp	.+6      	; 0x4c44 <uart1GetByte+0x26>
		return c;
    4c3e:	89 81       	ldd	r24, Y+1	; 0x01
    4c40:	28 2f       	mov	r18, r24
    4c42:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    4c44:	c9 01       	movw	r24, r18
    4c46:	0f 90       	pop	r0
    4c48:	cf 91       	pop	r28
    4c4a:	df 91       	pop	r29
    4c4c:	08 95       	ret

00004c4e <uart0GetByte>:
	// send byte on UART3
	uartSendByte(3, data);
}

int uart0GetByte(void)
{
    4c4e:	df 93       	push	r29
    4c50:	cf 93       	push	r28
    4c52:	0f 92       	push	r0
    4c54:	cd b7       	in	r28, 0x3d	; 61
    4c56:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	be 01       	movw	r22, r28
    4c5c:	6f 5f       	subi	r22, 0xFF	; 255
    4c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c60:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <uartReceiveByte>
    4c64:	88 23       	and	r24, r24
    4c66:	19 f4       	brne	.+6      	; 0x4c6e <uart0GetByte+0x20>
    4c68:	2f ef       	ldi	r18, 0xFF	; 255
    4c6a:	3f ef       	ldi	r19, 0xFF	; 255
    4c6c:	03 c0       	rjmp	.+6      	; 0x4c74 <uart0GetByte+0x26>
		return c;
    4c6e:	89 81       	ldd	r24, Y+1	; 0x01
    4c70:	28 2f       	mov	r18, r24
    4c72:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    4c74:	c9 01       	movw	r24, r18
    4c76:	0f 90       	pop	r0
    4c78:	cf 91       	pop	r28
    4c7a:	df 91       	pop	r29
    4c7c:	08 95       	ret

00004c7e <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	e3 e0       	ldi	r30, 0x03	; 3
    4c82:	88 0f       	add	r24, r24
    4c84:	99 1f       	adc	r25, r25
    4c86:	ea 95       	dec	r30
    4c88:	e1 f7       	brne	.-8      	; 0x4c82 <uartFlushReceiveBuffer+0x4>
    4c8a:	82 53       	subi	r24, 0x32	; 50
    4c8c:	9e 4e       	sbci	r25, 0xEE	; 238
    4c8e:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <bufferFlush>
}
    4c92:	08 95       	ret

00004c94 <uart3InitBuffers>:

void uart3InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) uart3RxData, UART3_RX_BUFFER_SIZE);
    4c94:	86 ee       	ldi	r24, 0xE6	; 230
    4c96:	91 e1       	ldi	r25, 0x11	; 17
    4c98:	6a ec       	ldi	r22, 0xCA	; 202
    4c9a:	70 e1       	ldi	r23, 0x10	; 16
    4c9c:	40 e8       	ldi	r20, 0x80	; 128
    4c9e:	50 e0       	ldi	r21, 0x00	; 0
    4ca0:	0e 94 03 27 	call	0x4e06	; 0x4e06 <bufferInit>
		bufferInit(&uartTxBuffer[3], (u08*) uart3TxData, UART3_TX_BUFFER_SIZE);
    4ca4:	8a e0       	ldi	r24, 0x0A	; 10
    4ca6:	92 e1       	ldi	r25, 0x12	; 18
    4ca8:	6a e4       	ldi	r22, 0x4A	; 74
    4caa:	71 e1       	ldi	r23, 0x11	; 17
    4cac:	40 e1       	ldi	r20, 0x10	; 16
    4cae:	50 e0       	ldi	r21, 0x00	; 0
    4cb0:	0e 94 03 27 	call	0x4e06	; 0x4e06 <bufferInit>
	#else
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) UART3_RX_BUFFER_ADDR, UART3_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[3], (u08*) UART3_TX_BUFFER_ADDR, UART3_TX_BUFFER_SIZE);
	#endif
}
    4cb4:	08 95       	ret

00004cb6 <uart3Init>:
}

void uart3Init(void)
{
	// initialize the buffers
	uart3InitBuffers();
    4cb6:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <uart3InitBuffers>
	// initialize user receive handlers
	UartRxFunc[3] = 0;
    4cba:	10 92 61 11 	sts	0x1161, r1
    4cbe:	10 92 60 11 	sts	0x1160, r1
	// enable RxD/TxD and interrupts
	outb(UCSR3B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    4cc2:	88 ed       	ldi	r24, 0xD8	; 216
    4cc4:	80 93 31 01 	sts	0x0131, r24
	// set default baud rate
	uartSetBaudRate(3, UART3_DEFAULT_BAUD_RATE);
    4cc8:	83 e0       	ldi	r24, 0x03	; 3
    4cca:	40 e8       	ldi	r20, 0x80	; 128
    4ccc:	55 e2       	ldi	r21, 0x25	; 37
    4cce:	60 e0       	ldi	r22, 0x00	; 0
    4cd0:	70 e0       	ldi	r23, 0x00	; 0
    4cd2:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <uartSetBaudRate>
	// initialize states
	uartReadyTx[3] = TRUE;
    4cd6:	8f ef       	ldi	r24, 0xFF	; 255
    4cd8:	80 93 cd 11 	sts	0x11CD, r24
	uartBufferedTx[3] = FALSE;
    4cdc:	10 92 f1 11 	sts	0x11F1, r1
	// clear overflow count
	uartRxOverflow[3] = 0;
    4ce0:	10 92 19 12 	sts	0x1219, r1
    4ce4:	10 92 18 12 	sts	0x1218, r1
	// enable interrupts
	sei();
    4ce8:	78 94       	sei
}
    4cea:	08 95       	ret

00004cec <uart2InitBuffers>:

void uart2InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) uart2RxData, UART2_RX_BUFFER_SIZE);
    4cec:	8e ed       	ldi	r24, 0xDE	; 222
    4cee:	91 e1       	ldi	r25, 0x11	; 17
    4cf0:	6a e3       	ldi	r22, 0x3A	; 58
    4cf2:	70 e1       	ldi	r23, 0x10	; 16
    4cf4:	40 e8       	ldi	r20, 0x80	; 128
    4cf6:	50 e0       	ldi	r21, 0x00	; 0
    4cf8:	0e 94 03 27 	call	0x4e06	; 0x4e06 <bufferInit>
		bufferInit(&uartTxBuffer[2], (u08*) uart2TxData, UART2_TX_BUFFER_SIZE);
    4cfc:	82 e0       	ldi	r24, 0x02	; 2
    4cfe:	92 e1       	ldi	r25, 0x12	; 18
    4d00:	6a eb       	ldi	r22, 0xBA	; 186
    4d02:	70 e1       	ldi	r23, 0x10	; 16
    4d04:	40 e1       	ldi	r20, 0x10	; 16
    4d06:	50 e0       	ldi	r21, 0x00	; 0
    4d08:	0e 94 03 27 	call	0x4e06	; 0x4e06 <bufferInit>
	#else
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) UART2_RX_BUFFER_ADDR, UART2_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[2], (u08*) UART2_TX_BUFFER_ADDR, UART2_TX_BUFFER_SIZE);
	#endif
}
    4d0c:	08 95       	ret

00004d0e <uart2Init>:
}

void uart2Init(void)
{
	// initialize the buffers
	uart2InitBuffers();
    4d0e:	0e 94 76 26 	call	0x4cec	; 0x4cec <uart2InitBuffers>
	// initialize user receive handlers
	UartRxFunc[2] = 0;
    4d12:	10 92 5f 11 	sts	0x115F, r1
    4d16:	10 92 5e 11 	sts	0x115E, r1
	// enable RxD/TxD and interrupts
	outb(UCSR2B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    4d1a:	88 ed       	ldi	r24, 0xD8	; 216
    4d1c:	80 93 d1 00 	sts	0x00D1, r24
	// set default baud rate
	uartSetBaudRate(2, UART2_DEFAULT_BAUD_RATE);
    4d20:	82 e0       	ldi	r24, 0x02	; 2
    4d22:	40 e8       	ldi	r20, 0x80	; 128
    4d24:	55 e2       	ldi	r21, 0x25	; 37
    4d26:	60 e0       	ldi	r22, 0x00	; 0
    4d28:	70 e0       	ldi	r23, 0x00	; 0
    4d2a:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <uartSetBaudRate>
	// initialize states
	uartReadyTx[2] = TRUE;
    4d2e:	8f ef       	ldi	r24, 0xFF	; 255
    4d30:	80 93 cc 11 	sts	0x11CC, r24
	uartBufferedTx[2] = FALSE;
    4d34:	10 92 f0 11 	sts	0x11F0, r1
	// clear overflow count
	uartRxOverflow[2] = 0;
    4d38:	10 92 17 12 	sts	0x1217, r1
    4d3c:	10 92 16 12 	sts	0x1216, r1
	// enable interrupts
	sei();
    4d40:	78 94       	sei
}
    4d42:	08 95       	ret

00004d44 <uart1InitBuffers>:

void uart1InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) uart1RxData, UART1_RX_BUFFER_SIZE);
    4d44:	86 ed       	ldi	r24, 0xD6	; 214
    4d46:	91 e1       	ldi	r25, 0x11	; 17
    4d48:	6a ea       	ldi	r22, 0xAA	; 170
    4d4a:	7f e0       	ldi	r23, 0x0F	; 15
    4d4c:	40 e8       	ldi	r20, 0x80	; 128
    4d4e:	50 e0       	ldi	r21, 0x00	; 0
    4d50:	0e 94 03 27 	call	0x4e06	; 0x4e06 <bufferInit>
		bufferInit(&uartTxBuffer[1], (u08*) uart1TxData, UART1_TX_BUFFER_SIZE);
    4d54:	8a ef       	ldi	r24, 0xFA	; 250
    4d56:	91 e1       	ldi	r25, 0x11	; 17
    4d58:	6a e2       	ldi	r22, 0x2A	; 42
    4d5a:	70 e1       	ldi	r23, 0x10	; 16
    4d5c:	40 e1       	ldi	r20, 0x10	; 16
    4d5e:	50 e0       	ldi	r21, 0x00	; 0
    4d60:	0e 94 03 27 	call	0x4e06	; 0x4e06 <bufferInit>
	#else
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) UART1_RX_BUFFER_ADDR, UART1_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[1], (u08*) UART1_TX_BUFFER_ADDR, UART1_TX_BUFFER_SIZE);
	#endif
}
    4d64:	08 95       	ret

00004d66 <uart1Init>:
}

void uart1Init(void)
{
	// initialize the buffers
	uart1InitBuffers();
    4d66:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <uart1InitBuffers>
	// initialize user receive handlers
	UartRxFunc[1] = 0;
    4d6a:	10 92 5d 11 	sts	0x115D, r1
    4d6e:	10 92 5c 11 	sts	0x115C, r1
	// enable RxD/TxD and interrupts
	outb(UCSR1B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    4d72:	88 ed       	ldi	r24, 0xD8	; 216
    4d74:	80 93 c9 00 	sts	0x00C9, r24
	// set default baud rate
	uartSetBaudRate(1, UART1_DEFAULT_BAUD_RATE);
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	40 e8       	ldi	r20, 0x80	; 128
    4d7c:	55 e2       	ldi	r21, 0x25	; 37
    4d7e:	60 e0       	ldi	r22, 0x00	; 0
    4d80:	70 e0       	ldi	r23, 0x00	; 0
    4d82:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <uartSetBaudRate>
	// initialize states
	uartReadyTx[1] = TRUE;
    4d86:	8f ef       	ldi	r24, 0xFF	; 255
    4d88:	80 93 cb 11 	sts	0x11CB, r24
	uartBufferedTx[1] = FALSE;
    4d8c:	10 92 ef 11 	sts	0x11EF, r1
	// clear overflow count
	uartRxOverflow[1] = 0;
    4d90:	10 92 15 12 	sts	0x1215, r1
    4d94:	10 92 14 12 	sts	0x1214, r1
	// enable interrupts
	sei();
    4d98:	78 94       	sei
}
    4d9a:	08 95       	ret

00004d9c <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    4d9c:	8e ec       	ldi	r24, 0xCE	; 206
    4d9e:	91 e1       	ldi	r25, 0x11	; 17
    4da0:	6a e1       	ldi	r22, 0x1A	; 26
    4da2:	7f e0       	ldi	r23, 0x0F	; 15
    4da4:	40 e8       	ldi	r20, 0x80	; 128
    4da6:	50 e0       	ldi	r21, 0x00	; 0
    4da8:	0e 94 03 27 	call	0x4e06	; 0x4e06 <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    4dac:	82 ef       	ldi	r24, 0xF2	; 242
    4dae:	91 e1       	ldi	r25, 0x11	; 17
    4db0:	6a e9       	ldi	r22, 0x9A	; 154
    4db2:	7f e0       	ldi	r23, 0x0F	; 15
    4db4:	40 e1       	ldi	r20, 0x10	; 16
    4db6:	50 e0       	ldi	r21, 0x00	; 0
    4db8:	0e 94 03 27 	call	0x4e06	; 0x4e06 <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    4dbc:	08 95       	ret

00004dbe <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    4dbe:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    4dc2:	10 92 5b 11 	sts	0x115B, r1
    4dc6:	10 92 5a 11 	sts	0x115A, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    4dca:	88 ed       	ldi	r24, 0xD8	; 216
    4dcc:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	40 e8       	ldi	r20, 0x80	; 128
    4dd4:	55 e2       	ldi	r21, 0x25	; 37
    4dd6:	60 e0       	ldi	r22, 0x00	; 0
    4dd8:	70 e0       	ldi	r23, 0x00	; 0
    4dda:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    4dde:	8f ef       	ldi	r24, 0xFF	; 255
    4de0:	80 93 ca 11 	sts	0x11CA, r24
	uartBufferedTx[0] = FALSE;
    4de4:	10 92 ee 11 	sts	0x11EE, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    4de8:	10 92 13 12 	sts	0x1213, r1
    4dec:	10 92 12 12 	sts	0x1212, r1
	// enable interrupts
	sei();
    4df0:	78 94       	sei
}
    4df2:	08 95       	ret

00004df4 <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    4df4:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <uart0Init>
	uart1Init();
    4df8:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <uart1Init>
	uart2Init();
    4dfc:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <uart2Init>
	uart3Init();
    4e00:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <uart3Init>
}
    4e04:	08 95       	ret

00004e06 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    4e06:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    4e08:	8f b7       	in	r24, 0x3f	; 63
    4e0a:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    4e0c:	71 83       	std	Z+1, r23	; 0x01
    4e0e:	60 83       	st	Z, r22
	buffer->size = size;
    4e10:	53 83       	std	Z+3, r21	; 0x03
    4e12:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    4e14:	17 82       	std	Z+7, r1	; 0x07
    4e16:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    4e18:	15 82       	std	Z+5, r1	; 0x05
    4e1a:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    4e1c:	8f bf       	out	0x3f, r24	; 63
}
    4e1e:	08 95       	ret

00004e20 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    4e20:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    4e22:	4f b7       	in	r20, 0x3f	; 63
    4e24:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    4e26:	14 96       	adiw	r26, 0x04	; 4
    4e28:	8d 91       	ld	r24, X+
    4e2a:	9c 91       	ld	r25, X
    4e2c:	15 97       	sbiw	r26, 0x05	; 5
    4e2e:	89 2b       	or	r24, r25
    4e30:	11 f4       	brne	.+4      	; 0x4e36 <bufferGetFromFront+0x16>
    4e32:	e0 e0       	ldi	r30, 0x00	; 0
    4e34:	25 c0       	rjmp	.+74     	; 0x4e80 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    4e36:	16 96       	adiw	r26, 0x06	; 6
    4e38:	8d 91       	ld	r24, X+
    4e3a:	9c 91       	ld	r25, X
    4e3c:	17 97       	sbiw	r26, 0x07	; 7
    4e3e:	ed 91       	ld	r30, X+
    4e40:	fc 91       	ld	r31, X
    4e42:	11 97       	sbiw	r26, 0x01	; 1
    4e44:	e8 0f       	add	r30, r24
    4e46:	f9 1f       	adc	r31, r25
    4e48:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    4e4a:	01 96       	adiw	r24, 0x01	; 1
    4e4c:	17 96       	adiw	r26, 0x07	; 7
    4e4e:	9c 93       	st	X, r25
    4e50:	8e 93       	st	-X, r24
    4e52:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    4e54:	12 96       	adiw	r26, 0x02	; 2
    4e56:	2d 91       	ld	r18, X+
    4e58:	3c 91       	ld	r19, X
    4e5a:	13 97       	sbiw	r26, 0x03	; 3
    4e5c:	82 17       	cp	r24, r18
    4e5e:	93 07       	cpc	r25, r19
    4e60:	30 f0       	brcs	.+12     	; 0x4e6e <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    4e62:	82 1b       	sub	r24, r18
    4e64:	93 0b       	sbc	r25, r19
    4e66:	17 96       	adiw	r26, 0x07	; 7
    4e68:	9c 93       	st	X, r25
    4e6a:	8e 93       	st	-X, r24
    4e6c:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    4e6e:	14 96       	adiw	r26, 0x04	; 4
    4e70:	8d 91       	ld	r24, X+
    4e72:	9c 91       	ld	r25, X
    4e74:	15 97       	sbiw	r26, 0x05	; 5
    4e76:	01 97       	sbiw	r24, 0x01	; 1
    4e78:	15 96       	adiw	r26, 0x05	; 5
    4e7a:	9c 93       	st	X, r25
    4e7c:	8e 93       	st	-X, r24
    4e7e:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    4e80:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    4e82:	8e 2f       	mov	r24, r30
    4e84:	08 95       	ret

00004e86 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    4e86:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    4e88:	4f b7       	in	r20, 0x3f	; 63
    4e8a:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    4e8c:	84 81       	ldd	r24, Z+4	; 0x04
    4e8e:	95 81       	ldd	r25, Z+5	; 0x05
    4e90:	68 17       	cp	r22, r24
    4e92:	79 07       	cpc	r23, r25
    4e94:	b0 f4       	brcc	.+44     	; 0x4ec2 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    4e96:	86 81       	ldd	r24, Z+6	; 0x06
    4e98:	97 81       	ldd	r25, Z+7	; 0x07
    4e9a:	86 0f       	add	r24, r22
    4e9c:	97 1f       	adc	r25, r23
    4e9e:	97 83       	std	Z+7, r25	; 0x07
    4ea0:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    4ea2:	22 81       	ldd	r18, Z+2	; 0x02
    4ea4:	33 81       	ldd	r19, Z+3	; 0x03
    4ea6:	82 17       	cp	r24, r18
    4ea8:	93 07       	cpc	r25, r19
    4eaa:	20 f0       	brcs	.+8      	; 0x4eb4 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    4eac:	82 1b       	sub	r24, r18
    4eae:	93 0b       	sbc	r25, r19
    4eb0:	97 83       	std	Z+7, r25	; 0x07
    4eb2:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    4eb4:	84 81       	ldd	r24, Z+4	; 0x04
    4eb6:	95 81       	ldd	r25, Z+5	; 0x05
    4eb8:	86 1b       	sub	r24, r22
    4eba:	97 0b       	sbc	r25, r23
    4ebc:	95 83       	std	Z+5, r25	; 0x05
    4ebe:	84 83       	std	Z+4, r24	; 0x04
    4ec0:	02 c0       	rjmp	.+4      	; 0x4ec6 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    4ec2:	15 82       	std	Z+5, r1	; 0x05
    4ec4:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    4ec6:	4f bf       	out	0x3f, r20	; 63
}
    4ec8:	08 95       	ret

00004eca <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    4eca:	fc 01       	movw	r30, r24
    4ecc:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    4ece:	2f b7       	in	r18, 0x3f	; 63
    4ed0:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    4ed2:	2f bf       	out	0x3f, r18	; 63
    4ed4:	26 81       	ldd	r18, Z+6	; 0x06
    4ed6:	37 81       	ldd	r19, Z+7	; 0x07
    4ed8:	62 81       	ldd	r22, Z+2	; 0x02
    4eda:	73 81       	ldd	r23, Z+3	; 0x03
    4edc:	82 0f       	add	r24, r18
    4ede:	93 1f       	adc	r25, r19
    4ee0:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <__udivmodhi4>
    4ee4:	01 90       	ld	r0, Z+
    4ee6:	f0 81       	ld	r31, Z
    4ee8:	e0 2d       	mov	r30, r0
    4eea:	e8 0f       	add	r30, r24
    4eec:	f9 1f       	adc	r31, r25
	return data;
}
    4eee:	80 81       	ld	r24, Z
    4ef0:	08 95       	ret

00004ef2 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    4ef2:	1f 93       	push	r17
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	ec 01       	movw	r28, r24
    4efa:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    4efc:	4f b7       	in	r20, 0x3f	; 63
    4efe:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    4f00:	2c 81       	ldd	r18, Y+4	; 0x04
    4f02:	3d 81       	ldd	r19, Y+5	; 0x05
    4f04:	6a 81       	ldd	r22, Y+2	; 0x02
    4f06:	7b 81       	ldd	r23, Y+3	; 0x03
    4f08:	26 17       	cp	r18, r22
    4f0a:	37 07       	cpc	r19, r23
    4f0c:	98 f4       	brcc	.+38     	; 0x4f34 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    4f0e:	8e 81       	ldd	r24, Y+6	; 0x06
    4f10:	9f 81       	ldd	r25, Y+7	; 0x07
    4f12:	82 0f       	add	r24, r18
    4f14:	93 1f       	adc	r25, r19
    4f16:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <__udivmodhi4>
    4f1a:	e8 81       	ld	r30, Y
    4f1c:	f9 81       	ldd	r31, Y+1	; 0x01
    4f1e:	e8 0f       	add	r30, r24
    4f20:	f9 1f       	adc	r31, r25
    4f22:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    4f24:	8c 81       	ldd	r24, Y+4	; 0x04
    4f26:	9d 81       	ldd	r25, Y+5	; 0x05
    4f28:	01 96       	adiw	r24, 0x01	; 1
    4f2a:	9d 83       	std	Y+5, r25	; 0x05
    4f2c:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    4f2e:	4f bf       	out	0x3f, r20	; 63
    4f30:	8f ef       	ldi	r24, 0xFF	; 255
    4f32:	02 c0       	rjmp	.+4      	; 0x4f38 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    4f34:	4f bf       	out	0x3f, r20	; 63
    4f36:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    4f38:	df 91       	pop	r29
    4f3a:	cf 91       	pop	r28
    4f3c:	1f 91       	pop	r17
    4f3e:	08 95       	ret

00004f40 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    4f40:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    4f42:	8f b7       	in	r24, 0x3f	; 63
    4f44:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    4f46:	8f bf       	out	0x3f, r24	; 63
    4f48:	22 81       	ldd	r18, Z+2	; 0x02
    4f4a:	33 81       	ldd	r19, Z+3	; 0x03
    4f4c:	84 81       	ldd	r24, Z+4	; 0x04
    4f4e:	95 81       	ldd	r25, Z+5	; 0x05
    4f50:	28 1b       	sub	r18, r24
    4f52:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    4f54:	c9 01       	movw	r24, r18
    4f56:	08 95       	ret

00004f58 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    4f58:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    4f5a:	8f b7       	in	r24, 0x3f	; 63
    4f5c:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    4f5e:	15 82       	std	Z+5, r1	; 0x05
    4f60:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    4f62:	8f bf       	out	0x3f, r24	; 63
}
    4f64:	08 95       	ret

00004f66 <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
    4f66:	aa e7       	ldi	r26, 0x7A	; 122
    4f68:	b0 e0       	ldi	r27, 0x00	; 0
    4f6a:	8c 91       	ld	r24, X
    4f6c:	80 68       	ori	r24, 0x80	; 128
    4f6e:	8c 93       	st	X, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
    4f70:	8c 91       	ld	r24, X
    4f72:	8f 7d       	andi	r24, 0xDF	; 223
    4f74:	8c 93       	st	X, r24
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    4f76:	8c 91       	ld	r24, X
    4f78:	88 7f       	andi	r24, 0xF8	; 248
    4f7a:	86 60       	ori	r24, 0x06	; 6
    4f7c:	8c 93       	st	X, r24
}

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    4f7e:	ec e7       	ldi	r30, 0x7C	; 124
    4f80:	f0 e0       	ldi	r31, 0x00	; 0
    4f82:	80 81       	ld	r24, Z
    4f84:	8f 73       	andi	r24, 0x3F	; 63
    4f86:	80 64       	ori	r24, 0x40	; 64
    4f88:	80 83       	st	Z, r24
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
	cbi(ADCSR, ADFR);				// default to single sample convert mode
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
	a2dSetReference(ADC_REFERENCE);	// set default reference
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
    4f8a:	80 81       	ld	r24, Z
    4f8c:	8f 7d       	andi	r24, 0xDF	; 223
    4f8e:	80 83       	st	Z, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
    4f90:	8c 91       	ld	r24, X
    4f92:	88 60       	ori	r24, 0x08	; 8
    4f94:	8c 93       	st	X, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
    4f96:	10 92 1a 12 	sts	0x121A, r1
	sei();							// turn on interrupts (if not already on)
    4f9a:	78 94       	sei
}
    4f9c:	08 95       	ret

00004f9e <a2dOff>:

// turn off a2d converter
void a2dOff(void)
{
	cbi(ADCSR, ADIE);				// disable ADC interrupts
    4f9e:	ea e7       	ldi	r30, 0x7A	; 122
    4fa0:	f0 e0       	ldi	r31, 0x00	; 0
    4fa2:	80 81       	ld	r24, Z
    4fa4:	87 7f       	andi	r24, 0xF7	; 247
    4fa6:	80 83       	st	Z, r24
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
    4fa8:	80 81       	ld	r24, Z
    4faa:	8f 77       	andi	r24, 0x7F	; 127
    4fac:	80 83       	st	Z, r24
}
    4fae:	08 95       	ret

00004fb0 <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    4fb0:	ea e7       	ldi	r30, 0x7A	; 122
    4fb2:	f0 e0       	ldi	r31, 0x00	; 0
    4fb4:	90 81       	ld	r25, Z
    4fb6:	98 7f       	andi	r25, 0xF8	; 248
    4fb8:	98 2b       	or	r25, r24
    4fba:	90 83       	st	Z, r25
}
    4fbc:	08 95       	ret

00004fbe <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    4fbe:	ec e7       	ldi	r30, 0x7C	; 124
    4fc0:	f0 e0       	ldi	r31, 0x00	; 0
    4fc2:	90 81       	ld	r25, Z
    4fc4:	82 95       	swap	r24
    4fc6:	88 0f       	add	r24, r24
    4fc8:	88 0f       	add	r24, r24
    4fca:	80 7c       	andi	r24, 0xC0	; 192
    4fcc:	9f 73       	andi	r25, 0x3F	; 63
    4fce:	98 2b       	or	r25, r24
    4fd0:	90 83       	st	Z, r25
}
    4fd2:	08 95       	ret

00004fd4 <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
    4fd4:	ec e7       	ldi	r30, 0x7C	; 124
    4fd6:	f0 e0       	ldi	r31, 0x00	; 0
    4fd8:	90 81       	ld	r25, Z
    4fda:	8f 71       	andi	r24, 0x1F	; 31
    4fdc:	90 7e       	andi	r25, 0xE0	; 224
    4fde:	89 2b       	or	r24, r25
    4fe0:	80 83       	st	Z, r24
}
    4fe2:	08 95       	ret

00004fe4 <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
    4fe4:	ea e7       	ldi	r30, 0x7A	; 122
    4fe6:	f0 e0       	ldi	r31, 0x00	; 0
    4fe8:	80 81       	ld	r24, Z
    4fea:	80 61       	ori	r24, 0x10	; 16
    4fec:	80 83       	st	Z, r24
	sbi(ADCSR, ADSC);	// start conversion
    4fee:	80 81       	ld	r24, Z
    4ff0:	80 64       	ori	r24, 0x40	; 64
    4ff2:	80 83       	st	Z, r24
}
    4ff4:	08 95       	ret

00004ff6 <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
    4ff6:	80 91 7a 00 	lds	r24, 0x007A
}
    4ffa:	80 74       	andi	r24, 0x40	; 64
    4ffc:	08 95       	ret

00004ffe <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
    4ffe:	98 2f       	mov	r25, r24
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
    5000:	10 92 1a 12 	sts	0x121A, r1

if (ch >= 8)
    5004:	88 30       	cpi	r24, 0x08	; 8
    5006:	20 f0       	brcs	.+8      	; 0x5010 <a2dConvert10bit+0x12>
    ADCSRB |= _BV(MUX5);
    5008:	80 91 7b 00 	lds	r24, 0x007B
    500c:	88 60       	ori	r24, 0x08	; 8
    500e:	03 c0       	rjmp	.+6      	; 0x5016 <a2dConvert10bit+0x18>
else
    ADCSRB &= ~_BV(MUX5);
    5010:	80 91 7b 00 	lds	r24, 0x007B
    5014:	87 7f       	andi	r24, 0xF7	; 247
    5016:	80 93 7b 00 	sts	0x007B, r24

   outb(ADMUX, (inb(ADMUX) & ~7) | (ch & 7));   // set channel
    501a:	80 91 7c 00 	lds	r24, 0x007C
    501e:	97 70       	andi	r25, 0x07	; 7
    5020:	88 7f       	andi	r24, 0xF8	; 248
    5022:	89 2b       	or	r24, r25
    5024:	80 93 7c 00 	sts	0x007C, r24

	//outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
    5028:	80 91 7a 00 	lds	r24, 0x007A
    502c:	80 61       	ori	r24, 0x10	; 16
    502e:	80 93 7a 00 	sts	0x007A, r24
	sbi(ADCSR, ADSC);						// start conversion
    5032:	80 91 7a 00 	lds	r24, 0x007A
    5036:	80 64       	ori	r24, 0x40	; 64
    5038:	80 93 7a 00 	sts	0x007A, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
    503c:	80 91 7a 00 	lds	r24, 0x007A
    5040:	86 fd       	sbrc	r24, 6
    5042:	fc cf       	rjmp	.-8      	; 0x503c <a2dConvert10bit+0x3e>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	//return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits) //old version
	return ADC;//new version code
    5044:	20 91 78 00 	lds	r18, 0x0078
    5048:	30 91 79 00 	lds	r19, 0x0079
}
    504c:	c9 01       	movw	r24, r18
    504e:	08 95       	ret

00005050 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
    5050:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <a2dConvert10bit>
    5054:	96 95       	lsr	r25
    5056:	87 95       	ror	r24
    5058:	96 95       	lsr	r25
    505a:	87 95       	ror	r24
}
    505c:	08 95       	ret

0000505e <__vector_29>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
    505e:	1f 92       	push	r1
    5060:	0f 92       	push	r0
    5062:	0f b6       	in	r0, 0x3f	; 63
    5064:	0f 92       	push	r0
    5066:	11 24       	eor	r1, r1
    5068:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
    506a:	8f ef       	ldi	r24, 0xFF	; 255
    506c:	80 93 1a 12 	sts	0x121A, r24
}
    5070:	8f 91       	pop	r24
    5072:	0f 90       	pop	r0
    5074:	0f be       	out	0x3f, r0	; 63
    5076:	0f 90       	pop	r0
    5078:	1f 90       	pop	r1
    507a:	18 95       	reti

0000507c <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    507c:	90 93 63 11 	sts	0x1163, r25
    5080:	80 93 62 11 	sts	0x1162, r24
}
    5084:	08 95       	ret

00005086 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    5086:	1f 93       	push	r17
    5088:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
    508a:	8a 30       	cpi	r24, 0x0A	; 10
    508c:	31 f4       	brne	.+12     	; 0x509a <rprintfChar+0x14>
		rputchar('\r');
    508e:	e0 91 62 11 	lds	r30, 0x1162
    5092:	f0 91 63 11 	lds	r31, 0x1163
    5096:	8d e0       	ldi	r24, 0x0D	; 13
    5098:	09 95       	icall
	// send character
	rputchar(c);
    509a:	e0 91 62 11 	lds	r30, 0x1162
    509e:	f0 91 63 11 	lds	r31, 0x1163
    50a2:	81 2f       	mov	r24, r17
    50a4:	09 95       	icall
}
    50a6:	1f 91       	pop	r17
    50a8:	08 95       	ret

000050aa <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    50aa:	cf 93       	push	r28
    50ac:	df 93       	push	r29
    50ae:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    50b0:	00 97       	sbiw	r24, 0x00	; 0
    50b2:	21 f4       	brne	.+8      	; 0x50bc <rprintfStr+0x12>
    50b4:	06 c0       	rjmp	.+12     	; 0x50c2 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    50b6:	21 96       	adiw	r28, 0x01	; 1
    50b8:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    50bc:	88 81       	ld	r24, Y
    50be:	88 23       	and	r24, r24
    50c0:	d1 f7       	brne	.-12     	; 0x50b6 <rprintfStr+0xc>
		rprintfChar(*str++);
}
    50c2:	df 91       	pop	r29
    50c4:	cf 91       	pop	r28
    50c6:	08 95       	ret

000050c8 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    50c8:	ef 92       	push	r14
    50ca:	ff 92       	push	r15
    50cc:	0f 93       	push	r16
    50ce:	1f 93       	push	r17
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
    50d4:	8c 01       	movw	r16, r24
    50d6:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
    50d8:	00 97       	sbiw	r24, 0x00	; 0
    50da:	e9 f0       	breq	.+58     	; 0x5116 <rprintfStrLen+0x4e>
    50dc:	20 e0       	ldi	r18, 0x00	; 0
    50de:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    50e0:	26 17       	cp	r18, r22
    50e2:	37 07       	cpc	r19, r23
    50e4:	38 f4       	brcc	.+14     	; 0x50f4 <rprintfStrLen+0x2c>
    50e6:	f8 01       	movw	r30, r16
    50e8:	81 91       	ld	r24, Z+
    50ea:	8f 01       	movw	r16, r30
    50ec:	2f 5f       	subi	r18, 0xFF	; 255
    50ee:	3f 4f       	sbci	r19, 0xFF	; 255
    50f0:	88 23       	and	r24, r24
    50f2:	b1 f7       	brne	.-20     	; 0x50e0 <rprintfStrLen+0x18>
    50f4:	c0 e0       	ldi	r28, 0x00	; 0
    50f6:	d0 e0       	ldi	r29, 0x00	; 0
    50f8:	0b c0       	rjmp	.+22     	; 0x5110 <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    50fa:	f8 01       	movw	r30, r16
    50fc:	80 81       	ld	r24, Z
    50fe:	88 23       	and	r24, r24
    5100:	19 f0       	breq	.+6      	; 0x5108 <rprintfStrLen+0x40>
			rprintfChar(*str++);
    5102:	0f 5f       	subi	r16, 0xFF	; 255
    5104:	1f 4f       	sbci	r17, 0xFF	; 255
    5106:	01 c0       	rjmp	.+2      	; 0x510a <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
    5108:	80 e2       	ldi	r24, 0x20	; 32
    510a:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    510e:	21 96       	adiw	r28, 0x01	; 1
    5110:	ce 15       	cp	r28, r14
    5112:	df 05       	cpc	r29, r15
    5114:	90 f3       	brcs	.-28     	; 0x50fa <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    5116:	df 91       	pop	r29
    5118:	cf 91       	pop	r28
    511a:	1f 91       	pop	r17
    511c:	0f 91       	pop	r16
    511e:	ff 90       	pop	r15
    5120:	ef 90       	pop	r14
    5122:	08 95       	ret

00005124 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    5124:	cf 93       	push	r28
    5126:	df 93       	push	r29
    5128:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    512a:	00 97       	sbiw	r24, 0x00	; 0
    512c:	19 f4       	brne	.+6      	; 0x5134 <rprintfProgStr+0x10>
    512e:	07 c0       	rjmp	.+14     	; 0x513e <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    5130:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
    5134:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    5136:	21 96       	adiw	r28, 0x01	; 1
    5138:	84 91       	lpm	r24, Z+
    513a:	88 23       	and	r24, r24
    513c:	c9 f7       	brne	.-14     	; 0x5130 <rprintfProgStr+0xc>
		rprintfChar(c);
}
    513e:	df 91       	pop	r29
    5140:	cf 91       	pop	r28
    5142:	08 95       	ret

00005144 <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    5144:	8a e0       	ldi	r24, 0x0A	; 10
    5146:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
}
    514a:	08 95       	ret

0000514c <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    514c:	e8 2f       	mov	r30, r24
    514e:	f0 e0       	ldi	r31, 0x00	; 0
    5150:	ef 70       	andi	r30, 0x0F	; 15
    5152:	f0 70       	andi	r31, 0x00	; 0
    5154:	e3 5c       	subi	r30, 0xC3	; 195
    5156:	fd 4f       	sbci	r31, 0xFD	; 253
    5158:	e4 91       	lpm	r30, Z+
    515a:	8e 2f       	mov	r24, r30
    515c:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
}
    5160:	08 95       	ret

00005162 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    5162:	1f 93       	push	r17
    5164:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
    5166:	82 95       	swap	r24
    5168:	8f 70       	andi	r24, 0x0F	; 15
    516a:	0e 94 a6 28 	call	0x514c	; 0x514c <rprintfu04>
	rprintfu04(data);
    516e:	81 2f       	mov	r24, r17
    5170:	0e 94 a6 28 	call	0x514c	; 0x514c <rprintfu04>
}
    5174:	1f 91       	pop	r17
    5176:	08 95       	ret

00005178 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    5178:	1f 93       	push	r17
    517a:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
    517c:	89 2f       	mov	r24, r25
    517e:	0e 94 b1 28 	call	0x5162	; 0x5162 <rprintfu08>
	rprintfu08(data);
    5182:	81 2f       	mov	r24, r17
    5184:	0e 94 b1 28 	call	0x5162	; 0x5162 <rprintfu08>
}
    5188:	1f 91       	pop	r17
    518a:	08 95       	ret

0000518c <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    518c:	ef 92       	push	r14
    518e:	ff 92       	push	r15
    5190:	0f 93       	push	r16
    5192:	1f 93       	push	r17
    5194:	7b 01       	movw	r14, r22
    5196:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
    5198:	c8 01       	movw	r24, r16
    519a:	aa 27       	eor	r26, r26
    519c:	bb 27       	eor	r27, r27
    519e:	0e 94 bc 28 	call	0x5178	; 0x5178 <rprintfu16>
	rprintfu16(data);
    51a2:	c7 01       	movw	r24, r14
    51a4:	0e 94 bc 28 	call	0x5178	; 0x5178 <rprintfu16>
}
    51a8:	1f 91       	pop	r17
    51aa:	0f 91       	pop	r16
    51ac:	ff 90       	pop	r15
    51ae:	ef 90       	pop	r14
    51b0:	08 95       	ret

000051b2 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    51b2:	2f 92       	push	r2
    51b4:	3f 92       	push	r3
    51b6:	4f 92       	push	r4
    51b8:	5f 92       	push	r5
    51ba:	6f 92       	push	r6
    51bc:	7f 92       	push	r7
    51be:	8f 92       	push	r8
    51c0:	9f 92       	push	r9
    51c2:	af 92       	push	r10
    51c4:	bf 92       	push	r11
    51c6:	cf 92       	push	r12
    51c8:	df 92       	push	r13
    51ca:	ef 92       	push	r14
    51cc:	ff 92       	push	r15
    51ce:	0f 93       	push	r16
    51d0:	1f 93       	push	r17
    51d2:	df 93       	push	r29
    51d4:	cf 93       	push	r28
    51d6:	cd b7       	in	r28, 0x3d	; 61
    51d8:	de b7       	in	r29, 0x3e	; 62
    51da:	a3 97       	sbiw	r28, 0x23	; 35
    51dc:	0f b6       	in	r0, 0x3f	; 63
    51de:	f8 94       	cli
    51e0:	de bf       	out	0x3e, r29	; 62
    51e2:	0f be       	out	0x3f, r0	; 63
    51e4:	cd bf       	out	0x3d, r28	; 61
    51e6:	6a a3       	std	Y+34, r22	; 0x22
    51e8:	24 2e       	mov	r2, r20
    51ea:	2b a3       	std	Y+35, r18	; 0x23
    51ec:	37 01       	movw	r6, r14
    51ee:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    51f0:	44 23       	and	r20, r20
    51f2:	51 f0       	breq	.+20     	; 0x5208 <rprintfNum+0x56>
    51f4:	17 ff       	sbrs	r17, 7
    51f6:	08 c0       	rjmp	.+16     	; 0x5208 <rprintfNum+0x56>
	{
		x = -n;
    51f8:	ee 24       	eor	r14, r14
    51fa:	ff 24       	eor	r15, r15
    51fc:	87 01       	movw	r16, r14
    51fe:	e6 18       	sub	r14, r6
    5200:	f7 08       	sbc	r15, r7
    5202:	08 09       	sbc	r16, r8
    5204:	19 09       	sbc	r17, r9
    5206:	02 c0       	rjmp	.+4      	; 0x520c <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
    5208:	84 01       	movw	r16, r8
    520a:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    520c:	2a a1       	ldd	r18, Y+34	; 0x22
    520e:	21 50       	subi	r18, 0x01	; 1
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	21 10       	cpse	r2, r1
    5214:	91 e0       	ldi	r25, 0x01	; 1
    5216:	29 1b       	sub	r18, r25
    5218:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
    521a:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    521c:	a8 2e       	mov	r10, r24
    521e:	bb 24       	eor	r11, r11
    5220:	cc 24       	eor	r12, r12
    5222:	dd 24       	eor	r13, r13
    5224:	c8 01       	movw	r24, r16
    5226:	b7 01       	movw	r22, r14
    5228:	a6 01       	movw	r20, r12
    522a:	95 01       	movw	r18, r10
    522c:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__udivmodsi4>
    5230:	fb 01       	movw	r30, r22
    5232:	ef 70       	andi	r30, 0x0F	; 15
    5234:	f0 70       	andi	r31, 0x00	; 0
    5236:	e3 5c       	subi	r30, 0xC3	; 195
    5238:	fd 4f       	sbci	r31, 0xFD	; 253
    523a:	64 91       	lpm	r22, Z+
    523c:	6f 8f       	std	Y+31, r22	; 0x1f
    523e:	c8 01       	movw	r24, r16
    5240:	b7 01       	movw	r22, r14
    5242:	a6 01       	movw	r20, r12
    5244:	95 01       	movw	r18, r10
    5246:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__udivmodsi4>
    524a:	c9 01       	movw	r24, r18
    524c:	da 01       	movw	r26, r20
    524e:	7c 01       	movw	r14, r24
    5250:	8d 01       	movw	r16, r26
    5252:	9e e1       	ldi	r25, 0x1E	; 30
    5254:	49 2e       	mov	r4, r25
    5256:	51 2c       	mov	r5, r1
    5258:	4c 0e       	add	r4, r28
    525a:	5d 1e       	adc	r5, r29
    525c:	39 a0       	ldd	r3, Y+33	; 0x21
    525e:	25 c0       	rjmp	.+74     	; 0x52aa <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    5260:	e1 14       	cp	r14, r1
    5262:	f1 04       	cpc	r15, r1
    5264:	01 05       	cpc	r16, r1
    5266:	11 05       	cpc	r17, r1
    5268:	c9 f0       	breq	.+50     	; 0x529c <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    526a:	c8 01       	movw	r24, r16
    526c:	b7 01       	movw	r22, r14
    526e:	a6 01       	movw	r20, r12
    5270:	95 01       	movw	r18, r10
    5272:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__udivmodsi4>
    5276:	fb 01       	movw	r30, r22
    5278:	ef 70       	andi	r30, 0x0F	; 15
    527a:	f0 70       	andi	r31, 0x00	; 0
    527c:	e3 5c       	subi	r30, 0xC3	; 195
    527e:	fd 4f       	sbci	r31, 0xFD	; 253
    5280:	64 91       	lpm	r22, Z+
    5282:	f2 01       	movw	r30, r4
    5284:	60 83       	st	Z, r22
    5286:	c8 01       	movw	r24, r16
    5288:	b7 01       	movw	r22, r14
    528a:	a6 01       	movw	r20, r12
    528c:	95 01       	movw	r18, r10
    528e:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__udivmodsi4>
    5292:	c9 01       	movw	r24, r18
    5294:	da 01       	movw	r26, r20
    5296:	7c 01       	movw	r14, r24
    5298:	8d 01       	movw	r16, r26
    529a:	03 c0       	rjmp	.+6      	; 0x52a2 <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    529c:	2b a1       	ldd	r18, Y+35	; 0x23
    529e:	f2 01       	movw	r30, r4
    52a0:	20 83       	st	Z, r18
    52a2:	3a 94       	dec	r3
    52a4:	08 94       	sec
    52a6:	41 08       	sbc	r4, r1
    52a8:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    52aa:	33 20       	and	r3, r3
    52ac:	c9 f6       	brne	.-78     	; 0x5260 <rprintfNum+0xae>
    52ae:	ce 01       	movw	r24, r28
    52b0:	4f 96       	adiw	r24, 0x1f	; 31
    52b2:	8c 01       	movw	r16, r24
    52b4:	e9 a1       	ldd	r30, Y+33	; 0x21
    52b6:	0e 1b       	sub	r16, r30
    52b8:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    52ba:	22 20       	and	r2, r2
    52bc:	f1 f0       	breq	.+60     	; 0x52fa <rprintfNum+0x148>
	{
		if(n < 0)
    52be:	97 fe       	sbrs	r9, 7
    52c0:	05 c0       	rjmp	.+10     	; 0x52cc <rprintfNum+0x11a>
		{
   			*--p = '-';
    52c2:	8d e2       	ldi	r24, 0x2D	; 45
    52c4:	f8 01       	movw	r30, r16
    52c6:	82 93       	st	-Z, r24
    52c8:	8f 01       	movw	r16, r30
    52ca:	17 c0       	rjmp	.+46     	; 0x52fa <rprintfNum+0x148>
    52cc:	c8 01       	movw	r24, r16
    52ce:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    52d0:	61 14       	cp	r6, r1
    52d2:	71 04       	cpc	r7, r1
    52d4:	81 04       	cpc	r8, r1
    52d6:	91 04       	cpc	r9, r1
    52d8:	19 f0       	breq	.+6      	; 0x52e0 <rprintfNum+0x12e>
		{
	   		*--p = '+';
    52da:	8c 01       	movw	r16, r24
    52dc:	8b e2       	ldi	r24, 0x2B	; 43
    52de:	02 c0       	rjmp	.+4      	; 0x52e4 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    52e0:	8c 01       	movw	r16, r24
    52e2:	80 e2       	ldi	r24, 0x20	; 32
    52e4:	f8 01       	movw	r30, r16
    52e6:	80 83       	st	Z, r24
    52e8:	08 c0       	rjmp	.+16     	; 0x52fa <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    52ea:	f8 01       	movw	r30, r16
    52ec:	81 91       	ld	r24, Z+
    52ee:	8f 01       	movw	r16, r30
    52f0:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
    52f4:	fa a1       	ldd	r31, Y+34	; 0x22
    52f6:	f1 50       	subi	r31, 0x01	; 1
    52f8:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    52fa:	2a a1       	ldd	r18, Y+34	; 0x22
    52fc:	22 23       	and	r18, r18
    52fe:	a9 f7       	brne	.-22     	; 0x52ea <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    5300:	a3 96       	adiw	r28, 0x23	; 35
    5302:	0f b6       	in	r0, 0x3f	; 63
    5304:	f8 94       	cli
    5306:	de bf       	out	0x3e, r29	; 62
    5308:	0f be       	out	0x3f, r0	; 63
    530a:	cd bf       	out	0x3d, r28	; 61
    530c:	cf 91       	pop	r28
    530e:	df 91       	pop	r29
    5310:	1f 91       	pop	r17
    5312:	0f 91       	pop	r16
    5314:	ff 90       	pop	r15
    5316:	ef 90       	pop	r14
    5318:	df 90       	pop	r13
    531a:	cf 90       	pop	r12
    531c:	bf 90       	pop	r11
    531e:	af 90       	pop	r10
    5320:	9f 90       	pop	r9
    5322:	8f 90       	pop	r8
    5324:	7f 90       	pop	r7
    5326:	6f 90       	pop	r6
    5328:	5f 90       	pop	r5
    532a:	4f 90       	pop	r4
    532c:	3f 90       	pop	r3
    532e:	2f 90       	pop	r2
    5330:	08 95       	ret

00005332 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    5332:	4f 92       	push	r4
    5334:	5f 92       	push	r5
    5336:	6f 92       	push	r6
    5338:	7f 92       	push	r7
    533a:	8f 92       	push	r8
    533c:	9f 92       	push	r9
    533e:	af 92       	push	r10
    5340:	bf 92       	push	r11
    5342:	cf 92       	push	r12
    5344:	df 92       	push	r13
    5346:	ef 92       	push	r14
    5348:	ff 92       	push	r15
    534a:	0f 93       	push	r16
    534c:	1f 93       	push	r17
    534e:	cf 93       	push	r28
    5350:	df 93       	push	r29
    5352:	48 2e       	mov	r4, r24
    5354:	5a 01       	movw	r10, r20
    5356:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
    5358:	cb 01       	movw	r24, r22
    535a:	ba 01       	movw	r22, r20
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	40 e0       	ldi	r20, 0x00	; 0
    5362:	50 e0       	ldi	r21, 0x00	; 0
    5364:	0e 94 58 34 	call	0x68b0	; 0x68b0 <__gesf2>
    5368:	18 16       	cp	r1, r24
    536a:	1c f4       	brge	.+6      	; 0x5372 <rprintfFloat+0x40>
    536c:	35 01       	movw	r6, r10
    536e:	46 01       	movw	r8, r12
    5370:	06 c0       	rjmp	.+12     	; 0x537e <rprintfFloat+0x4c>
    5372:	35 01       	movw	r6, r10
    5374:	46 01       	movw	r8, r12
    5376:	97 fa       	bst	r9, 7
    5378:	90 94       	com	r9
    537a:	97 f8       	bld	r9, 7
    537c:	90 94       	com	r9
    537e:	0f 2e       	mov	r0, r31
    5380:	f0 e0       	ldi	r31, 0x00	; 0
    5382:	ef 2e       	mov	r14, r31
    5384:	f0 e0       	ldi	r31, 0x00	; 0
    5386:	ff 2e       	mov	r15, r31
    5388:	f0 e8       	ldi	r31, 0x80	; 128
    538a:	0f 2f       	mov	r16, r31
    538c:	ff e3       	ldi	r31, 0x3F	; 63
    538e:	1f 2f       	mov	r17, r31
    5390:	f0 2d       	mov	r31, r0
    5392:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
    5394:	c4 01       	movw	r24, r8
    5396:	b3 01       	movw	r22, r6
    5398:	a8 01       	movw	r20, r16
    539a:	97 01       	movw	r18, r14
    539c:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    53a0:	20 e0       	ldi	r18, 0x00	; 0
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	40 e2       	ldi	r20, 0x20	; 32
    53a6:	51 e4       	ldi	r21, 0x41	; 65
    53a8:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__cmpsf2>
    53ac:	87 fd       	sbrc	r24, 7
    53ae:	0e c0       	rjmp	.+28     	; 0x53cc <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
    53b0:	c8 01       	movw	r24, r16
    53b2:	b7 01       	movw	r22, r14
    53b4:	20 e0       	ldi	r18, 0x00	; 0
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	40 e2       	ldi	r20, 0x20	; 32
    53ba:	51 e4       	ldi	r21, 0x41	; 65
    53bc:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    53c0:	7b 01       	movw	r14, r22
    53c2:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    53c4:	53 94       	inc	r5
    53c6:	8f e0       	ldi	r24, 0x0F	; 15
    53c8:	58 16       	cp	r5, r24
    53ca:	21 f7       	brne	.-56     	; 0x5394 <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    53cc:	c6 01       	movw	r24, r12
    53ce:	b5 01       	movw	r22, r10
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	30 e0       	ldi	r19, 0x00	; 0
    53d4:	40 e0       	ldi	r20, 0x00	; 0
    53d6:	50 e0       	ldi	r21, 0x00	; 0
    53d8:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__cmpsf2>
    53dc:	88 23       	and	r24, r24
    53de:	14 f4       	brge	.+4      	; 0x53e4 <rprintfFloat+0xb2>
		rprintfChar('-');
    53e0:	8d e2       	ldi	r24, 0x2D	; 45
    53e2:	01 c0       	rjmp	.+2      	; 0x53e6 <rprintfFloat+0xb4>
	else
		rprintfChar('+');
    53e4:	8b e2       	ldi	r24, 0x2B	; 43
    53e6:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
    53ea:	dd 24       	eor	r13, r13
    53ec:	aa 24       	eor	r10, r10
    53ee:	56 c0       	rjmp	.+172    	; 0x549c <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
    53f0:	c4 01       	movw	r24, r8
    53f2:	b3 01       	movw	r22, r6
    53f4:	a8 01       	movw	r20, r16
    53f6:	97 01       	movw	r18, r14
    53f8:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    53fc:	0e 94 e7 32 	call	0x65ce	; 0x65ce <__fixunssfsi>
    5400:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
    5402:	d6 2a       	or	r13, r22
    5404:	cd 2d       	mov	r28, r13
    5406:	d0 e0       	ldi	r29, 0x00	; 0
    5408:	cc 24       	eor	r12, r12
    540a:	dd 24       	eor	r13, r13
    540c:	c8 01       	movw	r24, r16
    540e:	b7 01       	movw	r22, r14
    5410:	20 e0       	ldi	r18, 0x00	; 0
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	40 e8       	ldi	r20, 0x80	; 128
    5416:	5f e3       	ldi	r21, 0x3F	; 63
    5418:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__cmpsf2>
    541c:	88 23       	and	r24, r24
    541e:	19 f4       	brne	.+6      	; 0x5426 <rprintfFloat+0xf4>
    5420:	21 e0       	ldi	r18, 0x01	; 1
    5422:	c2 2e       	mov	r12, r18
    5424:	d1 2c       	mov	r13, r1
    5426:	cc 29       	or	r28, r12
    5428:	dd 29       	or	r29, r13
    542a:	cd 2b       	or	r28, r29
    542c:	39 f0       	breq	.+14     	; 0x543c <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
    542e:	8b 2d       	mov	r24, r11
    5430:	80 5d       	subi	r24, 0xD0	; 208
    5432:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
    5436:	dd 24       	eor	r13, r13
    5438:	da 94       	dec	r13
    543a:	04 c0       	rjmp	.+8      	; 0x5444 <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
    543c:	80 e2       	ldi	r24, 0x20	; 32
    543e:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
    5442:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
    5444:	c8 01       	movw	r24, r16
    5446:	b7 01       	movw	r22, r14
    5448:	20 e0       	ldi	r18, 0x00	; 0
    544a:	30 e0       	ldi	r19, 0x00	; 0
    544c:	40 e8       	ldi	r20, 0x80	; 128
    544e:	5f e3       	ldi	r21, 0x3F	; 63
    5450:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__cmpsf2>
    5454:	88 23       	and	r24, r24
    5456:	19 f4       	brne	.+6      	; 0x545e <rprintfFloat+0x12c>
		{
			rprintfChar('.');
    5458:	8e e2       	ldi	r24, 0x2E	; 46
    545a:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
		}
		
		x -= (digit*place);
    545e:	6b 2d       	mov	r22, r11
    5460:	70 e0       	ldi	r23, 0x00	; 0
    5462:	88 27       	eor	r24, r24
    5464:	77 fd       	sbrc	r23, 7
    5466:	80 95       	com	r24
    5468:	98 2f       	mov	r25, r24
    546a:	0e 94 15 33 	call	0x662a	; 0x662a <__floatsisf>
    546e:	a8 01       	movw	r20, r16
    5470:	97 01       	movw	r18, r14
    5472:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__mulsf3>
    5476:	9b 01       	movw	r18, r22
    5478:	ac 01       	movw	r20, r24
    547a:	c4 01       	movw	r24, r8
    547c:	b3 01       	movw	r22, r6
    547e:	0e 94 95 31 	call	0x632a	; 0x632a <__subsf3>
    5482:	3b 01       	movw	r6, r22
    5484:	4c 01       	movw	r8, r24
		place /= 10.0;
    5486:	c8 01       	movw	r24, r16
    5488:	b7 01       	movw	r22, r14
    548a:	20 e0       	ldi	r18, 0x00	; 0
    548c:	30 e0       	ldi	r19, 0x00	; 0
    548e:	40 e2       	ldi	r20, 0x20	; 32
    5490:	51 e4       	ldi	r21, 0x41	; 65
    5492:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divsf3>
    5496:	7b 01       	movw	r14, r22
    5498:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    549a:	a3 94       	inc	r10
    549c:	a4 14       	cp	r10, r4
    549e:	08 f4       	brcc	.+2      	; 0x54a2 <rprintfFloat+0x170>
    54a0:	a7 cf       	rjmp	.-178    	; 0x53f0 <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    54a2:	df 91       	pop	r29
    54a4:	cf 91       	pop	r28
    54a6:	1f 91       	pop	r17
    54a8:	0f 91       	pop	r16
    54aa:	ff 90       	pop	r15
    54ac:	ef 90       	pop	r14
    54ae:	df 90       	pop	r13
    54b0:	cf 90       	pop	r12
    54b2:	bf 90       	pop	r11
    54b4:	af 90       	pop	r10
    54b6:	9f 90       	pop	r9
    54b8:	8f 90       	pop	r8
    54ba:	7f 90       	pop	r7
    54bc:	6f 90       	pop	r6
    54be:	5f 90       	pop	r5
    54c0:	4f 90       	pop	r4
    54c2:	08 95       	ret

000054c4 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    54c4:	7f 92       	push	r7
    54c6:	8f 92       	push	r8
    54c8:	9f 92       	push	r9
    54ca:	af 92       	push	r10
    54cc:	bf 92       	push	r11
    54ce:	cf 92       	push	r12
    54d0:	df 92       	push	r13
    54d2:	ef 92       	push	r14
    54d4:	ff 92       	push	r15
    54d6:	0f 93       	push	r16
    54d8:	1f 93       	push	r17
    54da:	df 93       	push	r29
    54dc:	cf 93       	push	r28
    54de:	cd b7       	in	r28, 0x3d	; 61
    54e0:	de b7       	in	r29, 0x3e	; 62
    54e2:	78 88       	ldd	r7, Y+16	; 0x10
    54e4:	c9 88       	ldd	r12, Y+17	; 0x11
    54e6:	da 88       	ldd	r13, Y+18	; 0x12
    54e8:	63 e1       	ldi	r22, 0x13	; 19
    54ea:	e6 2e       	mov	r14, r22
    54ec:	f1 2c       	mov	r15, r1
    54ee:	ec 0e       	add	r14, r28
    54f0:	fd 1e       	adc	r15, r29
    54f2:	14 c0       	rjmp	.+40     	; 0x551c <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    54f4:	88 23       	and	r24, r24
    54f6:	81 f4       	brne	.+32     	; 0x5518 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    54f8:	80 e0       	ldi	r24, 0x00	; 0
    54fa:	90 e0       	ldi	r25, 0x00	; 0
    54fc:	cf 91       	pop	r28
    54fe:	df 91       	pop	r29
    5500:	1f 91       	pop	r17
    5502:	0f 91       	pop	r16
    5504:	ff 90       	pop	r15
    5506:	ef 90       	pop	r14
    5508:	df 90       	pop	r13
    550a:	cf 90       	pop	r12
    550c:	bf 90       	pop	r11
    550e:	af 90       	pop	r10
    5510:	9f 90       	pop	r9
    5512:	8f 90       	pop	r8
    5514:	7f 90       	pop	r7
    5516:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    5518:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
    551c:	96 01       	movw	r18, r12
    551e:	2f 5f       	subi	r18, 0xFF	; 255
    5520:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    5522:	77 20       	and	r7, r7
    5524:	21 f0       	breq	.+8      	; 0x552e <rprintf1RamRom+0x6a>
    5526:	f6 01       	movw	r30, r12
    5528:	69 01       	movw	r12, r18
    552a:	84 91       	lpm	r24, Z+
    552c:	03 c0       	rjmp	.+6      	; 0x5534 <rprintf1RamRom+0x70>
    552e:	f6 01       	movw	r30, r12
    5530:	80 81       	ld	r24, Z
    5532:	69 01       	movw	r12, r18
    5534:	85 32       	cpi	r24, 0x25	; 37
    5536:	f1 f6       	brne	.-68     	; 0x54f4 <rprintf1RamRom+0x30>
    5538:	2f 5f       	subi	r18, 0xFF	; 255
    553a:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    553c:	77 20       	and	r7, r7
    553e:	21 f0       	breq	.+8      	; 0x5548 <rprintf1RamRom+0x84>
    5540:	f6 01       	movw	r30, r12
    5542:	69 01       	movw	r12, r18
    5544:	84 91       	lpm	r24, Z+
    5546:	03 c0       	rjmp	.+6      	; 0x554e <rprintf1RamRom+0x8a>
    5548:	f6 01       	movw	r30, r12
    554a:	80 81       	ld	r24, Z
    554c:	69 01       	movw	r12, r18
    554e:	84 36       	cpi	r24, 0x64	; 100
    5550:	29 f0       	breq	.+10     	; 0x555c <rprintf1RamRom+0x98>
    5552:	88 37       	cpi	r24, 0x78	; 120
    5554:	81 f0       	breq	.+32     	; 0x5576 <rprintf1RamRom+0xb2>
    5556:	83 36       	cpi	r24, 0x63	; 99
    5558:	f9 f6       	brne	.-66     	; 0x5518 <rprintf1RamRom+0x54>
    555a:	06 c0       	rjmp	.+12     	; 0x5568 <rprintf1RamRom+0xa4>
    555c:	00 e1       	ldi	r16, 0x10	; 16
    555e:	17 e2       	ldi	r17, 0x27	; 39
    5560:	5a e0       	ldi	r21, 0x0A	; 10
    5562:	a5 2e       	mov	r10, r21
    5564:	b1 2c       	mov	r11, r1
    5566:	0c c0       	rjmp	.+24     	; 0x5580 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    5568:	f7 01       	movw	r30, r14
    556a:	80 81       	ld	r24, Z
    556c:	22 e0       	ldi	r18, 0x02	; 2
    556e:	30 e0       	ldi	r19, 0x00	; 0
    5570:	e2 0e       	add	r14, r18
    5572:	f3 1e       	adc	r15, r19
    5574:	d1 cf       	rjmp	.-94     	; 0x5518 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    5576:	00 e0       	ldi	r16, 0x00	; 0
    5578:	10 e1       	ldi	r17, 0x10	; 16
    557a:	40 e1       	ldi	r20, 0x10	; 16
    557c:	a4 2e       	mov	r10, r20
    557e:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    5580:	32 e0       	ldi	r19, 0x02	; 2
    5582:	83 2e       	mov	r8, r19
    5584:	91 2c       	mov	r9, r1
    5586:	8e 0c       	add	r8, r14
    5588:	9f 1c       	adc	r9, r15
    558a:	f7 01       	movw	r30, r14
    558c:	e0 80       	ld	r14, Z
    558e:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    5590:	84 36       	cpi	r24, 0x64	; 100
    5592:	b1 f4       	brne	.+44     	; 0x55c0 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    5594:	f7 fe       	sbrs	r15, 7
    5596:	11 c0       	rjmp	.+34     	; 0x55ba <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    5598:	f0 94       	com	r15
    559a:	e1 94       	neg	r14
    559c:	f1 08       	sbc	r15, r1
    559e:	f3 94       	inc	r15
					rprintfChar('-');
    55a0:	8d e2       	ldi	r24, 0x2D	; 45
    55a2:	0e 94 43 28 	call	0x5086	; 0x5086 <rprintfChar>
    55a6:	09 c0       	rjmp	.+18     	; 0x55ba <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    55a8:	c8 01       	movw	r24, r16
    55aa:	6a e0       	ldi	r22, 0x0A	; 10
    55ac:	70 e0       	ldi	r23, 0x00	; 0
    55ae:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <__udivmodhi4>
    55b2:	8b 01       	movw	r16, r22
    55b4:	62 30       	cpi	r22, 0x02	; 2
    55b6:	71 05       	cpc	r23, r1
    55b8:	18 f0       	brcs	.+6      	; 0x55c0 <rprintf1RamRom+0xfc>
    55ba:	e0 16       	cp	r14, r16
    55bc:	f1 06       	cpc	r15, r17
    55be:	a0 f3       	brcs	.-24     	; 0x55a8 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    55c0:	c7 01       	movw	r24, r14
    55c2:	b8 01       	movw	r22, r16
    55c4:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <__udivmodhi4>
    55c8:	86 2f       	mov	r24, r22
    55ca:	0e 94 a6 28 	call	0x514c	; 0x514c <rprintfu04>
				u_val %= div_val;
    55ce:	c7 01       	movw	r24, r14
    55d0:	b8 01       	movw	r22, r16
    55d2:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <__udivmodhi4>
    55d6:	7c 01       	movw	r14, r24
				div_val /= base;
    55d8:	c8 01       	movw	r24, r16
    55da:	b5 01       	movw	r22, r10
    55dc:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <__udivmodhi4>
    55e0:	8b 01       	movw	r16, r22
			} while (div_val);
    55e2:	61 15       	cp	r22, r1
    55e4:	71 05       	cpc	r23, r1
    55e6:	61 f7       	brne	.-40     	; 0x55c0 <rprintf1RamRom+0xfc>
    55e8:	74 01       	movw	r14, r8
    55ea:	98 cf       	rjmp	.-208    	; 0x551c <rprintf1RamRom+0x58>

000055ec <i2cSetBitrate>:
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		cbi(TWSR, TWPS0);
    55ec:	20 91 b9 00 	lds	r18, 0x00B9
    55f0:	2e 7f       	andi	r18, 0xFE	; 254
    55f2:	20 93 b9 00 	sts	0x00B9, r18
		cbi(TWSR, TWPS1);
    55f6:	20 91 b9 00 	lds	r18, 0x00B9
    55fa:	2d 7f       	andi	r18, 0xFD	; 253
    55fc:	20 93 b9 00 	sts	0x00B9, r18
	#endif
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
    5600:	9c 01       	movw	r18, r24
    5602:	40 e0       	ldi	r20, 0x00	; 0
    5604:	50 e0       	ldi	r21, 0x00	; 0
    5606:	60 e8       	ldi	r22, 0x80	; 128
    5608:	7e e3       	ldi	r23, 0x3E	; 62
    560a:	80 e0       	ldi	r24, 0x00	; 0
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	0e 94 01 37 	call	0x6e02	; 0x6e02 <__divmodsi4>
	if(bitrate_div >= 16)
    5612:	20 31       	cpi	r18, 0x10	; 16
    5614:	30 f0       	brcs	.+12     	; 0x5622 <i2cSetBitrate+0x36>
		bitrate_div = (bitrate_div-16)/2;
    5616:	82 2f       	mov	r24, r18
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	40 97       	sbiw	r24, 0x10	; 16
    561c:	95 95       	asr	r25
    561e:	87 95       	ror	r24
    5620:	28 2f       	mov	r18, r24
	outb(TWBR, bitrate_div);
    5622:	20 93 b8 00 	sts	0x00B8, r18
}
    5626:	08 95       	ret

00005628 <i2cInit>:

// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	sbi(PORTD, 0);	// i2c SCL on 640
    5628:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, 1);	// i2c SDA on 640
    562a:	59 9a       	sbi	0x0b, 1	; 11

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
    562c:	10 92 ab 11 	sts	0x11AB, r1
    5630:	10 92 aa 11 	sts	0x11AA, r1
	i2cSlaveTransmit = 0;
    5634:	10 92 ad 11 	sts	0x11AD, r1
    5638:	10 92 ac 11 	sts	0x11AC, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
    563c:	84 e6       	ldi	r24, 0x64	; 100
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
    5644:	ec eb       	ldi	r30, 0xBC	; 188
    5646:	f0 e0       	ldi	r31, 0x00	; 0
    5648:	80 81       	ld	r24, Z
    564a:	84 60       	ori	r24, 0x04	; 4
    564c:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    564e:	10 92 64 11 	sts	0x1164, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
    5652:	80 81       	ld	r24, Z
    5654:	81 60       	ori	r24, 0x01	; 1
    5656:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
    5658:	80 81       	ld	r24, Z
    565a:	80 64       	ori	r24, 0x40	; 64
    565c:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    565e:	78 94       	sei
}
    5660:	08 95       	ret

00005662 <i2cSetLocalDeviceAddr>:
}

void i2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	// set local device address (used in slave mode only)
	outb(TWAR, ((deviceAddr&0xFE) | (genCallEn?1:0)) );
    5662:	90 e0       	ldi	r25, 0x00	; 0
    5664:	61 11       	cpse	r22, r1
    5666:	91 e0       	ldi	r25, 0x01	; 1
    5668:	8e 7f       	andi	r24, 0xFE	; 254
    566a:	98 2b       	or	r25, r24
    566c:	90 93 ba 00 	sts	0x00BA, r25
}
    5670:	08 95       	ret

00005672 <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* recieveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
    5672:	90 93 ab 11 	sts	0x11AB, r25
    5676:	80 93 aa 11 	sts	0x11AA, r24
}
    567a:	08 95       	ret

0000567c <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
    567c:	90 93 ad 11 	sts	0x11AD, r25
    5680:	80 93 ac 11 	sts	0x11AC, r24
}
    5684:	08 95       	ret

00005686 <i2cSendStart>:

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    5686:	ec eb       	ldi	r30, 0xBC	; 188
    5688:	f0 e0       	ldi	r31, 0x00	; 0
    568a:	80 81       	ld	r24, Z
    568c:	8f 70       	andi	r24, 0x0F	; 15
    568e:	80 6a       	ori	r24, 0xA0	; 160
    5690:	80 83       	st	Z, r24
}
    5692:	08 95       	ret

00005694 <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    5694:	ec eb       	ldi	r30, 0xBC	; 188
    5696:	f0 e0       	ldi	r31, 0x00	; 0
    5698:	80 81       	ld	r24, Z
    569a:	8f 70       	andi	r24, 0x0F	; 15
    569c:	80 6d       	ori	r24, 0xD0	; 208
    569e:	80 83       	st	Z, r24
}
    56a0:	08 95       	ret

000056a2 <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    56a2:	80 91 bc 00 	lds	r24, 0x00BC
    56a6:	87 ff       	sbrs	r24, 7
    56a8:	fc cf       	rjmp	.-8      	; 0x56a2 <i2cWaitForComplete>
}
    56aa:	08 95       	ret

000056ac <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    56ac:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    56b0:	ec eb       	ldi	r30, 0xBC	; 188
    56b2:	f0 e0       	ldi	r31, 0x00	; 0
    56b4:	80 81       	ld	r24, Z
    56b6:	8f 70       	andi	r24, 0x0F	; 15
    56b8:	80 68       	ori	r24, 0x80	; 128
    56ba:	80 83       	st	Z, r24
}
    56bc:	08 95       	ret

000056be <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    56be:	88 23       	and	r24, r24
    56c0:	29 f0       	breq	.+10     	; 0x56cc <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    56c2:	80 91 bc 00 	lds	r24, 0x00BC
    56c6:	8f 70       	andi	r24, 0x0F	; 15
    56c8:	80 6c       	ori	r24, 0xC0	; 192
    56ca:	04 c0       	rjmp	.+8      	; 0x56d4 <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    56cc:	80 91 bc 00 	lds	r24, 0x00BC
    56d0:	8f 70       	andi	r24, 0x0F	; 15
    56d2:	80 68       	ori	r24, 0x80	; 128
    56d4:	80 93 bc 00 	sts	0x00BC, r24
    56d8:	08 95       	ret

000056da <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    56da:	80 91 bb 00 	lds	r24, 0x00BB
}
    56de:	08 95       	ret

000056e0 <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
    56e0:	80 91 b9 00 	lds	r24, 0x00B9
}
    56e4:	08 95       	ret

000056e6 <i2cMasterSend>:

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
{
    56e6:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    56e8:	80 91 64 11 	lds	r24, 0x1164
    56ec:	88 23       	and	r24, r24
    56ee:	e1 f7       	brne	.-8      	; 0x56e8 <i2cMasterSend+0x2>
	// set state
	I2cState = I2C_MASTER_TX;
    56f0:	82 e0       	ldi	r24, 0x02	; 2
    56f2:	80 93 64 11 	sts	0x1164, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
    56f6:	9e 7f       	andi	r25, 0xFE	; 254
    56f8:	90 93 65 11 	sts	0x1165, r25
    56fc:	a6 e6       	ldi	r26, 0x66	; 102
    56fe:	b1 e1       	ldi	r27, 0x11	; 17
    5700:	fa 01       	movw	r30, r20
    5702:	02 c0       	rjmp	.+4      	; 0x5708 <i2cMasterSend+0x22>
	for(i=0; i<length; i++)
		I2cSendData[i] = *data++;
    5704:	81 91       	ld	r24, Z+
    5706:	8d 93       	st	X+, r24
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
    5708:	8e 2f       	mov	r24, r30
    570a:	84 1b       	sub	r24, r20
    570c:	86 17       	cp	r24, r22
    570e:	d0 f3       	brcs	.-12     	; 0x5704 <i2cMasterSend+0x1e>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
    5710:	10 92 86 11 	sts	0x1186, r1
	I2cSendDataLength = length;
    5714:	60 93 87 11 	sts	0x1187, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    5718:	80 91 bc 00 	lds	r24, 0x00BC
    571c:	8f 70       	andi	r24, 0x0F	; 15
    571e:	80 6a       	ori	r24, 0xA0	; 160
    5720:	80 93 bc 00 	sts	0x00BC, r24
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}
    5724:	08 95       	ret

00005726 <i2cMasterReceive>:

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
{
    5726:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    5728:	80 91 64 11 	lds	r24, 0x1164
    572c:	88 23       	and	r24, r24
    572e:	e1 f7       	brne	.-8      	; 0x5728 <i2cMasterReceive+0x2>
	// set state
	I2cState = I2C_MASTER_RX;
    5730:	83 e0       	ldi	r24, 0x03	; 3
    5732:	80 93 64 11 	sts	0x1164, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr|0x01);	// RW set: read operation
    5736:	91 60       	ori	r25, 0x01	; 1
    5738:	90 93 65 11 	sts	0x1165, r25
	I2cReceiveDataIndex = 0;
    573c:	10 92 a8 11 	sts	0x11A8, r1
	I2cReceiveDataLength = length;
    5740:	60 93 a9 11 	sts	0x11A9, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    5744:	80 91 bc 00 	lds	r24, 0x00BC
    5748:	8f 70       	andi	r24, 0x0F	; 15
    574a:	80 6a       	ori	r24, 0xA0	; 160
    574c:	80 93 bc 00 	sts	0x00BC, r24
	I2cReceiveDataIndex = 0;
	I2cReceiveDataLength = length;
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
    5750:	80 91 64 11 	lds	r24, 0x1164
    5754:	88 23       	and	r24, r24
    5756:	e1 f7       	brne	.-8      	; 0x5750 <i2cMasterReceive+0x2a>
    5758:	a8 e8       	ldi	r26, 0x88	; 136
    575a:	b1 e1       	ldi	r27, 0x11	; 17
    575c:	fa 01       	movw	r30, r20
    575e:	02 c0       	rjmp	.+4      	; 0x5764 <i2cMasterReceive+0x3e>
	// return data
	for(i=0; i<length; i++)
		*data++ = I2cReceiveData[i];
    5760:	8d 91       	ld	r24, X+
    5762:	81 93       	st	Z+, r24
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
    5764:	8e 2f       	mov	r24, r30
    5766:	84 1b       	sub	r24, r20
    5768:	86 17       	cp	r24, r22
    576a:	d0 f3       	brcs	.-12     	; 0x5760 <i2cMasterReceive+0x3a>
		*data++ = I2cReceiveData[i];
}
    576c:	08 95       	ret

0000576e <i2cMasterSendNI>:

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
    576e:	98 2f       	mov	r25, r24
    5770:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    5772:	80 91 bc 00 	lds	r24, 0x00BC
    5776:	8e 7f       	andi	r24, 0xFE	; 254
    5778:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    577c:	80 91 bc 00 	lds	r24, 0x00BC
    5780:	8f 70       	andi	r24, 0x0F	; 15
    5782:	80 6a       	ori	r24, 0xA0	; 160
    5784:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5788:	80 91 bc 00 	lds	r24, 0x00BC
    578c:	87 ff       	sbrs	r24, 7
    578e:	fc cf       	rjmp	.-8      	; 0x5788 <i2cMasterSendNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
    5790:	9e 7f       	andi	r25, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    5792:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    5796:	80 91 bc 00 	lds	r24, 0x00BC
    579a:	8f 70       	andi	r24, 0x0F	; 15
    579c:	80 68       	ori	r24, 0x80	; 128
    579e:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    57a2:	80 91 bc 00 	lds	r24, 0x00BC
    57a6:	87 ff       	sbrs	r24, 7
    57a8:	fc cf       	rjmp	.-8      	; 0x57a2 <i2cMasterSendNI+0x34>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
    57aa:	80 91 b9 00 	lds	r24, 0x00B9
    57ae:	88 31       	cpi	r24, 0x18	; 24
    57b0:	89 f0       	breq	.+34     	; 0x57d4 <i2cMasterSendNI+0x66>
    57b2:	91 e0       	ldi	r25, 0x01	; 1
    57b4:	12 c0       	rjmp	.+36     	; 0x57da <i2cMasterSendNI+0x6c>
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    57b6:	80 81       	ld	r24, Z
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    57b8:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    57bc:	80 91 bc 00 	lds	r24, 0x00BC
    57c0:	8f 70       	andi	r24, 0x0F	; 15
    57c2:	80 68       	ori	r24, 0x80	; 128
    57c4:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    57c8:	80 91 bc 00 	lds	r24, 0x00BC
    57cc:	87 ff       	sbrs	r24, 7
    57ce:	fc cf       	rjmp	.-8      	; 0x57c8 <i2cMasterSendNI+0x5a>
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    57d0:	31 96       	adiw	r30, 0x01	; 1
			i2cWaitForComplete();
			length--;
    57d2:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
    57d4:	66 23       	and	r22, r22
    57d6:	79 f7       	brne	.-34     	; 0x57b6 <i2cMasterSendNI+0x48>
    57d8:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    57da:	80 91 bc 00 	lds	r24, 0x00BC
    57de:	8f 70       	andi	r24, 0x0F	; 15
    57e0:	80 6d       	ori	r24, 0xD0	; 208
    57e2:	80 93 bc 00 	sts	0x00BC, r24
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
    57e6:	80 91 bc 00 	lds	r24, 0x00BC
    57ea:	84 ff       	sbrs	r24, 4
    57ec:	fc cf       	rjmp	.-8      	; 0x57e6 <i2cMasterSendNI+0x78>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    57ee:	80 91 bc 00 	lds	r24, 0x00BC
    57f2:	81 60       	ori	r24, 0x01	; 1
    57f4:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    57f8:	89 2f       	mov	r24, r25
    57fa:	08 95       	ret

000057fc <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
    57fc:	98 2f       	mov	r25, r24
    57fe:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    5800:	80 91 bc 00 	lds	r24, 0x00BC
    5804:	8e 7f       	andi	r24, 0xFE	; 254
    5806:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    580a:	80 91 bc 00 	lds	r24, 0x00BC
    580e:	8f 70       	andi	r24, 0x0F	; 15
    5810:	80 6a       	ori	r24, 0xA0	; 160
    5812:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5816:	80 91 bc 00 	lds	r24, 0x00BC
    581a:	87 ff       	sbrs	r24, 7
    581c:	fc cf       	rjmp	.-8      	; 0x5816 <i2cMasterReceiveNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
    581e:	91 60       	ori	r25, 0x01	; 1
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    5820:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    5824:	80 91 bc 00 	lds	r24, 0x00BC
    5828:	8f 70       	andi	r24, 0x0F	; 15
    582a:	80 68       	ori	r24, 0x80	; 128
    582c:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5830:	80 91 bc 00 	lds	r24, 0x00BC
    5834:	87 ff       	sbrs	r24, 7
    5836:	fc cf       	rjmp	.-8      	; 0x5830 <i2cMasterReceiveNI+0x34>
	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
    5838:	80 91 b9 00 	lds	r24, 0x00B9
    583c:	80 34       	cpi	r24, 0x40	; 64
    583e:	81 f0       	breq	.+32     	; 0x5860 <i2cMasterReceiveNI+0x64>
    5840:	91 e0       	ldi	r25, 0x01	; 1
    5842:	1e c0       	rjmp	.+60     	; 0x5880 <i2cMasterReceiveNI+0x84>
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    5844:	80 91 bc 00 	lds	r24, 0x00BC
    5848:	8f 70       	andi	r24, 0x0F	; 15
    584a:	80 6c       	ori	r24, 0xC0	; 192
    584c:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5850:	80 91 bc 00 	lds	r24, 0x00BC
    5854:	87 ff       	sbrs	r24, 7
    5856:	fc cf       	rjmp	.-8      	; 0x5850 <i2cMasterReceiveNI+0x54>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    5858:	80 91 bb 00 	lds	r24, 0x00BB
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
    585c:	81 93       	st	Z+, r24
			// decrement length
			length--;
    585e:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
    5860:	62 30       	cpi	r22, 0x02	; 2
    5862:	80 f7       	brcc	.-32     	; 0x5844 <i2cMasterReceiveNI+0x48>
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    5864:	80 91 bc 00 	lds	r24, 0x00BC
    5868:	8f 70       	andi	r24, 0x0F	; 15
    586a:	80 68       	ori	r24, 0x80	; 128
    586c:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5870:	80 91 bc 00 	lds	r24, 0x00BC
    5874:	87 ff       	sbrs	r24, 7
    5876:	fc cf       	rjmp	.-8      	; 0x5870 <i2cMasterReceiveNI+0x74>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    5878:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
    587c:	80 83       	st	Z, r24
    587e:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    5880:	80 91 bc 00 	lds	r24, 0x00BC
    5884:	8f 70       	andi	r24, 0x0F	; 15
    5886:	80 6d       	ori	r24, 0xD0	; 208
    5888:	80 93 bc 00 	sts	0x00BC, r24
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    588c:	80 91 bc 00 	lds	r24, 0x00BC
    5890:	81 60       	ori	r24, 0x01	; 1
    5892:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    5896:	89 2f       	mov	r24, r25
    5898:	08 95       	ret

0000589a <__vector_39>:
}
*/

//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
{
    589a:	1f 92       	push	r1
    589c:	0f 92       	push	r0
    589e:	0f b6       	in	r0, 0x3f	; 63
    58a0:	0f 92       	push	r0
    58a2:	11 24       	eor	r1, r1
    58a4:	2f 93       	push	r18
    58a6:	3f 93       	push	r19
    58a8:	4f 93       	push	r20
    58aa:	5f 93       	push	r21
    58ac:	6f 93       	push	r22
    58ae:	7f 93       	push	r23
    58b0:	8f 93       	push	r24
    58b2:	9f 93       	push	r25
    58b4:	af 93       	push	r26
    58b6:	bf 93       	push	r27
    58b8:	ef 93       	push	r30
    58ba:	ff 93       	push	r31
	// read status bits
	u08 status = inb(TWSR) & TWSR_STATUS_MASK;
    58bc:	80 91 b9 00 	lds	r24, 0x00B9

	switch(status)
    58c0:	88 7f       	andi	r24, 0xF8	; 248
    58c2:	80 36       	cpi	r24, 0x60	; 96
    58c4:	09 f4       	brne	.+2      	; 0x58c8 <__vector_39+0x2e>
    58c6:	a0 c0       	rjmp	.+320    	; 0x5a08 <__vector_39+0x16e>
    58c8:	81 36       	cpi	r24, 0x61	; 97
    58ca:	70 f5       	brcc	.+92     	; 0x5928 <__vector_39+0x8e>
    58cc:	88 32       	cpi	r24, 0x28	; 40
    58ce:	09 f4       	brne	.+2      	; 0x58d2 <__vector_39+0x38>
    58d0:	5f c0       	rjmp	.+190    	; 0x5990 <__vector_39+0xf6>
    58d2:	89 32       	cpi	r24, 0x29	; 41
    58d4:	98 f4       	brcc	.+38     	; 0x58fc <__vector_39+0x62>
    58d6:	80 31       	cpi	r24, 0x10	; 16
    58d8:	09 f4       	brne	.+2      	; 0x58dc <__vector_39+0x42>
    58da:	57 c0       	rjmp	.+174    	; 0x598a <__vector_39+0xf0>
    58dc:	81 31       	cpi	r24, 0x11	; 17
    58de:	38 f4       	brcc	.+14     	; 0x58ee <__vector_39+0x54>
    58e0:	88 23       	and	r24, r24
    58e2:	09 f4       	brne	.+2      	; 0x58e6 <__vector_39+0x4c>
    58e4:	ea c0       	rjmp	.+468    	; 0x5aba <__vector_39+0x220>
    58e6:	88 30       	cpi	r24, 0x08	; 8
    58e8:	09 f0       	breq	.+2      	; 0x58ec <__vector_39+0x52>
    58ea:	ef c0       	rjmp	.+478    	; 0x5aca <__vector_39+0x230>
    58ec:	4e c0       	rjmp	.+156    	; 0x598a <__vector_39+0xf0>
    58ee:	88 31       	cpi	r24, 0x18	; 24
    58f0:	09 f4       	brne	.+2      	; 0x58f4 <__vector_39+0x5a>
    58f2:	4e c0       	rjmp	.+156    	; 0x5990 <__vector_39+0xf6>
    58f4:	80 32       	cpi	r24, 0x20	; 32
    58f6:	09 f0       	breq	.+2      	; 0x58fa <__vector_39+0x60>
    58f8:	e8 c0       	rjmp	.+464    	; 0x5aca <__vector_39+0x230>
    58fa:	df c0       	rjmp	.+446    	; 0x5aba <__vector_39+0x220>
    58fc:	80 34       	cpi	r24, 0x40	; 64
    58fe:	09 f4       	brne	.+2      	; 0x5902 <__vector_39+0x68>
    5900:	77 c0       	rjmp	.+238    	; 0x59f0 <__vector_39+0x156>
    5902:	81 34       	cpi	r24, 0x41	; 65
    5904:	38 f4       	brcc	.+14     	; 0x5914 <__vector_39+0x7a>
    5906:	80 33       	cpi	r24, 0x30	; 48
    5908:	09 f4       	brne	.+2      	; 0x590c <__vector_39+0x72>
    590a:	d7 c0       	rjmp	.+430    	; 0x5aba <__vector_39+0x220>
    590c:	88 33       	cpi	r24, 0x38	; 56
    590e:	09 f0       	breq	.+2      	; 0x5912 <__vector_39+0x78>
    5910:	dc c0       	rjmp	.+440    	; 0x5aca <__vector_39+0x230>
    5912:	5d c0       	rjmp	.+186    	; 0x59ce <__vector_39+0x134>
    5914:	80 35       	cpi	r24, 0x50	; 80
    5916:	09 f4       	brne	.+2      	; 0x591a <__vector_39+0x80>
    5918:	5f c0       	rjmp	.+190    	; 0x59d8 <__vector_39+0x13e>
    591a:	88 35       	cpi	r24, 0x58	; 88
    591c:	09 f4       	brne	.+2      	; 0x5920 <__vector_39+0x86>
    591e:	4a c0       	rjmp	.+148    	; 0x59b4 <__vector_39+0x11a>
    5920:	88 34       	cpi	r24, 0x48	; 72
    5922:	09 f0       	breq	.+2      	; 0x5926 <__vector_39+0x8c>
    5924:	d2 c0       	rjmp	.+420    	; 0x5aca <__vector_39+0x230>
    5926:	c9 c0       	rjmp	.+402    	; 0x5aba <__vector_39+0x220>
    5928:	88 39       	cpi	r24, 0x98	; 152
    592a:	09 f4       	brne	.+2      	; 0x592e <__vector_39+0x94>
    592c:	ba c0       	rjmp	.+372    	; 0x5aa2 <__vector_39+0x208>
    592e:	89 39       	cpi	r24, 0x99	; 153
    5930:	b0 f4       	brcc	.+44     	; 0x595e <__vector_39+0xc4>
    5932:	88 37       	cpi	r24, 0x78	; 120
    5934:	09 f4       	brne	.+2      	; 0x5938 <__vector_39+0x9e>
    5936:	68 c0       	rjmp	.+208    	; 0x5a08 <__vector_39+0x16e>
    5938:	89 37       	cpi	r24, 0x79	; 121
    593a:	38 f4       	brcc	.+14     	; 0x594a <__vector_39+0xb0>
    593c:	88 36       	cpi	r24, 0x68	; 104
    593e:	09 f4       	brne	.+2      	; 0x5942 <__vector_39+0xa8>
    5940:	63 c0       	rjmp	.+198    	; 0x5a08 <__vector_39+0x16e>
    5942:	80 37       	cpi	r24, 0x70	; 112
    5944:	09 f0       	breq	.+2      	; 0x5948 <__vector_39+0xae>
    5946:	c1 c0       	rjmp	.+386    	; 0x5aca <__vector_39+0x230>
    5948:	5f c0       	rjmp	.+190    	; 0x5a08 <__vector_39+0x16e>
    594a:	88 38       	cpi	r24, 0x88	; 136
    594c:	09 f4       	brne	.+2      	; 0x5950 <__vector_39+0xb6>
    594e:	a9 c0       	rjmp	.+338    	; 0x5aa2 <__vector_39+0x208>
    5950:	80 39       	cpi	r24, 0x90	; 144
    5952:	09 f4       	brne	.+2      	; 0x5956 <__vector_39+0xbc>
    5954:	5f c0       	rjmp	.+190    	; 0x5a14 <__vector_39+0x17a>
    5956:	80 38       	cpi	r24, 0x80	; 128
    5958:	09 f0       	breq	.+2      	; 0x595c <__vector_39+0xc2>
    595a:	b7 c0       	rjmp	.+366    	; 0x5aca <__vector_39+0x230>
    595c:	5b c0       	rjmp	.+182    	; 0x5a14 <__vector_39+0x17a>
    595e:	80 3b       	cpi	r24, 0xB0	; 176
    5960:	09 f4       	brne	.+2      	; 0x5964 <__vector_39+0xca>
    5962:	79 c0       	rjmp	.+242    	; 0x5a56 <__vector_39+0x1bc>
    5964:	81 3b       	cpi	r24, 0xB1	; 177
    5966:	38 f4       	brcc	.+14     	; 0x5976 <__vector_39+0xdc>
    5968:	80 3a       	cpi	r24, 0xA0	; 160
    596a:	09 f4       	brne	.+2      	; 0x596e <__vector_39+0xd4>
    596c:	62 c0       	rjmp	.+196    	; 0x5a32 <__vector_39+0x198>
    596e:	88 3a       	cpi	r24, 0xA8	; 168
    5970:	09 f0       	breq	.+2      	; 0x5974 <__vector_39+0xda>
    5972:	ab c0       	rjmp	.+342    	; 0x5aca <__vector_39+0x230>
    5974:	70 c0       	rjmp	.+224    	; 0x5a56 <__vector_39+0x1bc>
    5976:	80 3c       	cpi	r24, 0xC0	; 192
    5978:	09 f4       	brne	.+2      	; 0x597c <__vector_39+0xe2>
    597a:	9a c0       	rjmp	.+308    	; 0x5ab0 <__vector_39+0x216>
    597c:	88 3c       	cpi	r24, 0xC8	; 200
    597e:	09 f4       	brne	.+2      	; 0x5982 <__vector_39+0xe8>
    5980:	97 c0       	rjmp	.+302    	; 0x5ab0 <__vector_39+0x216>
    5982:	88 3b       	cpi	r24, 0xB8	; 184
    5984:	09 f0       	breq	.+2      	; 0x5988 <__vector_39+0xee>
    5986:	a1 c0       	rjmp	.+322    	; 0x5aca <__vector_39+0x230>
    5988:	77 c0       	rjmp	.+238    	; 0x5a78 <__vector_39+0x1de>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: M->START\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
    598a:	80 91 65 11 	lds	r24, 0x1165
    598e:	0f c0       	rjmp	.+30     	; 0x59ae <__vector_39+0x114>
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
    5990:	90 91 86 11 	lds	r25, 0x1186
    5994:	80 91 87 11 	lds	r24, 0x1187
    5998:	98 17       	cp	r25, r24
    599a:	08 f0       	brcs	.+2      	; 0x599e <__vector_39+0x104>
    599c:	8e c0       	rjmp	.+284    	; 0x5aba <__vector_39+0x220>
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
    599e:	e9 2f       	mov	r30, r25
    59a0:	f0 e0       	ldi	r31, 0x00	; 0
    59a2:	ea 59       	subi	r30, 0x9A	; 154
    59a4:	fe 4e       	sbci	r31, 0xEE	; 238
    59a6:	80 81       	ld	r24, Z
    59a8:	9f 5f       	subi	r25, 0xFF	; 255
    59aa:	90 93 86 11 	sts	0x1186, r25
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    59ae:	80 93 bb 00 	sts	0x00BB, r24
    59b2:	77 c0       	rjmp	.+238    	; 0x5aa2 <__vector_39+0x208>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    59b4:	80 91 a8 11 	lds	r24, 0x11A8
    59b8:	90 91 bb 00 	lds	r25, 0x00BB
    59bc:	e8 2f       	mov	r30, r24
    59be:	f0 e0       	ldi	r31, 0x00	; 0
    59c0:	e8 57       	subi	r30, 0x78	; 120
    59c2:	fe 4e       	sbci	r31, 0xEE	; 238
    59c4:	90 83       	st	Z, r25
    59c6:	8f 5f       	subi	r24, 0xFF	; 255
    59c8:	80 93 a8 11 	sts	0x11A8, r24
    59cc:	76 c0       	rjmp	.+236    	; 0x5aba <__vector_39+0x220>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->ARB_LOST\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    59ce:	80 91 bc 00 	lds	r24, 0x00BC
    59d2:	8f 70       	andi	r24, 0x0F	; 15
    59d4:	80 68       	ori	r24, 0x80	; 128
    59d6:	75 c0       	rjmp	.+234    	; 0x5ac2 <__vector_39+0x228>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    59d8:	80 91 a8 11 	lds	r24, 0x11A8
    59dc:	90 91 bb 00 	lds	r25, 0x00BB
    59e0:	e8 2f       	mov	r30, r24
    59e2:	f0 e0       	ldi	r31, 0x00	; 0
    59e4:	e8 57       	subi	r30, 0x78	; 120
    59e6:	fe 4e       	sbci	r31, 0xEE	; 238
    59e8:	90 83       	st	Z, r25
    59ea:	8f 5f       	subi	r24, 0xFF	; 255
    59ec:	80 93 a8 11 	sts	0x11A8, r24
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    59f0:	20 91 a8 11 	lds	r18, 0x11A8
    59f4:	30 e0       	ldi	r19, 0x00	; 0
    59f6:	80 91 a9 11 	lds	r24, 0x11A9
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	01 97       	sbiw	r24, 0x01	; 1
    59fe:	28 17       	cp	r18, r24
    5a00:	39 07       	cpc	r19, r25
    5a02:	0c f0       	brlt	.+2      	; 0x5a06 <__vector_39+0x16c>
    5a04:	4e c0       	rjmp	.+156    	; 0x5aa2 <__vector_39+0x208>
    5a06:	48 c0       	rjmp	.+144    	; 0x5a98 <__vector_39+0x1fe>
		rprintf("I2C: SR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		I2cState = I2C_SLAVE_RX;
    5a08:	85 e0       	ldi	r24, 0x05	; 5
    5a0a:	80 93 64 11 	sts	0x1164, r24
		// prepare buffer
		I2cReceiveDataIndex = 0;
    5a0e:	10 92 a8 11 	sts	0x11A8, r1
    5a12:	42 c0       	rjmp	.+132    	; 0x5a98 <__vector_39+0x1fe>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    5a14:	80 91 a8 11 	lds	r24, 0x11A8
    5a18:	90 91 bb 00 	lds	r25, 0x00BB
    5a1c:	e8 2f       	mov	r30, r24
    5a1e:	f0 e0       	ldi	r31, 0x00	; 0
    5a20:	e8 57       	subi	r30, 0x78	; 120
    5a22:	fe 4e       	sbci	r31, 0xEE	; 238
    5a24:	90 83       	st	Z, r25
    5a26:	8f 5f       	subi	r24, 0xFF	; 255
    5a28:	80 93 a8 11 	sts	0x11A8, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
    5a2c:	80 32       	cpi	r24, 0x20	; 32
    5a2e:	c8 f5       	brcc	.+114    	; 0x5aa2 <__vector_39+0x208>
    5a30:	33 c0       	rjmp	.+102    	; 0x5a98 <__vector_39+0x1fe>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->SR_STOP\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// switch to SR mode with SLA ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    5a32:	80 91 bc 00 	lds	r24, 0x00BC
    5a36:	8f 70       	andi	r24, 0x0F	; 15
    5a38:	80 6c       	ori	r24, 0xC0	; 192
    5a3a:	80 93 bc 00 	sts	0x00BC, r24
		// i2c receive is complete, call i2cSlaveReceive
		if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
    5a3e:	e0 91 aa 11 	lds	r30, 0x11AA
    5a42:	f0 91 ab 11 	lds	r31, 0x11AB
    5a46:	30 97       	sbiw	r30, 0x00	; 0
    5a48:	f1 f1       	breq	.+124    	; 0x5ac6 <__vector_39+0x22c>
    5a4a:	80 91 a8 11 	lds	r24, 0x11A8
    5a4e:	68 e8       	ldi	r22, 0x88	; 136
    5a50:	71 e1       	ldi	r23, 0x11	; 17
    5a52:	09 95       	icall
    5a54:	38 c0       	rjmp	.+112    	; 0x5ac6 <__vector_39+0x22c>
		rprintf("I2C: ST->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for reading (data must be transmitted back to master)
		// set state
		I2cState = I2C_SLAVE_TX;
    5a56:	84 e0       	ldi	r24, 0x04	; 4
    5a58:	80 93 64 11 	sts	0x1164, r24
		// request data from application
		if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
    5a5c:	e0 91 ac 11 	lds	r30, 0x11AC
    5a60:	f0 91 ad 11 	lds	r31, 0x11AD
    5a64:	30 97       	sbiw	r30, 0x00	; 0
    5a66:	31 f0       	breq	.+12     	; 0x5a74 <__vector_39+0x1da>
    5a68:	80 e2       	ldi	r24, 0x20	; 32
    5a6a:	66 e6       	ldi	r22, 0x66	; 102
    5a6c:	71 e1       	ldi	r23, 0x11	; 17
    5a6e:	09 95       	icall
    5a70:	80 93 87 11 	sts	0x1187, r24
		// reset data index
		I2cSendDataIndex = 0;
    5a74:	10 92 86 11 	sts	0x1186, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: ST->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit data byte
		outb(TWDR, I2cSendData[I2cSendDataIndex++]);
    5a78:	90 91 86 11 	lds	r25, 0x1186
    5a7c:	e9 2f       	mov	r30, r25
    5a7e:	f0 e0       	ldi	r31, 0x00	; 0
    5a80:	ea 59       	subi	r30, 0x9A	; 154
    5a82:	fe 4e       	sbci	r31, 0xEE	; 238
    5a84:	80 81       	ld	r24, Z
    5a86:	80 93 bb 00 	sts	0x00BB, r24
    5a8a:	9f 5f       	subi	r25, 0xFF	; 255
    5a8c:	90 93 86 11 	sts	0x1186, r25
		if(I2cSendDataIndex < I2cSendDataLength)
    5a90:	80 91 87 11 	lds	r24, 0x1187
    5a94:	98 17       	cp	r25, r24
    5a96:	28 f4       	brcc	.+10     	; 0x5aa2 <__vector_39+0x208>
			// expect ACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    5a98:	80 91 bc 00 	lds	r24, 0x00BC
    5a9c:	8f 70       	andi	r24, 0x0F	; 15
    5a9e:	80 6c       	ori	r24, 0xC0	; 192
    5aa0:	04 c0       	rjmp	.+8      	; 0x5aaa <__vector_39+0x210>
		else
			// expect NACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    5aa2:	80 91 bc 00 	lds	r24, 0x00BC
    5aa6:	8f 70       	andi	r24, 0x0F	; 15
    5aa8:	80 68       	ori	r24, 0x80	; 128
    5aaa:	80 93 bc 00 	sts	0x00BC, r24
    5aae:	0d c0       	rjmp	.+26     	; 0x5aca <__vector_39+0x230>
		rprintf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// all done
		// switch to open slave
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    5ab0:	80 91 bc 00 	lds	r24, 0x00BC
    5ab4:	8f 70       	andi	r24, 0x0F	; 15
    5ab6:	80 6c       	ori	r24, 0xC0	; 192
    5ab8:	04 c0       	rjmp	.+8      	; 0x5ac2 <__vector_39+0x228>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: BUS_ERROR\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// reset internal hardware and release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
    5aba:	80 91 bc 00 	lds	r24, 0x00BC
    5abe:	8f 70       	andi	r24, 0x0F	; 15
    5ac0:	80 6d       	ori	r24, 0xD0	; 208
    5ac2:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
    5ac6:	10 92 64 11 	sts	0x1164, r1
		break;
	}
}
    5aca:	ff 91       	pop	r31
    5acc:	ef 91       	pop	r30
    5ace:	bf 91       	pop	r27
    5ad0:	af 91       	pop	r26
    5ad2:	9f 91       	pop	r25
    5ad4:	8f 91       	pop	r24
    5ad6:	7f 91       	pop	r23
    5ad8:	6f 91       	pop	r22
    5ada:	5f 91       	pop	r21
    5adc:	4f 91       	pop	r20
    5ade:	3f 91       	pop	r19
    5ae0:	2f 91       	pop	r18
    5ae2:	0f 90       	pop	r0
    5ae4:	0f be       	out	0x3f, r0	; 63
    5ae6:	0f 90       	pop	r0
    5ae8:	1f 90       	pop	r1
    5aea:	18 95       	reti

00005aec <i2cGetState>:

eI2cStateType i2cGetState(void)
{
	return I2cState;
    5aec:	80 91 64 11 	lds	r24, 0x1164
}
    5af0:	08 95       	ret

00005af2 <setTX>:
  #else
    // emulate half-duplex on ArbotiX, ArbotiX w/ RX Bridge
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitClear(UCSR2B, RXEN2);    
    5af2:	e1 ed       	ldi	r30, 0xD1	; 209
    5af4:	f0 e0       	ldi	r31, 0x00	; 0
    5af6:	80 81       	ld	r24, Z
    5af8:	8f 7e       	andi	r24, 0xEF	; 239
    5afa:	80 83       	st	Z, r24
    bitSet(UCSR2B, TXEN2);
    5afc:	80 81       	ld	r24, Z
    5afe:	88 60       	ori	r24, 0x08	; 8
    5b00:	80 83       	st	Z, r24
    bitClear(UCSR2B, RXCIE2);
    5b02:	80 81       	ld	r24, Z
    5b04:	8f 77       	andi	r24, 0x7F	; 127
    5b06:	80 83       	st	Z, r24
    ax_tx_Pointer = 0;
    5b08:	10 92 60 12 	sts	0x1260, r1
    5b0c:	10 92 5f 12 	sts	0x125F, r1
  #endif
}
    5b10:	08 95       	ret

00005b12 <setRX>:
      while (bit_is_clear(UCSR2A, UDRE2));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR2B, TXEN2);
    5b12:	e1 ed       	ldi	r30, 0xD1	; 209
    5b14:	f0 e0       	ldi	r31, 0x00	; 0
    5b16:	80 81       	ld	r24, Z
    5b18:	87 7f       	andi	r24, 0xF7	; 247
    5b1a:	80 83       	st	Z, r24
    bitSet(UCSR2B, RXEN2);
    5b1c:	80 81       	ld	r24, Z
    5b1e:	80 61       	ori	r24, 0x10	; 16
    5b20:	80 83       	st	Z, r24
    bitSet(UCSR2B, RXCIE2);
    5b22:	80 81       	ld	r24, Z
    5b24:	80 68       	ori	r24, 0x80	; 128
    5b26:	80 83       	st	Z, r24
    ax_rx_int_Pointer = 0;
    5b28:	10 92 82 12 	sts	0x1282, r1
    5b2c:	10 92 81 12 	sts	0x1281, r1
    ax_rx_Pointer = 0;
    5b30:	10 92 5c 12 	sts	0x125C, r1
    5b34:	10 92 5b 12 	sts	0x125B, r1
  #endif  
}
    5b38:	08 95       	ret

00005b3a <setTXall>:
    setAX_WR();
  #else
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitClear(UCSR2B, RXEN2);    
    5b3a:	e1 ed       	ldi	r30, 0xD1	; 209
    5b3c:	f0 e0       	ldi	r31, 0x00	; 0
    5b3e:	80 81       	ld	r24, Z
    5b40:	8f 7e       	andi	r24, 0xEF	; 239
    5b42:	80 83       	st	Z, r24
    bitSet(UCSR2B, TXEN2);
    5b44:	80 81       	ld	r24, Z
    5b46:	88 60       	ori	r24, 0x08	; 8
    5b48:	80 83       	st	Z, r24
    bitClear(UCSR2B, RXCIE2);
    5b4a:	80 81       	ld	r24, Z
    5b4c:	8f 77       	andi	r24, 0x7F	; 127
    5b4e:	80 83       	st	Z, r24
    ax_tx_Pointer = 0;
    5b50:	10 92 60 12 	sts	0x1260, r1
    5b54:	10 92 5f 12 	sts	0x125F, r1
  #endif
}
    5b58:	08 95       	ret

00005b5a <ax12write>:

/** Sends a character out the serial port. */
void ax12write(unsigned char data){
    5b5a:	98 2f       	mov	r25, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5b5c:	80 91 d0 00 	lds	r24, 0x00D0
    5b60:	85 ff       	sbrs	r24, 5
    5b62:	fc cf       	rjmp	.-8      	; 0x5b5c <ax12write+0x2>
    UDR2 = data;
    5b64:	90 93 d6 00 	sts	0x00D6, r25
}
    5b68:	08 95       	ret

00005b6a <ax12writeB>:
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    5b6a:	28 2f       	mov	r18, r24
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5b6c:	80 91 5f 12 	lds	r24, 0x125F
    5b70:	90 91 60 12 	lds	r25, 0x1260
    5b74:	fc 01       	movw	r30, r24
    5b76:	e5 5e       	subi	r30, 0xE5	; 229
    5b78:	fd 4e       	sbci	r31, 0xED	; 237
    5b7a:	20 83       	st	Z, r18
    5b7c:	01 96       	adiw	r24, 0x01	; 1
    5b7e:	90 93 60 12 	sts	0x1260, r25
    5b82:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5b86:	80 91 d0 00 	lds	r24, 0x00D0
    5b8a:	85 ff       	sbrs	r24, 5
    5b8c:	fc cf       	rjmp	.-8      	; 0x5b86 <ax12writeB+0x1c>
    UDR2 = data;
    5b8e:	20 93 d6 00 	sts	0x00D6, r18
}
    5b92:	08 95       	ret

00005b94 <__vector_51>:
/** We have a one-way recieve buffer, which is reset after each packet is receieved.
    A wrap-around buffer does not appear to be fast enough to catch all bytes at 1Mbps. */
ISR(USART2_RX_vect){
    5b94:	1f 92       	push	r1
    5b96:	0f 92       	push	r0
    5b98:	0f b6       	in	r0, 0x3f	; 63
    5b9a:	0f 92       	push	r0
    5b9c:	11 24       	eor	r1, r1
    5b9e:	2f 93       	push	r18
    5ba0:	8f 93       	push	r24
    5ba2:	9f 93       	push	r25
    5ba4:	ef 93       	push	r30
    5ba6:	ff 93       	push	r31
    ax_rx_int_buffer[(ax_rx_int_Pointer++)] = UDR2;
    5ba8:	80 91 81 12 	lds	r24, 0x1281
    5bac:	90 91 82 12 	lds	r25, 0x1282
    5bb0:	20 91 d6 00 	lds	r18, 0x00D6
    5bb4:	fc 01       	movw	r30, r24
    5bb6:	e5 5c       	subi	r30, 0xC5	; 197
    5bb8:	fd 4e       	sbci	r31, 0xED	; 237
    5bba:	20 83       	st	Z, r18
    5bbc:	01 96       	adiw	r24, 0x01	; 1
    5bbe:	90 93 82 12 	sts	0x1282, r25
    5bc2:	80 93 81 12 	sts	0x1281, r24
}
    5bc6:	ff 91       	pop	r31
    5bc8:	ef 91       	pop	r30
    5bca:	9f 91       	pop	r25
    5bcc:	8f 91       	pop	r24
    5bce:	2f 91       	pop	r18
    5bd0:	0f 90       	pop	r0
    5bd2:	0f be       	out	0x3f, r0	; 63
    5bd4:	0f 90       	pop	r0
    5bd6:	1f 90       	pop	r1
    5bd8:	18 95       	reti

00005bda <ax12ReadPacket>:

/** read back the error code for our latest packet read */
int ax12Error;
/** > 0 = success */
int ax12ReadPacket(int length){
    5bda:	0f 93       	push	r16
    5bdc:	1f 93       	push	r17
    5bde:	df 93       	push	r29
    5be0:	cf 93       	push	r28
    5be2:	0f 92       	push	r0
    5be4:	cd b7       	in	r28, 0x3d	; 61
    5be6:	de b7       	in	r29, 0x3e	; 62
    5be8:	8c 01       	movw	r16, r24
    unsigned char offset, blength, checksum, timeout;
    unsigned char volatile bcount; 

    offset = 0;
    timeout = 0;
    bcount = 0;
    5bea:	19 82       	std	Y+1, r1	; 0x01
    5bec:	60 e0       	ldi	r22, 0x00	; 0
    5bee:	1b c0       	rjmp	.+54     	; 0x5c26 <ax12ReadPacket+0x4c>
    while(bcount < length){
    5bf0:	4f 5f       	subi	r20, 0xFF	; 255
    5bf2:	5f 4f       	sbci	r21, 0xFF	; 255
        ulCounter = 0;
        while((bcount + offset) == ax_rx_int_Pointer){
            if(ulCounter++ > 1000L){ // was 3000
    5bf4:	83 e0       	ldi	r24, 0x03	; 3
    5bf6:	4a 3e       	cpi	r20, 0xEA	; 234
    5bf8:	58 07       	cpc	r21, r24
    5bfa:	f9 f0       	breq	.+62     	; 0x5c3a <ax12ReadPacket+0x60>
    offset = 0;
    timeout = 0;
    bcount = 0;
    while(bcount < length){
        ulCounter = 0;
        while((bcount + offset) == ax_rx_int_Pointer){
    5bfc:	89 81       	ldd	r24, Y+1	; 0x01
    5bfe:	20 91 81 12 	lds	r18, 0x1281
    5c02:	30 91 82 12 	lds	r19, 0x1282
    5c06:	fd 01       	movw	r30, r26
    5c08:	e8 0f       	add	r30, r24
    5c0a:	f1 1d       	adc	r31, r1
    5c0c:	e2 17       	cp	r30, r18
    5c0e:	f3 07       	cpc	r31, r19
    5c10:	79 f3       	breq	.-34     	; 0x5bf0 <ax12ReadPacket+0x16>
    5c12:	31 c0       	rjmp	.+98     	; 0x5c76 <ax12ReadPacket+0x9c>
                break;
            }
        }
        if(timeout) break;
        ax_rx_buffer[bcount] = ax_rx_int_buffer[bcount + offset];
        if((bcount == 0) && (ax_rx_buffer[0] != 0xff))
    5c14:	80 91 61 12 	lds	r24, 0x1261
    5c18:	8f 3f       	cpi	r24, 0xFF	; 255
    5c1a:	11 f0       	breq	.+4      	; 0x5c20 <ax12ReadPacket+0x46>
            offset++;
    5c1c:	6f 5f       	subi	r22, 0xFF	; 255
    5c1e:	03 c0       	rjmp	.+6      	; 0x5c26 <ax12ReadPacket+0x4c>
        else
            bcount++;
    5c20:	89 81       	ldd	r24, Y+1	; 0x01
    5c22:	8f 5f       	subi	r24, 0xFF	; 255
    5c24:	89 83       	std	Y+1, r24	; 0x01
    unsigned char volatile bcount; 

    offset = 0;
    timeout = 0;
    bcount = 0;
    while(bcount < length){
    5c26:	89 81       	ldd	r24, Y+1	; 0x01
    5c28:	90 e0       	ldi	r25, 0x00	; 0
    5c2a:	80 17       	cp	r24, r16
    5c2c:	91 07       	cpc	r25, r17
    5c2e:	2c f4       	brge	.+10     	; 0x5c3a <ax12ReadPacket+0x60>
    5c30:	40 e0       	ldi	r20, 0x00	; 0
    5c32:	50 e0       	ldi	r21, 0x00	; 0
        ulCounter = 0;
        while((bcount + offset) == ax_rx_int_Pointer){
    5c34:	a6 2f       	mov	r26, r22
    5c36:	b0 e0       	ldi	r27, 0x00	; 0
    5c38:	e1 cf       	rjmp	.-62     	; 0x5bfc <ax12ReadPacket+0x22>
            offset++;
        else
            bcount++;
    }

    blength = bcount;
    5c3a:	89 81       	ldd	r24, Y+1	; 0x01
    5c3c:	22 e0       	ldi	r18, 0x02	; 2
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	07 c0       	rjmp	.+14     	; 0x5c50 <ax12ReadPacket+0x76>
    checksum = 0;
    for(offset=2;offset<bcount;offset++)
        checksum += ax_rx_buffer[offset];
    5c42:	e2 2f       	mov	r30, r18
    5c44:	f0 e0       	ldi	r31, 0x00	; 0
    5c46:	ef 59       	subi	r30, 0x9F	; 159
    5c48:	fd 4e       	sbci	r31, 0xED	; 237
    5c4a:	80 81       	ld	r24, Z
    5c4c:	98 0f       	add	r25, r24
            bcount++;
    }

    blength = bcount;
    checksum = 0;
    for(offset=2;offset<bcount;offset++)
    5c4e:	2f 5f       	subi	r18, 0xFF	; 255
    5c50:	89 81       	ldd	r24, Y+1	; 0x01
    5c52:	28 17       	cp	r18, r24
    5c54:	b0 f3       	brcs	.-20     	; 0x5c42 <ax12ReadPacket+0x68>
    5c56:	20 e0       	ldi	r18, 0x00	; 0
    5c58:	30 e0       	ldi	r19, 0x00	; 0
    5c5a:	89 2f       	mov	r24, r25
    5c5c:	90 e0       	ldi	r25, 0x00	; 0
    5c5e:	8f 3f       	cpi	r24, 0xFF	; 255
    5c60:	91 05       	cpc	r25, r1
    5c62:	11 f4       	brne	.+4      	; 0x5c68 <ax12ReadPacket+0x8e>
    5c64:	21 e0       	ldi	r18, 0x01	; 1
    5c66:	30 e0       	ldi	r19, 0x00	; 0
    if((checksum%256) != 255){
        return 0;
    }else{
        return 1;
    }
}
    5c68:	c9 01       	movw	r24, r18
    5c6a:	0f 90       	pop	r0
    5c6c:	cf 91       	pop	r28
    5c6e:	df 91       	pop	r29
    5c70:	1f 91       	pop	r17
    5c72:	0f 91       	pop	r16
    5c74:	08 95       	ret
                timeout = 1;
                break;
            }
        }
        if(timeout) break;
        ax_rx_buffer[bcount] = ax_rx_int_buffer[bcount + offset];
    5c76:	e9 81       	ldd	r30, Y+1	; 0x01
    5c78:	89 81       	ldd	r24, Y+1	; 0x01
    5c7a:	f0 e0       	ldi	r31, 0x00	; 0
    5c7c:	ef 59       	subi	r30, 0x9F	; 159
    5c7e:	fd 4e       	sbci	r31, 0xED	; 237
    5c80:	a5 5c       	subi	r26, 0xC5	; 197
    5c82:	bd 4e       	sbci	r27, 0xED	; 237
    5c84:	a8 0f       	add	r26, r24
    5c86:	b1 1d       	adc	r27, r1
    5c88:	8c 91       	ld	r24, X
    5c8a:	80 83       	st	Z, r24
        if((bcount == 0) && (ax_rx_buffer[0] != 0xff))
    5c8c:	89 81       	ldd	r24, Y+1	; 0x01
    5c8e:	88 23       	and	r24, r24
    5c90:	39 f6       	brne	.-114    	; 0x5c20 <ax12ReadPacket+0x46>
    5c92:	c0 cf       	rjmp	.-128    	; 0x5c14 <ax12ReadPacket+0x3a>

00005c94 <ax12Init>:
        return 1;
    }
}

/** initializes serial1 transmit at baud, 8-N-1 */
void ax12Init(long baud){
    5c94:	9b 01       	movw	r18, r22
    5c96:	ac 01       	movw	r20, r24
    //UBRR1H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    //UBRR1L = ((F_CPU / 16 + baud / 2) / baud - 1);
    UBRR2H = (F_CPU / (8 * baud) - 1 ) >> 8;
    5c98:	63 e0       	ldi	r22, 0x03	; 3
    5c9a:	22 0f       	add	r18, r18
    5c9c:	33 1f       	adc	r19, r19
    5c9e:	44 1f       	adc	r20, r20
    5ca0:	55 1f       	adc	r21, r21
    5ca2:	6a 95       	dec	r22
    5ca4:	d1 f7       	brne	.-12     	; 0x5c9a <ax12Init+0x6>
    5ca6:	60 e0       	ldi	r22, 0x00	; 0
    5ca8:	74 e2       	ldi	r23, 0x24	; 36
    5caa:	84 ef       	ldi	r24, 0xF4	; 244
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__udivmodsi4>
    5cb2:	c9 01       	movw	r24, r18
    5cb4:	da 01       	movw	r26, r20
    5cb6:	01 97       	sbiw	r24, 0x01	; 1
    5cb8:	a1 09       	sbc	r26, r1
    5cba:	b1 09       	sbc	r27, r1
    5cbc:	29 2f       	mov	r18, r25
    5cbe:	3a 2f       	mov	r19, r26
    5cc0:	4b 2f       	mov	r20, r27
    5cc2:	55 27       	eor	r21, r21
    5cc4:	01 96       	adiw	r24, 0x01	; 1
    5cc6:	a1 1d       	adc	r26, r1
    5cc8:	b1 1d       	adc	r27, r1
    5cca:	20 93 d5 00 	sts	0x00D5, r18
    UBRR2L = (F_CPU / (8 * baud) - 1 );
    5cce:	81 50       	subi	r24, 0x01	; 1
    5cd0:	80 93 d4 00 	sts	0x00D4, r24
    bitSet(UCSR2A, U2X2);
    5cd4:	e0 ed       	ldi	r30, 0xD0	; 208
    5cd6:	f0 e0       	ldi	r31, 0x00	; 0
    5cd8:	80 81       	ld	r24, Z
    5cda:	82 60       	ori	r24, 0x02	; 2
    5cdc:	80 83       	st	Z, r24
    ax_rx_int_Pointer = 0;
    5cde:	10 92 82 12 	sts	0x1282, r1
    5ce2:	10 92 81 12 	sts	0x1281, r1
    ax_rx_Pointer = 0;
    5ce6:	10 92 5c 12 	sts	0x125C, r1
    5cea:	10 92 5b 12 	sts	0x125B, r1
    ax_tx_Pointer = 0;
    5cee:	10 92 60 12 	sts	0x1260, r1
    5cf2:	10 92 5f 12 	sts	0x125F, r1
      while (bit_is_clear(UCSR2A, UDRE2));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR2B, TXEN2);
    5cf6:	e1 ed       	ldi	r30, 0xD1	; 209
    5cf8:	f0 e0       	ldi	r31, 0x00	; 0
    5cfa:	80 81       	ld	r24, Z
    5cfc:	87 7f       	andi	r24, 0xF7	; 247
    5cfe:	80 83       	st	Z, r24
    bitSet(UCSR2B, RXEN2);
    5d00:	80 81       	ld	r24, Z
    5d02:	80 61       	ori	r24, 0x10	; 16
    5d04:	80 83       	st	Z, r24
    bitSet(UCSR2B, RXCIE2);
    5d06:	80 81       	ld	r24, Z
    5d08:	80 68       	ori	r24, 0x80	; 128
    5d0a:	80 83       	st	Z, r24
    ax_rx_int_Pointer = 0;
    5d0c:	10 92 82 12 	sts	0x1282, r1
    5d10:	10 92 81 12 	sts	0x1281, r1
    ax_rx_Pointer = 0;
    5d14:	10 92 5c 12 	sts	0x125C, r1
    5d18:	10 92 5b 12 	sts	0x125B, r1
    PORTD &= 0xEF;  // Servo B low
  #endif
    // enable rx
    setRX(0);    
#endif
}
    5d1c:	08 95       	ret

00005d1e <ax12GetRegister>:
/******************************************************************************
 * Packet Level
 */

/** Read register value(s) */
int ax12GetRegister(int id, int regstart, int length){  
    5d1e:	cf 93       	push	r28
    5d20:	df 93       	push	r29
    5d22:	dc 01       	movw	r26, r24
    5d24:	ea 01       	movw	r28, r20
  #else
    // emulate half-duplex on ArbotiX, ArbotiX w/ RX Bridge
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitClear(UCSR2B, RXEN2);    
    5d26:	80 91 d1 00 	lds	r24, 0x00D1
    5d2a:	8f 7e       	andi	r24, 0xEF	; 239
    5d2c:	80 93 d1 00 	sts	0x00D1, r24
    bitSet(UCSR2B, TXEN2);
    5d30:	80 91 d1 00 	lds	r24, 0x00D1
    5d34:	88 60       	ori	r24, 0x08	; 8
    5d36:	80 93 d1 00 	sts	0x00D1, r24
    bitClear(UCSR2B, RXCIE2);
    5d3a:	80 91 d1 00 	lds	r24, 0x00D1
    5d3e:	8f 77       	andi	r24, 0x7F	; 127
    5d40:	80 93 d1 00 	sts	0x00D1, r24
    ax_tx_Pointer = 0;
    5d44:	10 92 60 12 	sts	0x1260, r1
    5d48:	10 92 5f 12 	sts	0x125F, r1
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5d4c:	80 91 5f 12 	lds	r24, 0x125F
    5d50:	90 91 60 12 	lds	r25, 0x1260
    5d54:	fc 01       	movw	r30, r24
    5d56:	e5 5e       	subi	r30, 0xE5	; 229
    5d58:	fd 4e       	sbci	r31, 0xED	; 237
    5d5a:	2f ef       	ldi	r18, 0xFF	; 255
    5d5c:	20 83       	st	Z, r18
    5d5e:	01 96       	adiw	r24, 0x01	; 1
    5d60:	90 93 60 12 	sts	0x1260, r25
    5d64:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5d68:	80 91 d0 00 	lds	r24, 0x00D0
    5d6c:	85 ff       	sbrs	r24, 5
    5d6e:	fc cf       	rjmp	.-8      	; 0x5d68 <ax12GetRegister+0x4a>
    UDR2 = data;
    5d70:	8f ef       	ldi	r24, 0xFF	; 255
    5d72:	80 93 d6 00 	sts	0x00D6, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5d76:	20 91 5f 12 	lds	r18, 0x125F
    5d7a:	30 91 60 12 	lds	r19, 0x1260
    5d7e:	f9 01       	movw	r30, r18
    5d80:	e5 5e       	subi	r30, 0xE5	; 229
    5d82:	fd 4e       	sbci	r31, 0xED	; 237
    5d84:	80 83       	st	Z, r24
    5d86:	2f 5f       	subi	r18, 0xFF	; 255
    5d88:	3f 4f       	sbci	r19, 0xFF	; 255
    5d8a:	30 93 60 12 	sts	0x1260, r19
    5d8e:	20 93 5f 12 	sts	0x125F, r18
    while (bit_is_clear(UCSR2A, UDRE2));
    5d92:	80 91 d0 00 	lds	r24, 0x00D0
    5d96:	85 ff       	sbrs	r24, 5
    5d98:	fc cf       	rjmp	.-8      	; 0x5d92 <ax12GetRegister+0x74>
    UDR2 = data;
    5d9a:	8f ef       	ldi	r24, 0xFF	; 255
    5d9c:	80 93 d6 00 	sts	0x00D6, r24
    setTX(id);
    // 0xFF 0xFF ID LENGTH INSTRUCTION PARAM... CHECKSUM    
    int checksum = ~((id + 6 + regstart + length)%256);
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
    5da0:	2a 2f       	mov	r18, r26
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5da2:	80 91 5f 12 	lds	r24, 0x125F
    5da6:	90 91 60 12 	lds	r25, 0x1260
    5daa:	fc 01       	movw	r30, r24
    5dac:	e5 5e       	subi	r30, 0xE5	; 229
    5dae:	fd 4e       	sbci	r31, 0xED	; 237
    5db0:	a0 83       	st	Z, r26
    5db2:	01 96       	adiw	r24, 0x01	; 1
    5db4:	90 93 60 12 	sts	0x1260, r25
    5db8:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5dbc:	80 91 d0 00 	lds	r24, 0x00D0
    5dc0:	85 ff       	sbrs	r24, 5
    5dc2:	fc cf       	rjmp	.-8      	; 0x5dbc <ax12GetRegister+0x9e>
    UDR2 = data;
    5dc4:	20 93 d6 00 	sts	0x00D6, r18
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5dc8:	80 91 5f 12 	lds	r24, 0x125F
    5dcc:	90 91 60 12 	lds	r25, 0x1260
    5dd0:	fc 01       	movw	r30, r24
    5dd2:	e5 5e       	subi	r30, 0xE5	; 229
    5dd4:	fd 4e       	sbci	r31, 0xED	; 237
    5dd6:	24 e0       	ldi	r18, 0x04	; 4
    5dd8:	20 83       	st	Z, r18
    5dda:	01 96       	adiw	r24, 0x01	; 1
    5ddc:	90 93 60 12 	sts	0x1260, r25
    5de0:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5de4:	80 91 d0 00 	lds	r24, 0x00D0
    5de8:	85 ff       	sbrs	r24, 5
    5dea:	fc cf       	rjmp	.-8      	; 0x5de4 <ax12GetRegister+0xc6>
    UDR2 = data;
    5dec:	84 e0       	ldi	r24, 0x04	; 4
    5dee:	80 93 d6 00 	sts	0x00D6, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5df2:	80 91 5f 12 	lds	r24, 0x125F
    5df6:	90 91 60 12 	lds	r25, 0x1260
    5dfa:	fc 01       	movw	r30, r24
    5dfc:	e5 5e       	subi	r30, 0xE5	; 229
    5dfe:	fd 4e       	sbci	r31, 0xED	; 237
    5e00:	22 e0       	ldi	r18, 0x02	; 2
    5e02:	20 83       	st	Z, r18
    5e04:	01 96       	adiw	r24, 0x01	; 1
    5e06:	90 93 60 12 	sts	0x1260, r25
    5e0a:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5e0e:	80 91 d0 00 	lds	r24, 0x00D0
    5e12:	85 ff       	sbrs	r24, 5
    5e14:	fc cf       	rjmp	.-8      	; 0x5e0e <ax12GetRegister+0xf0>
    UDR2 = data;
    5e16:	82 e0       	ldi	r24, 0x02	; 2
    5e18:	80 93 d6 00 	sts	0x00D6, r24
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(4);    // length
    ax12writeB(AX_READ_DATA);
    ax12writeB(regstart);
    5e1c:	26 2f       	mov	r18, r22
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5e1e:	80 91 5f 12 	lds	r24, 0x125F
    5e22:	90 91 60 12 	lds	r25, 0x1260
    5e26:	fc 01       	movw	r30, r24
    5e28:	e5 5e       	subi	r30, 0xE5	; 229
    5e2a:	fd 4e       	sbci	r31, 0xED	; 237
    5e2c:	60 83       	st	Z, r22
    5e2e:	01 96       	adiw	r24, 0x01	; 1
    5e30:	90 93 60 12 	sts	0x1260, r25
    5e34:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5e38:	80 91 d0 00 	lds	r24, 0x00D0
    5e3c:	85 ff       	sbrs	r24, 5
    5e3e:	fc cf       	rjmp	.-8      	; 0x5e38 <ax12GetRegister+0x11a>
    UDR2 = data;
    5e40:	20 93 d6 00 	sts	0x00D6, r18
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(4);    // length
    ax12writeB(AX_READ_DATA);
    ax12writeB(regstart);
    ax12writeB(length);
    5e44:	2c 2f       	mov	r18, r28
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5e46:	80 91 5f 12 	lds	r24, 0x125F
    5e4a:	90 91 60 12 	lds	r25, 0x1260
    5e4e:	fc 01       	movw	r30, r24
    5e50:	e5 5e       	subi	r30, 0xE5	; 229
    5e52:	fd 4e       	sbci	r31, 0xED	; 237
    5e54:	c0 83       	st	Z, r28
    5e56:	01 96       	adiw	r24, 0x01	; 1
    5e58:	90 93 60 12 	sts	0x1260, r25
    5e5c:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5e60:	80 91 d0 00 	lds	r24, 0x00D0
    5e64:	85 ff       	sbrs	r24, 5
    5e66:	fc cf       	rjmp	.-8      	; 0x5e60 <ax12GetRegister+0x142>
    UDR2 = data;
    5e68:	20 93 d6 00 	sts	0x00D6, r18
    ax12writeB(id);
    ax12writeB(4);    // length
    ax12writeB(AX_READ_DATA);
    ax12writeB(regstart);
    ax12writeB(length);
    ax12writeB(checksum);  
    5e6c:	16 96       	adiw	r26, 0x06	; 6
    5e6e:	a6 0f       	add	r26, r22
    5e70:	b7 1f       	adc	r27, r23
    5e72:	cd 01       	movw	r24, r26
    5e74:	8c 0f       	add	r24, r28
    5e76:	9d 1f       	adc	r25, r29
    5e78:	60 e0       	ldi	r22, 0x00	; 0
    5e7a:	71 e0       	ldi	r23, 0x01	; 1
    5e7c:	0e 94 cc 36 	call	0x6d98	; 0x6d98 <__divmodhi4>
    5e80:	80 95       	com	r24
    5e82:	90 95       	com	r25
    5e84:	98 2f       	mov	r25, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5e86:	20 91 5f 12 	lds	r18, 0x125F
    5e8a:	30 91 60 12 	lds	r19, 0x1260
    5e8e:	f9 01       	movw	r30, r18
    5e90:	e5 5e       	subi	r30, 0xE5	; 229
    5e92:	fd 4e       	sbci	r31, 0xED	; 237
    5e94:	80 83       	st	Z, r24
    5e96:	2f 5f       	subi	r18, 0xFF	; 255
    5e98:	3f 4f       	sbci	r19, 0xFF	; 255
    5e9a:	30 93 60 12 	sts	0x1260, r19
    5e9e:	20 93 5f 12 	sts	0x125F, r18
    while (bit_is_clear(UCSR2A, UDRE2));
    5ea2:	80 91 d0 00 	lds	r24, 0x00D0
    5ea6:	85 ff       	sbrs	r24, 5
    5ea8:	fc cf       	rjmp	.-8      	; 0x5ea2 <ax12GetRegister+0x184>
    UDR2 = data;
    5eaa:	90 93 d6 00 	sts	0x00D6, r25
      while (bit_is_clear(UCSR2A, UDRE2));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR2B, TXEN2);
    5eae:	80 91 d1 00 	lds	r24, 0x00D1
    5eb2:	87 7f       	andi	r24, 0xF7	; 247
    5eb4:	80 93 d1 00 	sts	0x00D1, r24
    bitSet(UCSR2B, RXEN2);
    5eb8:	80 91 d1 00 	lds	r24, 0x00D1
    5ebc:	80 61       	ori	r24, 0x10	; 16
    5ebe:	80 93 d1 00 	sts	0x00D1, r24
    bitSet(UCSR2B, RXCIE2);
    5ec2:	80 91 d1 00 	lds	r24, 0x00D1
    5ec6:	80 68       	ori	r24, 0x80	; 128
    5ec8:	80 93 d1 00 	sts	0x00D1, r24
    ax_rx_int_Pointer = 0;
    5ecc:	10 92 82 12 	sts	0x1282, r1
    5ed0:	10 92 81 12 	sts	0x1281, r1
    ax_rx_Pointer = 0;
    5ed4:	10 92 5c 12 	sts	0x125C, r1
    5ed8:	10 92 5b 12 	sts	0x125B, r1
    ax12writeB(AX_READ_DATA);
    ax12writeB(regstart);
    ax12writeB(length);
    ax12writeB(checksum);  
    setRX(id);    
    if(ax12ReadPacket(length + 6) > 0){
    5edc:	ce 01       	movw	r24, r28
    5ede:	06 96       	adiw	r24, 0x06	; 6
    5ee0:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <ax12ReadPacket>
    5ee4:	18 16       	cp	r1, r24
    5ee6:	19 06       	cpc	r1, r25
    5ee8:	1c f0       	brlt	.+6      	; 0x5ef0 <ax12GetRegister+0x1d2>
    5eea:	2f ef       	ldi	r18, 0xFF	; 255
    5eec:	3f ef       	ldi	r19, 0xFF	; 255
    5eee:	16 c0       	rjmp	.+44     	; 0x5f1c <ax12GetRegister+0x1fe>
        ax12Error = ax_rx_buffer[4];
    5ef0:	80 91 65 12 	lds	r24, 0x1265
    5ef4:	80 93 5d 12 	sts	0x125D, r24
    5ef8:	10 92 5e 12 	sts	0x125E, r1
        if(length == 1)
    5efc:	21 97       	sbiw	r28, 0x01	; 1
    5efe:	29 f4       	brne	.+10     	; 0x5f0a <ax12GetRegister+0x1ec>
            return ax_rx_buffer[5];
    5f00:	80 91 66 12 	lds	r24, 0x1266
    5f04:	28 2f       	mov	r18, r24
    5f06:	30 e0       	ldi	r19, 0x00	; 0
    5f08:	09 c0       	rjmp	.+18     	; 0x5f1c <ax12GetRegister+0x1fe>
        else
            return ax_rx_buffer[5] + (ax_rx_buffer[6]<<8);
    5f0a:	90 91 67 12 	lds	r25, 0x1267
    5f0e:	80 e0       	ldi	r24, 0x00	; 0
    5f10:	20 91 66 12 	lds	r18, 0x1266
    5f14:	ac 01       	movw	r20, r24
    5f16:	42 0f       	add	r20, r18
    5f18:	51 1d       	adc	r21, r1
    5f1a:	9a 01       	movw	r18, r20
    }else{
        return -1;
    }
}
    5f1c:	c9 01       	movw	r24, r18
    5f1e:	df 91       	pop	r29
    5f20:	cf 91       	pop	r28
    5f22:	08 95       	ret

00005f24 <ax12SetRegister>:

/* Set the value of a single-byte register. */
void ax12SetRegister(int id, int regstart, int data){
    5f24:	dc 01       	movw	r26, r24
  #else
    // emulate half-duplex on ArbotiX, ArbotiX w/ RX Bridge
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitClear(UCSR2B, RXEN2);    
    5f26:	80 91 d1 00 	lds	r24, 0x00D1
    5f2a:	8f 7e       	andi	r24, 0xEF	; 239
    5f2c:	80 93 d1 00 	sts	0x00D1, r24
    bitSet(UCSR2B, TXEN2);
    5f30:	80 91 d1 00 	lds	r24, 0x00D1
    5f34:	88 60       	ori	r24, 0x08	; 8
    5f36:	80 93 d1 00 	sts	0x00D1, r24
    bitClear(UCSR2B, RXCIE2);
    5f3a:	80 91 d1 00 	lds	r24, 0x00D1
    5f3e:	8f 77       	andi	r24, 0x7F	; 127
    5f40:	80 93 d1 00 	sts	0x00D1, r24
    ax_tx_Pointer = 0;
    5f44:	10 92 60 12 	sts	0x1260, r1
    5f48:	10 92 5f 12 	sts	0x125F, r1
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5f4c:	80 91 5f 12 	lds	r24, 0x125F
    5f50:	90 91 60 12 	lds	r25, 0x1260
    5f54:	fc 01       	movw	r30, r24
    5f56:	e5 5e       	subi	r30, 0xE5	; 229
    5f58:	fd 4e       	sbci	r31, 0xED	; 237
    5f5a:	2f ef       	ldi	r18, 0xFF	; 255
    5f5c:	20 83       	st	Z, r18
    5f5e:	01 96       	adiw	r24, 0x01	; 1
    5f60:	90 93 60 12 	sts	0x1260, r25
    5f64:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5f68:	80 91 d0 00 	lds	r24, 0x00D0
    5f6c:	85 ff       	sbrs	r24, 5
    5f6e:	fc cf       	rjmp	.-8      	; 0x5f68 <ax12SetRegister+0x44>
    UDR2 = data;
    5f70:	8f ef       	ldi	r24, 0xFF	; 255
    5f72:	80 93 d6 00 	sts	0x00D6, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5f76:	20 91 5f 12 	lds	r18, 0x125F
    5f7a:	30 91 60 12 	lds	r19, 0x1260
    5f7e:	f9 01       	movw	r30, r18
    5f80:	e5 5e       	subi	r30, 0xE5	; 229
    5f82:	fd 4e       	sbci	r31, 0xED	; 237
    5f84:	80 83       	st	Z, r24
    5f86:	2f 5f       	subi	r18, 0xFF	; 255
    5f88:	3f 4f       	sbci	r19, 0xFF	; 255
    5f8a:	30 93 60 12 	sts	0x1260, r19
    5f8e:	20 93 5f 12 	sts	0x125F, r18
    while (bit_is_clear(UCSR2A, UDRE2));
    5f92:	80 91 d0 00 	lds	r24, 0x00D0
    5f96:	85 ff       	sbrs	r24, 5
    5f98:	fc cf       	rjmp	.-8      	; 0x5f92 <ax12SetRegister+0x6e>
    UDR2 = data;
    5f9a:	8f ef       	ldi	r24, 0xFF	; 255
    5f9c:	80 93 d6 00 	sts	0x00D6, r24
void ax12SetRegister(int id, int regstart, int data){
    setTX(id);    
    int checksum = ~((id + 4 + AX_WRITE_DATA + regstart + (data&0xff)) % 256);
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
    5fa0:	2a 2f       	mov	r18, r26
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5fa2:	80 91 5f 12 	lds	r24, 0x125F
    5fa6:	90 91 60 12 	lds	r25, 0x1260
    5faa:	fc 01       	movw	r30, r24
    5fac:	e5 5e       	subi	r30, 0xE5	; 229
    5fae:	fd 4e       	sbci	r31, 0xED	; 237
    5fb0:	a0 83       	st	Z, r26
    5fb2:	01 96       	adiw	r24, 0x01	; 1
    5fb4:	90 93 60 12 	sts	0x1260, r25
    5fb8:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5fbc:	80 91 d0 00 	lds	r24, 0x00D0
    5fc0:	85 ff       	sbrs	r24, 5
    5fc2:	fc cf       	rjmp	.-8      	; 0x5fbc <ax12SetRegister+0x98>
    UDR2 = data;
    5fc4:	20 93 d6 00 	sts	0x00D6, r18
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5fc8:	80 91 5f 12 	lds	r24, 0x125F
    5fcc:	90 91 60 12 	lds	r25, 0x1260
    5fd0:	fc 01       	movw	r30, r24
    5fd2:	e5 5e       	subi	r30, 0xE5	; 229
    5fd4:	fd 4e       	sbci	r31, 0xED	; 237
    5fd6:	24 e0       	ldi	r18, 0x04	; 4
    5fd8:	20 83       	st	Z, r18
    5fda:	01 96       	adiw	r24, 0x01	; 1
    5fdc:	90 93 60 12 	sts	0x1260, r25
    5fe0:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    5fe4:	80 91 d0 00 	lds	r24, 0x00D0
    5fe8:	85 ff       	sbrs	r24, 5
    5fea:	fc cf       	rjmp	.-8      	; 0x5fe4 <ax12SetRegister+0xc0>
    UDR2 = data;
    5fec:	84 e0       	ldi	r24, 0x04	; 4
    5fee:	80 93 d6 00 	sts	0x00D6, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    5ff2:	80 91 5f 12 	lds	r24, 0x125F
    5ff6:	90 91 60 12 	lds	r25, 0x1260
    5ffa:	fc 01       	movw	r30, r24
    5ffc:	e5 5e       	subi	r30, 0xE5	; 229
    5ffe:	fd 4e       	sbci	r31, 0xED	; 237
    6000:	23 e0       	ldi	r18, 0x03	; 3
    6002:	20 83       	st	Z, r18
    6004:	01 96       	adiw	r24, 0x01	; 1
    6006:	90 93 60 12 	sts	0x1260, r25
    600a:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    600e:	80 91 d0 00 	lds	r24, 0x00D0
    6012:	85 ff       	sbrs	r24, 5
    6014:	fc cf       	rjmp	.-8      	; 0x600e <ax12SetRegister+0xea>
    UDR2 = data;
    6016:	83 e0       	ldi	r24, 0x03	; 3
    6018:	80 93 d6 00 	sts	0x00D6, r24
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(4);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    601c:	26 2f       	mov	r18, r22
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    601e:	80 91 5f 12 	lds	r24, 0x125F
    6022:	90 91 60 12 	lds	r25, 0x1260
    6026:	fc 01       	movw	r30, r24
    6028:	e5 5e       	subi	r30, 0xE5	; 229
    602a:	fd 4e       	sbci	r31, 0xED	; 237
    602c:	60 83       	st	Z, r22
    602e:	01 96       	adiw	r24, 0x01	; 1
    6030:	90 93 60 12 	sts	0x1260, r25
    6034:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    6038:	80 91 d0 00 	lds	r24, 0x00D0
    603c:	85 ff       	sbrs	r24, 5
    603e:	fc cf       	rjmp	.-8      	; 0x6038 <ax12SetRegister+0x114>
    UDR2 = data;
    6040:	20 93 d6 00 	sts	0x00D6, r18
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(4);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    ax12writeB(data&0xff);
    6044:	24 2f       	mov	r18, r20
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    6046:	80 91 5f 12 	lds	r24, 0x125F
    604a:	90 91 60 12 	lds	r25, 0x1260
    604e:	fc 01       	movw	r30, r24
    6050:	e5 5e       	subi	r30, 0xE5	; 229
    6052:	fd 4e       	sbci	r31, 0xED	; 237
    6054:	40 83       	st	Z, r20
    6056:	01 96       	adiw	r24, 0x01	; 1
    6058:	90 93 60 12 	sts	0x1260, r25
    605c:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    6060:	80 91 d0 00 	lds	r24, 0x00D0
    6064:	85 ff       	sbrs	r24, 5
    6066:	fc cf       	rjmp	.-8      	; 0x6060 <ax12SetRegister+0x13c>
    UDR2 = data;
    6068:	20 93 d6 00 	sts	0x00D6, r18
    ax12writeB(4);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    ax12writeB(data&0xff);
    // checksum = 
    ax12writeB(checksum);
    606c:	17 96       	adiw	r26, 0x07	; 7
    606e:	a6 0f       	add	r26, r22
    6070:	b7 1f       	adc	r27, r23
    6072:	cd 01       	movw	r24, r26
    6074:	84 0f       	add	r24, r20
    6076:	91 1d       	adc	r25, r1
    6078:	60 e0       	ldi	r22, 0x00	; 0
    607a:	71 e0       	ldi	r23, 0x01	; 1
    607c:	0e 94 cc 36 	call	0x6d98	; 0x6d98 <__divmodhi4>
    6080:	80 95       	com	r24
    6082:	90 95       	com	r25
    6084:	98 2f       	mov	r25, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    6086:	20 91 5f 12 	lds	r18, 0x125F
    608a:	30 91 60 12 	lds	r19, 0x1260
    608e:	f9 01       	movw	r30, r18
    6090:	e5 5e       	subi	r30, 0xE5	; 229
    6092:	fd 4e       	sbci	r31, 0xED	; 237
    6094:	80 83       	st	Z, r24
    6096:	2f 5f       	subi	r18, 0xFF	; 255
    6098:	3f 4f       	sbci	r19, 0xFF	; 255
    609a:	30 93 60 12 	sts	0x1260, r19
    609e:	20 93 5f 12 	sts	0x125F, r18
    while (bit_is_clear(UCSR2A, UDRE2));
    60a2:	80 91 d0 00 	lds	r24, 0x00D0
    60a6:	85 ff       	sbrs	r24, 5
    60a8:	fc cf       	rjmp	.-8      	; 0x60a2 <ax12SetRegister+0x17e>
    UDR2 = data;
    60aa:	90 93 d6 00 	sts	0x00D6, r25
      while (bit_is_clear(UCSR2A, UDRE2));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR2B, TXEN2);
    60ae:	80 91 d1 00 	lds	r24, 0x00D1
    60b2:	87 7f       	andi	r24, 0xF7	; 247
    60b4:	80 93 d1 00 	sts	0x00D1, r24
    bitSet(UCSR2B, RXEN2);
    60b8:	80 91 d1 00 	lds	r24, 0x00D1
    60bc:	80 61       	ori	r24, 0x10	; 16
    60be:	80 93 d1 00 	sts	0x00D1, r24
    bitSet(UCSR2B, RXCIE2);
    60c2:	80 91 d1 00 	lds	r24, 0x00D1
    60c6:	80 68       	ori	r24, 0x80	; 128
    60c8:	80 93 d1 00 	sts	0x00D1, r24
    ax_rx_int_Pointer = 0;
    60cc:	10 92 82 12 	sts	0x1282, r1
    60d0:	10 92 81 12 	sts	0x1281, r1
    ax_rx_Pointer = 0;
    60d4:	10 92 5c 12 	sts	0x125C, r1
    60d8:	10 92 5b 12 	sts	0x125B, r1
    ax12writeB(data&0xff);
    // checksum = 
    ax12writeB(checksum);
    setRX(id);
    //ax12ReadPacket();
}
    60dc:	08 95       	ret

000060de <ax12SetRegister2>:
/* Set the value of a double-byte register. */
void ax12SetRegister2(int id, int regstart, int data){
    60de:	cf 93       	push	r28
    60e0:	df 93       	push	r29
    60e2:	ec 01       	movw	r28, r24
  #else
    // emulate half-duplex on ArbotiX, ArbotiX w/ RX Bridge
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitClear(UCSR2B, RXEN2);    
    60e4:	80 91 d1 00 	lds	r24, 0x00D1
    60e8:	8f 7e       	andi	r24, 0xEF	; 239
    60ea:	80 93 d1 00 	sts	0x00D1, r24
    bitSet(UCSR2B, TXEN2);
    60ee:	80 91 d1 00 	lds	r24, 0x00D1
    60f2:	88 60       	ori	r24, 0x08	; 8
    60f4:	80 93 d1 00 	sts	0x00D1, r24
    bitClear(UCSR2B, RXCIE2);
    60f8:	80 91 d1 00 	lds	r24, 0x00D1
    60fc:	8f 77       	andi	r24, 0x7F	; 127
    60fe:	80 93 d1 00 	sts	0x00D1, r24
    ax_tx_Pointer = 0;
    6102:	10 92 60 12 	sts	0x1260, r1
    6106:	10 92 5f 12 	sts	0x125F, r1
    //ax12ReadPacket();
}
/* Set the value of a double-byte register. */
void ax12SetRegister2(int id, int regstart, int data){
    setTX(id);    
    int checksum = ~((id + 5 + AX_WRITE_DATA + regstart + (data&0xFF) + ((data&0xFF00)>>8)) % 256);
    610a:	a5 2f       	mov	r26, r21
    610c:	b0 e0       	ldi	r27, 0x00	; 0
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    610e:	80 91 5f 12 	lds	r24, 0x125F
    6112:	90 91 60 12 	lds	r25, 0x1260
    6116:	fc 01       	movw	r30, r24
    6118:	e5 5e       	subi	r30, 0xE5	; 229
    611a:	fd 4e       	sbci	r31, 0xED	; 237
    611c:	2f ef       	ldi	r18, 0xFF	; 255
    611e:	20 83       	st	Z, r18
    6120:	01 96       	adiw	r24, 0x01	; 1
    6122:	90 93 60 12 	sts	0x1260, r25
    6126:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    612a:	80 91 d0 00 	lds	r24, 0x00D0
    612e:	85 ff       	sbrs	r24, 5
    6130:	fc cf       	rjmp	.-8      	; 0x612a <ax12SetRegister2+0x4c>
    UDR2 = data;
    6132:	8f ef       	ldi	r24, 0xFF	; 255
    6134:	80 93 d6 00 	sts	0x00D6, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    6138:	20 91 5f 12 	lds	r18, 0x125F
    613c:	30 91 60 12 	lds	r19, 0x1260
    6140:	f9 01       	movw	r30, r18
    6142:	e5 5e       	subi	r30, 0xE5	; 229
    6144:	fd 4e       	sbci	r31, 0xED	; 237
    6146:	80 83       	st	Z, r24
    6148:	2f 5f       	subi	r18, 0xFF	; 255
    614a:	3f 4f       	sbci	r19, 0xFF	; 255
    614c:	30 93 60 12 	sts	0x1260, r19
    6150:	20 93 5f 12 	sts	0x125F, r18
    while (bit_is_clear(UCSR2A, UDRE2));
    6154:	80 91 d0 00 	lds	r24, 0x00D0
    6158:	85 ff       	sbrs	r24, 5
    615a:	fc cf       	rjmp	.-8      	; 0x6154 <ax12SetRegister2+0x76>
    UDR2 = data;
    615c:	8f ef       	ldi	r24, 0xFF	; 255
    615e:	80 93 d6 00 	sts	0x00D6, r24
void ax12SetRegister2(int id, int regstart, int data){
    setTX(id);    
    int checksum = ~((id + 5 + AX_WRITE_DATA + regstart + (data&0xFF) + ((data&0xFF00)>>8)) % 256);
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
    6162:	2c 2f       	mov	r18, r28
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    6164:	80 91 5f 12 	lds	r24, 0x125F
    6168:	90 91 60 12 	lds	r25, 0x1260
    616c:	fc 01       	movw	r30, r24
    616e:	e5 5e       	subi	r30, 0xE5	; 229
    6170:	fd 4e       	sbci	r31, 0xED	; 237
    6172:	c0 83       	st	Z, r28
    6174:	01 96       	adiw	r24, 0x01	; 1
    6176:	90 93 60 12 	sts	0x1260, r25
    617a:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    617e:	80 91 d0 00 	lds	r24, 0x00D0
    6182:	85 ff       	sbrs	r24, 5
    6184:	fc cf       	rjmp	.-8      	; 0x617e <ax12SetRegister2+0xa0>
    UDR2 = data;
    6186:	20 93 d6 00 	sts	0x00D6, r18
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    618a:	80 91 5f 12 	lds	r24, 0x125F
    618e:	90 91 60 12 	lds	r25, 0x1260
    6192:	fc 01       	movw	r30, r24
    6194:	e5 5e       	subi	r30, 0xE5	; 229
    6196:	fd 4e       	sbci	r31, 0xED	; 237
    6198:	25 e0       	ldi	r18, 0x05	; 5
    619a:	20 83       	st	Z, r18
    619c:	01 96       	adiw	r24, 0x01	; 1
    619e:	90 93 60 12 	sts	0x1260, r25
    61a2:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    61a6:	80 91 d0 00 	lds	r24, 0x00D0
    61aa:	85 ff       	sbrs	r24, 5
    61ac:	fc cf       	rjmp	.-8      	; 0x61a6 <ax12SetRegister2+0xc8>
    UDR2 = data;
    61ae:	85 e0       	ldi	r24, 0x05	; 5
    61b0:	80 93 d6 00 	sts	0x00D6, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    61b4:	80 91 5f 12 	lds	r24, 0x125F
    61b8:	90 91 60 12 	lds	r25, 0x1260
    61bc:	fc 01       	movw	r30, r24
    61be:	e5 5e       	subi	r30, 0xE5	; 229
    61c0:	fd 4e       	sbci	r31, 0xED	; 237
    61c2:	23 e0       	ldi	r18, 0x03	; 3
    61c4:	20 83       	st	Z, r18
    61c6:	01 96       	adiw	r24, 0x01	; 1
    61c8:	90 93 60 12 	sts	0x1260, r25
    61cc:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    61d0:	80 91 d0 00 	lds	r24, 0x00D0
    61d4:	85 ff       	sbrs	r24, 5
    61d6:	fc cf       	rjmp	.-8      	; 0x61d0 <ax12SetRegister2+0xf2>
    UDR2 = data;
    61d8:	83 e0       	ldi	r24, 0x03	; 3
    61da:	80 93 d6 00 	sts	0x00D6, r24
    ax12writeB(0xFF);
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(5);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    61de:	26 2f       	mov	r18, r22
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    61e0:	80 91 5f 12 	lds	r24, 0x125F
    61e4:	90 91 60 12 	lds	r25, 0x1260
    61e8:	fc 01       	movw	r30, r24
    61ea:	e5 5e       	subi	r30, 0xE5	; 229
    61ec:	fd 4e       	sbci	r31, 0xED	; 237
    61ee:	60 83       	st	Z, r22
    61f0:	01 96       	adiw	r24, 0x01	; 1
    61f2:	90 93 60 12 	sts	0x1260, r25
    61f6:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    61fa:	80 91 d0 00 	lds	r24, 0x00D0
    61fe:	85 ff       	sbrs	r24, 5
    6200:	fc cf       	rjmp	.-8      	; 0x61fa <ax12SetRegister2+0x11c>
    UDR2 = data;
    6202:	20 93 d6 00 	sts	0x00D6, r18
    ax12writeB(0xFF);
    ax12writeB(id);
    ax12writeB(5);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    ax12writeB(data&0xff);
    6206:	24 2f       	mov	r18, r20
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    6208:	80 91 5f 12 	lds	r24, 0x125F
    620c:	90 91 60 12 	lds	r25, 0x1260
    6210:	fc 01       	movw	r30, r24
    6212:	e5 5e       	subi	r30, 0xE5	; 229
    6214:	fd 4e       	sbci	r31, 0xED	; 237
    6216:	40 83       	st	Z, r20
    6218:	01 96       	adiw	r24, 0x01	; 1
    621a:	90 93 60 12 	sts	0x1260, r25
    621e:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    6222:	80 91 d0 00 	lds	r24, 0x00D0
    6226:	85 ff       	sbrs	r24, 5
    6228:	fc cf       	rjmp	.-8      	; 0x6222 <ax12SetRegister2+0x144>
    UDR2 = data;
    622a:	20 93 d6 00 	sts	0x00D6, r18
    ax12writeB(id);
    ax12writeB(5);    // length
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    ax12writeB(data&0xff);
    ax12writeB((data&0xff00)>>8);
    622e:	2a 2f       	mov	r18, r26
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    6230:	80 91 5f 12 	lds	r24, 0x125F
    6234:	90 91 60 12 	lds	r25, 0x1260
    6238:	fc 01       	movw	r30, r24
    623a:	e5 5e       	subi	r30, 0xE5	; 229
    623c:	fd 4e       	sbci	r31, 0xED	; 237
    623e:	a0 83       	st	Z, r26
    6240:	01 96       	adiw	r24, 0x01	; 1
    6242:	90 93 60 12 	sts	0x1260, r25
    6246:	80 93 5f 12 	sts	0x125F, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    624a:	80 91 d0 00 	lds	r24, 0x00D0
    624e:	85 ff       	sbrs	r24, 5
    6250:	fc cf       	rjmp	.-8      	; 0x624a <ax12SetRegister2+0x16c>
    UDR2 = data;
    6252:	20 93 d6 00 	sts	0x00D6, r18
    ax12writeB(AX_WRITE_DATA);
    ax12writeB(regstart);
    ax12writeB(data&0xff);
    ax12writeB((data&0xff00)>>8);
    // checksum = 
    ax12writeB(checksum);
    6256:	ce 01       	movw	r24, r28
    6258:	08 96       	adiw	r24, 0x08	; 8
    625a:	86 0f       	add	r24, r22
    625c:	97 1f       	adc	r25, r23
    625e:	84 0f       	add	r24, r20
    6260:	91 1d       	adc	r25, r1
    6262:	8a 0f       	add	r24, r26
    6264:	9b 1f       	adc	r25, r27
    6266:	90 70       	andi	r25, 0x00	; 0
    6268:	80 95       	com	r24
    626a:	90 95       	com	r25
    626c:	98 2f       	mov	r25, r24
    while (bit_is_clear(UCSR2A, UDRE2));
    UDR2 = data;
}
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
    626e:	20 91 5f 12 	lds	r18, 0x125F
    6272:	30 91 60 12 	lds	r19, 0x1260
    6276:	f9 01       	movw	r30, r18
    6278:	e5 5e       	subi	r30, 0xE5	; 229
    627a:	fd 4e       	sbci	r31, 0xED	; 237
    627c:	80 83       	st	Z, r24
    627e:	2f 5f       	subi	r18, 0xFF	; 255
    6280:	3f 4f       	sbci	r19, 0xFF	; 255
    6282:	30 93 60 12 	sts	0x1260, r19
    6286:	20 93 5f 12 	sts	0x125F, r18
    while (bit_is_clear(UCSR2A, UDRE2));
    628a:	80 91 d0 00 	lds	r24, 0x00D0
    628e:	85 ff       	sbrs	r24, 5
    6290:	fc cf       	rjmp	.-8      	; 0x628a <ax12SetRegister2+0x1ac>
    UDR2 = data;
    6292:	90 93 d6 00 	sts	0x00D6, r25
      while (bit_is_clear(UCSR2A, UDRE2));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR2B, TXEN2);
    6296:	80 91 d1 00 	lds	r24, 0x00D1
    629a:	87 7f       	andi	r24, 0xF7	; 247
    629c:	80 93 d1 00 	sts	0x00D1, r24
    bitSet(UCSR2B, RXEN2);
    62a0:	80 91 d1 00 	lds	r24, 0x00D1
    62a4:	80 61       	ori	r24, 0x10	; 16
    62a6:	80 93 d1 00 	sts	0x00D1, r24
    bitSet(UCSR2B, RXCIE2);
    62aa:	80 91 d1 00 	lds	r24, 0x00D1
    62ae:	80 68       	ori	r24, 0x80	; 128
    62b0:	80 93 d1 00 	sts	0x00D1, r24
    ax_rx_int_Pointer = 0;
    62b4:	10 92 82 12 	sts	0x1282, r1
    62b8:	10 92 81 12 	sts	0x1281, r1
    ax_rx_Pointer = 0;
    62bc:	10 92 5c 12 	sts	0x125C, r1
    62c0:	10 92 5b 12 	sts	0x125B, r1
    ax12writeB((data&0xff00)>>8);
    // checksum = 
    ax12writeB(checksum);
    setRX(id);
    //ax12ReadPacket();
}
    62c4:	df 91       	pop	r29
    62c6:	cf 91       	pop	r28
    62c8:	08 95       	ret

000062ca <exit>:
    62ca:	f8 94       	cli
    62cc:	0c 94 1c 37 	jmp	0x6e38	; 0x6e38 <_exit>

000062d0 <memcpy>:
    62d0:	fb 01       	movw	r30, r22
    62d2:	dc 01       	movw	r26, r24
    62d4:	02 c0       	rjmp	.+4      	; 0x62da <memcpy+0xa>
    62d6:	01 90       	ld	r0, Z+
    62d8:	0d 92       	st	X+, r0
    62da:	41 50       	subi	r20, 0x01	; 1
    62dc:	50 40       	sbci	r21, 0x00	; 0
    62de:	d8 f7       	brcc	.-10     	; 0x62d6 <memcpy+0x6>
    62e0:	08 95       	ret

000062e2 <memset>:
    62e2:	dc 01       	movw	r26, r24
    62e4:	01 c0       	rjmp	.+2      	; 0x62e8 <memset+0x6>
    62e6:	6d 93       	st	X+, r22
    62e8:	41 50       	subi	r20, 0x01	; 1
    62ea:	50 40       	sbci	r21, 0x00	; 0
    62ec:	e0 f7       	brcc	.-8      	; 0x62e6 <memset+0x4>
    62ee:	08 95       	ret

000062f0 <strncpy>:
    62f0:	fb 01       	movw	r30, r22
    62f2:	dc 01       	movw	r26, r24
    62f4:	41 50       	subi	r20, 0x01	; 1
    62f6:	50 40       	sbci	r21, 0x00	; 0
    62f8:	48 f0       	brcs	.+18     	; 0x630c <strncpy+0x1c>
    62fa:	01 90       	ld	r0, Z+
    62fc:	0d 92       	st	X+, r0
    62fe:	00 20       	and	r0, r0
    6300:	c9 f7       	brne	.-14     	; 0x62f4 <strncpy+0x4>
    6302:	01 c0       	rjmp	.+2      	; 0x6306 <strncpy+0x16>
    6304:	1d 92       	st	X+, r1
    6306:	41 50       	subi	r20, 0x01	; 1
    6308:	50 40       	sbci	r21, 0x00	; 0
    630a:	e0 f7       	brcc	.-8      	; 0x6304 <strncpy+0x14>
    630c:	08 95       	ret

0000630e <acos>:
    630e:	9f 93       	push	r25
    6310:	9f 77       	andi	r25, 0x7F	; 127
    6312:	c6 d1       	rcall	.+908    	; 0x66a0 <__fp_arccos>
    6314:	0f 90       	pop	r0
    6316:	00 20       	and	r0, r0
    6318:	3a f4       	brpl	.+14     	; 0x6328 <acos+0x1a>
    631a:	90 58       	subi	r25, 0x80	; 128
    631c:	a2 ea       	ldi	r26, 0xA2	; 162
    631e:	2a ed       	ldi	r18, 0xDA	; 218
    6320:	3f e0       	ldi	r19, 0x0F	; 15
    6322:	49 e4       	ldi	r20, 0x49	; 73
    6324:	50 e4       	ldi	r21, 0x40	; 64
    6326:	13 d0       	rcall	.+38     	; 0x634e <__addsf3x>
    6328:	78 c2       	rjmp	.+1264   	; 0x681a <__fp_round>

0000632a <__subsf3>:
    632a:	50 58       	subi	r21, 0x80	; 128

0000632c <__addsf3>:
    632c:	bb 27       	eor	r27, r27
    632e:	aa 27       	eor	r26, r26
    6330:	0e d0       	rcall	.+28     	; 0x634e <__addsf3x>
    6332:	73 c2       	rjmp	.+1254   	; 0x681a <__fp_round>
    6334:	33 d2       	rcall	.+1126   	; 0x679c <__fp_pscA>
    6336:	30 f0       	brcs	.+12     	; 0x6344 <__addsf3+0x18>
    6338:	38 d2       	rcall	.+1136   	; 0x67aa <__fp_pscB>
    633a:	20 f0       	brcs	.+8      	; 0x6344 <__addsf3+0x18>
    633c:	31 f4       	brne	.+12     	; 0x634a <__addsf3+0x1e>
    633e:	9f 3f       	cpi	r25, 0xFF	; 255
    6340:	11 f4       	brne	.+4      	; 0x6346 <__addsf3+0x1a>
    6342:	1e f4       	brtc	.+6      	; 0x634a <__addsf3+0x1e>
    6344:	f2 c1       	rjmp	.+996    	; 0x672a <__fp_nan>
    6346:	0e f4       	brtc	.+2      	; 0x634a <__addsf3+0x1e>
    6348:	e0 95       	com	r30
    634a:	e7 fb       	bst	r30, 7
    634c:	e8 c1       	rjmp	.+976    	; 0x671e <__fp_inf>

0000634e <__addsf3x>:
    634e:	e9 2f       	mov	r30, r25
    6350:	86 d2       	rcall	.+1292   	; 0x685e <__fp_split3>
    6352:	80 f3       	brcs	.-32     	; 0x6334 <__addsf3+0x8>
    6354:	ba 17       	cp	r27, r26
    6356:	62 07       	cpc	r22, r18
    6358:	73 07       	cpc	r23, r19
    635a:	84 07       	cpc	r24, r20
    635c:	95 07       	cpc	r25, r21
    635e:	18 f0       	brcs	.+6      	; 0x6366 <__addsf3x+0x18>
    6360:	71 f4       	brne	.+28     	; 0x637e <__addsf3x+0x30>
    6362:	9e f5       	brtc	.+102    	; 0x63ca <__addsf3x+0x7c>
    6364:	9e c2       	rjmp	.+1340   	; 0x68a2 <__fp_zero>
    6366:	0e f4       	brtc	.+2      	; 0x636a <__addsf3x+0x1c>
    6368:	e0 95       	com	r30
    636a:	0b 2e       	mov	r0, r27
    636c:	ba 2f       	mov	r27, r26
    636e:	a0 2d       	mov	r26, r0
    6370:	0b 01       	movw	r0, r22
    6372:	b9 01       	movw	r22, r18
    6374:	90 01       	movw	r18, r0
    6376:	0c 01       	movw	r0, r24
    6378:	ca 01       	movw	r24, r20
    637a:	a0 01       	movw	r20, r0
    637c:	11 24       	eor	r1, r1
    637e:	ff 27       	eor	r31, r31
    6380:	59 1b       	sub	r21, r25
    6382:	99 f0       	breq	.+38     	; 0x63aa <__addsf3x+0x5c>
    6384:	59 3f       	cpi	r21, 0xF9	; 249
    6386:	50 f4       	brcc	.+20     	; 0x639c <__addsf3x+0x4e>
    6388:	50 3e       	cpi	r21, 0xE0	; 224
    638a:	68 f1       	brcs	.+90     	; 0x63e6 <__addsf3x+0x98>
    638c:	1a 16       	cp	r1, r26
    638e:	f0 40       	sbci	r31, 0x00	; 0
    6390:	a2 2f       	mov	r26, r18
    6392:	23 2f       	mov	r18, r19
    6394:	34 2f       	mov	r19, r20
    6396:	44 27       	eor	r20, r20
    6398:	58 5f       	subi	r21, 0xF8	; 248
    639a:	f3 cf       	rjmp	.-26     	; 0x6382 <__addsf3x+0x34>
    639c:	46 95       	lsr	r20
    639e:	37 95       	ror	r19
    63a0:	27 95       	ror	r18
    63a2:	a7 95       	ror	r26
    63a4:	f0 40       	sbci	r31, 0x00	; 0
    63a6:	53 95       	inc	r21
    63a8:	c9 f7       	brne	.-14     	; 0x639c <__addsf3x+0x4e>
    63aa:	7e f4       	brtc	.+30     	; 0x63ca <__addsf3x+0x7c>
    63ac:	1f 16       	cp	r1, r31
    63ae:	ba 0b       	sbc	r27, r26
    63b0:	62 0b       	sbc	r22, r18
    63b2:	73 0b       	sbc	r23, r19
    63b4:	84 0b       	sbc	r24, r20
    63b6:	ba f0       	brmi	.+46     	; 0x63e6 <__addsf3x+0x98>
    63b8:	91 50       	subi	r25, 0x01	; 1
    63ba:	a1 f0       	breq	.+40     	; 0x63e4 <__addsf3x+0x96>
    63bc:	ff 0f       	add	r31, r31
    63be:	bb 1f       	adc	r27, r27
    63c0:	66 1f       	adc	r22, r22
    63c2:	77 1f       	adc	r23, r23
    63c4:	88 1f       	adc	r24, r24
    63c6:	c2 f7       	brpl	.-16     	; 0x63b8 <__addsf3x+0x6a>
    63c8:	0e c0       	rjmp	.+28     	; 0x63e6 <__addsf3x+0x98>
    63ca:	ba 0f       	add	r27, r26
    63cc:	62 1f       	adc	r22, r18
    63ce:	73 1f       	adc	r23, r19
    63d0:	84 1f       	adc	r24, r20
    63d2:	48 f4       	brcc	.+18     	; 0x63e6 <__addsf3x+0x98>
    63d4:	87 95       	ror	r24
    63d6:	77 95       	ror	r23
    63d8:	67 95       	ror	r22
    63da:	b7 95       	ror	r27
    63dc:	f7 95       	ror	r31
    63de:	9e 3f       	cpi	r25, 0xFE	; 254
    63e0:	08 f0       	brcs	.+2      	; 0x63e4 <__addsf3x+0x96>
    63e2:	b3 cf       	rjmp	.-154    	; 0x634a <__addsf3+0x1e>
    63e4:	93 95       	inc	r25
    63e6:	88 0f       	add	r24, r24
    63e8:	08 f0       	brcs	.+2      	; 0x63ec <__addsf3x+0x9e>
    63ea:	99 27       	eor	r25, r25
    63ec:	ee 0f       	add	r30, r30
    63ee:	97 95       	ror	r25
    63f0:	87 95       	ror	r24
    63f2:	08 95       	ret

000063f4 <asin>:
    63f4:	9f 93       	push	r25
    63f6:	9f 77       	andi	r25, 0x7F	; 127
    63f8:	ee e3       	ldi	r30, 0x3E	; 62
    63fa:	89 37       	cpi	r24, 0x79	; 121
    63fc:	9e 07       	cpc	r25, r30
    63fe:	20 f4       	brcc	.+8      	; 0x6408 <asin+0x14>
    6400:	e4 ee       	ldi	r30, 0xE4	; 228
    6402:	f0 e0       	ldi	r31, 0x00	; 0
    6404:	ba d1       	rcall	.+884    	; 0x677a <__fp_powsodd>
    6406:	09 c0       	rjmp	.+18     	; 0x641a <asin+0x26>
    6408:	4b d1       	rcall	.+662    	; 0x66a0 <__fp_arccos>
    640a:	90 58       	subi	r25, 0x80	; 128
    640c:	a2 ea       	ldi	r26, 0xA2	; 162
    640e:	2a ed       	ldi	r18, 0xDA	; 218
    6410:	3f e0       	ldi	r19, 0x0F	; 15
    6412:	49 ec       	ldi	r20, 0xC9	; 201
    6414:	5f e3       	ldi	r21, 0x3F	; 63
    6416:	9b df       	rcall	.-202    	; 0x634e <__addsf3x>
    6418:	00 d2       	rcall	.+1024   	; 0x681a <__fp_round>
    641a:	0f 90       	pop	r0
    641c:	07 fc       	sbrc	r0, 7
    641e:	90 58       	subi	r25, 0x80	; 128
    6420:	08 95       	ret
    6422:	bc d1       	rcall	.+888    	; 0x679c <__fp_pscA>
    6424:	58 f0       	brcs	.+22     	; 0x643c <asin+0x48>
    6426:	80 e8       	ldi	r24, 0x80	; 128
    6428:	91 e0       	ldi	r25, 0x01	; 1
    642a:	09 f4       	brne	.+2      	; 0x642e <asin+0x3a>
    642c:	9e ef       	ldi	r25, 0xFE	; 254
    642e:	bd d1       	rcall	.+890    	; 0x67aa <__fp_pscB>
    6430:	28 f0       	brcs	.+10     	; 0x643c <asin+0x48>
    6432:	40 e8       	ldi	r20, 0x80	; 128
    6434:	51 e0       	ldi	r21, 0x01	; 1
    6436:	59 f4       	brne	.+22     	; 0x644e <atan2+0xe>
    6438:	5e ef       	ldi	r21, 0xFE	; 254
    643a:	09 c0       	rjmp	.+18     	; 0x644e <atan2+0xe>
    643c:	76 c1       	rjmp	.+748    	; 0x672a <__fp_nan>
    643e:	31 c2       	rjmp	.+1122   	; 0x68a2 <__fp_zero>

00006440 <atan2>:
    6440:	e9 2f       	mov	r30, r25
    6442:	e0 78       	andi	r30, 0x80	; 128
    6444:	0c d2       	rcall	.+1048   	; 0x685e <__fp_split3>
    6446:	68 f3       	brcs	.-38     	; 0x6422 <asin+0x2e>
    6448:	09 2e       	mov	r0, r25
    644a:	05 2a       	or	r0, r21
    644c:	c1 f3       	breq	.-16     	; 0x643e <asin+0x4a>
    644e:	26 17       	cp	r18, r22
    6450:	37 07       	cpc	r19, r23
    6452:	48 07       	cpc	r20, r24
    6454:	59 07       	cpc	r21, r25
    6456:	38 f0       	brcs	.+14     	; 0x6466 <atan2+0x26>
    6458:	0e 2e       	mov	r0, r30
    645a:	07 f8       	bld	r0, 7
    645c:	e0 25       	eor	r30, r0
    645e:	69 f0       	breq	.+26     	; 0x647a <atan2+0x3a>
    6460:	e0 25       	eor	r30, r0
    6462:	e0 64       	ori	r30, 0x40	; 64
    6464:	0a c0       	rjmp	.+20     	; 0x647a <atan2+0x3a>
    6466:	ef 63       	ori	r30, 0x3F	; 63
    6468:	07 f8       	bld	r0, 7
    646a:	00 94       	com	r0
    646c:	07 fa       	bst	r0, 7
    646e:	db 01       	movw	r26, r22
    6470:	b9 01       	movw	r22, r18
    6472:	9d 01       	movw	r18, r26
    6474:	dc 01       	movw	r26, r24
    6476:	ca 01       	movw	r24, r20
    6478:	ad 01       	movw	r20, r26
    647a:	ef 93       	push	r30
    647c:	4a d0       	rcall	.+148    	; 0x6512 <__divsf3_pse>
    647e:	cd d1       	rcall	.+922    	; 0x681a <__fp_round>
    6480:	0a d0       	rcall	.+20     	; 0x6496 <atan>
    6482:	5f 91       	pop	r21
    6484:	55 23       	and	r21, r21
    6486:	31 f0       	breq	.+12     	; 0x6494 <atan2+0x54>
    6488:	2b ed       	ldi	r18, 0xDB	; 219
    648a:	3f e0       	ldi	r19, 0x0F	; 15
    648c:	49 e4       	ldi	r20, 0x49	; 73
    648e:	50 fd       	sbrc	r21, 0
    6490:	49 ec       	ldi	r20, 0xC9	; 201
    6492:	4c cf       	rjmp	.-360    	; 0x632c <__addsf3>
    6494:	08 95       	ret

00006496 <atan>:
    6496:	df 93       	push	r29
    6498:	dd 27       	eor	r29, r29
    649a:	b9 2f       	mov	r27, r25
    649c:	bf 77       	andi	r27, 0x7F	; 127
    649e:	40 e8       	ldi	r20, 0x80	; 128
    64a0:	5f e3       	ldi	r21, 0x3F	; 63
    64a2:	16 16       	cp	r1, r22
    64a4:	17 06       	cpc	r1, r23
    64a6:	48 07       	cpc	r20, r24
    64a8:	5b 07       	cpc	r21, r27
    64aa:	10 f4       	brcc	.+4      	; 0x64b0 <atan+0x1a>
    64ac:	d9 2f       	mov	r29, r25
    64ae:	04 d2       	rcall	.+1032   	; 0x68b8 <inverse>
    64b0:	9f 93       	push	r25
    64b2:	8f 93       	push	r24
    64b4:	7f 93       	push	r23
    64b6:	6f 93       	push	r22
    64b8:	09 d3       	rcall	.+1554   	; 0x6acc <square>
    64ba:	e8 ef       	ldi	r30, 0xF8	; 248
    64bc:	f0 e0       	ldi	r31, 0x00	; 0
    64be:	38 d1       	rcall	.+624    	; 0x6730 <__fp_powser>
    64c0:	ac d1       	rcall	.+856    	; 0x681a <__fp_round>
    64c2:	2f 91       	pop	r18
    64c4:	3f 91       	pop	r19
    64c6:	4f 91       	pop	r20
    64c8:	5f 91       	pop	r21
    64ca:	09 d2       	rcall	.+1042   	; 0x68de <__mulsf3x>
    64cc:	dd 23       	and	r29, r29
    64ce:	49 f0       	breq	.+18     	; 0x64e2 <atan+0x4c>
    64d0:	90 58       	subi	r25, 0x80	; 128
    64d2:	a2 ea       	ldi	r26, 0xA2	; 162
    64d4:	2a ed       	ldi	r18, 0xDA	; 218
    64d6:	3f e0       	ldi	r19, 0x0F	; 15
    64d8:	49 ec       	ldi	r20, 0xC9	; 201
    64da:	5f e3       	ldi	r21, 0x3F	; 63
    64dc:	d0 78       	andi	r29, 0x80	; 128
    64de:	5d 27       	eor	r21, r29
    64e0:	36 df       	rcall	.-404    	; 0x634e <__addsf3x>
    64e2:	df 91       	pop	r29
    64e4:	9a c1       	rjmp	.+820    	; 0x681a <__fp_round>

000064e6 <__cmpsf2>:
    64e6:	f7 d0       	rcall	.+494    	; 0x66d6 <__fp_cmp>
    64e8:	08 f4       	brcc	.+2      	; 0x64ec <__cmpsf2+0x6>
    64ea:	81 e0       	ldi	r24, 0x01	; 1
    64ec:	08 95       	ret

000064ee <cos>:
    64ee:	65 d1       	rcall	.+714    	; 0x67ba <__fp_rempio2>
    64f0:	e3 95       	inc	r30
    64f2:	a4 c1       	rjmp	.+840    	; 0x683c <__fp_sinus>

000064f4 <__divsf3>:
    64f4:	0c d0       	rcall	.+24     	; 0x650e <__divsf3x>
    64f6:	91 c1       	rjmp	.+802    	; 0x681a <__fp_round>
    64f8:	58 d1       	rcall	.+688    	; 0x67aa <__fp_pscB>
    64fa:	40 f0       	brcs	.+16     	; 0x650c <__divsf3+0x18>
    64fc:	4f d1       	rcall	.+670    	; 0x679c <__fp_pscA>
    64fe:	30 f0       	brcs	.+12     	; 0x650c <__divsf3+0x18>
    6500:	21 f4       	brne	.+8      	; 0x650a <__divsf3+0x16>
    6502:	5f 3f       	cpi	r21, 0xFF	; 255
    6504:	19 f0       	breq	.+6      	; 0x650c <__divsf3+0x18>
    6506:	0b c1       	rjmp	.+534    	; 0x671e <__fp_inf>
    6508:	51 11       	cpse	r21, r1
    650a:	cc c1       	rjmp	.+920    	; 0x68a4 <__fp_szero>
    650c:	0e c1       	rjmp	.+540    	; 0x672a <__fp_nan>

0000650e <__divsf3x>:
    650e:	a7 d1       	rcall	.+846    	; 0x685e <__fp_split3>
    6510:	98 f3       	brcs	.-26     	; 0x64f8 <__divsf3+0x4>

00006512 <__divsf3_pse>:
    6512:	99 23       	and	r25, r25
    6514:	c9 f3       	breq	.-14     	; 0x6508 <__divsf3+0x14>
    6516:	55 23       	and	r21, r21
    6518:	b1 f3       	breq	.-20     	; 0x6506 <__divsf3+0x12>
    651a:	95 1b       	sub	r25, r21
    651c:	55 0b       	sbc	r21, r21
    651e:	bb 27       	eor	r27, r27
    6520:	aa 27       	eor	r26, r26
    6522:	62 17       	cp	r22, r18
    6524:	73 07       	cpc	r23, r19
    6526:	84 07       	cpc	r24, r20
    6528:	38 f0       	brcs	.+14     	; 0x6538 <__divsf3_pse+0x26>
    652a:	9f 5f       	subi	r25, 0xFF	; 255
    652c:	5f 4f       	sbci	r21, 0xFF	; 255
    652e:	22 0f       	add	r18, r18
    6530:	33 1f       	adc	r19, r19
    6532:	44 1f       	adc	r20, r20
    6534:	aa 1f       	adc	r26, r26
    6536:	a9 f3       	breq	.-22     	; 0x6522 <__divsf3_pse+0x10>
    6538:	33 d0       	rcall	.+102    	; 0x65a0 <__divsf3_pse+0x8e>
    653a:	0e 2e       	mov	r0, r30
    653c:	3a f0       	brmi	.+14     	; 0x654c <__divsf3_pse+0x3a>
    653e:	e0 e8       	ldi	r30, 0x80	; 128
    6540:	30 d0       	rcall	.+96     	; 0x65a2 <__divsf3_pse+0x90>
    6542:	91 50       	subi	r25, 0x01	; 1
    6544:	50 40       	sbci	r21, 0x00	; 0
    6546:	e6 95       	lsr	r30
    6548:	00 1c       	adc	r0, r0
    654a:	ca f7       	brpl	.-14     	; 0x653e <__divsf3_pse+0x2c>
    654c:	29 d0       	rcall	.+82     	; 0x65a0 <__divsf3_pse+0x8e>
    654e:	fe 2f       	mov	r31, r30
    6550:	27 d0       	rcall	.+78     	; 0x65a0 <__divsf3_pse+0x8e>
    6552:	66 0f       	add	r22, r22
    6554:	77 1f       	adc	r23, r23
    6556:	88 1f       	adc	r24, r24
    6558:	bb 1f       	adc	r27, r27
    655a:	26 17       	cp	r18, r22
    655c:	37 07       	cpc	r19, r23
    655e:	48 07       	cpc	r20, r24
    6560:	ab 07       	cpc	r26, r27
    6562:	b0 e8       	ldi	r27, 0x80	; 128
    6564:	09 f0       	breq	.+2      	; 0x6568 <__divsf3_pse+0x56>
    6566:	bb 0b       	sbc	r27, r27
    6568:	80 2d       	mov	r24, r0
    656a:	bf 01       	movw	r22, r30
    656c:	ff 27       	eor	r31, r31
    656e:	93 58       	subi	r25, 0x83	; 131
    6570:	5f 4f       	sbci	r21, 0xFF	; 255
    6572:	2a f0       	brmi	.+10     	; 0x657e <__divsf3_pse+0x6c>
    6574:	9e 3f       	cpi	r25, 0xFE	; 254
    6576:	51 05       	cpc	r21, r1
    6578:	68 f0       	brcs	.+26     	; 0x6594 <__divsf3_pse+0x82>
    657a:	d1 c0       	rjmp	.+418    	; 0x671e <__fp_inf>
    657c:	93 c1       	rjmp	.+806    	; 0x68a4 <__fp_szero>
    657e:	5f 3f       	cpi	r21, 0xFF	; 255
    6580:	ec f3       	brlt	.-6      	; 0x657c <__divsf3_pse+0x6a>
    6582:	98 3e       	cpi	r25, 0xE8	; 232
    6584:	dc f3       	brlt	.-10     	; 0x657c <__divsf3_pse+0x6a>
    6586:	86 95       	lsr	r24
    6588:	77 95       	ror	r23
    658a:	67 95       	ror	r22
    658c:	b7 95       	ror	r27
    658e:	f7 95       	ror	r31
    6590:	9f 5f       	subi	r25, 0xFF	; 255
    6592:	c9 f7       	brne	.-14     	; 0x6586 <__divsf3_pse+0x74>
    6594:	88 0f       	add	r24, r24
    6596:	91 1d       	adc	r25, r1
    6598:	96 95       	lsr	r25
    659a:	87 95       	ror	r24
    659c:	97 f9       	bld	r25, 7
    659e:	08 95       	ret
    65a0:	e1 e0       	ldi	r30, 0x01	; 1
    65a2:	66 0f       	add	r22, r22
    65a4:	77 1f       	adc	r23, r23
    65a6:	88 1f       	adc	r24, r24
    65a8:	bb 1f       	adc	r27, r27
    65aa:	62 17       	cp	r22, r18
    65ac:	73 07       	cpc	r23, r19
    65ae:	84 07       	cpc	r24, r20
    65b0:	ba 07       	cpc	r27, r26
    65b2:	20 f0       	brcs	.+8      	; 0x65bc <__divsf3_pse+0xaa>
    65b4:	62 1b       	sub	r22, r18
    65b6:	73 0b       	sbc	r23, r19
    65b8:	84 0b       	sbc	r24, r20
    65ba:	ba 0b       	sbc	r27, r26
    65bc:	ee 1f       	adc	r30, r30
    65be:	88 f7       	brcc	.-30     	; 0x65a2 <__divsf3_pse+0x90>
    65c0:	e0 95       	com	r30
    65c2:	08 95       	ret

000065c4 <__fixsfsi>:
    65c4:	04 d0       	rcall	.+8      	; 0x65ce <__fixunssfsi>
    65c6:	68 94       	set
    65c8:	b1 11       	cpse	r27, r1
    65ca:	6c c1       	rjmp	.+728    	; 0x68a4 <__fp_szero>
    65cc:	08 95       	ret

000065ce <__fixunssfsi>:
    65ce:	4f d1       	rcall	.+670    	; 0x686e <__fp_splitA>
    65d0:	88 f0       	brcs	.+34     	; 0x65f4 <__fixunssfsi+0x26>
    65d2:	9f 57       	subi	r25, 0x7F	; 127
    65d4:	90 f0       	brcs	.+36     	; 0x65fa <__fixunssfsi+0x2c>
    65d6:	b9 2f       	mov	r27, r25
    65d8:	99 27       	eor	r25, r25
    65da:	b7 51       	subi	r27, 0x17	; 23
    65dc:	a0 f0       	brcs	.+40     	; 0x6606 <__fixunssfsi+0x38>
    65de:	d1 f0       	breq	.+52     	; 0x6614 <__fixunssfsi+0x46>
    65e0:	66 0f       	add	r22, r22
    65e2:	77 1f       	adc	r23, r23
    65e4:	88 1f       	adc	r24, r24
    65e6:	99 1f       	adc	r25, r25
    65e8:	1a f0       	brmi	.+6      	; 0x65f0 <__fixunssfsi+0x22>
    65ea:	ba 95       	dec	r27
    65ec:	c9 f7       	brne	.-14     	; 0x65e0 <__fixunssfsi+0x12>
    65ee:	12 c0       	rjmp	.+36     	; 0x6614 <__fixunssfsi+0x46>
    65f0:	b1 30       	cpi	r27, 0x01	; 1
    65f2:	81 f0       	breq	.+32     	; 0x6614 <__fixunssfsi+0x46>
    65f4:	56 d1       	rcall	.+684    	; 0x68a2 <__fp_zero>
    65f6:	b1 e0       	ldi	r27, 0x01	; 1
    65f8:	08 95       	ret
    65fa:	53 c1       	rjmp	.+678    	; 0x68a2 <__fp_zero>
    65fc:	67 2f       	mov	r22, r23
    65fe:	78 2f       	mov	r23, r24
    6600:	88 27       	eor	r24, r24
    6602:	b8 5f       	subi	r27, 0xF8	; 248
    6604:	39 f0       	breq	.+14     	; 0x6614 <__fixunssfsi+0x46>
    6606:	b9 3f       	cpi	r27, 0xF9	; 249
    6608:	cc f3       	brlt	.-14     	; 0x65fc <__fixunssfsi+0x2e>
    660a:	86 95       	lsr	r24
    660c:	77 95       	ror	r23
    660e:	67 95       	ror	r22
    6610:	b3 95       	inc	r27
    6612:	d9 f7       	brne	.-10     	; 0x660a <__fixunssfsi+0x3c>
    6614:	3e f4       	brtc	.+14     	; 0x6624 <__fixunssfsi+0x56>
    6616:	90 95       	com	r25
    6618:	80 95       	com	r24
    661a:	70 95       	com	r23
    661c:	61 95       	neg	r22
    661e:	7f 4f       	sbci	r23, 0xFF	; 255
    6620:	8f 4f       	sbci	r24, 0xFF	; 255
    6622:	9f 4f       	sbci	r25, 0xFF	; 255
    6624:	08 95       	ret

00006626 <__floatunsisf>:
    6626:	e8 94       	clt
    6628:	09 c0       	rjmp	.+18     	; 0x663c <__floatsisf+0x12>

0000662a <__floatsisf>:
    662a:	97 fb       	bst	r25, 7
    662c:	3e f4       	brtc	.+14     	; 0x663c <__floatsisf+0x12>
    662e:	90 95       	com	r25
    6630:	80 95       	com	r24
    6632:	70 95       	com	r23
    6634:	61 95       	neg	r22
    6636:	7f 4f       	sbci	r23, 0xFF	; 255
    6638:	8f 4f       	sbci	r24, 0xFF	; 255
    663a:	9f 4f       	sbci	r25, 0xFF	; 255
    663c:	99 23       	and	r25, r25
    663e:	a9 f0       	breq	.+42     	; 0x666a <__floatsisf+0x40>
    6640:	f9 2f       	mov	r31, r25
    6642:	96 e9       	ldi	r25, 0x96	; 150
    6644:	bb 27       	eor	r27, r27
    6646:	93 95       	inc	r25
    6648:	f6 95       	lsr	r31
    664a:	87 95       	ror	r24
    664c:	77 95       	ror	r23
    664e:	67 95       	ror	r22
    6650:	b7 95       	ror	r27
    6652:	f1 11       	cpse	r31, r1
    6654:	f8 cf       	rjmp	.-16     	; 0x6646 <__floatsisf+0x1c>
    6656:	fa f4       	brpl	.+62     	; 0x6696 <__floatsisf+0x6c>
    6658:	bb 0f       	add	r27, r27
    665a:	11 f4       	brne	.+4      	; 0x6660 <__floatsisf+0x36>
    665c:	60 ff       	sbrs	r22, 0
    665e:	1b c0       	rjmp	.+54     	; 0x6696 <__floatsisf+0x6c>
    6660:	6f 5f       	subi	r22, 0xFF	; 255
    6662:	7f 4f       	sbci	r23, 0xFF	; 255
    6664:	8f 4f       	sbci	r24, 0xFF	; 255
    6666:	9f 4f       	sbci	r25, 0xFF	; 255
    6668:	16 c0       	rjmp	.+44     	; 0x6696 <__floatsisf+0x6c>
    666a:	88 23       	and	r24, r24
    666c:	11 f0       	breq	.+4      	; 0x6672 <__floatsisf+0x48>
    666e:	96 e9       	ldi	r25, 0x96	; 150
    6670:	11 c0       	rjmp	.+34     	; 0x6694 <__floatsisf+0x6a>
    6672:	77 23       	and	r23, r23
    6674:	21 f0       	breq	.+8      	; 0x667e <__floatsisf+0x54>
    6676:	9e e8       	ldi	r25, 0x8E	; 142
    6678:	87 2f       	mov	r24, r23
    667a:	76 2f       	mov	r23, r22
    667c:	05 c0       	rjmp	.+10     	; 0x6688 <__floatsisf+0x5e>
    667e:	66 23       	and	r22, r22
    6680:	71 f0       	breq	.+28     	; 0x669e <__floatsisf+0x74>
    6682:	96 e8       	ldi	r25, 0x86	; 134
    6684:	86 2f       	mov	r24, r22
    6686:	70 e0       	ldi	r23, 0x00	; 0
    6688:	60 e0       	ldi	r22, 0x00	; 0
    668a:	2a f0       	brmi	.+10     	; 0x6696 <__floatsisf+0x6c>
    668c:	9a 95       	dec	r25
    668e:	66 0f       	add	r22, r22
    6690:	77 1f       	adc	r23, r23
    6692:	88 1f       	adc	r24, r24
    6694:	da f7       	brpl	.-10     	; 0x668c <__floatsisf+0x62>
    6696:	88 0f       	add	r24, r24
    6698:	96 95       	lsr	r25
    669a:	87 95       	ror	r24
    669c:	97 f9       	bld	r25, 7
    669e:	08 95       	ret

000066a0 <__fp_arccos>:
    66a0:	df 93       	push	r29
    66a2:	cf 93       	push	r28
    66a4:	1f 93       	push	r17
    66a6:	0f 93       	push	r16
    66a8:	8b 01       	movw	r16, r22
    66aa:	ec 01       	movw	r28, r24
    66ac:	e5 e2       	ldi	r30, 0x25	; 37
    66ae:	f1 e0       	ldi	r31, 0x01	; 1
    66b0:	3f d0       	rcall	.+126    	; 0x6730 <__fp_powser>
    66b2:	b3 d0       	rcall	.+358    	; 0x681a <__fp_round>
    66b4:	98 01       	movw	r18, r16
    66b6:	ae 01       	movw	r20, r28
    66b8:	8b 01       	movw	r16, r22
    66ba:	ec 01       	movw	r28, r24
    66bc:	60 e0       	ldi	r22, 0x00	; 0
    66be:	70 e0       	ldi	r23, 0x00	; 0
    66c0:	80 e8       	ldi	r24, 0x80	; 128
    66c2:	9f e3       	ldi	r25, 0x3F	; 63
    66c4:	32 de       	rcall	.-924    	; 0x632a <__subsf3>
    66c6:	b8 d1       	rcall	.+880    	; 0x6a38 <sqrt>
    66c8:	98 01       	movw	r18, r16
    66ca:	ae 01       	movw	r20, r28
    66cc:	0f 91       	pop	r16
    66ce:	1f 91       	pop	r17
    66d0:	cf 91       	pop	r28
    66d2:	df 91       	pop	r29
    66d4:	04 c1       	rjmp	.+520    	; 0x68de <__mulsf3x>

000066d6 <__fp_cmp>:
    66d6:	99 0f       	add	r25, r25
    66d8:	00 08       	sbc	r0, r0
    66da:	55 0f       	add	r21, r21
    66dc:	aa 0b       	sbc	r26, r26
    66de:	e0 e8       	ldi	r30, 0x80	; 128
    66e0:	fe ef       	ldi	r31, 0xFE	; 254
    66e2:	16 16       	cp	r1, r22
    66e4:	17 06       	cpc	r1, r23
    66e6:	e8 07       	cpc	r30, r24
    66e8:	f9 07       	cpc	r31, r25
    66ea:	c0 f0       	brcs	.+48     	; 0x671c <__fp_cmp+0x46>
    66ec:	12 16       	cp	r1, r18
    66ee:	13 06       	cpc	r1, r19
    66f0:	e4 07       	cpc	r30, r20
    66f2:	f5 07       	cpc	r31, r21
    66f4:	98 f0       	brcs	.+38     	; 0x671c <__fp_cmp+0x46>
    66f6:	62 1b       	sub	r22, r18
    66f8:	73 0b       	sbc	r23, r19
    66fa:	84 0b       	sbc	r24, r20
    66fc:	95 0b       	sbc	r25, r21
    66fe:	39 f4       	brne	.+14     	; 0x670e <__fp_cmp+0x38>
    6700:	0a 26       	eor	r0, r26
    6702:	61 f0       	breq	.+24     	; 0x671c <__fp_cmp+0x46>
    6704:	23 2b       	or	r18, r19
    6706:	24 2b       	or	r18, r20
    6708:	25 2b       	or	r18, r21
    670a:	21 f4       	brne	.+8      	; 0x6714 <__fp_cmp+0x3e>
    670c:	08 95       	ret
    670e:	0a 26       	eor	r0, r26
    6710:	09 f4       	brne	.+2      	; 0x6714 <__fp_cmp+0x3e>
    6712:	a1 40       	sbci	r26, 0x01	; 1
    6714:	a6 95       	lsr	r26
    6716:	8f ef       	ldi	r24, 0xFF	; 255
    6718:	81 1d       	adc	r24, r1
    671a:	81 1d       	adc	r24, r1
    671c:	08 95       	ret

0000671e <__fp_inf>:
    671e:	97 f9       	bld	r25, 7
    6720:	9f 67       	ori	r25, 0x7F	; 127
    6722:	80 e8       	ldi	r24, 0x80	; 128
    6724:	70 e0       	ldi	r23, 0x00	; 0
    6726:	60 e0       	ldi	r22, 0x00	; 0
    6728:	08 95       	ret

0000672a <__fp_nan>:
    672a:	9f ef       	ldi	r25, 0xFF	; 255
    672c:	80 ec       	ldi	r24, 0xC0	; 192
    672e:	08 95       	ret

00006730 <__fp_powser>:
    6730:	df 93       	push	r29
    6732:	cf 93       	push	r28
    6734:	1f 93       	push	r17
    6736:	0f 93       	push	r16
    6738:	ff 92       	push	r15
    673a:	ef 92       	push	r14
    673c:	df 92       	push	r13
    673e:	7b 01       	movw	r14, r22
    6740:	8c 01       	movw	r16, r24
    6742:	68 94       	set
    6744:	05 c0       	rjmp	.+10     	; 0x6750 <__fp_powser+0x20>
    6746:	da 2e       	mov	r13, r26
    6748:	ef 01       	movw	r28, r30
    674a:	c9 d0       	rcall	.+402    	; 0x68de <__mulsf3x>
    674c:	fe 01       	movw	r30, r28
    674e:	e8 94       	clt
    6750:	a5 91       	lpm	r26, Z+
    6752:	25 91       	lpm	r18, Z+
    6754:	35 91       	lpm	r19, Z+
    6756:	45 91       	lpm	r20, Z+
    6758:	55 91       	lpm	r21, Z+
    675a:	ae f3       	brts	.-22     	; 0x6746 <__fp_powser+0x16>
    675c:	ef 01       	movw	r28, r30
    675e:	f7 dd       	rcall	.-1042   	; 0x634e <__addsf3x>
    6760:	fe 01       	movw	r30, r28
    6762:	97 01       	movw	r18, r14
    6764:	a8 01       	movw	r20, r16
    6766:	da 94       	dec	r13
    6768:	79 f7       	brne	.-34     	; 0x6748 <__fp_powser+0x18>
    676a:	df 90       	pop	r13
    676c:	ef 90       	pop	r14
    676e:	ff 90       	pop	r15
    6770:	0f 91       	pop	r16
    6772:	1f 91       	pop	r17
    6774:	cf 91       	pop	r28
    6776:	df 91       	pop	r29
    6778:	08 95       	ret

0000677a <__fp_powsodd>:
    677a:	9f 93       	push	r25
    677c:	8f 93       	push	r24
    677e:	7f 93       	push	r23
    6780:	6f 93       	push	r22
    6782:	ff 93       	push	r31
    6784:	ef 93       	push	r30
    6786:	9b 01       	movw	r18, r22
    6788:	ac 01       	movw	r20, r24
    678a:	9d d0       	rcall	.+314    	; 0x68c6 <__mulsf3>
    678c:	ef 91       	pop	r30
    678e:	ff 91       	pop	r31
    6790:	cf df       	rcall	.-98     	; 0x6730 <__fp_powser>
    6792:	2f 91       	pop	r18
    6794:	3f 91       	pop	r19
    6796:	4f 91       	pop	r20
    6798:	5f 91       	pop	r21
    679a:	95 c0       	rjmp	.+298    	; 0x68c6 <__mulsf3>

0000679c <__fp_pscA>:
    679c:	00 24       	eor	r0, r0
    679e:	0a 94       	dec	r0
    67a0:	16 16       	cp	r1, r22
    67a2:	17 06       	cpc	r1, r23
    67a4:	18 06       	cpc	r1, r24
    67a6:	09 06       	cpc	r0, r25
    67a8:	08 95       	ret

000067aa <__fp_pscB>:
    67aa:	00 24       	eor	r0, r0
    67ac:	0a 94       	dec	r0
    67ae:	12 16       	cp	r1, r18
    67b0:	13 06       	cpc	r1, r19
    67b2:	14 06       	cpc	r1, r20
    67b4:	05 06       	cpc	r0, r21
    67b6:	08 95       	ret
    67b8:	b8 cf       	rjmp	.-144    	; 0x672a <__fp_nan>

000067ba <__fp_rempio2>:
    67ba:	59 d0       	rcall	.+178    	; 0x686e <__fp_splitA>
    67bc:	e8 f3       	brcs	.-6      	; 0x67b8 <__fp_pscB+0xe>
    67be:	e8 94       	clt
    67c0:	ef ef       	ldi	r30, 0xFF	; 255
    67c2:	bb 27       	eor	r27, r27
    67c4:	3f e0       	ldi	r19, 0x0F	; 15
    67c6:	48 ec       	ldi	r20, 0xC8	; 200
    67c8:	5f e7       	ldi	r21, 0x7F	; 127
    67ca:	6b 3d       	cpi	r22, 0xDB	; 219
    67cc:	73 07       	cpc	r23, r19
    67ce:	84 07       	cpc	r24, r20
    67d0:	95 07       	cpc	r25, r21
    67d2:	08 f1       	brcs	.+66     	; 0x6816 <__fp_rempio2+0x5c>
    67d4:	ff 27       	eor	r31, r31
    67d6:	9f 57       	subi	r25, 0x7F	; 127
    67d8:	b2 5a       	subi	r27, 0xA2	; 162
    67da:	6a 4d       	sbci	r22, 0xDA	; 218
    67dc:	7f 40       	sbci	r23, 0x0F	; 15
    67de:	89 4c       	sbci	r24, 0xC9	; 201
    67e0:	f0 40       	sbci	r31, 0x00	; 0
    67e2:	32 f4       	brpl	.+12     	; 0x67f0 <__fp_rempio2+0x36>
    67e4:	be 55       	subi	r27, 0x5E	; 94
    67e6:	65 42       	sbci	r22, 0x25	; 37
    67e8:	70 4f       	sbci	r23, 0xF0	; 240
    67ea:	86 43       	sbci	r24, 0x36	; 54
    67ec:	ff 4f       	sbci	r31, 0xFF	; 255
    67ee:	08 94       	sec
    67f0:	ee 1f       	adc	r30, r30
    67f2:	91 50       	subi	r25, 0x01	; 1
    67f4:	30 f0       	brcs	.+12     	; 0x6802 <__fp_rempio2+0x48>
    67f6:	bb 0f       	add	r27, r27
    67f8:	66 1f       	adc	r22, r22
    67fa:	77 1f       	adc	r23, r23
    67fc:	88 1f       	adc	r24, r24
    67fe:	ff 1f       	adc	r31, r31
    6800:	eb cf       	rjmp	.-42     	; 0x67d8 <__fp_rempio2+0x1e>
    6802:	9e e7       	ldi	r25, 0x7E	; 126
    6804:	88 23       	and	r24, r24
    6806:	32 f0       	brmi	.+12     	; 0x6814 <__fp_rempio2+0x5a>
    6808:	bb 0f       	add	r27, r27
    680a:	66 1f       	adc	r22, r22
    680c:	77 1f       	adc	r23, r23
    680e:	88 1f       	adc	r24, r24
    6810:	9a 95       	dec	r25
    6812:	c1 f7       	brne	.-16     	; 0x6804 <__fp_rempio2+0x4a>
    6814:	93 95       	inc	r25
    6816:	e0 95       	com	r30
    6818:	cf c1       	rjmp	.+926    	; 0x6bb8 <__fp_mpack>

0000681a <__fp_round>:
    681a:	09 2e       	mov	r0, r25
    681c:	03 94       	inc	r0
    681e:	00 0c       	add	r0, r0
    6820:	11 f4       	brne	.+4      	; 0x6826 <__fp_round+0xc>
    6822:	88 23       	and	r24, r24
    6824:	52 f0       	brmi	.+20     	; 0x683a <__fp_round+0x20>
    6826:	bb 0f       	add	r27, r27
    6828:	40 f4       	brcc	.+16     	; 0x683a <__fp_round+0x20>
    682a:	bf 2b       	or	r27, r31
    682c:	11 f4       	brne	.+4      	; 0x6832 <__fp_round+0x18>
    682e:	60 ff       	sbrs	r22, 0
    6830:	04 c0       	rjmp	.+8      	; 0x683a <__fp_round+0x20>
    6832:	6f 5f       	subi	r22, 0xFF	; 255
    6834:	7f 4f       	sbci	r23, 0xFF	; 255
    6836:	8f 4f       	sbci	r24, 0xFF	; 255
    6838:	9f 4f       	sbci	r25, 0xFF	; 255
    683a:	08 95       	ret

0000683c <__fp_sinus>:
    683c:	ef 93       	push	r30
    683e:	e0 ff       	sbrs	r30, 0
    6840:	06 c0       	rjmp	.+12     	; 0x684e <__fp_sinus+0x12>
    6842:	a2 ea       	ldi	r26, 0xA2	; 162
    6844:	2a ed       	ldi	r18, 0xDA	; 218
    6846:	3f e0       	ldi	r19, 0x0F	; 15
    6848:	49 ec       	ldi	r20, 0xC9	; 201
    684a:	5f eb       	ldi	r21, 0xBF	; 191
    684c:	80 dd       	rcall	.-1280   	; 0x634e <__addsf3x>
    684e:	e5 df       	rcall	.-54     	; 0x681a <__fp_round>
    6850:	0f 90       	pop	r0
    6852:	03 94       	inc	r0
    6854:	01 fc       	sbrc	r0, 1
    6856:	90 58       	subi	r25, 0x80	; 128
    6858:	ed e4       	ldi	r30, 0x4D	; 77
    685a:	f1 e0       	ldi	r31, 0x01	; 1
    685c:	8e cf       	rjmp	.-228    	; 0x677a <__fp_powsodd>

0000685e <__fp_split3>:
    685e:	57 fd       	sbrc	r21, 7
    6860:	90 58       	subi	r25, 0x80	; 128
    6862:	44 0f       	add	r20, r20
    6864:	55 1f       	adc	r21, r21
    6866:	59 f0       	breq	.+22     	; 0x687e <__fp_splitA+0x10>
    6868:	5f 3f       	cpi	r21, 0xFF	; 255
    686a:	71 f0       	breq	.+28     	; 0x6888 <__fp_splitA+0x1a>
    686c:	47 95       	ror	r20

0000686e <__fp_splitA>:
    686e:	88 0f       	add	r24, r24
    6870:	97 fb       	bst	r25, 7
    6872:	99 1f       	adc	r25, r25
    6874:	61 f0       	breq	.+24     	; 0x688e <__fp_splitA+0x20>
    6876:	9f 3f       	cpi	r25, 0xFF	; 255
    6878:	79 f0       	breq	.+30     	; 0x6898 <__fp_splitA+0x2a>
    687a:	87 95       	ror	r24
    687c:	08 95       	ret
    687e:	12 16       	cp	r1, r18
    6880:	13 06       	cpc	r1, r19
    6882:	14 06       	cpc	r1, r20
    6884:	55 1f       	adc	r21, r21
    6886:	f2 cf       	rjmp	.-28     	; 0x686c <__fp_split3+0xe>
    6888:	46 95       	lsr	r20
    688a:	f1 df       	rcall	.-30     	; 0x686e <__fp_splitA>
    688c:	08 c0       	rjmp	.+16     	; 0x689e <__fp_splitA+0x30>
    688e:	16 16       	cp	r1, r22
    6890:	17 06       	cpc	r1, r23
    6892:	18 06       	cpc	r1, r24
    6894:	99 1f       	adc	r25, r25
    6896:	f1 cf       	rjmp	.-30     	; 0x687a <__fp_splitA+0xc>
    6898:	86 95       	lsr	r24
    689a:	71 05       	cpc	r23, r1
    689c:	61 05       	cpc	r22, r1
    689e:	08 94       	sec
    68a0:	08 95       	ret

000068a2 <__fp_zero>:
    68a2:	e8 94       	clt

000068a4 <__fp_szero>:
    68a4:	bb 27       	eor	r27, r27
    68a6:	66 27       	eor	r22, r22
    68a8:	77 27       	eor	r23, r23
    68aa:	cb 01       	movw	r24, r22
    68ac:	97 f9       	bld	r25, 7
    68ae:	08 95       	ret

000068b0 <__gesf2>:
    68b0:	12 df       	rcall	.-476    	; 0x66d6 <__fp_cmp>
    68b2:	08 f4       	brcc	.+2      	; 0x68b6 <__gesf2+0x6>
    68b4:	8f ef       	ldi	r24, 0xFF	; 255
    68b6:	08 95       	ret

000068b8 <inverse>:
    68b8:	9b 01       	movw	r18, r22
    68ba:	ac 01       	movw	r20, r24
    68bc:	60 e0       	ldi	r22, 0x00	; 0
    68be:	70 e0       	ldi	r23, 0x00	; 0
    68c0:	80 e8       	ldi	r24, 0x80	; 128
    68c2:	9f e3       	ldi	r25, 0x3F	; 63
    68c4:	17 ce       	rjmp	.-978    	; 0x64f4 <__divsf3>

000068c6 <__mulsf3>:
    68c6:	0b d0       	rcall	.+22     	; 0x68de <__mulsf3x>
    68c8:	a8 cf       	rjmp	.-176    	; 0x681a <__fp_round>
    68ca:	68 df       	rcall	.-304    	; 0x679c <__fp_pscA>
    68cc:	28 f0       	brcs	.+10     	; 0x68d8 <__mulsf3+0x12>
    68ce:	6d df       	rcall	.-294    	; 0x67aa <__fp_pscB>
    68d0:	18 f0       	brcs	.+6      	; 0x68d8 <__mulsf3+0x12>
    68d2:	95 23       	and	r25, r21
    68d4:	09 f0       	breq	.+2      	; 0x68d8 <__mulsf3+0x12>
    68d6:	23 cf       	rjmp	.-442    	; 0x671e <__fp_inf>
    68d8:	28 cf       	rjmp	.-432    	; 0x672a <__fp_nan>
    68da:	11 24       	eor	r1, r1
    68dc:	e3 cf       	rjmp	.-58     	; 0x68a4 <__fp_szero>

000068de <__mulsf3x>:
    68de:	bf df       	rcall	.-130    	; 0x685e <__fp_split3>
    68e0:	a0 f3       	brcs	.-24     	; 0x68ca <__mulsf3+0x4>

000068e2 <__mulsf3_pse>:
    68e2:	95 9f       	mul	r25, r21
    68e4:	d1 f3       	breq	.-12     	; 0x68da <__mulsf3+0x14>
    68e6:	95 0f       	add	r25, r21
    68e8:	50 e0       	ldi	r21, 0x00	; 0
    68ea:	55 1f       	adc	r21, r21
    68ec:	62 9f       	mul	r22, r18
    68ee:	f0 01       	movw	r30, r0
    68f0:	72 9f       	mul	r23, r18
    68f2:	bb 27       	eor	r27, r27
    68f4:	f0 0d       	add	r31, r0
    68f6:	b1 1d       	adc	r27, r1
    68f8:	63 9f       	mul	r22, r19
    68fa:	aa 27       	eor	r26, r26
    68fc:	f0 0d       	add	r31, r0
    68fe:	b1 1d       	adc	r27, r1
    6900:	aa 1f       	adc	r26, r26
    6902:	64 9f       	mul	r22, r20
    6904:	66 27       	eor	r22, r22
    6906:	b0 0d       	add	r27, r0
    6908:	a1 1d       	adc	r26, r1
    690a:	66 1f       	adc	r22, r22
    690c:	82 9f       	mul	r24, r18
    690e:	22 27       	eor	r18, r18
    6910:	b0 0d       	add	r27, r0
    6912:	a1 1d       	adc	r26, r1
    6914:	62 1f       	adc	r22, r18
    6916:	73 9f       	mul	r23, r19
    6918:	b0 0d       	add	r27, r0
    691a:	a1 1d       	adc	r26, r1
    691c:	62 1f       	adc	r22, r18
    691e:	83 9f       	mul	r24, r19
    6920:	a0 0d       	add	r26, r0
    6922:	61 1d       	adc	r22, r1
    6924:	22 1f       	adc	r18, r18
    6926:	74 9f       	mul	r23, r20
    6928:	33 27       	eor	r19, r19
    692a:	a0 0d       	add	r26, r0
    692c:	61 1d       	adc	r22, r1
    692e:	23 1f       	adc	r18, r19
    6930:	84 9f       	mul	r24, r20
    6932:	60 0d       	add	r22, r0
    6934:	21 1d       	adc	r18, r1
    6936:	82 2f       	mov	r24, r18
    6938:	76 2f       	mov	r23, r22
    693a:	6a 2f       	mov	r22, r26
    693c:	11 24       	eor	r1, r1
    693e:	9f 57       	subi	r25, 0x7F	; 127
    6940:	50 40       	sbci	r21, 0x00	; 0
    6942:	8a f0       	brmi	.+34     	; 0x6966 <__mulsf3_pse+0x84>
    6944:	e1 f0       	breq	.+56     	; 0x697e <__mulsf3_pse+0x9c>
    6946:	88 23       	and	r24, r24
    6948:	4a f0       	brmi	.+18     	; 0x695c <__mulsf3_pse+0x7a>
    694a:	ee 0f       	add	r30, r30
    694c:	ff 1f       	adc	r31, r31
    694e:	bb 1f       	adc	r27, r27
    6950:	66 1f       	adc	r22, r22
    6952:	77 1f       	adc	r23, r23
    6954:	88 1f       	adc	r24, r24
    6956:	91 50       	subi	r25, 0x01	; 1
    6958:	50 40       	sbci	r21, 0x00	; 0
    695a:	a9 f7       	brne	.-22     	; 0x6946 <__mulsf3_pse+0x64>
    695c:	9e 3f       	cpi	r25, 0xFE	; 254
    695e:	51 05       	cpc	r21, r1
    6960:	70 f0       	brcs	.+28     	; 0x697e <__mulsf3_pse+0x9c>
    6962:	dd ce       	rjmp	.-582    	; 0x671e <__fp_inf>
    6964:	9f cf       	rjmp	.-194    	; 0x68a4 <__fp_szero>
    6966:	5f 3f       	cpi	r21, 0xFF	; 255
    6968:	ec f3       	brlt	.-6      	; 0x6964 <__mulsf3_pse+0x82>
    696a:	98 3e       	cpi	r25, 0xE8	; 232
    696c:	dc f3       	brlt	.-10     	; 0x6964 <__mulsf3_pse+0x82>
    696e:	86 95       	lsr	r24
    6970:	77 95       	ror	r23
    6972:	67 95       	ror	r22
    6974:	b7 95       	ror	r27
    6976:	f7 95       	ror	r31
    6978:	e7 95       	ror	r30
    697a:	9f 5f       	subi	r25, 0xFF	; 255
    697c:	c1 f7       	brne	.-16     	; 0x696e <__mulsf3_pse+0x8c>
    697e:	fe 2b       	or	r31, r30
    6980:	88 0f       	add	r24, r24
    6982:	91 1d       	adc	r25, r1
    6984:	96 95       	lsr	r25
    6986:	87 95       	ror	r24
    6988:	97 f9       	bld	r25, 7
    698a:	08 95       	ret

0000698c <pow>:
    698c:	fa 01       	movw	r30, r20
    698e:	ee 0f       	add	r30, r30
    6990:	ff 1f       	adc	r31, r31
    6992:	30 96       	adiw	r30, 0x00	; 0
    6994:	21 05       	cpc	r18, r1
    6996:	31 05       	cpc	r19, r1
    6998:	99 f1       	breq	.+102    	; 0x6a00 <pow+0x74>
    699a:	61 15       	cp	r22, r1
    699c:	71 05       	cpc	r23, r1
    699e:	61 f4       	brne	.+24     	; 0x69b8 <pow+0x2c>
    69a0:	80 38       	cpi	r24, 0x80	; 128
    69a2:	bf e3       	ldi	r27, 0x3F	; 63
    69a4:	9b 07       	cpc	r25, r27
    69a6:	49 f1       	breq	.+82     	; 0x69fa <pow+0x6e>
    69a8:	68 94       	set
    69aa:	90 38       	cpi	r25, 0x80	; 128
    69ac:	81 05       	cpc	r24, r1
    69ae:	61 f0       	breq	.+24     	; 0x69c8 <pow+0x3c>
    69b0:	80 38       	cpi	r24, 0x80	; 128
    69b2:	bf ef       	ldi	r27, 0xFF	; 255
    69b4:	9b 07       	cpc	r25, r27
    69b6:	41 f0       	breq	.+16     	; 0x69c8 <pow+0x3c>
    69b8:	99 23       	and	r25, r25
    69ba:	42 f5       	brpl	.+80     	; 0x6a0c <pow+0x80>
    69bc:	ff 3f       	cpi	r31, 0xFF	; 255
    69be:	e1 05       	cpc	r30, r1
    69c0:	31 05       	cpc	r19, r1
    69c2:	21 05       	cpc	r18, r1
    69c4:	11 f1       	breq	.+68     	; 0x6a0a <pow+0x7e>
    69c6:	e8 94       	clt
    69c8:	08 94       	sec
    69ca:	e7 95       	ror	r30
    69cc:	d9 01       	movw	r26, r18
    69ce:	aa 23       	and	r26, r26
    69d0:	29 f4       	brne	.+10     	; 0x69dc <pow+0x50>
    69d2:	ab 2f       	mov	r26, r27
    69d4:	be 2f       	mov	r27, r30
    69d6:	f8 5f       	subi	r31, 0xF8	; 248
    69d8:	d0 f3       	brcs	.-12     	; 0x69ce <pow+0x42>
    69da:	10 c0       	rjmp	.+32     	; 0x69fc <pow+0x70>
    69dc:	ff 5f       	subi	r31, 0xFF	; 255
    69de:	70 f4       	brcc	.+28     	; 0x69fc <pow+0x70>
    69e0:	a6 95       	lsr	r26
    69e2:	e0 f7       	brcc	.-8      	; 0x69dc <pow+0x50>
    69e4:	f7 39       	cpi	r31, 0x97	; 151
    69e6:	50 f0       	brcs	.+20     	; 0x69fc <pow+0x70>
    69e8:	19 f0       	breq	.+6      	; 0x69f0 <pow+0x64>
    69ea:	ff 3a       	cpi	r31, 0xAF	; 175
    69ec:	38 f4       	brcc	.+14     	; 0x69fc <pow+0x70>
    69ee:	9f 77       	andi	r25, 0x7F	; 127
    69f0:	9f 93       	push	r25
    69f2:	0c d0       	rcall	.+24     	; 0x6a0c <pow+0x80>
    69f4:	0f 90       	pop	r0
    69f6:	07 fc       	sbrc	r0, 7
    69f8:	90 58       	subi	r25, 0x80	; 128
    69fa:	08 95       	ret
    69fc:	3e f0       	brts	.+14     	; 0x6a0c <pow+0x80>
    69fe:	95 ce       	rjmp	.-726    	; 0x672a <__fp_nan>
    6a00:	60 e0       	ldi	r22, 0x00	; 0
    6a02:	70 e0       	ldi	r23, 0x00	; 0
    6a04:	80 e8       	ldi	r24, 0x80	; 128
    6a06:	9f e3       	ldi	r25, 0x3F	; 63
    6a08:	08 95       	ret
    6a0a:	4f e7       	ldi	r20, 0x7F	; 127
    6a0c:	9f 77       	andi	r25, 0x7F	; 127
    6a0e:	5f 93       	push	r21
    6a10:	4f 93       	push	r20
    6a12:	3f 93       	push	r19
    6a14:	2f 93       	push	r18
    6a16:	39 d1       	rcall	.+626    	; 0x6c8a <log>
    6a18:	2f 91       	pop	r18
    6a1a:	3f 91       	pop	r19
    6a1c:	4f 91       	pop	r20
    6a1e:	5f 91       	pop	r21
    6a20:	52 df       	rcall	.-348    	; 0x68c6 <__mulsf3>
    6a22:	83 c0       	rjmp	.+262    	; 0x6b2a <exp>

00006a24 <sin>:
    6a24:	9f 93       	push	r25
    6a26:	c9 de       	rcall	.-622    	; 0x67ba <__fp_rempio2>
    6a28:	0f 90       	pop	r0
    6a2a:	07 fc       	sbrc	r0, 7
    6a2c:	ee 5f       	subi	r30, 0xFE	; 254
    6a2e:	06 cf       	rjmp	.-500    	; 0x683c <__fp_sinus>
    6a30:	11 f4       	brne	.+4      	; 0x6a36 <sin+0x12>
    6a32:	0e f4       	brtc	.+2      	; 0x6a36 <sin+0x12>
    6a34:	7a ce       	rjmp	.-780    	; 0x672a <__fp_nan>
    6a36:	c0 c0       	rjmp	.+384    	; 0x6bb8 <__fp_mpack>

00006a38 <sqrt>:
    6a38:	1a df       	rcall	.-460    	; 0x686e <__fp_splitA>
    6a3a:	d0 f3       	brcs	.-12     	; 0x6a30 <sin+0xc>
    6a3c:	99 23       	and	r25, r25
    6a3e:	d9 f3       	breq	.-10     	; 0x6a36 <sin+0x12>
    6a40:	ce f3       	brts	.-14     	; 0x6a34 <sin+0x10>
    6a42:	9f 57       	subi	r25, 0x7F	; 127
    6a44:	55 0b       	sbc	r21, r21
    6a46:	87 ff       	sbrs	r24, 7
    6a48:	c7 d0       	rcall	.+398    	; 0x6bd8 <__fp_norm2>
    6a4a:	56 95       	lsr	r21
    6a4c:	97 95       	ror	r25
    6a4e:	b0 e0       	ldi	r27, 0x00	; 0
    6a50:	20 f4       	brcc	.+8      	; 0x6a5a <sqrt+0x22>
    6a52:	66 0f       	add	r22, r22
    6a54:	77 1f       	adc	r23, r23
    6a56:	88 1f       	adc	r24, r24
    6a58:	bb 1f       	adc	r27, r27
    6a5a:	1f 93       	push	r17
    6a5c:	0f 93       	push	r16
    6a5e:	00 24       	eor	r0, r0
    6a60:	90 01       	movw	r18, r0
    6a62:	a0 01       	movw	r20, r0
    6a64:	80 01       	movw	r16, r0
    6a66:	f0 01       	movw	r30, r0
    6a68:	a0 e8       	ldi	r26, 0x80	; 128
    6a6a:	0e 0f       	add	r16, r30
    6a6c:	1f 1f       	adc	r17, r31
    6a6e:	0a 1e       	adc	r0, r26
    6a70:	51 1d       	adc	r21, r1
    6a72:	60 1b       	sub	r22, r16
    6a74:	71 0b       	sbc	r23, r17
    6a76:	80 09       	sbc	r24, r0
    6a78:	b5 0b       	sbc	r27, r21
    6a7a:	48 f4       	brcc	.+18     	; 0x6a8e <sqrt+0x56>
    6a7c:	60 0f       	add	r22, r16
    6a7e:	71 1f       	adc	r23, r17
    6a80:	80 1d       	adc	r24, r0
    6a82:	b5 1f       	adc	r27, r21
    6a84:	0e 1b       	sub	r16, r30
    6a86:	1f 0b       	sbc	r17, r31
    6a88:	0a 0a       	sbc	r0, r26
    6a8a:	51 09       	sbc	r21, r1
    6a8c:	07 c0       	rjmp	.+14     	; 0x6a9c <sqrt+0x64>
    6a8e:	2e 0f       	add	r18, r30
    6a90:	3f 1f       	adc	r19, r31
    6a92:	4a 1f       	adc	r20, r26
    6a94:	0e 0f       	add	r16, r30
    6a96:	1f 1f       	adc	r17, r31
    6a98:	0a 1e       	adc	r0, r26
    6a9a:	51 1d       	adc	r21, r1
    6a9c:	66 0f       	add	r22, r22
    6a9e:	77 1f       	adc	r23, r23
    6aa0:	88 1f       	adc	r24, r24
    6aa2:	bb 1f       	adc	r27, r27
    6aa4:	a6 95       	lsr	r26
    6aa6:	f7 95       	ror	r31
    6aa8:	e7 95       	ror	r30
    6aaa:	f8 f6       	brcc	.-66     	; 0x6a6a <sqrt+0x32>
    6aac:	06 17       	cp	r16, r22
    6aae:	17 07       	cpc	r17, r23
    6ab0:	08 06       	cpc	r0, r24
    6ab2:	5b 07       	cpc	r21, r27
    6ab4:	21 1d       	adc	r18, r1
    6ab6:	31 1d       	adc	r19, r1
    6ab8:	41 1d       	adc	r20, r1
    6aba:	0f 91       	pop	r16
    6abc:	1f 91       	pop	r17
    6abe:	b9 01       	movw	r22, r18
    6ac0:	84 2f       	mov	r24, r20
    6ac2:	91 58       	subi	r25, 0x81	; 129
    6ac4:	88 0f       	add	r24, r24
    6ac6:	96 95       	lsr	r25
    6ac8:	87 95       	ror	r24
    6aca:	08 95       	ret

00006acc <square>:
    6acc:	9b 01       	movw	r18, r22
    6ace:	ac 01       	movw	r20, r24
    6ad0:	fa ce       	rjmp	.-524    	; 0x68c6 <__mulsf3>

00006ad2 <tan>:
    6ad2:	df 93       	push	r29
    6ad4:	d9 2f       	mov	r29, r25
    6ad6:	71 de       	rcall	.-798    	; 0x67ba <__fp_rempio2>
    6ad8:	e6 95       	lsr	r30
    6ada:	d7 95       	ror	r29
    6adc:	2a ed       	ldi	r18, 0xDA	; 218
    6ade:	3f e0       	ldi	r19, 0x0F	; 15
    6ae0:	49 e4       	ldi	r20, 0x49	; 73
    6ae2:	5f e3       	ldi	r21, 0x3F	; 63
    6ae4:	b3 3a       	cpi	r27, 0xA3	; 163
    6ae6:	62 07       	cpc	r22, r18
    6ae8:	73 07       	cpc	r23, r19
    6aea:	84 07       	cpc	r24, r20
    6aec:	95 07       	cpc	r25, r21
    6aee:	d7 95       	ror	r29
    6af0:	2a f0       	brmi	.+10     	; 0x6afc <tan+0x2a>
    6af2:	a2 ea       	ldi	r26, 0xA2	; 162
    6af4:	49 ec       	ldi	r20, 0xC9	; 201
    6af6:	90 68       	ori	r25, 0x80	; 128
    6af8:	2a dc       	rcall	.-1964   	; 0x634e <__addsf3x>
    6afa:	8f de       	rcall	.-738    	; 0x681a <__fp_round>
    6afc:	eb e6       	ldi	r30, 0x6B	; 107
    6afe:	f1 e0       	ldi	r31, 0x01	; 1
    6b00:	3c de       	rcall	.-904    	; 0x677a <__fp_powsodd>
    6b02:	dd 0f       	add	r29, r29
    6b04:	0b f0       	brvs	.+2      	; 0x6b08 <tan+0x36>
    6b06:	d8 de       	rcall	.-592    	; 0x68b8 <inverse>
    6b08:	dd 0f       	add	r29, r29
    6b0a:	0b f4       	brvc	.+2      	; 0x6b0e <tan+0x3c>
    6b0c:	90 58       	subi	r25, 0x80	; 128
    6b0e:	df 91       	pop	r29
    6b10:	08 95       	ret

00006b12 <trunc>:
    6b12:	69 d0       	rcall	.+210    	; 0x6be6 <__fp_trunc>
    6b14:	20 f0       	brcs	.+8      	; 0x6b1e <trunc+0xc>
    6b16:	9f 37       	cpi	r25, 0x7F	; 127
    6b18:	08 f4       	brcc	.+2      	; 0x6b1c <trunc+0xa>
    6b1a:	c4 ce       	rjmp	.-632    	; 0x68a4 <__fp_szero>
    6b1c:	32 c0       	rjmp	.+100    	; 0x6b82 <__fp_mintl>
    6b1e:	4c c0       	rjmp	.+152    	; 0x6bb8 <__fp_mpack>
    6b20:	19 f4       	brne	.+6      	; 0x6b28 <trunc+0x16>
    6b22:	0e f0       	brts	.+2      	; 0x6b26 <trunc+0x14>
    6b24:	fc cd       	rjmp	.-1032   	; 0x671e <__fp_inf>
    6b26:	bd ce       	rjmp	.-646    	; 0x68a2 <__fp_zero>
    6b28:	00 ce       	rjmp	.-1024   	; 0x672a <__fp_nan>

00006b2a <exp>:
    6b2a:	a1 de       	rcall	.-702    	; 0x686e <__fp_splitA>
    6b2c:	c8 f3       	brcs	.-14     	; 0x6b20 <trunc+0xe>
    6b2e:	96 38       	cpi	r25, 0x86	; 134
    6b30:	c0 f7       	brcc	.-16     	; 0x6b22 <trunc+0x10>
    6b32:	07 f8       	bld	r0, 7
    6b34:	0f 92       	push	r0
    6b36:	e8 94       	clt
    6b38:	2b e3       	ldi	r18, 0x3B	; 59
    6b3a:	3a ea       	ldi	r19, 0xAA	; 170
    6b3c:	48 eb       	ldi	r20, 0xB8	; 184
    6b3e:	5f e7       	ldi	r21, 0x7F	; 127
    6b40:	d0 de       	rcall	.-608    	; 0x68e2 <__mulsf3_pse>
    6b42:	0f 92       	push	r0
    6b44:	0f 92       	push	r0
    6b46:	0f 92       	push	r0
    6b48:	4d b7       	in	r20, 0x3d	; 61
    6b4a:	5e b7       	in	r21, 0x3e	; 62
    6b4c:	0f 92       	push	r0
    6b4e:	dd d0       	rcall	.+442    	; 0x6d0a <modf>
    6b50:	ee e8       	ldi	r30, 0x8E	; 142
    6b52:	f1 e0       	ldi	r31, 0x01	; 1
    6b54:	ed dd       	rcall	.-1062   	; 0x6730 <__fp_powser>
    6b56:	4f 91       	pop	r20
    6b58:	5f 91       	pop	r21
    6b5a:	ef 91       	pop	r30
    6b5c:	ff 91       	pop	r31
    6b5e:	e5 95       	asr	r30
    6b60:	ee 1f       	adc	r30, r30
    6b62:	ff 1f       	adc	r31, r31
    6b64:	49 f0       	breq	.+18     	; 0x6b78 <exp+0x4e>
    6b66:	fe 57       	subi	r31, 0x7E	; 126
    6b68:	e0 68       	ori	r30, 0x80	; 128
    6b6a:	44 27       	eor	r20, r20
    6b6c:	ee 0f       	add	r30, r30
    6b6e:	44 1f       	adc	r20, r20
    6b70:	fa 95       	dec	r31
    6b72:	e1 f7       	brne	.-8      	; 0x6b6c <exp+0x42>
    6b74:	41 95       	neg	r20
    6b76:	55 0b       	sbc	r21, r21
    6b78:	4f d0       	rcall	.+158    	; 0x6c18 <ldexp>
    6b7a:	0f 90       	pop	r0
    6b7c:	07 fe       	sbrs	r0, 7
    6b7e:	9c ce       	rjmp	.-712    	; 0x68b8 <inverse>
    6b80:	08 95       	ret

00006b82 <__fp_mintl>:
    6b82:	88 23       	and	r24, r24
    6b84:	71 f4       	brne	.+28     	; 0x6ba2 <__fp_mintl+0x20>
    6b86:	77 23       	and	r23, r23
    6b88:	21 f0       	breq	.+8      	; 0x6b92 <__fp_mintl+0x10>
    6b8a:	98 50       	subi	r25, 0x08	; 8
    6b8c:	87 2b       	or	r24, r23
    6b8e:	76 2f       	mov	r23, r22
    6b90:	07 c0       	rjmp	.+14     	; 0x6ba0 <__fp_mintl+0x1e>
    6b92:	66 23       	and	r22, r22
    6b94:	11 f4       	brne	.+4      	; 0x6b9a <__fp_mintl+0x18>
    6b96:	99 27       	eor	r25, r25
    6b98:	0d c0       	rjmp	.+26     	; 0x6bb4 <__fp_mintl+0x32>
    6b9a:	90 51       	subi	r25, 0x10	; 16
    6b9c:	86 2b       	or	r24, r22
    6b9e:	70 e0       	ldi	r23, 0x00	; 0
    6ba0:	60 e0       	ldi	r22, 0x00	; 0
    6ba2:	2a f0       	brmi	.+10     	; 0x6bae <__fp_mintl+0x2c>
    6ba4:	9a 95       	dec	r25
    6ba6:	66 0f       	add	r22, r22
    6ba8:	77 1f       	adc	r23, r23
    6baa:	88 1f       	adc	r24, r24
    6bac:	da f7       	brpl	.-10     	; 0x6ba4 <__fp_mintl+0x22>
    6bae:	88 0f       	add	r24, r24
    6bb0:	96 95       	lsr	r25
    6bb2:	87 95       	ror	r24
    6bb4:	97 f9       	bld	r25, 7
    6bb6:	08 95       	ret

00006bb8 <__fp_mpack>:
    6bb8:	9f 3f       	cpi	r25, 0xFF	; 255
    6bba:	49 f0       	breq	.+18     	; 0x6bce <__fp_mpack+0x16>
    6bbc:	91 50       	subi	r25, 0x01	; 1
    6bbe:	28 f4       	brcc	.+10     	; 0x6bca <__fp_mpack+0x12>
    6bc0:	86 95       	lsr	r24
    6bc2:	77 95       	ror	r23
    6bc4:	67 95       	ror	r22
    6bc6:	b7 95       	ror	r27
    6bc8:	9f 5f       	subi	r25, 0xFF	; 255
    6bca:	80 38       	cpi	r24, 0x80	; 128
    6bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    6bce:	88 0f       	add	r24, r24
    6bd0:	96 95       	lsr	r25
    6bd2:	87 95       	ror	r24
    6bd4:	97 f9       	bld	r25, 7
    6bd6:	08 95       	ret

00006bd8 <__fp_norm2>:
    6bd8:	91 50       	subi	r25, 0x01	; 1
    6bda:	50 40       	sbci	r21, 0x00	; 0
    6bdc:	66 0f       	add	r22, r22
    6bde:	77 1f       	adc	r23, r23
    6be0:	88 1f       	adc	r24, r24
    6be2:	d2 f7       	brpl	.-12     	; 0x6bd8 <__fp_norm2>
    6be4:	08 95       	ret

00006be6 <__fp_trunc>:
    6be6:	43 de       	rcall	.-890    	; 0x686e <__fp_splitA>
    6be8:	a0 f0       	brcs	.+40     	; 0x6c12 <__fp_trunc+0x2c>
    6bea:	be e7       	ldi	r27, 0x7E	; 126
    6bec:	b9 17       	cp	r27, r25
    6bee:	88 f4       	brcc	.+34     	; 0x6c12 <__fp_trunc+0x2c>
    6bf0:	bb 27       	eor	r27, r27
    6bf2:	9f 38       	cpi	r25, 0x8F	; 143
    6bf4:	60 f4       	brcc	.+24     	; 0x6c0e <__fp_trunc+0x28>
    6bf6:	16 16       	cp	r1, r22
    6bf8:	b1 1d       	adc	r27, r1
    6bfa:	67 2f       	mov	r22, r23
    6bfc:	78 2f       	mov	r23, r24
    6bfe:	88 27       	eor	r24, r24
    6c00:	98 5f       	subi	r25, 0xF8	; 248
    6c02:	f7 cf       	rjmp	.-18     	; 0x6bf2 <__fp_trunc+0xc>
    6c04:	86 95       	lsr	r24
    6c06:	77 95       	ror	r23
    6c08:	67 95       	ror	r22
    6c0a:	b1 1d       	adc	r27, r1
    6c0c:	93 95       	inc	r25
    6c0e:	96 39       	cpi	r25, 0x96	; 150
    6c10:	c8 f3       	brcs	.-14     	; 0x6c04 <__fp_trunc+0x1e>
    6c12:	08 95       	ret
    6c14:	84 cd       	rjmp	.-1272   	; 0x671e <__fp_inf>
    6c16:	d0 cf       	rjmp	.-96     	; 0x6bb8 <__fp_mpack>

00006c18 <ldexp>:
    6c18:	2a de       	rcall	.-940    	; 0x686e <__fp_splitA>
    6c1a:	e8 f3       	brcs	.-6      	; 0x6c16 <__fp_trunc+0x30>
    6c1c:	99 23       	and	r25, r25
    6c1e:	d9 f3       	breq	.-10     	; 0x6c16 <__fp_trunc+0x30>
    6c20:	94 0f       	add	r25, r20
    6c22:	51 1d       	adc	r21, r1
    6c24:	bb f3       	brvs	.-18     	; 0x6c14 <__fp_trunc+0x2e>
    6c26:	91 50       	subi	r25, 0x01	; 1
    6c28:	50 40       	sbci	r21, 0x00	; 0
    6c2a:	94 f0       	brlt	.+36     	; 0x6c50 <ldexp+0x38>
    6c2c:	59 f0       	breq	.+22     	; 0x6c44 <ldexp+0x2c>
    6c2e:	88 23       	and	r24, r24
    6c30:	32 f0       	brmi	.+12     	; 0x6c3e <ldexp+0x26>
    6c32:	66 0f       	add	r22, r22
    6c34:	77 1f       	adc	r23, r23
    6c36:	88 1f       	adc	r24, r24
    6c38:	91 50       	subi	r25, 0x01	; 1
    6c3a:	50 40       	sbci	r21, 0x00	; 0
    6c3c:	c1 f7       	brne	.-16     	; 0x6c2e <ldexp+0x16>
    6c3e:	9e 3f       	cpi	r25, 0xFE	; 254
    6c40:	51 05       	cpc	r21, r1
    6c42:	44 f7       	brge	.-48     	; 0x6c14 <__fp_trunc+0x2e>
    6c44:	88 0f       	add	r24, r24
    6c46:	91 1d       	adc	r25, r1
    6c48:	96 95       	lsr	r25
    6c4a:	87 95       	ror	r24
    6c4c:	97 f9       	bld	r25, 7
    6c4e:	08 95       	ret
    6c50:	5f 3f       	cpi	r21, 0xFF	; 255
    6c52:	ac f0       	brlt	.+42     	; 0x6c7e <ldexp+0x66>
    6c54:	98 3e       	cpi	r25, 0xE8	; 232
    6c56:	9c f0       	brlt	.+38     	; 0x6c7e <ldexp+0x66>
    6c58:	bb 27       	eor	r27, r27
    6c5a:	86 95       	lsr	r24
    6c5c:	77 95       	ror	r23
    6c5e:	67 95       	ror	r22
    6c60:	b7 95       	ror	r27
    6c62:	08 f4       	brcc	.+2      	; 0x6c66 <ldexp+0x4e>
    6c64:	b1 60       	ori	r27, 0x01	; 1
    6c66:	93 95       	inc	r25
    6c68:	c1 f7       	brne	.-16     	; 0x6c5a <ldexp+0x42>
    6c6a:	bb 0f       	add	r27, r27
    6c6c:	58 f7       	brcc	.-42     	; 0x6c44 <ldexp+0x2c>
    6c6e:	11 f4       	brne	.+4      	; 0x6c74 <ldexp+0x5c>
    6c70:	60 ff       	sbrs	r22, 0
    6c72:	e8 cf       	rjmp	.-48     	; 0x6c44 <ldexp+0x2c>
    6c74:	6f 5f       	subi	r22, 0xFF	; 255
    6c76:	7f 4f       	sbci	r23, 0xFF	; 255
    6c78:	8f 4f       	sbci	r24, 0xFF	; 255
    6c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    6c7c:	e3 cf       	rjmp	.-58     	; 0x6c44 <ldexp+0x2c>
    6c7e:	12 ce       	rjmp	.-988    	; 0x68a4 <__fp_szero>
    6c80:	0e f0       	brts	.+2      	; 0x6c84 <ldexp+0x6c>
    6c82:	9a cf       	rjmp	.-204    	; 0x6bb8 <__fp_mpack>
    6c84:	52 cd       	rjmp	.-1372   	; 0x672a <__fp_nan>
    6c86:	68 94       	set
    6c88:	4a cd       	rjmp	.-1388   	; 0x671e <__fp_inf>

00006c8a <log>:
    6c8a:	f1 dd       	rcall	.-1054   	; 0x686e <__fp_splitA>
    6c8c:	c8 f3       	brcs	.-14     	; 0x6c80 <ldexp+0x68>
    6c8e:	99 23       	and	r25, r25
    6c90:	d1 f3       	breq	.-12     	; 0x6c86 <ldexp+0x6e>
    6c92:	c6 f3       	brts	.-16     	; 0x6c84 <ldexp+0x6c>
    6c94:	df 93       	push	r29
    6c96:	cf 93       	push	r28
    6c98:	1f 93       	push	r17
    6c9a:	0f 93       	push	r16
    6c9c:	ff 92       	push	r15
    6c9e:	c9 2f       	mov	r28, r25
    6ca0:	dd 27       	eor	r29, r29
    6ca2:	88 23       	and	r24, r24
    6ca4:	2a f0       	brmi	.+10     	; 0x6cb0 <log+0x26>
    6ca6:	21 97       	sbiw	r28, 0x01	; 1
    6ca8:	66 0f       	add	r22, r22
    6caa:	77 1f       	adc	r23, r23
    6cac:	88 1f       	adc	r24, r24
    6cae:	da f7       	brpl	.-10     	; 0x6ca6 <log+0x1c>
    6cb0:	20 e0       	ldi	r18, 0x00	; 0
    6cb2:	30 e0       	ldi	r19, 0x00	; 0
    6cb4:	40 e8       	ldi	r20, 0x80	; 128
    6cb6:	5f eb       	ldi	r21, 0xBF	; 191
    6cb8:	9f e3       	ldi	r25, 0x3F	; 63
    6cba:	88 39       	cpi	r24, 0x98	; 152
    6cbc:	20 f0       	brcs	.+8      	; 0x6cc6 <log+0x3c>
    6cbe:	80 3e       	cpi	r24, 0xE0	; 224
    6cc0:	30 f0       	brcs	.+12     	; 0x6cce <log+0x44>
    6cc2:	21 96       	adiw	r28, 0x01	; 1
    6cc4:	8f 77       	andi	r24, 0x7F	; 127
    6cc6:	32 db       	rcall	.-2460   	; 0x632c <__addsf3>
    6cc8:	e6 eb       	ldi	r30, 0xB6	; 182
    6cca:	f1 e0       	ldi	r31, 0x01	; 1
    6ccc:	03 c0       	rjmp	.+6      	; 0x6cd4 <log+0x4a>
    6cce:	2e db       	rcall	.-2468   	; 0x632c <__addsf3>
    6cd0:	e3 ee       	ldi	r30, 0xE3	; 227
    6cd2:	f1 e0       	ldi	r31, 0x01	; 1
    6cd4:	2d dd       	rcall	.-1446   	; 0x6730 <__fp_powser>
    6cd6:	8b 01       	movw	r16, r22
    6cd8:	be 01       	movw	r22, r28
    6cda:	ec 01       	movw	r28, r24
    6cdc:	fb 2e       	mov	r15, r27
    6cde:	6f 57       	subi	r22, 0x7F	; 127
    6ce0:	71 09       	sbc	r23, r1
    6ce2:	75 95       	asr	r23
    6ce4:	77 1f       	adc	r23, r23
    6ce6:	88 0b       	sbc	r24, r24
    6ce8:	99 0b       	sbc	r25, r25
    6cea:	9f dc       	rcall	.-1730   	; 0x662a <__floatsisf>
    6cec:	28 e1       	ldi	r18, 0x18	; 24
    6cee:	32 e7       	ldi	r19, 0x72	; 114
    6cf0:	41 e3       	ldi	r20, 0x31	; 49
    6cf2:	5f e3       	ldi	r21, 0x3F	; 63
    6cf4:	f4 dd       	rcall	.-1048   	; 0x68de <__mulsf3x>
    6cf6:	af 2d       	mov	r26, r15
    6cf8:	98 01       	movw	r18, r16
    6cfa:	ae 01       	movw	r20, r28
    6cfc:	ff 90       	pop	r15
    6cfe:	0f 91       	pop	r16
    6d00:	1f 91       	pop	r17
    6d02:	cf 91       	pop	r28
    6d04:	df 91       	pop	r29
    6d06:	23 db       	rcall	.-2490   	; 0x634e <__addsf3x>
    6d08:	88 cd       	rjmp	.-1264   	; 0x681a <__fp_round>

00006d0a <modf>:
    6d0a:	fa 01       	movw	r30, r20
    6d0c:	dc 01       	movw	r26, r24
    6d0e:	aa 0f       	add	r26, r26
    6d10:	bb 1f       	adc	r27, r27
    6d12:	9b 01       	movw	r18, r22
    6d14:	ac 01       	movw	r20, r24
    6d16:	bf 57       	subi	r27, 0x7F	; 127
    6d18:	28 f4       	brcc	.+10     	; 0x6d24 <modf+0x1a>
    6d1a:	22 27       	eor	r18, r18
    6d1c:	33 27       	eor	r19, r19
    6d1e:	44 27       	eor	r20, r20
    6d20:	50 78       	andi	r21, 0x80	; 128
    6d22:	1f c0       	rjmp	.+62     	; 0x6d62 <modf+0x58>
    6d24:	b7 51       	subi	r27, 0x17	; 23
    6d26:	88 f4       	brcc	.+34     	; 0x6d4a <modf+0x40>
    6d28:	ab 2f       	mov	r26, r27
    6d2a:	00 24       	eor	r0, r0
    6d2c:	46 95       	lsr	r20
    6d2e:	37 95       	ror	r19
    6d30:	27 95       	ror	r18
    6d32:	01 1c       	adc	r0, r1
    6d34:	a3 95       	inc	r26
    6d36:	d2 f3       	brmi	.-12     	; 0x6d2c <modf+0x22>
    6d38:	00 20       	and	r0, r0
    6d3a:	69 f0       	breq	.+26     	; 0x6d56 <modf+0x4c>
    6d3c:	22 0f       	add	r18, r18
    6d3e:	33 1f       	adc	r19, r19
    6d40:	44 1f       	adc	r20, r20
    6d42:	b3 95       	inc	r27
    6d44:	da f3       	brmi	.-10     	; 0x6d3c <modf+0x32>
    6d46:	0d d0       	rcall	.+26     	; 0x6d62 <modf+0x58>
    6d48:	f0 ca       	rjmp	.-2592   	; 0x632a <__subsf3>
    6d4a:	61 30       	cpi	r22, 0x01	; 1
    6d4c:	71 05       	cpc	r23, r1
    6d4e:	a0 e8       	ldi	r26, 0x80	; 128
    6d50:	8a 07       	cpc	r24, r26
    6d52:	b9 46       	sbci	r27, 0x69	; 105
    6d54:	30 f4       	brcc	.+12     	; 0x6d62 <modf+0x58>
    6d56:	9b 01       	movw	r18, r22
    6d58:	ac 01       	movw	r20, r24
    6d5a:	66 27       	eor	r22, r22
    6d5c:	77 27       	eor	r23, r23
    6d5e:	88 27       	eor	r24, r24
    6d60:	90 78       	andi	r25, 0x80	; 128
    6d62:	30 96       	adiw	r30, 0x00	; 0
    6d64:	21 f0       	breq	.+8      	; 0x6d6e <modf+0x64>
    6d66:	20 83       	st	Z, r18
    6d68:	31 83       	std	Z+1, r19	; 0x01
    6d6a:	42 83       	std	Z+2, r20	; 0x02
    6d6c:	53 83       	std	Z+3, r21	; 0x03
    6d6e:	08 95       	ret

00006d70 <__udivmodhi4>:
    6d70:	aa 1b       	sub	r26, r26
    6d72:	bb 1b       	sub	r27, r27
    6d74:	51 e1       	ldi	r21, 0x11	; 17
    6d76:	07 c0       	rjmp	.+14     	; 0x6d86 <__udivmodhi4_ep>

00006d78 <__udivmodhi4_loop>:
    6d78:	aa 1f       	adc	r26, r26
    6d7a:	bb 1f       	adc	r27, r27
    6d7c:	a6 17       	cp	r26, r22
    6d7e:	b7 07       	cpc	r27, r23
    6d80:	10 f0       	brcs	.+4      	; 0x6d86 <__udivmodhi4_ep>
    6d82:	a6 1b       	sub	r26, r22
    6d84:	b7 0b       	sbc	r27, r23

00006d86 <__udivmodhi4_ep>:
    6d86:	88 1f       	adc	r24, r24
    6d88:	99 1f       	adc	r25, r25
    6d8a:	5a 95       	dec	r21
    6d8c:	a9 f7       	brne	.-22     	; 0x6d78 <__udivmodhi4_loop>
    6d8e:	80 95       	com	r24
    6d90:	90 95       	com	r25
    6d92:	bc 01       	movw	r22, r24
    6d94:	cd 01       	movw	r24, r26
    6d96:	08 95       	ret

00006d98 <__divmodhi4>:
    6d98:	97 fb       	bst	r25, 7
    6d9a:	09 2e       	mov	r0, r25
    6d9c:	07 26       	eor	r0, r23
    6d9e:	0a d0       	rcall	.+20     	; 0x6db4 <__divmodhi4_neg1>
    6da0:	77 fd       	sbrc	r23, 7
    6da2:	04 d0       	rcall	.+8      	; 0x6dac <__divmodhi4_neg2>
    6da4:	e5 df       	rcall	.-54     	; 0x6d70 <__udivmodhi4>
    6da6:	06 d0       	rcall	.+12     	; 0x6db4 <__divmodhi4_neg1>
    6da8:	00 20       	and	r0, r0
    6daa:	1a f4       	brpl	.+6      	; 0x6db2 <__divmodhi4_exit>

00006dac <__divmodhi4_neg2>:
    6dac:	70 95       	com	r23
    6dae:	61 95       	neg	r22
    6db0:	7f 4f       	sbci	r23, 0xFF	; 255

00006db2 <__divmodhi4_exit>:
    6db2:	08 95       	ret

00006db4 <__divmodhi4_neg1>:
    6db4:	f6 f7       	brtc	.-4      	; 0x6db2 <__divmodhi4_exit>
    6db6:	90 95       	com	r25
    6db8:	81 95       	neg	r24
    6dba:	9f 4f       	sbci	r25, 0xFF	; 255
    6dbc:	08 95       	ret

00006dbe <__udivmodsi4>:
    6dbe:	a1 e2       	ldi	r26, 0x21	; 33
    6dc0:	1a 2e       	mov	r1, r26
    6dc2:	aa 1b       	sub	r26, r26
    6dc4:	bb 1b       	sub	r27, r27
    6dc6:	fd 01       	movw	r30, r26
    6dc8:	0d c0       	rjmp	.+26     	; 0x6de4 <__udivmodsi4_ep>

00006dca <__udivmodsi4_loop>:
    6dca:	aa 1f       	adc	r26, r26
    6dcc:	bb 1f       	adc	r27, r27
    6dce:	ee 1f       	adc	r30, r30
    6dd0:	ff 1f       	adc	r31, r31
    6dd2:	a2 17       	cp	r26, r18
    6dd4:	b3 07       	cpc	r27, r19
    6dd6:	e4 07       	cpc	r30, r20
    6dd8:	f5 07       	cpc	r31, r21
    6dda:	20 f0       	brcs	.+8      	; 0x6de4 <__udivmodsi4_ep>
    6ddc:	a2 1b       	sub	r26, r18
    6dde:	b3 0b       	sbc	r27, r19
    6de0:	e4 0b       	sbc	r30, r20
    6de2:	f5 0b       	sbc	r31, r21

00006de4 <__udivmodsi4_ep>:
    6de4:	66 1f       	adc	r22, r22
    6de6:	77 1f       	adc	r23, r23
    6de8:	88 1f       	adc	r24, r24
    6dea:	99 1f       	adc	r25, r25
    6dec:	1a 94       	dec	r1
    6dee:	69 f7       	brne	.-38     	; 0x6dca <__udivmodsi4_loop>
    6df0:	60 95       	com	r22
    6df2:	70 95       	com	r23
    6df4:	80 95       	com	r24
    6df6:	90 95       	com	r25
    6df8:	9b 01       	movw	r18, r22
    6dfa:	ac 01       	movw	r20, r24
    6dfc:	bd 01       	movw	r22, r26
    6dfe:	cf 01       	movw	r24, r30
    6e00:	08 95       	ret

00006e02 <__divmodsi4>:
    6e02:	97 fb       	bst	r25, 7
    6e04:	09 2e       	mov	r0, r25
    6e06:	05 26       	eor	r0, r21
    6e08:	0e d0       	rcall	.+28     	; 0x6e26 <__divmodsi4_neg1>
    6e0a:	57 fd       	sbrc	r21, 7
    6e0c:	04 d0       	rcall	.+8      	; 0x6e16 <__divmodsi4_neg2>
    6e0e:	d7 df       	rcall	.-82     	; 0x6dbe <__udivmodsi4>
    6e10:	0a d0       	rcall	.+20     	; 0x6e26 <__divmodsi4_neg1>
    6e12:	00 1c       	adc	r0, r0
    6e14:	38 f4       	brcc	.+14     	; 0x6e24 <__divmodsi4_exit>

00006e16 <__divmodsi4_neg2>:
    6e16:	50 95       	com	r21
    6e18:	40 95       	com	r20
    6e1a:	30 95       	com	r19
    6e1c:	21 95       	neg	r18
    6e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    6e20:	4f 4f       	sbci	r20, 0xFF	; 255
    6e22:	5f 4f       	sbci	r21, 0xFF	; 255

00006e24 <__divmodsi4_exit>:
    6e24:	08 95       	ret

00006e26 <__divmodsi4_neg1>:
    6e26:	f6 f7       	brtc	.-4      	; 0x6e24 <__divmodsi4_exit>
    6e28:	90 95       	com	r25
    6e2a:	80 95       	com	r24
    6e2c:	70 95       	com	r23
    6e2e:	61 95       	neg	r22
    6e30:	7f 4f       	sbci	r23, 0xFF	; 255
    6e32:	8f 4f       	sbci	r24, 0xFF	; 255
    6e34:	9f 4f       	sbci	r25, 0xFF	; 255
    6e36:	08 95       	ret

00006e38 <_exit>:
    6e38:	f8 94       	cli

00006e3a <__stop_program>:
    6e3a:	ff cf       	rjmp	.-2      	; 0x6e3a <__stop_program>
