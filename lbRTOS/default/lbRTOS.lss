
lbRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800200  0000626c  00006300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000626c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ff0  008002d8  008002d8  000063d8  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  000063d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001852  00000000  00000000  00006578  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005a24  00000000  00000000  00007dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016eb  00000000  00000000  0000d7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004936  00000000  00000000  0000eed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001210  00000000  00000000  00013810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000024b0  00000000  00000000  00014a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002d6e  00000000  00000000  00016ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00019c3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <__vector_13>
      38:	0c 94 8e 1f 	jmp	0x3f1c	; 0x3f1c <__vector_14>
      3c:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__vector_15>
      40:	0c 94 da 1e 	jmp	0x3db4	; 0x3db4 <__vector_16>
      44:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__vector_17>
      48:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__vector_18>
      4c:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__vector_19>
      50:	0c 94 40 1d 	jmp	0x3a80	; 0x3a80 <__vector_20>
      54:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__vector_21>
      58:	0c 94 ad 1e 	jmp	0x3d5a	; 0x3d5a <__vector_22>
      5c:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__vector_23>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__vector_25>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 b4 24 	jmp	0x4968	; 0x4968 <__vector_27>
      70:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      74:	0c 94 6e 27 	jmp	0x4edc	; 0x4edc <__vector_29>
      78:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      7c:	0c 94 bb 1f 	jmp	0x3f76	; 0x3f76 <__vector_31>
      80:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__vector_32>
      84:	0c 94 15 20 	jmp	0x402a	; 0x402a <__vector_33>
      88:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__vector_34>
      8c:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__vector_35>
      90:	0c 94 32 23 	jmp	0x4664	; 0x4664 <__vector_36>
      94:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      98:	0c 94 8f 24 	jmp	0x491e	; 0x491e <__vector_38>
      9c:	0c 94 8c 2b 	jmp	0x5718	; 0x5718 <__vector_39>
      a0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      a4:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__vector_41>
      a8:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__vector_42>
      ac:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__vector_43>
      b0:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__vector_44>
      b4:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__vector_45>
      b8:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__vector_46>
      bc:	0c 94 50 21 	jmp	0x42a0	; 0x42a0 <__vector_47>
      c0:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__vector_48>
      c4:	0c 94 aa 21 	jmp	0x4354	; 0x4354 <__vector_49>
      c8:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__vector_50>
      cc:	0c 94 0d 23 	jmp	0x461a	; 0x461a <__vector_51>
      d0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      d4:	0c 94 6a 24 	jmp	0x48d4	; 0x48d4 <__vector_53>
      d8:	0c 94 e8 22 	jmp	0x45d0	; 0x45d0 <__vector_54>
      dc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      e0:	0c 94 45 24 	jmp	0x488a	; 0x488a <__vector_56>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <retConv_s16+0x8e>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__c.3390>:
     166:	44 45 41 54 48 0a 00                                DEATH..

0000016d <__c.3212>:
     16d:	0a 00                                               ..

0000016f <__c.3210>:
     16f:	25 64 00                                            %d.

00000172 <__c.3198>:
     172:	25 64 0a 00                                         %d..

00000176 <__c.3099>:
     176:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 43     Initialization C
     186:	6f 6d 70 6c 65 74 65 20 0d 0a 00                    omplete ...

00000191 <__c.3094>:
     191:	2e 00                                               ..

00000193 <__c.3092>:
     193:	0d 0a 53 79 73 74 65 6d 20 57 61 72 6d 65 64 20     ..System Warmed 
     1a3:	55 70 00                                            Up.

000001a6 <__c.3035>:
     1a6:	57 52 0a 00                                         WR..

000001aa <__c.3004>:
     1aa:	57 52 0a 00                                         WR..

000001ae <TimerPrescaleFactor>:
     1ae:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

000001ba <Timer2PrescaleFactor>:
     1ba:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

000001ca <__c.1991>:
     1ca:	42 41 44 5f 76 65 63 74 20 63 61 6c 6c 65 64 21     BAD_vect called!
	...

000001db <HexChars>:
     1db:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d1 e2       	ldi	r29, 0x21	; 33
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	ec e6       	ldi	r30, 0x6C	; 108
     200:	f2 e6       	ldi	r31, 0x62	; 98
     202:	02 c0       	rjmp	.+4      	; 0x208 <.do_copy_data_start>

00000204 <.do_copy_data_loop>:
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0

00000208 <.do_copy_data_start>:
     208:	a8 3d       	cpi	r26, 0xD8	; 216
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <.do_copy_data_loop>

0000020e <__do_clear_bss>:
     20e:	12 e1       	ldi	r17, 0x12	; 18
     210:	a8 ed       	ldi	r26, 0xD8	; 216
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a8 3c       	cpi	r26, 0xC8	; 200
     21a:	b1 07       	cpc	r27, r17
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <main>
     222:	0c 94 b8 2c 	jmp	0x5970	; 0x5970 <exit>

00000226 <__bad_interrupt>:
     226:	0c 94 d7 21 	jmp	0x43ae	; 0x43ae <__vector_default>

0000022a <PWM_Init_timer1_LED>:

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     22a:	89 30       	cpi	r24, 0x09	; 9
     22c:	49 f4       	brne	.+18     	; 0x240 <PWM_Init_timer1_LED+0x16>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     22e:	80 91 80 00 	lds	r24, 0x0080
     232:	82 60       	ori	r24, 0x02	; 2
     234:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,PWM10);
     238:	80 91 80 00 	lds	r24, 0x0080
     23c:	8e 7f       	andi	r24, 0xFE	; 254
     23e:	0e c0       	rjmp	.+28     	; 0x25c <PWM_Init_timer1_LED+0x32>
	}
	else if( bitRes == 10 )
     240:	8a 30       	cpi	r24, 0x0A	; 10
     242:	21 f4       	brne	.+8      	; 0x24c <PWM_Init_timer1_LED+0x22>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     244:	80 91 80 00 	lds	r24, 0x0080
     248:	82 60       	ori	r24, 0x02	; 2
     24a:	03 c0       	rjmp	.+6      	; 0x252 <PWM_Init_timer1_LED+0x28>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     24c:	80 91 80 00 	lds	r24, 0x0080
     250:	8d 7f       	andi	r24, 0xFD	; 253
     252:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,PWM10);
     256:	80 91 80 00 	lds	r24, 0x0080
     25a:	81 60       	ori	r24, 0x01	; 1
     25c:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     260:	10 92 8b 00 	sts	0x008B, r1
     264:	10 92 8a 00 	sts	0x008A, r1
}
     268:	08 95       	ret

0000026a <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     26a:	89 30       	cpi	r24, 0x09	; 9
     26c:	49 f4       	brne	.+18     	; 0x280 <PWM_Init_timer2_H6+0x16>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
     26e:	80 91 b0 00 	lds	r24, 0x00B0
     272:	82 60       	ori	r24, 0x02	; 2
     274:	80 93 b0 00 	sts	0x00B0, r24
		cbi(TCCR2A,PWM10);
     278:	80 91 b0 00 	lds	r24, 0x00B0
     27c:	8e 7f       	andi	r24, 0xFE	; 254
     27e:	0e c0       	rjmp	.+28     	; 0x29c <PWM_Init_timer2_H6+0x32>
	}
	else if( bitRes == 10 )
     280:	8a 30       	cpi	r24, 0x0A	; 10
     282:	21 f4       	brne	.+8      	; 0x28c <PWM_Init_timer2_H6+0x22>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
     284:	80 91 b0 00 	lds	r24, 0x00B0
     288:	82 60       	ori	r24, 0x02	; 2
     28a:	03 c0       	rjmp	.+6      	; 0x292 <PWM_Init_timer2_H6+0x28>
		sbi(TCCR2A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
     28c:	80 91 b0 00 	lds	r24, 0x00B0
     290:	8d 7f       	andi	r24, 0xFD	; 253
     292:	80 93 b0 00 	sts	0x00B0, r24
		sbi(TCCR2A,PWM10);
     296:	80 91 b0 00 	lds	r24, 0x00B0
     29a:	81 60       	ori	r24, 0x01	; 1
     29c:	80 93 b0 00 	sts	0x00B0, r24
	}
	// clear output compare values
	OCR2B = 0;
     2a0:	10 92 b4 00 	sts	0x00B4, r1
}
     2a4:	08 95       	ret

000002a6 <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     2a6:	89 30       	cpi	r24, 0x09	; 9
     2a8:	49 f4       	brne	.+18     	; 0x2bc <PWM_Init_timer3_E3+0x16>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
     2aa:	80 91 90 00 	lds	r24, 0x0090
     2ae:	82 60       	ori	r24, 0x02	; 2
     2b0:	80 93 90 00 	sts	0x0090, r24
		cbi(TCCR3A,PWM10);
     2b4:	80 91 90 00 	lds	r24, 0x0090
     2b8:	8e 7f       	andi	r24, 0xFE	; 254
     2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <PWM_Init_timer3_E3+0x32>
	}
	else if( bitRes == 10 )
     2bc:	8a 30       	cpi	r24, 0x0A	; 10
     2be:	21 f4       	brne	.+8      	; 0x2c8 <PWM_Init_timer3_E3+0x22>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
     2c0:	80 91 90 00 	lds	r24, 0x0090
     2c4:	82 60       	ori	r24, 0x02	; 2
     2c6:	03 c0       	rjmp	.+6      	; 0x2ce <PWM_Init_timer3_E3+0x28>
		sbi(TCCR3A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
     2c8:	80 91 90 00 	lds	r24, 0x0090
     2cc:	8d 7f       	andi	r24, 0xFD	; 253
     2ce:	80 93 90 00 	sts	0x0090, r24
		sbi(TCCR3A,PWM10);
     2d2:	80 91 90 00 	lds	r24, 0x0090
     2d6:	81 60       	ori	r24, 0x01	; 1
     2d8:	80 93 90 00 	sts	0x0090, r24
	}
	// clear output compare values
	OCR3A = 0;
     2dc:	10 92 99 00 	sts	0x0099, r1
     2e0:	10 92 98 00 	sts	0x0098, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     2e4:	08 95       	ret

000002e6 <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     2e6:	89 30       	cpi	r24, 0x09	; 9
     2e8:	49 f4       	brne	.+18     	; 0x2fc <PWM_Init_timer3_E4+0x16>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
     2ea:	80 91 91 00 	lds	r24, 0x0091
     2ee:	82 60       	ori	r24, 0x02	; 2
     2f0:	80 93 91 00 	sts	0x0091, r24
		cbi(TCCR3B,PWM10);
     2f4:	80 91 91 00 	lds	r24, 0x0091
     2f8:	8e 7f       	andi	r24, 0xFE	; 254
     2fa:	0e c0       	rjmp	.+28     	; 0x318 <PWM_Init_timer3_E4+0x32>
	}
	else if( bitRes == 10 )
     2fc:	8a 30       	cpi	r24, 0x0A	; 10
     2fe:	21 f4       	brne	.+8      	; 0x308 <PWM_Init_timer3_E4+0x22>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
     300:	80 91 91 00 	lds	r24, 0x0091
     304:	82 60       	ori	r24, 0x02	; 2
     306:	03 c0       	rjmp	.+6      	; 0x30e <PWM_Init_timer3_E4+0x28>
		sbi(TCCR3B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
     308:	80 91 91 00 	lds	r24, 0x0091
     30c:	8d 7f       	andi	r24, 0xFD	; 253
     30e:	80 93 91 00 	sts	0x0091, r24
		sbi(TCCR3B,PWM10);
     312:	80 91 91 00 	lds	r24, 0x0091
     316:	81 60       	ori	r24, 0x01	; 1
     318:	80 93 91 00 	sts	0x0091, r24
	}
	// clear output compare values
	OCR3B = 0;
     31c:	10 92 9b 00 	sts	0x009B, r1
     320:	10 92 9a 00 	sts	0x009A, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     324:	08 95       	ret

00000326 <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     326:	89 30       	cpi	r24, 0x09	; 9
     328:	49 f4       	brne	.+18     	; 0x33c <PWM_Init_timer3_E5+0x16>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
     32a:	80 91 92 00 	lds	r24, 0x0092
     32e:	82 60       	ori	r24, 0x02	; 2
     330:	80 93 92 00 	sts	0x0092, r24
		cbi(TCCR3C,PWM10);
     334:	80 91 92 00 	lds	r24, 0x0092
     338:	8e 7f       	andi	r24, 0xFE	; 254
     33a:	0e c0       	rjmp	.+28     	; 0x358 <PWM_Init_timer3_E5+0x32>
	}
	else if( bitRes == 10 )
     33c:	8a 30       	cpi	r24, 0x0A	; 10
     33e:	21 f4       	brne	.+8      	; 0x348 <PWM_Init_timer3_E5+0x22>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
     340:	80 91 92 00 	lds	r24, 0x0092
     344:	82 60       	ori	r24, 0x02	; 2
     346:	03 c0       	rjmp	.+6      	; 0x34e <PWM_Init_timer3_E5+0x28>
		sbi(TCCR3C,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
     348:	80 91 92 00 	lds	r24, 0x0092
     34c:	8d 7f       	andi	r24, 0xFD	; 253
     34e:	80 93 92 00 	sts	0x0092, r24
		sbi(TCCR3C,PWM10);
     352:	80 91 92 00 	lds	r24, 0x0092
     356:	81 60       	ori	r24, 0x01	; 1
     358:	80 93 92 00 	sts	0x0092, r24
	}
	// clear output compare values
	OCR3C = 0;
     35c:	10 92 9d 00 	sts	0x009D, r1
     360:	10 92 9c 00 	sts	0x009C, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     364:	08 95       	ret

00000366 <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     366:	89 30       	cpi	r24, 0x09	; 9
     368:	49 f4       	brne	.+18     	; 0x37c <PWM_Init_timer4_H3+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     36a:	80 91 a0 00 	lds	r24, 0x00A0
     36e:	82 60       	ori	r24, 0x02	; 2
     370:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     374:	80 91 a0 00 	lds	r24, 0x00A0
     378:	8e 7f       	andi	r24, 0xFE	; 254
     37a:	0e c0       	rjmp	.+28     	; 0x398 <PWM_Init_timer4_H3+0x32>
	}
	else if( bitRes == 10 )
     37c:	8a 30       	cpi	r24, 0x0A	; 10
     37e:	21 f4       	brne	.+8      	; 0x388 <PWM_Init_timer4_H3+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     380:	80 91 a0 00 	lds	r24, 0x00A0
     384:	82 60       	ori	r24, 0x02	; 2
     386:	03 c0       	rjmp	.+6      	; 0x38e <PWM_Init_timer4_H3+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     388:	80 91 a0 00 	lds	r24, 0x00A0
     38c:	8d 7f       	andi	r24, 0xFD	; 253
     38e:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     392:	80 91 a0 00 	lds	r24, 0x00A0
     396:	81 60       	ori	r24, 0x01	; 1
     398:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4A = 0;
     39c:	10 92 a9 00 	sts	0x00A9, r1
     3a0:	10 92 a8 00 	sts	0x00A8, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     3a4:	08 95       	ret

000003a6 <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     3a6:	89 30       	cpi	r24, 0x09	; 9
     3a8:	49 f4       	brne	.+18     	; 0x3bc <PWM_Init_timer4_H4+0x16>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
     3aa:	80 91 a1 00 	lds	r24, 0x00A1
     3ae:	82 60       	ori	r24, 0x02	; 2
     3b0:	80 93 a1 00 	sts	0x00A1, r24
		cbi(TCCR4B,PWM10);
     3b4:	80 91 a1 00 	lds	r24, 0x00A1
     3b8:	8e 7f       	andi	r24, 0xFE	; 254
     3ba:	0e c0       	rjmp	.+28     	; 0x3d8 <PWM_Init_timer4_H4+0x32>
	}
	else if( bitRes == 10 )
     3bc:	8a 30       	cpi	r24, 0x0A	; 10
     3be:	21 f4       	brne	.+8      	; 0x3c8 <PWM_Init_timer4_H4+0x22>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
     3c0:	80 91 a1 00 	lds	r24, 0x00A1
     3c4:	82 60       	ori	r24, 0x02	; 2
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <PWM_Init_timer4_H4+0x28>
		sbi(TCCR4B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
     3c8:	80 91 a1 00 	lds	r24, 0x00A1
     3cc:	8d 7f       	andi	r24, 0xFD	; 253
     3ce:	80 93 a1 00 	sts	0x00A1, r24
		sbi(TCCR4B,PWM10);
     3d2:	80 91 a1 00 	lds	r24, 0x00A1
     3d6:	81 60       	ori	r24, 0x01	; 1
     3d8:	80 93 a1 00 	sts	0x00A1, r24
	}
	// clear output compare values
	OCR4B = 0;
     3dc:	10 92 ab 00 	sts	0x00AB, r1
     3e0:	10 92 aa 00 	sts	0x00AA, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     3e4:	08 95       	ret

000003e6 <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     3e6:	89 30       	cpi	r24, 0x09	; 9
     3e8:	49 f4       	brne	.+18     	; 0x3fc <PWM_Init_timer4_H5+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     3ea:	80 91 a0 00 	lds	r24, 0x00A0
     3ee:	82 60       	ori	r24, 0x02	; 2
     3f0:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     3f4:	80 91 a0 00 	lds	r24, 0x00A0
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	0e c0       	rjmp	.+28     	; 0x418 <PWM_Init_timer4_H5+0x32>
	}
	else if( bitRes == 10 )
     3fc:	8a 30       	cpi	r24, 0x0A	; 10
     3fe:	21 f4       	brne	.+8      	; 0x408 <PWM_Init_timer4_H5+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     400:	80 91 a0 00 	lds	r24, 0x00A0
     404:	82 60       	ori	r24, 0x02	; 2
     406:	03 c0       	rjmp	.+6      	; 0x40e <PWM_Init_timer4_H5+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     408:	80 91 a0 00 	lds	r24, 0x00A0
     40c:	8d 7f       	andi	r24, 0xFD	; 253
     40e:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     412:	80 91 a0 00 	lds	r24, 0x00A0
     416:	81 60       	ori	r24, 0x01	; 1
     418:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4C = 0;
     41c:	10 92 ad 00 	sts	0x00AD, r1
     420:	10 92 ac 00 	sts	0x00AC, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     424:	08 95       	ret

00000426 <timer1PWMInitICR>:
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     426:	e0 e8       	ldi	r30, 0x80	; 128
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	20 81       	ld	r18, Z
     42c:	2e 7f       	andi	r18, 0xFE	; 254
     42e:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     430:	20 81       	ld	r18, Z
     432:	22 60       	ori	r18, 0x02	; 2
     434:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     436:	e1 e8       	ldi	r30, 0x81	; 129
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	20 81       	ld	r18, Z
     43c:	28 60       	ori	r18, 0x08	; 8
     43e:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     440:	20 81       	ld	r18, Z
     442:	20 61       	ori	r18, 0x10	; 16
     444:	20 83       	st	Z, r18
	
	// set top count value
	ICR1 = topcount;
     446:	90 93 87 00 	sts	0x0087, r25
     44a:	80 93 86 00 	sts	0x0086, r24
	
	// clear output compare values
	OCR1A = 0;
     44e:	10 92 89 00 	sts	0x0089, r1
     452:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     456:	10 92 8b 00 	sts	0x008B, r1
     45a:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     45e:	10 92 8d 00 	sts	0x008D, r1
     462:	10 92 8c 00 	sts	0x008C, r1
}
     466:	08 95       	ret

00000468 <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
     468:	e0 e9       	ldi	r30, 0x90	; 144
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	20 81       	ld	r18, Z
     46e:	2e 7f       	andi	r18, 0xFE	; 254
     470:	20 83       	st	Z, r18
	sbi(TCCR3A,WGM11);
     472:	20 81       	ld	r18, Z
     474:	22 60       	ori	r18, 0x02	; 2
     476:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM12);
     478:	e1 e9       	ldi	r30, 0x91	; 145
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	20 81       	ld	r18, Z
     47e:	28 60       	ori	r18, 0x08	; 8
     480:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM13);
     482:	20 81       	ld	r18, Z
     484:	20 61       	ori	r18, 0x10	; 16
     486:	20 83       	st	Z, r18
	
	// set top count value
	ICR3 = topcount;
     488:	90 93 97 00 	sts	0x0097, r25
     48c:	80 93 96 00 	sts	0x0096, r24
	
	// clear output compare values
	OCR3A = 0;
     490:	10 92 99 00 	sts	0x0099, r1
     494:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
     498:	10 92 9b 00 	sts	0x009B, r1
     49c:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
     4a0:	10 92 9d 00 	sts	0x009D, r1
     4a4:	10 92 9c 00 	sts	0x009C, r1
}
     4a8:	08 95       	ret

000004aa <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
     4aa:	e0 ea       	ldi	r30, 0xA0	; 160
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	20 81       	ld	r18, Z
     4b0:	2e 7f       	andi	r18, 0xFE	; 254
     4b2:	20 83       	st	Z, r18
	sbi(TCCR4A,WGM11);
     4b4:	20 81       	ld	r18, Z
     4b6:	22 60       	ori	r18, 0x02	; 2
     4b8:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM12);
     4ba:	e1 ea       	ldi	r30, 0xA1	; 161
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	20 81       	ld	r18, Z
     4c0:	28 60       	ori	r18, 0x08	; 8
     4c2:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM13);
     4c4:	20 81       	ld	r18, Z
     4c6:	20 61       	ori	r18, 0x10	; 16
     4c8:	20 83       	st	Z, r18
	
	// set top count value
	ICR4 = topcount;
     4ca:	90 93 a7 00 	sts	0x00A7, r25
     4ce:	80 93 a6 00 	sts	0x00A6, r24
	
	// clear output compare values
	OCR4A = 0;
     4d2:	10 92 a9 00 	sts	0x00A9, r1
     4d6:	10 92 a8 00 	sts	0x00A8, r1
	OCR4B = 0;
     4da:	10 92 ab 00 	sts	0x00AB, r1
     4de:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
     4e2:	10 92 ad 00 	sts	0x00AD, r1
     4e6:	10 92 ac 00 	sts	0x00AC, r1
}
     4ea:	08 95       	ret

000004ec <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
	sbi(TCCR1A,COM1B1);
     4ec:	e0 e8       	ldi	r30, 0x80	; 128
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	80 62       	ori	r24, 0x20	; 32
     4f4:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     4f6:	80 81       	ld	r24, Z
     4f8:	8f 7e       	andi	r24, 0xEF	; 239
     4fa:	80 83       	st	Z, r24
}
     4fc:	08 95       	ret

000004fe <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
	sbi(TCCR2A,COM2B1);
     4fe:	e0 eb       	ldi	r30, 0xB0	; 176
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	80 62       	ori	r24, 0x20	; 32
     506:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     508:	80 81       	ld	r24, Z
     50a:	8f 7e       	andi	r24, 0xEF	; 239
     50c:	80 83       	st	Z, r24
}
     50e:	08 95       	ret

00000510 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
	sbi(TCCR3A,COM3A1);
     510:	e0 e9       	ldi	r30, 0x90	; 144
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	80 68       	ori	r24, 0x80	; 128
     518:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     51a:	80 81       	ld	r24, Z
     51c:	8f 7b       	andi	r24, 0xBF	; 191
     51e:	80 83       	st	Z, r24
}
     520:	08 95       	ret

00000522 <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
	sbi(TCCR3A,COM3B1);
     522:	e0 e9       	ldi	r30, 0x90	; 144
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	80 62       	ori	r24, 0x20	; 32
     52a:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     52c:	80 81       	ld	r24, Z
     52e:	8f 7e       	andi	r24, 0xEF	; 239
     530:	80 83       	st	Z, r24
}
     532:	08 95       	ret

00000534 <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
	sbi(TCCR3A,COM3C1);
     534:	e0 e9       	ldi	r30, 0x90	; 144
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 60       	ori	r24, 0x08	; 8
     53c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     53e:	80 81       	ld	r24, Z
     540:	8b 7f       	andi	r24, 0xFB	; 251
     542:	80 83       	st	Z, r24
}
     544:	08 95       	ret

00000546 <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
	sbi(TCCR4A,COM4A1);
     546:	e0 ea       	ldi	r30, 0xA0	; 160
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	80 68       	ori	r24, 0x80	; 128
     54e:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     550:	80 81       	ld	r24, Z
     552:	8f 7b       	andi	r24, 0xBF	; 191
     554:	80 83       	st	Z, r24
}
     556:	08 95       	ret

00000558 <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
	sbi(TCCR4A,COM4B1);
     558:	e0 ea       	ldi	r30, 0xA0	; 160
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	80 81       	ld	r24, Z
     55e:	80 62       	ori	r24, 0x20	; 32
     560:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     562:	80 81       	ld	r24, Z
     564:	8f 7e       	andi	r24, 0xEF	; 239
     566:	80 83       	st	Z, r24
}
     568:	08 95       	ret

0000056a <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
	sbi(TCCR4A,COM4C1);
     56a:	e0 ea       	ldi	r30, 0xA0	; 160
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	88 60       	ori	r24, 0x08	; 8
     572:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     574:	80 81       	ld	r24, Z
     576:	8b 7f       	andi	r24, 0xFB	; 251
     578:	80 83       	st	Z, r24
}
     57a:	08 95       	ret

0000057c <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     57c:	e0 e8       	ldi	r30, 0x80	; 128
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	8f 7d       	andi	r24, 0xDF	; 223
     584:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     586:	80 81       	ld	r24, Z
     588:	8f 7e       	andi	r24, 0xEF	; 239
     58a:	80 83       	st	Z, r24
}
     58c:	08 95       	ret

0000058e <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     58e:	e0 eb       	ldi	r30, 0xB0	; 176
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	8f 7d       	andi	r24, 0xDF	; 223
     596:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     598:	80 81       	ld	r24, Z
     59a:	8f 7e       	andi	r24, 0xEF	; 239
     59c:	80 83       	st	Z, r24
}
     59e:	08 95       	ret

000005a0 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     5a0:	e0 e9       	ldi	r30, 0x90	; 144
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	8f 77       	andi	r24, 0x7F	; 127
     5a8:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     5aa:	80 81       	ld	r24, Z
     5ac:	8f 7b       	andi	r24, 0xBF	; 191
     5ae:	80 83       	st	Z, r24
}
     5b0:	08 95       	ret

000005b2 <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     5b2:	e0 e9       	ldi	r30, 0x90	; 144
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	8f 7d       	andi	r24, 0xDF	; 223
     5ba:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     5bc:	80 81       	ld	r24, Z
     5be:	8f 7e       	andi	r24, 0xEF	; 239
     5c0:	80 83       	st	Z, r24
}
     5c2:	08 95       	ret

000005c4 <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     5c4:	e0 e9       	ldi	r30, 0x90	; 144
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	80 81       	ld	r24, Z
     5ca:	87 7f       	andi	r24, 0xF7	; 247
     5cc:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     5ce:	80 81       	ld	r24, Z
     5d0:	8b 7f       	andi	r24, 0xFB	; 251
     5d2:	80 83       	st	Z, r24
}
     5d4:	08 95       	ret

000005d6 <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     5d6:	e0 ea       	ldi	r30, 0xA0	; 160
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	8f 77       	andi	r24, 0x7F	; 127
     5de:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     5e0:	80 81       	ld	r24, Z
     5e2:	8f 7b       	andi	r24, 0xBF	; 191
     5e4:	80 83       	st	Z, r24
}
     5e6:	08 95       	ret

000005e8 <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     5e8:	e0 ea       	ldi	r30, 0xA0	; 160
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z
     5ee:	8f 7d       	andi	r24, 0xDF	; 223
     5f0:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     5f2:	80 81       	ld	r24, Z
     5f4:	8f 7e       	andi	r24, 0xEF	; 239
     5f6:	80 83       	st	Z, r24
}
     5f8:	08 95       	ret

000005fa <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     5fa:	e0 ea       	ldi	r30, 0xA0	; 160
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	87 7f       	andi	r24, 0xF7	; 247
     602:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     604:	80 81       	ld	r24, Z
     606:	8b 7f       	andi	r24, 0xFB	; 251
     608:	80 83       	st	Z, r24
}
     60a:	08 95       	ret

0000060c <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
	cbi(TCCR1A,PWM11);
     60c:	e0 e8       	ldi	r30, 0x80	; 128
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
     612:	8d 7f       	andi	r24, 0xFD	; 253
     614:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM10);
     616:	80 81       	ld	r24, Z
     618:	8e 7f       	andi	r24, 0xFE	; 254
     61a:	80 83       	st	Z, r24
}

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     61c:	80 81       	ld	r24, Z
     61e:	8f 7d       	andi	r24, 0xDF	; 223
     620:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     622:	80 81       	ld	r24, Z
     624:	8f 7e       	andi	r24, 0xEF	; 239
     626:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
	//timer2PWMCOff();
}
     628:	08 95       	ret

0000062a <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
	cbi(TCCR2A,PWM11);
     62a:	e0 eb       	ldi	r30, 0xB0	; 176
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	8d 7f       	andi	r24, 0xFD	; 253
     632:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM10);
     634:	80 81       	ld	r24, Z
     636:	8e 7f       	andi	r24, 0xFE	; 254
     638:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     63a:	80 81       	ld	r24, Z
     63c:	8f 7d       	andi	r24, 0xDF	; 223
     63e:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     640:	80 81       	ld	r24, Z
     642:	8f 7e       	andi	r24, 0xEF	; 239
     644:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM11);
	cbi(TCCR2A,PWM10);
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
	//timer2PWMCOff();
}
     646:	08 95       	ret

00000648 <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
	cbi(TCCR3A,PWM11);
     648:	e0 e9       	ldi	r30, 0x90	; 144
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	8d 7f       	andi	r24, 0xFD	; 253
     650:	80 83       	st	Z, r24
	cbi(TCCR3A,PWM10);
     652:	80 81       	ld	r24, Z
     654:	8e 7f       	andi	r24, 0xFE	; 254
     656:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B1);
	cbi(TCCR2A,COM2B0);
}
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     658:	80 81       	ld	r24, Z
     65a:	8f 77       	andi	r24, 0x7F	; 127
     65c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     65e:	80 81       	ld	r24, Z
     660:	8f 7b       	andi	r24, 0xBF	; 191
     662:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     664:	80 81       	ld	r24, Z
     666:	8f 7d       	andi	r24, 0xDF	; 223
     668:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     66a:	80 81       	ld	r24, Z
     66c:	8f 7e       	andi	r24, 0xEF	; 239
     66e:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     670:	80 81       	ld	r24, Z
     672:	87 7f       	andi	r24, 0xF7	; 247
     674:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     676:	80 81       	ld	r24, Z
     678:	8b 7f       	andi	r24, 0xFB	; 251
     67a:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
	PWM_timer3_Off_E4();
	PWM_timer3_Off_E5();
	//timer2PWMCOff();
}
     67c:	08 95       	ret

0000067e <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
	cbi(TCCR4A,PWM11);
     67e:	e0 ea       	ldi	r30, 0xA0	; 160
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	8d 7f       	andi	r24, 0xFD	; 253
     686:	80 83       	st	Z, r24
	cbi(TCCR4A,PWM10);
     688:	80 81       	ld	r24, Z
     68a:	8e 7f       	andi	r24, 0xFE	; 254
     68c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C1);
	cbi(TCCR3A,COM3C0);
}
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     68e:	80 81       	ld	r24, Z
     690:	8f 77       	andi	r24, 0x7F	; 127
     692:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     694:	80 81       	ld	r24, Z
     696:	8f 7b       	andi	r24, 0xBF	; 191
     698:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     69a:	80 81       	ld	r24, Z
     69c:	8f 7d       	andi	r24, 0xDF	; 223
     69e:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     6a0:	80 81       	ld	r24, Z
     6a2:	8f 7e       	andi	r24, 0xEF	; 239
     6a4:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     6a6:	80 81       	ld	r24, Z
     6a8:	87 7f       	andi	r24, 0xF7	; 247
     6aa:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     6ac:	80 81       	ld	r24, Z
     6ae:	8b 7f       	andi	r24, 0xFB	; 251
     6b0:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
	PWM_timer4_Off_H4();
	PWM_timer4_Off_H5();
	//timer2PWMCOff();
}
     6b2:	08 95       	ret

000006b4 <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
     6b4:	90 93 8b 00 	sts	0x008B, r25
     6b8:	80 93 8a 00 	sts	0x008A, r24
     6bc:	08 95       	ret

000006be <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     6be:	80 93 b4 00 	sts	0x00B4, r24
     6c2:	08 95       	ret

000006c4 <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
     6c4:	90 93 99 00 	sts	0x0099, r25
     6c8:	80 93 98 00 	sts	0x0098, r24
     6cc:	08 95       	ret

000006ce <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
     6ce:	90 93 9b 00 	sts	0x009B, r25
     6d2:	80 93 9a 00 	sts	0x009A, r24
     6d6:	08 95       	ret

000006d8 <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
     6d8:	90 93 9d 00 	sts	0x009D, r25
     6dc:	80 93 9c 00 	sts	0x009C, r24
     6e0:	08 95       	ret

000006e2 <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
     6e2:	90 93 a9 00 	sts	0x00A9, r25
     6e6:	80 93 a8 00 	sts	0x00A8, r24
     6ea:	08 95       	ret

000006ec <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
     6ec:	90 93 ab 00 	sts	0x00AB, r25
     6f0:	80 93 aa 00 	sts	0x00AA, r24
     6f4:	08 95       	ret

000006f6 <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
     6f6:	90 93 ad 00 	sts	0x00AD, r25
     6fa:	80 93 ac 00 	sts	0x00AC, r24
     6fe:	08 95       	ret

00000700 <configure_ports>:
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
     700:	10 ba       	out	0x10, r1	; 16
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
     702:	11 ba       	out	0x11, r1	; 17
	DDRK = 0b00000000;  //configure all K ports for input				0x00
     704:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
     708:	10 92 08 01 	sts	0x0108, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
     70c:	9f ef       	ldi	r25, 0xFF	; 255
     70e:	91 b9       	out	0x01, r25	; 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
     710:	80 e4       	ldi	r24, 0x40	; 64
     712:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;  //configure ports for output
     714:	97 b9       	out	0x07, r25	; 7
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
     716:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, PD1); // SDA pull-up
     718:	59 9a       	sbi	0x0b, 1	; 11
	DDRD = 0b11110011;  //configure ports for output
     71a:	83 ef       	ldi	r24, 0xF3	; 243
     71c:	8a b9       	out	0x0a, r24	; 10
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
     71e:	8e ef       	ldi	r24, 0xFE	; 254
     720:	8d b9       	out	0x0d, r24	; 13
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
     722:	a5 9a       	sbi	0x14, 5	; 20
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
     724:	9d 98       	cbi	0x13, 5	; 19
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
     726:	80 93 01 01 	sts	0x0101, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
     72a:	80 93 04 01 	sts	0x0104, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
     72e:	08 95       	ret

00000730 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
	}
     730:	08 95       	ret

00000732 <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     732:	2e 9a       	sbi	0x05, 6	; 5
     734:	08 95       	ret

00000736 <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     736:	2e 98       	cbi	0x05, 6	; 5
     738:	08 95       	ret

0000073a <button_pressed>:


//*****************BUTTON****************
int button_pressed(void)
	{
	return (bit_is_clear(PING, 5));
     73a:	22 b3       	in	r18, 0x12	; 18
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	85 e0       	ldi	r24, 0x05	; 5
     740:	36 95       	lsr	r19
     742:	27 95       	ror	r18
     744:	8a 95       	dec	r24
     746:	e1 f7       	brne	.-8      	; 0x740 <button_pressed+0x6>
     748:	20 95       	com	r18
     74a:	30 95       	com	r19
     74c:	21 70       	andi	r18, 0x01	; 1
     74e:	30 70       	andi	r19, 0x00	; 0
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
     750:	c9 01       	movw	r24, r18
     752:	08 95       	ret

00000754 <cos_SoR>:
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
	if (degrees >= 0)//positive angles
     754:	97 fd       	sbrc	r25, 7
     756:	10 c0       	rjmp	.+32     	; 0x778 <cos_SoR+0x24>
		return angtable[degrees/5];
     758:	25 e0       	ldi	r18, 0x05	; 5
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	0e 94 19 31 	call	0x6232	; 0x6232 <__divmodsi4>
     764:	da 01       	movw	r26, r20
     766:	c9 01       	movw	r24, r18
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	82 5c       	subi	r24, 0xC2	; 194
     76e:	9d 4f       	sbci	r25, 0xFD	; 253
     770:	fc 01       	movw	r30, r24
     772:	20 81       	ld	r18, Z
     774:	31 81       	ldd	r19, Z+1	; 0x01
     776:	17 c0       	rjmp	.+46     	; 0x7a6 <cos_SoR+0x52>
	else
		return -angtable[72-(-degrees)/5];
     778:	25 e0       	ldi	r18, 0x05	; 5
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	0e 94 19 31 	call	0x6232	; 0x6232 <__divmodsi4>
     784:	da 01       	movw	r26, r20
     786:	c9 01       	movw	r24, r18
     788:	88 5b       	subi	r24, 0xB8	; 184
     78a:	9f 4f       	sbci	r25, 0xFF	; 255
     78c:	af 4f       	sbci	r26, 0xFF	; 255
     78e:	bf 4f       	sbci	r27, 0xFF	; 255
     790:	88 0f       	add	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	82 5c       	subi	r24, 0xC2	; 194
     796:	9d 4f       	sbci	r25, 0xFD	; 253
     798:	fc 01       	movw	r30, r24
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	22 27       	eor	r18, r18
     7a0:	33 27       	eor	r19, r19
     7a2:	28 1b       	sub	r18, r24
     7a4:	39 0b       	sbc	r19, r25
	}
     7a6:	c9 01       	movw	r24, r18
     7a8:	08 95       	ret

000007aa <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
	degrees=degrees - 90;//phase shift 90 degrees
     7aa:	6a 55       	subi	r22, 0x5A	; 90
     7ac:	70 40       	sbci	r23, 0x00	; 0
     7ae:	80 40       	sbci	r24, 0x00	; 0
     7b0:	90 40       	sbci	r25, 0x00	; 0

	if (degrees >= 0)//positive angles
     7b2:	97 fd       	sbrc	r25, 7
     7b4:	10 c0       	rjmp	.+32     	; 0x7d6 <sin_SoR+0x2c>
		return angtable[degrees/5];
     7b6:	25 e0       	ldi	r18, 0x05	; 5
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	0e 94 19 31 	call	0x6232	; 0x6232 <__divmodsi4>
     7c2:	da 01       	movw	r26, r20
     7c4:	c9 01       	movw	r24, r18
     7c6:	88 0f       	add	r24, r24
     7c8:	99 1f       	adc	r25, r25
     7ca:	82 5c       	subi	r24, 0xC2	; 194
     7cc:	9d 4f       	sbci	r25, 0xFD	; 253
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 81       	ld	r18, Z
     7d2:	31 81       	ldd	r19, Z+1	; 0x01
     7d4:	17 c0       	rjmp	.+46     	; 0x804 <sin_SoR+0x5a>
	else
		return -angtable[72-(-degrees)/5];
     7d6:	25 e0       	ldi	r18, 0x05	; 5
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	0e 94 19 31 	call	0x6232	; 0x6232 <__divmodsi4>
     7e2:	da 01       	movw	r26, r20
     7e4:	c9 01       	movw	r24, r18
     7e6:	88 5b       	subi	r24, 0xB8	; 184
     7e8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ea:	af 4f       	sbci	r26, 0xFF	; 255
     7ec:	bf 4f       	sbci	r27, 0xFF	; 255
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	82 5c       	subi	r24, 0xC2	; 194
     7f4:	9d 4f       	sbci	r25, 0xFD	; 253
     7f6:	fc 01       	movw	r30, r24
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	22 27       	eor	r18, r18
     7fe:	33 27       	eor	r19, r19
     800:	28 1b       	sub	r18, r24
     802:	39 0b       	sbc	r19, r25
	}
     804:	c9 01       	movw	r24, r18
     806:	08 95       	ret

00000808 <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	6b 01       	movw	r12, r22
     816:	7c 01       	movw	r14, r24
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
     818:	8a e5       	ldi	r24, 0x5A	; 90
     81a:	c8 16       	cp	r12, r24
     81c:	d1 04       	cpc	r13, r1
     81e:	e1 04       	cpc	r14, r1
     820:	f1 04       	cpc	r15, r1
     822:	a1 f1       	breq	.+104    	; 0x88c <tan_SoR+0x84>
     824:	86 ea       	ldi	r24, 0xA6	; 166
     826:	c8 16       	cp	r12, r24
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	d8 06       	cpc	r13, r24
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	e8 06       	cpc	r14, r24
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	f8 06       	cpc	r15, r24
     834:	59 f1       	breq	.+86     	; 0x88c <tan_SoR+0x84>
     836:	8e e0       	ldi	r24, 0x0E	; 14
     838:	c8 16       	cp	r12, r24
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	d8 06       	cpc	r13, r24
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	e8 06       	cpc	r14, r24
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	f8 06       	cpc	r15, r24
     846:	11 f1       	breq	.+68     	; 0x88c <tan_SoR+0x84>
     848:	82 ef       	ldi	r24, 0xF2	; 242
     84a:	c8 16       	cp	r12, r24
     84c:	8e ef       	ldi	r24, 0xFE	; 254
     84e:	d8 06       	cpc	r13, r24
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	e8 06       	cpc	r14, r24
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	f8 06       	cpc	r15, r24
     858:	c9 f0       	breq	.+50     	; 0x88c <tan_SoR+0x84>
		return 0;//what else should I return?!?!?
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
     85a:	c7 01       	movw	r24, r14
     85c:	b6 01       	movw	r22, r12
     85e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <sin_SoR>
     862:	8c 01       	movw	r16, r24
     864:	c7 01       	movw	r24, r14
     866:	b6 01       	movw	r22, r12
     868:	0e 94 aa 03 	call	0x754	; 0x754 <cos_SoR>
     86c:	bc 01       	movw	r22, r24
     86e:	c8 01       	movw	r24, r16
     870:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__divmodhi4>
     874:	cb 01       	movw	r24, r22
     876:	9b 01       	movw	r18, r22
     878:	73 e0       	ldi	r23, 0x03	; 3
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	7a 95       	dec	r23
     880:	e1 f7       	brne	.-8      	; 0x87a <tan_SoR+0x72>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	28 0f       	add	r18, r24
     888:	39 1f       	adc	r19, r25
     88a:	02 c0       	rjmp	.+4      	; 0x890 <tan_SoR+0x88>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
	}
     890:	c9 01       	movw	r24, r18
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	08 95       	ret

000008a0 <prvPWMSetup>:
//-----------------------------**&&**


void prvPWMSetup(){

	PWM_Init_timer3_E4(10); // Left wheel
     8a0:	8a e0       	ldi	r24, 0x0A	; 10
     8a2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <PWM_Init_timer3_E4>
	PWM_Init_timer3_E3(10); // Right wheel
     8a6:	8a e0       	ldi	r24, 0x0A	; 10
     8a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <PWM_Init_timer3_E3>
	PWM_Init_timer4_H3(10);	// Left sprayer
     8ac:	8a e0       	ldi	r24, 0x0A	; 10
     8ae:	0e 94 b3 01 	call	0x366	; 0x366 <PWM_Init_timer4_H3>
	PWM_Init_timer4_H4(10);	// Right sprayer
     8b2:	8a e0       	ldi	r24, 0x0A	; 10
     8b4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <PWM_Init_timer4_H4>

}
     8b8:	08 95       	ret

000008ba <char2hex>:

char char2hex(char c){
     8ba:	98 2f       	mov	r25, r24
	
	if((c > 47) && (c <58)){
     8bc:	80 53       	subi	r24, 0x30	; 48
     8be:	8a 30       	cpi	r24, 0x0A	; 10
     8c0:	38 f0       	brcs	.+14     	; 0x8d0 <char2hex+0x16>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     8c2:	81 51       	subi	r24, 0x11	; 17
     8c4:	86 30       	cpi	r24, 0x06	; 6
     8c6:	10 f0       	brcs	.+4      	; 0x8cc <char2hex+0x12>
     8c8:	89 2f       	mov	r24, r25
     8ca:	08 95       	ret
		c -= 55;
     8cc:	89 2f       	mov	r24, r25
     8ce:	87 53       	subi	r24, 0x37	; 55
	}
	return c;
}
     8d0:	08 95       	ret

000008d2 <retConv_s16>:

s16 retConv_s16(char* ch_head){
     8d2:	fc 01       	movw	r30, r24

	s16 int_val = 0x0000;
	char iv1 = *(ch_head);
     8d4:	90 81       	ld	r25, Z
	char iv2 = *(ch_head + 1);
     8d6:	21 81       	ldd	r18, Z+1	; 0x01
	char iv3 = *(ch_head + 2);
     8d8:	42 81       	ldd	r20, Z+2	; 0x02
	char iv4 = *(ch_head + 3);
     8da:	53 81       	ldd	r21, Z+3	; 0x03

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     8dc:	89 2f       	mov	r24, r25
     8de:	80 53       	subi	r24, 0x30	; 48
     8e0:	8a 30       	cpi	r24, 0x0A	; 10
     8e2:	10 f4       	brcc	.+4      	; 0x8e8 <retConv_s16+0x16>
     8e4:	98 2f       	mov	r25, r24
     8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <retConv_s16+0x20>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     8e8:	89 2f       	mov	r24, r25
     8ea:	81 54       	subi	r24, 0x41	; 65
     8ec:	86 30       	cpi	r24, 0x06	; 6
     8ee:	08 f4       	brcc	.+2      	; 0x8f2 <retConv_s16+0x20>
		c -= 55;
     8f0:	97 53       	subi	r25, 0x37	; 55

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     8f2:	82 2f       	mov	r24, r18
     8f4:	80 53       	subi	r24, 0x30	; 48
     8f6:	8a 30       	cpi	r24, 0x0A	; 10
     8f8:	10 f4       	brcc	.+4      	; 0x8fe <retConv_s16+0x2c>
     8fa:	28 2f       	mov	r18, r24
     8fc:	05 c0       	rjmp	.+10     	; 0x908 <retConv_s16+0x36>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     8fe:	82 2f       	mov	r24, r18
     900:	81 54       	subi	r24, 0x41	; 65
     902:	86 30       	cpi	r24, 0x06	; 6
     904:	08 f4       	brcc	.+2      	; 0x908 <retConv_s16+0x36>
		c -= 55;
     906:	27 53       	subi	r18, 0x37	; 55

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     908:	84 2f       	mov	r24, r20
     90a:	80 53       	subi	r24, 0x30	; 48
     90c:	8a 30       	cpi	r24, 0x0A	; 10
     90e:	10 f4       	brcc	.+4      	; 0x914 <retConv_s16+0x42>
     910:	48 2f       	mov	r20, r24
     912:	05 c0       	rjmp	.+10     	; 0x91e <retConv_s16+0x4c>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     914:	84 2f       	mov	r24, r20
     916:	81 54       	subi	r24, 0x41	; 65
     918:	86 30       	cpi	r24, 0x06	; 6
     91a:	08 f4       	brcc	.+2      	; 0x91e <retConv_s16+0x4c>
		c -= 55;
     91c:	47 53       	subi	r20, 0x37	; 55

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     91e:	85 2f       	mov	r24, r21
     920:	80 53       	subi	r24, 0x30	; 48
     922:	8a 30       	cpi	r24, 0x0A	; 10
     924:	10 f4       	brcc	.+4      	; 0x92a <retConv_s16+0x58>
     926:	58 2f       	mov	r21, r24
     928:	05 c0       	rjmp	.+10     	; 0x934 <retConv_s16+0x62>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     92a:	85 2f       	mov	r24, r21
     92c:	81 54       	subi	r24, 0x41	; 65
     92e:	86 30       	cpi	r24, 0x06	; 6
     930:	08 f4       	brcc	.+2      	; 0x934 <retConv_s16+0x62>
		c -= 55;
     932:	57 53       	subi	r21, 0x37	; 55
	iv2 = char2hex(iv2);
	iv3 = char2hex(iv3);
	iv4 = char2hex(iv4);

	int_val = (int_val | iv1);
	int_val = ((int_val<<4) | iv2);
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	89 2f       	mov	r24, r25
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	a4 e0       	ldi	r26, 0x04	; 4
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	aa 95       	dec	r26
     942:	e1 f7       	brne	.-8      	; 0x93c <retConv_s16+0x6a>
     944:	28 2b       	or	r18, r24
     946:	39 2b       	or	r19, r25
	int_val = ((int_val<<4) | iv3);
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	22 0f       	add	r18, r18
     94c:	33 1f       	adc	r19, r19
     94e:	fa 95       	dec	r31
     950:	e1 f7       	brne	.-8      	; 0x94a <retConv_s16+0x78>
     952:	84 2f       	mov	r24, r20
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	82 2b       	or	r24, r18
     958:	93 2b       	or	r25, r19
	int_val = ((int_val<<4) | iv4);
     95a:	e4 e0       	ldi	r30, 0x04	; 4
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	ea 95       	dec	r30
     962:	e1 f7       	brne	.-8      	; 0x95c <retConv_s16+0x8a>
     964:	25 2f       	mov	r18, r21
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	28 2b       	or	r18, r24
     96a:	39 2b       	or	r19, r25
	return int_val;
}
     96c:	c9 01       	movw	r24, r18
     96e:	08 95       	ret

00000970 <retConv_s32>:

s32 retConv_s32(char* ch_head){
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	fc 01       	movw	r30, r24

	s32 int_val = 0x00000000;
	char iv1 = *(ch_head);
     978:	90 81       	ld	r25, Z
	char iv2 = *(ch_head + 1);
     97a:	21 81       	ldd	r18, Z+1	; 0x01
	char iv3 = *(ch_head + 2);
     97c:	62 81       	ldd	r22, Z+2	; 0x02
	char iv4 = *(ch_head + 3);
     97e:	73 81       	ldd	r23, Z+3	; 0x03
	char iv5 = *(ch_head + 4);
     980:	14 81       	ldd	r17, Z+4	; 0x04
	char iv6 = *(ch_head + 5);
     982:	05 81       	ldd	r16, Z+5	; 0x05
	char iv7 = *(ch_head + 6);
     984:	f6 80       	ldd	r15, Z+6	; 0x06
	char iv8 = *(ch_head + 7);
     986:	e7 81       	ldd	r30, Z+7	; 0x07

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     988:	89 2f       	mov	r24, r25
     98a:	80 53       	subi	r24, 0x30	; 48
     98c:	8a 30       	cpi	r24, 0x0A	; 10
     98e:	10 f4       	brcc	.+4      	; 0x994 <retConv_s32+0x24>
     990:	98 2f       	mov	r25, r24
     992:	05 c0       	rjmp	.+10     	; 0x99e <retConv_s32+0x2e>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     994:	89 2f       	mov	r24, r25
     996:	81 54       	subi	r24, 0x41	; 65
     998:	86 30       	cpi	r24, 0x06	; 6
     99a:	08 f4       	brcc	.+2      	; 0x99e <retConv_s32+0x2e>
		c -= 55;
     99c:	97 53       	subi	r25, 0x37	; 55

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     99e:	82 2f       	mov	r24, r18
     9a0:	80 53       	subi	r24, 0x30	; 48
     9a2:	8a 30       	cpi	r24, 0x0A	; 10
     9a4:	10 f4       	brcc	.+4      	; 0x9aa <retConv_s32+0x3a>
     9a6:	28 2f       	mov	r18, r24
     9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <retConv_s32+0x44>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     9aa:	82 2f       	mov	r24, r18
     9ac:	81 54       	subi	r24, 0x41	; 65
     9ae:	86 30       	cpi	r24, 0x06	; 6
     9b0:	08 f4       	brcc	.+2      	; 0x9b4 <retConv_s32+0x44>
		c -= 55;
     9b2:	27 53       	subi	r18, 0x37	; 55

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     9b4:	86 2f       	mov	r24, r22
     9b6:	80 53       	subi	r24, 0x30	; 48
     9b8:	8a 30       	cpi	r24, 0x0A	; 10
     9ba:	10 f4       	brcc	.+4      	; 0x9c0 <retConv_s32+0x50>
     9bc:	68 2f       	mov	r22, r24
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <retConv_s32+0x5a>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     9c0:	86 2f       	mov	r24, r22
     9c2:	81 54       	subi	r24, 0x41	; 65
     9c4:	86 30       	cpi	r24, 0x06	; 6
     9c6:	08 f4       	brcc	.+2      	; 0x9ca <retConv_s32+0x5a>
		c -= 55;
     9c8:	67 53       	subi	r22, 0x37	; 55

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     9ca:	87 2f       	mov	r24, r23
     9cc:	80 53       	subi	r24, 0x30	; 48
     9ce:	8a 30       	cpi	r24, 0x0A	; 10
     9d0:	10 f4       	brcc	.+4      	; 0x9d6 <retConv_s32+0x66>
     9d2:	78 2f       	mov	r23, r24
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <retConv_s32+0x70>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     9d6:	87 2f       	mov	r24, r23
     9d8:	81 54       	subi	r24, 0x41	; 65
     9da:	86 30       	cpi	r24, 0x06	; 6
     9dc:	08 f4       	brcc	.+2      	; 0x9e0 <retConv_s32+0x70>
		c -= 55;
     9de:	77 53       	subi	r23, 0x37	; 55

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     9e0:	81 2f       	mov	r24, r17
     9e2:	80 53       	subi	r24, 0x30	; 48
     9e4:	8a 30       	cpi	r24, 0x0A	; 10
     9e6:	10 f4       	brcc	.+4      	; 0x9ec <retConv_s32+0x7c>
     9e8:	18 2f       	mov	r17, r24
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <retConv_s32+0x86>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     9ec:	81 2f       	mov	r24, r17
     9ee:	81 54       	subi	r24, 0x41	; 65
     9f0:	86 30       	cpi	r24, 0x06	; 6
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <retConv_s32+0x86>
		c -= 55;
     9f4:	17 53       	subi	r17, 0x37	; 55

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     9f6:	80 2f       	mov	r24, r16
     9f8:	80 53       	subi	r24, 0x30	; 48
     9fa:	8a 30       	cpi	r24, 0x0A	; 10
     9fc:	10 f4       	brcc	.+4      	; 0xa02 <retConv_s32+0x92>
     9fe:	08 2f       	mov	r16, r24
     a00:	05 c0       	rjmp	.+10     	; 0xa0c <retConv_s32+0x9c>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     a02:	80 2f       	mov	r24, r16
     a04:	81 54       	subi	r24, 0x41	; 65
     a06:	86 30       	cpi	r24, 0x06	; 6
     a08:	08 f4       	brcc	.+2      	; 0xa0c <retConv_s32+0x9c>
		c -= 55;
     a0a:	07 53       	subi	r16, 0x37	; 55

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     a0c:	8f 2d       	mov	r24, r15
     a0e:	80 53       	subi	r24, 0x30	; 48
     a10:	8a 30       	cpi	r24, 0x0A	; 10
     a12:	10 f4       	brcc	.+4      	; 0xa18 <retConv_s32+0xa8>
     a14:	f8 2e       	mov	r15, r24
     a16:	06 c0       	rjmp	.+12     	; 0xa24 <retConv_s32+0xb4>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     a18:	8f 2d       	mov	r24, r15
     a1a:	81 54       	subi	r24, 0x41	; 65
     a1c:	86 30       	cpi	r24, 0x06	; 6
     a1e:	10 f4       	brcc	.+4      	; 0xa24 <retConv_s32+0xb4>
		c -= 55;
     a20:	89 ec       	ldi	r24, 0xC9	; 201
     a22:	f8 0e       	add	r15, r24

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
     a24:	8e 2f       	mov	r24, r30
     a26:	80 53       	subi	r24, 0x30	; 48
     a28:	8a 30       	cpi	r24, 0x0A	; 10
     a2a:	10 f4       	brcc	.+4      	; 0xa30 <retConv_s32+0xc0>
     a2c:	e8 2f       	mov	r30, r24
     a2e:	05 c0       	rjmp	.+10     	; 0xa3a <retConv_s32+0xca>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
     a30:	8e 2f       	mov	r24, r30
     a32:	81 54       	subi	r24, 0x41	; 65
     a34:	86 30       	cpi	r24, 0x06	; 6
     a36:	08 f4       	brcc	.+2      	; 0xa3a <retConv_s32+0xca>
		c -= 55;
     a38:	e7 53       	subi	r30, 0x37	; 55
	iv6 = char2hex(iv6);
	iv7 = char2hex(iv7);
	iv8 = char2hex(iv8);

	int_val = (int_val | iv1);
	int_val = ((int_val<<4) | iv2);
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	89 2f       	mov	r24, r25
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	f4 e0       	ldi	r31, 0x04	; 4
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	aa 1f       	adc	r26, r26
     a50:	bb 1f       	adc	r27, r27
     a52:	fa 95       	dec	r31
     a54:	d1 f7       	brne	.-12     	; 0xa4a <retConv_s32+0xda>
     a56:	28 2b       	or	r18, r24
     a58:	39 2b       	or	r19, r25
     a5a:	4a 2b       	or	r20, r26
     a5c:	5b 2b       	or	r21, r27
	int_val = ((int_val<<4) | iv3);
     a5e:	a4 e0       	ldi	r26, 0x04	; 4
     a60:	22 0f       	add	r18, r18
     a62:	33 1f       	adc	r19, r19
     a64:	44 1f       	adc	r20, r20
     a66:	55 1f       	adc	r21, r21
     a68:	aa 95       	dec	r26
     a6a:	d1 f7       	brne	.-12     	; 0xa60 <retConv_s32+0xf0>
     a6c:	86 2f       	mov	r24, r22
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	82 2b       	or	r24, r18
     a76:	93 2b       	or	r25, r19
     a78:	a4 2b       	or	r26, r20
     a7a:	b5 2b       	or	r27, r21
	int_val = ((int_val<<4) | iv4);
     a7c:	f4 e0       	ldi	r31, 0x04	; 4
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	fa 95       	dec	r31
     a88:	d1 f7       	brne	.-12     	; 0xa7e <retConv_s32+0x10e>
     a8a:	27 2f       	mov	r18, r23
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	28 2b       	or	r18, r24
     a94:	39 2b       	or	r19, r25
     a96:	4a 2b       	or	r20, r26
     a98:	5b 2b       	or	r21, r27
	int_val = ((int_val<<4) | iv5);
     a9a:	64 e0       	ldi	r22, 0x04	; 4
     a9c:	22 0f       	add	r18, r18
     a9e:	33 1f       	adc	r19, r19
     aa0:	44 1f       	adc	r20, r20
     aa2:	55 1f       	adc	r21, r21
     aa4:	6a 95       	dec	r22
     aa6:	d1 f7       	brne	.-12     	; 0xa9c <retConv_s32+0x12c>
     aa8:	81 2f       	mov	r24, r17
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	a0 e0       	ldi	r26, 0x00	; 0
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	82 2b       	or	r24, r18
     ab2:	93 2b       	or	r25, r19
     ab4:	a4 2b       	or	r26, r20
     ab6:	b5 2b       	or	r27, r21
	int_val = ((int_val<<4) | iv6);
     ab8:	24 e0       	ldi	r18, 0x04	; 4
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	aa 1f       	adc	r26, r26
     ac0:	bb 1f       	adc	r27, r27
     ac2:	2a 95       	dec	r18
     ac4:	d1 f7       	brne	.-12     	; 0xaba <retConv_s32+0x14a>
     ac6:	20 2f       	mov	r18, r16
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	28 2b       	or	r18, r24
     ad0:	39 2b       	or	r19, r25
     ad2:	4a 2b       	or	r20, r26
     ad4:	5b 2b       	or	r21, r27
	int_val = ((int_val<<4) | iv7);
     ad6:	04 e0       	ldi	r16, 0x04	; 4
     ad8:	22 0f       	add	r18, r18
     ada:	33 1f       	adc	r19, r19
     adc:	44 1f       	adc	r20, r20
     ade:	55 1f       	adc	r21, r21
     ae0:	0a 95       	dec	r16
     ae2:	d1 f7       	brne	.-12     	; 0xad8 <retConv_s32+0x168>
     ae4:	8f 2d       	mov	r24, r15
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	a0 e0       	ldi	r26, 0x00	; 0
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	82 2b       	or	r24, r18
     aee:	93 2b       	or	r25, r19
     af0:	a4 2b       	or	r26, r20
     af2:	b5 2b       	or	r27, r21
	int_val = ((int_val<<4) | iv8);
     af4:	14 e0       	ldi	r17, 0x04	; 4
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	aa 1f       	adc	r26, r26
     afc:	bb 1f       	adc	r27, r27
     afe:	1a 95       	dec	r17
     b00:	d1 f7       	brne	.-12     	; 0xaf6 <retConv_s32+0x186>
     b02:	2e 2f       	mov	r18, r30
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	28 2b       	or	r18, r24
     b0c:	39 2b       	or	r19, r25
     b0e:	4a 2b       	or	r20, r26
     b10:	5b 2b       	or	r21, r27
	return int_val;
}
     b12:	b9 01       	movw	r22, r18
     b14:	ca 01       	movw	r24, r20
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	08 95       	ret

00000b1e <wheel_L>:
	{
	return 739.38*pow(value,-.8105);
	}
//***FROM THE SoR LIBRARIES

void wheel_L(signed int cmd_vel){
     b1e:	9c 01       	movw	r18, r24
		if(cmd_vel > 36){cmd_vel = 36;}
     b20:	85 32       	cpi	r24, 0x25	; 37
     b22:	91 05       	cpc	r25, r1
     b24:	1c f0       	brlt	.+6      	; 0xb2c <wheel_L+0xe>
     b26:	24 e2       	ldi	r18, 0x24	; 36
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	06 c0       	rjmp	.+12     	; 0xb38 <wheel_L+0x1a>
		if(cmd_vel < -36){cmd_vel = -36;}
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	2c 3d       	cpi	r18, 0xDC	; 220
     b30:	38 07       	cpc	r19, r24
     b32:	14 f4       	brge	.+4      	; 0xb38 <wheel_L+0x1a>
     b34:	2c ed       	ldi	r18, 0xDC	; 220
     b36:	3f ef       	ldi	r19, 0xFF	; 255
		rprintf("*** PWM: ");
		rprintfFloat(10, s_out);
		rprintf(" | %d ", (int)s_out); 
		rprintf(" ***LLL\n");
		*/
		taskENTER_CRITICAL();
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	0f 92       	push	r0
		PWM_timer3_Set_E4((int)s_out);
     b3e:	b9 01       	movw	r22, r18
     b40:	88 27       	eor	r24, r24
     b42:	77 fd       	sbrc	r23, 7
     b44:	80 95       	com	r24
     b46:	98 2f       	mov	r25, r24
     b48:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
     b4c:	28 e4       	ldi	r18, 0x48	; 72
     b4e:	30 e5       	ldi	r19, 0x50	; 80
     b50:	4c ef       	ldi	r20, 0xFC	; 252
     b52:	5e eb       	ldi	r21, 0xBE	; 190
     b54:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
     b58:	2f e1       	ldi	r18, 0x1F	; 31
     b5a:	35 e4       	ldi	r19, 0x45	; 69
     b5c:	49 e3       	ldi	r20, 0x39	; 57
     b5e:	53 e4       	ldi	r21, 0x43	; 67
     b60:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
     b64:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
     b68:	70 93 9b 00 	sts	0x009B, r23
     b6c:	60 93 9a 00 	sts	0x009A, r22
		taskEXIT_CRITICAL();
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63


}
     b74:	08 95       	ret

00000b76 <wheel_R>:

void wheel_R(signed int cmd_vel){
     b76:	9c 01       	movw	r18, r24
		if(cmd_vel > 36){cmd_vel = 36;}
     b78:	85 32       	cpi	r24, 0x25	; 37
     b7a:	91 05       	cpc	r25, r1
     b7c:	1c f0       	brlt	.+6      	; 0xb84 <wheel_R+0xe>
     b7e:	24 e2       	ldi	r18, 0x24	; 36
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	06 c0       	rjmp	.+12     	; 0xb90 <wheel_R+0x1a>
		if(cmd_vel < -36){cmd_vel = -36;}
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	2c 3d       	cpi	r18, 0xDC	; 220
     b88:	38 07       	cpc	r19, r24
     b8a:	14 f4       	brge	.+4      	; 0xb90 <wheel_R+0x1a>
     b8c:	2c ed       	ldi	r18, 0xDC	; 220
     b8e:	3f ef       	ldi	r19, 0xFF	; 255
		rprintf("*** PWM: ");
		rprintfFloat(10, s_out);
		rprintf(" | %d ", (int)s_out); 
		rprintf(" ***RRR\n");
		*/
		taskENTER_CRITICAL();
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	0f 92       	push	r0
		PWM_timer3_Set_E3((int)s_out);
     b96:	b9 01       	movw	r22, r18
     b98:	88 27       	eor	r24, r24
     b9a:	77 fd       	sbrc	r23, 7
     b9c:	80 95       	com	r24
     b9e:	98 2f       	mov	r25, r24
     ba0:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
     ba4:	21 e1       	ldi	r18, 0x11	; 17
     ba6:	37 ec       	ldi	r19, 0xC7	; 199
     ba8:	4a e0       	ldi	r20, 0x0A	; 10
     baa:	5f eb       	ldi	r21, 0xBF	; 191
     bac:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
     bb0:	26 ef       	ldi	r18, 0xF6	; 246
     bb2:	38 e6       	ldi	r19, 0x68	; 104
     bb4:	4c e3       	ldi	r20, 0x3C	; 60
     bb6:	53 e4       	ldi	r21, 0x43	; 67
     bb8:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
     bbc:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
     bc0:	70 93 99 00 	sts	0x0099, r23
     bc4:	60 93 98 00 	sts	0x0098, r22
		taskEXIT_CRITICAL();
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63


}
     bcc:	08 95       	ret

00000bce <num2char>:


}
*/

char num2char(char c){
     bce:	98 2f       	mov	r25, r24
	
	if(c <10){
     bd0:	8a 30       	cpi	r24, 0x0A	; 10
     bd2:	10 f4       	brcc	.+4      	; 0xbd8 <num2char+0xa>
		c += 48;
     bd4:	90 5d       	subi	r25, 0xD0	; 208
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <num2char+0x12>
	}
	else if((c >= 10) && (c <= 16)){
     bd8:	8a 50       	subi	r24, 0x0A	; 10
     bda:	87 30       	cpi	r24, 0x07	; 7
     bdc:	08 f4       	brcc	.+2      	; 0xbe0 <num2char+0x12>
		c += 55;
     bde:	99 5c       	subi	r25, 0xC9	; 201
	}
	return c;
}
     be0:	89 2f       	mov	r24, r25
     be2:	08 95       	ret

00000be4 <fwdSer_L>:
		
			//taskYIELD();
	//	}
		
}
void fwdSer_L(unsigned char c){
     be4:	98 2f       	mov	r25, r24
	static char v_flag;
	static char d_flag;
	static char vel_rough[4];  //store ascii chars
	static char dis_rough[8];  //store ascii chars
		//rprintf("%c",c);
		if(c != 0xff){
     be6:	8f 3f       	cpi	r24, 0xFF	; 255
     be8:	09 f4       	brne	.+2      	; 0xbec <fwdSer_L+0x8>
     bea:	79 c0       	rjmp	.+242    	; 0xcde <fwdSer_L+0xfa>
		//if the data isn't whitespace (0xff), post it
		//	rprintf("%c",c);

			if(c == 0x0A){lf_flag = SET;} //line feed detected, the character will be a 'D' or a 'V'
     bec:	8a 30       	cpi	r24, 0x0A	; 10
     bee:	21 f4       	brne	.+8      	; 0xbf8 <fwdSer_L+0x14>
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	80 93 21 03 	sts	0x0321, r24
     bf6:	33 c0       	rjmp	.+102    	; 0xc5e <fwdSer_L+0x7a>
	
			else if((lf_flag) && (c == 'V')){ //set velocity flag
     bf8:	80 91 21 03 	lds	r24, 0x0321
     bfc:	88 23       	and	r24, r24
     bfe:	91 f0       	breq	.+36     	; 0xc24 <fwdSer_L+0x40>
     c00:	96 35       	cpi	r25, 0x56	; 86
     c02:	31 f4       	brne	.+12     	; 0xc10 <fwdSer_L+0x2c>
				v_flag = SET;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 1e 03 	sts	0x031E, r24
				v_iter = 0;
     c0a:	10 92 20 03 	sts	0x0320, r1
     c0e:	07 c0       	rjmp	.+14     	; 0xc1e <fwdSer_L+0x3a>
				lf_flag = UNSET;
				return;
			} 
			else if((lf_flag) && (c == 'D')){ //set distance flag
     c10:	94 34       	cpi	r25, 0x44	; 68
     c12:	41 f4       	brne	.+16     	; 0xc24 <fwdSer_L+0x40>
				d_flag = SET;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 1d 03 	sts	0x031D, r24
				d_iter = 0;
     c1a:	10 92 1f 03 	sts	0x031F, r1
				lf_flag = UNSET;
     c1e:	10 92 21 03 	sts	0x0321, r1
     c22:	08 95       	ret
			//	rprintf("%c",c);
				return;
			}
			else if(v_flag){
     c24:	80 91 1e 03 	lds	r24, 0x031E
     c28:	88 23       	and	r24, r24
     c2a:	59 f0       	breq	.+22     	; 0xc42 <fwdSer_L+0x5e>
				vel_rough[v_iter++] = c;	//store then increment	
     c2c:	80 91 20 03 	lds	r24, 0x0320
     c30:	e8 2f       	mov	r30, r24
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	e7 5e       	subi	r30, 0xE7	; 231
     c36:	fc 4f       	sbci	r31, 0xFC	; 252
     c38:	90 83       	st	Z, r25
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	80 93 20 03 	sts	0x0320, r24
     c40:	0e c0       	rjmp	.+28     	; 0xc5e <fwdSer_L+0x7a>
				//rprintf("%c",c);
			}	
			else if(d_flag){
     c42:	80 91 1d 03 	lds	r24, 0x031D
     c46:	88 23       	and	r24, r24
     c48:	51 f0       	breq	.+20     	; 0xc5e <fwdSer_L+0x7a>
				dis_rough[d_iter++] = c;	//store then increment	
     c4a:	80 91 1f 03 	lds	r24, 0x031F
     c4e:	e8 2f       	mov	r30, r24
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	ef 5e       	subi	r30, 0xEF	; 239
     c54:	fc 4f       	sbci	r31, 0xFC	; 252
     c56:	90 83       	st	Z, r25
     c58:	8f 5f       	subi	r24, 0xFF	; 255
     c5a:	80 93 1f 03 	sts	0x031F, r24
			//	rprintf("%c",c);
			}

			if(v_iter == 4){
     c5e:	80 91 20 03 	lds	r24, 0x0320
     c62:	84 30       	cpi	r24, 0x04	; 4
     c64:	e9 f4       	brne	.+58     	; 0xca0 <fwdSer_L+0xbc>
				LEFTVel_current = CM_TICK * retConv_s16(&vel_rough);
     c66:	89 e1       	ldi	r24, 0x19	; 25
     c68:	93 e0       	ldi	r25, 0x03	; 3
     c6a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <retConv_s16>
     c6e:	aa 27       	eor	r26, r26
     c70:	97 fd       	sbrc	r25, 7
     c72:	a0 95       	com	r26
     c74:	ba 2f       	mov	r27, r26
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	40 e8       	ldi	r20, 0x80	; 128
     c84:	5e e3       	ldi	r21, 0x3E	; 62
     c86:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
     c8a:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
     c8e:	70 93 e3 02 	sts	0x02E3, r23
     c92:	60 93 e2 02 	sts	0x02E2, r22
				v_flag = UNSET;
     c96:	10 92 1e 03 	sts	0x031E, r1
				v_iter = 0;
     c9a:	10 92 20 03 	sts	0x0320, r1
     c9e:	08 95       	ret
			//	rprintf("RRR VVV: ");
			//	rprintfu16(RIGHTVel_current);
			//	rprintf("\n");
			}
			else if(d_iter == 8){
     ca0:	80 91 1f 03 	lds	r24, 0x031F
     ca4:	88 30       	cpi	r24, 0x08	; 8
     ca6:	51 f5       	brne	.+84     	; 0xcfc <fwdSer_L+0x118>
				LEFTDis_current = CM_TICK * retConv_s32(&dis_rough);
     ca8:	81 e1       	ldi	r24, 0x11	; 17
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	0e 94 b8 04 	call	0x970	; 0x970 <retConv_s32>
     cb0:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e8       	ldi	r20, 0x80	; 128
     cba:	5e e3       	ldi	r21, 0x3E	; 62
     cbc:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
     cc0:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
     cc4:	60 93 e4 02 	sts	0x02E4, r22
     cc8:	70 93 e5 02 	sts	0x02E5, r23
     ccc:	80 93 e6 02 	sts	0x02E6, r24
     cd0:	90 93 e7 02 	sts	0x02E7, r25
			//	rprintf("dL: %d\n",dLEFTDis);
				d_flag = UNSET;
     cd4:	10 92 1d 03 	sts	0x031D, r1
				d_iter = 0;
     cd8:	10 92 1f 03 	sts	0x031F, r1
     cdc:	08 95       	ret
			//	rprintf("\n");
			}
		
		}

		else{rprintf("WR\n");}
     cde:	00 d0       	rcall	.+0      	; 0xce0 <fwdSer_L+0xfc>
     ce0:	0f 92       	push	r0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	ed b7       	in	r30, 0x3d	; 61
     ce6:	fe b7       	in	r31, 0x3e	; 62
     ce8:	81 83       	std	Z+1, r24	; 0x01
     cea:	86 ea       	ldi	r24, 0xA6	; 166
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	93 83       	std	Z+3, r25	; 0x03
     cf0:	82 83       	std	Z+2, r24	; 0x02
     cf2:	0e 94 a1 29 	call	0x5342	; 0x5342 <rprintf1RamRom>
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	08 95       	ret

00000cfe <fwdSer_R>:
	int_val = ((int_val<<4) | iv8);
	return int_val;
}


void fwdSer_R(unsigned char c){
     cfe:	98 2f       	mov	r25, r24
	static char v_flag;
	static char d_flag;
	static char vel_rough[4];  //store ascii chars
	static char dis_rough[8];  //store ascii chars
		//rprintf("%c",c);
		if(c != 0xff){
     d00:	8f 3f       	cpi	r24, 0xFF	; 255
     d02:	09 f4       	brne	.+2      	; 0xd06 <fwdSer_R+0x8>
     d04:	79 c0       	rjmp	.+242    	; 0xdf8 <fwdSer_R+0xfa>
		//if the data isn't whitespace (0xff), post it
		//	rprintf("%c",c);

			if(c == 0x0A){lf_flag = SET;} //line feed detected, the character will be a 'D' or a 'V'
     d06:	8a 30       	cpi	r24, 0x0A	; 10
     d08:	21 f4       	brne	.+8      	; 0xd12 <fwdSer_R+0x14>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	80 93 32 03 	sts	0x0332, r24
     d10:	33 c0       	rjmp	.+102    	; 0xd78 <fwdSer_R+0x7a>
	
			else if((lf_flag) && (c == 'V')){ //set velocity flag
     d12:	80 91 32 03 	lds	r24, 0x0332
     d16:	88 23       	and	r24, r24
     d18:	91 f0       	breq	.+36     	; 0xd3e <fwdSer_R+0x40>
     d1a:	96 35       	cpi	r25, 0x56	; 86
     d1c:	31 f4       	brne	.+12     	; 0xd2a <fwdSer_R+0x2c>
				v_flag = SET;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	80 93 2f 03 	sts	0x032F, r24
				v_iter = 0;
     d24:	10 92 31 03 	sts	0x0331, r1
     d28:	07 c0       	rjmp	.+14     	; 0xd38 <fwdSer_R+0x3a>
				lf_flag = UNSET;
				return;
			} 
			else if((lf_flag) && (c == 'D')){ //set distance flag
     d2a:	94 34       	cpi	r25, 0x44	; 68
     d2c:	41 f4       	brne	.+16     	; 0xd3e <fwdSer_R+0x40>
				d_flag = SET;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 2e 03 	sts	0x032E, r24
				d_iter = 0;
     d34:	10 92 30 03 	sts	0x0330, r1
				lf_flag = UNSET;
     d38:	10 92 32 03 	sts	0x0332, r1
     d3c:	08 95       	ret
			//	rprintf("%c",c);
				return;
			}
			else if(v_flag){
     d3e:	80 91 2f 03 	lds	r24, 0x032F
     d42:	88 23       	and	r24, r24
     d44:	59 f0       	breq	.+22     	; 0xd5c <fwdSer_R+0x5e>
				vel_rough[v_iter++] = c;	//store then increment	
     d46:	80 91 31 03 	lds	r24, 0x0331
     d4a:	e8 2f       	mov	r30, r24
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	e6 5d       	subi	r30, 0xD6	; 214
     d50:	fc 4f       	sbci	r31, 0xFC	; 252
     d52:	90 83       	st	Z, r25
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	80 93 31 03 	sts	0x0331, r24
     d5a:	0e c0       	rjmp	.+28     	; 0xd78 <fwdSer_R+0x7a>
				//rprintf("%c",c);
			}	
			else if(d_flag){
     d5c:	80 91 2e 03 	lds	r24, 0x032E
     d60:	88 23       	and	r24, r24
     d62:	51 f0       	breq	.+20     	; 0xd78 <fwdSer_R+0x7a>
				dis_rough[d_iter++] = c;	//store then increment	
     d64:	80 91 30 03 	lds	r24, 0x0330
     d68:	e8 2f       	mov	r30, r24
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	ee 5d       	subi	r30, 0xDE	; 222
     d6e:	fc 4f       	sbci	r31, 0xFC	; 252
     d70:	90 83       	st	Z, r25
     d72:	8f 5f       	subi	r24, 0xFF	; 255
     d74:	80 93 30 03 	sts	0x0330, r24
			//	rprintf("%c",c);
			}

			if(v_iter == 4){
     d78:	80 91 31 03 	lds	r24, 0x0331
     d7c:	84 30       	cpi	r24, 0x04	; 4
     d7e:	e9 f4       	brne	.+58     	; 0xdba <fwdSer_R+0xbc>
				RIGHTVel_current = CM_TICK * retConv_s16(&vel_rough);
     d80:	8a e2       	ldi	r24, 0x2A	; 42
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	0e 94 69 04 	call	0x8d2	; 0x8d2 <retConv_s16>
     d88:	aa 27       	eor	r26, r26
     d8a:	97 fd       	sbrc	r25, 7
     d8c:	a0 95       	com	r26
     d8e:	ba 2f       	mov	r27, r26
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e8       	ldi	r20, 0x80	; 128
     d9e:	5e e3       	ldi	r21, 0x3E	; 62
     da0:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
     da4:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
     da8:	70 93 ef 02 	sts	0x02EF, r23
     dac:	60 93 ee 02 	sts	0x02EE, r22
				v_flag = UNSET;
     db0:	10 92 2f 03 	sts	0x032F, r1
				v_iter = 0;
     db4:	10 92 31 03 	sts	0x0331, r1
     db8:	08 95       	ret
			//	rprintf("RRR VVV: ");
			//	rprintfu16(RIGHTVel_current);
			//	rprintf("\n");
			}
			else if(d_iter == 8){
     dba:	80 91 30 03 	lds	r24, 0x0330
     dbe:	88 30       	cpi	r24, 0x08	; 8
     dc0:	51 f5       	brne	.+84     	; 0xe16 <fwdSer_R+0x118>
				RIGHTDis_current = CM_TICK * retConv_s32(&dis_rough);
     dc2:	82 e2       	ldi	r24, 0x22	; 34
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	0e 94 b8 04 	call	0x970	; 0x970 <retConv_s32>
     dca:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	5e e3       	ldi	r21, 0x3E	; 62
     dd6:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
     dda:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
     dde:	60 93 f0 02 	sts	0x02F0, r22
     de2:	70 93 f1 02 	sts	0x02F1, r23
     de6:	80 93 f2 02 	sts	0x02F2, r24
     dea:	90 93 f3 02 	sts	0x02F3, r25
				//rprintf("dR: %d\n",dRIGHTDis);
				d_flag = UNSET;
     dee:	10 92 2e 03 	sts	0x032E, r1
				d_iter = 0;
     df2:	10 92 30 03 	sts	0x0330, r1
     df6:	08 95       	ret
				//rprintf("\n");
			}
		
		}

		else{rprintf("WR\n");}
     df8:	00 d0       	rcall	.+0      	; 0xdfa <fwdSer_R+0xfc>
     dfa:	0f 92       	push	r0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	ed b7       	in	r30, 0x3d	; 61
     e00:	fe b7       	in	r31, 0x3e	; 62
     e02:	81 83       	std	Z+1, r24	; 0x01
     e04:	8a ea       	ldi	r24, 0xAA	; 170
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	93 83       	std	Z+3, r25	; 0x03
     e0a:	82 83       	std	Z+2, r24	; 0x02
     e0c:	0e 94 a1 29 	call	0x5342	; 0x5342 <rprintf1RamRom>
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	08 95       	ret

00000e18 <vScript>:
		
	}

}

void vScript(){
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <vScript+0xe>
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
	const portTickType xTicksToWait = 10000 / portTICK_RATE_MS;
	portTickType xLastWakeTime;

	for(;;){
		cmd_angle = 0;
		vTaskDelayUntil(&xLastWakeTime, xTicksToWait);
     e2a:	8e 01       	movw	r16, r28
     e2c:	0f 5f       	subi	r16, 0xFF	; 255
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
		cmd_angle = 90;
     e30:	aa e5       	ldi	r26, 0x5A	; 90
     e32:	ea 2e       	mov	r14, r26
     e34:	f1 2c       	mov	r15, r1
void vScript(){
	const portTickType xTicksToWait = 10000 / portTICK_RATE_MS;
	portTickType xLastWakeTime;

	for(;;){
		cmd_angle = 0;
     e36:	10 92 ff 02 	sts	0x02FF, r1
     e3a:	10 92 fe 02 	sts	0x02FE, r1
		vTaskDelayUntil(&xLastWakeTime, xTicksToWait);
     e3e:	c8 01       	movw	r24, r16
     e40:	60 e1       	ldi	r22, 0x10	; 16
     e42:	77 e2       	ldi	r23, 0x27	; 39
     e44:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>
		cmd_angle = 90;
     e48:	f0 92 ff 02 	sts	0x02FF, r15
     e4c:	e0 92 fe 02 	sts	0x02FE, r14
		vTaskDelayUntil(&xLastWakeTime, xTicksToWait);
     e50:	c8 01       	movw	r24, r16
     e52:	60 e1       	ldi	r22, 0x10	; 16
     e54:	77 e2       	ldi	r23, 0x27	; 39
     e56:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>
     e5a:	ed cf       	rjmp	.-38     	; 0xe36 <vScript+0x1e>

00000e5c <vRampVel>:
	uart3SendByte(r2);
	uart3SendByte(r1);
	uart3SendByte('\n'); //line feed
}

void vRampVel(){
     e5c:	8f 92       	push	r8
     e5e:	9f 92       	push	r9
     e60:	af 92       	push	r10
     e62:	bf 92       	push	r11
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	00 d0       	rcall	.+0      	; 0xe76 <vRampVel+0x1a>
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	const portTickType xTicksToWait = 1000 / portTICK_RATE_MS;
	portTickType xLastWakeTime;
	v_command = 0;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	80 93 d8 02 	sts	0x02D8, r24
     e86:	90 93 d9 02 	sts	0x02D9, r25
     e8a:	a0 93 da 02 	sts	0x02DA, r26
     e8e:	b0 93 db 02 	sts	0x02DB, r27
	inst_cmd_vel = 25;
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a8 ec       	ldi	r26, 0xC8	; 200
     e98:	b1 e4       	ldi	r27, 0x41	; 65
     e9a:	80 93 dc 02 	sts	0x02DC, r24
     e9e:	90 93 dd 02 	sts	0x02DD, r25
     ea2:	a0 93 de 02 	sts	0x02DE, r26
     ea6:	b0 93 df 02 	sts	0x02DF, r27
	vTaskDelayUntil(&xLastWakeTime, 10000 / portTICK_RATE_MS);	//leave velocity at zero briefly
     eaa:	8e 01       	movw	r16, r28
     eac:	0f 5f       	subi	r16, 0xFF	; 255
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
     eb0:	c8 01       	movw	r24, r16
     eb2:	60 e1       	ldi	r22, 0x10	; 16
     eb4:	77 e2       	ldi	r23, 0x27	; 39
     eb6:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>

	for(;;){
		
		vTaskDelayUntil(&xLastWakeTime, xTicksToWait);
     eba:	48 01       	movw	r8, r16
     ebc:	c4 01       	movw	r24, r8
     ebe:	68 ee       	ldi	r22, 0xE8	; 232
     ec0:	73 e0       	ldi	r23, 0x03	; 3
     ec2:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>
		//if(v_command != inst_cmd_vel){v_command++;}
		v_command += (1/(inst_cmd_vel - v_command))*(inst_cmd_vel);
     ec6:	e0 90 dc 02 	lds	r14, 0x02DC
     eca:	f0 90 dd 02 	lds	r15, 0x02DD
     ece:	00 91 de 02 	lds	r16, 0x02DE
     ed2:	10 91 df 02 	lds	r17, 0x02DF
     ed6:	a0 90 d8 02 	lds	r10, 0x02D8
     eda:	b0 90 d9 02 	lds	r11, 0x02D9
     ede:	c0 90 da 02 	lds	r12, 0x02DA
     ee2:	d0 90 db 02 	lds	r13, 0x02DB
     ee6:	c8 01       	movw	r24, r16
     ee8:	b7 01       	movw	r22, r14
     eea:	a6 01       	movw	r20, r12
     eec:	95 01       	movw	r18, r10
     eee:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
     ef2:	9b 01       	movw	r18, r22
     ef4:	ac 01       	movw	r20, r24
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	80 e8       	ldi	r24, 0x80	; 128
     efc:	9f e3       	ldi	r25, 0x3F	; 63
     efe:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
     f02:	a8 01       	movw	r20, r16
     f04:	97 01       	movw	r18, r14
     f06:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
     f0a:	9b 01       	movw	r18, r22
     f0c:	ac 01       	movw	r20, r24
     f0e:	c6 01       	movw	r24, r12
     f10:	b5 01       	movw	r22, r10
     f12:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
     f16:	60 93 d8 02 	sts	0x02D8, r22
     f1a:	70 93 d9 02 	sts	0x02D9, r23
     f1e:	80 93 da 02 	sts	0x02DA, r24
     f22:	90 93 db 02 	sts	0x02DB, r25

		if(v_command > 25){v_command = 25;}
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	48 ec       	ldi	r20, 0xC8	; 200
     f2c:	51 e4       	ldi	r21, 0x41	; 65
     f2e:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__gesf2>
     f32:	18 16       	cp	r1, r24
     f34:	64 f4       	brge	.+24     	; 0xf4e <vRampVel+0xf2>
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a8 ec       	ldi	r26, 0xC8	; 200
     f3c:	b1 e4       	ldi	r27, 0x41	; 65
     f3e:	80 93 d8 02 	sts	0x02D8, r24
     f42:	90 93 d9 02 	sts	0x02D9, r25
     f46:	a0 93 da 02 	sts	0x02DA, r26
     f4a:	b0 93 db 02 	sts	0x02DB, r27
		if(v_command <  0){v_command =  0;}
     f4e:	60 91 d8 02 	lds	r22, 0x02D8
     f52:	70 91 d9 02 	lds	r23, 0x02D9
     f56:	80 91 da 02 	lds	r24, 0x02DA
     f5a:	90 91 db 02 	lds	r25, 0x02DB
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	0c f0       	brlt	.+2      	; 0xf70 <vRampVel+0x114>
     f6e:	a6 cf       	rjmp	.-180    	; 0xebc <vRampVel+0x60>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	80 93 d8 02 	sts	0x02D8, r24
     f7c:	90 93 d9 02 	sts	0x02D9, r25
     f80:	a0 93 da 02 	sts	0x02DA, r26
     f84:	b0 93 db 02 	sts	0x02DB, r27
     f88:	99 cf       	rjmp	.-206    	; 0xebc <vRampVel+0x60>

00000f8a <vLight1On>:
		PORT_OFF(PORTA, 0);
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
		
	}
}
void vLight1On(void *pvParameters){
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <vLight1On+0xa>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	portTickType xLastWakeTime;
	for(;;){
		LED_on();
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
     f98:	8e 01       	movw	r16, r28
     f9a:	0f 5f       	subi	r16, 0xFF	; 255
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     f9e:	2e 98       	cbi	0x05, 6	; 5
     fa0:	c8 01       	movw	r24, r16
     fa2:	62 e3       	ldi	r22, 0x32	; 50
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     faa:	2e 9a       	sbi	0x05, 6	; 5
		LED_off();
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));	}
     fac:	c8 01       	movw	r24, r16
     fae:	62 e3       	ldi	r22, 0x32	; 50
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>
     fb6:	f3 cf       	rjmp	.-26     	; 0xf9e <vLight1On+0x14>

00000fb8 <vLight0On>:
	}
}



void vLight0On(void *pvParameters){
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <vLight0On+0xa>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
	portTickType xLastWakeTime;
	for(;;){
		PORT_ON(PORTA, 0);
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
     fc6:	8e 01       	movw	r16, r28
     fc8:	0f 5f       	subi	r16, 0xFF	; 255
     fca:	1f 4f       	sbci	r17, 0xFF	; 255


void vLight0On(void *pvParameters){
	portTickType xLastWakeTime;
	for(;;){
		PORT_ON(PORTA, 0);
     fcc:	10 9a       	sbi	0x02, 0	; 2
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
     fce:	c8 01       	movw	r24, r16
     fd0:	62 e3       	ldi	r22, 0x32	; 50
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>
		//taskYIELD();	
		PORT_OFF(PORTA, 0);
     fd8:	10 98       	cbi	0x02, 0	; 2
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
     fda:	c8 01       	movw	r24, r16
     fdc:	62 e3       	ldi	r22, 0x32	; 50
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>
     fe4:	f3 cf       	rjmp	.-26     	; 0xfcc <vLight0On+0x14>

00000fe6 <vPID_R>:
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
	}

}

void vPID_R(void* pvParameters){
     fe6:	6f 92       	push	r6
     fe8:	7f 92       	push	r7
     fea:	8f 92       	push	r8
     fec:	9f 92       	push	r9
     fee:	af 92       	push	r10
     ff0:	bf 92       	push	r11
     ff2:	cf 92       	push	r12
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <vPID_R+0x1e>
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR2A,COM2B1);
	cbi(TCCR2A,COM2B0);
}
void PWM_timer3_On_E3(void)
{
	sbi(TCCR3A,COM3A1);
    1008:	80 91 90 00 	lds	r24, 0x0090
    100c:	80 68       	ori	r24, 0x80	; 128
    100e:	80 93 90 00 	sts	0x0090, r24
	cbi(TCCR3A,COM3A0);
    1012:	80 91 90 00 	lds	r24, 0x0090
    1016:	8f 7b       	andi	r24, 0xBF	; 191
    1018:	80 93 90 00 	sts	0x0090, r24
    101c:	88 24       	eor	r8, r8
    101e:	99 24       	eor	r9, r9
	//		if(adj == 'p'){ KD+= 0.01;}
	//		else if(adj == 'l'){ KD -= 0.01;}
			


		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
    1020:	3e 01       	movw	r6, r28
    1022:	08 94       	sec
    1024:	61 1c       	adc	r6, r1
    1026:	71 1c       	adc	r7, r1
	wheel_R_on();

	char adj;
	for(;;){
			
			signed int v_out = v_command - v_offset;
    1028:	e0 90 d8 02 	lds	r14, 0x02D8
    102c:	f0 90 d9 02 	lds	r15, 0x02D9
    1030:	00 91 da 02 	lds	r16, 0x02DA
    1034:	10 91 db 02 	lds	r17, 0x02DB
    1038:	60 91 e0 02 	lds	r22, 0x02E0
    103c:	70 91 e1 02 	lds	r23, 0x02E1
    1040:	88 27       	eor	r24, r24
    1042:	77 fd       	sbrc	r23, 7
    1044:	80 95       	com	r24
    1046:	98 2f       	mov	r25, r24
    1048:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    104c:	9b 01       	movw	r18, r22
    104e:	ac 01       	movw	r20, r24
    1050:	c8 01       	movw	r24, r16
    1052:	b7 01       	movw	r22, r14
    1054:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    1058:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
    105c:	5b 01       	movw	r10, r22
    105e:	6c 01       	movw	r12, r24
			error = v_command - (-RIGHTVel_current);
    1060:	60 91 ee 02 	lds	r22, 0x02EE
    1064:	70 91 ef 02 	lds	r23, 0x02EF
    1068:	70 95       	com	r23
    106a:	61 95       	neg	r22
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	88 27       	eor	r24, r24
    1070:	77 fd       	sbrc	r23, 7
    1072:	80 95       	com	r24
    1074:	98 2f       	mov	r25, r24
    1076:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    107a:	9b 01       	movw	r18, r22
    107c:	ac 01       	movw	r20, r24
    107e:	c8 01       	movw	r24, r16
    1080:	b7 01       	movw	r22, r14
    1082:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    1086:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
    108a:	6b 01       	movw	r12, r22
	//		d_error = (error - pre_error)/dt;
	//		wD = 1 - (d_error)/(d_error + cD);
	//		d_error *= wD; 
			v_out += (signed int)((KP * error) + (KI * acc_error));
    108c:	b6 01       	movw	r22, r12
    108e:	88 27       	eor	r24, r24
    1090:	77 fd       	sbrc	r23, 7
    1092:	80 95       	com	r24
    1094:	98 2f       	mov	r25, r24
    1096:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e8       	ldi	r20, 0x80	; 128
    10a0:	5e e3       	ldi	r21, 0x3E	; 62
    10a2:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    10a6:	7b 01       	movw	r14, r22
    10a8:	8c 01       	movw	r16, r24
    10aa:	b4 01       	movw	r22, r8
    10ac:	88 27       	eor	r24, r24
    10ae:	77 fd       	sbrc	r23, 7
    10b0:	80 95       	com	r24
    10b2:	98 2f       	mov	r25, r24
    10b4:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	5e e3       	ldi	r21, 0x3E	; 62
    10c0:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    10c4:	9b 01       	movw	r18, r22
    10c6:	ac 01       	movw	r20, r24
    10c8:	c8 01       	movw	r24, r16
    10ca:	b7 01       	movw	r22, r14
    10cc:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    10d0:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
    10d4:	6a 0d       	add	r22, r10
    10d6:	7b 1d       	adc	r23, r11
	//		pre_error = error;
			if(v_out > 36){v_out = 36;}
    10d8:	65 32       	cpi	r22, 0x25	; 37
    10da:	71 05       	cpc	r23, r1
    10dc:	1c f0       	brlt	.+6      	; 0x10e4 <vPID_R+0xfe>
    10de:	64 e2       	ldi	r22, 0x24	; 36
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	06 c0       	rjmp	.+12     	; 0x10f0 <vPID_R+0x10a>
			if(v_out < -36){v_out = -36;}
    10e4:	8f ef       	ldi	r24, 0xFF	; 255
    10e6:	6c 3d       	cpi	r22, 0xDC	; 220
    10e8:	78 07       	cpc	r23, r24
    10ea:	14 f4       	brge	.+4      	; 0x10f0 <vPID_R+0x10a>
    10ec:	6c ed       	ldi	r22, 0xDC	; 220
    10ee:	7f ef       	ldi	r23, 0xFF	; 255
			taskENTER_CRITICAL();
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	0f 92       	push	r0
			wheel_R(-v_out);
    10f6:	88 27       	eor	r24, r24
    10f8:	99 27       	eor	r25, r25
    10fa:	86 1b       	sub	r24, r22
    10fc:	97 0b       	sbc	r25, r23
    10fe:	0e 94 bb 05 	call	0xb76	; 0xb76 <wheel_R>
			
		
		//rprintfNum(10, 5, 0, ' ', s_out);
//		rprintf("RRR: %d , %d\n",v_out,RIGHTVel_current);
	//	rprintf("%d\n", -RIGHTVel_current);
			taskEXIT_CRITICAL();
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63

			acc_error += error;
    1106:	8c 0c       	add	r8, r12
    1108:	9d 1c       	adc	r9, r13
	//		if(adj == 'p'){ KD+= 0.01;}
	//		else if(adj == 'l'){ KD -= 0.01;}
			


		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
    110a:	c3 01       	movw	r24, r6
    110c:	62 e3       	ldi	r22, 0x32	; 50
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>
    1114:	89 cf       	rjmp	.-238    	; 0x1028 <vPID_R+0x42>

00001116 <vPID_L>:
		taskEXIT_CRITICAL();


}

void vPID_L(void* pvParameters){
    1116:	4f 92       	push	r4
    1118:	5f 92       	push	r5
    111a:	6f 92       	push	r6
    111c:	7f 92       	push	r7
    111e:	8f 92       	push	r8
    1120:	9f 92       	push	r9
    1122:	af 92       	push	r10
    1124:	bf 92       	push	r11
    1126:	cf 92       	push	r12
    1128:	df 92       	push	r13
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <vPID_L+0x22>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
}
void PWM_timer3_On_E4(void)
{
	sbi(TCCR3A,COM3B1);
    113c:	80 91 90 00 	lds	r24, 0x0090
    1140:	80 62       	ori	r24, 0x20	; 32
    1142:	80 93 90 00 	sts	0x0090, r24
	cbi(TCCR3A,COM3B0);
    1146:	80 91 90 00 	lds	r24, 0x0090
    114a:	8f 7e       	andi	r24, 0xEF	; 239
    114c:	80 93 90 00 	sts	0x0090, r24
    1150:	66 24       	eor	r6, r6
    1152:	77 24       	eor	r7, r7

		
			//rprintfNum(10, 5, 0, ' ', s_out);
//			rprintf("LLL: %d , %d\n",v_out,LEFTVel_current);
			taskEXIT_CRITICAL();
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
    1154:	2e 01       	movw	r4, r28
    1156:	08 94       	sec
    1158:	41 1c       	adc	r4, r1
    115a:	51 1c       	adc	r5, r1
	

	wheel_L_on();

	for(;;){
			signed int v_out = v_command + v_offset;
    115c:	60 91 e0 02 	lds	r22, 0x02E0
    1160:	70 91 e1 02 	lds	r23, 0x02E1
    1164:	88 27       	eor	r24, r24
    1166:	77 fd       	sbrc	r23, 7
    1168:	80 95       	com	r24
    116a:	98 2f       	mov	r25, r24
    116c:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    1170:	20 91 d8 02 	lds	r18, 0x02D8
    1174:	30 91 d9 02 	lds	r19, 0x02D9
    1178:	40 91 da 02 	lds	r20, 0x02DA
    117c:	50 91 db 02 	lds	r21, 0x02DB
    1180:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    1184:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
    1188:	7b 01       	movw	r14, r22
    118a:	8c 01       	movw	r16, r24
			error = v_out - LEFTVel_current;
    118c:	80 91 e2 02 	lds	r24, 0x02E2
    1190:	90 91 e3 02 	lds	r25, 0x02E3
    1194:	47 01       	movw	r8, r14
    1196:	88 1a       	sub	r8, r24
    1198:	99 0a       	sbc	r9, r25
	//		d_error = (error - pre_error);
			
			v_out += (signed int)((KP * error) + (KI * acc_error));
    119a:	b4 01       	movw	r22, r8
    119c:	88 27       	eor	r24, r24
    119e:	77 fd       	sbrc	r23, 7
    11a0:	80 95       	com	r24
    11a2:	98 2f       	mov	r25, r24
    11a4:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e8       	ldi	r20, 0x80	; 128
    11ae:	5e e3       	ldi	r21, 0x3E	; 62
    11b0:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    11b4:	5b 01       	movw	r10, r22
    11b6:	6c 01       	movw	r12, r24
    11b8:	b3 01       	movw	r22, r6
    11ba:	88 27       	eor	r24, r24
    11bc:	77 fd       	sbrc	r23, 7
    11be:	80 95       	com	r24
    11c0:	98 2f       	mov	r25, r24
    11c2:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	5e e3       	ldi	r21, 0x3E	; 62
    11ce:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    11d2:	9b 01       	movw	r18, r22
    11d4:	ac 01       	movw	r20, r24
    11d6:	c6 01       	movw	r24, r12
    11d8:	b5 01       	movw	r22, r10
    11da:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    11de:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
    11e2:	cb 01       	movw	r24, r22
    11e4:	8e 0d       	add	r24, r14
    11e6:	9f 1d       	adc	r25, r15
	//		pre_error = error;
			acc_error += error;
    11e8:	68 0c       	add	r6, r8
    11ea:	79 1c       	adc	r7, r9

			if(v_out > 36){v_out = 36;}
    11ec:	85 32       	cpi	r24, 0x25	; 37
    11ee:	91 05       	cpc	r25, r1
    11f0:	1c f0       	brlt	.+6      	; 0x11f8 <vPID_L+0xe2>
    11f2:	84 e2       	ldi	r24, 0x24	; 36
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <vPID_L+0xee>
			if(v_out < -36){v_out = -36;}
    11f8:	2f ef       	ldi	r18, 0xFF	; 255
    11fa:	8c 3d       	cpi	r24, 0xDC	; 220
    11fc:	92 07       	cpc	r25, r18
    11fe:	14 f4       	brge	.+4      	; 0x1204 <vPID_L+0xee>
    1200:	8c ed       	ldi	r24, 0xDC	; 220
    1202:	9f ef       	ldi	r25, 0xFF	; 255
			taskENTER_CRITICAL();
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	0f 92       	push	r0
			wheel_L(v_out);
    120a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <wheel_L>

		
			//rprintfNum(10, 5, 0, ' ', s_out);
//			rprintf("LLL: %d , %d\n",v_out,LEFTVel_current);
			taskEXIT_CRITICAL();
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
    1212:	c2 01       	movw	r24, r4
    1214:	62 e3       	ldi	r22, 0x32	; 50
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>
    121c:	9f cf       	rjmp	.-194    	; 0x115c <vPID_L+0x46>

0000121e <vEnc_UpdatePose>:
		
	
	}
}

void vEnc_UpdatePose(){
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17

	for(;;){
		
		//The below formula yields the encoder calculated angular velocity of the robot
		//as it rotates about some ICC(Instantaneous Center of Curvature)
		reset_timer0();
    1228:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <reset_timer0>
		enc_ang_vel = ((-RIGHTVel_current) - LEFTVel_current) / ROBOT_DIAMETER;
    122c:	60 91 ee 02 	lds	r22, 0x02EE
    1230:	70 91 ef 02 	lds	r23, 0x02EF
    1234:	70 95       	com	r23
    1236:	61 95       	neg	r22
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	20 91 e2 02 	lds	r18, 0x02E2
    123e:	30 91 e3 02 	lds	r19, 0x02E3
    1242:	62 1b       	sub	r22, r18
    1244:	73 0b       	sbc	r23, r19
    1246:	88 27       	eor	r24, r24
    1248:	77 fd       	sbrc	r23, 7
    124a:	80 95       	com	r24
    124c:	98 2f       	mov	r25, r24
    124e:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    1252:	26 e6       	ldi	r18, 0x66	; 102
    1254:	36 e6       	ldi	r19, 0x66	; 102
    1256:	46 e8       	ldi	r20, 0x86	; 134
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    125e:	7b 01       	movw	r14, r22
    1260:	8c 01       	movw	r16, r24
		elapsed_time = ((get_timer0_overflow()*255 + TCNT0) * 0.256) / 1000;
    1262:	0e 94 76 1b 	call	0x36ec	; 0x36ec <get_timer0_overflow>
    1266:	d6 b4       	in	r13, 0x26	; 38
		//dRL = dRIGHTDis - dLEFTDis;
		//dis_enc_heading += sin((dRL)/ ROBOT_DIAMETER);
		//dRIGHTDis = dLEFTDis = 0;
		enc_heading += enc_ang_vel * elapsed_time;
    1268:	2f ef       	ldi	r18, 0xFF	; 255
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	0e 94 b1 30 	call	0x6162	; 0x6162 <__mulsi3>
    1274:	6d 0d       	add	r22, r13
    1276:	71 1d       	adc	r23, r1
    1278:	81 1d       	adc	r24, r1
    127a:	91 1d       	adc	r25, r1
    127c:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__floatunsisf>
    1280:	2f e6       	ldi	r18, 0x6F	; 111
    1282:	32 e1       	ldi	r19, 0x12	; 18
    1284:	43 e8       	ldi	r20, 0x83	; 131
    1286:	5e e3       	ldi	r21, 0x3E	; 62
    1288:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a e7       	ldi	r20, 0x7A	; 122
    1292:	54 e4       	ldi	r21, 0x44	; 68
    1294:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    1298:	9b 01       	movw	r18, r22
    129a:	ac 01       	movw	r20, r24
    129c:	c8 01       	movw	r24, r16
    129e:	b7 01       	movw	r22, r14
    12a0:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    12a4:	9b 01       	movw	r18, r22
    12a6:	ac 01       	movw	r20, r24
    12a8:	60 91 fa 02 	lds	r22, 0x02FA
    12ac:	70 91 fb 02 	lds	r23, 0x02FB
    12b0:	80 91 fc 02 	lds	r24, 0x02FC
    12b4:	90 91 fd 02 	lds	r25, 0x02FD
    12b8:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    12bc:	60 93 fa 02 	sts	0x02FA, r22
    12c0:	70 93 fb 02 	sts	0x02FB, r23
    12c4:	80 93 fc 02 	sts	0x02FC, r24
    12c8:	90 93 fd 02 	sts	0x02FD, r25
    12cc:	ad cf       	rjmp	.-166    	; 0x1228 <vEnc_UpdatePose+0xa>

000012ce <send_frame>:
	}
	return c;
}


void send_frame(char flag, int16_t data){
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	eb 01       	movw	r28, r22
	uint8_t r1 = 0;
	uint8_t r2 = 0;
	uint8_t r3 = 0;
	uint8_t r4 = 0;

	uart3SendByte(flag);
    12da:	0e 94 96 22 	call	0x452c	; 0x452c <uart3SendByte>

	r1 = num2char(0x0F & (uint8_t)data);
    12de:	8f e0       	ldi	r24, 0x0F	; 15
    12e0:	f8 2e       	mov	r15, r24
    12e2:	fc 22       	and	r15, r28
}
*/

char num2char(char c){
	
	if(c <10){
    12e4:	89 e0       	ldi	r24, 0x09	; 9
    12e6:	8f 15       	cp	r24, r15
    12e8:	18 f0       	brcs	.+6      	; 0x12f0 <send_frame+0x22>
		c += 48;
    12ea:	90 e3       	ldi	r25, 0x30	; 48
    12ec:	f9 0e       	add	r15, r25
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <send_frame+0x2e>
	}
	else if((c >= 10) && (c <= 16)){
    12f0:	8f 2d       	mov	r24, r15
    12f2:	8a 50       	subi	r24, 0x0A	; 10
    12f4:	87 30       	cpi	r24, 0x07	; 7
    12f6:	10 f4       	brcc	.+4      	; 0x12fc <send_frame+0x2e>
		c += 55;
    12f8:	87 e3       	ldi	r24, 0x37	; 55
    12fa:	f8 0e       	add	r15, r24
	uint8_t r4 = 0;

	uart3SendByte(flag);

	r1 = num2char(0x0F & (uint8_t)data);
	r2 = num2char(0x0F & ((uint8_t)(data >> 4)) );
    12fc:	ce 01       	movw	r24, r28
    12fe:	04 e0       	ldi	r16, 0x04	; 4
    1300:	95 95       	asr	r25
    1302:	87 95       	ror	r24
    1304:	0a 95       	dec	r16
    1306:	e1 f7       	brne	.-8      	; 0x1300 <send_frame+0x32>
    1308:	08 2f       	mov	r16, r24
    130a:	0f 70       	andi	r16, 0x0F	; 15
}
*/

char num2char(char c){
	
	if(c <10){
    130c:	0a 30       	cpi	r16, 0x0A	; 10
    130e:	10 f4       	brcc	.+4      	; 0x1314 <send_frame+0x46>
		c += 48;
    1310:	00 5d       	subi	r16, 0xD0	; 208
    1312:	05 c0       	rjmp	.+10     	; 0x131e <send_frame+0x50>
	}
	else if((c >= 10) && (c <= 16)){
    1314:	80 2f       	mov	r24, r16
    1316:	8a 50       	subi	r24, 0x0A	; 10
    1318:	87 30       	cpi	r24, 0x07	; 7
    131a:	08 f4       	brcc	.+2      	; 0x131e <send_frame+0x50>
		c += 55;
    131c:	09 5c       	subi	r16, 0xC9	; 201

	uart3SendByte(flag);

	r1 = num2char(0x0F & (uint8_t)data);
	r2 = num2char(0x0F & ((uint8_t)(data >> 4)) );
	r3 = num2char(0x0F & ((uint8_t)(data >> 8)) );
    131e:	8d 2f       	mov	r24, r29
    1320:	99 27       	eor	r25, r25
    1322:	87 fd       	sbrc	r24, 7
    1324:	9a 95       	dec	r25
    1326:	18 2f       	mov	r17, r24
    1328:	1f 70       	andi	r17, 0x0F	; 15
}
*/

char num2char(char c){
	
	if(c <10){
    132a:	1a 30       	cpi	r17, 0x0A	; 10
    132c:	10 f4       	brcc	.+4      	; 0x1332 <send_frame+0x64>
		c += 48;
    132e:	10 5d       	subi	r17, 0xD0	; 208
    1330:	05 c0       	rjmp	.+10     	; 0x133c <send_frame+0x6e>
	}
	else if((c >= 10) && (c <= 16)){
    1332:	81 2f       	mov	r24, r17
    1334:	8a 50       	subi	r24, 0x0A	; 10
    1336:	87 30       	cpi	r24, 0x07	; 7
    1338:	08 f4       	brcc	.+2      	; 0x133c <send_frame+0x6e>
		c += 55;
    133a:	19 5c       	subi	r17, 0xC9	; 201
	uart3SendByte(flag);

	r1 = num2char(0x0F & (uint8_t)data);
	r2 = num2char(0x0F & ((uint8_t)(data >> 4)) );
	r3 = num2char(0x0F & ((uint8_t)(data >> 8)) );
	r4 = num2char(0x0F & ((uint8_t)(data >> 12)) );
    133c:	c0 e1       	ldi	r28, 0x10	; 16
    133e:	dc 02       	muls	r29, r28
    1340:	c1 2d       	mov	r28, r1
    1342:	dd 0b       	sbc	r29, r29
    1344:	11 24       	eor	r1, r1
    1346:	ce 01       	movw	r24, r28
    1348:	8f 70       	andi	r24, 0x0F	; 15
    134a:	68 2f       	mov	r22, r24
}
*/

char num2char(char c){
	
	if(c <10){
    134c:	8a 30       	cpi	r24, 0x0A	; 10
    134e:	10 f4       	brcc	.+4      	; 0x1354 <send_frame+0x86>
		c += 48;
    1350:	60 5d       	subi	r22, 0xD0	; 208
    1352:	04 c0       	rjmp	.+8      	; 0x135c <send_frame+0x8e>
	}
	else if((c >= 10) && (c <= 16)){
    1354:	8a 50       	subi	r24, 0x0A	; 10
    1356:	87 30       	cpi	r24, 0x07	; 7
    1358:	08 f4       	brcc	.+2      	; 0x135c <send_frame+0x8e>
		c += 55;
    135a:	69 5c       	subi	r22, 0xC9	; 201
	r1 = num2char(0x0F & (uint8_t)data);
	r2 = num2char(0x0F & ((uint8_t)(data >> 4)) );
	r3 = num2char(0x0F & ((uint8_t)(data >> 8)) );
	r4 = num2char(0x0F & ((uint8_t)(data >> 12)) );

	uart3SendByte(r4);
    135c:	86 2f       	mov	r24, r22
    135e:	0e 94 96 22 	call	0x452c	; 0x452c <uart3SendByte>
	uart3SendByte(r3);
    1362:	81 2f       	mov	r24, r17
    1364:	0e 94 96 22 	call	0x452c	; 0x452c <uart3SendByte>
	uart3SendByte(r2);
    1368:	80 2f       	mov	r24, r16
    136a:	0e 94 96 22 	call	0x452c	; 0x452c <uart3SendByte>
	uart3SendByte(r1);
    136e:	8f 2d       	mov	r24, r15
    1370:	0e 94 96 22 	call	0x452c	; 0x452c <uart3SendByte>
	uart3SendByte('\n'); //line feed
    1374:	8a e0       	ldi	r24, 0x0A	; 10
    1376:	0e 94 96 22 	call	0x452c	; 0x452c <uart3SendByte>
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	08 95       	ret

00001386 <vUpdatePose>:


	}
}

void vUpdatePose(){
    1386:	af 92       	push	r10
    1388:	bf 92       	push	r11
    138a:	cf 92       	push	r12
    138c:	df 92       	push	r13
    138e:	ef 92       	push	r14
    1390:	ff 92       	push	r15
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
	s16 dDis;
	float CMD_K = 0.5;
	float COR_K = 1;

	for(;;){
		robot.heading = (180 * enc_heading) / M_PI; 
    1396:	60 91 fa 02 	lds	r22, 0x02FA
    139a:	70 91 fb 02 	lds	r23, 0x02FB
    139e:	80 91 fc 02 	lds	r24, 0x02FC
    13a2:	90 91 fd 02 	lds	r25, 0x02FD
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	44 e3       	ldi	r20, 0x34	; 52
    13ac:	53 e4       	ldi	r21, 0x43	; 67
    13ae:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    13b2:	2b ed       	ldi	r18, 0xDB	; 219
    13b4:	3f e0       	ldi	r19, 0x0F	; 15
    13b6:	49 e4       	ldi	r20, 0x49	; 73
    13b8:	50 e4       	ldi	r21, 0x40	; 64
    13ba:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    13be:	5b 01       	movw	r10, r22
    13c0:	6c 01       	movw	r12, r24
    13c2:	60 93 49 12 	sts	0x1249, r22
    13c6:	70 93 4a 12 	sts	0x124A, r23
    13ca:	80 93 4b 12 	sts	0x124B, r24
    13ce:	90 93 4c 12 	sts	0x124C, r25
		v_offset = (0.5 * robot.heading) + CMD_K*cmd_angle + COR_K*correction_angle;
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    13de:	7b 01       	movw	r14, r22
    13e0:	8c 01       	movw	r16, r24
    13e2:	60 91 fe 02 	lds	r22, 0x02FE
    13e6:	70 91 ff 02 	lds	r23, 0x02FF
    13ea:	88 27       	eor	r24, r24
    13ec:	77 fd       	sbrc	r23, 7
    13ee:	80 95       	com	r24
    13f0:	98 2f       	mov	r25, r24
    13f2:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	5f e3       	ldi	r21, 0x3F	; 63
    13fe:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    1402:	9b 01       	movw	r18, r22
    1404:	ac 01       	movw	r20, r24
    1406:	c8 01       	movw	r24, r16
    1408:	b7 01       	movw	r22, r14
    140a:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    140e:	20 91 04 03 	lds	r18, 0x0304
    1412:	30 91 05 03 	lds	r19, 0x0305
    1416:	40 91 06 03 	lds	r20, 0x0306
    141a:	50 91 07 03 	lds	r21, 0x0307
    141e:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    1422:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
    1426:	70 93 e1 02 	sts	0x02E1, r23
    142a:	60 93 e0 02 	sts	0x02E0, r22
		robot.vel = (LEFTVel_current + (-RIGHTVel_current)) / 2;
    142e:	80 91 e2 02 	lds	r24, 0x02E2
    1432:	90 91 e3 02 	lds	r25, 0x02E3
    1436:	20 91 ee 02 	lds	r18, 0x02EE
    143a:	30 91 ef 02 	lds	r19, 0x02EF
    143e:	82 1b       	sub	r24, r18
    1440:	93 0b       	sbc	r25, r19
    1442:	62 e0       	ldi	r22, 0x02	; 2
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__divmodhi4>
    144a:	88 27       	eor	r24, r24
    144c:	77 fd       	sbrc	r23, 7
    144e:	80 95       	com	r24
    1450:	98 2f       	mov	r25, r24
    1452:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    1456:	60 93 4d 12 	sts	0x124D, r22
    145a:	70 93 4e 12 	sts	0x124E, r23
    145e:	80 93 4f 12 	sts	0x124F, r24
    1462:	90 93 50 12 	sts	0x1250, r25
		
		dRIGHTDis = (-RIGHTDis_current) - (-RIGHTDis_prev); 
    1466:	80 91 f0 02 	lds	r24, 0x02F0
    146a:	90 91 f1 02 	lds	r25, 0x02F1
    146e:	a0 91 f2 02 	lds	r26, 0x02F2
    1472:	b0 91 f3 02 	lds	r27, 0x02F3
    1476:	e0 90 f4 02 	lds	r14, 0x02F4
    147a:	f0 90 f5 02 	lds	r15, 0x02F5
    147e:	e8 1a       	sub	r14, r24
    1480:	f9 0a       	sbc	r15, r25
		RIGHTDis_prev = RIGHTDis_current;
    1482:	80 93 f4 02 	sts	0x02F4, r24
    1486:	90 93 f5 02 	sts	0x02F5, r25
    148a:	a0 93 f6 02 	sts	0x02F6, r26
    148e:	b0 93 f7 02 	sts	0x02F7, r27
		dLEFTDis = LEFTDis_current - LEFTDis_prev;
    1492:	80 91 e4 02 	lds	r24, 0x02E4
    1496:	90 91 e5 02 	lds	r25, 0x02E5
    149a:	a0 91 e6 02 	lds	r26, 0x02E6
    149e:	b0 91 e7 02 	lds	r27, 0x02E7
    14a2:	20 91 e8 02 	lds	r18, 0x02E8
    14a6:	30 91 e9 02 	lds	r19, 0x02E9
    14aa:	8c 01       	movw	r16, r24
    14ac:	02 1b       	sub	r16, r18
    14ae:	13 0b       	sbc	r17, r19
		LEFTDis_prev = LEFTDis_current;
    14b0:	80 93 e8 02 	sts	0x02E8, r24
    14b4:	90 93 e9 02 	sts	0x02E9, r25
    14b8:	a0 93 ea 02 	sts	0x02EA, r26
    14bc:	b0 93 eb 02 	sts	0x02EB, r27
		
		dDis = (10*(dRIGHTDis + dLEFTDis))/2;	//Send shifted value to avoid decimals
		dRIGHTDis = dLEFTDis = 0;
    14c0:	10 92 ed 02 	sts	0x02ED, r1
    14c4:	10 92 ec 02 	sts	0x02EC, r1
    14c8:	10 92 f9 02 	sts	0x02F9, r1
    14cc:	10 92 f8 02 	sts	0x02F8, r1
		
		send_frame('H', robot.heading);
    14d0:	c6 01       	movw	r24, r12
    14d2:	b5 01       	movw	r22, r10
    14d4:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
    14d8:	9b 01       	movw	r18, r22
    14da:	ac 01       	movw	r20, r24
    14dc:	88 e4       	ldi	r24, 0x48	; 72
    14de:	b9 01       	movw	r22, r18
    14e0:	0e 94 67 09 	call	0x12ce	; 0x12ce <send_frame>
		send_frame('V', robot.vel);
    14e4:	60 91 4d 12 	lds	r22, 0x124D
    14e8:	70 91 4e 12 	lds	r23, 0x124E
    14ec:	80 91 4f 12 	lds	r24, 0x124F
    14f0:	90 91 50 12 	lds	r25, 0x1250
    14f4:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
    14f8:	9b 01       	movw	r18, r22
    14fa:	ac 01       	movw	r20, r24
    14fc:	86 e5       	ldi	r24, 0x56	; 86
    14fe:	b9 01       	movw	r22, r18
    1500:	0e 94 67 09 	call	0x12ce	; 0x12ce <send_frame>
		send_frame('S', dDis);
    1504:	0e 0d       	add	r16, r14
    1506:	1f 1d       	adc	r17, r15
    1508:	b8 01       	movw	r22, r16
    150a:	66 0f       	add	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	66 0f       	add	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	60 0f       	add	r22, r16
    1514:	71 1f       	adc	r23, r17
    1516:	83 e5       	ldi	r24, 0x53	; 83
    1518:	0e 94 67 09 	call	0x12ce	; 0x12ce <send_frame>
    151c:	3c cf       	rjmp	.-392    	; 0x1396 <vUpdatePose+0x10>

0000151e <vServoOsc>:
	}

}


void vServoOsc(){
    151e:	7f 92       	push	r7
    1520:	8f 92       	push	r8
    1522:	9f 92       	push	r9
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <vServoOsc+0x1c>
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR4A,COM4A1);
	cbi(TCCR4A,COM4A0);
}
void PWM_timer4_On_H4(void)
{
	sbi(TCCR4A,COM4B1);
    153e:	80 91 a0 00 	lds	r24, 0x00A0
    1542:	80 62       	ori	r24, 0x20	; 32
    1544:	80 93 a0 00 	sts	0x00A0, r24
	cbi(TCCR4A,COM4B0);
    1548:	80 91 a0 00 	lds	r24, 0x00A0
    154c:	8f 7e       	andi	r24, 0xEF	; 239
    154e:	80 93 a0 00 	sts	0x00A0, r24
	sbi(TCCR3A,COM3C1);
	cbi(TCCR3A,COM3C0);
}
void PWM_timer4_On_H3(void)
{
	sbi(TCCR4A,COM4A1);
    1552:	80 91 a0 00 	lds	r24, 0x00A0
    1556:	80 68       	ori	r24, 0x80	; 128
    1558:	80 93 a0 00 	sts	0x00A0, r24
	cbi(TCCR4A,COM4A0);
    155c:	80 91 a0 00 	lds	r24, 0x00A0
    1560:	8f 7b       	andi	r24, 0xBF	; 191
    1562:	80 93 a0 00 	sts	0x00A0, r24
    1566:	0a e7       	ldi	r16, 0x7A	; 122
    1568:	10 e0       	ldi	r17, 0x00	; 0
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
    156a:	4c ec       	ldi	r20, 0xCC	; 204
    156c:	84 2e       	mov	r8, r20
    156e:	91 2c       	mov	r9, r1
		taskENTER_CRITICAL();
	//	PWM_timer3_Set_E3(i);	//right
		PWM_timer4_Set_H3(h3duty);	//left sprayer //originally 204
		PWM_timer4_Set_H4(204);	//right sprayer
		taskEXIT_CRITICAL();
		vTaskDelayUntil(&xLastWakeTime, (spray_time / portTICK_RATE_MS));
    1570:	5e 01       	movw	r10, r28
    1572:	08 94       	sec
    1574:	a1 1c       	adc	r10, r1
    1576:	b1 1c       	adc	r11, r1
		PWM_timer4_Set_H4(135);	
		taskEXIT_CRITICAL();
		vTaskDelayUntil(&xLastWakeTime, (spray_time / portTICK_RATE_MS));
		*/

		rprintf("%d", h3duty);
    1578:	77 24       	eor	r7, r7
    157a:	73 94       	inc	r7
    157c:	3f e6       	ldi	r19, 0x6F	; 111
    157e:	c3 2e       	mov	r12, r19
    1580:	31 e0       	ldi	r19, 0x01	; 1
    1582:	d3 2e       	mov	r13, r19
		//rprintf(",");
		//rprintfNum(10, 5, 1, ' ', LEFTVel_current);
		rprintf("\n");
    1584:	2d e6       	ldi	r18, 0x6D	; 109
    1586:	e2 2e       	mov	r14, r18
    1588:	21 e0       	ldi	r18, 0x01	; 1
    158a:	f2 2e       	mov	r15, r18
	spray_R_on();
	spray_L_on();
	uint16_t h3duty = 122;

	for(;;){
		if(h3duty > 1023){ h3duty = 0;}
    158c:	84 e0       	ldi	r24, 0x04	; 4
    158e:	00 30       	cpi	r16, 0x00	; 0
    1590:	18 07       	cpc	r17, r24
    1592:	10 f0       	brcs	.+4      	; 0x1598 <vServoOsc+0x7a>
    1594:	00 e0       	ldi	r16, 0x00	; 0
    1596:	10 e0       	ldi	r17, 0x00	; 0
		taskENTER_CRITICAL();
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	0f 92       	push	r0
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
    159e:	10 93 a9 00 	sts	0x00A9, r17
    15a2:	00 93 a8 00 	sts	0x00A8, r16
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
    15a6:	90 92 ab 00 	sts	0x00AB, r9
    15aa:	80 92 aa 00 	sts	0x00AA, r8
	//	PWM_timer3_Set_E3(i);	//right
		PWM_timer4_Set_H3(h3duty);	//left sprayer //originally 204
		PWM_timer4_Set_H4(204);	//right sprayer
		taskEXIT_CRITICAL();
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
		vTaskDelayUntil(&xLastWakeTime, (spray_time / portTICK_RATE_MS));
    15b2:	60 91 d0 02 	lds	r22, 0x02D0
    15b6:	70 91 d1 02 	lds	r23, 0x02D1
    15ba:	c5 01       	movw	r24, r10
    15bc:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vTaskDelayUntil>
		adj = uart1GetByte();
    15c0:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <uart1GetByte>
		if(adj == 'p'){ h3duty++;;}
    15c4:	80 37       	cpi	r24, 0x70	; 112
    15c6:	19 f4       	brne	.+6      	; 0x15ce <vServoOsc+0xb0>
    15c8:	0f 5f       	subi	r16, 0xFF	; 255
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <vServoOsc+0xb8>
		else if(adj == 'l'){ h3duty--;}
    15ce:	8c 36       	cpi	r24, 0x6C	; 108
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <vServoOsc+0xb8>
    15d2:	01 50       	subi	r16, 0x01	; 1
    15d4:	10 40       	sbci	r17, 0x00	; 0
		PWM_timer4_Set_H4(135);	
		taskEXIT_CRITICAL();
		vTaskDelayUntil(&xLastWakeTime, (spray_time / portTICK_RATE_MS));
		*/

		rprintf("%d", h3duty);
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <vServoOsc+0xba>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <vServoOsc+0xbc>
    15da:	0f 92       	push	r0
    15dc:	ed b7       	in	r30, 0x3d	; 61
    15de:	fe b7       	in	r31, 0x3e	; 62
    15e0:	31 96       	adiw	r30, 0x01	; 1
    15e2:	ad b7       	in	r26, 0x3d	; 61
    15e4:	be b7       	in	r27, 0x3e	; 62
    15e6:	11 96       	adiw	r26, 0x01	; 1
    15e8:	7c 92       	st	X, r7
    15ea:	d2 82       	std	Z+2, r13	; 0x02
    15ec:	c1 82       	std	Z+1, r12	; 0x01
    15ee:	14 83       	std	Z+4, r17	; 0x04
    15f0:	03 83       	std	Z+3, r16	; 0x03
    15f2:	0e 94 a1 29 	call	0x5342	; 0x5342 <rprintf1RamRom>
		//rprintf(",");
		//rprintfNum(10, 5, 1, ' ', LEFTVel_current);
		rprintf("\n");
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	ed b7       	in	r30, 0x3d	; 61
    15fc:	fe b7       	in	r31, 0x3e	; 62
    15fe:	71 82       	std	Z+1, r7	; 0x01
    1600:	f3 82       	std	Z+3, r15	; 0x03
    1602:	e2 82       	std	Z+2, r14	; 0x02
    1604:	0e 94 a1 29 	call	0x5342	; 0x5342 <rprintf1RamRom>
	
		h3duty++;
    1608:	0f 5f       	subi	r16, 0xFF	; 255
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	bc cf       	rjmp	.-136    	; 0x158c <vServoOsc+0x6e>

00001614 <vServoTm>:
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));
		LED_off();
		vTaskDelayUntil(&xLastWakeTime, (50 / portTICK_RATE_MS));	}
}

void vServoTm(){
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
	char adj;
	for(;;){
		adj = uart1GetByte();
		if(adj == 'p'){ spray_time++;}
		else if(adj == 'l'){ spray_time--;}
		rprintf("%d\n", spray_time);
    161a:	11 e0       	ldi	r17, 0x01	; 1
    161c:	c2 e7       	ldi	r28, 0x72	; 114
    161e:	d1 e0       	ldi	r29, 0x01	; 1
}

void vServoTm(){
	char adj;
	for(;;){
		adj = uart1GetByte();
    1620:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <uart1GetByte>
		if(adj == 'p'){ spray_time++;}
    1624:	80 37       	cpi	r24, 0x70	; 112
    1626:	31 f4       	brne	.+12     	; 0x1634 <vServoTm+0x20>
    1628:	80 91 d0 02 	lds	r24, 0x02D0
    162c:	90 91 d1 02 	lds	r25, 0x02D1
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	07 c0       	rjmp	.+14     	; 0x1642 <vServoTm+0x2e>
		else if(adj == 'l'){ spray_time--;}
    1634:	8c 36       	cpi	r24, 0x6C	; 108
    1636:	49 f4       	brne	.+18     	; 0x164a <vServoTm+0x36>
    1638:	80 91 d0 02 	lds	r24, 0x02D0
    163c:	90 91 d1 02 	lds	r25, 0x02D1
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	90 93 d1 02 	sts	0x02D1, r25
    1646:	80 93 d0 02 	sts	0x02D0, r24
		rprintf("%d\n", spray_time);
    164a:	00 d0       	rcall	.+0      	; 0x164c <vServoTm+0x38>
    164c:	00 d0       	rcall	.+0      	; 0x164e <vServoTm+0x3a>
    164e:	0f 92       	push	r0
    1650:	ed b7       	in	r30, 0x3d	; 61
    1652:	fe b7       	in	r31, 0x3e	; 62
    1654:	31 96       	adiw	r30, 0x01	; 1
    1656:	ad b7       	in	r26, 0x3d	; 61
    1658:	be b7       	in	r27, 0x3e	; 62
    165a:	11 96       	adiw	r26, 0x01	; 1
    165c:	1c 93       	st	X, r17
    165e:	d2 83       	std	Z+2, r29	; 0x02
    1660:	c1 83       	std	Z+1, r28	; 0x01
    1662:	80 91 d0 02 	lds	r24, 0x02D0
    1666:	90 91 d1 02 	lds	r25, 0x02D1
    166a:	94 83       	std	Z+4, r25	; 0x04
    166c:	83 83       	std	Z+3, r24	; 0x03
    166e:	0e 94 a1 29 	call	0x5342	; 0x5342 <rprintf1RamRom>
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	d1 cf       	rjmp	.-94     	; 0x1620 <vServoTm+0xc>

0000167e <sharp_IR_interpret_GP2Y0A21YK>:
	}

//Sharp GP2Y0A21YK IR Range Sensor - 4 cm to 30 cm
int sharp_IR_interpret_GP2Y0A21YK(int value)
	{
	return 739.38*pow(value,-.8105);
    167e:	aa 27       	eor	r26, r26
    1680:	97 fd       	sbrc	r25, 7
    1682:	a0 95       	com	r26
    1684:	ba 2f       	mov	r27, r26
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    168e:	2e ee       	ldi	r18, 0xEE	; 238
    1690:	3c e7       	ldi	r19, 0x7C	; 124
    1692:	4f e4       	ldi	r20, 0x4F	; 79
    1694:	5f eb       	ldi	r21, 0xBF	; 191
    1696:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <pow>
    169a:	9b 01       	movw	r18, r22
    169c:	ac 01       	movw	r20, r24
    169e:	ca 01       	movw	r24, r20
    16a0:	b9 01       	movw	r22, r18
    16a2:	22 e5       	ldi	r18, 0x52	; 82
    16a4:	38 ed       	ldi	r19, 0xD8	; 216
    16a6:	48 e3       	ldi	r20, 0x38	; 56
    16a8:	54 e4       	ldi	r21, 0x44	; 68
    16aa:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    16ae:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
	}
    16b2:	cb 01       	movw	r24, r22
    16b4:	08 95       	ret

000016b6 <sharp_IR_interpret_GP2D12>:

//***FROM THE SoR LIBRARIES
//Sharp GP2D12 IR Range Sensor -  claims 10cm to 80cm (I got 8cm to 150cm)
int sharp_IR_interpret_GP2D12(int value)
	{
	return 1384.4*pow(value,-.9988);
    16b6:	aa 27       	eor	r26, r26
    16b8:	97 fd       	sbrc	r25, 7
    16ba:	a0 95       	com	r26
    16bc:	ba 2f       	mov	r27, r26
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    16c6:	2b e5       	ldi	r18, 0x5B	; 91
    16c8:	31 eb       	ldi	r19, 0xB1	; 177
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	5f eb       	ldi	r21, 0xBF	; 191
    16ce:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <pow>
    16d2:	9b 01       	movw	r18, r22
    16d4:	ac 01       	movw	r20, r24
    16d6:	ca 01       	movw	r24, r20
    16d8:	b9 01       	movw	r22, r18
    16da:	2d ec       	ldi	r18, 0xCD	; 205
    16dc:	3c e0       	ldi	r19, 0x0C	; 12
    16de:	4d ea       	ldi	r20, 0xAD	; 173
    16e0:	54 e4       	ldi	r21, 0x44	; 68
    16e2:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    16e6:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__fixsfsi>
	}
    16ea:	cb 01       	movw	r24, r22
    16ec:	08 95       	ret

000016ee <vReadIR>:
		
	
	}
}

void vReadIR(){
    16ee:	2f 92       	push	r2
    16f0:	3f 92       	push	r3
    16f2:	4f 92       	push	r4
    16f4:	5f 92       	push	r5
    16f6:	6f 92       	push	r6
    16f8:	7f 92       	push	r7
    16fa:	8f 92       	push	r8
    16fc:	9f 92       	push	r9
    16fe:	af 92       	push	r10
    1700:	bf 92       	push	r11
    1702:	cf 92       	push	r12
    1704:	df 92       	push	r13
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	2d 97       	sbiw	r28, 0x0d	; 13
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	0f 2e       	mov	r0, r31
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	ef 2e       	mov	r14, r31
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	ff 2e       	mov	r15, r31
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	0f 2f       	mov	r16, r31
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	1f 2f       	mov	r17, r31
    1734:	f0 2d       	mov	r31, r0
    1736:	57 01       	movw	r10, r14
    1738:	68 01       	movw	r12, r16
    173a:	ea 86       	std	Y+10, r14	; 0x0a
    173c:	fb 86       	std	Y+11, r15	; 0x0b
    173e:	0c 87       	std	Y+12, r16	; 0x0c
    1740:	1d 87       	std	Y+13, r17	; 0x0d
    1742:	37 01       	movw	r6, r14
    1744:	48 01       	movw	r8, r16
    1746:	17 01       	movw	r2, r14
    1748:	28 01       	movw	r4, r16
    174a:	19 82       	std	Y+1, r1	; 0x01
    174c:	93 c0       	rjmp	.+294    	; 0x1874 <vReadIR+0x186>
	float cor_coeff;
	float vel_coeff;

	for(;;){
		for(uint8_t itr = 0; itr < NUM_IR_READS; itr++){
			n90_range  += ((float)sharp_IR_interpret_GP2Y0A21YK(a2dConvert8bit(2)))/NUM_IR_READS;
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	0e 94 67 27 	call	0x4ece	; 0x4ece <a2dConvert8bit>
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 94 3f 0b 	call	0x167e	; 0x167e <sharp_IR_interpret_GP2Y0A21YK>
    175a:	aa 27       	eor	r26, r26
    175c:	97 fd       	sbrc	r25, 7
    175e:	a0 95       	com	r26
    1760:	ba 2f       	mov	r27, r26
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    1776:	9b 01       	movw	r18, r22
    1778:	ac 01       	movw	r20, r24
    177a:	c8 01       	movw	r24, r16
    177c:	b7 01       	movw	r22, r14
    177e:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    1782:	7b 01       	movw	r14, r22
    1784:	8c 01       	movw	r16, r24
			zero_range += ((float)sharp_IR_interpret_GP2D12(a2dConvert8bit(3)))/NUM_IR_READS;
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	0e 94 67 27 	call	0x4ece	; 0x4ece <a2dConvert8bit>
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <sharp_IR_interpret_GP2D12>
    1792:	aa 27       	eor	r26, r26
    1794:	97 fd       	sbrc	r25, 7
    1796:	a0 95       	com	r26
    1798:	ba 2f       	mov	r27, r26
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e2       	ldi	r20, 0x20	; 32
    17a8:	51 e4       	ldi	r21, 0x41	; 65
    17aa:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	6a 85       	ldd	r22, Y+10	; 0x0a
    17b4:	7b 85       	ldd	r23, Y+11	; 0x0b
    17b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ba:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    17be:	6a 87       	std	Y+10, r22	; 0x0a
    17c0:	7b 87       	std	Y+11, r23	; 0x0b
    17c2:	8c 87       	std	Y+12, r24	; 0x0c
    17c4:	9d 87       	std	Y+13, r25	; 0x0d
			p90_range  += ((float)sharp_IR_interpret_GP2D12(a2dConvert8bit(4)))/NUM_IR_READS;
    17c6:	84 e0       	ldi	r24, 0x04	; 4
    17c8:	0e 94 67 27 	call	0x4ece	; 0x4ece <a2dConvert8bit>
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <sharp_IR_interpret_GP2D12>
    17d2:	aa 27       	eor	r26, r26
    17d4:	97 fd       	sbrc	r25, 7
    17d6:	a0 95       	com	r26
    17d8:	ba 2f       	mov	r27, r26
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    17ee:	9b 01       	movw	r18, r22
    17f0:	ac 01       	movw	r20, r24
    17f2:	c6 01       	movw	r24, r12
    17f4:	b5 01       	movw	r22, r10
    17f6:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    17fa:	5b 01       	movw	r10, r22
    17fc:	6c 01       	movw	r12, r24
			p45_range  += ((float)sharp_IR_interpret_GP2Y0A21YK(a2dConvert8bit(5)))/NUM_IR_READS;
    17fe:	85 e0       	ldi	r24, 0x05	; 5
    1800:	0e 94 67 27 	call	0x4ece	; 0x4ece <a2dConvert8bit>
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 3f 0b 	call	0x167e	; 0x167e <sharp_IR_interpret_GP2Y0A21YK>
    180a:	aa 27       	eor	r26, r26
    180c:	97 fd       	sbrc	r25, 7
    180e:	a0 95       	com	r26
    1810:	ba 2f       	mov	r27, r26
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    1826:	9b 01       	movw	r18, r22
    1828:	ac 01       	movw	r20, r24
    182a:	c2 01       	movw	r24, r4
    182c:	b1 01       	movw	r22, r2
    182e:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    1832:	1b 01       	movw	r2, r22
    1834:	2c 01       	movw	r4, r24
			n45_range  += ((float)sharp_IR_interpret_GP2Y0A21YK(a2dConvert8bit(6)))/NUM_IR_READS;
    1836:	86 e0       	ldi	r24, 0x06	; 6
    1838:	0e 94 67 27 	call	0x4ece	; 0x4ece <a2dConvert8bit>
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 3f 0b 	call	0x167e	; 0x167e <sharp_IR_interpret_GP2Y0A21YK>
    1842:	aa 27       	eor	r26, r26
    1844:	97 fd       	sbrc	r25, 7
    1846:	a0 95       	com	r26
    1848:	ba 2f       	mov	r27, r26
    184a:	bc 01       	movw	r22, r24
    184c:	cd 01       	movw	r24, r26
    184e:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    185e:	9b 01       	movw	r18, r22
    1860:	ac 01       	movw	r20, r24
    1862:	c4 01       	movw	r24, r8
    1864:	b3 01       	movw	r22, r6
    1866:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    186a:	3b 01       	movw	r6, r22
    186c:	4c 01       	movw	r8, r24

	float cor_coeff;
	float vel_coeff;

	for(;;){
		for(uint8_t itr = 0; itr < NUM_IR_READS; itr++){
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	99 81       	ldd	r25, Y+1	; 0x01
    1876:	9a 30       	cpi	r25, 0x0A	; 10
    1878:	08 f4       	brcc	.+2      	; 0x187c <vReadIR+0x18e>
    187a:	69 cf       	rjmp	.-302    	; 0x174e <vReadIR+0x60>
			p45_range  += ((float)sharp_IR_interpret_GP2Y0A21YK(a2dConvert8bit(5)))/NUM_IR_READS;
			n45_range  += ((float)sharp_IR_interpret_GP2Y0A21YK(a2dConvert8bit(6)))/NUM_IR_READS;
		}
//		rprintf("IR[-90]: %d\tIR[-45]: %d\tIR[0]: %d\tin_vel: %d\tvel_cmd: %d\t",(uint8_t)n90_range, (uint8_t)n45_range, (uint8_t)zero_range, (int32_t)inst_cmd_vel, (int32_t)v_command);

		denom_n90 = ((n90_range)-IR_TO_EDGE)*((n90_range)-IR_TO_EDGE);
    187c:	c8 01       	movw	r24, r16
    187e:	b7 01       	movw	r22, r14
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    188c:	9b 01       	movw	r18, r22
    188e:	ac 01       	movw	r20, r24
    1890:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    1894:	7b 01       	movw	r14, r22
    1896:	8c 01       	movw	r16, r24
		denom_p90 = ((p90_range)-IR_TO_EDGE)*((p90_range)-IR_TO_EDGE);
    1898:	c6 01       	movw	r24, r12
    189a:	b5 01       	movw	r22, r10
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e2       	ldi	r20, 0x20	; 32
    18a2:	51 e4       	ldi	r21, 0x41	; 65
    18a4:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    18a8:	9b 01       	movw	r18, r22
    18aa:	ac 01       	movw	r20, r24
    18ac:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    18b0:	5b 01       	movw	r10, r22
    18b2:	6c 01       	movw	r12, r24
		denom_n45 = ((n45_range)-IR_TO_EDGE)*((n45_range)-IR_TO_EDGE);
    18b4:	c4 01       	movw	r24, r8
    18b6:	b3 01       	movw	r22, r6
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e2       	ldi	r20, 0x20	; 32
    18be:	51 e4       	ldi	r21, 0x41	; 65
    18c0:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    18c4:	9b 01       	movw	r18, r22
    18c6:	ac 01       	movw	r20, r24
    18c8:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    18cc:	3b 01       	movw	r6, r22
    18ce:	4c 01       	movw	r8, r24
		denom_p45 = ((p45_range)-IR_TO_EDGE)*((p45_range)-IR_TO_EDGE);
    18d0:	c2 01       	movw	r24, r4
    18d2:	b1 01       	movw	r22, r2
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e2       	ldi	r20, 0x20	; 32
    18da:	51 e4       	ldi	r21, 0x41	; 65
    18dc:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    18e0:	9b 01       	movw	r18, r22
    18e2:	ac 01       	movw	r20, r24
    18e4:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    18e8:	6e 83       	std	Y+6, r22	; 0x06
    18ea:	7f 83       	std	Y+7, r23	; 0x07
    18ec:	88 87       	std	Y+8, r24	; 0x08
    18ee:	99 87       	std	Y+9, r25	; 0x09
		
		if(denom_n90 != 0){
    18f0:	c8 01       	movw	r24, r16
    18f2:	b7 01       	movw	r22, r14
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    1900:	88 23       	and	r24, r24
    1902:	a1 f0       	breq	.+40     	; 0x192c <vReadIR+0x23e>
			cor_ang_n90 =  1000.0/denom_n90;
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	8a e7       	ldi	r24, 0x7A	; 122
    190a:	94 e4       	ldi	r25, 0x44	; 68
    190c:	a8 01       	movw	r20, r16
    190e:	97 01       	movw	r18, r14
    1910:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    1914:	6a 83       	std	Y+2, r22	; 0x02
    1916:	7b 83       	std	Y+3, r23	; 0x03
    1918:	8c 83       	std	Y+4, r24	; 0x04
    191a:	9d 83       	std	Y+5, r25	; 0x05
			if(cor_ang_n90 > 90){cor_ang_n90 = 90;}
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	44 eb       	ldi	r20, 0xB4	; 180
    1922:	52 e4       	ldi	r21, 0x42	; 66
    1924:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__gesf2>
    1928:	18 16       	cp	r1, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <vReadIR+0x248>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a4 eb       	ldi	r26, 0xB4	; 180
    1932:	b2 e4       	ldi	r27, 0x42	; 66
    1934:	10 c0       	rjmp	.+32     	; 0x1956 <vReadIR+0x268>
			if(cor_ang_n90 < -90){cor_ang_n90 = -90;}
    1936:	6a 81       	ldd	r22, Y+2	; 0x02
    1938:	7b 81       	ldd	r23, Y+3	; 0x03
    193a:	8c 81       	ldd	r24, Y+4	; 0x04
    193c:	9d 81       	ldd	r25, Y+5	; 0x05
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	44 eb       	ldi	r20, 0xB4	; 180
    1944:	52 ec       	ldi	r21, 0xC2	; 194
    1946:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    194a:	88 23       	and	r24, r24
    194c:	44 f4       	brge	.+16     	; 0x195e <vReadIR+0x270>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a4 eb       	ldi	r26, 0xB4	; 180
    1954:	b2 ec       	ldi	r27, 0xC2	; 194
    1956:	8a 83       	std	Y+2, r24	; 0x02
    1958:	9b 83       	std	Y+3, r25	; 0x03
    195a:	ac 83       	std	Y+4, r26	; 0x04
    195c:	bd 83       	std	Y+5, r27	; 0x05
		}
		else{cor_ang_n90 = 90;}

		if(denom_p90 != 0){
    195e:	c6 01       	movw	r24, r12
    1960:	b5 01       	movw	r22, r10
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    196e:	88 23       	and	r24, r24
    1970:	91 f0       	breq	.+36     	; 0x1996 <vReadIR+0x2a8>
			cor_ang_p90 =  1000.0/denom_p90;
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	8a e7       	ldi	r24, 0x7A	; 122
    1978:	94 e4       	ldi	r25, 0x44	; 68
    197a:	a6 01       	movw	r20, r12
    197c:	95 01       	movw	r18, r10
    197e:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    1982:	7b 01       	movw	r14, r22
    1984:	8c 01       	movw	r16, r24
			if(cor_ang_p90 > 90){cor_ang_p90 = 90;}
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	44 eb       	ldi	r20, 0xB4	; 180
    198c:	52 e4       	ldi	r21, 0x42	; 66
    198e:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__gesf2>
    1992:	18 16       	cp	r1, r24
    1994:	5c f4       	brge	.+22     	; 0x19ac <vReadIR+0x2be>
    1996:	0f 2e       	mov	r0, r31
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	ef 2e       	mov	r14, r31
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	ff 2e       	mov	r15, r31
    19a0:	f4 eb       	ldi	r31, 0xB4	; 180
    19a2:	0f 2f       	mov	r16, r31
    19a4:	f2 e4       	ldi	r31, 0x42	; 66
    19a6:	1f 2f       	mov	r17, r31
    19a8:	f0 2d       	mov	r31, r0
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <vReadIR+0x2e6>
			if(cor_ang_p90 < -90){cor_ang_p90 = -90;}
    19ac:	c8 01       	movw	r24, r16
    19ae:	b7 01       	movw	r22, r14
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	44 eb       	ldi	r20, 0xB4	; 180
    19b6:	52 ec       	ldi	r21, 0xC2	; 194
    19b8:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    19bc:	88 23       	and	r24, r24
    19be:	54 f4       	brge	.+20     	; 0x19d4 <vReadIR+0x2e6>
    19c0:	0f 2e       	mov	r0, r31
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	ef 2e       	mov	r14, r31
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	ff 2e       	mov	r15, r31
    19ca:	f4 eb       	ldi	r31, 0xB4	; 180
    19cc:	0f 2f       	mov	r16, r31
    19ce:	f2 ec       	ldi	r31, 0xC2	; 194
    19d0:	1f 2f       	mov	r17, r31
    19d2:	f0 2d       	mov	r31, r0
		}
		else{cor_ang_p90 = 90;}

		if(denom_n45 != 0){
    19d4:	c4 01       	movw	r24, r8
    19d6:	b3 01       	movw	r22, r6
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    19e4:	88 23       	and	r24, r24
    19e6:	91 f0       	breq	.+36     	; 0x1a0c <vReadIR+0x31e>
			cor_ang_n45 =  1000.0/denom_n45;
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	8a e7       	ldi	r24, 0x7A	; 122
    19ee:	94 e4       	ldi	r25, 0x44	; 68
    19f0:	a4 01       	movw	r20, r8
    19f2:	93 01       	movw	r18, r6
    19f4:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    19f8:	1b 01       	movw	r2, r22
    19fa:	2c 01       	movw	r4, r24
			if(cor_ang_n45 > 90){cor_ang_n45 = 90;}
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	44 eb       	ldi	r20, 0xB4	; 180
    1a02:	52 e4       	ldi	r21, 0x42	; 66
    1a04:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__gesf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	5c f4       	brge	.+22     	; 0x1a22 <vReadIR+0x334>
    1a0c:	0f 2e       	mov	r0, r31
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	2f 2e       	mov	r2, r31
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	3f 2e       	mov	r3, r31
    1a16:	f4 eb       	ldi	r31, 0xB4	; 180
    1a18:	4f 2e       	mov	r4, r31
    1a1a:	f2 e4       	ldi	r31, 0x42	; 66
    1a1c:	5f 2e       	mov	r5, r31
    1a1e:	f0 2d       	mov	r31, r0
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <vReadIR+0x35c>
			if(cor_ang_n45 < -90){cor_ang_n45 = -90;}
    1a22:	c2 01       	movw	r24, r4
    1a24:	b1 01       	movw	r22, r2
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	44 eb       	ldi	r20, 0xB4	; 180
    1a2c:	52 ec       	ldi	r21, 0xC2	; 194
    1a2e:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    1a32:	88 23       	and	r24, r24
    1a34:	54 f4       	brge	.+20     	; 0x1a4a <vReadIR+0x35c>
    1a36:	0f 2e       	mov	r0, r31
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	2f 2e       	mov	r2, r31
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	3f 2e       	mov	r3, r31
    1a40:	f4 eb       	ldi	r31, 0xB4	; 180
    1a42:	4f 2e       	mov	r4, r31
    1a44:	f2 ec       	ldi	r31, 0xC2	; 194
    1a46:	5f 2e       	mov	r5, r31
    1a48:	f0 2d       	mov	r31, r0
		}
		else{cor_ang_n45 = 90;}

		if(denom_p45 != 0){
    1a4a:	6e 81       	ldd	r22, Y+6	; 0x06
    1a4c:	7f 81       	ldd	r23, Y+7	; 0x07
    1a4e:	88 85       	ldd	r24, Y+8	; 0x08
    1a50:	99 85       	ldd	r25, Y+9	; 0x09
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	a1 f0       	breq	.+40     	; 0x1a8a <vReadIR+0x39c>
			cor_ang_p45 =  1000.0/denom_p45;
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	8a e7       	ldi	r24, 0x7A	; 122
    1a68:	94 e4       	ldi	r25, 0x44	; 68
    1a6a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6e:	48 85       	ldd	r20, Y+8	; 0x08
    1a70:	59 85       	ldd	r21, Y+9	; 0x09
    1a72:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    1a76:	5b 01       	movw	r10, r22
    1a78:	6c 01       	movw	r12, r24
			if(cor_ang_p45 > 90){cor_ang_p45 = 90;}
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	44 eb       	ldi	r20, 0xB4	; 180
    1a80:	52 e4       	ldi	r21, 0x42	; 66
    1a82:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__gesf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	5c f4       	brge	.+22     	; 0x1aa0 <vReadIR+0x3b2>
    1a8a:	0f 2e       	mov	r0, r31
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	af 2e       	mov	r10, r31
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	bf 2e       	mov	r11, r31
    1a94:	f4 eb       	ldi	r31, 0xB4	; 180
    1a96:	cf 2e       	mov	r12, r31
    1a98:	f2 e4       	ldi	r31, 0x42	; 66
    1a9a:	df 2e       	mov	r13, r31
    1a9c:	f0 2d       	mov	r31, r0
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <vReadIR+0x3da>
			if(cor_ang_p45 < -90){cor_ang_p45 = -90;}
    1aa0:	c6 01       	movw	r24, r12
    1aa2:	b5 01       	movw	r22, r10
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	44 eb       	ldi	r20, 0xB4	; 180
    1aaa:	52 ec       	ldi	r21, 0xC2	; 194
    1aac:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	54 f4       	brge	.+20     	; 0x1ac8 <vReadIR+0x3da>
    1ab4:	0f 2e       	mov	r0, r31
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	af 2e       	mov	r10, r31
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	bf 2e       	mov	r11, r31
    1abe:	f4 eb       	ldi	r31, 0xB4	; 180
    1ac0:	cf 2e       	mov	r12, r31
    1ac2:	f2 ec       	ldi	r31, 0xC2	; 194
    1ac4:	df 2e       	mov	r13, r31
    1ac6:	f0 2d       	mov	r31, r0
		}
		else{cor_ang_p45 = 90;}

		cor_coeff = 40/(zero_range - IR_TO_EDGE);
    1ac8:	6a 85       	ldd	r22, Y+10	; 0x0a
    1aca:	7b 85       	ldd	r23, Y+11	; 0x0b
    1acc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ace:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e2       	ldi	r20, 0x20	; 32
    1ad6:	51 e4       	ldi	r21, 0x41	; 65
    1ad8:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    1adc:	9b 01       	movw	r18, r22
    1ade:	ac 01       	movw	r20, r24
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	80 e2       	ldi	r24, 0x20	; 32
    1ae6:	92 e4       	ldi	r25, 0x42	; 66
    1ae8:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    1aec:	3b 01       	movw	r6, r22
    1aee:	4c 01       	movw	r8, r24
		vel_coeff = sqrt((zero_range)/40);
    1af0:	6a 85       	ldd	r22, Y+10	; 0x0a
    1af2:	7b 85       	ldd	r23, Y+11	; 0x0b
    1af4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1af6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e2       	ldi	r20, 0x20	; 32
    1afe:	52 e4       	ldi	r21, 0x42	; 66
    1b00:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    1b04:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <sqrt>
//		rprintf("VEL_COEFF: %d\t",(int16_t)vel_coeff);
		inst_cmd_vel = (vel_coeff * inst_cmd_vel) + 1;
    1b08:	20 91 dc 02 	lds	r18, 0x02DC
    1b0c:	30 91 dd 02 	lds	r19, 0x02DD
    1b10:	40 91 de 02 	lds	r20, 0x02DE
    1b14:	50 91 df 02 	lds	r21, 0x02DF
    1b18:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    1b28:	60 93 dc 02 	sts	0x02DC, r22
    1b2c:	70 93 dd 02 	sts	0x02DD, r23
    1b30:	80 93 de 02 	sts	0x02DE, r24
    1b34:	90 93 df 02 	sts	0x02DF, r25
		if(cor_coeff < 1){cor_coeff = 1;}
    1b38:	c4 01       	movw	r24, r8
    1b3a:	b3 01       	movw	r22, r6
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	54 f4       	brge	.+20     	; 0x1b60 <vReadIR+0x472>
    1b4c:	0f 2e       	mov	r0, r31
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	6f 2e       	mov	r6, r31
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	7f 2e       	mov	r7, r31
    1b56:	f0 e8       	ldi	r31, 0x80	; 128
    1b58:	8f 2e       	mov	r8, r31
    1b5a:	ff e3       	ldi	r31, 0x3F	; 63
    1b5c:	9f 2e       	mov	r9, r31
    1b5e:	f0 2d       	mov	r31, r0

		//rprintf("caIR[-90]: %d\tcaIR[-45]: %d\tcaIR[90]: %d\tcaIR[45]: %d\t",(uint8_t)cor_ang_n90, (uint8_t)cor_ang_n45, (uint8_t)cor_ang_p90, (uint8_t)cor_ang_p45);

		correction_angle = (cor_coeff)*((cor_ang_p90 - cor_ang_n90) + (cor_ang_p45 - cor_ang_n45));
    1b60:	c8 01       	movw	r24, r16
    1b62:	b7 01       	movw	r22, r14
    1b64:	2a 81       	ldd	r18, Y+2	; 0x02
    1b66:	3b 81       	ldd	r19, Y+3	; 0x03
    1b68:	4c 81       	ldd	r20, Y+4	; 0x04
    1b6a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b6c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    1b70:	7b 01       	movw	r14, r22
    1b72:	8c 01       	movw	r16, r24
    1b74:	c6 01       	movw	r24, r12
    1b76:	b5 01       	movw	r22, r10
    1b78:	a2 01       	movw	r20, r4
    1b7a:	91 01       	movw	r18, r2
    1b7c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    1b80:	9b 01       	movw	r18, r22
    1b82:	ac 01       	movw	r20, r24
    1b84:	c8 01       	movw	r24, r16
    1b86:	b7 01       	movw	r22, r14
    1b88:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    1b8c:	9b 01       	movw	r18, r22
    1b8e:	ac 01       	movw	r20, r24
    1b90:	c4 01       	movw	r24, r8
    1b92:	b3 01       	movw	r22, r6
    1b94:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    1b98:	60 93 04 03 	sts	0x0304, r22
    1b9c:	70 93 05 03 	sts	0x0305, r23
    1ba0:	80 93 06 03 	sts	0x0306, r24
    1ba4:	90 93 07 03 	sts	0x0307, r25
		if(correction_angle > 90){correction_angle = 90;}
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	44 eb       	ldi	r20, 0xB4	; 180
    1bae:	52 e4       	ldi	r21, 0x42	; 66
    1bb0:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__gesf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	64 f4       	brge	.+24     	; 0x1bd0 <vReadIR+0x4e2>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a4 eb       	ldi	r26, 0xB4	; 180
    1bbe:	b2 e4       	ldi	r27, 0x42	; 66
    1bc0:	80 93 04 03 	sts	0x0304, r24
    1bc4:	90 93 05 03 	sts	0x0305, r25
    1bc8:	a0 93 06 03 	sts	0x0306, r26
    1bcc:	b0 93 07 03 	sts	0x0307, r27
		if(correction_angle < -90){correction_angle = -90;}
    1bd0:	60 91 04 03 	lds	r22, 0x0304
    1bd4:	70 91 05 03 	lds	r23, 0x0305
    1bd8:	80 91 06 03 	lds	r24, 0x0306
    1bdc:	90 91 07 03 	lds	r25, 0x0307
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	44 eb       	ldi	r20, 0xB4	; 180
    1be6:	52 ec       	ldi	r21, 0xC2	; 194
    1be8:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    1bec:	87 ff       	sbrs	r24, 7
    1bee:	0c c0       	rjmp	.+24     	; 0x1c08 <vReadIR+0x51a>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a4 eb       	ldi	r26, 0xB4	; 180
    1bf6:	b2 ec       	ldi	r27, 0xC2	; 194
    1bf8:	80 93 04 03 	sts	0x0304, r24
    1bfc:	90 93 05 03 	sts	0x0305, r25
    1c00:	a0 93 06 03 	sts	0x0306, r26
    1c04:	b0 93 07 03 	sts	0x0307, r27
    1c08:	0f 2e       	mov	r0, r31
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	ef 2e       	mov	r14, r31
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	ff 2e       	mov	r15, r31
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	0f 2f       	mov	r16, r31
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	1f 2f       	mov	r17, r31
    1c1a:	f0 2d       	mov	r31, r0
    1c1c:	57 01       	movw	r10, r14
    1c1e:	68 01       	movw	r12, r16
    1c20:	ea 86       	std	Y+10, r14	; 0x0a
    1c22:	fb 86       	std	Y+11, r15	; 0x0b
    1c24:	0c 87       	std	Y+12, r16	; 0x0c
    1c26:	1d 87       	std	Y+13, r17	; 0x0d
    1c28:	37 01       	movw	r6, r14
    1c2a:	48 01       	movw	r8, r16
    1c2c:	17 01       	movw	r2, r14
    1c2e:	28 01       	movw	r4, r16
    1c30:	19 82       	std	Y+1, r1	; 0x01
    1c32:	8d cd       	rjmp	.-1254   	; 0x174e <vReadIR+0x60>

00001c34 <ubRcv>:
		
			//taskYIELD();
	//	}
}

void ubRcv(unsigned char c){
    1c34:	1f 93       	push	r17
	static char dis_iter; //count iterator for commanded distance
	static char rot_flag;
	static char dis_flag;
	static s16 rot_rough = 0;  //store ascii chars
	static s16 dis_rough = 0;  //store ascii chars
		c = c & 0b01111111;		//for some reason, every byte has its first bit set to 1
    1c36:	18 2f       	mov	r17, r24
    1c38:	1f 77       	andi	r17, 0x7F	; 127
		uart1SendByte(c);
    1c3a:	81 2f       	mov	r24, r17
    1c3c:	0e 94 8c 22 	call	0x4518	; 0x4518 <uart1SendByte>
		if(c != 0xff){
		//if the data isn't whitespace (0xff), post it
		

			if(c == 0x0a){lf_flag = SET;} //line feed detected, the character will be a 'R' or a 'D'
    1c40:	1a 30       	cpi	r17, 0x0A	; 10
    1c42:	21 f4       	brne	.+8      	; 0x1c4c <ubRcv+0x18>
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	80 93 10 03 	sts	0x0310, r24
    1c4a:	61 c0       	rjmp	.+194    	; 0x1d0e <ubRcv+0xda>
	
			else if((lf_flag) && (c == 'R')){ //set rotation flag
    1c4c:	80 91 10 03 	lds	r24, 0x0310
    1c50:	88 23       	and	r24, r24
    1c52:	91 f0       	breq	.+36     	; 0x1c78 <ubRcv+0x44>
    1c54:	12 35       	cpi	r17, 0x52	; 82
    1c56:	31 f4       	brne	.+12     	; 0x1c64 <ubRcv+0x30>
				rot_flag = SET;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	80 93 0d 03 	sts	0x030D, r24
				rot_iter = 0;
    1c5e:	10 92 0f 03 	sts	0x030F, r1
    1c62:	07 c0       	rjmp	.+14     	; 0x1c72 <ubRcv+0x3e>
				lf_flag = UNSET;
				//rprintf("R: char: %c ",c);
				return;
			} 
			else if((lf_flag) && (c == 'M')){ //set distance flag
    1c64:	1d 34       	cpi	r17, 0x4D	; 77
    1c66:	41 f4       	brne	.+16     	; 0x1c78 <ubRcv+0x44>
				dis_flag = SET;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	80 93 0c 03 	sts	0x030C, r24
				dis_iter = 0;
    1c6e:	10 92 0e 03 	sts	0x030E, r1
				lf_flag = UNSET;
    1c72:	10 92 10 03 	sts	0x0310, r1
    1c76:	7c c0       	rjmp	.+248    	; 0x1d70 <ubRcv+0x13c>
			//	rprintf("%c",c);
				return;
			}
			else if(rot_flag){
    1c78:	80 91 0d 03 	lds	r24, 0x030D
    1c7c:	88 23       	and	r24, r24
    1c7e:	11 f1       	breq	.+68     	; 0x1cc4 <ubRcv+0x90>

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
    1c80:	81 2f       	mov	r24, r17
    1c82:	80 53       	subi	r24, 0x30	; 48
    1c84:	8a 30       	cpi	r24, 0x0A	; 10
    1c86:	10 f4       	brcc	.+4      	; 0x1c8c <ubRcv+0x58>
    1c88:	18 2f       	mov	r17, r24
    1c8a:	05 c0       	rjmp	.+10     	; 0x1c96 <ubRcv+0x62>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
    1c8c:	81 2f       	mov	r24, r17
    1c8e:	81 54       	subi	r24, 0x41	; 65
    1c90:	86 30       	cpi	r24, 0x06	; 6
    1c92:	08 f4       	brcc	.+2      	; 0x1c96 <ubRcv+0x62>
		c -= 55;
    1c94:	17 53       	subi	r17, 0x37	; 55
				lf_flag = UNSET;
			//	rprintf("%c",c);
				return;
			}
			else if(rot_flag){
				rot_rough = (char2hex(c) | (rot_rough << 4));	//store then increment	
    1c96:	81 2f       	mov	r24, r17
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	20 91 0a 03 	lds	r18, 0x030A
    1c9e:	30 91 0b 03 	lds	r19, 0x030B
    1ca2:	64 e0       	ldi	r22, 0x04	; 4
    1ca4:	22 0f       	add	r18, r18
    1ca6:	33 1f       	adc	r19, r19
    1ca8:	6a 95       	dec	r22
    1caa:	e1 f7       	brne	.-8      	; 0x1ca4 <ubRcv+0x70>
    1cac:	82 2b       	or	r24, r18
    1cae:	93 2b       	or	r25, r19
    1cb0:	90 93 0b 03 	sts	0x030B, r25
    1cb4:	80 93 0a 03 	sts	0x030A, r24
				rot_iter++;
    1cb8:	80 91 0f 03 	lds	r24, 0x030F
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
    1cbe:	80 93 0f 03 	sts	0x030F, r24
    1cc2:	25 c0       	rjmp	.+74     	; 0x1d0e <ubRcv+0xda>
				//rprintf(" #%c\t:%d\t",c,rot_iter);
				//rprintfu08(c); rprintf("\t");
				//rprintfu16(rot_rough);
				//rprintfCRLF();
			}	
			else if(dis_flag){
    1cc4:	80 91 0c 03 	lds	r24, 0x030C
    1cc8:	88 23       	and	r24, r24
    1cca:	09 f1       	breq	.+66     	; 0x1d0e <ubRcv+0xda>

}

char char2hex(char c){
	
	if((c > 47) && (c <58)){
    1ccc:	81 2f       	mov	r24, r17
    1cce:	80 53       	subi	r24, 0x30	; 48
    1cd0:	8a 30       	cpi	r24, 0x0A	; 10
    1cd2:	10 f4       	brcc	.+4      	; 0x1cd8 <ubRcv+0xa4>
    1cd4:	18 2f       	mov	r17, r24
    1cd6:	05 c0       	rjmp	.+10     	; 0x1ce2 <ubRcv+0xae>
		c -= 48;
	}
	else if((c > 64) && (c <71)){
    1cd8:	81 2f       	mov	r24, r17
    1cda:	81 54       	subi	r24, 0x41	; 65
    1cdc:	86 30       	cpi	r24, 0x06	; 6
    1cde:	08 f4       	brcc	.+2      	; 0x1ce2 <ubRcv+0xae>
		c -= 55;
    1ce0:	17 53       	subi	r17, 0x37	; 55
				//rprintfu08(c); rprintf("\t");
				//rprintfu16(rot_rough);
				//rprintfCRLF();
			}	
			else if(dis_flag){
				dis_rough = (char2hex(c) | (dis_rough << 4));	//store then increment	
    1ce2:	81 2f       	mov	r24, r17
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	20 91 08 03 	lds	r18, 0x0308
    1cea:	30 91 09 03 	lds	r19, 0x0309
    1cee:	54 e0       	ldi	r21, 0x04	; 4
    1cf0:	22 0f       	add	r18, r18
    1cf2:	33 1f       	adc	r19, r19
    1cf4:	5a 95       	dec	r21
    1cf6:	e1 f7       	brne	.-8      	; 0x1cf0 <ubRcv+0xbc>
    1cf8:	82 2b       	or	r24, r18
    1cfa:	93 2b       	or	r25, r19
    1cfc:	90 93 09 03 	sts	0x0309, r25
    1d00:	80 93 08 03 	sts	0x0308, r24
				dis_iter++;
    1d04:	80 91 0e 03 	lds	r24, 0x030E
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	80 93 0e 03 	sts	0x030E, r24
			//	rprintf("%c",c);
			}

			if(rot_iter == 4){
    1d0e:	80 91 0f 03 	lds	r24, 0x030F
    1d12:	84 30       	cpi	r24, 0x04	; 4
    1d14:	89 f4       	brne	.+34     	; 0x1d38 <ubRcv+0x104>
				//cmd_angle = retConv_s16(&rot_rough);
				cmd_angle = rot_rough;
    1d16:	80 91 0a 03 	lds	r24, 0x030A
    1d1a:	90 91 0b 03 	lds	r25, 0x030B
    1d1e:	90 93 ff 02 	sts	0x02FF, r25
    1d22:	80 93 fe 02 	sts	0x02FE, r24
				rot_flag = UNSET;
    1d26:	10 92 0d 03 	sts	0x030D, r1
				rot_iter = 0;
    1d2a:	10 92 0f 03 	sts	0x030F, r1
				//rprintfu16(rot_rough);
				//rprintf("\n\n");
				rot_rough = 0;
    1d2e:	10 92 0b 03 	sts	0x030B, r1
    1d32:	10 92 0a 03 	sts	0x030A, r1
    1d36:	1c c0       	rjmp	.+56     	; 0x1d70 <ubRcv+0x13c>
			}
			else if(dis_iter == 4){
    1d38:	80 91 0e 03 	lds	r24, 0x030E
    1d3c:	84 30       	cpi	r24, 0x04	; 4
    1d3e:	c1 f4       	brne	.+48     	; 0x1d70 <ubRcv+0x13c>
				cmd_dist = dis_rough;
    1d40:	80 91 08 03 	lds	r24, 0x0308
    1d44:	90 91 09 03 	lds	r25, 0x0309
    1d48:	aa 27       	eor	r26, r26
    1d4a:	97 fd       	sbrc	r25, 7
    1d4c:	a0 95       	com	r26
    1d4e:	ba 2f       	mov	r27, r26
    1d50:	80 93 00 03 	sts	0x0300, r24
    1d54:	90 93 01 03 	sts	0x0301, r25
    1d58:	a0 93 02 03 	sts	0x0302, r26
    1d5c:	b0 93 03 03 	sts	0x0303, r27
				dis_flag = UNSET;
    1d60:	10 92 0c 03 	sts	0x030C, r1
				dis_iter = 0;
    1d64:	10 92 0e 03 	sts	0x030E, r1
				dis_rough = 0;
    1d68:	10 92 09 03 	sts	0x0309, r1
    1d6c:	10 92 08 03 	sts	0x0308, r1
	//	if(xHigherPriorityTaskWoken == pdTRUE){
		//if data couldn't be posted, rprintf a message
		
			//taskYIELD();
	//	}
}
    1d70:	1f 91       	pop	r17
    1d72:	08 95       	ret

00001d74 <prvSetupHardware>:
	i2cSendByte((u08)robot.heading);
	rprintf("%d\n",(u08)robot.heading);
}
*/

void prvSetupHardware(){
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
	delay_cycles(65535);
	delay_cycles(65535);
	
	

	uartInit();  // initialize the UART (serial port)
    1d7c:	0e 94 39 26 	call	0x4c72	; 0x4c72 <uartInit>
    uartSetBaudRate(0, 38400); // set UARTE speed, for Bluetooth
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	56 e9       	ldi	r21, 0x96	; 150
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	0e 94 13 22 	call	0x4426	; 0x4426 <uartSetBaudRate>
    uartSetBaudRate(1, 115200); // set UARTD speed, for USB connection, up to 500k, try 115200 if it doesn't work
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	52 ec       	ldi	r21, 0xC2	; 194
    1d94:	61 e0       	ldi	r22, 0x01	; 1
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	0e 94 13 22 	call	0x4426	; 0x4426 <uartSetBaudRate>
    uartSetBaudRate(2, 38400); // set UARTH speed
    1d9c:	82 e0       	ldi	r24, 0x02	; 2
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	56 e9       	ldi	r21, 0x96	; 150
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	0e 94 13 22 	call	0x4426	; 0x4426 <uartSetBaudRate>
    uartSetBaudRate(3, 38400); // set UARTJ speed, for Blackfin
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	56 e9       	ldi	r21, 0x96	; 150
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	0e 94 13 22 	call	0x4426	; 0x4426 <uartSetBaudRate>
	//G=Ground, T=Tx (connect to external Rx), R=Rx (connect to external Tx)

	rprintfInit(uart1SendByte);// initialize rprintf system and configure uart1 (USB) for rprintf
    1db8:	8c e8       	ldi	r24, 0x8C	; 140
    1dba:	92 e2       	ldi	r25, 0x22	; 34
    1dbc:	0e 94 7d 27 	call	0x4efa	; 0x4efa <rprintfInit>

	configure_ports(); // configure which ports are analog, digital, etc.
    1dc0:	0e 94 80 03 	call	0x700	; 0x700 <configure_ports>
	*/

	
	//UART ISR *** UART ISR ***
	
	uartSetRxHandler(2, &fwdSer_L);
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	62 ef       	ldi	r22, 0xF2	; 242
    1dc8:	75 e0       	ldi	r23, 0x05	; 5
    1dca:	0e 94 08 22 	call	0x4410	; 0x4410 <uartSetRxHandler>
	uartSetRxHandler(0, &fwdSer_R);
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	6f e7       	ldi	r22, 0x7F	; 127
    1dd2:	76 e0       	ldi	r23, 0x06	; 6
    1dd4:	0e 94 08 22 	call	0x4410	; 0x4410 <uartSetRxHandler>
	uartSetRxHandler(3, &ubRcv);
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	6a e1       	ldi	r22, 0x1A	; 26
    1ddc:	7e e0       	ldi	r23, 0x0E	; 14
    1dde:	0e 94 08 22 	call	0x4410	; 0x4410 <uartSetRxHandler>
void LED_on(void)
	{PORT_OFF(PORTB,6);}
    1de2:	2e 98       	cbi	0x05, 6	; 5

	//UART ISR *** UART ISR ***

	LED_on();

	rprintf("\r\nSystem Warmed Up");
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <prvSetupHardware+0x72>
    1de6:	0f 92       	push	r0
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	ed b7       	in	r30, 0x3d	; 61
    1dec:	fe b7       	in	r31, 0x3e	; 62
    1dee:	81 83       	std	Z+1, r24	; 0x01
    1df0:	83 e9       	ldi	r24, 0x93	; 147
    1df2:	91 e0       	ldi	r25, 0x01	; 1
    1df4:	93 83       	std	Z+3, r25	; 0x03
    1df6:	82 83       	std	Z+2, r24	; 0x02
    1df8:	0e 94 a1 29 	call	0x5342	; 0x5342 <rprintf1RamRom>

	// initialize the timer system
 	init_timer0(TIMER_CLK_1024);
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	85 e0       	ldi	r24, 0x05	; 5
    1e04:	0e 94 1f 1c 	call	0x383e	; 0x383e <init_timer0>
// 	init_timer1(TIMER_CLK_64); // Timer 1 is initialized by FreeRTOS
 	init_timer2(TIMER2_CLK_64);
    1e08:	84 e0       	ldi	r24, 0x04	; 4
    1e0a:	0e 94 3f 1c 	call	0x387e	; 0x387e <init_timer2>
 	init_timer3(TIMER_CLK_64);
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	0e 94 4f 1c 	call	0x389e	; 0x389e <init_timer3>
 	init_timer4(TIMER_CLK_64);
    1e14:	83 e0       	ldi	r24, 0x03	; 3
    1e16:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <init_timer4>
 	init_timer5(TIMER_CLK_64);
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <init_timer5>

	a2dInit(); // initialize analog to digital converter (ADC)
    1e20:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
    1e24:	85 e0       	ldi	r24, 0x05	; 5
    1e26:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <a2dSetReference>
    1e30:	10 e0       	ldi	r17, 0x00	; 0
	//let system stabelize for X time
	for(i=0;i<16;i++)
		{
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
		rprintf(".");
    1e32:	01 e0       	ldi	r16, 0x01	; 1
    1e34:	c1 e9       	ldi	r28, 0x91	; 145
    1e36:	d1 e0       	ldi	r29, 0x01	; 1
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage

	//let system stabelize for X time
	for(i=0;i<16;i++)
		{
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
    1e38:	81 2f       	mov	r24, r17
    1e3a:	0e 94 67 27 	call	0x4ece	; 0x4ece <a2dConvert8bit>
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
		rprintf(".");
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <prvSetupHardware+0xcc>
    1e40:	0f 92       	push	r0
    1e42:	ed b7       	in	r30, 0x3d	; 61
    1e44:	fe b7       	in	r31, 0x3e	; 62
    1e46:	01 83       	std	Z+1, r16	; 0x01
    1e48:	d3 83       	std	Z+3, r29	; 0x03
    1e4a:	c2 83       	std	Z+2, r28	; 0x02
    1e4c:	0e 94 a1 29 	call	0x5342	; 0x5342 <rprintf1RamRom>
    1e50:	1f 5f       	subi	r17, 0xFF	; 255
	a2dInit(); // initialize analog to digital converter (ADC)
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage

	//let system stabelize for X time
	for(i=0;i<16;i++)
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	10 31       	cpi	r17, 0x10	; 16
    1e5a:	71 f7       	brne	.-36     	; 0x1e38 <prvSetupHardware+0xc4>


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
    1e5c:	2e 9a       	sbi	0x05, 6	; 5
		rprintf(".");
		}

	LED_off();

	rprintf("Initialization Complete \r\n");
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <prvSetupHardware+0xec>
    1e60:	0f 92       	push	r0
    1e62:	ed b7       	in	r30, 0x3d	; 61
    1e64:	fe b7       	in	r31, 0x3e	; 62
    1e66:	01 83       	std	Z+1, r16	; 0x01
    1e68:	86 e7       	ldi	r24, 0x76	; 118
    1e6a:	91 e0       	ldi	r25, 0x01	; 1
    1e6c:	93 83       	std	Z+3, r25	; 0x03
    1e6e:	82 83       	std	Z+2, r24	; 0x02
    1e70:	0e 94 a1 29 	call	0x5342	; 0x5342 <rprintf1RamRom>

	//reset all timers to zero
	reset_timer0();
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <reset_timer0>
	reset_timer1();
    1e7e:	0e 94 df 1b 	call	0x37be	; 0x37be <reset_timer1>
	reset_timer2();
    1e82:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <reset_timer2>
	reset_timer3();
    1e86:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <reset_timer3>
	reset_timer4();
    1e8a:	0e 94 04 1c 	call	0x3808	; 0x3808 <reset_timer4>
	reset_timer5();
    1e8e:	0e 94 11 1c 	call	0x3822	; 0x3822 <reset_timer5>



	/********PWM Setup***********/
	prvPWMSetup();
    1e92:	0e 94 50 04 	call	0x8a0	; 0x8a0 <prvPWMSetup>

}
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	08 95       	ret

00001ea0 <main>:
	}

}

int main(void)
{
    1ea0:	af 92       	push	r10
    1ea2:	bf 92       	push	r11
    1ea4:	cf 92       	push	r12
    1ea6:	df 92       	push	r13
    1ea8:	ef 92       	push	r14
    1eaa:	ff 92       	push	r15
    1eac:	0f 93       	push	r16
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
	prvSetupHardware();
    1eb2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <prvSetupHardware>

	

	xTaskCreate(vLight0On, "Light0", 100, NULL, 1, NULL);
    1eb6:	8c ed       	ldi	r24, 0xDC	; 220
    1eb8:	97 e0       	ldi	r25, 0x07	; 7
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	72 e0       	ldi	r23, 0x02	; 2
    1ebe:	44 e6       	ldi	r20, 0x64	; 100
    1ec0:	50 e0       	ldi	r21, 0x00	; 0
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	01 e0       	ldi	r16, 0x01	; 1
    1ec8:	ee 24       	eor	r14, r14
    1eca:	ff 24       	eor	r15, r15
    1ecc:	cc 24       	eor	r12, r12
    1ece:	dd 24       	eor	r13, r13
    1ed0:	aa 24       	eor	r10, r10
    1ed2:	bb 24       	eor	r11, r11
    1ed4:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGenericCreate>
	xTaskCreate(vLight1On, "Light1", 100, NULL, 1, NULL);
    1ed8:	85 ec       	ldi	r24, 0xC5	; 197
    1eda:	97 e0       	ldi	r25, 0x07	; 7
    1edc:	67 e0       	ldi	r22, 0x07	; 7
    1ede:	72 e0       	ldi	r23, 0x02	; 2
    1ee0:	44 e6       	ldi	r20, 0x64	; 100
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGenericCreate>
	xTaskCreate(vRampVel, "RampVel", 100, NULL, 1, NULL);
    1eec:	8e e2       	ldi	r24, 0x2E	; 46
    1eee:	97 e0       	ldi	r25, 0x07	; 7
    1ef0:	6e e0       	ldi	r22, 0x0E	; 14
    1ef2:	72 e0       	ldi	r23, 0x02	; 2
    1ef4:	44 e6       	ldi	r20, 0x64	; 100
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGenericCreate>
	xTaskCreate(vUpdatePose, "UpdatePs", 500, NULL, 1, NULL);
    1f00:	83 ec       	ldi	r24, 0xC3	; 195
    1f02:	99 e0       	ldi	r25, 0x09	; 9
    1f04:	66 e1       	ldi	r22, 0x16	; 22
    1f06:	72 e0       	ldi	r23, 0x02	; 2
    1f08:	44 ef       	ldi	r20, 0xF4	; 244
    1f0a:	51 e0       	ldi	r21, 0x01	; 1
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGenericCreate>
	xTaskCreate(vEnc_UpdatePose, "enUpdtPs", 500, NULL, 1, NULL);
    1f14:	8f e0       	ldi	r24, 0x0F	; 15
    1f16:	99 e0       	ldi	r25, 0x09	; 9
    1f18:	6f e1       	ldi	r22, 0x1F	; 31
    1f1a:	72 e0       	ldi	r23, 0x02	; 2
    1f1c:	44 ef       	ldi	r20, 0xF4	; 244
    1f1e:	51 e0       	ldi	r21, 0x01	; 1
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGenericCreate>
	xTaskCreate(vServoOsc, "ServoGo", 200, NULL, 1, NULL);
    1f28:	8f e8       	ldi	r24, 0x8F	; 143
    1f2a:	9a e0       	ldi	r25, 0x0A	; 10
    1f2c:	68 e2       	ldi	r22, 0x28	; 40
    1f2e:	72 e0       	ldi	r23, 0x02	; 2
    1f30:	48 ec       	ldi	r20, 0xC8	; 200
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGenericCreate>
//	xTaskCreate(vServoTm, "ServoTm", 200, NULL, 1, NULL);
	xTaskCreate(vPID_L, "vPID_L", 500, NULL, 2, NULL);
    1f3c:	8b e8       	ldi	r24, 0x8B	; 139
    1f3e:	98 e0       	ldi	r25, 0x08	; 8
    1f40:	60 e3       	ldi	r22, 0x30	; 48
    1f42:	72 e0       	ldi	r23, 0x02	; 2
    1f44:	44 ef       	ldi	r20, 0xF4	; 244
    1f46:	51 e0       	ldi	r21, 0x01	; 1
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	02 e0       	ldi	r16, 0x02	; 2
    1f4e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGenericCreate>
	xTaskCreate(vPID_R, "vPID_R", 500, NULL, 2, NULL);
    1f52:	83 ef       	ldi	r24, 0xF3	; 243
    1f54:	97 e0       	ldi	r25, 0x07	; 7
    1f56:	67 e3       	ldi	r22, 0x37	; 55
    1f58:	72 e0       	ldi	r23, 0x02	; 2
    1f5a:	44 ef       	ldi	r20, 0xF4	; 244
    1f5c:	51 e0       	ldi	r21, 0x01	; 1
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGenericCreate>
//	xTaskCreate(vScript, "vScript", 100, NULL, 2, NULL);
//	xTaskCreate(vReadIR, "vReadIR", 200, NULL, 1, NULL);

	vTaskStartScheduler();
    1f66:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <vTaskStartScheduler>
	for(;;){rprintf("DEATH\n");}
    1f6a:	01 e0       	ldi	r16, 0x01	; 1
    1f6c:	c6 e6       	ldi	r28, 0x66	; 102
    1f6e:	d1 e0       	ldi	r29, 0x01	; 1
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <main+0xd2>
    1f72:	0f 92       	push	r0
    1f74:	ed b7       	in	r30, 0x3d	; 61
    1f76:	fe b7       	in	r31, 0x3e	; 62
    1f78:	01 83       	std	Z+1, r16	; 0x01
    1f7a:	d3 83       	std	Z+3, r29	; 0x03
    1f7c:	c2 83       	std	Z+2, r28	; 0x02
    1f7e:	0e 94 a1 29 	call	0x5342	; 0x5342 <rprintf1RamRom>
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	f3 cf       	rjmp	.-26     	; 0x1f70 <main+0xd0>

00001f8a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    1f8a:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    1f8c:	9c 01       	movw	r18, r24
    1f8e:	2d 5f       	subi	r18, 0xFD	; 253
    1f90:	3f 4f       	sbci	r19, 0xFF	; 255
    1f92:	32 83       	std	Z+2, r19	; 0x02
    1f94:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1f96:	8f ef       	ldi	r24, 0xFF	; 255
    1f98:	9f ef       	ldi	r25, 0xFF	; 255
    1f9a:	94 83       	std	Z+4, r25	; 0x04
    1f9c:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1f9e:	36 83       	std	Z+6, r19	; 0x06
    1fa0:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1fa2:	30 87       	std	Z+8, r19	; 0x08
    1fa4:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = 0;
    1fa6:	10 82       	st	Z, r1
}
    1fa8:	08 95       	ret

00001faa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1faa:	fc 01       	movw	r30, r24
    1fac:	11 86       	std	Z+9, r1	; 0x09
    1fae:	10 86       	std	Z+8, r1	; 0x08
}
    1fb0:	08 95       	ret

00001fb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	ac 01       	movw	r20, r24
    1fb8:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1fba:	ec 01       	movw	r28, r24
    1fbc:	29 81       	ldd	r18, Y+1	; 0x01
    1fbe:	3a 81       	ldd	r19, Y+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    1fc0:	f9 01       	movw	r30, r18
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	93 81       	ldd	r25, Z+3	; 0x03
    1fc6:	13 96       	adiw	r26, 0x03	; 3
    1fc8:	9c 93       	st	X, r25
    1fca:	8e 93       	st	-X, r24
    1fcc:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	15 96       	adiw	r26, 0x05	; 5
    1fd4:	9c 93       	st	X, r25
    1fd6:	8e 93       	st	-X, r24
    1fd8:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1fda:	02 80       	ldd	r0, Z+2	; 0x02
    1fdc:	f3 81       	ldd	r31, Z+3	; 0x03
    1fde:	e0 2d       	mov	r30, r0
    1fe0:	75 83       	std	Z+5, r23	; 0x05
    1fe2:	64 83       	std	Z+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1fe4:	e9 01       	movw	r28, r18
    1fe6:	7b 83       	std	Y+3, r23	; 0x03
    1fe8:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1fea:	fa 01       	movw	r30, r20
    1fec:	72 83       	std	Z+2, r23	; 0x02
    1fee:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1ff0:	19 96       	adiw	r26, 0x09	; 9
    1ff2:	5c 93       	st	X, r21
    1ff4:	4e 93       	st	-X, r20
    1ff6:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
    1ff8:	80 81       	ld	r24, Z
    1ffa:	8f 5f       	subi	r24, 0xFF	; 255
    1ffc:	80 83       	st	Z, r24
}
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	08 95       	ret

00002004 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	9c 01       	movw	r18, r24
    200a:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    200c:	48 81       	ld	r20, Y
    200e:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as 
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the 
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2010:	8f ef       	ldi	r24, 0xFF	; 255
    2012:	4f 3f       	cpi	r20, 0xFF	; 255
    2014:	58 07       	cpc	r21, r24
    2016:	21 f4       	brne	.+8      	; 0x2020 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2018:	f9 01       	movw	r30, r18
    201a:	a7 81       	ldd	r26, Z+7	; 0x07
    201c:	b0 85       	ldd	r27, Z+8	; 0x08
    201e:	10 c0       	rjmp	.+32     	; 0x2040 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips. 
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2020:	d9 01       	movw	r26, r18
    2022:	13 96       	adiw	r26, 0x03	; 3
    2024:	04 c0       	rjmp	.+8      	; 0x202e <vListInsert+0x2a>
    2026:	12 96       	adiw	r26, 0x02	; 2
    2028:	0d 90       	ld	r0, X+
    202a:	bc 91       	ld	r27, X
    202c:	a0 2d       	mov	r26, r0
    202e:	12 96       	adiw	r26, 0x02	; 2
    2030:	ed 91       	ld	r30, X+
    2032:	fc 91       	ld	r31, X
    2034:	13 97       	sbiw	r26, 0x03	; 3
    2036:	80 81       	ld	r24, Z
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	48 17       	cp	r20, r24
    203c:	59 07       	cpc	r21, r25
    203e:	98 f7       	brcc	.-26     	; 0x2026 <vListInsert+0x22>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2040:	12 96       	adiw	r26, 0x02	; 2
    2042:	ed 91       	ld	r30, X+
    2044:	fc 91       	ld	r31, X
    2046:	13 97       	sbiw	r26, 0x03	; 3
    2048:	fb 83       	std	Y+3, r31	; 0x03
    204a:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    204c:	d5 83       	std	Z+5, r29	; 0x05
    204e:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    2050:	bd 83       	std	Y+5, r27	; 0x05
    2052:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2054:	13 96       	adiw	r26, 0x03	; 3
    2056:	dc 93       	st	X, r29
    2058:	ce 93       	st	-X, r28
    205a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    205c:	39 87       	std	Y+9, r19	; 0x09
    205e:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2060:	f9 01       	movw	r30, r18
    2062:	80 81       	ld	r24, Z
    2064:	8f 5f       	subi	r24, 0xFF	; 255
    2066:	80 83       	st	Z, r24
}
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	dc 01       	movw	r26, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2074:	12 96       	adiw	r26, 0x02	; 2
    2076:	ed 91       	ld	r30, X+
    2078:	fc 91       	ld	r31, X
    207a:	13 97       	sbiw	r26, 0x03	; 3
    207c:	14 96       	adiw	r26, 0x04	; 4
    207e:	8d 91       	ld	r24, X+
    2080:	9c 91       	ld	r25, X
    2082:	15 97       	sbiw	r26, 0x05	; 5
    2084:	95 83       	std	Z+5, r25	; 0x05
    2086:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2088:	14 96       	adiw	r26, 0x04	; 4
    208a:	cd 91       	ld	r28, X+
    208c:	dc 91       	ld	r29, X
    208e:	15 97       	sbiw	r26, 0x05	; 5
    2090:	fb 83       	std	Y+3, r31	; 0x03
    2092:	ea 83       	std	Y+2, r30	; 0x02
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2094:	18 96       	adiw	r26, 0x08	; 8
    2096:	ed 91       	ld	r30, X+
    2098:	fc 91       	ld	r31, X
    209a:	19 97       	sbiw	r26, 0x09	; 9

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    209c:	81 81       	ldd	r24, Z+1	; 0x01
    209e:	92 81       	ldd	r25, Z+2	; 0x02
    20a0:	8a 17       	cp	r24, r26
    20a2:	9b 07       	cpc	r25, r27
    20a4:	11 f4       	brne	.+4      	; 0x20aa <vListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    20a6:	d2 83       	std	Z+2, r29	; 0x02
    20a8:	c1 83       	std	Z+1, r28	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    20aa:	19 96       	adiw	r26, 0x09	; 9
    20ac:	1c 92       	st	X, r1
    20ae:	1e 92       	st	-X, r1
    20b0:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    20b2:	80 81       	ld	r24, Z
    20b4:	81 50       	subi	r24, 0x01	; 1
    20b6:	80 83       	st	Z, r24
}
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

000020be <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    20be:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	taskENTER_CRITICAL();
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    20c6:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    20c8:	0f 90       	pop	r0
    20ca:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    20cc:	08 95       	ret

000020ce <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    20ce:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	uxReturn = pxQueue->uxMessagesWaiting;
    20d0:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
}
    20d2:	08 95       	ret

000020d4 <xQueueIsQueueEmptyFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    20d4:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    20d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	88 23       	and	r24, r24
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <xQueueIsQueueEmptyFromISR+0xc>
    20de:	91 e0       	ldi	r25, 0x01	; 1

	return xReturn;
}
    20e0:	89 2f       	mov	r24, r25
    20e2:	08 95       	ret

000020e4 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    20e4:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    20e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    20ec:	98 17       	cp	r25, r24
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <xQueueIsQueueFullFromISR+0xe>
    20f0:	21 e0       	ldi	r18, 0x01	; 1

	return xReturn;
}
    20f2:	82 2f       	mov	r24, r18
    20f4:	08 95       	ret

000020f6 <vQueueDelete>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	8c 01       	movw	r16, r24
	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    20fc:	fc 01       	movw	r30, r24
    20fe:	80 81       	ld	r24, Z
    2100:	91 81       	ldd	r25, Z+1	; 0x01
    2102:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <vPortFree>
	vPortFree( pxQueue );
    2106:	c8 01       	movw	r24, r16
    2108:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <vPortFree>
}
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	08 95       	ret

00002112 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	ec 01       	movw	r28, r24
    211c:	fb 01       	movw	r30, r22
    211e:	8a 01       	movw	r16, r20
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2120:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2122:	88 23       	and	r24, r24
    2124:	81 f1       	breq	.+96     	; 0x2186 <xQueueReceiveFromISR+0x74>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    2126:	48 81       	ld	r20, Y
    2128:	59 81       	ldd	r21, Y+1	; 0x01
    212a:	41 15       	cp	r20, r1
    212c:	51 05       	cpc	r21, r1
    212e:	a9 f0       	breq	.+42     	; 0x215a <xQueueReceiveFromISR+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    2130:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2132:	2e 81       	ldd	r18, Y+6	; 0x06
    2134:	3f 81       	ldd	r19, Y+7	; 0x07
    2136:	28 0f       	add	r18, r24
    2138:	31 1d       	adc	r19, r1
    213a:	3f 83       	std	Y+7, r19	; 0x07
    213c:	2e 83       	std	Y+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	9b 81       	ldd	r25, Y+3	; 0x03
    2142:	28 17       	cp	r18, r24
    2144:	39 07       	cpc	r19, r25
    2146:	10 f0       	brcs	.+4      	; 0x214c <xQueueReceiveFromISR+0x3a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    2148:	5f 83       	std	Y+7, r21	; 0x07
    214a:	4e 83       	std	Y+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    214c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    214e:	6e 81       	ldd	r22, Y+6	; 0x06
    2150:	7f 81       	ldd	r23, Y+7	; 0x07
    2152:	cf 01       	movw	r24, r30
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	0e 94 bb 2c 	call	0x5976	; 0x5976 <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    215a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    215c:	81 50       	subi	r24, 0x01	; 1
    215e:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2160:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2162:	8f 3f       	cpi	r24, 0xFF	; 255
    2164:	69 f4       	brne	.+26     	; 0x2180 <xQueueReceiveFromISR+0x6e>
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    2166:	88 85       	ldd	r24, Y+8	; 0x08
    2168:	88 23       	and	r24, r24
    216a:	61 f0       	breq	.+24     	; 0x2184 <xQueueReceiveFromISR+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    216c:	ce 01       	movw	r24, r28
    216e:	08 96       	adiw	r24, 0x08	; 8
    2170:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    2174:	88 23       	and	r24, r24
    2176:	31 f0       	breq	.+12     	; 0x2184 <xQueueReceiveFromISR+0x72>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	f8 01       	movw	r30, r16
    217c:	80 83       	st	Z, r24
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <xQueueReceiveFromISR+0x74>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	8d 8f       	std	Y+29, r24	; 0x1d
    2184:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	ec 01       	movw	r28, r24
    2196:	84 2f       	mov	r24, r20
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2198:	4c 8d       	ldd	r20, Y+28	; 0x1c
    219a:	44 23       	and	r20, r20
    219c:	a1 f1       	breq	.+104    	; 0x2206 <__stack+0x7>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    219e:	88 23       	and	r24, r24
    21a0:	b1 f4       	brne	.+44     	; 0x21ce <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    21a2:	8c 81       	ldd	r24, Y+4	; 0x04
    21a4:	9d 81       	ldd	r25, Y+5	; 0x05
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	0e 94 bb 2c 	call	0x5976	; 0x5976 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    21ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21ae:	2c 81       	ldd	r18, Y+4	; 0x04
    21b0:	3d 81       	ldd	r19, Y+5	; 0x05
    21b2:	28 0f       	add	r18, r24
    21b4:	31 1d       	adc	r19, r1
    21b6:	3d 83       	std	Y+5, r19	; 0x05
    21b8:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	9b 81       	ldd	r25, Y+3	; 0x03
    21be:	28 17       	cp	r18, r24
    21c0:	39 07       	cpc	r19, r25
    21c2:	08 f1       	brcs	.+66     	; 0x2206 <__stack+0x7>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    21c4:	88 81       	ld	r24, Y
    21c6:	99 81       	ldd	r25, Y+1	; 0x01
    21c8:	9d 83       	std	Y+5, r25	; 0x05
    21ca:	8c 83       	std	Y+4, r24	; 0x04
    21cc:	1c c0       	rjmp	.+56     	; 0x2206 <__stack+0x7>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    21ce:	8e 81       	ldd	r24, Y+6	; 0x06
    21d0:	9f 81       	ldd	r25, Y+7	; 0x07
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	0e 94 bb 2c 	call	0x5976	; 0x5976 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    21d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	44 27       	eor	r20, r20
    21de:	55 27       	eor	r21, r21
    21e0:	48 1b       	sub	r20, r24
    21e2:	59 0b       	sbc	r21, r25
    21e4:	8e 81       	ldd	r24, Y+6	; 0x06
    21e6:	9f 81       	ldd	r25, Y+7	; 0x07
    21e8:	84 0f       	add	r24, r20
    21ea:	95 1f       	adc	r25, r21
    21ec:	9f 83       	std	Y+7, r25	; 0x07
    21ee:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    21f0:	28 81       	ld	r18, Y
    21f2:	39 81       	ldd	r19, Y+1	; 0x01
    21f4:	82 17       	cp	r24, r18
    21f6:	93 07       	cpc	r25, r19
    21f8:	30 f4       	brcc	.+12     	; 0x2206 <__stack+0x7>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	9b 81       	ldd	r25, Y+3	; 0x03
    21fe:	84 0f       	add	r24, r20
    2200:	95 1f       	adc	r25, r21
    2202:	9f 83       	std	Y+7, r25	; 0x07
    2204:	8e 83       	std	Y+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2206:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2208:	8f 5f       	subi	r24, 0xFF	; 255
    220a:	8a 8f       	std	Y+26, r24	; 0x1a
}
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret

00002212 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2212:	0f 93       	push	r16
    2214:	1f 93       	push	r17
    2216:	cf 93       	push	r28
    2218:	df 93       	push	r29
    221a:	ec 01       	movw	r28, r24
    221c:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    221e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2222:	98 17       	cp	r25, r24
    2224:	10 f0       	brcs	.+4      	; 0x222a <xQueueGenericSendFromISR+0x18>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	17 c0       	rjmp	.+46     	; 0x2258 <xQueueGenericSendFromISR+0x46>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    222a:	ce 01       	movw	r24, r28
    222c:	42 2f       	mov	r20, r18
    222e:	0e 94 c8 10 	call	0x2190	; 0x2190 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2232:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2234:	8f 3f       	cpi	r24, 0xFF	; 255
    2236:	69 f4       	brne	.+26     	; 0x2252 <xQueueGenericSendFromISR+0x40>
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    2238:	89 89       	ldd	r24, Y+17	; 0x11
    223a:	88 23       	and	r24, r24
    223c:	61 f0       	breq	.+24     	; 0x2256 <xQueueGenericSendFromISR+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    223e:	ce 01       	movw	r24, r28
    2240:	41 96       	adiw	r24, 0x11	; 17
    2242:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    2246:	88 23       	and	r24, r24
    2248:	31 f0       	breq	.+12     	; 0x2256 <xQueueGenericSendFromISR+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	f8 01       	movw	r30, r16
    224e:	80 83       	st	Z, r24
    2250:	03 c0       	rjmp	.+6      	; 0x2258 <xQueueGenericSendFromISR+0x46>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2252:	8f 5f       	subi	r24, 0xFF	; 255
    2254:	8e 8f       	std	Y+30, r24	; 0x1e
    2256:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	1f 91       	pop	r17
    225e:	0f 91       	pop	r16
    2260:	08 95       	ret

00002262 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	0f 92       	push	r0
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2272:	8c 01       	movw	r16, r24
    2274:	0f 5e       	subi	r16, 0xEF	; 239
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	0d c0       	rjmp	.+26     	; 0x2294 <prvUnlockQueue+0x32>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    227a:	89 89       	ldd	r24, Y+17	; 0x11
    227c:	88 23       	and	r24, r24
    227e:	69 f0       	breq	.+26     	; 0x229a <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2280:	c8 01       	movw	r24, r16
    2282:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    2286:	88 23       	and	r24, r24
    2288:	11 f0       	breq	.+4      	; 0x228e <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    228a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    228e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2290:	81 50       	subi	r24, 0x01	; 1
    2292:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2294:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2296:	18 16       	cp	r1, r24
    2298:	84 f3       	brlt	.-32     	; 0x227a <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    229a:	8f ef       	ldi	r24, 0xFF	; 255
    229c:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    229e:	0f 90       	pop	r0
    22a0:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    22a8:	8e 01       	movw	r16, r28
    22aa:	08 5f       	subi	r16, 0xF8	; 248
    22ac:	1f 4f       	sbci	r17, 0xFF	; 255
    22ae:	0d c0       	rjmp	.+26     	; 0x22ca <prvUnlockQueue+0x68>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    22b0:	88 85       	ldd	r24, Y+8	; 0x08
    22b2:	88 23       	and	r24, r24
    22b4:	69 f0       	breq	.+26     	; 0x22d0 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    22b6:	c8 01       	movw	r24, r16
    22b8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    22bc:	88 23       	and	r24, r24
    22be:	11 f0       	breq	.+4      	; 0x22c4 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    22c0:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    22c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22c6:	81 50       	subi	r24, 0x01	; 1
    22c8:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    22ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22cc:	18 16       	cp	r1, r24
    22ce:	84 f3       	brlt	.-32     	; 0x22b0 <prvUnlockQueue+0x4e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    22d0:	8f ef       	ldi	r24, 0xFF	; 255
    22d2:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    22d4:	0f 90       	pop	r0
    22d6:	0f be       	out	0x3f, r0	; 63
}
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	08 95       	ret

000022e2 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    22e2:	7f 92       	push	r7
    22e4:	8f 92       	push	r8
    22e6:	9f 92       	push	r9
    22e8:	af 92       	push	r10
    22ea:	bf 92       	push	r11
    22ec:	cf 92       	push	r12
    22ee:	df 92       	push	r13
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <xQueueGenericReceive+0x1c>
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <xQueueGenericReceive+0x1e>
    2300:	0f 92       	push	r0
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	8c 01       	movw	r16, r24
    2308:	96 2e       	mov	r9, r22
    230a:	87 2e       	mov	r8, r23
    230c:	5d 83       	std	Y+5, r21	; 0x05
    230e:	4c 83       	std	Y+4, r20	; 0x04
    2310:	72 2e       	mov	r7, r18
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2312:	91 e1       	ldi	r25, 0x11	; 17
    2314:	c9 2e       	mov	r12, r25
    2316:	d1 2c       	mov	r13, r1
    2318:	c0 0e       	add	r12, r16
    231a:	d1 1e       	adc	r13, r17
    231c:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    231e:	7e 01       	movw	r14, r28
    2320:	08 94       	sec
    2322:	e1 1c       	adc	r14, r1
    2324:	f1 1c       	adc	r15, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2326:	84 e0       	ldi	r24, 0x04	; 4
    2328:	a8 2e       	mov	r10, r24
    232a:	b1 2c       	mov	r11, r1
    232c:	ac 0e       	add	r10, r28
    232e:	bd 1e       	adc	r11, r29
    2330:	01 c0       	rjmp	.+2      	; 0x2334 <xQueueGenericReceive+0x52>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2332:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    233a:	f8 01       	movw	r30, r16
    233c:	82 8d       	ldd	r24, Z+26	; 0x1a
    233e:	88 23       	and	r24, r24
    2340:	09 f4       	brne	.+2      	; 0x2344 <xQueueGenericReceive+0x62>
    2342:	3e c0       	rjmp	.+124    	; 0x23c0 <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2344:	e6 80       	ldd	r14, Z+6	; 0x06
    2346:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    2348:	40 81       	ld	r20, Z
    234a:	51 81       	ldd	r21, Z+1	; 0x01
    234c:	41 15       	cp	r20, r1
    234e:	51 05       	cpc	r21, r1
    2350:	b1 f0       	breq	.+44     	; 0x237e <xQueueGenericReceive+0x9c>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    2352:	84 8d       	ldd	r24, Z+28	; 0x1c
    2354:	97 01       	movw	r18, r14
    2356:	28 0f       	add	r18, r24
    2358:	31 1d       	adc	r19, r1
    235a:	37 83       	std	Z+7, r19	; 0x07
    235c:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	28 17       	cp	r18, r24
    2364:	39 07       	cpc	r19, r25
    2366:	10 f0       	brcs	.+4      	; 0x236c <xQueueGenericReceive+0x8a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    2368:	57 83       	std	Z+7, r21	; 0x07
    236a:	46 83       	std	Z+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    236c:	f8 01       	movw	r30, r16
    236e:	44 8d       	ldd	r20, Z+28	; 0x1c
    2370:	66 81       	ldd	r22, Z+6	; 0x06
    2372:	77 81       	ldd	r23, Z+7	; 0x07
    2374:	89 2d       	mov	r24, r9
    2376:	98 2d       	mov	r25, r8
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	0e 94 bb 2c 	call	0x5976	; 0x5976 <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    237e:	77 20       	and	r7, r7
    2380:	71 f4       	brne	.+28     	; 0x239e <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2382:	f8 01       	movw	r30, r16
    2384:	82 8d       	ldd	r24, Z+26	; 0x1a
    2386:	81 50       	subi	r24, 0x01	; 1
    2388:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    238a:	80 85       	ldd	r24, Z+8	; 0x08
    238c:	88 23       	and	r24, r24
    238e:	a1 f0       	breq	.+40     	; 0x23b8 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2390:	c8 01       	movw	r24, r16
    2392:	08 96       	adiw	r24, 0x08	; 8
    2394:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    2398:	81 30       	cpi	r24, 0x01	; 1
    239a:	71 f4       	brne	.+28     	; 0x23b8 <xQueueGenericReceive+0xd6>
    239c:	0b c0       	rjmp	.+22     	; 0x23b4 <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    239e:	f8 01       	movw	r30, r16
    23a0:	f7 82       	std	Z+7, r15	; 0x07
    23a2:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    23a4:	81 89       	ldd	r24, Z+17	; 0x11
    23a6:	88 23       	and	r24, r24
    23a8:	39 f0       	breq	.+14     	; 0x23b8 <xQueueGenericReceive+0xd6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    23aa:	c6 01       	movw	r24, r12
    23ac:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    23b0:	88 23       	and	r24, r24
    23b2:	11 f0       	breq	.+4      	; 0x23b8 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    23b4:	0e 94 b1 18 	call	0x3162	; 0x3162 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    23b8:	0f 90       	pop	r0
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	4a c0       	rjmp	.+148    	; 0x2454 <xQueueGenericReceive+0x172>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    23c0:	8c 81       	ldd	r24, Y+4	; 0x04
    23c2:	9d 81       	ldd	r25, Y+5	; 0x05
    23c4:	89 2b       	or	r24, r25
    23c6:	19 f4       	brne	.+6      	; 0x23ce <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    23c8:	0f 90       	pop	r0
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	42 c0       	rjmp	.+132    	; 0x2452 <xQueueGenericReceive+0x170>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    23ce:	22 23       	and	r18, r18
    23d0:	19 f4       	brne	.+6      	; 0x23d8 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    23d2:	c7 01       	movw	r24, r14
    23d4:	0e 94 a0 13 	call	0x2740	; 0x2740 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    23d8:	0f 90       	pop	r0
    23da:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    23dc:	0e 94 44 13 	call	0x2688	; 0x2688 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	0f 92       	push	r0
    23e6:	f8 01       	movw	r30, r16
    23e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    23ea:	8f 3f       	cpi	r24, 0xFF	; 255
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <xQueueGenericReceive+0x10e>
    23ee:	15 8e       	std	Z+29, r1	; 0x1d
    23f0:	f8 01       	movw	r30, r16
    23f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    23f4:	8f 3f       	cpi	r24, 0xFF	; 255
    23f6:	09 f4       	brne	.+2      	; 0x23fa <xQueueGenericReceive+0x118>
    23f8:	16 8e       	std	Z+30, r1	; 0x1e
    23fa:	0f 90       	pop	r0
    23fc:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    23fe:	c7 01       	movw	r24, r14
    2400:	b5 01       	movw	r22, r10
    2402:	0e 94 ab 13 	call	0x2756	; 0x2756 <xTaskCheckForTimeOut>
    2406:	88 23       	and	r24, r24
    2408:	f9 f4       	brne	.+62     	; 0x2448 <xQueueGenericReceive+0x166>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2410:	f8 01       	movw	r30, r16
    2412:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    2414:	0f 90       	pop	r0
    2416:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
    2418:	88 23       	and	r24, r24
    241a:	81 f4       	brne	.+32     	; 0x243c <xQueueGenericReceive+0x15a>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    241c:	6c 81       	ldd	r22, Y+4	; 0x04
    241e:	7d 81       	ldd	r23, Y+5	; 0x05
    2420:	c6 01       	movw	r24, r12
    2422:	0e 94 a2 14 	call	0x2944	; 0x2944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2426:	c8 01       	movw	r24, r16
    2428:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
				if( !xTaskResumeAll() )
    242c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskResumeAll>
    2430:	88 23       	and	r24, r24
    2432:	09 f0       	breq	.+2      	; 0x2436 <xQueueGenericReceive+0x154>
    2434:	7e cf       	rjmp	.-260    	; 0x2332 <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    2436:	0e 94 b1 18 	call	0x3162	; 0x3162 <vPortYield>
    243a:	7b cf       	rjmp	.-266    	; 0x2332 <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    243c:	c8 01       	movw	r24, r16
    243e:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2442:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskResumeAll>
    2446:	75 cf       	rjmp	.-278    	; 0x2332 <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2448:	c8 01       	movw	r24, r16
    244a:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    244e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskResumeAll>
    2452:	80 e0       	ldi	r24, 0x00	; 0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	1f 91       	pop	r17
    2464:	0f 91       	pop	r16
    2466:	ff 90       	pop	r15
    2468:	ef 90       	pop	r14
    246a:	df 90       	pop	r13
    246c:	cf 90       	pop	r12
    246e:	bf 90       	pop	r11
    2470:	af 90       	pop	r10
    2472:	9f 90       	pop	r9
    2474:	8f 90       	pop	r8
    2476:	7f 90       	pop	r7
    2478:	08 95       	ret

0000247a <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    247a:	7f 92       	push	r7
    247c:	8f 92       	push	r8
    247e:	9f 92       	push	r9
    2480:	af 92       	push	r10
    2482:	bf 92       	push	r11
    2484:	cf 92       	push	r12
    2486:	df 92       	push	r13
    2488:	ef 92       	push	r14
    248a:	ff 92       	push	r15
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	00 d0       	rcall	.+0      	; 0x2496 <xQueueGenericSend+0x1c>
    2496:	00 d0       	rcall	.+0      	; 0x2498 <xQueueGenericSend+0x1e>
    2498:	0f 92       	push	r0
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	8c 01       	movw	r16, r24
    24a0:	6b 01       	movw	r12, r22
    24a2:	5d 83       	std	Y+5, r21	; 0x05
    24a4:	4c 83       	std	Y+4, r20	; 0x04
    24a6:	72 2e       	mov	r7, r18
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    24a8:	48 e0       	ldi	r20, 0x08	; 8
    24aa:	e4 2e       	mov	r14, r20
    24ac:	f1 2c       	mov	r15, r1
    24ae:	e8 0e       	add	r14, r24
    24b0:	f9 1e       	adc	r15, r25
    24b2:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    24b4:	5e 01       	movw	r10, r28
    24b6:	08 94       	sec
    24b8:	a1 1c       	adc	r10, r1
    24ba:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    24bc:	34 e0       	ldi	r19, 0x04	; 4
    24be:	83 2e       	mov	r8, r19
    24c0:	91 2c       	mov	r9, r1
    24c2:	8c 0e       	add	r8, r28
    24c4:	9d 1e       	adc	r9, r29
    24c6:	01 c0       	rjmp	.+2      	; 0x24ca <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    24c8:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    24d0:	f8 01       	movw	r30, r16
    24d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    24d4:	83 8d       	ldd	r24, Z+27	; 0x1b
    24d6:	98 17       	cp	r25, r24
    24d8:	a8 f4       	brcc	.+42     	; 0x2504 <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    24da:	c8 01       	movw	r24, r16
    24dc:	b6 01       	movw	r22, r12
    24de:	47 2d       	mov	r20, r7
    24e0:	0e 94 c8 10 	call	0x2190	; 0x2190 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    24e4:	f8 01       	movw	r30, r16
    24e6:	81 89       	ldd	r24, Z+17	; 0x11
    24e8:	88 23       	and	r24, r24
    24ea:	41 f0       	breq	.+16     	; 0x24fc <xQueueGenericSend+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    24ec:	c8 01       	movw	r24, r16
    24ee:	41 96       	adiw	r24, 0x11	; 17
    24f0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	11 f4       	brne	.+4      	; 0x24fc <xQueueGenericSend+0x82>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    24f8:	0e 94 b1 18 	call	0x3162	; 0x3162 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    24fc:	0f 90       	pop	r0
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	4c c0       	rjmp	.+152    	; 0x259c <xQueueGenericSend+0x122>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	9d 81       	ldd	r25, Y+5	; 0x05
    2508:	89 2b       	or	r24, r25
    250a:	19 f4       	brne	.+6      	; 0x2512 <xQueueGenericSend+0x98>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    250c:	0f 90       	pop	r0
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	44 c0       	rjmp	.+136    	; 0x259a <xQueueGenericSend+0x120>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    2512:	22 23       	and	r18, r18
    2514:	19 f4       	brne	.+6      	; 0x251c <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2516:	c5 01       	movw	r24, r10
    2518:	0e 94 a0 13 	call	0x2740	; 0x2740 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    251c:	0f 90       	pop	r0
    251e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2520:	0e 94 44 13 	call	0x2688	; 0x2688 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	0f 92       	push	r0
    252a:	f8 01       	movw	r30, r16
    252c:	85 8d       	ldd	r24, Z+29	; 0x1d
    252e:	8f 3f       	cpi	r24, 0xFF	; 255
    2530:	09 f4       	brne	.+2      	; 0x2534 <xQueueGenericSend+0xba>
    2532:	15 8e       	std	Z+29, r1	; 0x1d
    2534:	f8 01       	movw	r30, r16
    2536:	86 8d       	ldd	r24, Z+30	; 0x1e
    2538:	8f 3f       	cpi	r24, 0xFF	; 255
    253a:	09 f4       	brne	.+2      	; 0x253e <xQueueGenericSend+0xc4>
    253c:	16 8e       	std	Z+30, r1	; 0x1e
    253e:	0f 90       	pop	r0
    2540:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2542:	c5 01       	movw	r24, r10
    2544:	b4 01       	movw	r22, r8
    2546:	0e 94 ab 13 	call	0x2756	; 0x2756 <xTaskCheckForTimeOut>
    254a:	88 23       	and	r24, r24
    254c:	09 f5       	brne	.+66     	; 0x2590 <xQueueGenericSend+0x116>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    2554:	f8 01       	movw	r30, r16
    2556:	92 8d       	ldd	r25, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
    255c:	f8 01       	movw	r30, r16
    255e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2560:	98 17       	cp	r25, r24
    2562:	81 f4       	brne	.+32     	; 0x2584 <xQueueGenericSend+0x10a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2564:	6c 81       	ldd	r22, Y+4	; 0x04
    2566:	7d 81       	ldd	r23, Y+5	; 0x05
    2568:	c7 01       	movw	r24, r14
    256a:	0e 94 a2 14 	call	0x2944	; 0x2944 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    256e:	c8 01       	movw	r24, r16
    2570:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
    2574:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskResumeAll>
    2578:	88 23       	and	r24, r24
    257a:	09 f0       	breq	.+2      	; 0x257e <xQueueGenericSend+0x104>
    257c:	a5 cf       	rjmp	.-182    	; 0x24c8 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    257e:	0e 94 b1 18 	call	0x3162	; 0x3162 <vPortYield>
    2582:	a2 cf       	rjmp	.-188    	; 0x24c8 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2584:	c8 01       	movw	r24, r16
    2586:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    258a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskResumeAll>
    258e:	9c cf       	rjmp	.-200    	; 0x24c8 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2590:	c8 01       	movw	r24, r16
    2592:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2596:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskResumeAll>
    259a:	80 e0       	ldi	r24, 0x00	; 0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	ff 90       	pop	r15
    25b0:	ef 90       	pop	r14
    25b2:	df 90       	pop	r13
    25b4:	cf 90       	pop	r12
    25b6:	bf 90       	pop	r11
    25b8:	af 90       	pop	r10
    25ba:	9f 90       	pop	r9
    25bc:	8f 90       	pop	r8
    25be:	7f 90       	pop	r7
    25c0:	08 95       	ret

000025c2 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    25c2:	8f 92       	push	r8
    25c4:	9f 92       	push	r9
    25c6:	af 92       	push	r10
    25c8:	bf 92       	push	r11
    25ca:	cf 92       	push	r12
    25cc:	df 92       	push	r13
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	98 2e       	mov	r9, r24
    25dc:	86 2e       	mov	r8, r22
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    25de:	88 23       	and	r24, r24
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <xQueueCreate+0x22>
    25e2:	42 c0       	rjmp	.+132    	; 0x2668 <xQueueCreate+0xa6>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    25e4:	8f e1       	ldi	r24, 0x1F	; 31
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <pvPortMalloc>
    25ec:	8c 01       	movw	r16, r24
    25ee:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	e1 f1       	breq	.+120    	; 0x266c <xQueueCreate+0xaa>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    25f4:	c9 2c       	mov	r12, r9
    25f6:	dd 24       	eor	r13, r13
    25f8:	a8 2c       	mov	r10, r8
    25fa:	bb 24       	eor	r11, r11
    25fc:	ac 9c       	mul	r10, r12
    25fe:	70 01       	movw	r14, r0
    2600:	ad 9c       	mul	r10, r13
    2602:	f0 0c       	add	r15, r0
    2604:	bc 9c       	mul	r11, r12
    2606:	f0 0c       	add	r15, r0
    2608:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    260a:	c7 01       	movw	r24, r14
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <pvPortMalloc>
    2612:	9c 01       	movw	r18, r24
    2614:	99 83       	std	Y+1, r25	; 0x01
    2616:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	19 f1       	breq	.+70     	; 0x2662 <xQueueCreate+0xa0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    261c:	e8 0e       	add	r14, r24
    261e:	f9 1e       	adc	r15, r25
    2620:	fb 82       	std	Y+3, r15	; 0x03
    2622:	ea 82       	std	Y+2, r14	; 0x02
				pxNewQueue->uxMessagesWaiting = 0;
    2624:	1a 8e       	std	Y+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    2626:	9d 83       	std	Y+5, r25	; 0x05
    2628:	8c 83       	std	Y+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    262a:	08 94       	sec
    262c:	c1 08       	sbc	r12, r1
    262e:	d1 08       	sbc	r13, r1
    2630:	ca 9c       	mul	r12, r10
    2632:	c0 01       	movw	r24, r0
    2634:	cb 9c       	mul	r12, r11
    2636:	90 0d       	add	r25, r0
    2638:	da 9c       	mul	r13, r10
    263a:	90 0d       	add	r25, r0
    263c:	11 24       	eor	r1, r1
    263e:	28 0f       	add	r18, r24
    2640:	39 1f       	adc	r19, r25
    2642:	3f 83       	std	Y+7, r19	; 0x07
    2644:	2e 83       	std	Y+6, r18	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    2646:	9b 8e       	std	Y+27, r9	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    2648:	8c 8e       	std	Y+28, r8	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    264a:	8f ef       	ldi	r24, 0xFF	; 255
    264c:	8d 8f       	std	Y+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    264e:	8e 8f       	std	Y+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2650:	c8 01       	movw	r24, r16
    2652:	08 96       	adiw	r24, 0x08	; 8
    2654:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2658:	c8 01       	movw	r24, r16
    265a:	41 96       	adiw	r24, 0x11	; 17
    265c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
    2660:	05 c0       	rjmp	.+10     	; 0x266c <xQueueCreate+0xaa>
				return  pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    2662:	c8 01       	movw	r24, r16
    2664:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <vPortFree>
    2668:	c0 e0       	ldi	r28, 0x00	; 0
    266a:	d0 e0       	ldi	r29, 0x00	; 0
	}

	/* Will only reach here if we could not allocate enough memory or no memory
	was required. */
	return NULL;
}
    266c:	ce 01       	movw	r24, r28
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	1f 91       	pop	r17
    2674:	0f 91       	pop	r16
    2676:	ff 90       	pop	r15
    2678:	ef 90       	pop	r14
    267a:	df 90       	pop	r13
    267c:	cf 90       	pop	r12
    267e:	bf 90       	pop	r11
    2680:	af 90       	pop	r10
    2682:	9f 90       	pop	r9
    2684:	8f 90       	pop	r8
    2686:	08 95       	ret

00002688 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2688:	80 91 39 03 	lds	r24, 0x0339
    268c:	8f 5f       	subi	r24, 0xFF	; 255
    268e:	80 93 39 03 	sts	0x0339, r24
}
    2692:	08 95       	ret

00002694 <xTaskGetTickCount>:
portTickType xTaskGetTickCount( void )
{
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portENTER_CRITICAL();
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    269a:	20 91 37 03 	lds	r18, 0x0337
    269e:	30 91 38 03 	lds	r19, 0x0338
	}
	portEXIT_CRITICAL();
    26a2:	0f 90       	pop	r0
    26a4:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    26a6:	c9 01       	movw	r24, r18
    26a8:	08 95       	ret

000026aa <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
	return xTickCount;
    26aa:	20 91 37 03 	lds	r18, 0x0337
    26ae:	30 91 38 03 	lds	r19, 0x0338
}
    26b2:	c9 01       	movw	r24, r18
    26b4:	08 95       	ret

000026b6 <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    26b6:	80 91 3c 03 	lds	r24, 0x033C
}
    26ba:	08 95       	ret

000026bc <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    26bc:	80 91 39 03 	lds	r24, 0x0339
    26c0:	88 23       	and	r24, r24
    26c2:	51 f0       	breq	.+20     	; 0x26d8 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	80 93 35 03 	sts	0x0335, r24
    26ca:	08 95       	ret
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
	{
		--uxTopReadyPriority;
    26cc:	80 91 3a 03 	lds	r24, 0x033A
    26d0:	81 50       	subi	r24, 0x01	; 1
    26d2:	80 93 3a 03 	sts	0x033A, r24
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <vTaskSwitchContext+0x1e>

	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    26d8:	99 e0       	ldi	r25, 0x09	; 9
    26da:	e0 91 3a 03 	lds	r30, 0x033A
    26de:	e9 9f       	mul	r30, r25
    26e0:	f0 01       	movw	r30, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	ef 5b       	subi	r30, 0xBF	; 191
    26e6:	fc 4f       	sbci	r31, 0xFC	; 252
    26e8:	80 81       	ld	r24, Z
    26ea:	88 23       	and	r24, r24
    26ec:	79 f3       	breq	.-34     	; 0x26cc <vTaskSwitchContext+0x10>
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    26ee:	90 91 3a 03 	lds	r25, 0x033A
    26f2:	89 e0       	ldi	r24, 0x09	; 9
    26f4:	98 9f       	mul	r25, r24
    26f6:	d0 01       	movw	r26, r0
    26f8:	11 24       	eor	r1, r1
    26fa:	af 5b       	subi	r26, 0xBF	; 191
    26fc:	bc 4f       	sbci	r27, 0xFC	; 252
    26fe:	11 96       	adiw	r26, 0x01	; 1
    2700:	ed 91       	ld	r30, X+
    2702:	fc 91       	ld	r31, X
    2704:	12 97       	sbiw	r26, 0x02	; 2
    2706:	02 80       	ldd	r0, Z+2	; 0x02
    2708:	f3 81       	ldd	r31, Z+3	; 0x03
    270a:	e0 2d       	mov	r30, r0
    270c:	12 96       	adiw	r26, 0x02	; 2
    270e:	fc 93       	st	X, r31
    2710:	ee 93       	st	-X, r30
    2712:	11 97       	sbiw	r26, 0x01	; 1
    2714:	cd 01       	movw	r24, r26
    2716:	03 96       	adiw	r24, 0x03	; 3
    2718:	e8 17       	cp	r30, r24
    271a:	f9 07       	cpc	r31, r25
    271c:	31 f4       	brne	.+12     	; 0x272a <vTaskSwitchContext+0x6e>
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	93 81       	ldd	r25, Z+3	; 0x03
    2722:	12 96       	adiw	r26, 0x02	; 2
    2724:	9c 93       	st	X, r25
    2726:	8e 93       	st	-X, r24
    2728:	11 97       	sbiw	r26, 0x01	; 1
    272a:	11 96       	adiw	r26, 0x01	; 1
    272c:	ed 91       	ld	r30, X+
    272e:	fc 91       	ld	r31, X
    2730:	12 97       	sbiw	r26, 0x02	; 2
    2732:	86 81       	ldd	r24, Z+6	; 0x06
    2734:	97 81       	ldd	r25, Z+7	; 0x07
    2736:	90 93 34 03 	sts	0x0334, r25
    273a:	80 93 33 03 	sts	0x0333, r24
    273e:	08 95       	ret

00002740 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    2740:	fc 01       	movw	r30, r24
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2742:	80 91 36 03 	lds	r24, 0x0336
    2746:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    2748:	80 91 37 03 	lds	r24, 0x0337
    274c:	90 91 38 03 	lds	r25, 0x0338
    2750:	92 83       	std	Z+2, r25	; 0x02
    2752:	81 83       	std	Z+1, r24	; 0x01
}
    2754:	08 95       	ret

00002756 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    2756:	fc 01       	movw	r30, r24
    2758:	db 01       	movw	r26, r22
portBASE_TYPE xReturn;

	portENTER_CRITICAL();
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2760:	90 91 36 03 	lds	r25, 0x0336
    2764:	80 81       	ld	r24, Z
    2766:	98 17       	cp	r25, r24
    2768:	49 f0       	breq	.+18     	; 0x277c <xTaskCheckForTimeOut+0x26>
    276a:	20 91 37 03 	lds	r18, 0x0337
    276e:	30 91 38 03 	lds	r19, 0x0338
    2772:	81 81       	ldd	r24, Z+1	; 0x01
    2774:	92 81       	ldd	r25, Z+2	; 0x02
    2776:	28 17       	cp	r18, r24
    2778:	39 07       	cpc	r19, r25
    277a:	18 f5       	brcc	.+70     	; 0x27c2 <xTaskCheckForTimeOut+0x6c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    277c:	80 91 37 03 	lds	r24, 0x0337
    2780:	90 91 38 03 	lds	r25, 0x0338
    2784:	21 81       	ldd	r18, Z+1	; 0x01
    2786:	32 81       	ldd	r19, Z+2	; 0x02
    2788:	4d 91       	ld	r20, X+
    278a:	5c 91       	ld	r21, X
    278c:	11 97       	sbiw	r26, 0x01	; 1
    278e:	82 1b       	sub	r24, r18
    2790:	93 0b       	sbc	r25, r19
    2792:	84 17       	cp	r24, r20
    2794:	95 07       	cpc	r25, r21
    2796:	a8 f4       	brcc	.+42     	; 0x27c2 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2798:	80 91 37 03 	lds	r24, 0x0337
    279c:	90 91 38 03 	lds	r25, 0x0338
    27a0:	28 1b       	sub	r18, r24
    27a2:	39 0b       	sbc	r19, r25
    27a4:	24 0f       	add	r18, r20
    27a6:	35 1f       	adc	r19, r21
    27a8:	2d 93       	st	X+, r18
    27aa:	3c 93       	st	X, r19
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    27ac:	80 91 36 03 	lds	r24, 0x0336
    27b0:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    27b2:	80 91 37 03 	lds	r24, 0x0337
    27b6:	90 91 38 03 	lds	r25, 0x0338
    27ba:	92 83       	std	Z+2, r25	; 0x02
    27bc:	81 83       	std	Z+1, r24	; 0x01
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <xTaskCheckForTimeOut+0x6e>
    27c2:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	portEXIT_CRITICAL();
    27c4:	0f 90       	pop	r0
    27c6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    27c8:	08 95       	ret

000027ca <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	80 93 35 03 	sts	0x0335, r24
}
    27d0:	08 95       	ret

000027d2 <xTaskRemoveFromEventList>:
	#endif
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	fc 01       	movw	r30, r24
	it to the ready list.

	If an event is for a queue that is locked then this function will never
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    27dc:	80 81       	ld	r24, Z
    27de:	88 23       	and	r24, r24
    27e0:	19 f4       	brne	.+6      	; 0x27e8 <xTaskRemoveFromEventList+0x16>
    27e2:	c0 e0       	ldi	r28, 0x00	; 0
    27e4:	d0 e0       	ldi	r29, 0x00	; 0
    27e6:	05 c0       	rjmp	.+10     	; 0x27f2 <xTaskRemoveFromEventList+0x20>
    27e8:	05 80       	ldd	r0, Z+5	; 0x05
    27ea:	f6 81       	ldd	r31, Z+6	; 0x06
    27ec:	e0 2d       	mov	r30, r0
    27ee:	c6 81       	ldd	r28, Z+6	; 0x06
    27f0:	d7 81       	ldd	r29, Z+7	; 0x07
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    27f2:	8e 01       	movw	r16, r28
    27f4:	04 5f       	subi	r16, 0xF4	; 244
    27f6:	1f 4f       	sbci	r17, 0xFF	; 255
    27f8:	c8 01       	movw	r24, r16
    27fa:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    27fe:	80 91 39 03 	lds	r24, 0x0339
    2802:	88 23       	and	r24, r24
    2804:	a1 f4       	brne	.+40     	; 0x282e <xTaskRemoveFromEventList+0x5c>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2806:	8e 01       	movw	r16, r28
    2808:	0e 5f       	subi	r16, 0xFE	; 254
    280a:	1f 4f       	sbci	r17, 0xFF	; 255
    280c:	c8 01       	movw	r24, r16
    280e:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2812:	9e 89       	ldd	r25, Y+22	; 0x16
    2814:	80 91 3a 03 	lds	r24, 0x033A
    2818:	89 17       	cp	r24, r25
    281a:	10 f4       	brcc	.+4      	; 0x2820 <xTaskRemoveFromEventList+0x4e>
    281c:	90 93 3a 03 	sts	0x033A, r25
    2820:	89 e0       	ldi	r24, 0x09	; 9
    2822:	98 9f       	mul	r25, r24
    2824:	c0 01       	movw	r24, r0
    2826:	11 24       	eor	r1, r1
    2828:	8f 5b       	subi	r24, 0xBF	; 191
    282a:	9c 4f       	sbci	r25, 0xFC	; 252
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    282e:	8b e7       	ldi	r24, 0x7B	; 123
    2830:	93 e0       	ldi	r25, 0x03	; 3
    2832:	b8 01       	movw	r22, r16
    2834:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2838:	e0 91 33 03 	lds	r30, 0x0333
    283c:	f0 91 34 03 	lds	r31, 0x0334
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	9e 89       	ldd	r25, Y+22	; 0x16
    2844:	86 89       	ldd	r24, Z+22	; 0x16
    2846:	98 17       	cp	r25, r24
    2848:	08 f0       	brcs	.+2      	; 0x284c <xTaskRemoveFromEventList+0x7a>
    284a:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    284c:	82 2f       	mov	r24, r18
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	08 95       	ret

00002858 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
    2858:	ff 92       	push	r15
    285a:	0f 93       	push	r16
    285c:	1f 93       	push	r17
    285e:	cf 93       	push	r28
    2860:	df 93       	push	r29
	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2862:	80 91 39 03 	lds	r24, 0x0339
    2866:	88 23       	and	r24, r24
    2868:	09 f0       	breq	.+2      	; 0x286c <vTaskIncrementTick+0x14>
    286a:	61 c0       	rjmp	.+194    	; 0x292e <vTaskIncrementTick+0xd6>
	{
		++xTickCount;
    286c:	80 91 37 03 	lds	r24, 0x0337
    2870:	90 91 38 03 	lds	r25, 0x0338
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	90 93 38 03 	sts	0x0338, r25
    287a:	80 93 37 03 	sts	0x0337, r24
		if( xTickCount == ( portTickType ) 0 )
    287e:	80 91 37 03 	lds	r24, 0x0337
    2882:	90 91 38 03 	lds	r25, 0x0338
    2886:	89 2b       	or	r24, r25
    2888:	e9 f5       	brne	.+122    	; 0x2904 <vTaskIncrementTick+0xac>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
    288a:	80 91 77 03 	lds	r24, 0x0377
    288e:	90 91 78 03 	lds	r25, 0x0378
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2892:	20 91 79 03 	lds	r18, 0x0379
    2896:	30 91 7a 03 	lds	r19, 0x037A
    289a:	30 93 78 03 	sts	0x0378, r19
    289e:	20 93 77 03 	sts	0x0377, r18
			pxOverflowDelayedTaskList = pxTemp;
    28a2:	90 93 7a 03 	sts	0x037A, r25
    28a6:	80 93 79 03 	sts	0x0379, r24
			xNumOfOverflows++;
    28aa:	80 91 36 03 	lds	r24, 0x0336
    28ae:	8f 5f       	subi	r24, 0xFF	; 255
    28b0:	80 93 36 03 	sts	0x0336, r24
    28b4:	27 c0       	rjmp	.+78     	; 0x2904 <vTaskIncrementTick+0xac>
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    28b6:	20 91 37 03 	lds	r18, 0x0337
    28ba:	30 91 38 03 	lds	r19, 0x0338
    28be:	8a 81       	ldd	r24, Y+2	; 0x02
    28c0:	9b 81       	ldd	r25, Y+3	; 0x03
    28c2:	28 17       	cp	r18, r24
    28c4:	39 07       	cpc	r19, r25
    28c6:	c0 f1       	brcs	.+112    	; 0x2938 <vTaskIncrementTick+0xe0>
    28c8:	8e 01       	movw	r16, r28
    28ca:	0e 5f       	subi	r16, 0xFE	; 254
    28cc:	1f 4f       	sbci	r17, 0xFF	; 255
    28ce:	c8 01       	movw	r24, r16
    28d0:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
    28d4:	8c 89       	ldd	r24, Y+20	; 0x14
    28d6:	9d 89       	ldd	r25, Y+21	; 0x15
    28d8:	89 2b       	or	r24, r25
    28da:	21 f0       	breq	.+8      	; 0x28e4 <vTaskIncrementTick+0x8c>
    28dc:	ce 01       	movw	r24, r28
    28de:	0c 96       	adiw	r24, 0x0c	; 12
    28e0:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
    28e4:	9e 89       	ldd	r25, Y+22	; 0x16
    28e6:	80 91 3a 03 	lds	r24, 0x033A
    28ea:	89 17       	cp	r24, r25
    28ec:	10 f4       	brcc	.+4      	; 0x28f2 <vTaskIncrementTick+0x9a>
    28ee:	90 93 3a 03 	sts	0x033A, r25
    28f2:	9f 9d       	mul	r25, r15
    28f4:	c0 01       	movw	r24, r0
    28f6:	11 24       	eor	r1, r1
    28f8:	8f 5b       	subi	r24, 0xBF	; 191
    28fa:	9c 4f       	sbci	r25, 0xFC	; 252
    28fc:	b8 01       	movw	r22, r16
    28fe:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vListInsertEnd>
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <vTaskIncrementTick+0xb0>
    2904:	89 e0       	ldi	r24, 0x09	; 9
    2906:	f8 2e       	mov	r15, r24
    2908:	e0 91 77 03 	lds	r30, 0x0377
    290c:	f0 91 78 03 	lds	r31, 0x0378
    2910:	80 81       	ld	r24, Z
    2912:	88 23       	and	r24, r24
    2914:	89 f0       	breq	.+34     	; 0x2938 <vTaskIncrementTick+0xe0>
    2916:	e0 91 77 03 	lds	r30, 0x0377
    291a:	f0 91 78 03 	lds	r31, 0x0378
    291e:	05 80       	ldd	r0, Z+5	; 0x05
    2920:	f6 81       	ldd	r31, Z+6	; 0x06
    2922:	e0 2d       	mov	r30, r0
    2924:	c6 81       	ldd	r28, Z+6	; 0x06
    2926:	d7 81       	ldd	r29, Z+7	; 0x07
    2928:	20 97       	sbiw	r28, 0x00	; 0
    292a:	29 f6       	brne	.-118    	; 0x28b6 <vTaskIncrementTick+0x5e>
    292c:	05 c0       	rjmp	.+10     	; 0x2938 <vTaskIncrementTick+0xe0>
	}
	else
	{
		++uxMissedTicks;
    292e:	80 91 3b 03 	lds	r24, 0x033B
    2932:	8f 5f       	subi	r24, 0xFF	; 255
    2934:	80 93 3b 03 	sts	0x033B, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	08 95       	ret

00002944 <vTaskPlaceOnEventList>:
	vWriteTraceToBuffer();
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	8b 01       	movw	r16, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    294a:	60 91 33 03 	lds	r22, 0x0333
    294e:	70 91 34 03 	lds	r23, 0x0334
    2952:	64 5f       	subi	r22, 0xF4	; 244
    2954:	7f 4f       	sbci	r23, 0xFF	; 255
    2956:	0e 94 02 10 	call	0x2004	; 0x2004 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    295a:	80 91 33 03 	lds	r24, 0x0333
    295e:	90 91 34 03 	lds	r25, 0x0334
    2962:	02 96       	adiw	r24, 0x02	; 2
    2964:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2968:	80 91 37 03 	lds	r24, 0x0337
    296c:	90 91 38 03 	lds	r25, 0x0338
    2970:	80 0f       	add	r24, r16
    2972:	91 1f       	adc	r25, r17

			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2974:	e0 91 33 03 	lds	r30, 0x0333
    2978:	f0 91 34 03 	lds	r31, 0x0334
    297c:	93 83       	std	Z+3, r25	; 0x03
    297e:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xTickCount )
    2980:	20 91 37 03 	lds	r18, 0x0337
    2984:	30 91 38 03 	lds	r19, 0x0338
    2988:	82 17       	cp	r24, r18
    298a:	93 07       	cpc	r25, r19
    298c:	28 f4       	brcc	.+10     	; 0x2998 <vTaskPlaceOnEventList+0x54>
			{
				/* Wake time has overflowed.  Place this item in the overflow list. */
				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    298e:	80 91 79 03 	lds	r24, 0x0379
    2992:	90 91 7a 03 	lds	r25, 0x037A
    2996:	04 c0       	rjmp	.+8      	; 0x29a0 <vTaskPlaceOnEventList+0x5c>
			}
			else
			{
				/* The wake time has not overflowed, so we can use the current block list. */
				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2998:	80 91 77 03 	lds	r24, 0x0377
    299c:	90 91 78 03 	lds	r25, 0x0378
    29a0:	60 91 33 03 	lds	r22, 0x0333
    29a4:	70 91 34 03 	lds	r23, 0x0334
    29a8:	6e 5f       	subi	r22, 0xFE	; 254
    29aa:	7f 4f       	sbci	r23, 0xFF	; 255
    29ac:	0e 94 02 10 	call	0x2004	; 0x2004 <vListInsert>
			}
	}
	#endif
}
    29b0:	1f 91       	pop	r17
    29b2:	0f 91       	pop	r16
    29b4:	08 95       	ret

000029b6 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    29b6:	cf 92       	push	r12
    29b8:	df 92       	push	r13
    29ba:	ff 92       	push	r15
    29bc:	0f 93       	push	r16
    29be:	1f 93       	push	r17
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	0f 92       	push	r0
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	portENTER_CRITICAL();
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    29d0:	80 91 39 03 	lds	r24, 0x0339
    29d4:	81 50       	subi	r24, 0x01	; 1
    29d6:	80 93 39 03 	sts	0x0339, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    29da:	80 91 39 03 	lds	r24, 0x0339
    29de:	88 23       	and	r24, r24
    29e0:	09 f0       	breq	.+2      	; 0x29e4 <xTaskResumeAll+0x2e>
    29e2:	5b c0       	rjmp	.+182    	; 0x2a9a <xTaskResumeAll+0xe4>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
    29e4:	80 91 3c 03 	lds	r24, 0x033C
    29e8:	88 23       	and	r24, r24
    29ea:	09 f4       	brne	.+2      	; 0x29ee <xTaskResumeAll+0x38>
    29ec:	56 c0       	rjmp	.+172    	; 0x2a9a <xTaskResumeAll+0xe4>
    29ee:	19 82       	std	Y+1, r1	; 0x01
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    29f0:	99 e0       	ldi	r25, 0x09	; 9
    29f2:	f9 2e       	mov	r15, r25
    29f4:	27 c0       	rjmp	.+78     	; 0x2a44 <xTaskResumeAll+0x8e>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
    29f6:	c6 01       	movw	r24, r12
    29f8:	0c 96       	adiw	r24, 0x0c	; 12
    29fa:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    29fe:	86 01       	movw	r16, r12
    2a00:	0e 5f       	subi	r16, 0xFE	; 254
    2a02:	1f 4f       	sbci	r17, 0xFF	; 255
    2a04:	c8 01       	movw	r24, r16
    2a06:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2a0a:	d6 01       	movw	r26, r12
    2a0c:	56 96       	adiw	r26, 0x16	; 22
    2a0e:	9c 91       	ld	r25, X
    2a10:	80 91 3a 03 	lds	r24, 0x033A
    2a14:	89 17       	cp	r24, r25
    2a16:	10 f4       	brcc	.+4      	; 0x2a1c <xTaskResumeAll+0x66>
    2a18:	90 93 3a 03 	sts	0x033A, r25
    2a1c:	9f 9d       	mul	r25, r15
    2a1e:	c0 01       	movw	r24, r0
    2a20:	11 24       	eor	r1, r1
    2a22:	8f 5b       	subi	r24, 0xBF	; 191
    2a24:	9c 4f       	sbci	r25, 0xFC	; 252
    2a26:	b8 01       	movw	r22, r16
    2a28:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2a2c:	e0 91 33 03 	lds	r30, 0x0333
    2a30:	f0 91 34 03 	lds	r31, 0x0334
    2a34:	d6 01       	movw	r26, r12
    2a36:	56 96       	adiw	r26, 0x16	; 22
    2a38:	9c 91       	ld	r25, X
    2a3a:	86 89       	ldd	r24, Z+22	; 0x16
    2a3c:	98 17       	cp	r25, r24
    2a3e:	10 f0       	brcs	.+4      	; 0x2a44 <xTaskResumeAll+0x8e>
    2a40:	b1 e0       	ldi	r27, 0x01	; 1
    2a42:	b9 83       	std	Y+1, r27	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
    2a44:	80 91 7b 03 	lds	r24, 0x037B
    2a48:	88 23       	and	r24, r24
    2a4a:	49 f0       	breq	.+18     	; 0x2a5e <xTaskResumeAll+0xa8>
    2a4c:	e0 91 80 03 	lds	r30, 0x0380
    2a50:	f0 91 81 03 	lds	r31, 0x0381
    2a54:	c6 80       	ldd	r12, Z+6	; 0x06
    2a56:	d7 80       	ldd	r13, Z+7	; 0x07
    2a58:	c1 14       	cp	r12, r1
    2a5a:	d1 04       	cpc	r13, r1
    2a5c:	61 f6       	brne	.-104    	; 0x29f6 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    2a5e:	80 91 3b 03 	lds	r24, 0x033B
    2a62:	88 23       	and	r24, r24
    2a64:	41 f4       	brne	.+16     	; 0x2a76 <xTaskResumeAll+0xc0>
    2a66:	0c c0       	rjmp	.+24     	; 0x2a80 <xTaskResumeAll+0xca>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
    2a68:	0e 94 2c 14 	call	0x2858	; 0x2858 <vTaskIncrementTick>
						--uxMissedTicks;
    2a6c:	80 91 3b 03 	lds	r24, 0x033B
    2a70:	81 50       	subi	r24, 0x01	; 1
    2a72:	80 93 3b 03 	sts	0x033B, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    2a76:	80 91 3b 03 	lds	r24, 0x033B
    2a7a:	88 23       	and	r24, r24
    2a7c:	a9 f7       	brne	.-22     	; 0x2a68 <xTaskResumeAll+0xb2>
    2a7e:	07 c0       	rjmp	.+14     	; 0x2a8e <xTaskResumeAll+0xd8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2a80:	e9 81       	ldd	r30, Y+1	; 0x01
    2a82:	e1 30       	cpi	r30, 0x01	; 1
    2a84:	21 f0       	breq	.+8      	; 0x2a8e <xTaskResumeAll+0xd8>
    2a86:	80 91 35 03 	lds	r24, 0x0335
    2a8a:	81 30       	cpi	r24, 0x01	; 1
    2a8c:	31 f4       	brne	.+12     	; 0x2a9a <xTaskResumeAll+0xe4>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    2a8e:	10 92 35 03 	sts	0x0335, r1
					portYIELD_WITHIN_API();
    2a92:	0e 94 b1 18 	call	0x3162	; 0x3162 <vPortYield>
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	01 c0       	rjmp	.+2      	; 0x2a9c <xTaskResumeAll+0xe6>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	portEXIT_CRITICAL();
    2a9c:	0f 90       	pop	r0
    2a9e:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    2aa0:	0f 90       	pop	r0
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	ff 90       	pop	r15
    2aac:	df 90       	pop	r13
    2aae:	cf 90       	pop	r12
    2ab0:	08 95       	ret

00002ab2 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	9c 01       	movw	r18, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	a1 f1       	breq	.+104    	; 0x2b24 <vTaskDelay+0x72>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2abc:	80 91 39 03 	lds	r24, 0x0339
    2ac0:	8f 5f       	subi	r24, 0xFF	; 255
    2ac2:	80 93 39 03 	sts	0x0339, r24
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2ac6:	00 91 37 03 	lds	r16, 0x0337
    2aca:	10 91 38 03 	lds	r17, 0x0338
    2ace:	02 0f       	add	r16, r18
    2ad0:	13 1f       	adc	r17, r19

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2ad2:	80 91 33 03 	lds	r24, 0x0333
    2ad6:	90 91 34 03 	lds	r25, 0x0334
    2ada:	02 96       	adiw	r24, 0x02	; 2
    2adc:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2ae0:	e0 91 33 03 	lds	r30, 0x0333
    2ae4:	f0 91 34 03 	lds	r31, 0x0334
    2ae8:	13 83       	std	Z+3, r17	; 0x03
    2aea:	02 83       	std	Z+2, r16	; 0x02

				if( xTimeToWake < xTickCount )
    2aec:	80 91 37 03 	lds	r24, 0x0337
    2af0:	90 91 38 03 	lds	r25, 0x0338
    2af4:	08 17       	cp	r16, r24
    2af6:	19 07       	cpc	r17, r25
    2af8:	28 f4       	brcc	.+10     	; 0x2b04 <vTaskDelay+0x52>
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2afa:	80 91 79 03 	lds	r24, 0x0379
    2afe:	90 91 7a 03 	lds	r25, 0x037A
    2b02:	04 c0       	rjmp	.+8      	; 0x2b0c <vTaskDelay+0x5a>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2b04:	80 91 77 03 	lds	r24, 0x0377
    2b08:	90 91 78 03 	lds	r25, 0x0378
    2b0c:	60 91 33 03 	lds	r22, 0x0333
    2b10:	70 91 34 03 	lds	r23, 0x0334
    2b14:	6e 5f       	subi	r22, 0xFE	; 254
    2b16:	7f 4f       	sbci	r23, 0xFF	; 255
    2b18:	0e 94 02 10 	call	0x2004	; 0x2004 <vListInsert>
				}
			}
			xAlreadyYielded = xTaskResumeAll();
    2b1c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    2b20:	88 23       	and	r24, r24
    2b22:	11 f4       	brne	.+4      	; 0x2b28 <vTaskDelay+0x76>
		{
			portYIELD_WITHIN_API();
    2b24:	0e 94 b1 18 	call	0x3162	; 0x3162 <vPortYield>
		}
	}
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	08 95       	ret

00002b2e <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    2b2e:	cf 93       	push	r28
    2b30:	df 93       	push	r29
    2b32:	fc 01       	movw	r30, r24
    2b34:	eb 01       	movw	r28, r22

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2b36:	80 91 39 03 	lds	r24, 0x0339
    2b3a:	8f 5f       	subi	r24, 0xFF	; 255
    2b3c:	80 93 39 03 	sts	0x0339, r24
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    2b40:	20 81       	ld	r18, Z
    2b42:	31 81       	ldd	r19, Z+1	; 0x01
    2b44:	c2 0f       	add	r28, r18
    2b46:	d3 1f       	adc	r29, r19

			if( xTickCount < *pxPreviousWakeTime )
    2b48:	80 91 37 03 	lds	r24, 0x0337
    2b4c:	90 91 38 03 	lds	r25, 0x0338
    2b50:	82 17       	cp	r24, r18
    2b52:	93 07       	cpc	r25, r19
    2b54:	28 f4       	brcc	.+10     	; 0x2b60 <vTaskDelayUntil+0x32>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    2b56:	c2 17       	cp	r28, r18
    2b58:	d3 07       	cpc	r29, r19
    2b5a:	28 f0       	brcs	.+10     	; 0x2b66 <vTaskDelayUntil+0x38>
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	0c c0       	rjmp	.+24     	; 0x2b78 <vTaskDelayUntil+0x4a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    2b60:	c2 17       	cp	r28, r18
    2b62:	d3 07       	cpc	r29, r19
    2b64:	40 f0       	brcs	.+16     	; 0x2b76 <vTaskDelayUntil+0x48>
    2b66:	80 91 37 03 	lds	r24, 0x0337
    2b6a:	90 91 38 03 	lds	r25, 0x0338
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	8c 17       	cp	r24, r28
    2b72:	9d 07       	cpc	r25, r29
    2b74:	08 f4       	brcc	.+2      	; 0x2b78 <vTaskDelayUntil+0x4a>
    2b76:	21 e0       	ldi	r18, 0x01	; 1
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2b78:	d1 83       	std	Z+1, r29	; 0x01
    2b7a:	c0 83       	st	Z, r28

			if( xShouldDelay )
    2b7c:	22 23       	and	r18, r18
    2b7e:	29 f1       	breq	.+74     	; 0x2bca <vTaskDelayUntil+0x9c>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2b80:	80 91 33 03 	lds	r24, 0x0333
    2b84:	90 91 34 03 	lds	r25, 0x0334
    2b88:	02 96       	adiw	r24, 0x02	; 2
    2b8a:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2b8e:	e0 91 33 03 	lds	r30, 0x0333
    2b92:	f0 91 34 03 	lds	r31, 0x0334
    2b96:	d3 83       	std	Z+3, r29	; 0x03
    2b98:	c2 83       	std	Z+2, r28	; 0x02

				if( xTimeToWake < xTickCount )
    2b9a:	80 91 37 03 	lds	r24, 0x0337
    2b9e:	90 91 38 03 	lds	r25, 0x0338
    2ba2:	c8 17       	cp	r28, r24
    2ba4:	d9 07       	cpc	r29, r25
    2ba6:	28 f4       	brcc	.+10     	; 0x2bb2 <vTaskDelayUntil+0x84>
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2ba8:	80 91 79 03 	lds	r24, 0x0379
    2bac:	90 91 7a 03 	lds	r25, 0x037A
    2bb0:	04 c0       	rjmp	.+8      	; 0x2bba <vTaskDelayUntil+0x8c>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2bb2:	80 91 77 03 	lds	r24, 0x0377
    2bb6:	90 91 78 03 	lds	r25, 0x0378
    2bba:	60 91 33 03 	lds	r22, 0x0333
    2bbe:	70 91 34 03 	lds	r23, 0x0334
    2bc2:	6e 5f       	subi	r22, 0xFE	; 254
    2bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc6:	0e 94 02 10 	call	0x2004	; 0x2004 <vListInsert>
				}
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    2bca:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    2bce:	88 23       	and	r24, r24
    2bd0:	11 f4       	brne	.+4      	; 0x2bd6 <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
    2bd2:	0e 94 b1 18 	call	0x3162	; 0x3162 <vPortYield>
		}
	}
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	08 95       	ret

00002bdc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    2bdc:	ef 92       	push	r14
    2bde:	ff 92       	push	r15
    2be0:	0f 93       	push	r16
    2be2:	1f 93       	push	r17
    2be4:	cf 93       	push	r28
    2be6:	df 93       	push	r29
    2be8:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		portENTER_CRITICAL();
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    2bf0:	80 91 33 03 	lds	r24, 0x0333
    2bf4:	90 91 34 03 	lds	r25, 0x0334
    2bf8:	08 17       	cp	r16, r24
    2bfa:	19 07       	cpc	r17, r25
    2bfc:	19 f4       	brne	.+6      	; 0x2c04 <vTaskDelete+0x28>
    2bfe:	00 e0       	ldi	r16, 0x00	; 0
    2c00:	10 e0       	ldi	r17, 0x00	; 0
    2c02:	03 c0       	rjmp	.+6      	; 0x2c0a <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    2c04:	01 15       	cp	r16, r1
    2c06:	11 05       	cpc	r17, r1
    2c08:	29 f4       	brne	.+10     	; 0x2c14 <vTaskDelete+0x38>
    2c0a:	c0 91 33 03 	lds	r28, 0x0333
    2c0e:	d0 91 34 03 	lds	r29, 0x0334
    2c12:	01 c0       	rjmp	.+2      	; 0x2c16 <vTaskDelete+0x3a>
    2c14:	e8 01       	movw	r28, r16

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2c16:	22 e0       	ldi	r18, 0x02	; 2
    2c18:	e2 2e       	mov	r14, r18
    2c1a:	f1 2c       	mov	r15, r1
    2c1c:	ec 0e       	add	r14, r28
    2c1e:	fd 1e       	adc	r15, r29
    2c20:	c7 01       	movw	r24, r14
    2c22:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
    2c26:	8c 89       	ldd	r24, Y+20	; 0x14
    2c28:	9d 89       	ldd	r25, Y+21	; 0x15
    2c2a:	89 2b       	or	r24, r25
    2c2c:	21 f0       	breq	.+8      	; 0x2c36 <vTaskDelete+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    2c2e:	ce 01       	movw	r24, r28
    2c30:	0c 96       	adiw	r24, 0x0c	; 12
    2c32:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2c36:	84 e8       	ldi	r24, 0x84	; 132
    2c38:	93 e0       	ldi	r25, 0x03	; 3
    2c3a:	b7 01       	movw	r22, r14
    2c3c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2c40:	80 91 3e 03 	lds	r24, 0x033E
    2c44:	8f 5f       	subi	r24, 0xFF	; 255
    2c46:	80 93 3e 03 	sts	0x033E, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2c4a:	80 91 3f 03 	lds	r24, 0x033F
    2c4e:	8f 5f       	subi	r24, 0xFF	; 255
    2c50:	80 93 3f 03 	sts	0x033F, r24

			traceTASK_DELETE( pxTCB );
		}
		portEXIT_CRITICAL();
    2c54:	0f 90       	pop	r0
    2c56:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    2c58:	80 91 3d 03 	lds	r24, 0x033D
    2c5c:	88 23       	and	r24, r24
    2c5e:	21 f0       	breq	.+8      	; 0x2c68 <vTaskDelete+0x8c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    2c60:	01 2b       	or	r16, r17
    2c62:	11 f4       	brne	.+4      	; 0x2c68 <vTaskDelete+0x8c>
			{
				portYIELD_WITHIN_API();
    2c64:	0e 94 b1 18 	call	0x3162	; 0x3162 <vPortYield>
			}
		}
	}
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	ff 90       	pop	r15
    2c72:	ef 90       	pop	r14
    2c74:	08 95       	ret

00002c76 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    2c76:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    2c78:	10 92 3d 03 	sts	0x033D, r1
	vPortEndScheduler();
    2c7c:	0e 94 52 18 	call	0x30a4	; 0x30a4 <vPortEndScheduler>
}
    2c80:	08 95       	ret

00002c82 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2c82:	1f 93       	push	r17
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
    2c88:	80 91 3e 03 	lds	r24, 0x033E
    2c8c:	88 23       	and	r24, r24
    2c8e:	91 f1       	breq	.+100    	; 0x2cf4 <prvIdleTask+0x72>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2c90:	80 91 39 03 	lds	r24, 0x0339
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	80 93 39 03 	sts	0x0339, r24
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2c9a:	10 91 84 03 	lds	r17, 0x0384
			xTaskResumeAll();
    2c9e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskResumeAll>

			if( !xListIsEmpty )
    2ca2:	11 23       	and	r17, r17
    2ca4:	39 f1       	breq	.+78     	; 0x2cf4 <prvIdleTask+0x72>
			{
				tskTCB *pxTCB;

				portENTER_CRITICAL();
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    2cac:	80 91 84 03 	lds	r24, 0x0384
    2cb0:	88 23       	and	r24, r24
    2cb2:	19 f4       	brne	.+6      	; 0x2cba <prvIdleTask+0x38>
    2cb4:	c0 e0       	ldi	r28, 0x00	; 0
    2cb6:	d0 e0       	ldi	r29, 0x00	; 0
    2cb8:	06 c0       	rjmp	.+12     	; 0x2cc6 <prvIdleTask+0x44>
    2cba:	e0 91 89 03 	lds	r30, 0x0389
    2cbe:	f0 91 8a 03 	lds	r31, 0x038A
    2cc2:	c6 81       	ldd	r28, Z+6	; 0x06
    2cc4:	d7 81       	ldd	r29, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	02 96       	adiw	r24, 0x02	; 2
    2cca:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
					--uxCurrentNumberOfTasks;
    2cce:	80 91 3c 03 	lds	r24, 0x033C
    2cd2:	81 50       	subi	r24, 0x01	; 1
    2cd4:	80 93 3c 03 	sts	0x033C, r24
					--uxTasksDeleted;
    2cd8:	80 91 3e 03 	lds	r24, 0x033E
    2cdc:	81 50       	subi	r24, 0x01	; 1
    2cde:	80 93 3e 03 	sts	0x033E, r24
				}
				portEXIT_CRITICAL();
    2ce2:	0f 90       	pop	r0
    2ce4:	0f be       	out	0x3f, r0	; 63

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    2ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cea:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <vPortFree>
		vPortFree( pxTCB );
    2cee:	ce 01       	movw	r24, r28
    2cf0:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    2cf4:	80 91 41 03 	lds	r24, 0x0341
    2cf8:	82 30       	cpi	r24, 0x02	; 2
    2cfa:	30 f2       	brcs	.-116    	; 0x2c88 <prvIdleTask+0x6>
			{
				taskYIELD();
    2cfc:	0e 94 b1 18 	call	0x3162	; 0x3162 <vPortYield>
    2d00:	c3 cf       	rjmp	.-122    	; 0x2c88 <prvIdleTask+0x6>

00002d02 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    2d02:	2f 92       	push	r2
    2d04:	3f 92       	push	r3
    2d06:	5f 92       	push	r5
    2d08:	6f 92       	push	r6
    2d0a:	7f 92       	push	r7
    2d0c:	8f 92       	push	r8
    2d0e:	9f 92       	push	r9
    2d10:	af 92       	push	r10
    2d12:	bf 92       	push	r11
    2d14:	cf 92       	push	r12
    2d16:	df 92       	push	r13
    2d18:	ef 92       	push	r14
    2d1a:	ff 92       	push	r15
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <xTaskGenericCreate+0x24>
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <xTaskGenericCreate+0x26>
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01
    2d30:	4b 01       	movw	r8, r22
    2d32:	5a 01       	movw	r10, r20
    2d34:	19 01       	movw	r2, r18
    2d36:	50 2e       	mov	r5, r16
    2d38:	37 01       	movw	r6, r14
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    2d3a:	81 e2       	ldi	r24, 0x21	; 33
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <pvPortMalloc>
    2d42:	8b 83       	std	Y+3, r24	; 0x03
    2d44:	9c 83       	std	Y+4, r25	; 0x04

	if( pxNewTCB != NULL )
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4a:	89 2b       	or	r24, r25
    2d4c:	89 f0       	breq	.+34     	; 0x2d70 <xTaskGenericCreate+0x6e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2d4e:	c1 14       	cp	r12, r1
    2d50:	d1 04       	cpc	r13, r1
    2d52:	21 f4       	brne	.+8      	; 0x2d5c <xTaskGenericCreate+0x5a>
    2d54:	c5 01       	movw	r24, r10
    2d56:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <pvPortMalloc>
    2d5a:	6c 01       	movw	r12, r24
    2d5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d60:	d0 8e       	std	Z+24, r13	; 0x18
    2d62:	c7 8a       	std	Z+23, r12	; 0x17

		if( pxNewTCB->pxStack == NULL )
    2d64:	c1 14       	cp	r12, r1
    2d66:	d1 04       	cpc	r13, r1
    2d68:	29 f4       	brne	.+10     	; 0x2d74 <xTaskGenericCreate+0x72>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2d6a:	cf 01       	movw	r24, r30
    2d6c:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <vPortFree>
    2d70:	8f ef       	ldi	r24, 0xFF	; 255
    2d72:	d5 c0       	rjmp	.+426    	; 0x2f1e <xTaskGenericCreate+0x21c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
    2d74:	c6 01       	movw	r24, r12
    2d76:	65 ea       	ldi	r22, 0xA5	; 165
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	a5 01       	movw	r20, r10
    2d7c:	0e 94 c4 2c 	call	0x5988	; 0x5988 <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    2d80:	08 94       	sec
    2d82:	a1 08       	sbc	r10, r1
    2d84:	b1 08       	sbc	r11, r1
    2d86:	eb 81       	ldd	r30, Y+3	; 0x03
    2d88:	fc 81       	ldd	r31, Y+4	; 0x04
    2d8a:	e7 88       	ldd	r14, Z+23	; 0x17
    2d8c:	f0 8c       	ldd	r15, Z+24	; 0x18
    2d8e:	ea 0c       	add	r14, r10
    2d90:	fb 1c       	adc	r15, r11
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    2d92:	cf 01       	movw	r24, r30
    2d94:	49 96       	adiw	r24, 0x19	; 25
    2d96:	b4 01       	movw	r22, r8
    2d98:	48 e0       	ldi	r20, 0x08	; 8
    2d9a:	50 e0       	ldi	r21, 0x00	; 0
    2d9c:	0e 94 cb 2c 	call	0x5996	; 0x5996 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    2da0:	eb 81       	ldd	r30, Y+3	; 0x03
    2da2:	fc 81       	ldd	r31, Y+4	; 0x04
    2da4:	10 a2       	std	Z+32, r1	; 0x20
    2da6:	05 2d       	mov	r16, r5
    2da8:	f3 e0       	ldi	r31, 0x03	; 3
    2daa:	f5 15       	cp	r31, r5
    2dac:	08 f4       	brcc	.+2      	; 0x2db0 <xTaskGenericCreate+0xae>
    2dae:	03 e0       	ldi	r16, 0x03	; 3
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - 1;
	}

	pxTCB->uxPriority = uxPriority;
    2db0:	eb 81       	ldd	r30, Y+3	; 0x03
    2db2:	fc 81       	ldd	r31, Y+4	; 0x04
    2db4:	06 8b       	std	Z+22, r16	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2db6:	42 e0       	ldi	r20, 0x02	; 2
    2db8:	c4 2e       	mov	r12, r20
    2dba:	d1 2c       	mov	r13, r1
    2dbc:	ce 0e       	add	r12, r30
    2dbe:	df 1e       	adc	r13, r31
    2dc0:	c6 01       	movw	r24, r12
    2dc2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	0c 96       	adiw	r24, 0x0c	; 12
    2dcc:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	91 87       	std	Z+9, r25	; 0x09
    2dd8:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2dda:	84 e0       	ldi	r24, 0x04	; 4
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	80 1b       	sub	r24, r16
    2de0:	91 09       	sbc	r25, r1
    2de2:	95 87       	std	Z+13, r25	; 0x0d
    2de4:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2de6:	f3 8b       	std	Z+19, r31	; 0x13
    2de8:	e2 8b       	std	Z+18, r30	; 0x12
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2dea:	c7 01       	movw	r24, r14
    2dec:	69 81       	ldd	r22, Y+1	; 0x01
    2dee:	7a 81       	ldd	r23, Y+2	; 0x02
    2df0:	a1 01       	movw	r20, r2
    2df2:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <pxPortInitialiseStack>
    2df6:	eb 81       	ldd	r30, Y+3	; 0x03
    2df8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
		}
		#endif

		if( ( void * ) pxCreatedTask != NULL )
    2dfe:	61 14       	cp	r6, r1
    2e00:	71 04       	cpc	r7, r1
    2e02:	21 f0       	breq	.+8      	; 0x2e0c <xTaskGenericCreate+0x10a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    2e04:	cf 01       	movw	r24, r30
    2e06:	f3 01       	movw	r30, r6
    2e08:	91 83       	std	Z+1, r25	; 0x01
    2e0a:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		portENTER_CRITICAL();
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    2e12:	80 91 3c 03 	lds	r24, 0x033C
    2e16:	8f 5f       	subi	r24, 0xFF	; 255
    2e18:	80 93 3c 03 	sts	0x033C, r24
			if( pxCurrentTCB == NULL )
    2e1c:	80 91 33 03 	lds	r24, 0x0333
    2e20:	90 91 34 03 	lds	r25, 0x0334
    2e24:	89 2b       	or	r24, r25
    2e26:	b9 f5       	brne	.+110    	; 0x2e96 <xTaskGenericCreate+0x194>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2e28:	eb 81       	ldd	r30, Y+3	; 0x03
    2e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e2c:	f0 93 34 03 	sts	0x0334, r31
    2e30:	e0 93 33 03 	sts	0x0333, r30

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    2e34:	80 91 3c 03 	lds	r24, 0x033C
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	f1 f5       	brne	.+124    	; 0x2eb8 <xTaskGenericCreate+0x1b6>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    2e3c:	81 e4       	ldi	r24, 0x41	; 65
    2e3e:	93 e0       	ldi	r25, 0x03	; 3
    2e40:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
    2e44:	8a e4       	ldi	r24, 0x4A	; 74
    2e46:	93 e0       	ldi	r25, 0x03	; 3
    2e48:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
    2e4c:	83 e5       	ldi	r24, 0x53	; 83
    2e4e:	93 e0       	ldi	r25, 0x03	; 3
    2e50:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
    2e54:	8c e5       	ldi	r24, 0x5C	; 92
    2e56:	93 e0       	ldi	r25, 0x03	; 3
    2e58:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    2e5c:	35 e6       	ldi	r19, 0x65	; 101
    2e5e:	e3 2e       	mov	r14, r19
    2e60:	33 e0       	ldi	r19, 0x03	; 3
    2e62:	f3 2e       	mov	r15, r19
    2e64:	c7 01       	movw	r24, r14
    2e66:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    2e6a:	0e e6       	ldi	r16, 0x6E	; 110
    2e6c:	13 e0       	ldi	r17, 0x03	; 3
    2e6e:	c8 01       	movw	r24, r16
    2e70:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    2e74:	8b e7       	ldi	r24, 0x7B	; 123
    2e76:	93 e0       	ldi	r25, 0x03	; 3
    2e78:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    2e7c:	84 e8       	ldi	r24, 0x84	; 132
    2e7e:	93 e0       	ldi	r25, 0x03	; 3
    2e80:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2e84:	f0 92 78 03 	sts	0x0378, r15
    2e88:	e0 92 77 03 	sts	0x0377, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2e8c:	10 93 7a 03 	sts	0x037A, r17
    2e90:	00 93 79 03 	sts	0x0379, r16
    2e94:	11 c0       	rjmp	.+34     	; 0x2eb8 <xTaskGenericCreate+0x1b6>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2e96:	80 91 3d 03 	lds	r24, 0x033D
    2e9a:	88 23       	and	r24, r24
    2e9c:	69 f4       	brne	.+26     	; 0x2eb8 <xTaskGenericCreate+0x1b6>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2e9e:	e0 91 33 03 	lds	r30, 0x0333
    2ea2:	f0 91 34 03 	lds	r31, 0x0334
    2ea6:	86 89       	ldd	r24, Z+22	; 0x16
    2ea8:	58 16       	cp	r5, r24
    2eaa:	30 f0       	brcs	.+12     	; 0x2eb8 <xTaskGenericCreate+0x1b6>
					{
						pxCurrentTCB = pxNewTCB;
    2eac:	8b 81       	ldd	r24, Y+3	; 0x03
    2eae:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb0:	90 93 34 03 	sts	0x0334, r25
    2eb4:	80 93 33 03 	sts	0x0333, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    2eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eba:	fc 81       	ldd	r31, Y+4	; 0x04
    2ebc:	96 89       	ldd	r25, Z+22	; 0x16
    2ebe:	80 91 40 03 	lds	r24, 0x0340
    2ec2:	89 17       	cp	r24, r25
    2ec4:	10 f4       	brcc	.+4      	; 0x2eca <xTaskGenericCreate+0x1c8>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    2ec6:	90 93 40 03 	sts	0x0340, r25
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    2eca:	80 91 3f 03 	lds	r24, 0x033F
    2ece:	8f 5f       	subi	r24, 0xFF	; 255
    2ed0:	80 93 3f 03 	sts	0x033F, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    2ed4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ed6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ed8:	96 89       	ldd	r25, Z+22	; 0x16
    2eda:	80 91 3a 03 	lds	r24, 0x033A
    2ede:	89 17       	cp	r24, r25
    2ee0:	10 f4       	brcc	.+4      	; 0x2ee6 <xTaskGenericCreate+0x1e4>
    2ee2:	90 93 3a 03 	sts	0x033A, r25
    2ee6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eea:	86 89       	ldd	r24, Z+22	; 0x16
    2eec:	29 e0       	ldi	r18, 0x09	; 9
    2eee:	82 9f       	mul	r24, r18
    2ef0:	c0 01       	movw	r24, r0
    2ef2:	11 24       	eor	r1, r1
    2ef4:	8f 5b       	subi	r24, 0xBF	; 191
    2ef6:	9c 4f       	sbci	r25, 0xFC	; 252
    2ef8:	b6 01       	movw	r22, r12
    2efa:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		portEXIT_CRITICAL();
    2efe:	0f 90       	pop	r0
    2f00:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED( pxNewTCB );
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    2f02:	80 91 3d 03 	lds	r24, 0x033D
    2f06:	88 23       	and	r24, r24
    2f08:	49 f0       	breq	.+18     	; 0x2f1c <xTaskGenericCreate+0x21a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2f0a:	e0 91 33 03 	lds	r30, 0x0333
    2f0e:	f0 91 34 03 	lds	r31, 0x0334
    2f12:	86 89       	ldd	r24, Z+22	; 0x16
    2f14:	85 15       	cp	r24, r5
    2f16:	10 f4       	brcc	.+4      	; 0x2f1c <xTaskGenericCreate+0x21a>
			{
				portYIELD_WITHIN_API();
    2f18:	0e 94 b1 18 	call	0x3162	; 0x3162 <vPortYield>
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return xReturn;
}
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	1f 91       	pop	r17
    2f2c:	0f 91       	pop	r16
    2f2e:	ff 90       	pop	r15
    2f30:	ef 90       	pop	r14
    2f32:	df 90       	pop	r13
    2f34:	cf 90       	pop	r12
    2f36:	bf 90       	pop	r11
    2f38:	af 90       	pop	r10
    2f3a:	9f 90       	pop	r9
    2f3c:	8f 90       	pop	r8
    2f3e:	7f 90       	pop	r7
    2f40:	6f 90       	pop	r6
    2f42:	5f 90       	pop	r5
    2f44:	3f 90       	pop	r3
    2f46:	2f 90       	pop	r2
    2f48:	08 95       	ret

00002f4a <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    2f4a:	af 92       	push	r10
    2f4c:	bf 92       	push	r11
    2f4e:	cf 92       	push	r12
    2f50:	df 92       	push	r13
    2f52:	ef 92       	push	r14
    2f54:	ff 92       	push	r15
    2f56:	0f 93       	push	r16
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
    2f58:	81 e4       	ldi	r24, 0x41	; 65
    2f5a:	96 e1       	ldi	r25, 0x16	; 22
    2f5c:	62 ed       	ldi	r22, 0xD2	; 210
    2f5e:	72 e0       	ldi	r23, 0x02	; 2
    2f60:	45 e5       	ldi	r20, 0x55	; 85
    2f62:	50 e0       	ldi	r21, 0x00	; 0
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	00 e0       	ldi	r16, 0x00	; 0
    2f6a:	ee 24       	eor	r14, r14
    2f6c:	ff 24       	eor	r15, r15
    2f6e:	cc 24       	eor	r12, r12
    2f70:	dd 24       	eor	r13, r13
    2f72:	aa 24       	eor	r10, r10
    2f74:	bb 24       	eor	r11, r11
    2f76:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGenericCreate>

	if( xReturn == pdPASS )
    2f7a:	81 30       	cpi	r24, 0x01	; 1
    2f7c:	49 f4       	brne	.+18     	; 0x2f90 <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    2f7e:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    2f80:	80 93 3d 03 	sts	0x033D, r24
		xTickCount = ( portTickType ) 0;
    2f84:	10 92 38 03 	sts	0x0338, r1
    2f88:	10 92 37 03 	sts	0x0337, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
    2f8c:	0e 94 18 18 	call	0x3030	; 0x3030 <xPortStartScheduler>
		else
		{
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}
}
    2f90:	0f 91       	pop	r16
    2f92:	ff 90       	pop	r15
    2f94:	ef 90       	pop	r14
    2f96:	df 90       	pop	r13
    2f98:	cf 90       	pop	r12
    2f9a:	bf 90       	pop	r11
    2f9c:	af 90       	pop	r10
    2f9e:	08 95       	ret

00002fa0 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2fa0:	fc 01       	movw	r30, r24
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2fa2:	91 e1       	ldi	r25, 0x11	; 17
    2fa4:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    2fa6:	22 e2       	ldi	r18, 0x22	; 34
    2fa8:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    2faa:	83 e3       	ldi	r24, 0x33	; 51
    2fac:	82 93       	st	-Z, r24
	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	

	usAddress = ( unsigned short ) pxCode;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2fae:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2fb0:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    2fb2:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2fb4:	80 e8       	ldi	r24, 0x80	; 128
    2fb6:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2fb8:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2fba:	82 e0       	ldi	r24, 0x02	; 2
    2fbc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2fbe:	83 e0       	ldi	r24, 0x03	; 3
    2fc0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2fc2:	84 e0       	ldi	r24, 0x04	; 4
    2fc4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    2fc6:	85 e0       	ldi	r24, 0x05	; 5
    2fc8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    2fca:	86 e0       	ldi	r24, 0x06	; 6
    2fcc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    2fce:	87 e0       	ldi	r24, 0x07	; 7
    2fd0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    2fd2:	88 e0       	ldi	r24, 0x08	; 8
    2fd4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    2fd6:	89 e0       	ldi	r24, 0x09	; 9
    2fd8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    2fda:	80 e1       	ldi	r24, 0x10	; 16
    2fdc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    2fde:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    2fe0:	82 e1       	ldi	r24, 0x12	; 18
    2fe2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2fe4:	83 e1       	ldi	r24, 0x13	; 19
    2fe6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    2fe8:	84 e1       	ldi	r24, 0x14	; 20
    2fea:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    2fec:	85 e1       	ldi	r24, 0x15	; 21
    2fee:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    2ff0:	86 e1       	ldi	r24, 0x16	; 22
    2ff2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    2ff4:	87 e1       	ldi	r24, 0x17	; 23
    2ff6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    2ff8:	88 e1       	ldi	r24, 0x18	; 24
    2ffa:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    2ffc:	89 e1       	ldi	r24, 0x19	; 25
    2ffe:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    3000:	80 e2       	ldi	r24, 0x20	; 32
    3002:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    3004:	81 e2       	ldi	r24, 0x21	; 33
    3006:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    3008:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    300a:	83 e2       	ldi	r24, 0x23	; 35
    300c:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */

	usAddress = ( unsigned short ) pvParameters;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    300e:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3010:	52 93       	st	-Z, r21
	pxTopOfStack--;


	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    3012:	86 e2       	ldi	r24, 0x26	; 38
    3014:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    3016:	87 e2       	ldi	r24, 0x27	; 39
    3018:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    301a:	88 e2       	ldi	r24, 0x28	; 40
    301c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    301e:	89 e2       	ldi	r24, 0x29	; 41
    3020:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    3022:	80 e3       	ldi	r24, 0x30	; 48
    3024:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    3026:	81 e3       	ldi	r24, 0x31	; 49
    3028:	82 93       	st	-Z, r24
    302a:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    302c:	cf 01       	movw	r24, r30
    302e:	08 95       	ret

00003030 <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	OCR1AH = ucHighByte;
    3030:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = ucLowByte;
    3034:	89 ef       	ldi	r24, 0xF9	; 249
    3036:	80 93 88 00 	sts	0x0088, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    303a:	8b e0       	ldi	r24, 0x0B	; 11
    303c:	80 93 81 00 	sts	0x0081, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    3040:	ef e6       	ldi	r30, 0x6F	; 111
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    3046:	82 60       	ori	r24, 0x02	; 2
	TIMSK1 = ucLowByte;
    3048:	80 83       	st	Z, r24
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    304a:	a0 91 33 03 	lds	r26, 0x0333
    304e:	b0 91 34 03 	lds	r27, 0x0334
    3052:	cd 91       	ld	r28, X+
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	dd 91       	ld	r29, X+
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	ff 91       	pop	r31
    305c:	ef 91       	pop	r30
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	bf 91       	pop	r27
    3064:	af 91       	pop	r26
    3066:	9f 91       	pop	r25
    3068:	8f 91       	pop	r24
    306a:	7f 91       	pop	r23
    306c:	6f 91       	pop	r22
    306e:	5f 91       	pop	r21
    3070:	4f 91       	pop	r20
    3072:	3f 91       	pop	r19
    3074:	2f 91       	pop	r18
    3076:	1f 91       	pop	r17
    3078:	0f 91       	pop	r16
    307a:	ff 90       	pop	r15
    307c:	ef 90       	pop	r14
    307e:	df 90       	pop	r13
    3080:	cf 90       	pop	r12
    3082:	bf 90       	pop	r11
    3084:	af 90       	pop	r10
    3086:	9f 90       	pop	r9
    3088:	8f 90       	pop	r8
    308a:	7f 90       	pop	r7
    308c:	6f 90       	pop	r6
    308e:	5f 90       	pop	r5
    3090:	4f 90       	pop	r4
    3092:	3f 90       	pop	r3
    3094:	2f 90       	pop	r2
    3096:	1f 90       	pop	r1
    3098:	0f 90       	pop	r0
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    309e:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	08 95       	ret

000030a4 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    30a4:	08 95       	ret

000030a6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    30a6:	0f 92       	push	r0
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	0f 92       	push	r0
    30ae:	1f 92       	push	r1
    30b0:	11 24       	eor	r1, r1
    30b2:	2f 92       	push	r2
    30b4:	3f 92       	push	r3
    30b6:	4f 92       	push	r4
    30b8:	5f 92       	push	r5
    30ba:	6f 92       	push	r6
    30bc:	7f 92       	push	r7
    30be:	8f 92       	push	r8
    30c0:	9f 92       	push	r9
    30c2:	af 92       	push	r10
    30c4:	bf 92       	push	r11
    30c6:	cf 92       	push	r12
    30c8:	df 92       	push	r13
    30ca:	ef 92       	push	r14
    30cc:	ff 92       	push	r15
    30ce:	0f 93       	push	r16
    30d0:	1f 93       	push	r17
    30d2:	2f 93       	push	r18
    30d4:	3f 93       	push	r19
    30d6:	4f 93       	push	r20
    30d8:	5f 93       	push	r21
    30da:	6f 93       	push	r22
    30dc:	7f 93       	push	r23
    30de:	8f 93       	push	r24
    30e0:	9f 93       	push	r25
    30e2:	af 93       	push	r26
    30e4:	bf 93       	push	r27
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	ef 93       	push	r30
    30ec:	ff 93       	push	r31
    30ee:	a0 91 33 03 	lds	r26, 0x0333
    30f2:	b0 91 34 03 	lds	r27, 0x0334
    30f6:	0d b6       	in	r0, 0x3d	; 61
    30f8:	0d 92       	st	X+, r0
    30fa:	0e b6       	in	r0, 0x3e	; 62
    30fc:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    30fe:	0e 94 2c 14 	call	0x2858	; 0x2858 <vTaskIncrementTick>
	vTaskSwitchContext();
    3102:	0e 94 5e 13 	call	0x26bc	; 0x26bc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    3106:	a0 91 33 03 	lds	r26, 0x0333
    310a:	b0 91 34 03 	lds	r27, 0x0334
    310e:	cd 91       	ld	r28, X+
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	dd 91       	ld	r29, X+
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	ff 91       	pop	r31
    3118:	ef 91       	pop	r30
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	bf 91       	pop	r27
    3120:	af 91       	pop	r26
    3122:	9f 91       	pop	r25
    3124:	8f 91       	pop	r24
    3126:	7f 91       	pop	r23
    3128:	6f 91       	pop	r22
    312a:	5f 91       	pop	r21
    312c:	4f 91       	pop	r20
    312e:	3f 91       	pop	r19
    3130:	2f 91       	pop	r18
    3132:	1f 91       	pop	r17
    3134:	0f 91       	pop	r16
    3136:	ff 90       	pop	r15
    3138:	ef 90       	pop	r14
    313a:	df 90       	pop	r13
    313c:	cf 90       	pop	r12
    313e:	bf 90       	pop	r11
    3140:	af 90       	pop	r10
    3142:	9f 90       	pop	r9
    3144:	8f 90       	pop	r8
    3146:	7f 90       	pop	r7
    3148:	6f 90       	pop	r6
    314a:	5f 90       	pop	r5
    314c:	4f 90       	pop	r4
    314e:	3f 90       	pop	r3
    3150:	2f 90       	pop	r2
    3152:	1f 90       	pop	r1
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	0f 90       	pop	r0

	asm volatile ( "ret" );
    315a:	08 95       	ret

0000315c <__vector_17>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    315c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <vPortYieldFromTick>
		asm volatile ( "reti" );
    3160:	18 95       	reti

00003162 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    3162:	0f 92       	push	r0
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	0f 92       	push	r0
    316a:	1f 92       	push	r1
    316c:	11 24       	eor	r1, r1
    316e:	2f 92       	push	r2
    3170:	3f 92       	push	r3
    3172:	4f 92       	push	r4
    3174:	5f 92       	push	r5
    3176:	6f 92       	push	r6
    3178:	7f 92       	push	r7
    317a:	8f 92       	push	r8
    317c:	9f 92       	push	r9
    317e:	af 92       	push	r10
    3180:	bf 92       	push	r11
    3182:	cf 92       	push	r12
    3184:	df 92       	push	r13
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	2f 93       	push	r18
    3190:	3f 93       	push	r19
    3192:	4f 93       	push	r20
    3194:	5f 93       	push	r21
    3196:	6f 93       	push	r22
    3198:	7f 93       	push	r23
    319a:	8f 93       	push	r24
    319c:	9f 93       	push	r25
    319e:	af 93       	push	r26
    31a0:	bf 93       	push	r27
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	ef 93       	push	r30
    31a8:	ff 93       	push	r31
    31aa:	a0 91 33 03 	lds	r26, 0x0333
    31ae:	b0 91 34 03 	lds	r27, 0x0334
    31b2:	0d b6       	in	r0, 0x3d	; 61
    31b4:	0d 92       	st	X+, r0
    31b6:	0e b6       	in	r0, 0x3e	; 62
    31b8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    31ba:	0e 94 5e 13 	call	0x26bc	; 0x26bc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    31be:	a0 91 33 03 	lds	r26, 0x0333
    31c2:	b0 91 34 03 	lds	r27, 0x0334
    31c6:	cd 91       	ld	r28, X+
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	dd 91       	ld	r29, X+
    31cc:	de bf       	out	0x3e, r29	; 62
    31ce:	ff 91       	pop	r31
    31d0:	ef 91       	pop	r30
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	bf 91       	pop	r27
    31d8:	af 91       	pop	r26
    31da:	9f 91       	pop	r25
    31dc:	8f 91       	pop	r24
    31de:	7f 91       	pop	r23
    31e0:	6f 91       	pop	r22
    31e2:	5f 91       	pop	r21
    31e4:	4f 91       	pop	r20
    31e6:	3f 91       	pop	r19
    31e8:	2f 91       	pop	r18
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	bf 90       	pop	r11
    31f8:	af 90       	pop	r10
    31fa:	9f 90       	pop	r9
    31fc:	8f 90       	pop	r8
    31fe:	7f 90       	pop	r7
    3200:	6f 90       	pop	r6
    3202:	5f 90       	pop	r5
    3204:	4f 90       	pop	r4
    3206:	3f 90       	pop	r3
    3208:	2f 90       	pop	r2
    320a:	1f 90       	pop	r1
    320c:	0f 90       	pop	r0
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3212:	08 95       	ret

00003214 <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	fc 01       	movw	r30, r24
corCRCB *pxUnblockedCRCB;
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    321e:	80 81       	ld	r24, Z
    3220:	88 23       	and	r24, r24
    3222:	19 f4       	brne	.+6      	; 0x322a <xCoRoutineRemoveFromEventList+0x16>
    3224:	c0 e0       	ldi	r28, 0x00	; 0
    3226:	d0 e0       	ldi	r29, 0x00	; 0
    3228:	05 c0       	rjmp	.+10     	; 0x3234 <xCoRoutineRemoveFromEventList+0x20>
    322a:	05 80       	ldd	r0, Z+5	; 0x05
    322c:	f6 81       	ldd	r31, Z+6	; 0x06
    322e:	e0 2d       	mov	r30, r0
    3230:	c6 81       	ldd	r28, Z+6	; 0x06
    3232:	d7 81       	ldd	r29, Z+7	; 0x07
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    3234:	8e 01       	movw	r16, r28
    3236:	04 5f       	subi	r16, 0xF4	; 244
    3238:	1f 4f       	sbci	r17, 0xFF	; 255
    323a:	c8 01       	movw	r24, r16
    323c:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    3240:	8e eb       	ldi	r24, 0xBE	; 190
    3242:	93 e0       	ldi	r25, 0x03	; 3
    3244:	b8 01       	movw	r22, r16
    3246:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vListInsertEnd>
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	e0 91 8d 03 	lds	r30, 0x038D
    3250:	f0 91 8e 03 	lds	r31, 0x038E
    3254:	9e 89       	ldd	r25, Y+22	; 0x16
    3256:	86 89       	ldd	r24, Z+22	; 0x16
    3258:	98 17       	cp	r25, r24
    325a:	08 f0       	brcs	.+2      	; 0x325e <xCoRoutineRemoveFromEventList+0x4a>
    325c:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    325e:	82 2f       	mov	r24, r18
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	08 95       	ret

0000326a <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    326a:	ff 92       	push	r15
    326c:	0f 93       	push	r16
    326e:	1f 93       	push	r17
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    3274:	99 e0       	ldi	r25, 0x09	; 9
    3276:	f9 2e       	mov	r15, r25
    3278:	28 c0       	rjmp	.+80     	; 0x32ca <vCoRoutineSchedule+0x60>
	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    327a:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    327c:	80 91 be 03 	lds	r24, 0x03BE
    3280:	88 23       	and	r24, r24
    3282:	19 f4       	brne	.+6      	; 0x328a <vCoRoutineSchedule+0x20>
    3284:	c0 e0       	ldi	r28, 0x00	; 0
    3286:	d0 e0       	ldi	r29, 0x00	; 0
    3288:	06 c0       	rjmp	.+12     	; 0x3296 <vCoRoutineSchedule+0x2c>
    328a:	e0 91 c3 03 	lds	r30, 0x03C3
    328e:	f0 91 c4 03 	lds	r31, 0x03C4
    3292:	c6 81       	ldd	r28, Z+6	; 0x06
    3294:	d7 81       	ldd	r29, Z+7	; 0x07
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    3296:	ce 01       	movw	r24, r28
    3298:	0c 96       	adiw	r24, 0x0c	; 12
    329a:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
		}
		portENABLE_INTERRUPTS();
    329e:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    32a0:	8e 01       	movw	r16, r28
    32a2:	0e 5f       	subi	r16, 0xFE	; 254
    32a4:	1f 4f       	sbci	r17, 0xFF	; 255
    32a6:	c8 01       	movw	r24, r16
    32a8:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    32ac:	9e 89       	ldd	r25, Y+22	; 0x16
    32ae:	80 91 8f 03 	lds	r24, 0x038F
    32b2:	89 17       	cp	r24, r25
    32b4:	10 f4       	brcc	.+4      	; 0x32ba <vCoRoutineSchedule+0x50>
    32b6:	90 93 8f 03 	sts	0x038F, r25
    32ba:	9f 9d       	mul	r25, r15
    32bc:	c0 01       	movw	r24, r0
    32be:	11 24       	eor	r1, r1
    32c0:	8a 56       	subi	r24, 0x6A	; 106
    32c2:	9c 4f       	sbci	r25, 0xFC	; 252
    32c4:	b8 01       	movw	r22, r16
    32c6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
    32ca:	80 91 be 03 	lds	r24, 0x03BE
    32ce:	88 23       	and	r24, r24
    32d0:	a1 f6       	brne	.-88     	; 0x327a <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    32d2:	0e 94 4a 13 	call	0x2694	; 0x2694 <xTaskGetTickCount>
    32d6:	20 91 90 03 	lds	r18, 0x0390
    32da:	30 91 91 03 	lds	r19, 0x0391
    32de:	82 1b       	sub	r24, r18
    32e0:	93 0b       	sbc	r25, r19
    32e2:	90 93 93 03 	sts	0x0393, r25
    32e6:	80 93 92 03 	sts	0x0392, r24
					vListRemove( &( pxCRCB->xEventListItem ) );											
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    32ea:	89 e0       	ldi	r24, 0x09	; 9
    32ec:	f8 2e       	mov	r15, r24
    32ee:	54 c0       	rjmp	.+168    	; 0x3398 <vCoRoutineSchedule+0x12e>
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	90 93 95 03 	sts	0x0395, r25
    32f6:	80 93 94 03 	sts	0x0394, r24
		xPassedTicks--;
    32fa:	21 50       	subi	r18, 0x01	; 1
    32fc:	30 40       	sbci	r19, 0x00	; 0
    32fe:	30 93 93 03 	sts	0x0393, r19
    3302:	20 93 92 03 	sts	0x0392, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    3306:	89 2b       	or	r24, r25
    3308:	c9 f5       	brne	.+114    	; 0x337c <vCoRoutineSchedule+0x112>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    330a:	20 91 ba 03 	lds	r18, 0x03BA
    330e:	30 91 bb 03 	lds	r19, 0x03BB
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    3312:	80 91 bc 03 	lds	r24, 0x03BC
    3316:	90 91 bd 03 	lds	r25, 0x03BD
    331a:	90 93 bb 03 	sts	0x03BB, r25
    331e:	80 93 ba 03 	sts	0x03BA, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    3322:	30 93 bd 03 	sts	0x03BD, r19
    3326:	20 93 bc 03 	sts	0x03BC, r18
    332a:	28 c0       	rjmp	.+80     	; 0x337c <vCoRoutineSchedule+0x112>
		}

		/* See if this tick has made a timeout expire. */
		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
		{	
			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    332c:	20 91 94 03 	lds	r18, 0x0394
    3330:	30 91 95 03 	lds	r19, 0x0395
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	9b 81       	ldd	r25, Y+3	; 0x03
    3338:	28 17       	cp	r18, r24
    333a:	39 07       	cpc	r19, r25
    333c:	68 f1       	brcs	.+90     	; 0x3398 <vCoRoutineSchedule+0x12e>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    333e:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    3340:	8e 01       	movw	r16, r28
    3342:	0e 5f       	subi	r16, 0xFE	; 254
    3344:	1f 4f       	sbci	r17, 0xFF	; 255
    3346:	c8 01       	movw	r24, r16
    3348:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    334c:	8c 89       	ldd	r24, Y+20	; 0x14
    334e:	9d 89       	ldd	r25, Y+21	; 0x15
    3350:	89 2b       	or	r24, r25
    3352:	21 f0       	breq	.+8      	; 0x335c <vCoRoutineSchedule+0xf2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    3354:	ce 01       	movw	r24, r28
    3356:	0c 96       	adiw	r24, 0x0c	; 12
    3358:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    335c:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    335e:	9e 89       	ldd	r25, Y+22	; 0x16
    3360:	80 91 8f 03 	lds	r24, 0x038F
    3364:	89 17       	cp	r24, r25
    3366:	10 f4       	brcc	.+4      	; 0x336c <vCoRoutineSchedule+0x102>
    3368:	90 93 8f 03 	sts	0x038F, r25
    336c:	9f 9d       	mul	r25, r15
    336e:	c0 01       	movw	r24, r0
    3370:	11 24       	eor	r1, r1
    3372:	8a 56       	subi	r24, 0x6A	; 106
    3374:	9c 4f       	sbci	r25, 0xFC	; 252
    3376:	b8 01       	movw	r22, r16
    3378:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
    337c:	e0 91 ba 03 	lds	r30, 0x03BA
    3380:	f0 91 bb 03 	lds	r31, 0x03BB
    3384:	80 81       	ld	r24, Z
    3386:	88 23       	and	r24, r24
    3388:	39 f0       	breq	.+14     	; 0x3398 <vCoRoutineSchedule+0x12e>
    338a:	05 80       	ldd	r0, Z+5	; 0x05
    338c:	f6 81       	ldd	r31, Z+6	; 0x06
    338e:	e0 2d       	mov	r30, r0
    3390:	c6 81       	ldd	r28, Z+6	; 0x06
    3392:	d7 81       	ldd	r29, Z+7	; 0x07
    3394:	20 97       	sbiw	r28, 0x00	; 0
    3396:	51 f6       	brne	.-108    	; 0x332c <vCoRoutineSchedule+0xc2>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    3398:	20 91 92 03 	lds	r18, 0x0392
    339c:	30 91 93 03 	lds	r19, 0x0393
    33a0:	80 91 94 03 	lds	r24, 0x0394
    33a4:	90 91 95 03 	lds	r25, 0x0395
    33a8:	21 15       	cp	r18, r1
    33aa:	31 05       	cpc	r19, r1
    33ac:	09 f0       	breq	.+2      	; 0x33b0 <vCoRoutineSchedule+0x146>
    33ae:	a0 cf       	rjmp	.-192    	; 0x32f0 <vCoRoutineSchedule+0x86>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    33b0:	90 93 91 03 	sts	0x0391, r25
    33b4:	80 93 90 03 	sts	0x0390, r24
    33b8:	90 91 8f 03 	lds	r25, 0x038F

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    33bc:	29 e0       	ldi	r18, 0x09	; 9
    33be:	06 c0       	rjmp	.+12     	; 0x33cc <vCoRoutineSchedule+0x162>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    33c0:	99 23       	and	r25, r25
    33c2:	19 f4       	brne	.+6      	; 0x33ca <vCoRoutineSchedule+0x160>
    33c4:	10 92 8f 03 	sts	0x038F, r1
    33c8:	32 c0       	rjmp	.+100    	; 0x342e <vCoRoutineSchedule+0x1c4>
    33ca:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    33cc:	92 9f       	mul	r25, r18
    33ce:	d0 01       	movw	r26, r0
    33d0:	11 24       	eor	r1, r1
    33d2:	aa 56       	subi	r26, 0x6A	; 106
    33d4:	bc 4f       	sbci	r27, 0xFC	; 252
    33d6:	8c 91       	ld	r24, X
    33d8:	88 23       	and	r24, r24
    33da:	91 f3       	breq	.-28     	; 0x33c0 <vCoRoutineSchedule+0x156>
    33dc:	90 93 8f 03 	sts	0x038F, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    33e0:	11 96       	adiw	r26, 0x01	; 1
    33e2:	ed 91       	ld	r30, X+
    33e4:	fc 91       	ld	r31, X
    33e6:	12 97       	sbiw	r26, 0x02	; 2
    33e8:	02 80       	ldd	r0, Z+2	; 0x02
    33ea:	f3 81       	ldd	r31, Z+3	; 0x03
    33ec:	e0 2d       	mov	r30, r0
    33ee:	12 96       	adiw	r26, 0x02	; 2
    33f0:	fc 93       	st	X, r31
    33f2:	ee 93       	st	-X, r30
    33f4:	11 97       	sbiw	r26, 0x01	; 1
    33f6:	cd 01       	movw	r24, r26
    33f8:	03 96       	adiw	r24, 0x03	; 3
    33fa:	e8 17       	cp	r30, r24
    33fc:	f9 07       	cpc	r31, r25
    33fe:	31 f4       	brne	.+12     	; 0x340c <vCoRoutineSchedule+0x1a2>
    3400:	82 81       	ldd	r24, Z+2	; 0x02
    3402:	93 81       	ldd	r25, Z+3	; 0x03
    3404:	12 96       	adiw	r26, 0x02	; 2
    3406:	9c 93       	st	X, r25
    3408:	8e 93       	st	-X, r24
    340a:	11 97       	sbiw	r26, 0x01	; 1
    340c:	11 96       	adiw	r26, 0x01	; 1
    340e:	ed 91       	ld	r30, X+
    3410:	fc 91       	ld	r31, X
    3412:	12 97       	sbiw	r26, 0x02	; 2
    3414:	06 80       	ldd	r0, Z+6	; 0x06
    3416:	f7 81       	ldd	r31, Z+7	; 0x07
    3418:	e0 2d       	mov	r30, r0
    341a:	f0 93 8e 03 	sts	0x038E, r31
    341e:	e0 93 8d 03 	sts	0x038D, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    3422:	20 81       	ld	r18, Z
    3424:	31 81       	ldd	r19, Z+1	; 0x01
    3426:	cf 01       	movw	r24, r30
    3428:	67 89       	ldd	r22, Z+23	; 0x17
    342a:	f9 01       	movw	r30, r18
    342c:	09 95       	icall

	return;
}
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	1f 91       	pop	r17
    3434:	0f 91       	pop	r16
    3436:	ff 90       	pop	r15
    3438:	08 95       	ret

0000343a <vCoRoutineAddToDelayedList>:
	return xReturn;	
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    343a:	0f 93       	push	r16
    343c:	1f 93       	push	r17
    343e:	cf 93       	push	r28
    3440:	df 93       	push	r29
    3442:	eb 01       	movw	r28, r22
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    3444:	00 91 94 03 	lds	r16, 0x0394
    3448:	10 91 95 03 	lds	r17, 0x0395
    344c:	08 0f       	add	r16, r24
    344e:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    3450:	80 91 8d 03 	lds	r24, 0x038D
    3454:	90 91 8e 03 	lds	r25, 0x038E
    3458:	02 96       	adiw	r24, 0x02	; 2
    345a:	0e 94 37 10 	call	0x206e	; 0x206e <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    345e:	e0 91 8d 03 	lds	r30, 0x038D
    3462:	f0 91 8e 03 	lds	r31, 0x038E
    3466:	13 83       	std	Z+3, r17	; 0x03
    3468:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    346a:	80 91 94 03 	lds	r24, 0x0394
    346e:	90 91 95 03 	lds	r25, 0x0395
    3472:	bf 01       	movw	r22, r30
    3474:	6e 5f       	subi	r22, 0xFE	; 254
    3476:	7f 4f       	sbci	r23, 0xFF	; 255
    3478:	08 17       	cp	r16, r24
    347a:	19 07       	cpc	r17, r25
    347c:	28 f4       	brcc	.+10     	; 0x3488 <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    347e:	80 91 bc 03 	lds	r24, 0x03BC
    3482:	90 91 bd 03 	lds	r25, 0x03BD
    3486:	04 c0       	rjmp	.+8      	; 0x3490 <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    3488:	80 91 ba 03 	lds	r24, 0x03BA
    348c:	90 91 bb 03 	lds	r25, 0x03BB
    3490:	0e 94 02 10 	call	0x2004	; 0x2004 <vListInsert>
	}

	if( pxEventList )
    3494:	20 97       	sbiw	r28, 0x00	; 0
    3496:	49 f0       	breq	.+18     	; 0x34aa <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    3498:	60 91 8d 03 	lds	r22, 0x038D
    349c:	70 91 8e 03 	lds	r23, 0x038E
    34a0:	64 5f       	subi	r22, 0xF4	; 244
    34a2:	7f 4f       	sbci	r23, 0xFF	; 255
    34a4:	ce 01       	movw	r24, r28
    34a6:	0e 94 02 10 	call	0x2004	; 0x2004 <vListInsert>
	}
}
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	1f 91       	pop	r17
    34b0:	0f 91       	pop	r16
    34b2:	08 95       	ret

000034b4 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    34b4:	af 92       	push	r10
    34b6:	bf 92       	push	r11
    34b8:	cf 92       	push	r12
    34ba:	df 92       	push	r13
    34bc:	ef 92       	push	r14
    34be:	ff 92       	push	r15
    34c0:	0f 93       	push	r16
    34c2:	1f 93       	push	r17
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	6c 01       	movw	r12, r24
    34ca:	b6 2e       	mov	r11, r22
    34cc:	a4 2e       	mov	r10, r20
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    34ce:	8a e1       	ldi	r24, 0x1A	; 26
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <pvPortMalloc>
    34d6:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    34d8:	00 97       	sbiw	r24, 0x00	; 0
    34da:	11 f4       	brne	.+4      	; 0x34e0 <xCoRoutineCreate+0x2c>
    34dc:	8f ef       	ldi	r24, 0xFF	; 255
    34de:	59 c0       	rjmp	.+178    	; 0x3592 <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    34e0:	80 91 8d 03 	lds	r24, 0x038D
    34e4:	90 91 8e 03 	lds	r25, 0x038E
    34e8:	89 2b       	or	r24, r25
    34ea:	21 f5       	brne	.+72     	; 0x3534 <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    34ec:	d0 93 8e 03 	sts	0x038E, r29
    34f0:	c0 93 8d 03 	sts	0x038D, r28
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    34f4:	86 e9       	ldi	r24, 0x96	; 150
    34f6:	93 e0       	ldi	r25, 0x03	; 3
    34f8:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
    34fc:	8f e9       	ldi	r24, 0x9F	; 159
    34fe:	93 e0       	ldi	r25, 0x03	; 3
    3500:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    3504:	28 ea       	ldi	r18, 0xA8	; 168
    3506:	e2 2e       	mov	r14, r18
    3508:	23 e0       	ldi	r18, 0x03	; 3
    350a:	f2 2e       	mov	r15, r18
    350c:	c7 01       	movw	r24, r14
    350e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    3512:	01 eb       	ldi	r16, 0xB1	; 177
    3514:	13 e0       	ldi	r17, 0x03	; 3
    3516:	c8 01       	movw	r24, r16
    3518:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    351c:	8e eb       	ldi	r24, 0xBE	; 190
    351e:	93 e0       	ldi	r25, 0x03	; 3
    3520:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    3524:	f0 92 bb 03 	sts	0x03BB, r15
    3528:	e0 92 ba 03 	sts	0x03BA, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    352c:	10 93 bd 03 	sts	0x03BD, r17
    3530:	00 93 bc 03 	sts	0x03BC, r16
    3534:	eb 2c       	mov	r14, r11
    3536:	bb 20       	and	r11, r11
    3538:	11 f0       	breq	.+4      	; 0x353e <xCoRoutineCreate+0x8a>
    353a:	ee 24       	eor	r14, r14
    353c:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    353e:	19 8e       	std	Y+25, r1	; 0x19
    3540:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    3542:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    3544:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    3546:	fe 01       	movw	r30, r28
    3548:	c1 92       	st	Z+, r12
    354a:	d1 92       	st	Z+, r13
    354c:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    354e:	cf 01       	movw	r24, r30
    3550:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    3554:	ce 01       	movw	r24, r28
    3556:	0c 96       	adiw	r24, 0x0c	; 12
    3558:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    355c:	d9 87       	std	Y+9, r29	; 0x09
    355e:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    3560:	db 8b       	std	Y+19, r29	; 0x13
    3562:	ca 8b       	std	Y+18, r28	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    3564:	84 e0       	ldi	r24, 0x04	; 4
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	8e 19       	sub	r24, r14
    356a:	91 09       	sbc	r25, r1
    356c:	9d 87       	std	Y+13, r25	; 0x0d
    356e:	8c 87       	std	Y+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    3570:	9e 89       	ldd	r25, Y+22	; 0x16
    3572:	80 91 8f 03 	lds	r24, 0x038F
    3576:	89 17       	cp	r24, r25
    3578:	10 f4       	brcc	.+4      	; 0x357e <xCoRoutineCreate+0xca>
    357a:	90 93 8f 03 	sts	0x038F, r25
    357e:	89 e0       	ldi	r24, 0x09	; 9
    3580:	98 9f       	mul	r25, r24
    3582:	c0 01       	movw	r24, r0
    3584:	11 24       	eor	r1, r1
    3586:	8a 56       	subi	r24, 0x6A	; 106
    3588:	9c 4f       	sbci	r25, 0xFC	; 252
    358a:	b8 01       	movw	r22, r16
    358c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vListInsertEnd>
    3590:	81 e0       	ldi	r24, 0x01	; 1
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}
	
	return xReturn;	
}
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	ff 90       	pop	r15
    359c:	ef 90       	pop	r14
    359e:	df 90       	pop	r13
    35a0:	cf 90       	pop	r12
    35a2:	bf 90       	pop	r11
    35a4:	af 90       	pop	r10
    35a6:	08 95       	ret

000035a8 <vPortFree>:
{
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    35a8:	08 95       	ret

000035aa <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    35aa:	10 92 c8 03 	sts	0x03C8, r1
    35ae:	10 92 c7 03 	sts	0x03C7, r1
}
    35b2:	08 95       	ret

000035b4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    35b4:	28 eb       	ldi	r18, 0xB8	; 184
    35b6:	3b e0       	ldi	r19, 0x0B	; 11
    35b8:	80 91 c7 03 	lds	r24, 0x03C7
    35bc:	90 91 c8 03 	lds	r25, 0x03C8
    35c0:	28 1b       	sub	r18, r24
    35c2:	39 0b       	sbc	r19, r25
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
}
    35c4:	c9 01       	movw	r24, r18
    35c6:	08 95       	ret

000035c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
    35d0:	8c 01       	movw	r16, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    35d2:	0e 94 44 13 	call	0x2688	; 0x2688 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    35d6:	80 91 c7 03 	lds	r24, 0x03C7
    35da:	90 91 c8 03 	lds	r25, 0x03C8
    35de:	98 01       	movw	r18, r16
    35e0:	28 0f       	add	r18, r24
    35e2:	39 1f       	adc	r19, r25
    35e4:	4b e0       	ldi	r20, 0x0B	; 11
    35e6:	28 3b       	cpi	r18, 0xB8	; 184
    35e8:	34 07       	cpc	r19, r20
    35ea:	58 f4       	brcc	.+22     	; 0x3602 <pvPortMalloc+0x3a>
    35ec:	82 17       	cp	r24, r18
    35ee:	93 07       	cpc	r25, r19
    35f0:	40 f4       	brcc	.+16     	; 0x3602 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    35f2:	ec 01       	movw	r28, r24
    35f4:	c7 53       	subi	r28, 0x37	; 55
    35f6:	dc 4f       	sbci	r29, 0xFC	; 252
			xNextFreeByte += xWantedSize;			
    35f8:	30 93 c8 03 	sts	0x03C8, r19
    35fc:	20 93 c7 03 	sts	0x03C7, r18
    3600:	02 c0       	rjmp	.+4      	; 0x3606 <pvPortMalloc+0x3e>
    3602:	c0 e0       	ldi	r28, 0x00	; 0
    3604:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}
	xTaskResumeAll();
    3606:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
    360a:	ce 01       	movw	r24, r28
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	08 95       	ret

00003616 <prescaler_hex_to_value>:
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    3616:	e8 2f       	mov	r30, r24
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	e7 70       	andi	r30, 0x07	; 7
    361c:	f0 70       	andi	r31, 0x00	; 0
    361e:	ee 0f       	add	r30, r30
    3620:	ff 1f       	adc	r31, r31
    3622:	e2 55       	subi	r30, 0x52	; 82
    3624:	fe 4f       	sbci	r31, 0xFE	; 254
    3626:	25 91       	lpm	r18, Z+
    3628:	34 91       	lpm	r19, Z+
}
    362a:	c9 01       	movw	r24, r18
    362c:	08 95       	ret

0000362e <prescaler_hex_to_value_for_timer2>:
uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    362e:	e8 2f       	mov	r30, r24
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	e7 70       	andi	r30, 0x07	; 7
    3634:	f0 70       	andi	r31, 0x00	; 0
    3636:	ee 0f       	add	r30, r30
    3638:	ff 1f       	adc	r31, r31
    363a:	e6 54       	subi	r30, 0x46	; 70
    363c:	fe 4f       	sbci	r31, 0xFE	; 254
    363e:	25 91       	lpm	r18, Z+
    3640:	34 91       	lpm	r19, Z+
}
    3642:	c9 01       	movw	r24, r18
    3644:	08 95       	ret

00003646 <get_timer0_prescaler>:

uint16_t get_timer0_prescaler(void)
{
  return prescaler_hex_to_value(TCCR0B);
    3646:	85 b5       	in	r24, 0x25	; 37
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    3648:	e8 2f       	mov	r30, r24
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	e7 70       	andi	r30, 0x07	; 7
    364e:	f0 70       	andi	r31, 0x00	; 0
    3650:	ee 0f       	add	r30, r30
    3652:	ff 1f       	adc	r31, r31
    3654:	e2 55       	subi	r30, 0x52	; 82
    3656:	fe 4f       	sbci	r31, 0xFE	; 254
    3658:	25 91       	lpm	r18, Z+
    365a:	34 91       	lpm	r19, Z+
}

uint16_t get_timer0_prescaler(void)
{
  return prescaler_hex_to_value(TCCR0B);
}
    365c:	c9 01       	movw	r24, r18
    365e:	08 95       	ret

00003660 <get_timer1_prescaler>:
uint16_t get_timer1_prescaler(void)
{
  return prescaler_hex_to_value(TCCR1B);
    3660:	80 91 81 00 	lds	r24, 0x0081
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    3664:	e8 2f       	mov	r30, r24
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	e7 70       	andi	r30, 0x07	; 7
    366a:	f0 70       	andi	r31, 0x00	; 0
    366c:	ee 0f       	add	r30, r30
    366e:	ff 1f       	adc	r31, r31
    3670:	e2 55       	subi	r30, 0x52	; 82
    3672:	fe 4f       	sbci	r31, 0xFE	; 254
    3674:	25 91       	lpm	r18, Z+
    3676:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR0B);
}
uint16_t get_timer1_prescaler(void)
{
  return prescaler_hex_to_value(TCCR1B);
}
    3678:	c9 01       	movw	r24, r18
    367a:	08 95       	ret

0000367c <get_timer2_prescaler>:
uint16_t get_timer2_prescaler(void)
{
  return prescaler_hex_to_value_for_timer2(TCCR2B);
    367c:	80 91 b1 00 	lds	r24, 0x00B1
uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    3680:	e8 2f       	mov	r30, r24
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	e7 70       	andi	r30, 0x07	; 7
    3686:	f0 70       	andi	r31, 0x00	; 0
    3688:	ee 0f       	add	r30, r30
    368a:	ff 1f       	adc	r31, r31
    368c:	e6 54       	subi	r30, 0x46	; 70
    368e:	fe 4f       	sbci	r31, 0xFE	; 254
    3690:	25 91       	lpm	r18, Z+
    3692:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR1B);
}
uint16_t get_timer2_prescaler(void)
{
  return prescaler_hex_to_value_for_timer2(TCCR2B);
}
    3694:	c9 01       	movw	r24, r18
    3696:	08 95       	ret

00003698 <get_timer3_prescaler>:
uint16_t get_timer3_prescaler(void)
{
  return prescaler_hex_to_value(TCCR3B);
    3698:	80 91 91 00 	lds	r24, 0x0091
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    369c:	e8 2f       	mov	r30, r24
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	e7 70       	andi	r30, 0x07	; 7
    36a2:	f0 70       	andi	r31, 0x00	; 0
    36a4:	ee 0f       	add	r30, r30
    36a6:	ff 1f       	adc	r31, r31
    36a8:	e2 55       	subi	r30, 0x52	; 82
    36aa:	fe 4f       	sbci	r31, 0xFE	; 254
    36ac:	25 91       	lpm	r18, Z+
    36ae:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value_for_timer2(TCCR2B);
}
uint16_t get_timer3_prescaler(void)
{
  return prescaler_hex_to_value(TCCR3B);
}
    36b0:	c9 01       	movw	r24, r18
    36b2:	08 95       	ret

000036b4 <get_timer4_prescaler>:
uint16_t get_timer4_prescaler(void)
{
  return prescaler_hex_to_value(TCCR4B);
    36b4:	80 91 a1 00 	lds	r24, 0x00A1
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    36b8:	e8 2f       	mov	r30, r24
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	e7 70       	andi	r30, 0x07	; 7
    36be:	f0 70       	andi	r31, 0x00	; 0
    36c0:	ee 0f       	add	r30, r30
    36c2:	ff 1f       	adc	r31, r31
    36c4:	e2 55       	subi	r30, 0x52	; 82
    36c6:	fe 4f       	sbci	r31, 0xFE	; 254
    36c8:	25 91       	lpm	r18, Z+
    36ca:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR3B);
}
uint16_t get_timer4_prescaler(void)
{
  return prescaler_hex_to_value(TCCR4B);
}
    36cc:	c9 01       	movw	r24, r18
    36ce:	08 95       	ret

000036d0 <get_timer5_prescaler>:
uint16_t get_timer5_prescaler(void)
{
  return prescaler_hex_to_value(TCCR5B);
    36d0:	80 91 21 01 	lds	r24, 0x0121
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    36d4:	e8 2f       	mov	r30, r24
    36d6:	f0 e0       	ldi	r31, 0x00	; 0
    36d8:	e7 70       	andi	r30, 0x07	; 7
    36da:	f0 70       	andi	r31, 0x00	; 0
    36dc:	ee 0f       	add	r30, r30
    36de:	ff 1f       	adc	r31, r31
    36e0:	e2 55       	subi	r30, 0x52	; 82
    36e2:	fe 4f       	sbci	r31, 0xFE	; 254
    36e4:	25 91       	lpm	r18, Z+
    36e6:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR4B);
}
uint16_t get_timer5_prescaler(void)
{
  return prescaler_hex_to_value(TCCR5B);
}
    36e8:	c9 01       	movw	r24, r18
    36ea:	08 95       	ret

000036ec <get_timer0_overflow>:

const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
    36ec:	20 91 63 12 	lds	r18, 0x1263
    36f0:	30 91 64 12 	lds	r19, 0x1264
    36f4:	40 91 65 12 	lds	r20, 0x1265
    36f8:	50 91 66 12 	lds	r21, 0x1266
}
    36fc:	b9 01       	movw	r22, r18
    36fe:	ca 01       	movw	r24, r20
    3700:	08 95       	ret

00003702 <get_timer1_overflow>:
const uint32_t get_timer1_overflow(void)
{
    return timer1_ovrflow_cnt;
    3702:	20 91 5f 12 	lds	r18, 0x125F
    3706:	30 91 60 12 	lds	r19, 0x1260
    370a:	40 91 61 12 	lds	r20, 0x1261
    370e:	50 91 62 12 	lds	r21, 0x1262
}
    3712:	b9 01       	movw	r22, r18
    3714:	ca 01       	movw	r24, r20
    3716:	08 95       	ret

00003718 <get_timer2_overflow>:
const uint32_t get_timer2_overflow(void)
{
    return timer2_ovrflow_cnt;
    3718:	20 91 67 12 	lds	r18, 0x1267
    371c:	30 91 68 12 	lds	r19, 0x1268
    3720:	40 91 69 12 	lds	r20, 0x1269
    3724:	50 91 6a 12 	lds	r21, 0x126A
}
    3728:	b9 01       	movw	r22, r18
    372a:	ca 01       	movw	r24, r20
    372c:	08 95       	ret

0000372e <get_timer3_overflow>:
const uint32_t get_timer3_overflow(void)
{
    return timer3_ovrflow_cnt;
    372e:	20 91 6f 12 	lds	r18, 0x126F
    3732:	30 91 70 12 	lds	r19, 0x1270
    3736:	40 91 71 12 	lds	r20, 0x1271
    373a:	50 91 72 12 	lds	r21, 0x1272
}
    373e:	b9 01       	movw	r22, r18
    3740:	ca 01       	movw	r24, r20
    3742:	08 95       	ret

00003744 <get_timer4_overflow>:
const uint32_t get_timer4_overflow(void)
{
    return timer4_ovrflow_cnt;
    3744:	20 91 5b 12 	lds	r18, 0x125B
    3748:	30 91 5c 12 	lds	r19, 0x125C
    374c:	40 91 5d 12 	lds	r20, 0x125D
    3750:	50 91 5e 12 	lds	r21, 0x125E
}
    3754:	b9 01       	movw	r22, r18
    3756:	ca 01       	movw	r24, r20
    3758:	08 95       	ret

0000375a <get_timer5_overflow>:
const uint32_t get_timer5_overflow(void)
{
    return timer5_ovrflow_cnt;
    375a:	20 91 73 12 	lds	r18, 0x1273
    375e:	30 91 74 12 	lds	r19, 0x1274
    3762:	40 91 75 12 	lds	r20, 0x1275
    3766:	50 91 76 12 	lds	r21, 0x1276
}
    376a:	b9 01       	movw	r22, r18
    376c:	ca 01       	movw	r24, r20
    376e:	08 95       	ret

00003770 <get_timer0_counter>:

const uint8_t get_timer0_counter(void)
{
    return TCNT0;
    3770:	86 b5       	in	r24, 0x26	; 38
}
    3772:	08 95       	ret

00003774 <get_timer1_counter>:
const uint16_t get_timer1_counter(void)
{
    return TCNT1;
    3774:	20 91 84 00 	lds	r18, 0x0084
    3778:	30 91 85 00 	lds	r19, 0x0085
}
    377c:	c9 01       	movw	r24, r18
    377e:	08 95       	ret

00003780 <get_timer2_counter>:
const uint8_t get_timer2_counter(void)
{
    return TCNT2;
    3780:	80 91 b2 00 	lds	r24, 0x00B2
}
    3784:	08 95       	ret

00003786 <get_timer3_counter>:
const uint16_t get_timer3_counter(void)
{
    return TCNT3;
    3786:	20 91 94 00 	lds	r18, 0x0094
    378a:	30 91 95 00 	lds	r19, 0x0095
}
    378e:	c9 01       	movw	r24, r18
    3790:	08 95       	ret

00003792 <get_timer4_counter>:
const uint16_t get_timer4_counter(void)
{
    return TCNT4;
    3792:	20 91 a4 00 	lds	r18, 0x00A4
    3796:	30 91 a5 00 	lds	r19, 0x00A5
}
    379a:	c9 01       	movw	r24, r18
    379c:	08 95       	ret

0000379e <get_timer5_counter>:
const uint16_t get_timer5_counter(void)
{
    return TCNT5;
    379e:	20 91 24 01 	lds	r18, 0x0124
    37a2:	30 91 25 01 	lds	r19, 0x0125
}
    37a6:	c9 01       	movw	r24, r18
    37a8:	08 95       	ret

000037aa <reset_timer0>:

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    37aa:	10 92 63 12 	sts	0x1263, r1
    37ae:	10 92 64 12 	sts	0x1264, r1
    37b2:	10 92 65 12 	sts	0x1265, r1
    37b6:	10 92 66 12 	sts	0x1266, r1
    37ba:	16 bc       	out	0x26, r1	; 38
}
    37bc:	08 95       	ret

000037be <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    37be:	10 92 5f 12 	sts	0x125F, r1
    37c2:	10 92 60 12 	sts	0x1260, r1
    37c6:	10 92 61 12 	sts	0x1261, r1
    37ca:	10 92 62 12 	sts	0x1262, r1
    37ce:	10 92 85 00 	sts	0x0085, r1
    37d2:	10 92 84 00 	sts	0x0084, r1
}
    37d6:	08 95       	ret

000037d8 <reset_timer2>:
void reset_timer2(void)
{
    TCNT2 = timer2_ovrflow_cnt = 0;
    37d8:	10 92 67 12 	sts	0x1267, r1
    37dc:	10 92 68 12 	sts	0x1268, r1
    37e0:	10 92 69 12 	sts	0x1269, r1
    37e4:	10 92 6a 12 	sts	0x126A, r1
    37e8:	10 92 b2 00 	sts	0x00B2, r1
}
    37ec:	08 95       	ret

000037ee <reset_timer3>:
void reset_timer3(void)
{
    TCNT3 = timer3_ovrflow_cnt = 0;
    37ee:	10 92 6f 12 	sts	0x126F, r1
    37f2:	10 92 70 12 	sts	0x1270, r1
    37f6:	10 92 71 12 	sts	0x1271, r1
    37fa:	10 92 72 12 	sts	0x1272, r1
    37fe:	10 92 95 00 	sts	0x0095, r1
    3802:	10 92 94 00 	sts	0x0094, r1
}
    3806:	08 95       	ret

00003808 <reset_timer4>:
void reset_timer4(void)
{
    TCNT4 = timer4_ovrflow_cnt = 0;
    3808:	10 92 5b 12 	sts	0x125B, r1
    380c:	10 92 5c 12 	sts	0x125C, r1
    3810:	10 92 5d 12 	sts	0x125D, r1
    3814:	10 92 5e 12 	sts	0x125E, r1
    3818:	10 92 a5 00 	sts	0x00A5, r1
    381c:	10 92 a4 00 	sts	0x00A4, r1
}
    3820:	08 95       	ret

00003822 <reset_timer5>:
void reset_timer5(void)
{
    TCNT5 = timer5_ovrflow_cnt = 0;
    3822:	10 92 73 12 	sts	0x1273, r1
    3826:	10 92 74 12 	sts	0x1274, r1
    382a:	10 92 75 12 	sts	0x1275, r1
    382e:	10 92 76 12 	sts	0x1276, r1
    3832:	10 92 25 01 	sts	0x0125, r1
    3836:	10 92 24 01 	sts	0x0124, r1
}
    383a:	08 95       	ret

0000383c <delay_us>:

	delay_loops = ((time_us * CYCLES_PER_US)+3) / 5; // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
}
    383c:	08 95       	ret

0000383e <init_timer0>:

void init_timer0(const uint8_t prescaler)
{
  TCCR0B = prescaler;
    383e:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	80 93 6e 00 	sts	0x006E, r24
    return TCNT5;
}

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    3846:	10 92 63 12 	sts	0x1263, r1
    384a:	10 92 64 12 	sts	0x1264, r1
    384e:	10 92 65 12 	sts	0x1265, r1
    3852:	10 92 66 12 	sts	0x1266, r1
    3856:	16 bc       	out	0x26, r1	; 38
void init_timer0(const uint8_t prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
    3858:	08 95       	ret

0000385a <init_timer1>:
void init_timer1(const uint8_t prescaler)
{
  TCCR1B = prescaler;
    385a:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    3864:	10 92 5f 12 	sts	0x125F, r1
    3868:	10 92 60 12 	sts	0x1260, r1
    386c:	10 92 61 12 	sts	0x1261, r1
    3870:	10 92 62 12 	sts	0x1262, r1
    3874:	10 92 85 00 	sts	0x0085, r1
    3878:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const uint8_t prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
    387c:	08 95       	ret

0000387e <init_timer2>:
void init_timer2(const uint8_t prescaler)
{
  TCCR2B = prescaler;
    387e:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = _BV(TOIE2); // enable interrupts
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	80 93 70 00 	sts	0x0070, r24
{
    TCNT1 = timer1_ovrflow_cnt = 0;
}
void reset_timer2(void)
{
    TCNT2 = timer2_ovrflow_cnt = 0;
    3888:	10 92 67 12 	sts	0x1267, r1
    388c:	10 92 68 12 	sts	0x1268, r1
    3890:	10 92 69 12 	sts	0x1269, r1
    3894:	10 92 6a 12 	sts	0x126A, r1
    3898:	10 92 b2 00 	sts	0x00B2, r1
void init_timer2(const uint8_t prescaler)
{
  TCCR2B = prescaler;
  TIMSK2 = _BV(TOIE2); // enable interrupts
  reset_timer2(); // reset counter
}
    389c:	08 95       	ret

0000389e <init_timer3>:
void init_timer3(const uint8_t prescaler)
{
  TCCR3B = prescaler;
    389e:	80 93 91 00 	sts	0x0091, r24
  TIMSK3 = _BV(TOIE3); // enable interrupts
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	80 93 71 00 	sts	0x0071, r24
{
    TCNT2 = timer2_ovrflow_cnt = 0;
}
void reset_timer3(void)
{
    TCNT3 = timer3_ovrflow_cnt = 0;
    38a8:	10 92 6f 12 	sts	0x126F, r1
    38ac:	10 92 70 12 	sts	0x1270, r1
    38b0:	10 92 71 12 	sts	0x1271, r1
    38b4:	10 92 72 12 	sts	0x1272, r1
    38b8:	10 92 95 00 	sts	0x0095, r1
    38bc:	10 92 94 00 	sts	0x0094, r1
void init_timer3(const uint8_t prescaler)
{
  TCCR3B = prescaler;
  TIMSK3 = _BV(TOIE3); // enable interrupts
  reset_timer3(); // reset counter
}
    38c0:	08 95       	ret

000038c2 <init_timer4>:
void init_timer4(const uint8_t prescaler)
{
  TCCR4B = prescaler;
    38c2:	80 93 a1 00 	sts	0x00A1, r24
  TIMSK4 = _BV(TOIE4); // enable interrupts
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	80 93 72 00 	sts	0x0072, r24
{
    TCNT3 = timer3_ovrflow_cnt = 0;
}
void reset_timer4(void)
{
    TCNT4 = timer4_ovrflow_cnt = 0;
    38cc:	10 92 5b 12 	sts	0x125B, r1
    38d0:	10 92 5c 12 	sts	0x125C, r1
    38d4:	10 92 5d 12 	sts	0x125D, r1
    38d8:	10 92 5e 12 	sts	0x125E, r1
    38dc:	10 92 a5 00 	sts	0x00A5, r1
    38e0:	10 92 a4 00 	sts	0x00A4, r1
void init_timer4(const uint8_t prescaler)
{
  TCCR4B = prescaler;
  TIMSK4 = _BV(TOIE4); // enable interrupts
  reset_timer4(); // reset counter
}
    38e4:	08 95       	ret

000038e6 <init_timer5>:
void init_timer5(const uint8_t prescaler)
{
  TCCR5B = prescaler;
    38e6:	80 93 21 01 	sts	0x0121, r24
  TIMSK5 = _BV(TOIE5); // enable interrupts
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	80 93 73 00 	sts	0x0073, r24
{
    TCNT4 = timer4_ovrflow_cnt = 0;
}
void reset_timer5(void)
{
    TCNT5 = timer5_ovrflow_cnt = 0;
    38f0:	10 92 73 12 	sts	0x1273, r1
    38f4:	10 92 74 12 	sts	0x1274, r1
    38f8:	10 92 75 12 	sts	0x1275, r1
    38fc:	10 92 76 12 	sts	0x1276, r1
    3900:	10 92 25 01 	sts	0x0125, r1
    3904:	10 92 24 01 	sts	0x0124, r1
void init_timer5(const uint8_t prescaler)
{
  TCCR5B = prescaler;
  TIMSK5 = _BV(TOIE5); // enable interrupts
  reset_timer5(); // reset counter
}
    3908:	08 95       	ret

0000390a <timer_attach>:

void timer_attach(TimerInterrupt_t interrupt, void (*user_func)(void) )
{
  // set the interrupt function to run
  // the supplied user's function
  TimerIntFunc[interrupt] = user_func;
    390a:	e8 2f       	mov	r30, r24
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	ee 0f       	add	r30, r30
    3910:	ff 1f       	adc	r31, r31
    3912:	ef 57       	subi	r30, 0x7F	; 127
    3914:	f0 4f       	sbci	r31, 0xF0	; 240
    3916:	71 83       	std	Z+1, r23	; 0x01
    3918:	60 83       	st	Z, r22
}
    391a:	08 95       	ret

0000391c <timer_detach>:

void timer_detach(TimerInterrupt_t interrupt)
{
  // clear the user defined interrupt function
  TimerIntFunc[interrupt] = NULL;
    391c:	e8 2f       	mov	r30, r24
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	ee 0f       	add	r30, r30
    3922:	ff 1f       	adc	r31, r31
    3924:	ef 57       	subi	r30, 0x7F	; 127
    3926:	f0 4f       	sbci	r31, 0xF0	; 240
    3928:	11 82       	std	Z+1, r1	; 0x01
    392a:	10 82       	st	Z, r1
}
    392c:	08 95       	ret

0000392e <_delay_loop_2>:

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    392e:	01 97       	sbiw	r24, 0x01	; 1
    3930:	f1 f7       	brne	.-4      	; 0x392e <_delay_loop_2>
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    3932:	08 95       	ret

00003934 <sleep>:

void sleep(uint16_t time_ms)
{
    3934:	af 92       	push	r10
    3936:	bf 92       	push	r11
    3938:	cf 92       	push	r12
    393a:	df 92       	push	r13
    393c:	ef 92       	push	r14
    393e:	ff 92       	push	r15
    3940:	0f 93       	push	r16
    3942:	1f 93       	push	r17
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * time_ms;
    3944:	a0 e0       	ldi	r26, 0x00	; 0
    3946:	b0 e0       	ldi	r27, 0x00	; 0
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__floatunsisf>
    3950:	5b 01       	movw	r10, r22
    3952:	6c 01       	movw	r12, r24
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	4a e7       	ldi	r20, 0x7A	; 122
    395a:	55 e4       	ldi	r21, 0x45	; 69
    395c:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    3960:	7b 01       	movw	r14, r22
    3962:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e8       	ldi	r20, 0x80	; 128
    396a:	5f e3       	ldi	r21, 0x3F	; 63
    396c:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    3970:	88 23       	and	r24, r24
    3972:	1c f4       	brge	.+6      	; 0x397a <sleep+0x46>
    3974:	61 e0       	ldi	r22, 0x01	; 1
    3976:	70 e0       	ldi	r23, 0x00	; 0
    3978:	24 c0       	rjmp	.+72     	; 0x39c2 <sleep+0x8e>
		__ticks = 1;
	else if (__tmp > 65535)
    397a:	c8 01       	movw	r24, r16
    397c:	b7 01       	movw	r22, r14
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	3f ef       	ldi	r19, 0xFF	; 255
    3982:	4f e7       	ldi	r20, 0x7F	; 127
    3984:	57 e4       	ldi	r21, 0x47	; 71
    3986:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__gesf2>
    398a:	18 16       	cp	r1, r24
    398c:	b4 f4       	brge	.+44     	; 0x39ba <sleep+0x86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
    398e:	c6 01       	movw	r24, r12
    3990:	b5 01       	movw	r22, r10
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	40 e2       	ldi	r20, 0x20	; 32
    3998:	51 e4       	ldi	r21, 0x41	; 65
    399a:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    399e:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <__fixunssfsi>
}

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39a2:	80 e9       	ldi	r24, 0x90	; 144
    39a4:	91 e0       	ldi	r25, 0x01	; 1
    39a6:	05 c0       	rjmp	.+10     	; 0x39b2 <sleep+0x7e>
    39a8:	fc 01       	movw	r30, r24
    39aa:	31 97       	sbiw	r30, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <sleep+0x76>
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ae:	61 50       	subi	r22, 0x01	; 1
    39b0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
    39b2:	61 15       	cp	r22, r1
    39b4:	71 05       	cpc	r23, r1
    39b6:	c1 f7       	brne	.-16     	; 0x39a8 <sleep+0x74>
    39b8:	07 c0       	rjmp	.+14     	; 0x39c8 <sleep+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ba:	c8 01       	movw	r24, r16
    39bc:	b7 01       	movw	r22, r14
    39be:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <__fixunssfsi>
}

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39c2:	cb 01       	movw	r24, r22
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	f1 f7       	brne	.-4      	; 0x39c4 <sleep+0x90>
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}
    39c8:	1f 91       	pop	r17
    39ca:	0f 91       	pop	r16
    39cc:	ff 90       	pop	r15
    39ce:	ef 90       	pop	r14
    39d0:	df 90       	pop	r13
    39d2:	cf 90       	pop	r12
    39d4:	bf 90       	pop	r11
    39d6:	af 90       	pop	r10
    39d8:	08 95       	ret

000039da <__vector_23>:
    }
  }
}*/

ISR(TIMER0_OVF_vect) 
{
    39da:	1f 92       	push	r1
    39dc:	0f 92       	push	r0
    39de:	0f b6       	in	r0, 0x3f	; 63
    39e0:	0f 92       	push	r0
    39e2:	11 24       	eor	r1, r1
    39e4:	2f 93       	push	r18
    39e6:	3f 93       	push	r19
    39e8:	4f 93       	push	r20
    39ea:	5f 93       	push	r21
    39ec:	6f 93       	push	r22
    39ee:	7f 93       	push	r23
    39f0:	8f 93       	push	r24
    39f2:	9f 93       	push	r25
    39f4:	af 93       	push	r26
    39f6:	bf 93       	push	r27
    39f8:	ef 93       	push	r30
    39fa:	ff 93       	push	r31
  timer0_ovrflow_cnt++;
    39fc:	80 91 63 12 	lds	r24, 0x1263
    3a00:	90 91 64 12 	lds	r25, 0x1264
    3a04:	a0 91 65 12 	lds	r26, 0x1265
    3a08:	b0 91 66 12 	lds	r27, 0x1266
    3a0c:	01 96       	adiw	r24, 0x01	; 1
    3a0e:	a1 1d       	adc	r26, r1
    3a10:	b1 1d       	adc	r27, r1
    3a12:	80 93 63 12 	sts	0x1263, r24
    3a16:	90 93 64 12 	sts	0x1264, r25
    3a1a:	a0 93 65 12 	sts	0x1265, r26
    3a1e:	b0 93 66 12 	sts	0x1266, r27
  timer_sleep_cnt++;
    3a22:	80 91 6b 12 	lds	r24, 0x126B
    3a26:	90 91 6c 12 	lds	r25, 0x126C
    3a2a:	a0 91 6d 12 	lds	r26, 0x126D
    3a2e:	b0 91 6e 12 	lds	r27, 0x126E
    3a32:	01 96       	adiw	r24, 0x01	; 1
    3a34:	a1 1d       	adc	r26, r1
    3a36:	b1 1d       	adc	r27, r1
    3a38:	80 93 6b 12 	sts	0x126B, r24
    3a3c:	90 93 6c 12 	sts	0x126C, r25
    3a40:	a0 93 6d 12 	sts	0x126D, r26
    3a44:	b0 93 6e 12 	sts	0x126E, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER0_OVF_interrupt);
    3a48:	80 91 85 0f 	lds	r24, 0x0F85
    3a4c:	90 91 86 0f 	lds	r25, 0x0F86
    3a50:	89 2b       	or	r24, r25
    3a52:	29 f0       	breq	.+10     	; 0x3a5e <__vector_23+0x84>
    3a54:	e0 91 85 0f 	lds	r30, 0x0F85
    3a58:	f0 91 86 0f 	lds	r31, 0x0F86
    3a5c:	09 95       	icall
}
    3a5e:	ff 91       	pop	r31
    3a60:	ef 91       	pop	r30
    3a62:	bf 91       	pop	r27
    3a64:	af 91       	pop	r26
    3a66:	9f 91       	pop	r25
    3a68:	8f 91       	pop	r24
    3a6a:	7f 91       	pop	r23
    3a6c:	6f 91       	pop	r22
    3a6e:	5f 91       	pop	r21
    3a70:	4f 91       	pop	r20
    3a72:	3f 91       	pop	r19
    3a74:	2f 91       	pop	r18
    3a76:	0f 90       	pop	r0
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	0f 90       	pop	r0
    3a7c:	1f 90       	pop	r1
    3a7e:	18 95       	reti

00003a80 <__vector_20>:
ISR(TIMER1_OVF_vect) 
{
    3a80:	1f 92       	push	r1
    3a82:	0f 92       	push	r0
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	0f 92       	push	r0
    3a88:	11 24       	eor	r1, r1
    3a8a:	2f 93       	push	r18
    3a8c:	3f 93       	push	r19
    3a8e:	4f 93       	push	r20
    3a90:	5f 93       	push	r21
    3a92:	6f 93       	push	r22
    3a94:	7f 93       	push	r23
    3a96:	8f 93       	push	r24
    3a98:	9f 93       	push	r25
    3a9a:	af 93       	push	r26
    3a9c:	bf 93       	push	r27
    3a9e:	ef 93       	push	r30
    3aa0:	ff 93       	push	r31
  timer1_ovrflow_cnt++;
    3aa2:	80 91 5f 12 	lds	r24, 0x125F
    3aa6:	90 91 60 12 	lds	r25, 0x1260
    3aaa:	a0 91 61 12 	lds	r26, 0x1261
    3aae:	b0 91 62 12 	lds	r27, 0x1262
    3ab2:	01 96       	adiw	r24, 0x01	; 1
    3ab4:	a1 1d       	adc	r26, r1
    3ab6:	b1 1d       	adc	r27, r1
    3ab8:	80 93 5f 12 	sts	0x125F, r24
    3abc:	90 93 60 12 	sts	0x1260, r25
    3ac0:	a0 93 61 12 	sts	0x1261, r26
    3ac4:	b0 93 62 12 	sts	0x1262, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER1_OVF_interrupt);
    3ac8:	80 91 8f 0f 	lds	r24, 0x0F8F
    3acc:	90 91 90 0f 	lds	r25, 0x0F90
    3ad0:	89 2b       	or	r24, r25
    3ad2:	29 f0       	breq	.+10     	; 0x3ade <__vector_20+0x5e>
    3ad4:	e0 91 8f 0f 	lds	r30, 0x0F8F
    3ad8:	f0 91 90 0f 	lds	r31, 0x0F90
    3adc:	09 95       	icall
}
    3ade:	ff 91       	pop	r31
    3ae0:	ef 91       	pop	r30
    3ae2:	bf 91       	pop	r27
    3ae4:	af 91       	pop	r26
    3ae6:	9f 91       	pop	r25
    3ae8:	8f 91       	pop	r24
    3aea:	7f 91       	pop	r23
    3aec:	6f 91       	pop	r22
    3aee:	5f 91       	pop	r21
    3af0:	4f 91       	pop	r20
    3af2:	3f 91       	pop	r19
    3af4:	2f 91       	pop	r18
    3af6:	0f 90       	pop	r0
    3af8:	0f be       	out	0x3f, r0	; 63
    3afa:	0f 90       	pop	r0
    3afc:	1f 90       	pop	r1
    3afe:	18 95       	reti

00003b00 <__vector_15>:
ISR(TIMER2_OVF_vect) 
{
    3b00:	1f 92       	push	r1
    3b02:	0f 92       	push	r0
    3b04:	0f b6       	in	r0, 0x3f	; 63
    3b06:	0f 92       	push	r0
    3b08:	11 24       	eor	r1, r1
    3b0a:	2f 93       	push	r18
    3b0c:	3f 93       	push	r19
    3b0e:	4f 93       	push	r20
    3b10:	5f 93       	push	r21
    3b12:	6f 93       	push	r22
    3b14:	7f 93       	push	r23
    3b16:	8f 93       	push	r24
    3b18:	9f 93       	push	r25
    3b1a:	af 93       	push	r26
    3b1c:	bf 93       	push	r27
    3b1e:	ef 93       	push	r30
    3b20:	ff 93       	push	r31
  timer2_ovrflow_cnt++;
    3b22:	80 91 67 12 	lds	r24, 0x1267
    3b26:	90 91 68 12 	lds	r25, 0x1268
    3b2a:	a0 91 69 12 	lds	r26, 0x1269
    3b2e:	b0 91 6a 12 	lds	r27, 0x126A
    3b32:	01 96       	adiw	r24, 0x01	; 1
    3b34:	a1 1d       	adc	r26, r1
    3b36:	b1 1d       	adc	r27, r1
    3b38:	80 93 67 12 	sts	0x1267, r24
    3b3c:	90 93 68 12 	sts	0x1268, r25
    3b40:	a0 93 69 12 	sts	0x1269, r26
    3b44:	b0 93 6a 12 	sts	0x126A, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER2_OVF_interrupt);
    3b48:	80 91 95 0f 	lds	r24, 0x0F95
    3b4c:	90 91 96 0f 	lds	r25, 0x0F96
    3b50:	89 2b       	or	r24, r25
    3b52:	29 f0       	breq	.+10     	; 0x3b5e <__vector_15+0x5e>
    3b54:	e0 91 95 0f 	lds	r30, 0x0F95
    3b58:	f0 91 96 0f 	lds	r31, 0x0F96
    3b5c:	09 95       	icall
}
    3b5e:	ff 91       	pop	r31
    3b60:	ef 91       	pop	r30
    3b62:	bf 91       	pop	r27
    3b64:	af 91       	pop	r26
    3b66:	9f 91       	pop	r25
    3b68:	8f 91       	pop	r24
    3b6a:	7f 91       	pop	r23
    3b6c:	6f 91       	pop	r22
    3b6e:	5f 91       	pop	r21
    3b70:	4f 91       	pop	r20
    3b72:	3f 91       	pop	r19
    3b74:	2f 91       	pop	r18
    3b76:	0f 90       	pop	r0
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	0f 90       	pop	r0
    3b7c:	1f 90       	pop	r1
    3b7e:	18 95       	reti

00003b80 <__vector_35>:
ISR(TIMER3_OVF_vect) 
{
    3b80:	1f 92       	push	r1
    3b82:	0f 92       	push	r0
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	0f 92       	push	r0
    3b88:	11 24       	eor	r1, r1
    3b8a:	2f 93       	push	r18
    3b8c:	3f 93       	push	r19
    3b8e:	4f 93       	push	r20
    3b90:	5f 93       	push	r21
    3b92:	6f 93       	push	r22
    3b94:	7f 93       	push	r23
    3b96:	8f 93       	push	r24
    3b98:	9f 93       	push	r25
    3b9a:	af 93       	push	r26
    3b9c:	bf 93       	push	r27
    3b9e:	ef 93       	push	r30
    3ba0:	ff 93       	push	r31
  timer3_ovrflow_cnt++;
    3ba2:	80 91 6f 12 	lds	r24, 0x126F
    3ba6:	90 91 70 12 	lds	r25, 0x1270
    3baa:	a0 91 71 12 	lds	r26, 0x1271
    3bae:	b0 91 72 12 	lds	r27, 0x1272
    3bb2:	01 96       	adiw	r24, 0x01	; 1
    3bb4:	a1 1d       	adc	r26, r1
    3bb6:	b1 1d       	adc	r27, r1
    3bb8:	80 93 6f 12 	sts	0x126F, r24
    3bbc:	90 93 70 12 	sts	0x1270, r25
    3bc0:	a0 93 71 12 	sts	0x1271, r26
    3bc4:	b0 93 72 12 	sts	0x1272, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER3_OVF_interrupt);
    3bc8:	80 91 9f 0f 	lds	r24, 0x0F9F
    3bcc:	90 91 a0 0f 	lds	r25, 0x0FA0
    3bd0:	89 2b       	or	r24, r25
    3bd2:	29 f0       	breq	.+10     	; 0x3bde <__vector_35+0x5e>
    3bd4:	e0 91 9f 0f 	lds	r30, 0x0F9F
    3bd8:	f0 91 a0 0f 	lds	r31, 0x0FA0
    3bdc:	09 95       	icall
}
    3bde:	ff 91       	pop	r31
    3be0:	ef 91       	pop	r30
    3be2:	bf 91       	pop	r27
    3be4:	af 91       	pop	r26
    3be6:	9f 91       	pop	r25
    3be8:	8f 91       	pop	r24
    3bea:	7f 91       	pop	r23
    3bec:	6f 91       	pop	r22
    3bee:	5f 91       	pop	r21
    3bf0:	4f 91       	pop	r20
    3bf2:	3f 91       	pop	r19
    3bf4:	2f 91       	pop	r18
    3bf6:	0f 90       	pop	r0
    3bf8:	0f be       	out	0x3f, r0	; 63
    3bfa:	0f 90       	pop	r0
    3bfc:	1f 90       	pop	r1
    3bfe:	18 95       	reti

00003c00 <__vector_45>:
ISR(TIMER4_OVF_vect) 
{
    3c00:	1f 92       	push	r1
    3c02:	0f 92       	push	r0
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	0f 92       	push	r0
    3c08:	11 24       	eor	r1, r1
    3c0a:	2f 93       	push	r18
    3c0c:	3f 93       	push	r19
    3c0e:	4f 93       	push	r20
    3c10:	5f 93       	push	r21
    3c12:	6f 93       	push	r22
    3c14:	7f 93       	push	r23
    3c16:	8f 93       	push	r24
    3c18:	9f 93       	push	r25
    3c1a:	af 93       	push	r26
    3c1c:	bf 93       	push	r27
    3c1e:	ef 93       	push	r30
    3c20:	ff 93       	push	r31
  timer4_ovrflow_cnt++;
    3c22:	80 91 5b 12 	lds	r24, 0x125B
    3c26:	90 91 5c 12 	lds	r25, 0x125C
    3c2a:	a0 91 5d 12 	lds	r26, 0x125D
    3c2e:	b0 91 5e 12 	lds	r27, 0x125E
    3c32:	01 96       	adiw	r24, 0x01	; 1
    3c34:	a1 1d       	adc	r26, r1
    3c36:	b1 1d       	adc	r27, r1
    3c38:	80 93 5b 12 	sts	0x125B, r24
    3c3c:	90 93 5c 12 	sts	0x125C, r25
    3c40:	a0 93 5d 12 	sts	0x125D, r26
    3c44:	b0 93 5e 12 	sts	0x125E, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER4_OVF_interrupt);
    3c48:	80 91 a9 0f 	lds	r24, 0x0FA9
    3c4c:	90 91 aa 0f 	lds	r25, 0x0FAA
    3c50:	89 2b       	or	r24, r25
    3c52:	29 f0       	breq	.+10     	; 0x3c5e <__vector_45+0x5e>
    3c54:	e0 91 a9 0f 	lds	r30, 0x0FA9
    3c58:	f0 91 aa 0f 	lds	r31, 0x0FAA
    3c5c:	09 95       	icall
}
    3c5e:	ff 91       	pop	r31
    3c60:	ef 91       	pop	r30
    3c62:	bf 91       	pop	r27
    3c64:	af 91       	pop	r26
    3c66:	9f 91       	pop	r25
    3c68:	8f 91       	pop	r24
    3c6a:	7f 91       	pop	r23
    3c6c:	6f 91       	pop	r22
    3c6e:	5f 91       	pop	r21
    3c70:	4f 91       	pop	r20
    3c72:	3f 91       	pop	r19
    3c74:	2f 91       	pop	r18
    3c76:	0f 90       	pop	r0
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	0f 90       	pop	r0
    3c7c:	1f 90       	pop	r1
    3c7e:	18 95       	reti

00003c80 <__vector_50>:
ISR(TIMER5_OVF_vect) 
{
    3c80:	1f 92       	push	r1
    3c82:	0f 92       	push	r0
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	0f 92       	push	r0
    3c88:	11 24       	eor	r1, r1
    3c8a:	2f 93       	push	r18
    3c8c:	3f 93       	push	r19
    3c8e:	4f 93       	push	r20
    3c90:	5f 93       	push	r21
    3c92:	6f 93       	push	r22
    3c94:	7f 93       	push	r23
    3c96:	8f 93       	push	r24
    3c98:	9f 93       	push	r25
    3c9a:	af 93       	push	r26
    3c9c:	bf 93       	push	r27
    3c9e:	ef 93       	push	r30
    3ca0:	ff 93       	push	r31
  timer5_ovrflow_cnt++;
    3ca2:	80 91 73 12 	lds	r24, 0x1273
    3ca6:	90 91 74 12 	lds	r25, 0x1274
    3caa:	a0 91 75 12 	lds	r26, 0x1275
    3cae:	b0 91 76 12 	lds	r27, 0x1276
    3cb2:	01 96       	adiw	r24, 0x01	; 1
    3cb4:	a1 1d       	adc	r26, r1
    3cb6:	b1 1d       	adc	r27, r1
    3cb8:	80 93 73 12 	sts	0x1273, r24
    3cbc:	90 93 74 12 	sts	0x1274, r25
    3cc0:	a0 93 75 12 	sts	0x1275, r26
    3cc4:	b0 93 76 12 	sts	0x1276, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER5_OVF_interrupt);
    3cc8:	80 91 b3 0f 	lds	r24, 0x0FB3
    3ccc:	90 91 b4 0f 	lds	r25, 0x0FB4
    3cd0:	89 2b       	or	r24, r25
    3cd2:	29 f0       	breq	.+10     	; 0x3cde <__vector_50+0x5e>
    3cd4:	e0 91 b3 0f 	lds	r30, 0x0FB3
    3cd8:	f0 91 b4 0f 	lds	r31, 0x0FB4
    3cdc:	09 95       	icall
}
    3cde:	ff 91       	pop	r31
    3ce0:	ef 91       	pop	r30
    3ce2:	bf 91       	pop	r27
    3ce4:	af 91       	pop	r26
    3ce6:	9f 91       	pop	r25
    3ce8:	8f 91       	pop	r24
    3cea:	7f 91       	pop	r23
    3cec:	6f 91       	pop	r22
    3cee:	5f 91       	pop	r21
    3cf0:	4f 91       	pop	r20
    3cf2:	3f 91       	pop	r19
    3cf4:	2f 91       	pop	r18
    3cf6:	0f 90       	pop	r0
    3cf8:	0f be       	out	0x3f, r0	; 63
    3cfa:	0f 90       	pop	r0
    3cfc:	1f 90       	pop	r1
    3cfe:	18 95       	reti

00003d00 <__vector_21>:
ISR(TIMER0_COMPA_vect)
{
    3d00:	1f 92       	push	r1
    3d02:	0f 92       	push	r0
    3d04:	0f b6       	in	r0, 0x3f	; 63
    3d06:	0f 92       	push	r0
    3d08:	11 24       	eor	r1, r1
    3d0a:	2f 93       	push	r18
    3d0c:	3f 93       	push	r19
    3d0e:	4f 93       	push	r20
    3d10:	5f 93       	push	r21
    3d12:	6f 93       	push	r22
    3d14:	7f 93       	push	r23
    3d16:	8f 93       	push	r24
    3d18:	9f 93       	push	r25
    3d1a:	af 93       	push	r26
    3d1c:	bf 93       	push	r27
    3d1e:	ef 93       	push	r30
    3d20:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPA_interrupt);
    3d22:	80 91 81 0f 	lds	r24, 0x0F81
    3d26:	90 91 82 0f 	lds	r25, 0x0F82
    3d2a:	89 2b       	or	r24, r25
    3d2c:	29 f0       	breq	.+10     	; 0x3d38 <__vector_21+0x38>
    3d2e:	e0 91 81 0f 	lds	r30, 0x0F81
    3d32:	f0 91 82 0f 	lds	r31, 0x0F82
    3d36:	09 95       	icall
}
    3d38:	ff 91       	pop	r31
    3d3a:	ef 91       	pop	r30
    3d3c:	bf 91       	pop	r27
    3d3e:	af 91       	pop	r26
    3d40:	9f 91       	pop	r25
    3d42:	8f 91       	pop	r24
    3d44:	7f 91       	pop	r23
    3d46:	6f 91       	pop	r22
    3d48:	5f 91       	pop	r21
    3d4a:	4f 91       	pop	r20
    3d4c:	3f 91       	pop	r19
    3d4e:	2f 91       	pop	r18
    3d50:	0f 90       	pop	r0
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	0f 90       	pop	r0
    3d56:	1f 90       	pop	r1
    3d58:	18 95       	reti

00003d5a <__vector_22>:
ISR(TIMER0_COMPB_vect)
{
    3d5a:	1f 92       	push	r1
    3d5c:	0f 92       	push	r0
    3d5e:	0f b6       	in	r0, 0x3f	; 63
    3d60:	0f 92       	push	r0
    3d62:	11 24       	eor	r1, r1
    3d64:	2f 93       	push	r18
    3d66:	3f 93       	push	r19
    3d68:	4f 93       	push	r20
    3d6a:	5f 93       	push	r21
    3d6c:	6f 93       	push	r22
    3d6e:	7f 93       	push	r23
    3d70:	8f 93       	push	r24
    3d72:	9f 93       	push	r25
    3d74:	af 93       	push	r26
    3d76:	bf 93       	push	r27
    3d78:	ef 93       	push	r30
    3d7a:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPB_interrupt);
    3d7c:	80 91 83 0f 	lds	r24, 0x0F83
    3d80:	90 91 84 0f 	lds	r25, 0x0F84
    3d84:	89 2b       	or	r24, r25
    3d86:	29 f0       	breq	.+10     	; 0x3d92 <__vector_22+0x38>
    3d88:	e0 91 83 0f 	lds	r30, 0x0F83
    3d8c:	f0 91 84 0f 	lds	r31, 0x0F84
    3d90:	09 95       	icall
}
    3d92:	ff 91       	pop	r31
    3d94:	ef 91       	pop	r30
    3d96:	bf 91       	pop	r27
    3d98:	af 91       	pop	r26
    3d9a:	9f 91       	pop	r25
    3d9c:	8f 91       	pop	r24
    3d9e:	7f 91       	pop	r23
    3da0:	6f 91       	pop	r22
    3da2:	5f 91       	pop	r21
    3da4:	4f 91       	pop	r20
    3da6:	3f 91       	pop	r19
    3da8:	2f 91       	pop	r18
    3daa:	0f 90       	pop	r0
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	0f 90       	pop	r0
    3db0:	1f 90       	pop	r1
    3db2:	18 95       	reti

00003db4 <__vector_16>:
ISR(TIMER1_CAPT_vect)
{
    3db4:	1f 92       	push	r1
    3db6:	0f 92       	push	r0
    3db8:	0f b6       	in	r0, 0x3f	; 63
    3dba:	0f 92       	push	r0
    3dbc:	11 24       	eor	r1, r1
    3dbe:	2f 93       	push	r18
    3dc0:	3f 93       	push	r19
    3dc2:	4f 93       	push	r20
    3dc4:	5f 93       	push	r21
    3dc6:	6f 93       	push	r22
    3dc8:	7f 93       	push	r23
    3dca:	8f 93       	push	r24
    3dcc:	9f 93       	push	r25
    3dce:	af 93       	push	r26
    3dd0:	bf 93       	push	r27
    3dd2:	ef 93       	push	r30
    3dd4:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_CAPT_interrupt);
    3dd6:	80 91 87 0f 	lds	r24, 0x0F87
    3dda:	90 91 88 0f 	lds	r25, 0x0F88
    3dde:	89 2b       	or	r24, r25
    3de0:	29 f0       	breq	.+10     	; 0x3dec <__vector_16+0x38>
    3de2:	e0 91 87 0f 	lds	r30, 0x0F87
    3de6:	f0 91 88 0f 	lds	r31, 0x0F88
    3dea:	09 95       	icall
}
    3dec:	ff 91       	pop	r31
    3dee:	ef 91       	pop	r30
    3df0:	bf 91       	pop	r27
    3df2:	af 91       	pop	r26
    3df4:	9f 91       	pop	r25
    3df6:	8f 91       	pop	r24
    3df8:	7f 91       	pop	r23
    3dfa:	6f 91       	pop	r22
    3dfc:	5f 91       	pop	r21
    3dfe:	4f 91       	pop	r20
    3e00:	3f 91       	pop	r19
    3e02:	2f 91       	pop	r18
    3e04:	0f 90       	pop	r0
    3e06:	0f be       	out	0x3f, r0	; 63
    3e08:	0f 90       	pop	r0
    3e0a:	1f 90       	pop	r1
    3e0c:	18 95       	reti

00003e0e <__vector_18>:
{
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPA_interrupt);
}
*/
ISR(TIMER1_COMPB_vect)
{
    3e0e:	1f 92       	push	r1
    3e10:	0f 92       	push	r0
    3e12:	0f b6       	in	r0, 0x3f	; 63
    3e14:	0f 92       	push	r0
    3e16:	11 24       	eor	r1, r1
    3e18:	2f 93       	push	r18
    3e1a:	3f 93       	push	r19
    3e1c:	4f 93       	push	r20
    3e1e:	5f 93       	push	r21
    3e20:	6f 93       	push	r22
    3e22:	7f 93       	push	r23
    3e24:	8f 93       	push	r24
    3e26:	9f 93       	push	r25
    3e28:	af 93       	push	r26
    3e2a:	bf 93       	push	r27
    3e2c:	ef 93       	push	r30
    3e2e:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPB_interrupt);
    3e30:	80 91 8b 0f 	lds	r24, 0x0F8B
    3e34:	90 91 8c 0f 	lds	r25, 0x0F8C
    3e38:	89 2b       	or	r24, r25
    3e3a:	29 f0       	breq	.+10     	; 0x3e46 <__vector_18+0x38>
    3e3c:	e0 91 8b 0f 	lds	r30, 0x0F8B
    3e40:	f0 91 8c 0f 	lds	r31, 0x0F8C
    3e44:	09 95       	icall
}
    3e46:	ff 91       	pop	r31
    3e48:	ef 91       	pop	r30
    3e4a:	bf 91       	pop	r27
    3e4c:	af 91       	pop	r26
    3e4e:	9f 91       	pop	r25
    3e50:	8f 91       	pop	r24
    3e52:	7f 91       	pop	r23
    3e54:	6f 91       	pop	r22
    3e56:	5f 91       	pop	r21
    3e58:	4f 91       	pop	r20
    3e5a:	3f 91       	pop	r19
    3e5c:	2f 91       	pop	r18
    3e5e:	0f 90       	pop	r0
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	0f 90       	pop	r0
    3e64:	1f 90       	pop	r1
    3e66:	18 95       	reti

00003e68 <__vector_19>:
ISR(TIMER1_COMPC_vect)
{
    3e68:	1f 92       	push	r1
    3e6a:	0f 92       	push	r0
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	0f 92       	push	r0
    3e70:	11 24       	eor	r1, r1
    3e72:	2f 93       	push	r18
    3e74:	3f 93       	push	r19
    3e76:	4f 93       	push	r20
    3e78:	5f 93       	push	r21
    3e7a:	6f 93       	push	r22
    3e7c:	7f 93       	push	r23
    3e7e:	8f 93       	push	r24
    3e80:	9f 93       	push	r25
    3e82:	af 93       	push	r26
    3e84:	bf 93       	push	r27
    3e86:	ef 93       	push	r30
    3e88:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPC_interrupt);
    3e8a:	80 91 8d 0f 	lds	r24, 0x0F8D
    3e8e:	90 91 8e 0f 	lds	r25, 0x0F8E
    3e92:	89 2b       	or	r24, r25
    3e94:	29 f0       	breq	.+10     	; 0x3ea0 <__vector_19+0x38>
    3e96:	e0 91 8d 0f 	lds	r30, 0x0F8D
    3e9a:	f0 91 8e 0f 	lds	r31, 0x0F8E
    3e9e:	09 95       	icall
}
    3ea0:	ff 91       	pop	r31
    3ea2:	ef 91       	pop	r30
    3ea4:	bf 91       	pop	r27
    3ea6:	af 91       	pop	r26
    3ea8:	9f 91       	pop	r25
    3eaa:	8f 91       	pop	r24
    3eac:	7f 91       	pop	r23
    3eae:	6f 91       	pop	r22
    3eb0:	5f 91       	pop	r21
    3eb2:	4f 91       	pop	r20
    3eb4:	3f 91       	pop	r19
    3eb6:	2f 91       	pop	r18
    3eb8:	0f 90       	pop	r0
    3eba:	0f be       	out	0x3f, r0	; 63
    3ebc:	0f 90       	pop	r0
    3ebe:	1f 90       	pop	r1
    3ec0:	18 95       	reti

00003ec2 <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
    3ec2:	1f 92       	push	r1
    3ec4:	0f 92       	push	r0
    3ec6:	0f b6       	in	r0, 0x3f	; 63
    3ec8:	0f 92       	push	r0
    3eca:	11 24       	eor	r1, r1
    3ecc:	2f 93       	push	r18
    3ece:	3f 93       	push	r19
    3ed0:	4f 93       	push	r20
    3ed2:	5f 93       	push	r21
    3ed4:	6f 93       	push	r22
    3ed6:	7f 93       	push	r23
    3ed8:	8f 93       	push	r24
    3eda:	9f 93       	push	r25
    3edc:	af 93       	push	r26
    3ede:	bf 93       	push	r27
    3ee0:	ef 93       	push	r30
    3ee2:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPA_interrupt);
    3ee4:	80 91 91 0f 	lds	r24, 0x0F91
    3ee8:	90 91 92 0f 	lds	r25, 0x0F92
    3eec:	89 2b       	or	r24, r25
    3eee:	29 f0       	breq	.+10     	; 0x3efa <__vector_13+0x38>
    3ef0:	e0 91 91 0f 	lds	r30, 0x0F91
    3ef4:	f0 91 92 0f 	lds	r31, 0x0F92
    3ef8:	09 95       	icall
}
    3efa:	ff 91       	pop	r31
    3efc:	ef 91       	pop	r30
    3efe:	bf 91       	pop	r27
    3f00:	af 91       	pop	r26
    3f02:	9f 91       	pop	r25
    3f04:	8f 91       	pop	r24
    3f06:	7f 91       	pop	r23
    3f08:	6f 91       	pop	r22
    3f0a:	5f 91       	pop	r21
    3f0c:	4f 91       	pop	r20
    3f0e:	3f 91       	pop	r19
    3f10:	2f 91       	pop	r18
    3f12:	0f 90       	pop	r0
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	0f 90       	pop	r0
    3f18:	1f 90       	pop	r1
    3f1a:	18 95       	reti

00003f1c <__vector_14>:
ISR(TIMER2_COMPB_vect)
{
    3f1c:	1f 92       	push	r1
    3f1e:	0f 92       	push	r0
    3f20:	0f b6       	in	r0, 0x3f	; 63
    3f22:	0f 92       	push	r0
    3f24:	11 24       	eor	r1, r1
    3f26:	2f 93       	push	r18
    3f28:	3f 93       	push	r19
    3f2a:	4f 93       	push	r20
    3f2c:	5f 93       	push	r21
    3f2e:	6f 93       	push	r22
    3f30:	7f 93       	push	r23
    3f32:	8f 93       	push	r24
    3f34:	9f 93       	push	r25
    3f36:	af 93       	push	r26
    3f38:	bf 93       	push	r27
    3f3a:	ef 93       	push	r30
    3f3c:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPB_interrupt);
    3f3e:	80 91 93 0f 	lds	r24, 0x0F93
    3f42:	90 91 94 0f 	lds	r25, 0x0F94
    3f46:	89 2b       	or	r24, r25
    3f48:	29 f0       	breq	.+10     	; 0x3f54 <__vector_14+0x38>
    3f4a:	e0 91 93 0f 	lds	r30, 0x0F93
    3f4e:	f0 91 94 0f 	lds	r31, 0x0F94
    3f52:	09 95       	icall
}
    3f54:	ff 91       	pop	r31
    3f56:	ef 91       	pop	r30
    3f58:	bf 91       	pop	r27
    3f5a:	af 91       	pop	r26
    3f5c:	9f 91       	pop	r25
    3f5e:	8f 91       	pop	r24
    3f60:	7f 91       	pop	r23
    3f62:	6f 91       	pop	r22
    3f64:	5f 91       	pop	r21
    3f66:	4f 91       	pop	r20
    3f68:	3f 91       	pop	r19
    3f6a:	2f 91       	pop	r18
    3f6c:	0f 90       	pop	r0
    3f6e:	0f be       	out	0x3f, r0	; 63
    3f70:	0f 90       	pop	r0
    3f72:	1f 90       	pop	r1
    3f74:	18 95       	reti

00003f76 <__vector_31>:
ISR(TIMER3_CAPT_vect)
{
    3f76:	1f 92       	push	r1
    3f78:	0f 92       	push	r0
    3f7a:	0f b6       	in	r0, 0x3f	; 63
    3f7c:	0f 92       	push	r0
    3f7e:	11 24       	eor	r1, r1
    3f80:	2f 93       	push	r18
    3f82:	3f 93       	push	r19
    3f84:	4f 93       	push	r20
    3f86:	5f 93       	push	r21
    3f88:	6f 93       	push	r22
    3f8a:	7f 93       	push	r23
    3f8c:	8f 93       	push	r24
    3f8e:	9f 93       	push	r25
    3f90:	af 93       	push	r26
    3f92:	bf 93       	push	r27
    3f94:	ef 93       	push	r30
    3f96:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_CAPT_interrupt);
    3f98:	80 91 97 0f 	lds	r24, 0x0F97
    3f9c:	90 91 98 0f 	lds	r25, 0x0F98
    3fa0:	89 2b       	or	r24, r25
    3fa2:	29 f0       	breq	.+10     	; 0x3fae <__vector_31+0x38>
    3fa4:	e0 91 97 0f 	lds	r30, 0x0F97
    3fa8:	f0 91 98 0f 	lds	r31, 0x0F98
    3fac:	09 95       	icall
}
    3fae:	ff 91       	pop	r31
    3fb0:	ef 91       	pop	r30
    3fb2:	bf 91       	pop	r27
    3fb4:	af 91       	pop	r26
    3fb6:	9f 91       	pop	r25
    3fb8:	8f 91       	pop	r24
    3fba:	7f 91       	pop	r23
    3fbc:	6f 91       	pop	r22
    3fbe:	5f 91       	pop	r21
    3fc0:	4f 91       	pop	r20
    3fc2:	3f 91       	pop	r19
    3fc4:	2f 91       	pop	r18
    3fc6:	0f 90       	pop	r0
    3fc8:	0f be       	out	0x3f, r0	; 63
    3fca:	0f 90       	pop	r0
    3fcc:	1f 90       	pop	r1
    3fce:	18 95       	reti

00003fd0 <__vector_32>:
ISR(TIMER3_COMPA_vect)
{
    3fd0:	1f 92       	push	r1
    3fd2:	0f 92       	push	r0
    3fd4:	0f b6       	in	r0, 0x3f	; 63
    3fd6:	0f 92       	push	r0
    3fd8:	11 24       	eor	r1, r1
    3fda:	2f 93       	push	r18
    3fdc:	3f 93       	push	r19
    3fde:	4f 93       	push	r20
    3fe0:	5f 93       	push	r21
    3fe2:	6f 93       	push	r22
    3fe4:	7f 93       	push	r23
    3fe6:	8f 93       	push	r24
    3fe8:	9f 93       	push	r25
    3fea:	af 93       	push	r26
    3fec:	bf 93       	push	r27
    3fee:	ef 93       	push	r30
    3ff0:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPA_interrupt);
    3ff2:	80 91 99 0f 	lds	r24, 0x0F99
    3ff6:	90 91 9a 0f 	lds	r25, 0x0F9A
    3ffa:	89 2b       	or	r24, r25
    3ffc:	29 f0       	breq	.+10     	; 0x4008 <__vector_32+0x38>
    3ffe:	e0 91 99 0f 	lds	r30, 0x0F99
    4002:	f0 91 9a 0f 	lds	r31, 0x0F9A
    4006:	09 95       	icall
}
    4008:	ff 91       	pop	r31
    400a:	ef 91       	pop	r30
    400c:	bf 91       	pop	r27
    400e:	af 91       	pop	r26
    4010:	9f 91       	pop	r25
    4012:	8f 91       	pop	r24
    4014:	7f 91       	pop	r23
    4016:	6f 91       	pop	r22
    4018:	5f 91       	pop	r21
    401a:	4f 91       	pop	r20
    401c:	3f 91       	pop	r19
    401e:	2f 91       	pop	r18
    4020:	0f 90       	pop	r0
    4022:	0f be       	out	0x3f, r0	; 63
    4024:	0f 90       	pop	r0
    4026:	1f 90       	pop	r1
    4028:	18 95       	reti

0000402a <__vector_33>:
ISR(TIMER3_COMPB_vect)
{
    402a:	1f 92       	push	r1
    402c:	0f 92       	push	r0
    402e:	0f b6       	in	r0, 0x3f	; 63
    4030:	0f 92       	push	r0
    4032:	11 24       	eor	r1, r1
    4034:	2f 93       	push	r18
    4036:	3f 93       	push	r19
    4038:	4f 93       	push	r20
    403a:	5f 93       	push	r21
    403c:	6f 93       	push	r22
    403e:	7f 93       	push	r23
    4040:	8f 93       	push	r24
    4042:	9f 93       	push	r25
    4044:	af 93       	push	r26
    4046:	bf 93       	push	r27
    4048:	ef 93       	push	r30
    404a:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPB_interrupt);
    404c:	80 91 9b 0f 	lds	r24, 0x0F9B
    4050:	90 91 9c 0f 	lds	r25, 0x0F9C
    4054:	89 2b       	or	r24, r25
    4056:	29 f0       	breq	.+10     	; 0x4062 <__vector_33+0x38>
    4058:	e0 91 9b 0f 	lds	r30, 0x0F9B
    405c:	f0 91 9c 0f 	lds	r31, 0x0F9C
    4060:	09 95       	icall
}
    4062:	ff 91       	pop	r31
    4064:	ef 91       	pop	r30
    4066:	bf 91       	pop	r27
    4068:	af 91       	pop	r26
    406a:	9f 91       	pop	r25
    406c:	8f 91       	pop	r24
    406e:	7f 91       	pop	r23
    4070:	6f 91       	pop	r22
    4072:	5f 91       	pop	r21
    4074:	4f 91       	pop	r20
    4076:	3f 91       	pop	r19
    4078:	2f 91       	pop	r18
    407a:	0f 90       	pop	r0
    407c:	0f be       	out	0x3f, r0	; 63
    407e:	0f 90       	pop	r0
    4080:	1f 90       	pop	r1
    4082:	18 95       	reti

00004084 <__vector_34>:
ISR(TIMER3_COMPC_vect)
{
    4084:	1f 92       	push	r1
    4086:	0f 92       	push	r0
    4088:	0f b6       	in	r0, 0x3f	; 63
    408a:	0f 92       	push	r0
    408c:	11 24       	eor	r1, r1
    408e:	2f 93       	push	r18
    4090:	3f 93       	push	r19
    4092:	4f 93       	push	r20
    4094:	5f 93       	push	r21
    4096:	6f 93       	push	r22
    4098:	7f 93       	push	r23
    409a:	8f 93       	push	r24
    409c:	9f 93       	push	r25
    409e:	af 93       	push	r26
    40a0:	bf 93       	push	r27
    40a2:	ef 93       	push	r30
    40a4:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPC_interrupt);
    40a6:	80 91 9d 0f 	lds	r24, 0x0F9D
    40aa:	90 91 9e 0f 	lds	r25, 0x0F9E
    40ae:	89 2b       	or	r24, r25
    40b0:	29 f0       	breq	.+10     	; 0x40bc <__vector_34+0x38>
    40b2:	e0 91 9d 0f 	lds	r30, 0x0F9D
    40b6:	f0 91 9e 0f 	lds	r31, 0x0F9E
    40ba:	09 95       	icall
}
    40bc:	ff 91       	pop	r31
    40be:	ef 91       	pop	r30
    40c0:	bf 91       	pop	r27
    40c2:	af 91       	pop	r26
    40c4:	9f 91       	pop	r25
    40c6:	8f 91       	pop	r24
    40c8:	7f 91       	pop	r23
    40ca:	6f 91       	pop	r22
    40cc:	5f 91       	pop	r21
    40ce:	4f 91       	pop	r20
    40d0:	3f 91       	pop	r19
    40d2:	2f 91       	pop	r18
    40d4:	0f 90       	pop	r0
    40d6:	0f be       	out	0x3f, r0	; 63
    40d8:	0f 90       	pop	r0
    40da:	1f 90       	pop	r1
    40dc:	18 95       	reti

000040de <__vector_41>:
ISR(TIMER4_CAPT_vect)
{
    40de:	1f 92       	push	r1
    40e0:	0f 92       	push	r0
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	0f 92       	push	r0
    40e6:	11 24       	eor	r1, r1
    40e8:	2f 93       	push	r18
    40ea:	3f 93       	push	r19
    40ec:	4f 93       	push	r20
    40ee:	5f 93       	push	r21
    40f0:	6f 93       	push	r22
    40f2:	7f 93       	push	r23
    40f4:	8f 93       	push	r24
    40f6:	9f 93       	push	r25
    40f8:	af 93       	push	r26
    40fa:	bf 93       	push	r27
    40fc:	ef 93       	push	r30
    40fe:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_CAPT_interrupt);
    4100:	80 91 a1 0f 	lds	r24, 0x0FA1
    4104:	90 91 a2 0f 	lds	r25, 0x0FA2
    4108:	89 2b       	or	r24, r25
    410a:	29 f0       	breq	.+10     	; 0x4116 <__vector_41+0x38>
    410c:	e0 91 a1 0f 	lds	r30, 0x0FA1
    4110:	f0 91 a2 0f 	lds	r31, 0x0FA2
    4114:	09 95       	icall
}
    4116:	ff 91       	pop	r31
    4118:	ef 91       	pop	r30
    411a:	bf 91       	pop	r27
    411c:	af 91       	pop	r26
    411e:	9f 91       	pop	r25
    4120:	8f 91       	pop	r24
    4122:	7f 91       	pop	r23
    4124:	6f 91       	pop	r22
    4126:	5f 91       	pop	r21
    4128:	4f 91       	pop	r20
    412a:	3f 91       	pop	r19
    412c:	2f 91       	pop	r18
    412e:	0f 90       	pop	r0
    4130:	0f be       	out	0x3f, r0	; 63
    4132:	0f 90       	pop	r0
    4134:	1f 90       	pop	r1
    4136:	18 95       	reti

00004138 <__vector_42>:
ISR(TIMER4_COMPA_vect)
{
    4138:	1f 92       	push	r1
    413a:	0f 92       	push	r0
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	0f 92       	push	r0
    4140:	11 24       	eor	r1, r1
    4142:	2f 93       	push	r18
    4144:	3f 93       	push	r19
    4146:	4f 93       	push	r20
    4148:	5f 93       	push	r21
    414a:	6f 93       	push	r22
    414c:	7f 93       	push	r23
    414e:	8f 93       	push	r24
    4150:	9f 93       	push	r25
    4152:	af 93       	push	r26
    4154:	bf 93       	push	r27
    4156:	ef 93       	push	r30
    4158:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPA_interrupt);
    415a:	80 91 a3 0f 	lds	r24, 0x0FA3
    415e:	90 91 a4 0f 	lds	r25, 0x0FA4
    4162:	89 2b       	or	r24, r25
    4164:	29 f0       	breq	.+10     	; 0x4170 <__vector_42+0x38>
    4166:	e0 91 a3 0f 	lds	r30, 0x0FA3
    416a:	f0 91 a4 0f 	lds	r31, 0x0FA4
    416e:	09 95       	icall
}
    4170:	ff 91       	pop	r31
    4172:	ef 91       	pop	r30
    4174:	bf 91       	pop	r27
    4176:	af 91       	pop	r26
    4178:	9f 91       	pop	r25
    417a:	8f 91       	pop	r24
    417c:	7f 91       	pop	r23
    417e:	6f 91       	pop	r22
    4180:	5f 91       	pop	r21
    4182:	4f 91       	pop	r20
    4184:	3f 91       	pop	r19
    4186:	2f 91       	pop	r18
    4188:	0f 90       	pop	r0
    418a:	0f be       	out	0x3f, r0	; 63
    418c:	0f 90       	pop	r0
    418e:	1f 90       	pop	r1
    4190:	18 95       	reti

00004192 <__vector_43>:
ISR(TIMER4_COMPB_vect)
{
    4192:	1f 92       	push	r1
    4194:	0f 92       	push	r0
    4196:	0f b6       	in	r0, 0x3f	; 63
    4198:	0f 92       	push	r0
    419a:	11 24       	eor	r1, r1
    419c:	2f 93       	push	r18
    419e:	3f 93       	push	r19
    41a0:	4f 93       	push	r20
    41a2:	5f 93       	push	r21
    41a4:	6f 93       	push	r22
    41a6:	7f 93       	push	r23
    41a8:	8f 93       	push	r24
    41aa:	9f 93       	push	r25
    41ac:	af 93       	push	r26
    41ae:	bf 93       	push	r27
    41b0:	ef 93       	push	r30
    41b2:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPB_interrupt);
    41b4:	80 91 a5 0f 	lds	r24, 0x0FA5
    41b8:	90 91 a6 0f 	lds	r25, 0x0FA6
    41bc:	89 2b       	or	r24, r25
    41be:	29 f0       	breq	.+10     	; 0x41ca <__vector_43+0x38>
    41c0:	e0 91 a5 0f 	lds	r30, 0x0FA5
    41c4:	f0 91 a6 0f 	lds	r31, 0x0FA6
    41c8:	09 95       	icall
}
    41ca:	ff 91       	pop	r31
    41cc:	ef 91       	pop	r30
    41ce:	bf 91       	pop	r27
    41d0:	af 91       	pop	r26
    41d2:	9f 91       	pop	r25
    41d4:	8f 91       	pop	r24
    41d6:	7f 91       	pop	r23
    41d8:	6f 91       	pop	r22
    41da:	5f 91       	pop	r21
    41dc:	4f 91       	pop	r20
    41de:	3f 91       	pop	r19
    41e0:	2f 91       	pop	r18
    41e2:	0f 90       	pop	r0
    41e4:	0f be       	out	0x3f, r0	; 63
    41e6:	0f 90       	pop	r0
    41e8:	1f 90       	pop	r1
    41ea:	18 95       	reti

000041ec <__vector_44>:
ISR(TIMER4_COMPC_vect)
{
    41ec:	1f 92       	push	r1
    41ee:	0f 92       	push	r0
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	0f 92       	push	r0
    41f4:	11 24       	eor	r1, r1
    41f6:	2f 93       	push	r18
    41f8:	3f 93       	push	r19
    41fa:	4f 93       	push	r20
    41fc:	5f 93       	push	r21
    41fe:	6f 93       	push	r22
    4200:	7f 93       	push	r23
    4202:	8f 93       	push	r24
    4204:	9f 93       	push	r25
    4206:	af 93       	push	r26
    4208:	bf 93       	push	r27
    420a:	ef 93       	push	r30
    420c:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPC_interrupt);
    420e:	80 91 a7 0f 	lds	r24, 0x0FA7
    4212:	90 91 a8 0f 	lds	r25, 0x0FA8
    4216:	89 2b       	or	r24, r25
    4218:	29 f0       	breq	.+10     	; 0x4224 <__vector_44+0x38>
    421a:	e0 91 a7 0f 	lds	r30, 0x0FA7
    421e:	f0 91 a8 0f 	lds	r31, 0x0FA8
    4222:	09 95       	icall
}
    4224:	ff 91       	pop	r31
    4226:	ef 91       	pop	r30
    4228:	bf 91       	pop	r27
    422a:	af 91       	pop	r26
    422c:	9f 91       	pop	r25
    422e:	8f 91       	pop	r24
    4230:	7f 91       	pop	r23
    4232:	6f 91       	pop	r22
    4234:	5f 91       	pop	r21
    4236:	4f 91       	pop	r20
    4238:	3f 91       	pop	r19
    423a:	2f 91       	pop	r18
    423c:	0f 90       	pop	r0
    423e:	0f be       	out	0x3f, r0	; 63
    4240:	0f 90       	pop	r0
    4242:	1f 90       	pop	r1
    4244:	18 95       	reti

00004246 <__vector_46>:
ISR(TIMER5_CAPT_vect)
{
    4246:	1f 92       	push	r1
    4248:	0f 92       	push	r0
    424a:	0f b6       	in	r0, 0x3f	; 63
    424c:	0f 92       	push	r0
    424e:	11 24       	eor	r1, r1
    4250:	2f 93       	push	r18
    4252:	3f 93       	push	r19
    4254:	4f 93       	push	r20
    4256:	5f 93       	push	r21
    4258:	6f 93       	push	r22
    425a:	7f 93       	push	r23
    425c:	8f 93       	push	r24
    425e:	9f 93       	push	r25
    4260:	af 93       	push	r26
    4262:	bf 93       	push	r27
    4264:	ef 93       	push	r30
    4266:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_CAPT_interrupt);
    4268:	80 91 ab 0f 	lds	r24, 0x0FAB
    426c:	90 91 ac 0f 	lds	r25, 0x0FAC
    4270:	89 2b       	or	r24, r25
    4272:	29 f0       	breq	.+10     	; 0x427e <__vector_46+0x38>
    4274:	e0 91 ab 0f 	lds	r30, 0x0FAB
    4278:	f0 91 ac 0f 	lds	r31, 0x0FAC
    427c:	09 95       	icall
}
    427e:	ff 91       	pop	r31
    4280:	ef 91       	pop	r30
    4282:	bf 91       	pop	r27
    4284:	af 91       	pop	r26
    4286:	9f 91       	pop	r25
    4288:	8f 91       	pop	r24
    428a:	7f 91       	pop	r23
    428c:	6f 91       	pop	r22
    428e:	5f 91       	pop	r21
    4290:	4f 91       	pop	r20
    4292:	3f 91       	pop	r19
    4294:	2f 91       	pop	r18
    4296:	0f 90       	pop	r0
    4298:	0f be       	out	0x3f, r0	; 63
    429a:	0f 90       	pop	r0
    429c:	1f 90       	pop	r1
    429e:	18 95       	reti

000042a0 <__vector_47>:
ISR(TIMER5_COMPA_vect)
{
    42a0:	1f 92       	push	r1
    42a2:	0f 92       	push	r0
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	0f 92       	push	r0
    42a8:	11 24       	eor	r1, r1
    42aa:	2f 93       	push	r18
    42ac:	3f 93       	push	r19
    42ae:	4f 93       	push	r20
    42b0:	5f 93       	push	r21
    42b2:	6f 93       	push	r22
    42b4:	7f 93       	push	r23
    42b6:	8f 93       	push	r24
    42b8:	9f 93       	push	r25
    42ba:	af 93       	push	r26
    42bc:	bf 93       	push	r27
    42be:	ef 93       	push	r30
    42c0:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPA_interrupt);
    42c2:	80 91 ad 0f 	lds	r24, 0x0FAD
    42c6:	90 91 ae 0f 	lds	r25, 0x0FAE
    42ca:	89 2b       	or	r24, r25
    42cc:	29 f0       	breq	.+10     	; 0x42d8 <__vector_47+0x38>
    42ce:	e0 91 ad 0f 	lds	r30, 0x0FAD
    42d2:	f0 91 ae 0f 	lds	r31, 0x0FAE
    42d6:	09 95       	icall
}
    42d8:	ff 91       	pop	r31
    42da:	ef 91       	pop	r30
    42dc:	bf 91       	pop	r27
    42de:	af 91       	pop	r26
    42e0:	9f 91       	pop	r25
    42e2:	8f 91       	pop	r24
    42e4:	7f 91       	pop	r23
    42e6:	6f 91       	pop	r22
    42e8:	5f 91       	pop	r21
    42ea:	4f 91       	pop	r20
    42ec:	3f 91       	pop	r19
    42ee:	2f 91       	pop	r18
    42f0:	0f 90       	pop	r0
    42f2:	0f be       	out	0x3f, r0	; 63
    42f4:	0f 90       	pop	r0
    42f6:	1f 90       	pop	r1
    42f8:	18 95       	reti

000042fa <__vector_48>:
ISR(TIMER5_COMPB_vect)
{
    42fa:	1f 92       	push	r1
    42fc:	0f 92       	push	r0
    42fe:	0f b6       	in	r0, 0x3f	; 63
    4300:	0f 92       	push	r0
    4302:	11 24       	eor	r1, r1
    4304:	2f 93       	push	r18
    4306:	3f 93       	push	r19
    4308:	4f 93       	push	r20
    430a:	5f 93       	push	r21
    430c:	6f 93       	push	r22
    430e:	7f 93       	push	r23
    4310:	8f 93       	push	r24
    4312:	9f 93       	push	r25
    4314:	af 93       	push	r26
    4316:	bf 93       	push	r27
    4318:	ef 93       	push	r30
    431a:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPB_interrupt);
    431c:	80 91 af 0f 	lds	r24, 0x0FAF
    4320:	90 91 b0 0f 	lds	r25, 0x0FB0
    4324:	89 2b       	or	r24, r25
    4326:	29 f0       	breq	.+10     	; 0x4332 <__vector_48+0x38>
    4328:	e0 91 af 0f 	lds	r30, 0x0FAF
    432c:	f0 91 b0 0f 	lds	r31, 0x0FB0
    4330:	09 95       	icall
}
    4332:	ff 91       	pop	r31
    4334:	ef 91       	pop	r30
    4336:	bf 91       	pop	r27
    4338:	af 91       	pop	r26
    433a:	9f 91       	pop	r25
    433c:	8f 91       	pop	r24
    433e:	7f 91       	pop	r23
    4340:	6f 91       	pop	r22
    4342:	5f 91       	pop	r21
    4344:	4f 91       	pop	r20
    4346:	3f 91       	pop	r19
    4348:	2f 91       	pop	r18
    434a:	0f 90       	pop	r0
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	0f 90       	pop	r0
    4350:	1f 90       	pop	r1
    4352:	18 95       	reti

00004354 <__vector_49>:
ISR(TIMER5_COMPC_vect)
{
    4354:	1f 92       	push	r1
    4356:	0f 92       	push	r0
    4358:	0f b6       	in	r0, 0x3f	; 63
    435a:	0f 92       	push	r0
    435c:	11 24       	eor	r1, r1
    435e:	2f 93       	push	r18
    4360:	3f 93       	push	r19
    4362:	4f 93       	push	r20
    4364:	5f 93       	push	r21
    4366:	6f 93       	push	r22
    4368:	7f 93       	push	r23
    436a:	8f 93       	push	r24
    436c:	9f 93       	push	r25
    436e:	af 93       	push	r26
    4370:	bf 93       	push	r27
    4372:	ef 93       	push	r30
    4374:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPC_interrupt);
    4376:	80 91 b1 0f 	lds	r24, 0x0FB1
    437a:	90 91 b2 0f 	lds	r25, 0x0FB2
    437e:	89 2b       	or	r24, r25
    4380:	29 f0       	breq	.+10     	; 0x438c <__vector_49+0x38>
    4382:	e0 91 b1 0f 	lds	r30, 0x0FB1
    4386:	f0 91 b2 0f 	lds	r31, 0x0FB2
    438a:	09 95       	icall
}
    438c:	ff 91       	pop	r31
    438e:	ef 91       	pop	r30
    4390:	bf 91       	pop	r27
    4392:	af 91       	pop	r26
    4394:	9f 91       	pop	r25
    4396:	8f 91       	pop	r24
    4398:	7f 91       	pop	r23
    439a:	6f 91       	pop	r22
    439c:	5f 91       	pop	r21
    439e:	4f 91       	pop	r20
    43a0:	3f 91       	pop	r19
    43a2:	2f 91       	pop	r18
    43a4:	0f 90       	pop	r0
    43a6:	0f be       	out	0x3f, r0	; 63
    43a8:	0f 90       	pop	r0
    43aa:	1f 90       	pop	r1
    43ac:	18 95       	reti

000043ae <__vector_default>:

ISR(BADISR_vect)
{
    43ae:	1f 92       	push	r1
    43b0:	0f 92       	push	r0
    43b2:	0f b6       	in	r0, 0x3f	; 63
    43b4:	0f 92       	push	r0
    43b6:	11 24       	eor	r1, r1
    43b8:	2f 93       	push	r18
    43ba:	3f 93       	push	r19
    43bc:	4f 93       	push	r20
    43be:	5f 93       	push	r21
    43c0:	6f 93       	push	r22
    43c2:	7f 93       	push	r23
    43c4:	8f 93       	push	r24
    43c6:	9f 93       	push	r25
    43c8:	af 93       	push	r26
    43ca:	bf 93       	push	r27
    43cc:	ef 93       	push	r30
    43ce:	ff 93       	push	r31
  rprintf("BAD_vect called!");
    43d0:	00 d0       	rcall	.+0      	; 0x43d2 <__vector_default+0x24>
    43d2:	0f 92       	push	r0
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	ed b7       	in	r30, 0x3d	; 61
    43d8:	fe b7       	in	r31, 0x3e	; 62
    43da:	81 83       	std	Z+1, r24	; 0x01
    43dc:	8a ec       	ldi	r24, 0xCA	; 202
    43de:	91 e0       	ldi	r25, 0x01	; 1
    43e0:	93 83       	std	Z+3, r25	; 0x03
    43e2:	82 83       	std	Z+2, r24	; 0x02
    43e4:	0e 94 a1 29 	call	0x5342	; 0x5342 <rprintf1RamRom>
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	0f 90       	pop	r0
}
    43ee:	ff 91       	pop	r31
    43f0:	ef 91       	pop	r30
    43f2:	bf 91       	pop	r27
    43f4:	af 91       	pop	r26
    43f6:	9f 91       	pop	r25
    43f8:	8f 91       	pop	r24
    43fa:	7f 91       	pop	r23
    43fc:	6f 91       	pop	r22
    43fe:	5f 91       	pop	r21
    4400:	4f 91       	pop	r20
    4402:	3f 91       	pop	r19
    4404:	2f 91       	pop	r18
    4406:	0f 90       	pop	r0
    4408:	0f be       	out	0x3f, r0	; 63
    440a:	0f 90       	pop	r0
    440c:	1f 90       	pop	r1
    440e:	18 95       	reti

00004410 <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
    4410:	84 30       	cpi	r24, 0x04	; 4
    4412:	40 f4       	brcc	.+16     	; 0x4424 <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
    4414:	e8 2f       	mov	r30, r24
    4416:	f0 e0       	ldi	r31, 0x00	; 0
    4418:	ee 0f       	add	r30, r30
    441a:	ff 1f       	adc	r31, r31
    441c:	eb 50       	subi	r30, 0x0B	; 11
    441e:	fe 4e       	sbci	r31, 0xEE	; 238
    4420:	71 83       	std	Z+1, r23	; 0x01
    4422:	60 83       	st	Z, r22
    4424:	08 95       	ret

00004426 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
    4426:	1f 93       	push	r17
    4428:	18 2f       	mov	r17, r24
    442a:	9a 01       	movw	r18, r20
    442c:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    442e:	ca 01       	movw	r24, r20
    4430:	b9 01       	movw	r22, r18
    4432:	60 58       	subi	r22, 0x80	; 128
    4434:	7b 47       	sbci	r23, 0x7B	; 123
    4436:	81 4e       	sbci	r24, 0xE1	; 225
    4438:	9f 4f       	sbci	r25, 0xFF	; 255
    443a:	f3 e0       	ldi	r31, 0x03	; 3
    443c:	66 0f       	add	r22, r22
    443e:	77 1f       	adc	r23, r23
    4440:	88 1f       	adc	r24, r24
    4442:	99 1f       	adc	r25, r25
    4444:	fa 95       	dec	r31
    4446:	d1 f7       	brne	.-12     	; 0x443c <uartSetBaudRate+0x16>
    4448:	e4 e0       	ldi	r30, 0x04	; 4
    444a:	22 0f       	add	r18, r18
    444c:	33 1f       	adc	r19, r19
    444e:	44 1f       	adc	r20, r20
    4450:	55 1f       	adc	r21, r21
    4452:	ea 95       	dec	r30
    4454:	d1 f7       	brne	.-12     	; 0x444a <uartSetBaudRate+0x24>
    4456:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__udivmodsi4>
    445a:	21 50       	subi	r18, 0x01	; 1
    445c:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==3)
    445e:	13 30       	cpi	r17, 0x03	; 3
    4460:	29 f4       	brne	.+10     	; 0x446c <uartSetBaudRate+0x46>
	{
		outb(UBRR3L, bauddiv);
    4462:	20 93 34 01 	sts	0x0134, r18
		#ifdef UBRR3H
		outb(UBRR3H, bauddiv>>8);
    4466:	30 93 35 01 	sts	0x0135, r19
    446a:	12 c0       	rjmp	.+36     	; 0x4490 <uartSetBaudRate+0x6a>
		#endif
	}
	else if(nUart==2)
    446c:	12 30       	cpi	r17, 0x02	; 2
    446e:	29 f4       	brne	.+10     	; 0x447a <uartSetBaudRate+0x54>
	{
		outb(UBRR2L, bauddiv);
    4470:	20 93 d4 00 	sts	0x00D4, r18
		#ifdef UBRR2H
		outb(UBRR2H, bauddiv>>8);
    4474:	30 93 d5 00 	sts	0x00D5, r19
    4478:	0b c0       	rjmp	.+22     	; 0x4490 <uartSetBaudRate+0x6a>
		#endif
	}
	else if(nUart==1)
    447a:	11 30       	cpi	r17, 0x01	; 1
    447c:	29 f4       	brne	.+10     	; 0x4488 <uartSetBaudRate+0x62>
	{
		outb(UBRR1L, bauddiv);
    447e:	20 93 cc 00 	sts	0x00CC, r18
		#ifdef UBRR1H
		outb(UBRR1H, bauddiv>>8);
    4482:	30 93 cd 00 	sts	0x00CD, r19
    4486:	04 c0       	rjmp	.+8      	; 0x4490 <uartSetBaudRate+0x6a>
		#endif
	}
	else
	{
		outb(UBRR0L, bauddiv);
    4488:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
    448c:	30 93 c5 00 	sts	0x00C5, r19
		#endif
	}
}
    4490:	1f 91       	pop	r17
    4492:	08 95       	ret

00004494 <uartGetRxBuffer>:

cBuffer* uartGetRxBuffer(u08 nUart)
{
    4494:	28 2f       	mov	r18, r24
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	a3 e0       	ldi	r26, 0x03	; 3
    449a:	22 0f       	add	r18, r18
    449c:	33 1f       	adc	r19, r19
    449e:	aa 95       	dec	r26
    44a0:	e1 f7       	brne	.-8      	; 0x449a <uartGetRxBuffer+0x6>
    44a2:	25 58       	subi	r18, 0x85	; 133
    44a4:	3d 4e       	sbci	r19, 0xED	; 237
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
    44a6:	c9 01       	movw	r24, r18
    44a8:	08 95       	ret

000044aa <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
    44aa:	28 2f       	mov	r18, r24
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	b3 e0       	ldi	r27, 0x03	; 3
    44b0:	22 0f       	add	r18, r18
    44b2:	33 1f       	adc	r19, r19
    44b4:	ba 95       	dec	r27
    44b6:	e1 f7       	brne	.-8      	; 0x44b0 <uartGetTxBuffer+0x6>
    44b8:	21 56       	subi	r18, 0x61	; 97
    44ba:	3d 4e       	sbci	r19, 0xED	; 237
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
    44bc:	c9 01       	movw	r24, r18
    44be:	08 95       	ret

000044c0 <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
    44c0:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==3)
    44c2:	83 30       	cpi	r24, 0x03	; 3
    44c4:	39 f4       	brne	.+14     	; 0x44d4 <uartSendByte+0x14>
	{
		while(!(UCSR3A & (1<<UDRE3)));
    44c6:	80 91 30 01 	lds	r24, 0x0130
    44ca:	85 ff       	sbrs	r24, 5
    44cc:	fc cf       	rjmp	.-8      	; 0x44c6 <uartSendByte+0x6>
		outb(UDR3, txData);
    44ce:	60 93 36 01 	sts	0x0136, r22
    44d2:	18 c0       	rjmp	.+48     	; 0x4504 <uartSendByte+0x44>
	}
	else if(nUart==2)
    44d4:	82 30       	cpi	r24, 0x02	; 2
    44d6:	39 f4       	brne	.+14     	; 0x44e6 <uartSendByte+0x26>
	{
		while(!(UCSR2A & (1<<UDRE2)));
    44d8:	80 91 d0 00 	lds	r24, 0x00D0
    44dc:	85 ff       	sbrs	r24, 5
    44de:	fc cf       	rjmp	.-8      	; 0x44d8 <uartSendByte+0x18>
		outb(UDR2, txData);
    44e0:	60 93 d6 00 	sts	0x00D6, r22
    44e4:	0f c0       	rjmp	.+30     	; 0x4504 <uartSendByte+0x44>
	}
	else if(nUart==1)
    44e6:	81 30       	cpi	r24, 0x01	; 1
    44e8:	39 f4       	brne	.+14     	; 0x44f8 <uartSendByte+0x38>
	{
		while(!(UCSR1A & (1<<UDRE1)));
    44ea:	80 91 c8 00 	lds	r24, 0x00C8
    44ee:	85 ff       	sbrs	r24, 5
    44f0:	fc cf       	rjmp	.-8      	; 0x44ea <uartSendByte+0x2a>
		outb(UDR1, txData);
    44f2:	60 93 ce 00 	sts	0x00CE, r22
    44f6:	06 c0       	rjmp	.+12     	; 0x4504 <uartSendByte+0x44>
	}
	else
	{
		while(!(UCSR0A & (1<<UDRE0)));
    44f8:	80 91 c0 00 	lds	r24, 0x00C0
    44fc:	85 ff       	sbrs	r24, 5
    44fe:	fc cf       	rjmp	.-8      	; 0x44f8 <uartSendByte+0x38>
		outb(UDR0, txData);
    4500:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    4504:	f0 e0       	ldi	r31, 0x00	; 0
    4506:	e9 58       	subi	r30, 0x89	; 137
    4508:	fd 4e       	sbci	r31, 0xED	; 237
    450a:	10 82       	st	Z, r1
}
    450c:	08 95       	ret

0000450e <uart0SendByte>:

void uart0SendByte(u08 data)
{
    450e:	68 2f       	mov	r22, r24
	// send byte on UART0
	uartSendByte(0, data);
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	0e 94 60 22 	call	0x44c0	; 0x44c0 <uartSendByte>
}
    4516:	08 95       	ret

00004518 <uart1SendByte>:

void uart1SendByte(u08 data)
{
    4518:	68 2f       	mov	r22, r24
	// send byte on UART1
	uartSendByte(1, data);
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	0e 94 60 22 	call	0x44c0	; 0x44c0 <uartSendByte>
}
    4520:	08 95       	ret

00004522 <uart2SendByte>:

void uart2SendByte(u08 data)
{
    4522:	68 2f       	mov	r22, r24
	// send byte on UART2
	uartSendByte(2, data);
    4524:	82 e0       	ldi	r24, 0x02	; 2
    4526:	0e 94 60 22 	call	0x44c0	; 0x44c0 <uartSendByte>
}
    452a:	08 95       	ret

0000452c <uart3SendByte>:

void uart3SendByte(u08 data)
{
    452c:	68 2f       	mov	r22, r24
	// send byte on UART3
	uartSendByte(3, data);
    452e:	83 e0       	ldi	r24, 0x03	; 3
    4530:	0e 94 60 22 	call	0x44c0	; 0x44c0 <uartSendByte>
}
    4534:	08 95       	ret

00004536 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	e8 2f       	mov	r30, r24
    453a:	f0 e0       	ldi	r31, 0x00	; 0
    453c:	83 e0       	ldi	r24, 0x03	; 3
    453e:	ee 0f       	add	r30, r30
    4540:	ff 1f       	adc	r31, r31
    4542:	8a 95       	dec	r24
    4544:	e1 f7       	brne	.-8      	; 0x453e <uartReceiveBufferIsEmpty+0x8>
    4546:	e1 58       	subi	r30, 0x81	; 129
    4548:	fd 4e       	sbci	r31, 0xED	; 237
    454a:	80 81       	ld	r24, Z
    454c:	91 81       	ldd	r25, Z+1	; 0x01
    454e:	89 2b       	or	r24, r25
    4550:	09 f4       	brne	.+2      	; 0x4554 <uartReceiveBufferIsEmpty+0x1e>
    4552:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
    4554:	82 2f       	mov	r24, r18
    4556:	08 95       	ret

00004558 <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    4558:	cf 93       	push	r28
    455a:	df 93       	push	r29
	u08 c;
	// get received char
	if(nUart==3)
    455c:	83 30       	cpi	r24, 0x03	; 3
    455e:	19 f4       	brne	.+6      	; 0x4566 <uartReceiveService+0xe>
		c = inb(UDR3);
    4560:	60 91 36 01 	lds	r22, 0x0136
    4564:	0c c0       	rjmp	.+24     	; 0x457e <uartReceiveService+0x26>
	else if(nUart==2)
    4566:	82 30       	cpi	r24, 0x02	; 2
    4568:	19 f4       	brne	.+6      	; 0x4570 <uartReceiveService+0x18>
		c = inb(UDR2);
    456a:	60 91 d6 00 	lds	r22, 0x00D6
    456e:	07 c0       	rjmp	.+14     	; 0x457e <uartReceiveService+0x26>
	else if(nUart==1)
    4570:	81 30       	cpi	r24, 0x01	; 1
    4572:	19 f4       	brne	.+6      	; 0x457a <uartReceiveService+0x22>
		c = inb(UDR1);
    4574:	60 91 ce 00 	lds	r22, 0x00CE
    4578:	02 c0       	rjmp	.+4      	; 0x457e <uartReceiveService+0x26>
	else
		c = inb(UDR0);
    457a:	60 91 c6 00 	lds	r22, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    457e:	28 2f       	mov	r18, r24
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	e9 01       	movw	r28, r18
    4584:	cc 0f       	add	r28, r28
    4586:	dd 1f       	adc	r29, r29
    4588:	fe 01       	movw	r30, r28
    458a:	eb 50       	subi	r30, 0x0B	; 11
    458c:	fe 4e       	sbci	r31, 0xEE	; 238
    458e:	80 81       	ld	r24, Z
    4590:	91 81       	ldd	r25, Z+1	; 0x01
    4592:	89 2b       	or	r24, r25
    4594:	31 f0       	breq	.+12     	; 0x45a2 <uartReceiveService+0x4a>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    4596:	01 90       	ld	r0, Z+
    4598:	f0 81       	ld	r31, Z
    459a:	e0 2d       	mov	r30, r0
    459c:	86 2f       	mov	r24, r22
    459e:	09 95       	icall
    45a0:	14 c0       	rjmp	.+40     	; 0x45ca <uartReceiveService+0x72>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    45a2:	93 e0       	ldi	r25, 0x03	; 3
    45a4:	22 0f       	add	r18, r18
    45a6:	33 1f       	adc	r19, r19
    45a8:	9a 95       	dec	r25
    45aa:	e1 f7       	brne	.-8      	; 0x45a4 <uartReceiveService+0x4c>
    45ac:	c9 01       	movw	r24, r18
    45ae:	85 58       	subi	r24, 0x85	; 133
    45b0:	9d 4e       	sbci	r25, 0xED	; 237
    45b2:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <bufferAddToEnd>
    45b6:	88 23       	and	r24, r24
    45b8:	41 f4       	brne	.+16     	; 0x45ca <uartReceiveService+0x72>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    45ba:	fe 01       	movw	r30, r28
    45bc:	e1 54       	subi	r30, 0x41	; 65
    45be:	fd 4e       	sbci	r31, 0xED	; 237
    45c0:	80 81       	ld	r24, Z
    45c2:	91 81       	ldd	r25, Z+1	; 0x01
    45c4:	01 96       	adiw	r24, 0x01	; 1
    45c6:	91 83       	std	Z+1, r25	; 0x01
    45c8:	80 83       	st	Z, r24
		}
	}
}
    45ca:	df 91       	pop	r29
    45cc:	cf 91       	pop	r28
    45ce:	08 95       	ret

000045d0 <__vector_54>:
{
	uartReceiveService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_RECV)      
{
    45d0:	1f 92       	push	r1
    45d2:	0f 92       	push	r0
    45d4:	0f b6       	in	r0, 0x3f	; 63
    45d6:	0f 92       	push	r0
    45d8:	11 24       	eor	r1, r1
    45da:	2f 93       	push	r18
    45dc:	3f 93       	push	r19
    45de:	4f 93       	push	r20
    45e0:	5f 93       	push	r21
    45e2:	6f 93       	push	r22
    45e4:	7f 93       	push	r23
    45e6:	8f 93       	push	r24
    45e8:	9f 93       	push	r25
    45ea:	af 93       	push	r26
    45ec:	bf 93       	push	r27
    45ee:	ef 93       	push	r30
    45f0:	ff 93       	push	r31
	uartReceiveService(3);
    45f2:	83 e0       	ldi	r24, 0x03	; 3
    45f4:	0e 94 ac 22 	call	0x4558	; 0x4558 <uartReceiveService>
}
    45f8:	ff 91       	pop	r31
    45fa:	ef 91       	pop	r30
    45fc:	bf 91       	pop	r27
    45fe:	af 91       	pop	r26
    4600:	9f 91       	pop	r25
    4602:	8f 91       	pop	r24
    4604:	7f 91       	pop	r23
    4606:	6f 91       	pop	r22
    4608:	5f 91       	pop	r21
    460a:	4f 91       	pop	r20
    460c:	3f 91       	pop	r19
    460e:	2f 91       	pop	r18
    4610:	0f 90       	pop	r0
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	0f 90       	pop	r0
    4616:	1f 90       	pop	r1
    4618:	18 95       	reti

0000461a <__vector_51>:
{
	uartReceiveService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_RECV)      
{
    461a:	1f 92       	push	r1
    461c:	0f 92       	push	r0
    461e:	0f b6       	in	r0, 0x3f	; 63
    4620:	0f 92       	push	r0
    4622:	11 24       	eor	r1, r1
    4624:	2f 93       	push	r18
    4626:	3f 93       	push	r19
    4628:	4f 93       	push	r20
    462a:	5f 93       	push	r21
    462c:	6f 93       	push	r22
    462e:	7f 93       	push	r23
    4630:	8f 93       	push	r24
    4632:	9f 93       	push	r25
    4634:	af 93       	push	r26
    4636:	bf 93       	push	r27
    4638:	ef 93       	push	r30
    463a:	ff 93       	push	r31
	uartReceiveService(2);
    463c:	82 e0       	ldi	r24, 0x02	; 2
    463e:	0e 94 ac 22 	call	0x4558	; 0x4558 <uartReceiveService>
}
    4642:	ff 91       	pop	r31
    4644:	ef 91       	pop	r30
    4646:	bf 91       	pop	r27
    4648:	af 91       	pop	r26
    464a:	9f 91       	pop	r25
    464c:	8f 91       	pop	r24
    464e:	7f 91       	pop	r23
    4650:	6f 91       	pop	r22
    4652:	5f 91       	pop	r21
    4654:	4f 91       	pop	r20
    4656:	3f 91       	pop	r19
    4658:	2f 91       	pop	r18
    465a:	0f 90       	pop	r0
    465c:	0f be       	out	0x3f, r0	; 63
    465e:	0f 90       	pop	r0
    4660:	1f 90       	pop	r1
    4662:	18 95       	reti

00004664 <__vector_36>:
{
	uartReceiveService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_RECV)      
{
    4664:	1f 92       	push	r1
    4666:	0f 92       	push	r0
    4668:	0f b6       	in	r0, 0x3f	; 63
    466a:	0f 92       	push	r0
    466c:	11 24       	eor	r1, r1
    466e:	2f 93       	push	r18
    4670:	3f 93       	push	r19
    4672:	4f 93       	push	r20
    4674:	5f 93       	push	r21
    4676:	6f 93       	push	r22
    4678:	7f 93       	push	r23
    467a:	8f 93       	push	r24
    467c:	9f 93       	push	r25
    467e:	af 93       	push	r26
    4680:	bf 93       	push	r27
    4682:	ef 93       	push	r30
    4684:	ff 93       	push	r31
	uartReceiveService(1);
    4686:	81 e0       	ldi	r24, 0x01	; 1
    4688:	0e 94 ac 22 	call	0x4558	; 0x4558 <uartReceiveService>
}
    468c:	ff 91       	pop	r31
    468e:	ef 91       	pop	r30
    4690:	bf 91       	pop	r27
    4692:	af 91       	pop	r26
    4694:	9f 91       	pop	r25
    4696:	8f 91       	pop	r24
    4698:	7f 91       	pop	r23
    469a:	6f 91       	pop	r22
    469c:	5f 91       	pop	r21
    469e:	4f 91       	pop	r20
    46a0:	3f 91       	pop	r19
    46a2:	2f 91       	pop	r18
    46a4:	0f 90       	pop	r0
    46a6:	0f be       	out	0x3f, r0	; 63
    46a8:	0f 90       	pop	r0
    46aa:	1f 90       	pop	r1
    46ac:	18 95       	reti

000046ae <__vector_25>:
	uartTransmitService(3);
}

	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
    46ae:	1f 92       	push	r1
    46b0:	0f 92       	push	r0
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	0f 92       	push	r0
    46b6:	11 24       	eor	r1, r1
    46b8:	2f 93       	push	r18
    46ba:	3f 93       	push	r19
    46bc:	4f 93       	push	r20
    46be:	5f 93       	push	r21
    46c0:	6f 93       	push	r22
    46c2:	7f 93       	push	r23
    46c4:	8f 93       	push	r24
    46c6:	9f 93       	push	r25
    46c8:	af 93       	push	r26
    46ca:	bf 93       	push	r27
    46cc:	ef 93       	push	r30
    46ce:	ff 93       	push	r31
	uartReceiveService(0);
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	0e 94 ac 22 	call	0x4558	; 0x4558 <uartReceiveService>
}
    46d6:	ff 91       	pop	r31
    46d8:	ef 91       	pop	r30
    46da:	bf 91       	pop	r27
    46dc:	af 91       	pop	r26
    46de:	9f 91       	pop	r25
    46e0:	8f 91       	pop	r24
    46e2:	7f 91       	pop	r23
    46e4:	6f 91       	pop	r22
    46e6:	5f 91       	pop	r21
    46e8:	4f 91       	pop	r20
    46ea:	3f 91       	pop	r19
    46ec:	2f 91       	pop	r18
    46ee:	0f 90       	pop	r0
    46f0:	0f be       	out	0x3f, r0	; 63
    46f2:	0f 90       	pop	r0
    46f4:	1f 90       	pop	r1
    46f6:	18 95       	reti

000046f8 <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    46f8:	8f 92       	push	r8
    46fa:	9f 92       	push	r9
    46fc:	af 92       	push	r10
    46fe:	bf 92       	push	r11
    4700:	cf 92       	push	r12
    4702:	df 92       	push	r13
    4704:	ef 92       	push	r14
    4706:	ff 92       	push	r15
    4708:	0f 93       	push	r16
    470a:	1f 93       	push	r17
    470c:	cf 93       	push	r28
    470e:	df 93       	push	r29
    4710:	88 2e       	mov	r8, r24
    4712:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    4714:	c8 2e       	mov	r12, r24
    4716:	dd 24       	eor	r13, r13
    4718:	f6 01       	movw	r30, r12
    471a:	13 e0       	ldi	r17, 0x03	; 3
    471c:	ee 0f       	add	r30, r30
    471e:	ff 1f       	adc	r31, r31
    4720:	1a 95       	dec	r17
    4722:	e1 f7       	brne	.-8      	; 0x471c <uartSendBuffer+0x24>
    4724:	ed 55       	subi	r30, 0x5D	; 93
    4726:	fd 4e       	sbci	r31, 0xED	; 237
    4728:	20 81       	ld	r18, Z
    472a:	31 81       	ldd	r19, Z+1	; 0x01
    472c:	24 0f       	add	r18, r20
    472e:	35 1f       	adc	r19, r21
    4730:	f6 01       	movw	r30, r12
    4732:	73 e0       	ldi	r23, 0x03	; 3
    4734:	ee 0f       	add	r30, r30
    4736:	ff 1f       	adc	r31, r31
    4738:	7a 95       	dec	r23
    473a:	e1 f7       	brne	.-8      	; 0x4734 <uartSendBuffer+0x3c>
    473c:	ef 55       	subi	r30, 0x5F	; 95
    473e:	fd 4e       	sbci	r31, 0xED	; 237
    4740:	80 81       	ld	r24, Z
    4742:	91 81       	ldd	r25, Z+1	; 0x01
    4744:	28 17       	cp	r18, r24
    4746:	39 07       	cpc	r19, r25
    4748:	70 f5       	brcc	.+92     	; 0x47a6 <uartSendBuffer+0xae>
    474a:	41 15       	cp	r20, r1
    474c:	51 05       	cpc	r21, r1
    474e:	59 f1       	breq	.+86     	; 0x47a6 <uartSendBuffer+0xae>
	{
		// grab first character
		first = *buffer++;
    4750:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    4752:	76 01       	movw	r14, r12
    4754:	63 e0       	ldi	r22, 0x03	; 3
    4756:	ee 0c       	add	r14, r14
    4758:	ff 1c       	adc	r15, r15
    475a:	6a 95       	dec	r22
    475c:	e1 f7       	brne	.-8      	; 0x4756 <uartSendBuffer+0x5e>
    475e:	8f e9       	ldi	r24, 0x9F	; 159
    4760:	92 e1       	ldi	r25, 0x12	; 18
    4762:	e8 0e       	add	r14, r24
    4764:	f9 1e       	adc	r15, r25
    4766:	8d 01       	movw	r16, r26
    4768:	c0 e0       	ldi	r28, 0x00	; 0
    476a:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    476c:	5a 01       	movw	r10, r20
    476e:	08 94       	sec
    4770:	a1 08       	sbc	r10, r1
    4772:	b1 08       	sbc	r11, r1
    4774:	06 c0       	rjmp	.+12     	; 0x4782 <uartSendBuffer+0x8a>
    4776:	c7 01       	movw	r24, r14
    4778:	f8 01       	movw	r30, r16
    477a:	60 81       	ld	r22, Z
    477c:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <bufferAddToEnd>
    4780:	21 96       	adiw	r28, 0x01	; 1
    4782:	0f 5f       	subi	r16, 0xFF	; 255
    4784:	1f 4f       	sbci	r17, 0xFF	; 255
    4786:	ca 15       	cp	r28, r10
    4788:	db 05       	cpc	r29, r11
    478a:	a8 f3       	brcs	.-22     	; 0x4776 <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    478c:	8b e9       	ldi	r24, 0x9B	; 155
    478e:	92 e1       	ldi	r25, 0x12	; 18
    4790:	c8 0e       	add	r12, r24
    4792:	d9 1e       	adc	r13, r25
    4794:	8f ef       	ldi	r24, 0xFF	; 255
    4796:	f6 01       	movw	r30, r12
    4798:	80 83       	st	Z, r24
		uartSendByte(nUart, first);
    479a:	88 2d       	mov	r24, r8
    479c:	69 2d       	mov	r22, r9
    479e:	0e 94 60 22 	call	0x44c0	; 0x44c0 <uartSendByte>
    47a2:	8f ef       	ldi	r24, 0xFF	; 255
    47a4:	01 c0       	rjmp	.+2      	; 0x47a8 <uartSendBuffer+0xb0>
		// return success
		return TRUE;
    47a6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    47a8:	df 91       	pop	r29
    47aa:	cf 91       	pop	r28
    47ac:	1f 91       	pop	r17
    47ae:	0f 91       	pop	r16
    47b0:	ff 90       	pop	r15
    47b2:	ef 90       	pop	r14
    47b4:	df 90       	pop	r13
    47b6:	cf 90       	pop	r12
    47b8:	bf 90       	pop	r11
    47ba:	af 90       	pop	r10
    47bc:	9f 90       	pop	r9
    47be:	8f 90       	pop	r8
    47c0:	08 95       	ret

000047c2 <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	23 e0       	ldi	r18, 0x03	; 3
    47c6:	88 0f       	add	r24, r24
    47c8:	99 1f       	adc	r25, r25
    47ca:	2a 95       	dec	r18
    47cc:	e1 f7       	brne	.-8      	; 0x47c6 <uartAddToTxBuffer+0x4>
    47ce:	81 56       	subi	r24, 0x61	; 97
    47d0:	9d 4e       	sbci	r25, 0xED	; 237
    47d2:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <bufferAddToEnd>
}
    47d6:	08 95       	ret

000047d8 <uart3AddToTxBuffer>:
{
	uartAddToTxBuffer(2,data);
}

void uart3AddToTxBuffer(u08 data)
{
    47d8:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    47da:	87 eb       	ldi	r24, 0xB7	; 183
    47dc:	92 e1       	ldi	r25, 0x12	; 18
    47de:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <bufferAddToEnd>
}

void uart3AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(3,data);
}
    47e2:	08 95       	ret

000047e4 <uart2AddToTxBuffer>:
{
	uartAddToTxBuffer(1,data);
}

void uart2AddToTxBuffer(u08 data)
{
    47e4:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    47e6:	8f ea       	ldi	r24, 0xAF	; 175
    47e8:	92 e1       	ldi	r25, 0x12	; 18
    47ea:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <bufferAddToEnd>
}

void uart2AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(2,data);
}
    47ee:	08 95       	ret

000047f0 <uart1AddToTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uart1AddToTxBuffer(u08 data)
{
    47f0:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    47f2:	87 ea       	ldi	r24, 0xA7	; 167
    47f4:	92 e1       	ldi	r25, 0x12	; 18
    47f6:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <bufferAddToEnd>
}

void uart1AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(1,data);
}
    47fa:	08 95       	ret

000047fc <uart0AddToTxBuffer>:
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
}

void uart0AddToTxBuffer(u08 data)
{
    47fc:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    47fe:	8f e9       	ldi	r24, 0x9F	; 159
    4800:	92 e1       	ldi	r25, 0x12	; 18
    4802:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    4806:	08 95       	ret

00004808 <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    4808:	cf 93       	push	r28
    480a:	df 93       	push	r29
    480c:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    480e:	a8 2f       	mov	r26, r24
    4810:	b0 e0       	ldi	r27, 0x00	; 0
    4812:	ed 01       	movw	r28, r26
    4814:	c5 56       	subi	r28, 0x65	; 101
    4816:	dd 4e       	sbci	r29, 0xED	; 237
    4818:	88 81       	ld	r24, Y
    481a:	88 23       	and	r24, r24
    481c:	79 f1       	breq	.+94     	; 0x487c <uartTransmitService+0x74>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    481e:	fd 01       	movw	r30, r26
    4820:	33 e0       	ldi	r19, 0x03	; 3
    4822:	ee 0f       	add	r30, r30
    4824:	ff 1f       	adc	r31, r31
    4826:	3a 95       	dec	r19
    4828:	e1 f7       	brne	.-8      	; 0x4822 <uartTransmitService+0x1a>
    482a:	ed 55       	subi	r30, 0x5D	; 93
    482c:	fd 4e       	sbci	r31, 0xED	; 237
    482e:	80 81       	ld	r24, Z
    4830:	91 81       	ldd	r25, Z+1	; 0x01
    4832:	89 2b       	or	r24, r25
    4834:	11 f1       	breq	.+68     	; 0x487a <uartTransmitService+0x72>
		{
			// send byte from top of buffer
			if(nUart==3)
    4836:	23 30       	cpi	r18, 0x03	; 3
    4838:	39 f4       	brne	.+14     	; 0x4848 <uartTransmitService+0x40>
				outb(UDR3,  bufferGetFromFront(&uartTxBuffer[3]) );
    483a:	87 eb       	ldi	r24, 0xB7	; 183
    483c:	92 e1       	ldi	r25, 0x12	; 18
    483e:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <bufferGetFromFront>
    4842:	80 93 36 01 	sts	0x0136, r24
    4846:	1e c0       	rjmp	.+60     	; 0x4884 <uartTransmitService+0x7c>
			else if(nUart==2)
    4848:	22 30       	cpi	r18, 0x02	; 2
    484a:	39 f4       	brne	.+14     	; 0x485a <uartTransmitService+0x52>
				outb(UDR2,  bufferGetFromFront(&uartTxBuffer[2]) );
    484c:	8f ea       	ldi	r24, 0xAF	; 175
    484e:	92 e1       	ldi	r25, 0x12	; 18
    4850:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <bufferGetFromFront>
    4854:	80 93 d6 00 	sts	0x00D6, r24
    4858:	15 c0       	rjmp	.+42     	; 0x4884 <uartTransmitService+0x7c>
			else if(nUart==1)
    485a:	21 30       	cpi	r18, 0x01	; 1
    485c:	39 f4       	brne	.+14     	; 0x486c <uartTransmitService+0x64>
				outb(UDR1,  bufferGetFromFront(&uartTxBuffer[1]) );
    485e:	87 ea       	ldi	r24, 0xA7	; 167
    4860:	92 e1       	ldi	r25, 0x12	; 18
    4862:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <bufferGetFromFront>
    4866:	80 93 ce 00 	sts	0x00CE, r24
    486a:	0c c0       	rjmp	.+24     	; 0x4884 <uartTransmitService+0x7c>
			else
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    486c:	8f e9       	ldi	r24, 0x9F	; 159
    486e:	92 e1       	ldi	r25, 0x12	; 18
    4870:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <bufferGetFromFront>
    4874:	80 93 c6 00 	sts	0x00C6, r24
    4878:	05 c0       	rjmp	.+10     	; 0x4884 <uartTransmitService+0x7c>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    487a:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    487c:	a9 58       	subi	r26, 0x89	; 137
    487e:	bd 4e       	sbci	r27, 0xED	; 237
    4880:	8f ef       	ldi	r24, 0xFF	; 255
    4882:	8c 93       	st	X, r24
	}
}
    4884:	df 91       	pop	r29
    4886:	cf 91       	pop	r28
    4888:	08 95       	ret

0000488a <__vector_56>:
{
	uartTransmitService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_TRANS)      
{
    488a:	1f 92       	push	r1
    488c:	0f 92       	push	r0
    488e:	0f b6       	in	r0, 0x3f	; 63
    4890:	0f 92       	push	r0
    4892:	11 24       	eor	r1, r1
    4894:	2f 93       	push	r18
    4896:	3f 93       	push	r19
    4898:	4f 93       	push	r20
    489a:	5f 93       	push	r21
    489c:	6f 93       	push	r22
    489e:	7f 93       	push	r23
    48a0:	8f 93       	push	r24
    48a2:	9f 93       	push	r25
    48a4:	af 93       	push	r26
    48a6:	bf 93       	push	r27
    48a8:	ef 93       	push	r30
    48aa:	ff 93       	push	r31
	uartTransmitService(3);
    48ac:	83 e0       	ldi	r24, 0x03	; 3
    48ae:	0e 94 04 24 	call	0x4808	; 0x4808 <uartTransmitService>
}
    48b2:	ff 91       	pop	r31
    48b4:	ef 91       	pop	r30
    48b6:	bf 91       	pop	r27
    48b8:	af 91       	pop	r26
    48ba:	9f 91       	pop	r25
    48bc:	8f 91       	pop	r24
    48be:	7f 91       	pop	r23
    48c0:	6f 91       	pop	r22
    48c2:	5f 91       	pop	r21
    48c4:	4f 91       	pop	r20
    48c6:	3f 91       	pop	r19
    48c8:	2f 91       	pop	r18
    48ca:	0f 90       	pop	r0
    48cc:	0f be       	out	0x3f, r0	; 63
    48ce:	0f 90       	pop	r0
    48d0:	1f 90       	pop	r1
    48d2:	18 95       	reti

000048d4 <__vector_53>:
{
	uartTransmitService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_TRANS)      
{
    48d4:	1f 92       	push	r1
    48d6:	0f 92       	push	r0
    48d8:	0f b6       	in	r0, 0x3f	; 63
    48da:	0f 92       	push	r0
    48dc:	11 24       	eor	r1, r1
    48de:	2f 93       	push	r18
    48e0:	3f 93       	push	r19
    48e2:	4f 93       	push	r20
    48e4:	5f 93       	push	r21
    48e6:	6f 93       	push	r22
    48e8:	7f 93       	push	r23
    48ea:	8f 93       	push	r24
    48ec:	9f 93       	push	r25
    48ee:	af 93       	push	r26
    48f0:	bf 93       	push	r27
    48f2:	ef 93       	push	r30
    48f4:	ff 93       	push	r31
	uartTransmitService(2);
    48f6:	82 e0       	ldi	r24, 0x02	; 2
    48f8:	0e 94 04 24 	call	0x4808	; 0x4808 <uartTransmitService>
}
    48fc:	ff 91       	pop	r31
    48fe:	ef 91       	pop	r30
    4900:	bf 91       	pop	r27
    4902:	af 91       	pop	r26
    4904:	9f 91       	pop	r25
    4906:	8f 91       	pop	r24
    4908:	7f 91       	pop	r23
    490a:	6f 91       	pop	r22
    490c:	5f 91       	pop	r21
    490e:	4f 91       	pop	r20
    4910:	3f 91       	pop	r19
    4912:	2f 91       	pop	r18
    4914:	0f 90       	pop	r0
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	0f 90       	pop	r0
    491a:	1f 90       	pop	r1
    491c:	18 95       	reti

0000491e <__vector_38>:
{
	uartTransmitService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_TRANS)      
{
    491e:	1f 92       	push	r1
    4920:	0f 92       	push	r0
    4922:	0f b6       	in	r0, 0x3f	; 63
    4924:	0f 92       	push	r0
    4926:	11 24       	eor	r1, r1
    4928:	2f 93       	push	r18
    492a:	3f 93       	push	r19
    492c:	4f 93       	push	r20
    492e:	5f 93       	push	r21
    4930:	6f 93       	push	r22
    4932:	7f 93       	push	r23
    4934:	8f 93       	push	r24
    4936:	9f 93       	push	r25
    4938:	af 93       	push	r26
    493a:	bf 93       	push	r27
    493c:	ef 93       	push	r30
    493e:	ff 93       	push	r31
	uartTransmitService(1);
    4940:	81 e0       	ldi	r24, 0x01	; 1
    4942:	0e 94 04 24 	call	0x4808	; 0x4808 <uartTransmitService>
}
    4946:	ff 91       	pop	r31
    4948:	ef 91       	pop	r30
    494a:	bf 91       	pop	r27
    494c:	af 91       	pop	r26
    494e:	9f 91       	pop	r25
    4950:	8f 91       	pop	r24
    4952:	7f 91       	pop	r23
    4954:	6f 91       	pop	r22
    4956:	5f 91       	pop	r21
    4958:	4f 91       	pop	r20
    495a:	3f 91       	pop	r19
    495c:	2f 91       	pop	r18
    495e:	0f 90       	pop	r0
    4960:	0f be       	out	0x3f, r0	; 63
    4962:	0f 90       	pop	r0
    4964:	1f 90       	pop	r1
    4966:	18 95       	reti

00004968 <__vector_27>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    4968:	1f 92       	push	r1
    496a:	0f 92       	push	r0
    496c:	0f b6       	in	r0, 0x3f	; 63
    496e:	0f 92       	push	r0
    4970:	11 24       	eor	r1, r1
    4972:	2f 93       	push	r18
    4974:	3f 93       	push	r19
    4976:	4f 93       	push	r20
    4978:	5f 93       	push	r21
    497a:	6f 93       	push	r22
    497c:	7f 93       	push	r23
    497e:	8f 93       	push	r24
    4980:	9f 93       	push	r25
    4982:	af 93       	push	r26
    4984:	bf 93       	push	r27
    4986:	ef 93       	push	r30
    4988:	ff 93       	push	r31
	uartTransmitService(0);
    498a:	80 e0       	ldi	r24, 0x00	; 0
    498c:	0e 94 04 24 	call	0x4808	; 0x4808 <uartTransmitService>
}
    4990:	ff 91       	pop	r31
    4992:	ef 91       	pop	r30
    4994:	bf 91       	pop	r27
    4996:	af 91       	pop	r26
    4998:	9f 91       	pop	r25
    499a:	8f 91       	pop	r24
    499c:	7f 91       	pop	r23
    499e:	6f 91       	pop	r22
    49a0:	5f 91       	pop	r21
    49a2:	4f 91       	pop	r20
    49a4:	3f 91       	pop	r19
    49a6:	2f 91       	pop	r18
    49a8:	0f 90       	pop	r0
    49aa:	0f be       	out	0x3f, r0	; 63
    49ac:	0f 90       	pop	r0
    49ae:	1f 90       	pop	r1
    49b0:	18 95       	reti

000049b2 <uartSendTxBuffer>:
{
	uartAddToTxBuffer(3,data);
}

void uartSendTxBuffer(u08 nUart)
{
    49b2:	1f 93       	push	r17
    49b4:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	fc 01       	movw	r30, r24
    49ba:	e5 56       	subi	r30, 0x65	; 101
    49bc:	fd 4e       	sbci	r31, 0xED	; 237
    49be:	2f ef       	ldi	r18, 0xFF	; 255
    49c0:	20 83       	st	Z, r18
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    49c2:	43 e0       	ldi	r20, 0x03	; 3
    49c4:	88 0f       	add	r24, r24
    49c6:	99 1f       	adc	r25, r25
    49c8:	4a 95       	dec	r20
    49ca:	e1 f7       	brne	.-8      	; 0x49c4 <uartSendTxBuffer+0x12>
    49cc:	81 56       	subi	r24, 0x61	; 97
    49ce:	9d 4e       	sbci	r25, 0xED	; 237
    49d0:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <bufferGetFromFront>
    49d4:	68 2f       	mov	r22, r24
    49d6:	81 2f       	mov	r24, r17
    49d8:	0e 94 60 22 	call	0x44c0	; 0x44c0 <uartSendByte>
}
    49dc:	1f 91       	pop	r17
    49de:	08 95       	ret

000049e0 <uartReceiveByte>:
		return -1;
}


u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    49e0:	cf 93       	push	r28
    49e2:	df 93       	push	r29
    49e4:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    49e6:	28 2f       	mov	r18, r24
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	f9 01       	movw	r30, r18
    49ec:	73 e0       	ldi	r23, 0x03	; 3
    49ee:	ee 0f       	add	r30, r30
    49f0:	ff 1f       	adc	r31, r31
    49f2:	7a 95       	dec	r23
    49f4:	e1 f7       	brne	.-8      	; 0x49ee <uartReceiveByte+0xe>
    49f6:	e3 58       	subi	r30, 0x83	; 131
    49f8:	fd 4e       	sbci	r31, 0xED	; 237
    49fa:	80 81       	ld	r24, Z
    49fc:	91 81       	ldd	r25, Z+1	; 0x01
    49fe:	89 2b       	or	r24, r25
    4a00:	c9 f0       	breq	.+50     	; 0x4a34 <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    4a02:	f9 01       	movw	r30, r18
    4a04:	63 e0       	ldi	r22, 0x03	; 3
    4a06:	ee 0f       	add	r30, r30
    4a08:	ff 1f       	adc	r31, r31
    4a0a:	6a 95       	dec	r22
    4a0c:	e1 f7       	brne	.-8      	; 0x4a06 <uartReceiveByte+0x26>
    4a0e:	e1 58       	subi	r30, 0x81	; 129
    4a10:	fd 4e       	sbci	r31, 0xED	; 237
    4a12:	80 81       	ld	r24, Z
    4a14:	91 81       	ldd	r25, Z+1	; 0x01
    4a16:	89 2b       	or	r24, r25
    4a18:	69 f0       	breq	.+26     	; 0x4a34 <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    4a1a:	53 e0       	ldi	r21, 0x03	; 3
    4a1c:	22 0f       	add	r18, r18
    4a1e:	33 1f       	adc	r19, r19
    4a20:	5a 95       	dec	r21
    4a22:	e1 f7       	brne	.-8      	; 0x4a1c <uartReceiveByte+0x3c>
    4a24:	c9 01       	movw	r24, r18
    4a26:	85 58       	subi	r24, 0x85	; 133
    4a28:	9d 4e       	sbci	r25, 0xED	; 237
    4a2a:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <bufferGetFromFront>
    4a2e:	88 83       	st	Y, r24
    4a30:	8f ef       	ldi	r24, 0xFF	; 255
    4a32:	01 c0       	rjmp	.+2      	; 0x4a36 <uartReceiveByte+0x56>
			return TRUE;
    4a34:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    4a36:	df 91       	pop	r29
    4a38:	cf 91       	pop	r28
    4a3a:	08 95       	ret

00004a3c <uart3GetByte>:
	else
		return -1;
}

int uart3GetByte(void)
{
    4a3c:	df 93       	push	r29
    4a3e:	cf 93       	push	r28
    4a40:	0f 92       	push	r0
    4a42:	cd b7       	in	r28, 0x3d	; 61
    4a44:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(3,&c))
    4a46:	83 e0       	ldi	r24, 0x03	; 3
    4a48:	be 01       	movw	r22, r28
    4a4a:	6f 5f       	subi	r22, 0xFF	; 255
    4a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4e:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <uartReceiveByte>
    4a52:	88 23       	and	r24, r24
    4a54:	19 f4       	brne	.+6      	; 0x4a5c <uart3GetByte+0x20>
    4a56:	2f ef       	ldi	r18, 0xFF	; 255
    4a58:	3f ef       	ldi	r19, 0xFF	; 255
    4a5a:	03 c0       	rjmp	.+6      	; 0x4a62 <uart3GetByte+0x26>
		return c;
    4a5c:	89 81       	ldd	r24, Y+1	; 0x01
    4a5e:	28 2f       	mov	r18, r24
    4a60:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    4a62:	c9 01       	movw	r24, r18
    4a64:	0f 90       	pop	r0
    4a66:	cf 91       	pop	r28
    4a68:	df 91       	pop	r29
    4a6a:	08 95       	ret

00004a6c <uart2GetByte>:
	else
		return -1;
}

int uart2GetByte(void)
{
    4a6c:	df 93       	push	r29
    4a6e:	cf 93       	push	r28
    4a70:	0f 92       	push	r0
    4a72:	cd b7       	in	r28, 0x3d	; 61
    4a74:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(2,&c))
    4a76:	82 e0       	ldi	r24, 0x02	; 2
    4a78:	be 01       	movw	r22, r28
    4a7a:	6f 5f       	subi	r22, 0xFF	; 255
    4a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a7e:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <uartReceiveByte>
    4a82:	88 23       	and	r24, r24
    4a84:	19 f4       	brne	.+6      	; 0x4a8c <uart2GetByte+0x20>
    4a86:	2f ef       	ldi	r18, 0xFF	; 255
    4a88:	3f ef       	ldi	r19, 0xFF	; 255
    4a8a:	03 c0       	rjmp	.+6      	; 0x4a92 <uart2GetByte+0x26>
		return c;
    4a8c:	89 81       	ldd	r24, Y+1	; 0x01
    4a8e:	28 2f       	mov	r18, r24
    4a90:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    4a92:	c9 01       	movw	r24, r18
    4a94:	0f 90       	pop	r0
    4a96:	cf 91       	pop	r28
    4a98:	df 91       	pop	r29
    4a9a:	08 95       	ret

00004a9c <uart1GetByte>:
	else
		return -1;
}

int uart1GetByte(void)
{
    4a9c:	df 93       	push	r29
    4a9e:	cf 93       	push	r28
    4aa0:	0f 92       	push	r0
    4aa2:	cd b7       	in	r28, 0x3d	; 61
    4aa4:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(1,&c))
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	be 01       	movw	r22, r28
    4aaa:	6f 5f       	subi	r22, 0xFF	; 255
    4aac:	7f 4f       	sbci	r23, 0xFF	; 255
    4aae:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <uartReceiveByte>
    4ab2:	88 23       	and	r24, r24
    4ab4:	19 f4       	brne	.+6      	; 0x4abc <uart1GetByte+0x20>
    4ab6:	2f ef       	ldi	r18, 0xFF	; 255
    4ab8:	3f ef       	ldi	r19, 0xFF	; 255
    4aba:	03 c0       	rjmp	.+6      	; 0x4ac2 <uart1GetByte+0x26>
		return c;
    4abc:	89 81       	ldd	r24, Y+1	; 0x01
    4abe:	28 2f       	mov	r18, r24
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    4ac2:	c9 01       	movw	r24, r18
    4ac4:	0f 90       	pop	r0
    4ac6:	cf 91       	pop	r28
    4ac8:	df 91       	pop	r29
    4aca:	08 95       	ret

00004acc <uart0GetByte>:
	// send byte on UART3
	uartSendByte(3, data);
}

int uart0GetByte(void)
{
    4acc:	df 93       	push	r29
    4ace:	cf 93       	push	r28
    4ad0:	0f 92       	push	r0
    4ad2:	cd b7       	in	r28, 0x3d	; 61
    4ad4:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	be 01       	movw	r22, r28
    4ada:	6f 5f       	subi	r22, 0xFF	; 255
    4adc:	7f 4f       	sbci	r23, 0xFF	; 255
    4ade:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <uartReceiveByte>
    4ae2:	88 23       	and	r24, r24
    4ae4:	19 f4       	brne	.+6      	; 0x4aec <uart0GetByte+0x20>
    4ae6:	2f ef       	ldi	r18, 0xFF	; 255
    4ae8:	3f ef       	ldi	r19, 0xFF	; 255
    4aea:	03 c0       	rjmp	.+6      	; 0x4af2 <uart0GetByte+0x26>
		return c;
    4aec:	89 81       	ldd	r24, Y+1	; 0x01
    4aee:	28 2f       	mov	r18, r24
    4af0:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    4af2:	c9 01       	movw	r24, r18
    4af4:	0f 90       	pop	r0
    4af6:	cf 91       	pop	r28
    4af8:	df 91       	pop	r29
    4afa:	08 95       	ret

00004afc <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	e3 e0       	ldi	r30, 0x03	; 3
    4b00:	88 0f       	add	r24, r24
    4b02:	99 1f       	adc	r25, r25
    4b04:	ea 95       	dec	r30
    4b06:	e1 f7       	brne	.-8      	; 0x4b00 <uartFlushReceiveBuffer+0x4>
    4b08:	85 58       	subi	r24, 0x85	; 133
    4b0a:	9d 4e       	sbci	r25, 0xED	; 237
    4b0c:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <bufferFlush>
}
    4b10:	08 95       	ret

00004b12 <uart3InitBuffers>:

void uart3InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) uart3RxData, UART3_RX_BUFFER_SIZE);
    4b12:	83 e9       	ldi	r24, 0x93	; 147
    4b14:	92 e1       	ldi	r25, 0x12	; 18
    4b16:	65 e6       	ldi	r22, 0x65	; 101
    4b18:	71 e1       	ldi	r23, 0x11	; 17
    4b1a:	40 e8       	ldi	r20, 0x80	; 128
    4b1c:	50 e0       	ldi	r21, 0x00	; 0
    4b1e:	0e 94 42 26 	call	0x4c84	; 0x4c84 <bufferInit>
		bufferInit(&uartTxBuffer[3], (u08*) uart3TxData, UART3_TX_BUFFER_SIZE);
    4b22:	87 eb       	ldi	r24, 0xB7	; 183
    4b24:	92 e1       	ldi	r25, 0x12	; 18
    4b26:	65 ee       	ldi	r22, 0xE5	; 229
    4b28:	71 e1       	ldi	r23, 0x11	; 17
    4b2a:	40 e1       	ldi	r20, 0x10	; 16
    4b2c:	50 e0       	ldi	r21, 0x00	; 0
    4b2e:	0e 94 42 26 	call	0x4c84	; 0x4c84 <bufferInit>
	#else
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) UART3_RX_BUFFER_ADDR, UART3_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[3], (u08*) UART3_TX_BUFFER_ADDR, UART3_TX_BUFFER_SIZE);
	#endif
}
    4b32:	08 95       	ret

00004b34 <uart3Init>:
}

void uart3Init(void)
{
	// initialize the buffers
	uart3InitBuffers();
    4b34:	0e 94 89 25 	call	0x4b12	; 0x4b12 <uart3InitBuffers>
	// initialize user receive handlers
	UartRxFunc[3] = 0;
    4b38:	10 92 fc 11 	sts	0x11FC, r1
    4b3c:	10 92 fb 11 	sts	0x11FB, r1
	// enable RxD/TxD and interrupts
	outb(UCSR3B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    4b40:	88 ed       	ldi	r24, 0xD8	; 216
    4b42:	80 93 31 01 	sts	0x0131, r24
	// set default baud rate
	uartSetBaudRate(3, UART3_DEFAULT_BAUD_RATE);
    4b46:	83 e0       	ldi	r24, 0x03	; 3
    4b48:	40 e8       	ldi	r20, 0x80	; 128
    4b4a:	55 e2       	ldi	r21, 0x25	; 37
    4b4c:	60 e0       	ldi	r22, 0x00	; 0
    4b4e:	70 e0       	ldi	r23, 0x00	; 0
    4b50:	0e 94 13 22 	call	0x4426	; 0x4426 <uartSetBaudRate>
	// initialize states
	uartReadyTx[3] = TRUE;
    4b54:	8f ef       	ldi	r24, 0xFF	; 255
    4b56:	80 93 7a 12 	sts	0x127A, r24
	uartBufferedTx[3] = FALSE;
    4b5a:	10 92 9e 12 	sts	0x129E, r1
	// clear overflow count
	uartRxOverflow[3] = 0;
    4b5e:	10 92 c6 12 	sts	0x12C6, r1
    4b62:	10 92 c5 12 	sts	0x12C5, r1
	// enable interrupts
	sei();
    4b66:	78 94       	sei
}
    4b68:	08 95       	ret

00004b6a <uart2InitBuffers>:

void uart2InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) uart2RxData, UART2_RX_BUFFER_SIZE);
    4b6a:	8b e8       	ldi	r24, 0x8B	; 139
    4b6c:	92 e1       	ldi	r25, 0x12	; 18
    4b6e:	65 ed       	ldi	r22, 0xD5	; 213
    4b70:	70 e1       	ldi	r23, 0x10	; 16
    4b72:	40 e8       	ldi	r20, 0x80	; 128
    4b74:	50 e0       	ldi	r21, 0x00	; 0
    4b76:	0e 94 42 26 	call	0x4c84	; 0x4c84 <bufferInit>
		bufferInit(&uartTxBuffer[2], (u08*) uart2TxData, UART2_TX_BUFFER_SIZE);
    4b7a:	8f ea       	ldi	r24, 0xAF	; 175
    4b7c:	92 e1       	ldi	r25, 0x12	; 18
    4b7e:	65 e5       	ldi	r22, 0x55	; 85
    4b80:	71 e1       	ldi	r23, 0x11	; 17
    4b82:	40 e1       	ldi	r20, 0x10	; 16
    4b84:	50 e0       	ldi	r21, 0x00	; 0
    4b86:	0e 94 42 26 	call	0x4c84	; 0x4c84 <bufferInit>
	#else
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) UART2_RX_BUFFER_ADDR, UART2_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[2], (u08*) UART2_TX_BUFFER_ADDR, UART2_TX_BUFFER_SIZE);
	#endif
}
    4b8a:	08 95       	ret

00004b8c <uart2Init>:
}

void uart2Init(void)
{
	// initialize the buffers
	uart2InitBuffers();
    4b8c:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <uart2InitBuffers>
	// initialize user receive handlers
	UartRxFunc[2] = 0;
    4b90:	10 92 fa 11 	sts	0x11FA, r1
    4b94:	10 92 f9 11 	sts	0x11F9, r1
	// enable RxD/TxD and interrupts
	outb(UCSR2B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    4b98:	88 ed       	ldi	r24, 0xD8	; 216
    4b9a:	80 93 d1 00 	sts	0x00D1, r24
	// set default baud rate
	uartSetBaudRate(2, UART2_DEFAULT_BAUD_RATE);
    4b9e:	82 e0       	ldi	r24, 0x02	; 2
    4ba0:	40 e8       	ldi	r20, 0x80	; 128
    4ba2:	55 e2       	ldi	r21, 0x25	; 37
    4ba4:	60 e0       	ldi	r22, 0x00	; 0
    4ba6:	70 e0       	ldi	r23, 0x00	; 0
    4ba8:	0e 94 13 22 	call	0x4426	; 0x4426 <uartSetBaudRate>
	// initialize states
	uartReadyTx[2] = TRUE;
    4bac:	8f ef       	ldi	r24, 0xFF	; 255
    4bae:	80 93 79 12 	sts	0x1279, r24
	uartBufferedTx[2] = FALSE;
    4bb2:	10 92 9d 12 	sts	0x129D, r1
	// clear overflow count
	uartRxOverflow[2] = 0;
    4bb6:	10 92 c4 12 	sts	0x12C4, r1
    4bba:	10 92 c3 12 	sts	0x12C3, r1
	// enable interrupts
	sei();
    4bbe:	78 94       	sei
}
    4bc0:	08 95       	ret

00004bc2 <uart1InitBuffers>:

void uart1InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) uart1RxData, UART1_RX_BUFFER_SIZE);
    4bc2:	83 e8       	ldi	r24, 0x83	; 131
    4bc4:	92 e1       	ldi	r25, 0x12	; 18
    4bc6:	65 e4       	ldi	r22, 0x45	; 69
    4bc8:	70 e1       	ldi	r23, 0x10	; 16
    4bca:	40 e8       	ldi	r20, 0x80	; 128
    4bcc:	50 e0       	ldi	r21, 0x00	; 0
    4bce:	0e 94 42 26 	call	0x4c84	; 0x4c84 <bufferInit>
		bufferInit(&uartTxBuffer[1], (u08*) uart1TxData, UART1_TX_BUFFER_SIZE);
    4bd2:	87 ea       	ldi	r24, 0xA7	; 167
    4bd4:	92 e1       	ldi	r25, 0x12	; 18
    4bd6:	65 ec       	ldi	r22, 0xC5	; 197
    4bd8:	70 e1       	ldi	r23, 0x10	; 16
    4bda:	40 e1       	ldi	r20, 0x10	; 16
    4bdc:	50 e0       	ldi	r21, 0x00	; 0
    4bde:	0e 94 42 26 	call	0x4c84	; 0x4c84 <bufferInit>
	#else
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) UART1_RX_BUFFER_ADDR, UART1_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[1], (u08*) UART1_TX_BUFFER_ADDR, UART1_TX_BUFFER_SIZE);
	#endif
}
    4be2:	08 95       	ret

00004be4 <uart1Init>:
}

void uart1Init(void)
{
	// initialize the buffers
	uart1InitBuffers();
    4be4:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <uart1InitBuffers>
	// initialize user receive handlers
	UartRxFunc[1] = 0;
    4be8:	10 92 f8 11 	sts	0x11F8, r1
    4bec:	10 92 f7 11 	sts	0x11F7, r1
	// enable RxD/TxD and interrupts
	outb(UCSR1B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    4bf0:	88 ed       	ldi	r24, 0xD8	; 216
    4bf2:	80 93 c9 00 	sts	0x00C9, r24
	// set default baud rate
	uartSetBaudRate(1, UART1_DEFAULT_BAUD_RATE);
    4bf6:	81 e0       	ldi	r24, 0x01	; 1
    4bf8:	40 e8       	ldi	r20, 0x80	; 128
    4bfa:	55 e2       	ldi	r21, 0x25	; 37
    4bfc:	60 e0       	ldi	r22, 0x00	; 0
    4bfe:	70 e0       	ldi	r23, 0x00	; 0
    4c00:	0e 94 13 22 	call	0x4426	; 0x4426 <uartSetBaudRate>
	// initialize states
	uartReadyTx[1] = TRUE;
    4c04:	8f ef       	ldi	r24, 0xFF	; 255
    4c06:	80 93 78 12 	sts	0x1278, r24
	uartBufferedTx[1] = FALSE;
    4c0a:	10 92 9c 12 	sts	0x129C, r1
	// clear overflow count
	uartRxOverflow[1] = 0;
    4c0e:	10 92 c2 12 	sts	0x12C2, r1
    4c12:	10 92 c1 12 	sts	0x12C1, r1
	// enable interrupts
	sei();
    4c16:	78 94       	sei
}
    4c18:	08 95       	ret

00004c1a <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    4c1a:	8b e7       	ldi	r24, 0x7B	; 123
    4c1c:	92 e1       	ldi	r25, 0x12	; 18
    4c1e:	65 eb       	ldi	r22, 0xB5	; 181
    4c20:	7f e0       	ldi	r23, 0x0F	; 15
    4c22:	40 e8       	ldi	r20, 0x80	; 128
    4c24:	50 e0       	ldi	r21, 0x00	; 0
    4c26:	0e 94 42 26 	call	0x4c84	; 0x4c84 <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    4c2a:	8f e9       	ldi	r24, 0x9F	; 159
    4c2c:	92 e1       	ldi	r25, 0x12	; 18
    4c2e:	65 e3       	ldi	r22, 0x35	; 53
    4c30:	70 e1       	ldi	r23, 0x10	; 16
    4c32:	40 e1       	ldi	r20, 0x10	; 16
    4c34:	50 e0       	ldi	r21, 0x00	; 0
    4c36:	0e 94 42 26 	call	0x4c84	; 0x4c84 <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    4c3a:	08 95       	ret

00004c3c <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    4c3c:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    4c40:	10 92 f6 11 	sts	0x11F6, r1
    4c44:	10 92 f5 11 	sts	0x11F5, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    4c48:	88 ed       	ldi	r24, 0xD8	; 216
    4c4a:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    4c4e:	80 e0       	ldi	r24, 0x00	; 0
    4c50:	40 e8       	ldi	r20, 0x80	; 128
    4c52:	55 e2       	ldi	r21, 0x25	; 37
    4c54:	60 e0       	ldi	r22, 0x00	; 0
    4c56:	70 e0       	ldi	r23, 0x00	; 0
    4c58:	0e 94 13 22 	call	0x4426	; 0x4426 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    4c5c:	8f ef       	ldi	r24, 0xFF	; 255
    4c5e:	80 93 77 12 	sts	0x1277, r24
	uartBufferedTx[0] = FALSE;
    4c62:	10 92 9b 12 	sts	0x129B, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    4c66:	10 92 c0 12 	sts	0x12C0, r1
    4c6a:	10 92 bf 12 	sts	0x12BF, r1
	// enable interrupts
	sei();
    4c6e:	78 94       	sei
}
    4c70:	08 95       	ret

00004c72 <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    4c72:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <uart0Init>
	uart1Init();
    4c76:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <uart1Init>
	uart2Init();
    4c7a:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <uart2Init>
	uart3Init();
    4c7e:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <uart3Init>
}
    4c82:	08 95       	ret

00004c84 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    4c84:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    4c86:	8f b7       	in	r24, 0x3f	; 63
    4c88:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    4c8a:	71 83       	std	Z+1, r23	; 0x01
    4c8c:	60 83       	st	Z, r22
	buffer->size = size;
    4c8e:	53 83       	std	Z+3, r21	; 0x03
    4c90:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    4c92:	17 82       	std	Z+7, r1	; 0x07
    4c94:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    4c96:	15 82       	std	Z+5, r1	; 0x05
    4c98:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    4c9a:	8f bf       	out	0x3f, r24	; 63
}
    4c9c:	08 95       	ret

00004c9e <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    4c9e:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    4ca0:	4f b7       	in	r20, 0x3f	; 63
    4ca2:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    4ca4:	14 96       	adiw	r26, 0x04	; 4
    4ca6:	8d 91       	ld	r24, X+
    4ca8:	9c 91       	ld	r25, X
    4caa:	15 97       	sbiw	r26, 0x05	; 5
    4cac:	89 2b       	or	r24, r25
    4cae:	11 f4       	brne	.+4      	; 0x4cb4 <bufferGetFromFront+0x16>
    4cb0:	e0 e0       	ldi	r30, 0x00	; 0
    4cb2:	25 c0       	rjmp	.+74     	; 0x4cfe <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    4cb4:	16 96       	adiw	r26, 0x06	; 6
    4cb6:	8d 91       	ld	r24, X+
    4cb8:	9c 91       	ld	r25, X
    4cba:	17 97       	sbiw	r26, 0x07	; 7
    4cbc:	ed 91       	ld	r30, X+
    4cbe:	fc 91       	ld	r31, X
    4cc0:	11 97       	sbiw	r26, 0x01	; 1
    4cc2:	e8 0f       	add	r30, r24
    4cc4:	f9 1f       	adc	r31, r25
    4cc6:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    4cc8:	01 96       	adiw	r24, 0x01	; 1
    4cca:	17 96       	adiw	r26, 0x07	; 7
    4ccc:	9c 93       	st	X, r25
    4cce:	8e 93       	st	-X, r24
    4cd0:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    4cd2:	12 96       	adiw	r26, 0x02	; 2
    4cd4:	2d 91       	ld	r18, X+
    4cd6:	3c 91       	ld	r19, X
    4cd8:	13 97       	sbiw	r26, 0x03	; 3
    4cda:	82 17       	cp	r24, r18
    4cdc:	93 07       	cpc	r25, r19
    4cde:	30 f0       	brcs	.+12     	; 0x4cec <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    4ce0:	82 1b       	sub	r24, r18
    4ce2:	93 0b       	sbc	r25, r19
    4ce4:	17 96       	adiw	r26, 0x07	; 7
    4ce6:	9c 93       	st	X, r25
    4ce8:	8e 93       	st	-X, r24
    4cea:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    4cec:	14 96       	adiw	r26, 0x04	; 4
    4cee:	8d 91       	ld	r24, X+
    4cf0:	9c 91       	ld	r25, X
    4cf2:	15 97       	sbiw	r26, 0x05	; 5
    4cf4:	01 97       	sbiw	r24, 0x01	; 1
    4cf6:	15 96       	adiw	r26, 0x05	; 5
    4cf8:	9c 93       	st	X, r25
    4cfa:	8e 93       	st	-X, r24
    4cfc:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    4cfe:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    4d00:	8e 2f       	mov	r24, r30
    4d02:	08 95       	ret

00004d04 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    4d04:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    4d06:	4f b7       	in	r20, 0x3f	; 63
    4d08:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    4d0a:	84 81       	ldd	r24, Z+4	; 0x04
    4d0c:	95 81       	ldd	r25, Z+5	; 0x05
    4d0e:	68 17       	cp	r22, r24
    4d10:	79 07       	cpc	r23, r25
    4d12:	b0 f4       	brcc	.+44     	; 0x4d40 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    4d14:	86 81       	ldd	r24, Z+6	; 0x06
    4d16:	97 81       	ldd	r25, Z+7	; 0x07
    4d18:	86 0f       	add	r24, r22
    4d1a:	97 1f       	adc	r25, r23
    4d1c:	97 83       	std	Z+7, r25	; 0x07
    4d1e:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    4d20:	22 81       	ldd	r18, Z+2	; 0x02
    4d22:	33 81       	ldd	r19, Z+3	; 0x03
    4d24:	82 17       	cp	r24, r18
    4d26:	93 07       	cpc	r25, r19
    4d28:	20 f0       	brcs	.+8      	; 0x4d32 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    4d2a:	82 1b       	sub	r24, r18
    4d2c:	93 0b       	sbc	r25, r19
    4d2e:	97 83       	std	Z+7, r25	; 0x07
    4d30:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    4d32:	84 81       	ldd	r24, Z+4	; 0x04
    4d34:	95 81       	ldd	r25, Z+5	; 0x05
    4d36:	86 1b       	sub	r24, r22
    4d38:	97 0b       	sbc	r25, r23
    4d3a:	95 83       	std	Z+5, r25	; 0x05
    4d3c:	84 83       	std	Z+4, r24	; 0x04
    4d3e:	02 c0       	rjmp	.+4      	; 0x4d44 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    4d40:	15 82       	std	Z+5, r1	; 0x05
    4d42:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    4d44:	4f bf       	out	0x3f, r20	; 63
}
    4d46:	08 95       	ret

00004d48 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    4d48:	fc 01       	movw	r30, r24
    4d4a:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    4d4c:	2f b7       	in	r18, 0x3f	; 63
    4d4e:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    4d50:	2f bf       	out	0x3f, r18	; 63
    4d52:	26 81       	ldd	r18, Z+6	; 0x06
    4d54:	37 81       	ldd	r19, Z+7	; 0x07
    4d56:	62 81       	ldd	r22, Z+2	; 0x02
    4d58:	73 81       	ldd	r23, Z+3	; 0x03
    4d5a:	82 0f       	add	r24, r18
    4d5c:	93 1f       	adc	r25, r19
    4d5e:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__udivmodhi4>
    4d62:	01 90       	ld	r0, Z+
    4d64:	f0 81       	ld	r31, Z
    4d66:	e0 2d       	mov	r30, r0
    4d68:	e8 0f       	add	r30, r24
    4d6a:	f9 1f       	adc	r31, r25
	return data;
}
    4d6c:	80 81       	ld	r24, Z
    4d6e:	08 95       	ret

00004d70 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    4d70:	1f 93       	push	r17
    4d72:	cf 93       	push	r28
    4d74:	df 93       	push	r29
    4d76:	ec 01       	movw	r28, r24
    4d78:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    4d7a:	4f b7       	in	r20, 0x3f	; 63
    4d7c:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    4d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    4d80:	3d 81       	ldd	r19, Y+5	; 0x05
    4d82:	6a 81       	ldd	r22, Y+2	; 0x02
    4d84:	7b 81       	ldd	r23, Y+3	; 0x03
    4d86:	26 17       	cp	r18, r22
    4d88:	37 07       	cpc	r19, r23
    4d8a:	98 f4       	brcc	.+38     	; 0x4db2 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    4d8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4d8e:	9f 81       	ldd	r25, Y+7	; 0x07
    4d90:	82 0f       	add	r24, r18
    4d92:	93 1f       	adc	r25, r19
    4d94:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__udivmodhi4>
    4d98:	e8 81       	ld	r30, Y
    4d9a:	f9 81       	ldd	r31, Y+1	; 0x01
    4d9c:	e8 0f       	add	r30, r24
    4d9e:	f9 1f       	adc	r31, r25
    4da0:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    4da2:	8c 81       	ldd	r24, Y+4	; 0x04
    4da4:	9d 81       	ldd	r25, Y+5	; 0x05
    4da6:	01 96       	adiw	r24, 0x01	; 1
    4da8:	9d 83       	std	Y+5, r25	; 0x05
    4daa:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    4dac:	4f bf       	out	0x3f, r20	; 63
    4dae:	8f ef       	ldi	r24, 0xFF	; 255
    4db0:	02 c0       	rjmp	.+4      	; 0x4db6 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    4db2:	4f bf       	out	0x3f, r20	; 63
    4db4:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    4db6:	df 91       	pop	r29
    4db8:	cf 91       	pop	r28
    4dba:	1f 91       	pop	r17
    4dbc:	08 95       	ret

00004dbe <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    4dbe:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    4dc0:	8f b7       	in	r24, 0x3f	; 63
    4dc2:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    4dc4:	8f bf       	out	0x3f, r24	; 63
    4dc6:	22 81       	ldd	r18, Z+2	; 0x02
    4dc8:	33 81       	ldd	r19, Z+3	; 0x03
    4dca:	84 81       	ldd	r24, Z+4	; 0x04
    4dcc:	95 81       	ldd	r25, Z+5	; 0x05
    4dce:	28 1b       	sub	r18, r24
    4dd0:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    4dd2:	c9 01       	movw	r24, r18
    4dd4:	08 95       	ret

00004dd6 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    4dd6:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    4dd8:	8f b7       	in	r24, 0x3f	; 63
    4dda:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    4ddc:	15 82       	std	Z+5, r1	; 0x05
    4dde:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    4de0:	8f bf       	out	0x3f, r24	; 63
}
    4de2:	08 95       	ret

00004de4 <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
    4de4:	aa e7       	ldi	r26, 0x7A	; 122
    4de6:	b0 e0       	ldi	r27, 0x00	; 0
    4de8:	8c 91       	ld	r24, X
    4dea:	80 68       	ori	r24, 0x80	; 128
    4dec:	8c 93       	st	X, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
    4dee:	8c 91       	ld	r24, X
    4df0:	8f 7d       	andi	r24, 0xDF	; 223
    4df2:	8c 93       	st	X, r24
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    4df4:	8c 91       	ld	r24, X
    4df6:	88 7f       	andi	r24, 0xF8	; 248
    4df8:	86 60       	ori	r24, 0x06	; 6
    4dfa:	8c 93       	st	X, r24
}

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    4dfc:	ec e7       	ldi	r30, 0x7C	; 124
    4dfe:	f0 e0       	ldi	r31, 0x00	; 0
    4e00:	80 81       	ld	r24, Z
    4e02:	8f 73       	andi	r24, 0x3F	; 63
    4e04:	80 64       	ori	r24, 0x40	; 64
    4e06:	80 83       	st	Z, r24
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
	cbi(ADCSR, ADFR);				// default to single sample convert mode
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
	a2dSetReference(ADC_REFERENCE);	// set default reference
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
    4e08:	80 81       	ld	r24, Z
    4e0a:	8f 7d       	andi	r24, 0xDF	; 223
    4e0c:	80 83       	st	Z, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
    4e0e:	8c 91       	ld	r24, X
    4e10:	88 60       	ori	r24, 0x08	; 8
    4e12:	8c 93       	st	X, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
    4e14:	10 92 c7 12 	sts	0x12C7, r1
	sei();							// turn on interrupts (if not already on)
    4e18:	78 94       	sei
}
    4e1a:	08 95       	ret

00004e1c <a2dOff>:

// turn off a2d converter
void a2dOff(void)
{
	cbi(ADCSR, ADIE);				// disable ADC interrupts
    4e1c:	ea e7       	ldi	r30, 0x7A	; 122
    4e1e:	f0 e0       	ldi	r31, 0x00	; 0
    4e20:	80 81       	ld	r24, Z
    4e22:	87 7f       	andi	r24, 0xF7	; 247
    4e24:	80 83       	st	Z, r24
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
    4e26:	80 81       	ld	r24, Z
    4e28:	8f 77       	andi	r24, 0x7F	; 127
    4e2a:	80 83       	st	Z, r24
}
    4e2c:	08 95       	ret

00004e2e <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    4e2e:	ea e7       	ldi	r30, 0x7A	; 122
    4e30:	f0 e0       	ldi	r31, 0x00	; 0
    4e32:	90 81       	ld	r25, Z
    4e34:	98 7f       	andi	r25, 0xF8	; 248
    4e36:	98 2b       	or	r25, r24
    4e38:	90 83       	st	Z, r25
}
    4e3a:	08 95       	ret

00004e3c <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    4e3c:	ec e7       	ldi	r30, 0x7C	; 124
    4e3e:	f0 e0       	ldi	r31, 0x00	; 0
    4e40:	90 81       	ld	r25, Z
    4e42:	82 95       	swap	r24
    4e44:	88 0f       	add	r24, r24
    4e46:	88 0f       	add	r24, r24
    4e48:	80 7c       	andi	r24, 0xC0	; 192
    4e4a:	9f 73       	andi	r25, 0x3F	; 63
    4e4c:	98 2b       	or	r25, r24
    4e4e:	90 83       	st	Z, r25
}
    4e50:	08 95       	ret

00004e52 <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
    4e52:	ec e7       	ldi	r30, 0x7C	; 124
    4e54:	f0 e0       	ldi	r31, 0x00	; 0
    4e56:	90 81       	ld	r25, Z
    4e58:	8f 71       	andi	r24, 0x1F	; 31
    4e5a:	90 7e       	andi	r25, 0xE0	; 224
    4e5c:	89 2b       	or	r24, r25
    4e5e:	80 83       	st	Z, r24
}
    4e60:	08 95       	ret

00004e62 <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
    4e62:	ea e7       	ldi	r30, 0x7A	; 122
    4e64:	f0 e0       	ldi	r31, 0x00	; 0
    4e66:	80 81       	ld	r24, Z
    4e68:	80 61       	ori	r24, 0x10	; 16
    4e6a:	80 83       	st	Z, r24
	sbi(ADCSR, ADSC);	// start conversion
    4e6c:	80 81       	ld	r24, Z
    4e6e:	80 64       	ori	r24, 0x40	; 64
    4e70:	80 83       	st	Z, r24
}
    4e72:	08 95       	ret

00004e74 <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
    4e74:	80 91 7a 00 	lds	r24, 0x007A
}
    4e78:	80 74       	andi	r24, 0x40	; 64
    4e7a:	08 95       	ret

00004e7c <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
    4e7c:	98 2f       	mov	r25, r24
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
    4e7e:	10 92 c7 12 	sts	0x12C7, r1

if (ch >= 8)
    4e82:	88 30       	cpi	r24, 0x08	; 8
    4e84:	20 f0       	brcs	.+8      	; 0x4e8e <a2dConvert10bit+0x12>
    ADCSRB |= _BV(MUX5);
    4e86:	80 91 7b 00 	lds	r24, 0x007B
    4e8a:	88 60       	ori	r24, 0x08	; 8
    4e8c:	03 c0       	rjmp	.+6      	; 0x4e94 <a2dConvert10bit+0x18>
else
    ADCSRB &= ~_BV(MUX5);
    4e8e:	80 91 7b 00 	lds	r24, 0x007B
    4e92:	87 7f       	andi	r24, 0xF7	; 247
    4e94:	80 93 7b 00 	sts	0x007B, r24

   outb(ADMUX, (inb(ADMUX) & ~7) | (ch & 7));   // set channel
    4e98:	80 91 7c 00 	lds	r24, 0x007C
    4e9c:	97 70       	andi	r25, 0x07	; 7
    4e9e:	88 7f       	andi	r24, 0xF8	; 248
    4ea0:	89 2b       	or	r24, r25
    4ea2:	80 93 7c 00 	sts	0x007C, r24

	//outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
    4ea6:	80 91 7a 00 	lds	r24, 0x007A
    4eaa:	80 61       	ori	r24, 0x10	; 16
    4eac:	80 93 7a 00 	sts	0x007A, r24
	sbi(ADCSR, ADSC);						// start conversion
    4eb0:	80 91 7a 00 	lds	r24, 0x007A
    4eb4:	80 64       	ori	r24, 0x40	; 64
    4eb6:	80 93 7a 00 	sts	0x007A, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
    4eba:	80 91 7a 00 	lds	r24, 0x007A
    4ebe:	86 fd       	sbrc	r24, 6
    4ec0:	fc cf       	rjmp	.-8      	; 0x4eba <a2dConvert10bit+0x3e>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	//return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits) //old version
	return ADC;//new version code
    4ec2:	20 91 78 00 	lds	r18, 0x0078
    4ec6:	30 91 79 00 	lds	r19, 0x0079
}
    4eca:	c9 01       	movw	r24, r18
    4ecc:	08 95       	ret

00004ece <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
    4ece:	0e 94 3e 27 	call	0x4e7c	; 0x4e7c <a2dConvert10bit>
    4ed2:	96 95       	lsr	r25
    4ed4:	87 95       	ror	r24
    4ed6:	96 95       	lsr	r25
    4ed8:	87 95       	ror	r24
}
    4eda:	08 95       	ret

00004edc <__vector_29>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
    4edc:	1f 92       	push	r1
    4ede:	0f 92       	push	r0
    4ee0:	0f b6       	in	r0, 0x3f	; 63
    4ee2:	0f 92       	push	r0
    4ee4:	11 24       	eor	r1, r1
    4ee6:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
    4ee8:	8f ef       	ldi	r24, 0xFF	; 255
    4eea:	80 93 c7 12 	sts	0x12C7, r24
}
    4eee:	8f 91       	pop	r24
    4ef0:	0f 90       	pop	r0
    4ef2:	0f be       	out	0x3f, r0	; 63
    4ef4:	0f 90       	pop	r0
    4ef6:	1f 90       	pop	r1
    4ef8:	18 95       	reti

00004efa <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    4efa:	90 93 fe 11 	sts	0x11FE, r25
    4efe:	80 93 fd 11 	sts	0x11FD, r24
}
    4f02:	08 95       	ret

00004f04 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    4f04:	1f 93       	push	r17
    4f06:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
    4f08:	8a 30       	cpi	r24, 0x0A	; 10
    4f0a:	31 f4       	brne	.+12     	; 0x4f18 <rprintfChar+0x14>
		rputchar('\r');
    4f0c:	e0 91 fd 11 	lds	r30, 0x11FD
    4f10:	f0 91 fe 11 	lds	r31, 0x11FE
    4f14:	8d e0       	ldi	r24, 0x0D	; 13
    4f16:	09 95       	icall
	// send character
	rputchar(c);
    4f18:	e0 91 fd 11 	lds	r30, 0x11FD
    4f1c:	f0 91 fe 11 	lds	r31, 0x11FE
    4f20:	81 2f       	mov	r24, r17
    4f22:	09 95       	icall
}
    4f24:	1f 91       	pop	r17
    4f26:	08 95       	ret

00004f28 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    4f28:	cf 93       	push	r28
    4f2a:	df 93       	push	r29
    4f2c:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    4f2e:	00 97       	sbiw	r24, 0x00	; 0
    4f30:	21 f4       	brne	.+8      	; 0x4f3a <rprintfStr+0x12>
    4f32:	06 c0       	rjmp	.+12     	; 0x4f40 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    4f34:	21 96       	adiw	r28, 0x01	; 1
    4f36:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    4f3a:	88 81       	ld	r24, Y
    4f3c:	88 23       	and	r24, r24
    4f3e:	d1 f7       	brne	.-12     	; 0x4f34 <rprintfStr+0xc>
		rprintfChar(*str++);
}
    4f40:	df 91       	pop	r29
    4f42:	cf 91       	pop	r28
    4f44:	08 95       	ret

00004f46 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    4f46:	ef 92       	push	r14
    4f48:	ff 92       	push	r15
    4f4a:	0f 93       	push	r16
    4f4c:	1f 93       	push	r17
    4f4e:	cf 93       	push	r28
    4f50:	df 93       	push	r29
    4f52:	8c 01       	movw	r16, r24
    4f54:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
    4f56:	00 97       	sbiw	r24, 0x00	; 0
    4f58:	e9 f0       	breq	.+58     	; 0x4f94 <rprintfStrLen+0x4e>
    4f5a:	20 e0       	ldi	r18, 0x00	; 0
    4f5c:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    4f5e:	26 17       	cp	r18, r22
    4f60:	37 07       	cpc	r19, r23
    4f62:	38 f4       	brcc	.+14     	; 0x4f72 <rprintfStrLen+0x2c>
    4f64:	f8 01       	movw	r30, r16
    4f66:	81 91       	ld	r24, Z+
    4f68:	8f 01       	movw	r16, r30
    4f6a:	2f 5f       	subi	r18, 0xFF	; 255
    4f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f6e:	88 23       	and	r24, r24
    4f70:	b1 f7       	brne	.-20     	; 0x4f5e <rprintfStrLen+0x18>
    4f72:	c0 e0       	ldi	r28, 0x00	; 0
    4f74:	d0 e0       	ldi	r29, 0x00	; 0
    4f76:	0b c0       	rjmp	.+22     	; 0x4f8e <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    4f78:	f8 01       	movw	r30, r16
    4f7a:	80 81       	ld	r24, Z
    4f7c:	88 23       	and	r24, r24
    4f7e:	19 f0       	breq	.+6      	; 0x4f86 <rprintfStrLen+0x40>
			rprintfChar(*str++);
    4f80:	0f 5f       	subi	r16, 0xFF	; 255
    4f82:	1f 4f       	sbci	r17, 0xFF	; 255
    4f84:	01 c0       	rjmp	.+2      	; 0x4f88 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
    4f86:	80 e2       	ldi	r24, 0x20	; 32
    4f88:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    4f8c:	21 96       	adiw	r28, 0x01	; 1
    4f8e:	ce 15       	cp	r28, r14
    4f90:	df 05       	cpc	r29, r15
    4f92:	90 f3       	brcs	.-28     	; 0x4f78 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	1f 91       	pop	r17
    4f9a:	0f 91       	pop	r16
    4f9c:	ff 90       	pop	r15
    4f9e:	ef 90       	pop	r14
    4fa0:	08 95       	ret

00004fa2 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    4fa2:	cf 93       	push	r28
    4fa4:	df 93       	push	r29
    4fa6:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    4fa8:	00 97       	sbiw	r24, 0x00	; 0
    4faa:	19 f4       	brne	.+6      	; 0x4fb2 <rprintfProgStr+0x10>
    4fac:	07 c0       	rjmp	.+14     	; 0x4fbc <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    4fae:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
    4fb2:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    4fb4:	21 96       	adiw	r28, 0x01	; 1
    4fb6:	84 91       	lpm	r24, Z+
    4fb8:	88 23       	and	r24, r24
    4fba:	c9 f7       	brne	.-14     	; 0x4fae <rprintfProgStr+0xc>
		rprintfChar(c);
}
    4fbc:	df 91       	pop	r29
    4fbe:	cf 91       	pop	r28
    4fc0:	08 95       	ret

00004fc2 <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    4fc2:	8a e0       	ldi	r24, 0x0A	; 10
    4fc4:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
}
    4fc8:	08 95       	ret

00004fca <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    4fca:	e8 2f       	mov	r30, r24
    4fcc:	f0 e0       	ldi	r31, 0x00	; 0
    4fce:	ef 70       	andi	r30, 0x0F	; 15
    4fd0:	f0 70       	andi	r31, 0x00	; 0
    4fd2:	e5 52       	subi	r30, 0x25	; 37
    4fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    4fd6:	e4 91       	lpm	r30, Z+
    4fd8:	8e 2f       	mov	r24, r30
    4fda:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
}
    4fde:	08 95       	ret

00004fe0 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    4fe0:	1f 93       	push	r17
    4fe2:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
    4fe4:	82 95       	swap	r24
    4fe6:	8f 70       	andi	r24, 0x0F	; 15
    4fe8:	0e 94 e5 27 	call	0x4fca	; 0x4fca <rprintfu04>
	rprintfu04(data);
    4fec:	81 2f       	mov	r24, r17
    4fee:	0e 94 e5 27 	call	0x4fca	; 0x4fca <rprintfu04>
}
    4ff2:	1f 91       	pop	r17
    4ff4:	08 95       	ret

00004ff6 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    4ff6:	1f 93       	push	r17
    4ff8:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
    4ffa:	89 2f       	mov	r24, r25
    4ffc:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <rprintfu08>
	rprintfu08(data);
    5000:	81 2f       	mov	r24, r17
    5002:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <rprintfu08>
}
    5006:	1f 91       	pop	r17
    5008:	08 95       	ret

0000500a <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    500a:	ef 92       	push	r14
    500c:	ff 92       	push	r15
    500e:	0f 93       	push	r16
    5010:	1f 93       	push	r17
    5012:	7b 01       	movw	r14, r22
    5014:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
    5016:	c8 01       	movw	r24, r16
    5018:	aa 27       	eor	r26, r26
    501a:	bb 27       	eor	r27, r27
    501c:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <rprintfu16>
	rprintfu16(data);
    5020:	c7 01       	movw	r24, r14
    5022:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <rprintfu16>
}
    5026:	1f 91       	pop	r17
    5028:	0f 91       	pop	r16
    502a:	ff 90       	pop	r15
    502c:	ef 90       	pop	r14
    502e:	08 95       	ret

00005030 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    5030:	2f 92       	push	r2
    5032:	3f 92       	push	r3
    5034:	4f 92       	push	r4
    5036:	5f 92       	push	r5
    5038:	6f 92       	push	r6
    503a:	7f 92       	push	r7
    503c:	8f 92       	push	r8
    503e:	9f 92       	push	r9
    5040:	af 92       	push	r10
    5042:	bf 92       	push	r11
    5044:	cf 92       	push	r12
    5046:	df 92       	push	r13
    5048:	ef 92       	push	r14
    504a:	ff 92       	push	r15
    504c:	0f 93       	push	r16
    504e:	1f 93       	push	r17
    5050:	df 93       	push	r29
    5052:	cf 93       	push	r28
    5054:	cd b7       	in	r28, 0x3d	; 61
    5056:	de b7       	in	r29, 0x3e	; 62
    5058:	a3 97       	sbiw	r28, 0x23	; 35
    505a:	0f b6       	in	r0, 0x3f	; 63
    505c:	f8 94       	cli
    505e:	de bf       	out	0x3e, r29	; 62
    5060:	0f be       	out	0x3f, r0	; 63
    5062:	cd bf       	out	0x3d, r28	; 61
    5064:	6a a3       	std	Y+34, r22	; 0x22
    5066:	24 2e       	mov	r2, r20
    5068:	2b a3       	std	Y+35, r18	; 0x23
    506a:	37 01       	movw	r6, r14
    506c:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    506e:	44 23       	and	r20, r20
    5070:	51 f0       	breq	.+20     	; 0x5086 <rprintfNum+0x56>
    5072:	17 ff       	sbrs	r17, 7
    5074:	08 c0       	rjmp	.+16     	; 0x5086 <rprintfNum+0x56>
	{
		x = -n;
    5076:	ee 24       	eor	r14, r14
    5078:	ff 24       	eor	r15, r15
    507a:	87 01       	movw	r16, r14
    507c:	e6 18       	sub	r14, r6
    507e:	f7 08       	sbc	r15, r7
    5080:	08 09       	sbc	r16, r8
    5082:	19 09       	sbc	r17, r9
    5084:	02 c0       	rjmp	.+4      	; 0x508a <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
    5086:	84 01       	movw	r16, r8
    5088:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    508a:	2a a1       	ldd	r18, Y+34	; 0x22
    508c:	21 50       	subi	r18, 0x01	; 1
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	21 10       	cpse	r2, r1
    5092:	91 e0       	ldi	r25, 0x01	; 1
    5094:	29 1b       	sub	r18, r25
    5096:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
    5098:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    509a:	a8 2e       	mov	r10, r24
    509c:	bb 24       	eor	r11, r11
    509e:	cc 24       	eor	r12, r12
    50a0:	dd 24       	eor	r13, r13
    50a2:	c8 01       	movw	r24, r16
    50a4:	b7 01       	movw	r22, r14
    50a6:	a6 01       	movw	r20, r12
    50a8:	95 01       	movw	r18, r10
    50aa:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__udivmodsi4>
    50ae:	fb 01       	movw	r30, r22
    50b0:	ef 70       	andi	r30, 0x0F	; 15
    50b2:	f0 70       	andi	r31, 0x00	; 0
    50b4:	e5 52       	subi	r30, 0x25	; 37
    50b6:	fe 4f       	sbci	r31, 0xFE	; 254
    50b8:	64 91       	lpm	r22, Z+
    50ba:	6f 8f       	std	Y+31, r22	; 0x1f
    50bc:	c8 01       	movw	r24, r16
    50be:	b7 01       	movw	r22, r14
    50c0:	a6 01       	movw	r20, r12
    50c2:	95 01       	movw	r18, r10
    50c4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__udivmodsi4>
    50c8:	c9 01       	movw	r24, r18
    50ca:	da 01       	movw	r26, r20
    50cc:	7c 01       	movw	r14, r24
    50ce:	8d 01       	movw	r16, r26
    50d0:	9e e1       	ldi	r25, 0x1E	; 30
    50d2:	49 2e       	mov	r4, r25
    50d4:	51 2c       	mov	r5, r1
    50d6:	4c 0e       	add	r4, r28
    50d8:	5d 1e       	adc	r5, r29
    50da:	39 a0       	ldd	r3, Y+33	; 0x21
    50dc:	25 c0       	rjmp	.+74     	; 0x5128 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    50de:	e1 14       	cp	r14, r1
    50e0:	f1 04       	cpc	r15, r1
    50e2:	01 05       	cpc	r16, r1
    50e4:	11 05       	cpc	r17, r1
    50e6:	c9 f0       	breq	.+50     	; 0x511a <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    50e8:	c8 01       	movw	r24, r16
    50ea:	b7 01       	movw	r22, r14
    50ec:	a6 01       	movw	r20, r12
    50ee:	95 01       	movw	r18, r10
    50f0:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__udivmodsi4>
    50f4:	fb 01       	movw	r30, r22
    50f6:	ef 70       	andi	r30, 0x0F	; 15
    50f8:	f0 70       	andi	r31, 0x00	; 0
    50fa:	e5 52       	subi	r30, 0x25	; 37
    50fc:	fe 4f       	sbci	r31, 0xFE	; 254
    50fe:	64 91       	lpm	r22, Z+
    5100:	f2 01       	movw	r30, r4
    5102:	60 83       	st	Z, r22
    5104:	c8 01       	movw	r24, r16
    5106:	b7 01       	movw	r22, r14
    5108:	a6 01       	movw	r20, r12
    510a:	95 01       	movw	r18, r10
    510c:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__udivmodsi4>
    5110:	c9 01       	movw	r24, r18
    5112:	da 01       	movw	r26, r20
    5114:	7c 01       	movw	r14, r24
    5116:	8d 01       	movw	r16, r26
    5118:	03 c0       	rjmp	.+6      	; 0x5120 <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    511a:	2b a1       	ldd	r18, Y+35	; 0x23
    511c:	f2 01       	movw	r30, r4
    511e:	20 83       	st	Z, r18
    5120:	3a 94       	dec	r3
    5122:	08 94       	sec
    5124:	41 08       	sbc	r4, r1
    5126:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    5128:	33 20       	and	r3, r3
    512a:	c9 f6       	brne	.-78     	; 0x50de <rprintfNum+0xae>
    512c:	ce 01       	movw	r24, r28
    512e:	4f 96       	adiw	r24, 0x1f	; 31
    5130:	8c 01       	movw	r16, r24
    5132:	e9 a1       	ldd	r30, Y+33	; 0x21
    5134:	0e 1b       	sub	r16, r30
    5136:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    5138:	22 20       	and	r2, r2
    513a:	f1 f0       	breq	.+60     	; 0x5178 <rprintfNum+0x148>
	{
		if(n < 0)
    513c:	97 fe       	sbrs	r9, 7
    513e:	05 c0       	rjmp	.+10     	; 0x514a <rprintfNum+0x11a>
		{
   			*--p = '-';
    5140:	8d e2       	ldi	r24, 0x2D	; 45
    5142:	f8 01       	movw	r30, r16
    5144:	82 93       	st	-Z, r24
    5146:	8f 01       	movw	r16, r30
    5148:	17 c0       	rjmp	.+46     	; 0x5178 <rprintfNum+0x148>
    514a:	c8 01       	movw	r24, r16
    514c:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    514e:	61 14       	cp	r6, r1
    5150:	71 04       	cpc	r7, r1
    5152:	81 04       	cpc	r8, r1
    5154:	91 04       	cpc	r9, r1
    5156:	19 f0       	breq	.+6      	; 0x515e <rprintfNum+0x12e>
		{
	   		*--p = '+';
    5158:	8c 01       	movw	r16, r24
    515a:	8b e2       	ldi	r24, 0x2B	; 43
    515c:	02 c0       	rjmp	.+4      	; 0x5162 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    515e:	8c 01       	movw	r16, r24
    5160:	80 e2       	ldi	r24, 0x20	; 32
    5162:	f8 01       	movw	r30, r16
    5164:	80 83       	st	Z, r24
    5166:	08 c0       	rjmp	.+16     	; 0x5178 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    5168:	f8 01       	movw	r30, r16
    516a:	81 91       	ld	r24, Z+
    516c:	8f 01       	movw	r16, r30
    516e:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
    5172:	fa a1       	ldd	r31, Y+34	; 0x22
    5174:	f1 50       	subi	r31, 0x01	; 1
    5176:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    5178:	2a a1       	ldd	r18, Y+34	; 0x22
    517a:	22 23       	and	r18, r18
    517c:	a9 f7       	brne	.-22     	; 0x5168 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    517e:	a3 96       	adiw	r28, 0x23	; 35
    5180:	0f b6       	in	r0, 0x3f	; 63
    5182:	f8 94       	cli
    5184:	de bf       	out	0x3e, r29	; 62
    5186:	0f be       	out	0x3f, r0	; 63
    5188:	cd bf       	out	0x3d, r28	; 61
    518a:	cf 91       	pop	r28
    518c:	df 91       	pop	r29
    518e:	1f 91       	pop	r17
    5190:	0f 91       	pop	r16
    5192:	ff 90       	pop	r15
    5194:	ef 90       	pop	r14
    5196:	df 90       	pop	r13
    5198:	cf 90       	pop	r12
    519a:	bf 90       	pop	r11
    519c:	af 90       	pop	r10
    519e:	9f 90       	pop	r9
    51a0:	8f 90       	pop	r8
    51a2:	7f 90       	pop	r7
    51a4:	6f 90       	pop	r6
    51a6:	5f 90       	pop	r5
    51a8:	4f 90       	pop	r4
    51aa:	3f 90       	pop	r3
    51ac:	2f 90       	pop	r2
    51ae:	08 95       	ret

000051b0 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    51b0:	4f 92       	push	r4
    51b2:	5f 92       	push	r5
    51b4:	6f 92       	push	r6
    51b6:	7f 92       	push	r7
    51b8:	8f 92       	push	r8
    51ba:	9f 92       	push	r9
    51bc:	af 92       	push	r10
    51be:	bf 92       	push	r11
    51c0:	cf 92       	push	r12
    51c2:	df 92       	push	r13
    51c4:	ef 92       	push	r14
    51c6:	ff 92       	push	r15
    51c8:	0f 93       	push	r16
    51ca:	1f 93       	push	r17
    51cc:	cf 93       	push	r28
    51ce:	df 93       	push	r29
    51d0:	48 2e       	mov	r4, r24
    51d2:	5a 01       	movw	r10, r20
    51d4:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
    51d6:	cb 01       	movw	r24, r22
    51d8:	ba 01       	movw	r22, r20
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	40 e0       	ldi	r20, 0x00	; 0
    51e0:	50 e0       	ldi	r21, 0x00	; 0
    51e2:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__gesf2>
    51e6:	18 16       	cp	r1, r24
    51e8:	1c f4       	brge	.+6      	; 0x51f0 <rprintfFloat+0x40>
    51ea:	35 01       	movw	r6, r10
    51ec:	46 01       	movw	r8, r12
    51ee:	06 c0       	rjmp	.+12     	; 0x51fc <rprintfFloat+0x4c>
    51f0:	35 01       	movw	r6, r10
    51f2:	46 01       	movw	r8, r12
    51f4:	97 fa       	bst	r9, 7
    51f6:	90 94       	com	r9
    51f8:	97 f8       	bld	r9, 7
    51fa:	90 94       	com	r9
    51fc:	0f 2e       	mov	r0, r31
    51fe:	f0 e0       	ldi	r31, 0x00	; 0
    5200:	ef 2e       	mov	r14, r31
    5202:	f0 e0       	ldi	r31, 0x00	; 0
    5204:	ff 2e       	mov	r15, r31
    5206:	f0 e8       	ldi	r31, 0x80	; 128
    5208:	0f 2f       	mov	r16, r31
    520a:	ff e3       	ldi	r31, 0x3F	; 63
    520c:	1f 2f       	mov	r17, r31
    520e:	f0 2d       	mov	r31, r0
    5210:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
    5212:	c4 01       	movw	r24, r8
    5214:	b3 01       	movw	r22, r6
    5216:	a8 01       	movw	r20, r16
    5218:	97 01       	movw	r18, r14
    521a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    521e:	20 e0       	ldi	r18, 0x00	; 0
    5220:	30 e0       	ldi	r19, 0x00	; 0
    5222:	40 e2       	ldi	r20, 0x20	; 32
    5224:	51 e4       	ldi	r21, 0x41	; 65
    5226:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    522a:	87 fd       	sbrc	r24, 7
    522c:	0e c0       	rjmp	.+28     	; 0x524a <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
    522e:	c8 01       	movw	r24, r16
    5230:	b7 01       	movw	r22, r14
    5232:	20 e0       	ldi	r18, 0x00	; 0
    5234:	30 e0       	ldi	r19, 0x00	; 0
    5236:	40 e2       	ldi	r20, 0x20	; 32
    5238:	51 e4       	ldi	r21, 0x41	; 65
    523a:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    523e:	7b 01       	movw	r14, r22
    5240:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    5242:	53 94       	inc	r5
    5244:	8f e0       	ldi	r24, 0x0F	; 15
    5246:	58 16       	cp	r5, r24
    5248:	21 f7       	brne	.-56     	; 0x5212 <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    524a:	c6 01       	movw	r24, r12
    524c:	b5 01       	movw	r22, r10
    524e:	20 e0       	ldi	r18, 0x00	; 0
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	40 e0       	ldi	r20, 0x00	; 0
    5254:	50 e0       	ldi	r21, 0x00	; 0
    5256:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    525a:	88 23       	and	r24, r24
    525c:	14 f4       	brge	.+4      	; 0x5262 <rprintfFloat+0xb2>
		rprintfChar('-');
    525e:	8d e2       	ldi	r24, 0x2D	; 45
    5260:	01 c0       	rjmp	.+2      	; 0x5264 <rprintfFloat+0xb4>
	else
		rprintfChar('+');
    5262:	8b e2       	ldi	r24, 0x2B	; 43
    5264:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
    5268:	dd 24       	eor	r13, r13
    526a:	aa 24       	eor	r10, r10
    526c:	56 c0       	rjmp	.+172    	; 0x531a <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
    526e:	c4 01       	movw	r24, r8
    5270:	b3 01       	movw	r22, r6
    5272:	a8 01       	movw	r20, r16
    5274:	97 01       	movw	r18, r14
    5276:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    527a:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <__fixunssfsi>
    527e:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
    5280:	d6 2a       	or	r13, r22
    5282:	cd 2d       	mov	r28, r13
    5284:	d0 e0       	ldi	r29, 0x00	; 0
    5286:	cc 24       	eor	r12, r12
    5288:	dd 24       	eor	r13, r13
    528a:	c8 01       	movw	r24, r16
    528c:	b7 01       	movw	r22, r14
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	40 e8       	ldi	r20, 0x80	; 128
    5294:	5f e3       	ldi	r21, 0x3F	; 63
    5296:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    529a:	88 23       	and	r24, r24
    529c:	19 f4       	brne	.+6      	; 0x52a4 <rprintfFloat+0xf4>
    529e:	21 e0       	ldi	r18, 0x01	; 1
    52a0:	c2 2e       	mov	r12, r18
    52a2:	d1 2c       	mov	r13, r1
    52a4:	cc 29       	or	r28, r12
    52a6:	dd 29       	or	r29, r13
    52a8:	cd 2b       	or	r28, r29
    52aa:	39 f0       	breq	.+14     	; 0x52ba <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
    52ac:	8b 2d       	mov	r24, r11
    52ae:	80 5d       	subi	r24, 0xD0	; 208
    52b0:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
    52b4:	dd 24       	eor	r13, r13
    52b6:	da 94       	dec	r13
    52b8:	04 c0       	rjmp	.+8      	; 0x52c2 <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
    52ba:	80 e2       	ldi	r24, 0x20	; 32
    52bc:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
    52c0:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
    52c2:	c8 01       	movw	r24, r16
    52c4:	b7 01       	movw	r22, r14
    52c6:	20 e0       	ldi	r18, 0x00	; 0
    52c8:	30 e0       	ldi	r19, 0x00	; 0
    52ca:	40 e8       	ldi	r20, 0x80	; 128
    52cc:	5f e3       	ldi	r21, 0x3F	; 63
    52ce:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__cmpsf2>
    52d2:	88 23       	and	r24, r24
    52d4:	19 f4       	brne	.+6      	; 0x52dc <rprintfFloat+0x12c>
		{
			rprintfChar('.');
    52d6:	8e e2       	ldi	r24, 0x2E	; 46
    52d8:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
		}
		
		x -= (digit*place);
    52dc:	6b 2d       	mov	r22, r11
    52de:	70 e0       	ldi	r23, 0x00	; 0
    52e0:	88 27       	eor	r24, r24
    52e2:	77 fd       	sbrc	r23, 7
    52e4:	80 95       	com	r24
    52e6:	98 2f       	mov	r25, r24
    52e8:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__floatsisf>
    52ec:	a8 01       	movw	r20, r16
    52ee:	97 01       	movw	r18, r14
    52f0:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__mulsf3>
    52f4:	9b 01       	movw	r18, r22
    52f6:	ac 01       	movw	r20, r24
    52f8:	c4 01       	movw	r24, r8
    52fa:	b3 01       	movw	r22, r6
    52fc:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    5300:	3b 01       	movw	r6, r22
    5302:	4c 01       	movw	r8, r24
		place /= 10.0;
    5304:	c8 01       	movw	r24, r16
    5306:	b7 01       	movw	r22, r14
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	30 e0       	ldi	r19, 0x00	; 0
    530c:	40 e2       	ldi	r20, 0x20	; 32
    530e:	51 e4       	ldi	r21, 0x41	; 65
    5310:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__divsf3>
    5314:	7b 01       	movw	r14, r22
    5316:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    5318:	a3 94       	inc	r10
    531a:	a4 14       	cp	r10, r4
    531c:	08 f4       	brcc	.+2      	; 0x5320 <rprintfFloat+0x170>
    531e:	a7 cf       	rjmp	.-178    	; 0x526e <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    5320:	df 91       	pop	r29
    5322:	cf 91       	pop	r28
    5324:	1f 91       	pop	r17
    5326:	0f 91       	pop	r16
    5328:	ff 90       	pop	r15
    532a:	ef 90       	pop	r14
    532c:	df 90       	pop	r13
    532e:	cf 90       	pop	r12
    5330:	bf 90       	pop	r11
    5332:	af 90       	pop	r10
    5334:	9f 90       	pop	r9
    5336:	8f 90       	pop	r8
    5338:	7f 90       	pop	r7
    533a:	6f 90       	pop	r6
    533c:	5f 90       	pop	r5
    533e:	4f 90       	pop	r4
    5340:	08 95       	ret

00005342 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    5342:	7f 92       	push	r7
    5344:	8f 92       	push	r8
    5346:	9f 92       	push	r9
    5348:	af 92       	push	r10
    534a:	bf 92       	push	r11
    534c:	cf 92       	push	r12
    534e:	df 92       	push	r13
    5350:	ef 92       	push	r14
    5352:	ff 92       	push	r15
    5354:	0f 93       	push	r16
    5356:	1f 93       	push	r17
    5358:	df 93       	push	r29
    535a:	cf 93       	push	r28
    535c:	cd b7       	in	r28, 0x3d	; 61
    535e:	de b7       	in	r29, 0x3e	; 62
    5360:	78 88       	ldd	r7, Y+16	; 0x10
    5362:	c9 88       	ldd	r12, Y+17	; 0x11
    5364:	da 88       	ldd	r13, Y+18	; 0x12
    5366:	63 e1       	ldi	r22, 0x13	; 19
    5368:	e6 2e       	mov	r14, r22
    536a:	f1 2c       	mov	r15, r1
    536c:	ec 0e       	add	r14, r28
    536e:	fd 1e       	adc	r15, r29
    5370:	14 c0       	rjmp	.+40     	; 0x539a <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    5372:	88 23       	and	r24, r24
    5374:	81 f4       	brne	.+32     	; 0x5396 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	cf 91       	pop	r28
    537c:	df 91       	pop	r29
    537e:	1f 91       	pop	r17
    5380:	0f 91       	pop	r16
    5382:	ff 90       	pop	r15
    5384:	ef 90       	pop	r14
    5386:	df 90       	pop	r13
    5388:	cf 90       	pop	r12
    538a:	bf 90       	pop	r11
    538c:	af 90       	pop	r10
    538e:	9f 90       	pop	r9
    5390:	8f 90       	pop	r8
    5392:	7f 90       	pop	r7
    5394:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    5396:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
    539a:	96 01       	movw	r18, r12
    539c:	2f 5f       	subi	r18, 0xFF	; 255
    539e:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    53a0:	77 20       	and	r7, r7
    53a2:	21 f0       	breq	.+8      	; 0x53ac <rprintf1RamRom+0x6a>
    53a4:	f6 01       	movw	r30, r12
    53a6:	69 01       	movw	r12, r18
    53a8:	84 91       	lpm	r24, Z+
    53aa:	03 c0       	rjmp	.+6      	; 0x53b2 <rprintf1RamRom+0x70>
    53ac:	f6 01       	movw	r30, r12
    53ae:	80 81       	ld	r24, Z
    53b0:	69 01       	movw	r12, r18
    53b2:	85 32       	cpi	r24, 0x25	; 37
    53b4:	f1 f6       	brne	.-68     	; 0x5372 <rprintf1RamRom+0x30>
    53b6:	2f 5f       	subi	r18, 0xFF	; 255
    53b8:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    53ba:	77 20       	and	r7, r7
    53bc:	21 f0       	breq	.+8      	; 0x53c6 <rprintf1RamRom+0x84>
    53be:	f6 01       	movw	r30, r12
    53c0:	69 01       	movw	r12, r18
    53c2:	84 91       	lpm	r24, Z+
    53c4:	03 c0       	rjmp	.+6      	; 0x53cc <rprintf1RamRom+0x8a>
    53c6:	f6 01       	movw	r30, r12
    53c8:	80 81       	ld	r24, Z
    53ca:	69 01       	movw	r12, r18
    53cc:	84 36       	cpi	r24, 0x64	; 100
    53ce:	29 f0       	breq	.+10     	; 0x53da <rprintf1RamRom+0x98>
    53d0:	88 37       	cpi	r24, 0x78	; 120
    53d2:	81 f0       	breq	.+32     	; 0x53f4 <rprintf1RamRom+0xb2>
    53d4:	83 36       	cpi	r24, 0x63	; 99
    53d6:	f9 f6       	brne	.-66     	; 0x5396 <rprintf1RamRom+0x54>
    53d8:	06 c0       	rjmp	.+12     	; 0x53e6 <rprintf1RamRom+0xa4>
    53da:	00 e1       	ldi	r16, 0x10	; 16
    53dc:	17 e2       	ldi	r17, 0x27	; 39
    53de:	5a e0       	ldi	r21, 0x0A	; 10
    53e0:	a5 2e       	mov	r10, r21
    53e2:	b1 2c       	mov	r11, r1
    53e4:	0c c0       	rjmp	.+24     	; 0x53fe <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    53e6:	f7 01       	movw	r30, r14
    53e8:	80 81       	ld	r24, Z
    53ea:	22 e0       	ldi	r18, 0x02	; 2
    53ec:	30 e0       	ldi	r19, 0x00	; 0
    53ee:	e2 0e       	add	r14, r18
    53f0:	f3 1e       	adc	r15, r19
    53f2:	d1 cf       	rjmp	.-94     	; 0x5396 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    53f4:	00 e0       	ldi	r16, 0x00	; 0
    53f6:	10 e1       	ldi	r17, 0x10	; 16
    53f8:	40 e1       	ldi	r20, 0x10	; 16
    53fa:	a4 2e       	mov	r10, r20
    53fc:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    53fe:	32 e0       	ldi	r19, 0x02	; 2
    5400:	83 2e       	mov	r8, r19
    5402:	91 2c       	mov	r9, r1
    5404:	8e 0c       	add	r8, r14
    5406:	9f 1c       	adc	r9, r15
    5408:	f7 01       	movw	r30, r14
    540a:	e0 80       	ld	r14, Z
    540c:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    540e:	84 36       	cpi	r24, 0x64	; 100
    5410:	b1 f4       	brne	.+44     	; 0x543e <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    5412:	f7 fe       	sbrs	r15, 7
    5414:	11 c0       	rjmp	.+34     	; 0x5438 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    5416:	f0 94       	com	r15
    5418:	e1 94       	neg	r14
    541a:	f1 08       	sbc	r15, r1
    541c:	f3 94       	inc	r15
					rprintfChar('-');
    541e:	8d e2       	ldi	r24, 0x2D	; 45
    5420:	0e 94 82 27 	call	0x4f04	; 0x4f04 <rprintfChar>
    5424:	09 c0       	rjmp	.+18     	; 0x5438 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    5426:	c8 01       	movw	r24, r16
    5428:	6a e0       	ldi	r22, 0x0A	; 10
    542a:	70 e0       	ldi	r23, 0x00	; 0
    542c:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__udivmodhi4>
    5430:	8b 01       	movw	r16, r22
    5432:	62 30       	cpi	r22, 0x02	; 2
    5434:	71 05       	cpc	r23, r1
    5436:	18 f0       	brcs	.+6      	; 0x543e <rprintf1RamRom+0xfc>
    5438:	e0 16       	cp	r14, r16
    543a:	f1 06       	cpc	r15, r17
    543c:	a0 f3       	brcs	.-24     	; 0x5426 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    543e:	c7 01       	movw	r24, r14
    5440:	b8 01       	movw	r22, r16
    5442:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__udivmodhi4>
    5446:	86 2f       	mov	r24, r22
    5448:	0e 94 e5 27 	call	0x4fca	; 0x4fca <rprintfu04>
				u_val %= div_val;
    544c:	c7 01       	movw	r24, r14
    544e:	b8 01       	movw	r22, r16
    5450:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__udivmodhi4>
    5454:	7c 01       	movw	r14, r24
				div_val /= base;
    5456:	c8 01       	movw	r24, r16
    5458:	b5 01       	movw	r22, r10
    545a:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__udivmodhi4>
    545e:	8b 01       	movw	r16, r22
			} while (div_val);
    5460:	61 15       	cp	r22, r1
    5462:	71 05       	cpc	r23, r1
    5464:	61 f7       	brne	.-40     	; 0x543e <rprintf1RamRom+0xfc>
    5466:	74 01       	movw	r14, r8
    5468:	98 cf       	rjmp	.-208    	; 0x539a <rprintf1RamRom+0x58>

0000546a <i2cSetBitrate>:
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		cbi(TWSR, TWPS0);
    546a:	20 91 b9 00 	lds	r18, 0x00B9
    546e:	2e 7f       	andi	r18, 0xFE	; 254
    5470:	20 93 b9 00 	sts	0x00B9, r18
		cbi(TWSR, TWPS1);
    5474:	20 91 b9 00 	lds	r18, 0x00B9
    5478:	2d 7f       	andi	r18, 0xFD	; 253
    547a:	20 93 b9 00 	sts	0x00B9, r18
	#endif
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
    547e:	9c 01       	movw	r18, r24
    5480:	40 e0       	ldi	r20, 0x00	; 0
    5482:	50 e0       	ldi	r21, 0x00	; 0
    5484:	60 e8       	ldi	r22, 0x80	; 128
    5486:	7e e3       	ldi	r23, 0x3E	; 62
    5488:	80 e0       	ldi	r24, 0x00	; 0
    548a:	90 e0       	ldi	r25, 0x00	; 0
    548c:	0e 94 19 31 	call	0x6232	; 0x6232 <__divmodsi4>
	if(bitrate_div >= 16)
    5490:	20 31       	cpi	r18, 0x10	; 16
    5492:	30 f0       	brcs	.+12     	; 0x54a0 <i2cSetBitrate+0x36>
		bitrate_div = (bitrate_div-16)/2;
    5494:	82 2f       	mov	r24, r18
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	40 97       	sbiw	r24, 0x10	; 16
    549a:	95 95       	asr	r25
    549c:	87 95       	ror	r24
    549e:	28 2f       	mov	r18, r24
	outb(TWBR, bitrate_div);
    54a0:	20 93 b8 00 	sts	0x00B8, r18
}
    54a4:	08 95       	ret

000054a6 <i2cInit>:

// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	sbi(PORTD, 0);	// i2c SCL on 640
    54a6:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, 1);	// i2c SDA on 640
    54a8:	59 9a       	sbi	0x0b, 1	; 11

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
    54aa:	10 92 46 12 	sts	0x1246, r1
    54ae:	10 92 45 12 	sts	0x1245, r1
	i2cSlaveTransmit = 0;
    54b2:	10 92 48 12 	sts	0x1248, r1
    54b6:	10 92 47 12 	sts	0x1247, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
    54ba:	84 e6       	ldi	r24, 0x64	; 100
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	0e 94 35 2a 	call	0x546a	; 0x546a <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
    54c2:	ec eb       	ldi	r30, 0xBC	; 188
    54c4:	f0 e0       	ldi	r31, 0x00	; 0
    54c6:	80 81       	ld	r24, Z
    54c8:	84 60       	ori	r24, 0x04	; 4
    54ca:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    54cc:	10 92 ff 11 	sts	0x11FF, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
    54d0:	80 81       	ld	r24, Z
    54d2:	81 60       	ori	r24, 0x01	; 1
    54d4:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
    54d6:	80 81       	ld	r24, Z
    54d8:	80 64       	ori	r24, 0x40	; 64
    54da:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    54dc:	78 94       	sei
}
    54de:	08 95       	ret

000054e0 <i2cSetLocalDeviceAddr>:
}

void i2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	// set local device address (used in slave mode only)
	outb(TWAR, ((deviceAddr&0xFE) | (genCallEn?1:0)) );
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	61 11       	cpse	r22, r1
    54e4:	91 e0       	ldi	r25, 0x01	; 1
    54e6:	8e 7f       	andi	r24, 0xFE	; 254
    54e8:	98 2b       	or	r25, r24
    54ea:	90 93 ba 00 	sts	0x00BA, r25
}
    54ee:	08 95       	ret

000054f0 <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* recieveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
    54f0:	90 93 46 12 	sts	0x1246, r25
    54f4:	80 93 45 12 	sts	0x1245, r24
}
    54f8:	08 95       	ret

000054fa <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
    54fa:	90 93 48 12 	sts	0x1248, r25
    54fe:	80 93 47 12 	sts	0x1247, r24
}
    5502:	08 95       	ret

00005504 <i2cSendStart>:

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    5504:	ec eb       	ldi	r30, 0xBC	; 188
    5506:	f0 e0       	ldi	r31, 0x00	; 0
    5508:	80 81       	ld	r24, Z
    550a:	8f 70       	andi	r24, 0x0F	; 15
    550c:	80 6a       	ori	r24, 0xA0	; 160
    550e:	80 83       	st	Z, r24
}
    5510:	08 95       	ret

00005512 <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    5512:	ec eb       	ldi	r30, 0xBC	; 188
    5514:	f0 e0       	ldi	r31, 0x00	; 0
    5516:	80 81       	ld	r24, Z
    5518:	8f 70       	andi	r24, 0x0F	; 15
    551a:	80 6d       	ori	r24, 0xD0	; 208
    551c:	80 83       	st	Z, r24
}
    551e:	08 95       	ret

00005520 <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5520:	80 91 bc 00 	lds	r24, 0x00BC
    5524:	87 ff       	sbrs	r24, 7
    5526:	fc cf       	rjmp	.-8      	; 0x5520 <i2cWaitForComplete>
}
    5528:	08 95       	ret

0000552a <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    552a:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    552e:	ec eb       	ldi	r30, 0xBC	; 188
    5530:	f0 e0       	ldi	r31, 0x00	; 0
    5532:	80 81       	ld	r24, Z
    5534:	8f 70       	andi	r24, 0x0F	; 15
    5536:	80 68       	ori	r24, 0x80	; 128
    5538:	80 83       	st	Z, r24
}
    553a:	08 95       	ret

0000553c <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    553c:	88 23       	and	r24, r24
    553e:	29 f0       	breq	.+10     	; 0x554a <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    5540:	80 91 bc 00 	lds	r24, 0x00BC
    5544:	8f 70       	andi	r24, 0x0F	; 15
    5546:	80 6c       	ori	r24, 0xC0	; 192
    5548:	04 c0       	rjmp	.+8      	; 0x5552 <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    554a:	80 91 bc 00 	lds	r24, 0x00BC
    554e:	8f 70       	andi	r24, 0x0F	; 15
    5550:	80 68       	ori	r24, 0x80	; 128
    5552:	80 93 bc 00 	sts	0x00BC, r24
    5556:	08 95       	ret

00005558 <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    5558:	80 91 bb 00 	lds	r24, 0x00BB
}
    555c:	08 95       	ret

0000555e <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
    555e:	80 91 b9 00 	lds	r24, 0x00B9
}
    5562:	08 95       	ret

00005564 <i2cMasterSend>:

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
{
    5564:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    5566:	80 91 ff 11 	lds	r24, 0x11FF
    556a:	88 23       	and	r24, r24
    556c:	e1 f7       	brne	.-8      	; 0x5566 <i2cMasterSend+0x2>
	// set state
	I2cState = I2C_MASTER_TX;
    556e:	82 e0       	ldi	r24, 0x02	; 2
    5570:	80 93 ff 11 	sts	0x11FF, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
    5574:	9e 7f       	andi	r25, 0xFE	; 254
    5576:	90 93 00 12 	sts	0x1200, r25
    557a:	a1 e0       	ldi	r26, 0x01	; 1
    557c:	b2 e1       	ldi	r27, 0x12	; 18
    557e:	fa 01       	movw	r30, r20
    5580:	02 c0       	rjmp	.+4      	; 0x5586 <i2cMasterSend+0x22>
	for(i=0; i<length; i++)
		I2cSendData[i] = *data++;
    5582:	81 91       	ld	r24, Z+
    5584:	8d 93       	st	X+, r24
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
    5586:	8e 2f       	mov	r24, r30
    5588:	84 1b       	sub	r24, r20
    558a:	86 17       	cp	r24, r22
    558c:	d0 f3       	brcs	.-12     	; 0x5582 <i2cMasterSend+0x1e>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
    558e:	10 92 21 12 	sts	0x1221, r1
	I2cSendDataLength = length;
    5592:	60 93 22 12 	sts	0x1222, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    5596:	80 91 bc 00 	lds	r24, 0x00BC
    559a:	8f 70       	andi	r24, 0x0F	; 15
    559c:	80 6a       	ori	r24, 0xA0	; 160
    559e:	80 93 bc 00 	sts	0x00BC, r24
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}
    55a2:	08 95       	ret

000055a4 <i2cMasterReceive>:

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
{
    55a4:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    55a6:	80 91 ff 11 	lds	r24, 0x11FF
    55aa:	88 23       	and	r24, r24
    55ac:	e1 f7       	brne	.-8      	; 0x55a6 <i2cMasterReceive+0x2>
	// set state
	I2cState = I2C_MASTER_RX;
    55ae:	83 e0       	ldi	r24, 0x03	; 3
    55b0:	80 93 ff 11 	sts	0x11FF, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr|0x01);	// RW set: read operation
    55b4:	91 60       	ori	r25, 0x01	; 1
    55b6:	90 93 00 12 	sts	0x1200, r25
	I2cReceiveDataIndex = 0;
    55ba:	10 92 43 12 	sts	0x1243, r1
	I2cReceiveDataLength = length;
    55be:	60 93 44 12 	sts	0x1244, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    55c2:	80 91 bc 00 	lds	r24, 0x00BC
    55c6:	8f 70       	andi	r24, 0x0F	; 15
    55c8:	80 6a       	ori	r24, 0xA0	; 160
    55ca:	80 93 bc 00 	sts	0x00BC, r24
	I2cReceiveDataIndex = 0;
	I2cReceiveDataLength = length;
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
    55ce:	80 91 ff 11 	lds	r24, 0x11FF
    55d2:	88 23       	and	r24, r24
    55d4:	e1 f7       	brne	.-8      	; 0x55ce <i2cMasterReceive+0x2a>
    55d6:	a3 e2       	ldi	r26, 0x23	; 35
    55d8:	b2 e1       	ldi	r27, 0x12	; 18
    55da:	fa 01       	movw	r30, r20
    55dc:	02 c0       	rjmp	.+4      	; 0x55e2 <i2cMasterReceive+0x3e>
	// return data
	for(i=0; i<length; i++)
		*data++ = I2cReceiveData[i];
    55de:	8d 91       	ld	r24, X+
    55e0:	81 93       	st	Z+, r24
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
    55e2:	8e 2f       	mov	r24, r30
    55e4:	84 1b       	sub	r24, r20
    55e6:	86 17       	cp	r24, r22
    55e8:	d0 f3       	brcs	.-12     	; 0x55de <i2cMasterReceive+0x3a>
		*data++ = I2cReceiveData[i];
}
    55ea:	08 95       	ret

000055ec <i2cMasterSendNI>:

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
    55ec:	98 2f       	mov	r25, r24
    55ee:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    55f0:	80 91 bc 00 	lds	r24, 0x00BC
    55f4:	8e 7f       	andi	r24, 0xFE	; 254
    55f6:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    55fa:	80 91 bc 00 	lds	r24, 0x00BC
    55fe:	8f 70       	andi	r24, 0x0F	; 15
    5600:	80 6a       	ori	r24, 0xA0	; 160
    5602:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5606:	80 91 bc 00 	lds	r24, 0x00BC
    560a:	87 ff       	sbrs	r24, 7
    560c:	fc cf       	rjmp	.-8      	; 0x5606 <i2cMasterSendNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
    560e:	9e 7f       	andi	r25, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    5610:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    5614:	80 91 bc 00 	lds	r24, 0x00BC
    5618:	8f 70       	andi	r24, 0x0F	; 15
    561a:	80 68       	ori	r24, 0x80	; 128
    561c:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5620:	80 91 bc 00 	lds	r24, 0x00BC
    5624:	87 ff       	sbrs	r24, 7
    5626:	fc cf       	rjmp	.-8      	; 0x5620 <i2cMasterSendNI+0x34>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
    5628:	80 91 b9 00 	lds	r24, 0x00B9
    562c:	88 31       	cpi	r24, 0x18	; 24
    562e:	89 f0       	breq	.+34     	; 0x5652 <i2cMasterSendNI+0x66>
    5630:	91 e0       	ldi	r25, 0x01	; 1
    5632:	12 c0       	rjmp	.+36     	; 0x5658 <i2cMasterSendNI+0x6c>
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    5634:	80 81       	ld	r24, Z
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    5636:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    563a:	80 91 bc 00 	lds	r24, 0x00BC
    563e:	8f 70       	andi	r24, 0x0F	; 15
    5640:	80 68       	ori	r24, 0x80	; 128
    5642:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5646:	80 91 bc 00 	lds	r24, 0x00BC
    564a:	87 ff       	sbrs	r24, 7
    564c:	fc cf       	rjmp	.-8      	; 0x5646 <i2cMasterSendNI+0x5a>
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    564e:	31 96       	adiw	r30, 0x01	; 1
			i2cWaitForComplete();
			length--;
    5650:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
    5652:	66 23       	and	r22, r22
    5654:	79 f7       	brne	.-34     	; 0x5634 <i2cMasterSendNI+0x48>
    5656:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    5658:	80 91 bc 00 	lds	r24, 0x00BC
    565c:	8f 70       	andi	r24, 0x0F	; 15
    565e:	80 6d       	ori	r24, 0xD0	; 208
    5660:	80 93 bc 00 	sts	0x00BC, r24
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
    5664:	80 91 bc 00 	lds	r24, 0x00BC
    5668:	84 ff       	sbrs	r24, 4
    566a:	fc cf       	rjmp	.-8      	; 0x5664 <i2cMasterSendNI+0x78>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    566c:	80 91 bc 00 	lds	r24, 0x00BC
    5670:	81 60       	ori	r24, 0x01	; 1
    5672:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    5676:	89 2f       	mov	r24, r25
    5678:	08 95       	ret

0000567a <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
    567a:	98 2f       	mov	r25, r24
    567c:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    567e:	80 91 bc 00 	lds	r24, 0x00BC
    5682:	8e 7f       	andi	r24, 0xFE	; 254
    5684:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    5688:	80 91 bc 00 	lds	r24, 0x00BC
    568c:	8f 70       	andi	r24, 0x0F	; 15
    568e:	80 6a       	ori	r24, 0xA0	; 160
    5690:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5694:	80 91 bc 00 	lds	r24, 0x00BC
    5698:	87 ff       	sbrs	r24, 7
    569a:	fc cf       	rjmp	.-8      	; 0x5694 <i2cMasterReceiveNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
    569c:	91 60       	ori	r25, 0x01	; 1
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    569e:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    56a2:	80 91 bc 00 	lds	r24, 0x00BC
    56a6:	8f 70       	andi	r24, 0x0F	; 15
    56a8:	80 68       	ori	r24, 0x80	; 128
    56aa:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    56ae:	80 91 bc 00 	lds	r24, 0x00BC
    56b2:	87 ff       	sbrs	r24, 7
    56b4:	fc cf       	rjmp	.-8      	; 0x56ae <i2cMasterReceiveNI+0x34>
	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
    56b6:	80 91 b9 00 	lds	r24, 0x00B9
    56ba:	80 34       	cpi	r24, 0x40	; 64
    56bc:	81 f0       	breq	.+32     	; 0x56de <i2cMasterReceiveNI+0x64>
    56be:	91 e0       	ldi	r25, 0x01	; 1
    56c0:	1e c0       	rjmp	.+60     	; 0x56fe <i2cMasterReceiveNI+0x84>
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    56c2:	80 91 bc 00 	lds	r24, 0x00BC
    56c6:	8f 70       	andi	r24, 0x0F	; 15
    56c8:	80 6c       	ori	r24, 0xC0	; 192
    56ca:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    56ce:	80 91 bc 00 	lds	r24, 0x00BC
    56d2:	87 ff       	sbrs	r24, 7
    56d4:	fc cf       	rjmp	.-8      	; 0x56ce <i2cMasterReceiveNI+0x54>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    56d6:	80 91 bb 00 	lds	r24, 0x00BB
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
    56da:	81 93       	st	Z+, r24
			// decrement length
			length--;
    56dc:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
    56de:	62 30       	cpi	r22, 0x02	; 2
    56e0:	80 f7       	brcc	.-32     	; 0x56c2 <i2cMasterReceiveNI+0x48>
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    56e2:	80 91 bc 00 	lds	r24, 0x00BC
    56e6:	8f 70       	andi	r24, 0x0F	; 15
    56e8:	80 68       	ori	r24, 0x80	; 128
    56ea:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    56ee:	80 91 bc 00 	lds	r24, 0x00BC
    56f2:	87 ff       	sbrs	r24, 7
    56f4:	fc cf       	rjmp	.-8      	; 0x56ee <i2cMasterReceiveNI+0x74>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    56f6:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
    56fa:	80 83       	st	Z, r24
    56fc:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    56fe:	80 91 bc 00 	lds	r24, 0x00BC
    5702:	8f 70       	andi	r24, 0x0F	; 15
    5704:	80 6d       	ori	r24, 0xD0	; 208
    5706:	80 93 bc 00 	sts	0x00BC, r24
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    570a:	80 91 bc 00 	lds	r24, 0x00BC
    570e:	81 60       	ori	r24, 0x01	; 1
    5710:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    5714:	89 2f       	mov	r24, r25
    5716:	08 95       	ret

00005718 <__vector_39>:
}
*/

//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
{
    5718:	1f 92       	push	r1
    571a:	0f 92       	push	r0
    571c:	0f b6       	in	r0, 0x3f	; 63
    571e:	0f 92       	push	r0
    5720:	11 24       	eor	r1, r1
    5722:	2f 93       	push	r18
    5724:	3f 93       	push	r19
    5726:	4f 93       	push	r20
    5728:	5f 93       	push	r21
    572a:	6f 93       	push	r22
    572c:	7f 93       	push	r23
    572e:	8f 93       	push	r24
    5730:	9f 93       	push	r25
    5732:	af 93       	push	r26
    5734:	bf 93       	push	r27
    5736:	ef 93       	push	r30
    5738:	ff 93       	push	r31
	// read status bits
	u08 status = inb(TWSR) & TWSR_STATUS_MASK;
    573a:	80 91 b9 00 	lds	r24, 0x00B9

	switch(status)
    573e:	88 7f       	andi	r24, 0xF8	; 248
    5740:	80 36       	cpi	r24, 0x60	; 96
    5742:	09 f4       	brne	.+2      	; 0x5746 <__vector_39+0x2e>
    5744:	a0 c0       	rjmp	.+320    	; 0x5886 <__vector_39+0x16e>
    5746:	81 36       	cpi	r24, 0x61	; 97
    5748:	70 f5       	brcc	.+92     	; 0x57a6 <__vector_39+0x8e>
    574a:	88 32       	cpi	r24, 0x28	; 40
    574c:	09 f4       	brne	.+2      	; 0x5750 <__vector_39+0x38>
    574e:	5f c0       	rjmp	.+190    	; 0x580e <__vector_39+0xf6>
    5750:	89 32       	cpi	r24, 0x29	; 41
    5752:	98 f4       	brcc	.+38     	; 0x577a <__vector_39+0x62>
    5754:	80 31       	cpi	r24, 0x10	; 16
    5756:	09 f4       	brne	.+2      	; 0x575a <__vector_39+0x42>
    5758:	57 c0       	rjmp	.+174    	; 0x5808 <__vector_39+0xf0>
    575a:	81 31       	cpi	r24, 0x11	; 17
    575c:	38 f4       	brcc	.+14     	; 0x576c <__vector_39+0x54>
    575e:	88 23       	and	r24, r24
    5760:	09 f4       	brne	.+2      	; 0x5764 <__vector_39+0x4c>
    5762:	ea c0       	rjmp	.+468    	; 0x5938 <__vector_39+0x220>
    5764:	88 30       	cpi	r24, 0x08	; 8
    5766:	09 f0       	breq	.+2      	; 0x576a <__vector_39+0x52>
    5768:	ef c0       	rjmp	.+478    	; 0x5948 <__vector_39+0x230>
    576a:	4e c0       	rjmp	.+156    	; 0x5808 <__vector_39+0xf0>
    576c:	88 31       	cpi	r24, 0x18	; 24
    576e:	09 f4       	brne	.+2      	; 0x5772 <__vector_39+0x5a>
    5770:	4e c0       	rjmp	.+156    	; 0x580e <__vector_39+0xf6>
    5772:	80 32       	cpi	r24, 0x20	; 32
    5774:	09 f0       	breq	.+2      	; 0x5778 <__vector_39+0x60>
    5776:	e8 c0       	rjmp	.+464    	; 0x5948 <__vector_39+0x230>
    5778:	df c0       	rjmp	.+446    	; 0x5938 <__vector_39+0x220>
    577a:	80 34       	cpi	r24, 0x40	; 64
    577c:	09 f4       	brne	.+2      	; 0x5780 <__vector_39+0x68>
    577e:	77 c0       	rjmp	.+238    	; 0x586e <__vector_39+0x156>
    5780:	81 34       	cpi	r24, 0x41	; 65
    5782:	38 f4       	brcc	.+14     	; 0x5792 <__vector_39+0x7a>
    5784:	80 33       	cpi	r24, 0x30	; 48
    5786:	09 f4       	brne	.+2      	; 0x578a <__vector_39+0x72>
    5788:	d7 c0       	rjmp	.+430    	; 0x5938 <__vector_39+0x220>
    578a:	88 33       	cpi	r24, 0x38	; 56
    578c:	09 f0       	breq	.+2      	; 0x5790 <__vector_39+0x78>
    578e:	dc c0       	rjmp	.+440    	; 0x5948 <__vector_39+0x230>
    5790:	5d c0       	rjmp	.+186    	; 0x584c <__vector_39+0x134>
    5792:	80 35       	cpi	r24, 0x50	; 80
    5794:	09 f4       	brne	.+2      	; 0x5798 <__vector_39+0x80>
    5796:	5f c0       	rjmp	.+190    	; 0x5856 <__vector_39+0x13e>
    5798:	88 35       	cpi	r24, 0x58	; 88
    579a:	09 f4       	brne	.+2      	; 0x579e <__vector_39+0x86>
    579c:	4a c0       	rjmp	.+148    	; 0x5832 <__vector_39+0x11a>
    579e:	88 34       	cpi	r24, 0x48	; 72
    57a0:	09 f0       	breq	.+2      	; 0x57a4 <__vector_39+0x8c>
    57a2:	d2 c0       	rjmp	.+420    	; 0x5948 <__vector_39+0x230>
    57a4:	c9 c0       	rjmp	.+402    	; 0x5938 <__vector_39+0x220>
    57a6:	88 39       	cpi	r24, 0x98	; 152
    57a8:	09 f4       	brne	.+2      	; 0x57ac <__vector_39+0x94>
    57aa:	ba c0       	rjmp	.+372    	; 0x5920 <__vector_39+0x208>
    57ac:	89 39       	cpi	r24, 0x99	; 153
    57ae:	b0 f4       	brcc	.+44     	; 0x57dc <__vector_39+0xc4>
    57b0:	88 37       	cpi	r24, 0x78	; 120
    57b2:	09 f4       	brne	.+2      	; 0x57b6 <__vector_39+0x9e>
    57b4:	68 c0       	rjmp	.+208    	; 0x5886 <__vector_39+0x16e>
    57b6:	89 37       	cpi	r24, 0x79	; 121
    57b8:	38 f4       	brcc	.+14     	; 0x57c8 <__vector_39+0xb0>
    57ba:	88 36       	cpi	r24, 0x68	; 104
    57bc:	09 f4       	brne	.+2      	; 0x57c0 <__vector_39+0xa8>
    57be:	63 c0       	rjmp	.+198    	; 0x5886 <__vector_39+0x16e>
    57c0:	80 37       	cpi	r24, 0x70	; 112
    57c2:	09 f0       	breq	.+2      	; 0x57c6 <__vector_39+0xae>
    57c4:	c1 c0       	rjmp	.+386    	; 0x5948 <__vector_39+0x230>
    57c6:	5f c0       	rjmp	.+190    	; 0x5886 <__vector_39+0x16e>
    57c8:	88 38       	cpi	r24, 0x88	; 136
    57ca:	09 f4       	brne	.+2      	; 0x57ce <__vector_39+0xb6>
    57cc:	a9 c0       	rjmp	.+338    	; 0x5920 <__vector_39+0x208>
    57ce:	80 39       	cpi	r24, 0x90	; 144
    57d0:	09 f4       	brne	.+2      	; 0x57d4 <__vector_39+0xbc>
    57d2:	5f c0       	rjmp	.+190    	; 0x5892 <__vector_39+0x17a>
    57d4:	80 38       	cpi	r24, 0x80	; 128
    57d6:	09 f0       	breq	.+2      	; 0x57da <__vector_39+0xc2>
    57d8:	b7 c0       	rjmp	.+366    	; 0x5948 <__vector_39+0x230>
    57da:	5b c0       	rjmp	.+182    	; 0x5892 <__vector_39+0x17a>
    57dc:	80 3b       	cpi	r24, 0xB0	; 176
    57de:	09 f4       	brne	.+2      	; 0x57e2 <__vector_39+0xca>
    57e0:	79 c0       	rjmp	.+242    	; 0x58d4 <__vector_39+0x1bc>
    57e2:	81 3b       	cpi	r24, 0xB1	; 177
    57e4:	38 f4       	brcc	.+14     	; 0x57f4 <__vector_39+0xdc>
    57e6:	80 3a       	cpi	r24, 0xA0	; 160
    57e8:	09 f4       	brne	.+2      	; 0x57ec <__vector_39+0xd4>
    57ea:	62 c0       	rjmp	.+196    	; 0x58b0 <__vector_39+0x198>
    57ec:	88 3a       	cpi	r24, 0xA8	; 168
    57ee:	09 f0       	breq	.+2      	; 0x57f2 <__vector_39+0xda>
    57f0:	ab c0       	rjmp	.+342    	; 0x5948 <__vector_39+0x230>
    57f2:	70 c0       	rjmp	.+224    	; 0x58d4 <__vector_39+0x1bc>
    57f4:	80 3c       	cpi	r24, 0xC0	; 192
    57f6:	09 f4       	brne	.+2      	; 0x57fa <__vector_39+0xe2>
    57f8:	9a c0       	rjmp	.+308    	; 0x592e <__vector_39+0x216>
    57fa:	88 3c       	cpi	r24, 0xC8	; 200
    57fc:	09 f4       	brne	.+2      	; 0x5800 <__vector_39+0xe8>
    57fe:	97 c0       	rjmp	.+302    	; 0x592e <__vector_39+0x216>
    5800:	88 3b       	cpi	r24, 0xB8	; 184
    5802:	09 f0       	breq	.+2      	; 0x5806 <__vector_39+0xee>
    5804:	a1 c0       	rjmp	.+322    	; 0x5948 <__vector_39+0x230>
    5806:	77 c0       	rjmp	.+238    	; 0x58f6 <__vector_39+0x1de>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: M->START\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
    5808:	80 91 00 12 	lds	r24, 0x1200
    580c:	0f c0       	rjmp	.+30     	; 0x582c <__vector_39+0x114>
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
    580e:	90 91 21 12 	lds	r25, 0x1221
    5812:	80 91 22 12 	lds	r24, 0x1222
    5816:	98 17       	cp	r25, r24
    5818:	08 f0       	brcs	.+2      	; 0x581c <__vector_39+0x104>
    581a:	8e c0       	rjmp	.+284    	; 0x5938 <__vector_39+0x220>
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
    581c:	e9 2f       	mov	r30, r25
    581e:	f0 e0       	ldi	r31, 0x00	; 0
    5820:	ef 5f       	subi	r30, 0xFF	; 255
    5822:	fd 4e       	sbci	r31, 0xED	; 237
    5824:	80 81       	ld	r24, Z
    5826:	9f 5f       	subi	r25, 0xFF	; 255
    5828:	90 93 21 12 	sts	0x1221, r25
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    582c:	80 93 bb 00 	sts	0x00BB, r24
    5830:	77 c0       	rjmp	.+238    	; 0x5920 <__vector_39+0x208>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    5832:	80 91 43 12 	lds	r24, 0x1243
    5836:	90 91 bb 00 	lds	r25, 0x00BB
    583a:	e8 2f       	mov	r30, r24
    583c:	f0 e0       	ldi	r31, 0x00	; 0
    583e:	ed 5d       	subi	r30, 0xDD	; 221
    5840:	fd 4e       	sbci	r31, 0xED	; 237
    5842:	90 83       	st	Z, r25
    5844:	8f 5f       	subi	r24, 0xFF	; 255
    5846:	80 93 43 12 	sts	0x1243, r24
    584a:	76 c0       	rjmp	.+236    	; 0x5938 <__vector_39+0x220>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->ARB_LOST\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    584c:	80 91 bc 00 	lds	r24, 0x00BC
    5850:	8f 70       	andi	r24, 0x0F	; 15
    5852:	80 68       	ori	r24, 0x80	; 128
    5854:	75 c0       	rjmp	.+234    	; 0x5940 <__vector_39+0x228>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    5856:	80 91 43 12 	lds	r24, 0x1243
    585a:	90 91 bb 00 	lds	r25, 0x00BB
    585e:	e8 2f       	mov	r30, r24
    5860:	f0 e0       	ldi	r31, 0x00	; 0
    5862:	ed 5d       	subi	r30, 0xDD	; 221
    5864:	fd 4e       	sbci	r31, 0xED	; 237
    5866:	90 83       	st	Z, r25
    5868:	8f 5f       	subi	r24, 0xFF	; 255
    586a:	80 93 43 12 	sts	0x1243, r24
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    586e:	20 91 43 12 	lds	r18, 0x1243
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	80 91 44 12 	lds	r24, 0x1244
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	01 97       	sbiw	r24, 0x01	; 1
    587c:	28 17       	cp	r18, r24
    587e:	39 07       	cpc	r19, r25
    5880:	0c f0       	brlt	.+2      	; 0x5884 <__vector_39+0x16c>
    5882:	4e c0       	rjmp	.+156    	; 0x5920 <__vector_39+0x208>
    5884:	48 c0       	rjmp	.+144    	; 0x5916 <__vector_39+0x1fe>
		rprintf("I2C: SR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		I2cState = I2C_SLAVE_RX;
    5886:	85 e0       	ldi	r24, 0x05	; 5
    5888:	80 93 ff 11 	sts	0x11FF, r24
		// prepare buffer
		I2cReceiveDataIndex = 0;
    588c:	10 92 43 12 	sts	0x1243, r1
    5890:	42 c0       	rjmp	.+132    	; 0x5916 <__vector_39+0x1fe>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    5892:	80 91 43 12 	lds	r24, 0x1243
    5896:	90 91 bb 00 	lds	r25, 0x00BB
    589a:	e8 2f       	mov	r30, r24
    589c:	f0 e0       	ldi	r31, 0x00	; 0
    589e:	ed 5d       	subi	r30, 0xDD	; 221
    58a0:	fd 4e       	sbci	r31, 0xED	; 237
    58a2:	90 83       	st	Z, r25
    58a4:	8f 5f       	subi	r24, 0xFF	; 255
    58a6:	80 93 43 12 	sts	0x1243, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
    58aa:	80 32       	cpi	r24, 0x20	; 32
    58ac:	c8 f5       	brcc	.+114    	; 0x5920 <__vector_39+0x208>
    58ae:	33 c0       	rjmp	.+102    	; 0x5916 <__vector_39+0x1fe>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->SR_STOP\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// switch to SR mode with SLA ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    58b0:	80 91 bc 00 	lds	r24, 0x00BC
    58b4:	8f 70       	andi	r24, 0x0F	; 15
    58b6:	80 6c       	ori	r24, 0xC0	; 192
    58b8:	80 93 bc 00 	sts	0x00BC, r24
		// i2c receive is complete, call i2cSlaveReceive
		if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
    58bc:	e0 91 45 12 	lds	r30, 0x1245
    58c0:	f0 91 46 12 	lds	r31, 0x1246
    58c4:	30 97       	sbiw	r30, 0x00	; 0
    58c6:	f1 f1       	breq	.+124    	; 0x5944 <__vector_39+0x22c>
    58c8:	80 91 43 12 	lds	r24, 0x1243
    58cc:	63 e2       	ldi	r22, 0x23	; 35
    58ce:	72 e1       	ldi	r23, 0x12	; 18
    58d0:	09 95       	icall
    58d2:	38 c0       	rjmp	.+112    	; 0x5944 <__vector_39+0x22c>
		rprintf("I2C: ST->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for reading (data must be transmitted back to master)
		// set state
		I2cState = I2C_SLAVE_TX;
    58d4:	84 e0       	ldi	r24, 0x04	; 4
    58d6:	80 93 ff 11 	sts	0x11FF, r24
		// request data from application
		if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
    58da:	e0 91 47 12 	lds	r30, 0x1247
    58de:	f0 91 48 12 	lds	r31, 0x1248
    58e2:	30 97       	sbiw	r30, 0x00	; 0
    58e4:	31 f0       	breq	.+12     	; 0x58f2 <__vector_39+0x1da>
    58e6:	80 e2       	ldi	r24, 0x20	; 32
    58e8:	61 e0       	ldi	r22, 0x01	; 1
    58ea:	72 e1       	ldi	r23, 0x12	; 18
    58ec:	09 95       	icall
    58ee:	80 93 22 12 	sts	0x1222, r24
		// reset data index
		I2cSendDataIndex = 0;
    58f2:	10 92 21 12 	sts	0x1221, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: ST->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit data byte
		outb(TWDR, I2cSendData[I2cSendDataIndex++]);
    58f6:	90 91 21 12 	lds	r25, 0x1221
    58fa:	e9 2f       	mov	r30, r25
    58fc:	f0 e0       	ldi	r31, 0x00	; 0
    58fe:	ef 5f       	subi	r30, 0xFF	; 255
    5900:	fd 4e       	sbci	r31, 0xED	; 237
    5902:	80 81       	ld	r24, Z
    5904:	80 93 bb 00 	sts	0x00BB, r24
    5908:	9f 5f       	subi	r25, 0xFF	; 255
    590a:	90 93 21 12 	sts	0x1221, r25
		if(I2cSendDataIndex < I2cSendDataLength)
    590e:	80 91 22 12 	lds	r24, 0x1222
    5912:	98 17       	cp	r25, r24
    5914:	28 f4       	brcc	.+10     	; 0x5920 <__vector_39+0x208>
			// expect ACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    5916:	80 91 bc 00 	lds	r24, 0x00BC
    591a:	8f 70       	andi	r24, 0x0F	; 15
    591c:	80 6c       	ori	r24, 0xC0	; 192
    591e:	04 c0       	rjmp	.+8      	; 0x5928 <__vector_39+0x210>
		else
			// expect NACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    5920:	80 91 bc 00 	lds	r24, 0x00BC
    5924:	8f 70       	andi	r24, 0x0F	; 15
    5926:	80 68       	ori	r24, 0x80	; 128
    5928:	80 93 bc 00 	sts	0x00BC, r24
    592c:	0d c0       	rjmp	.+26     	; 0x5948 <__vector_39+0x230>
		rprintf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// all done
		// switch to open slave
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    592e:	80 91 bc 00 	lds	r24, 0x00BC
    5932:	8f 70       	andi	r24, 0x0F	; 15
    5934:	80 6c       	ori	r24, 0xC0	; 192
    5936:	04 c0       	rjmp	.+8      	; 0x5940 <__vector_39+0x228>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: BUS_ERROR\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// reset internal hardware and release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
    5938:	80 91 bc 00 	lds	r24, 0x00BC
    593c:	8f 70       	andi	r24, 0x0F	; 15
    593e:	80 6d       	ori	r24, 0xD0	; 208
    5940:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
    5944:	10 92 ff 11 	sts	0x11FF, r1
		break;
	}
}
    5948:	ff 91       	pop	r31
    594a:	ef 91       	pop	r30
    594c:	bf 91       	pop	r27
    594e:	af 91       	pop	r26
    5950:	9f 91       	pop	r25
    5952:	8f 91       	pop	r24
    5954:	7f 91       	pop	r23
    5956:	6f 91       	pop	r22
    5958:	5f 91       	pop	r21
    595a:	4f 91       	pop	r20
    595c:	3f 91       	pop	r19
    595e:	2f 91       	pop	r18
    5960:	0f 90       	pop	r0
    5962:	0f be       	out	0x3f, r0	; 63
    5964:	0f 90       	pop	r0
    5966:	1f 90       	pop	r1
    5968:	18 95       	reti

0000596a <i2cGetState>:

eI2cStateType i2cGetState(void)
{
	return I2cState;
    596a:	80 91 ff 11 	lds	r24, 0x11FF
}
    596e:	08 95       	ret

00005970 <exit>:
    5970:	f8 94       	cli
    5972:	0c 94 34 31 	jmp	0x6268	; 0x6268 <_exit>

00005976 <memcpy>:
    5976:	fb 01       	movw	r30, r22
    5978:	dc 01       	movw	r26, r24
    597a:	02 c0       	rjmp	.+4      	; 0x5980 <memcpy+0xa>
    597c:	01 90       	ld	r0, Z+
    597e:	0d 92       	st	X+, r0
    5980:	41 50       	subi	r20, 0x01	; 1
    5982:	50 40       	sbci	r21, 0x00	; 0
    5984:	d8 f7       	brcc	.-10     	; 0x597c <memcpy+0x6>
    5986:	08 95       	ret

00005988 <memset>:
    5988:	dc 01       	movw	r26, r24
    598a:	01 c0       	rjmp	.+2      	; 0x598e <memset+0x6>
    598c:	6d 93       	st	X+, r22
    598e:	41 50       	subi	r20, 0x01	; 1
    5990:	50 40       	sbci	r21, 0x00	; 0
    5992:	e0 f7       	brcc	.-8      	; 0x598c <memset+0x4>
    5994:	08 95       	ret

00005996 <strncpy>:
    5996:	fb 01       	movw	r30, r22
    5998:	dc 01       	movw	r26, r24
    599a:	41 50       	subi	r20, 0x01	; 1
    599c:	50 40       	sbci	r21, 0x00	; 0
    599e:	48 f0       	brcs	.+18     	; 0x59b2 <strncpy+0x1c>
    59a0:	01 90       	ld	r0, Z+
    59a2:	0d 92       	st	X+, r0
    59a4:	00 20       	and	r0, r0
    59a6:	c9 f7       	brne	.-14     	; 0x599a <strncpy+0x4>
    59a8:	01 c0       	rjmp	.+2      	; 0x59ac <strncpy+0x16>
    59aa:	1d 92       	st	X+, r1
    59ac:	41 50       	subi	r20, 0x01	; 1
    59ae:	50 40       	sbci	r21, 0x00	; 0
    59b0:	e0 f7       	brcc	.-8      	; 0x59aa <strncpy+0x14>
    59b2:	08 95       	ret

000059b4 <__subsf3>:
    59b4:	50 58       	subi	r21, 0x80	; 128

000059b6 <__addsf3>:
    59b6:	bb 27       	eor	r27, r27
    59b8:	aa 27       	eor	r26, r26
    59ba:	0e d0       	rcall	.+28     	; 0x59d8 <__addsf3x>
    59bc:	75 c1       	rjmp	.+746    	; 0x5ca8 <__fp_round>
    59be:	66 d1       	rcall	.+716    	; 0x5c8c <__fp_pscA>
    59c0:	30 f0       	brcs	.+12     	; 0x59ce <__addsf3+0x18>
    59c2:	6b d1       	rcall	.+726    	; 0x5c9a <__fp_pscB>
    59c4:	20 f0       	brcs	.+8      	; 0x59ce <__addsf3+0x18>
    59c6:	31 f4       	brne	.+12     	; 0x59d4 <__addsf3+0x1e>
    59c8:	9f 3f       	cpi	r25, 0xFF	; 255
    59ca:	11 f4       	brne	.+4      	; 0x59d0 <__addsf3+0x1a>
    59cc:	1e f4       	brtc	.+6      	; 0x59d4 <__addsf3+0x1e>
    59ce:	5b c1       	rjmp	.+694    	; 0x5c86 <__fp_nan>
    59d0:	0e f4       	brtc	.+2      	; 0x59d4 <__addsf3+0x1e>
    59d2:	e0 95       	com	r30
    59d4:	e7 fb       	bst	r30, 7
    59d6:	51 c1       	rjmp	.+674    	; 0x5c7a <__fp_inf>

000059d8 <__addsf3x>:
    59d8:	e9 2f       	mov	r30, r25
    59da:	77 d1       	rcall	.+750    	; 0x5cca <__fp_split3>
    59dc:	80 f3       	brcs	.-32     	; 0x59be <__addsf3+0x8>
    59de:	ba 17       	cp	r27, r26
    59e0:	62 07       	cpc	r22, r18
    59e2:	73 07       	cpc	r23, r19
    59e4:	84 07       	cpc	r24, r20
    59e6:	95 07       	cpc	r25, r21
    59e8:	18 f0       	brcs	.+6      	; 0x59f0 <__addsf3x+0x18>
    59ea:	71 f4       	brne	.+28     	; 0x5a08 <__addsf3x+0x30>
    59ec:	9e f5       	brtc	.+102    	; 0x5a54 <__addsf3x+0x7c>
    59ee:	8f c1       	rjmp	.+798    	; 0x5d0e <__fp_zero>
    59f0:	0e f4       	brtc	.+2      	; 0x59f4 <__addsf3x+0x1c>
    59f2:	e0 95       	com	r30
    59f4:	0b 2e       	mov	r0, r27
    59f6:	ba 2f       	mov	r27, r26
    59f8:	a0 2d       	mov	r26, r0
    59fa:	0b 01       	movw	r0, r22
    59fc:	b9 01       	movw	r22, r18
    59fe:	90 01       	movw	r18, r0
    5a00:	0c 01       	movw	r0, r24
    5a02:	ca 01       	movw	r24, r20
    5a04:	a0 01       	movw	r20, r0
    5a06:	11 24       	eor	r1, r1
    5a08:	ff 27       	eor	r31, r31
    5a0a:	59 1b       	sub	r21, r25
    5a0c:	99 f0       	breq	.+38     	; 0x5a34 <__addsf3x+0x5c>
    5a0e:	59 3f       	cpi	r21, 0xF9	; 249
    5a10:	50 f4       	brcc	.+20     	; 0x5a26 <__addsf3x+0x4e>
    5a12:	50 3e       	cpi	r21, 0xE0	; 224
    5a14:	68 f1       	brcs	.+90     	; 0x5a70 <__addsf3x+0x98>
    5a16:	1a 16       	cp	r1, r26
    5a18:	f0 40       	sbci	r31, 0x00	; 0
    5a1a:	a2 2f       	mov	r26, r18
    5a1c:	23 2f       	mov	r18, r19
    5a1e:	34 2f       	mov	r19, r20
    5a20:	44 27       	eor	r20, r20
    5a22:	58 5f       	subi	r21, 0xF8	; 248
    5a24:	f3 cf       	rjmp	.-26     	; 0x5a0c <__addsf3x+0x34>
    5a26:	46 95       	lsr	r20
    5a28:	37 95       	ror	r19
    5a2a:	27 95       	ror	r18
    5a2c:	a7 95       	ror	r26
    5a2e:	f0 40       	sbci	r31, 0x00	; 0
    5a30:	53 95       	inc	r21
    5a32:	c9 f7       	brne	.-14     	; 0x5a26 <__addsf3x+0x4e>
    5a34:	7e f4       	brtc	.+30     	; 0x5a54 <__addsf3x+0x7c>
    5a36:	1f 16       	cp	r1, r31
    5a38:	ba 0b       	sbc	r27, r26
    5a3a:	62 0b       	sbc	r22, r18
    5a3c:	73 0b       	sbc	r23, r19
    5a3e:	84 0b       	sbc	r24, r20
    5a40:	ba f0       	brmi	.+46     	; 0x5a70 <__addsf3x+0x98>
    5a42:	91 50       	subi	r25, 0x01	; 1
    5a44:	a1 f0       	breq	.+40     	; 0x5a6e <__addsf3x+0x96>
    5a46:	ff 0f       	add	r31, r31
    5a48:	bb 1f       	adc	r27, r27
    5a4a:	66 1f       	adc	r22, r22
    5a4c:	77 1f       	adc	r23, r23
    5a4e:	88 1f       	adc	r24, r24
    5a50:	c2 f7       	brpl	.-16     	; 0x5a42 <__addsf3x+0x6a>
    5a52:	0e c0       	rjmp	.+28     	; 0x5a70 <__addsf3x+0x98>
    5a54:	ba 0f       	add	r27, r26
    5a56:	62 1f       	adc	r22, r18
    5a58:	73 1f       	adc	r23, r19
    5a5a:	84 1f       	adc	r24, r20
    5a5c:	48 f4       	brcc	.+18     	; 0x5a70 <__addsf3x+0x98>
    5a5e:	87 95       	ror	r24
    5a60:	77 95       	ror	r23
    5a62:	67 95       	ror	r22
    5a64:	b7 95       	ror	r27
    5a66:	f7 95       	ror	r31
    5a68:	9e 3f       	cpi	r25, 0xFE	; 254
    5a6a:	08 f0       	brcs	.+2      	; 0x5a6e <__addsf3x+0x96>
    5a6c:	b3 cf       	rjmp	.-154    	; 0x59d4 <__addsf3+0x1e>
    5a6e:	93 95       	inc	r25
    5a70:	88 0f       	add	r24, r24
    5a72:	08 f0       	brcs	.+2      	; 0x5a76 <__addsf3x+0x9e>
    5a74:	99 27       	eor	r25, r25
    5a76:	ee 0f       	add	r30, r30
    5a78:	97 95       	ror	r25
    5a7a:	87 95       	ror	r24
    5a7c:	08 95       	ret

00005a7e <__cmpsf2>:
    5a7e:	d9 d0       	rcall	.+434    	; 0x5c32 <__fp_cmp>
    5a80:	08 f4       	brcc	.+2      	; 0x5a84 <__cmpsf2+0x6>
    5a82:	81 e0       	ldi	r24, 0x01	; 1
    5a84:	08 95       	ret

00005a86 <__divsf3>:
    5a86:	0c d0       	rcall	.+24     	; 0x5aa0 <__divsf3x>
    5a88:	0f c1       	rjmp	.+542    	; 0x5ca8 <__fp_round>
    5a8a:	07 d1       	rcall	.+526    	; 0x5c9a <__fp_pscB>
    5a8c:	40 f0       	brcs	.+16     	; 0x5a9e <__divsf3+0x18>
    5a8e:	fe d0       	rcall	.+508    	; 0x5c8c <__fp_pscA>
    5a90:	30 f0       	brcs	.+12     	; 0x5a9e <__divsf3+0x18>
    5a92:	21 f4       	brne	.+8      	; 0x5a9c <__divsf3+0x16>
    5a94:	5f 3f       	cpi	r21, 0xFF	; 255
    5a96:	19 f0       	breq	.+6      	; 0x5a9e <__divsf3+0x18>
    5a98:	f0 c0       	rjmp	.+480    	; 0x5c7a <__fp_inf>
    5a9a:	51 11       	cpse	r21, r1
    5a9c:	39 c1       	rjmp	.+626    	; 0x5d10 <__fp_szero>
    5a9e:	f3 c0       	rjmp	.+486    	; 0x5c86 <__fp_nan>

00005aa0 <__divsf3x>:
    5aa0:	14 d1       	rcall	.+552    	; 0x5cca <__fp_split3>
    5aa2:	98 f3       	brcs	.-26     	; 0x5a8a <__divsf3+0x4>

00005aa4 <__divsf3_pse>:
    5aa4:	99 23       	and	r25, r25
    5aa6:	c9 f3       	breq	.-14     	; 0x5a9a <__divsf3+0x14>
    5aa8:	55 23       	and	r21, r21
    5aaa:	b1 f3       	breq	.-20     	; 0x5a98 <__divsf3+0x12>
    5aac:	95 1b       	sub	r25, r21
    5aae:	55 0b       	sbc	r21, r21
    5ab0:	bb 27       	eor	r27, r27
    5ab2:	aa 27       	eor	r26, r26
    5ab4:	62 17       	cp	r22, r18
    5ab6:	73 07       	cpc	r23, r19
    5ab8:	84 07       	cpc	r24, r20
    5aba:	38 f0       	brcs	.+14     	; 0x5aca <__divsf3_pse+0x26>
    5abc:	9f 5f       	subi	r25, 0xFF	; 255
    5abe:	5f 4f       	sbci	r21, 0xFF	; 255
    5ac0:	22 0f       	add	r18, r18
    5ac2:	33 1f       	adc	r19, r19
    5ac4:	44 1f       	adc	r20, r20
    5ac6:	aa 1f       	adc	r26, r26
    5ac8:	a9 f3       	breq	.-22     	; 0x5ab4 <__divsf3_pse+0x10>
    5aca:	33 d0       	rcall	.+102    	; 0x5b32 <__divsf3_pse+0x8e>
    5acc:	0e 2e       	mov	r0, r30
    5ace:	3a f0       	brmi	.+14     	; 0x5ade <__divsf3_pse+0x3a>
    5ad0:	e0 e8       	ldi	r30, 0x80	; 128
    5ad2:	30 d0       	rcall	.+96     	; 0x5b34 <__divsf3_pse+0x90>
    5ad4:	91 50       	subi	r25, 0x01	; 1
    5ad6:	50 40       	sbci	r21, 0x00	; 0
    5ad8:	e6 95       	lsr	r30
    5ada:	00 1c       	adc	r0, r0
    5adc:	ca f7       	brpl	.-14     	; 0x5ad0 <__divsf3_pse+0x2c>
    5ade:	29 d0       	rcall	.+82     	; 0x5b32 <__divsf3_pse+0x8e>
    5ae0:	fe 2f       	mov	r31, r30
    5ae2:	27 d0       	rcall	.+78     	; 0x5b32 <__divsf3_pse+0x8e>
    5ae4:	66 0f       	add	r22, r22
    5ae6:	77 1f       	adc	r23, r23
    5ae8:	88 1f       	adc	r24, r24
    5aea:	bb 1f       	adc	r27, r27
    5aec:	26 17       	cp	r18, r22
    5aee:	37 07       	cpc	r19, r23
    5af0:	48 07       	cpc	r20, r24
    5af2:	ab 07       	cpc	r26, r27
    5af4:	b0 e8       	ldi	r27, 0x80	; 128
    5af6:	09 f0       	breq	.+2      	; 0x5afa <__divsf3_pse+0x56>
    5af8:	bb 0b       	sbc	r27, r27
    5afa:	80 2d       	mov	r24, r0
    5afc:	bf 01       	movw	r22, r30
    5afe:	ff 27       	eor	r31, r31
    5b00:	93 58       	subi	r25, 0x83	; 131
    5b02:	5f 4f       	sbci	r21, 0xFF	; 255
    5b04:	2a f0       	brmi	.+10     	; 0x5b10 <__divsf3_pse+0x6c>
    5b06:	9e 3f       	cpi	r25, 0xFE	; 254
    5b08:	51 05       	cpc	r21, r1
    5b0a:	68 f0       	brcs	.+26     	; 0x5b26 <__divsf3_pse+0x82>
    5b0c:	b6 c0       	rjmp	.+364    	; 0x5c7a <__fp_inf>
    5b0e:	00 c1       	rjmp	.+512    	; 0x5d10 <__fp_szero>
    5b10:	5f 3f       	cpi	r21, 0xFF	; 255
    5b12:	ec f3       	brlt	.-6      	; 0x5b0e <__divsf3_pse+0x6a>
    5b14:	98 3e       	cpi	r25, 0xE8	; 232
    5b16:	dc f3       	brlt	.-10     	; 0x5b0e <__divsf3_pse+0x6a>
    5b18:	86 95       	lsr	r24
    5b1a:	77 95       	ror	r23
    5b1c:	67 95       	ror	r22
    5b1e:	b7 95       	ror	r27
    5b20:	f7 95       	ror	r31
    5b22:	9f 5f       	subi	r25, 0xFF	; 255
    5b24:	c9 f7       	brne	.-14     	; 0x5b18 <__divsf3_pse+0x74>
    5b26:	88 0f       	add	r24, r24
    5b28:	91 1d       	adc	r25, r1
    5b2a:	96 95       	lsr	r25
    5b2c:	87 95       	ror	r24
    5b2e:	97 f9       	bld	r25, 7
    5b30:	08 95       	ret
    5b32:	e1 e0       	ldi	r30, 0x01	; 1
    5b34:	66 0f       	add	r22, r22
    5b36:	77 1f       	adc	r23, r23
    5b38:	88 1f       	adc	r24, r24
    5b3a:	bb 1f       	adc	r27, r27
    5b3c:	62 17       	cp	r22, r18
    5b3e:	73 07       	cpc	r23, r19
    5b40:	84 07       	cpc	r24, r20
    5b42:	ba 07       	cpc	r27, r26
    5b44:	20 f0       	brcs	.+8      	; 0x5b4e <__divsf3_pse+0xaa>
    5b46:	62 1b       	sub	r22, r18
    5b48:	73 0b       	sbc	r23, r19
    5b4a:	84 0b       	sbc	r24, r20
    5b4c:	ba 0b       	sbc	r27, r26
    5b4e:	ee 1f       	adc	r30, r30
    5b50:	88 f7       	brcc	.-30     	; 0x5b34 <__divsf3_pse+0x90>
    5b52:	e0 95       	com	r30
    5b54:	08 95       	ret

00005b56 <__fixsfsi>:
    5b56:	04 d0       	rcall	.+8      	; 0x5b60 <__fixunssfsi>
    5b58:	68 94       	set
    5b5a:	b1 11       	cpse	r27, r1
    5b5c:	d9 c0       	rjmp	.+434    	; 0x5d10 <__fp_szero>
    5b5e:	08 95       	ret

00005b60 <__fixunssfsi>:
    5b60:	bc d0       	rcall	.+376    	; 0x5cda <__fp_splitA>
    5b62:	88 f0       	brcs	.+34     	; 0x5b86 <__fixunssfsi+0x26>
    5b64:	9f 57       	subi	r25, 0x7F	; 127
    5b66:	90 f0       	brcs	.+36     	; 0x5b8c <__fixunssfsi+0x2c>
    5b68:	b9 2f       	mov	r27, r25
    5b6a:	99 27       	eor	r25, r25
    5b6c:	b7 51       	subi	r27, 0x17	; 23
    5b6e:	a0 f0       	brcs	.+40     	; 0x5b98 <__fixunssfsi+0x38>
    5b70:	d1 f0       	breq	.+52     	; 0x5ba6 <__fixunssfsi+0x46>
    5b72:	66 0f       	add	r22, r22
    5b74:	77 1f       	adc	r23, r23
    5b76:	88 1f       	adc	r24, r24
    5b78:	99 1f       	adc	r25, r25
    5b7a:	1a f0       	brmi	.+6      	; 0x5b82 <__fixunssfsi+0x22>
    5b7c:	ba 95       	dec	r27
    5b7e:	c9 f7       	brne	.-14     	; 0x5b72 <__fixunssfsi+0x12>
    5b80:	12 c0       	rjmp	.+36     	; 0x5ba6 <__fixunssfsi+0x46>
    5b82:	b1 30       	cpi	r27, 0x01	; 1
    5b84:	81 f0       	breq	.+32     	; 0x5ba6 <__fixunssfsi+0x46>
    5b86:	c3 d0       	rcall	.+390    	; 0x5d0e <__fp_zero>
    5b88:	b1 e0       	ldi	r27, 0x01	; 1
    5b8a:	08 95       	ret
    5b8c:	c0 c0       	rjmp	.+384    	; 0x5d0e <__fp_zero>
    5b8e:	67 2f       	mov	r22, r23
    5b90:	78 2f       	mov	r23, r24
    5b92:	88 27       	eor	r24, r24
    5b94:	b8 5f       	subi	r27, 0xF8	; 248
    5b96:	39 f0       	breq	.+14     	; 0x5ba6 <__fixunssfsi+0x46>
    5b98:	b9 3f       	cpi	r27, 0xF9	; 249
    5b9a:	cc f3       	brlt	.-14     	; 0x5b8e <__fixunssfsi+0x2e>
    5b9c:	86 95       	lsr	r24
    5b9e:	77 95       	ror	r23
    5ba0:	67 95       	ror	r22
    5ba2:	b3 95       	inc	r27
    5ba4:	d9 f7       	brne	.-10     	; 0x5b9c <__fixunssfsi+0x3c>
    5ba6:	3e f4       	brtc	.+14     	; 0x5bb6 <__fixunssfsi+0x56>
    5ba8:	90 95       	com	r25
    5baa:	80 95       	com	r24
    5bac:	70 95       	com	r23
    5bae:	61 95       	neg	r22
    5bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    5bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    5bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb6:	08 95       	ret

00005bb8 <__floatunsisf>:
    5bb8:	e8 94       	clt
    5bba:	09 c0       	rjmp	.+18     	; 0x5bce <__floatsisf+0x12>

00005bbc <__floatsisf>:
    5bbc:	97 fb       	bst	r25, 7
    5bbe:	3e f4       	brtc	.+14     	; 0x5bce <__floatsisf+0x12>
    5bc0:	90 95       	com	r25
    5bc2:	80 95       	com	r24
    5bc4:	70 95       	com	r23
    5bc6:	61 95       	neg	r22
    5bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    5bca:	8f 4f       	sbci	r24, 0xFF	; 255
    5bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    5bce:	99 23       	and	r25, r25
    5bd0:	a9 f0       	breq	.+42     	; 0x5bfc <__floatsisf+0x40>
    5bd2:	f9 2f       	mov	r31, r25
    5bd4:	96 e9       	ldi	r25, 0x96	; 150
    5bd6:	bb 27       	eor	r27, r27
    5bd8:	93 95       	inc	r25
    5bda:	f6 95       	lsr	r31
    5bdc:	87 95       	ror	r24
    5bde:	77 95       	ror	r23
    5be0:	67 95       	ror	r22
    5be2:	b7 95       	ror	r27
    5be4:	f1 11       	cpse	r31, r1
    5be6:	f8 cf       	rjmp	.-16     	; 0x5bd8 <__floatsisf+0x1c>
    5be8:	fa f4       	brpl	.+62     	; 0x5c28 <__floatsisf+0x6c>
    5bea:	bb 0f       	add	r27, r27
    5bec:	11 f4       	brne	.+4      	; 0x5bf2 <__floatsisf+0x36>
    5bee:	60 ff       	sbrs	r22, 0
    5bf0:	1b c0       	rjmp	.+54     	; 0x5c28 <__floatsisf+0x6c>
    5bf2:	6f 5f       	subi	r22, 0xFF	; 255
    5bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    5bf6:	8f 4f       	sbci	r24, 0xFF	; 255
    5bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bfa:	16 c0       	rjmp	.+44     	; 0x5c28 <__floatsisf+0x6c>
    5bfc:	88 23       	and	r24, r24
    5bfe:	11 f0       	breq	.+4      	; 0x5c04 <__floatsisf+0x48>
    5c00:	96 e9       	ldi	r25, 0x96	; 150
    5c02:	11 c0       	rjmp	.+34     	; 0x5c26 <__floatsisf+0x6a>
    5c04:	77 23       	and	r23, r23
    5c06:	21 f0       	breq	.+8      	; 0x5c10 <__floatsisf+0x54>
    5c08:	9e e8       	ldi	r25, 0x8E	; 142
    5c0a:	87 2f       	mov	r24, r23
    5c0c:	76 2f       	mov	r23, r22
    5c0e:	05 c0       	rjmp	.+10     	; 0x5c1a <__floatsisf+0x5e>
    5c10:	66 23       	and	r22, r22
    5c12:	71 f0       	breq	.+28     	; 0x5c30 <__floatsisf+0x74>
    5c14:	96 e8       	ldi	r25, 0x86	; 134
    5c16:	86 2f       	mov	r24, r22
    5c18:	70 e0       	ldi	r23, 0x00	; 0
    5c1a:	60 e0       	ldi	r22, 0x00	; 0
    5c1c:	2a f0       	brmi	.+10     	; 0x5c28 <__floatsisf+0x6c>
    5c1e:	9a 95       	dec	r25
    5c20:	66 0f       	add	r22, r22
    5c22:	77 1f       	adc	r23, r23
    5c24:	88 1f       	adc	r24, r24
    5c26:	da f7       	brpl	.-10     	; 0x5c1e <__floatsisf+0x62>
    5c28:	88 0f       	add	r24, r24
    5c2a:	96 95       	lsr	r25
    5c2c:	87 95       	ror	r24
    5c2e:	97 f9       	bld	r25, 7
    5c30:	08 95       	ret

00005c32 <__fp_cmp>:
    5c32:	99 0f       	add	r25, r25
    5c34:	00 08       	sbc	r0, r0
    5c36:	55 0f       	add	r21, r21
    5c38:	aa 0b       	sbc	r26, r26
    5c3a:	e0 e8       	ldi	r30, 0x80	; 128
    5c3c:	fe ef       	ldi	r31, 0xFE	; 254
    5c3e:	16 16       	cp	r1, r22
    5c40:	17 06       	cpc	r1, r23
    5c42:	e8 07       	cpc	r30, r24
    5c44:	f9 07       	cpc	r31, r25
    5c46:	c0 f0       	brcs	.+48     	; 0x5c78 <__fp_cmp+0x46>
    5c48:	12 16       	cp	r1, r18
    5c4a:	13 06       	cpc	r1, r19
    5c4c:	e4 07       	cpc	r30, r20
    5c4e:	f5 07       	cpc	r31, r21
    5c50:	98 f0       	brcs	.+38     	; 0x5c78 <__fp_cmp+0x46>
    5c52:	62 1b       	sub	r22, r18
    5c54:	73 0b       	sbc	r23, r19
    5c56:	84 0b       	sbc	r24, r20
    5c58:	95 0b       	sbc	r25, r21
    5c5a:	39 f4       	brne	.+14     	; 0x5c6a <__fp_cmp+0x38>
    5c5c:	0a 26       	eor	r0, r26
    5c5e:	61 f0       	breq	.+24     	; 0x5c78 <__fp_cmp+0x46>
    5c60:	23 2b       	or	r18, r19
    5c62:	24 2b       	or	r18, r20
    5c64:	25 2b       	or	r18, r21
    5c66:	21 f4       	brne	.+8      	; 0x5c70 <__fp_cmp+0x3e>
    5c68:	08 95       	ret
    5c6a:	0a 26       	eor	r0, r26
    5c6c:	09 f4       	brne	.+2      	; 0x5c70 <__fp_cmp+0x3e>
    5c6e:	a1 40       	sbci	r26, 0x01	; 1
    5c70:	a6 95       	lsr	r26
    5c72:	8f ef       	ldi	r24, 0xFF	; 255
    5c74:	81 1d       	adc	r24, r1
    5c76:	81 1d       	adc	r24, r1
    5c78:	08 95       	ret

00005c7a <__fp_inf>:
    5c7a:	97 f9       	bld	r25, 7
    5c7c:	9f 67       	ori	r25, 0x7F	; 127
    5c7e:	80 e8       	ldi	r24, 0x80	; 128
    5c80:	70 e0       	ldi	r23, 0x00	; 0
    5c82:	60 e0       	ldi	r22, 0x00	; 0
    5c84:	08 95       	ret

00005c86 <__fp_nan>:
    5c86:	9f ef       	ldi	r25, 0xFF	; 255
    5c88:	80 ec       	ldi	r24, 0xC0	; 192
    5c8a:	08 95       	ret

00005c8c <__fp_pscA>:
    5c8c:	00 24       	eor	r0, r0
    5c8e:	0a 94       	dec	r0
    5c90:	16 16       	cp	r1, r22
    5c92:	17 06       	cpc	r1, r23
    5c94:	18 06       	cpc	r1, r24
    5c96:	09 06       	cpc	r0, r25
    5c98:	08 95       	ret

00005c9a <__fp_pscB>:
    5c9a:	00 24       	eor	r0, r0
    5c9c:	0a 94       	dec	r0
    5c9e:	12 16       	cp	r1, r18
    5ca0:	13 06       	cpc	r1, r19
    5ca2:	14 06       	cpc	r1, r20
    5ca4:	05 06       	cpc	r0, r21
    5ca6:	08 95       	ret

00005ca8 <__fp_round>:
    5ca8:	09 2e       	mov	r0, r25
    5caa:	03 94       	inc	r0
    5cac:	00 0c       	add	r0, r0
    5cae:	11 f4       	brne	.+4      	; 0x5cb4 <__fp_round+0xc>
    5cb0:	88 23       	and	r24, r24
    5cb2:	52 f0       	brmi	.+20     	; 0x5cc8 <__fp_round+0x20>
    5cb4:	bb 0f       	add	r27, r27
    5cb6:	40 f4       	brcc	.+16     	; 0x5cc8 <__fp_round+0x20>
    5cb8:	bf 2b       	or	r27, r31
    5cba:	11 f4       	brne	.+4      	; 0x5cc0 <__fp_round+0x18>
    5cbc:	60 ff       	sbrs	r22, 0
    5cbe:	04 c0       	rjmp	.+8      	; 0x5cc8 <__fp_round+0x20>
    5cc0:	6f 5f       	subi	r22, 0xFF	; 255
    5cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    5cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc8:	08 95       	ret

00005cca <__fp_split3>:
    5cca:	57 fd       	sbrc	r21, 7
    5ccc:	90 58       	subi	r25, 0x80	; 128
    5cce:	44 0f       	add	r20, r20
    5cd0:	55 1f       	adc	r21, r21
    5cd2:	59 f0       	breq	.+22     	; 0x5cea <__fp_splitA+0x10>
    5cd4:	5f 3f       	cpi	r21, 0xFF	; 255
    5cd6:	71 f0       	breq	.+28     	; 0x5cf4 <__fp_splitA+0x1a>
    5cd8:	47 95       	ror	r20

00005cda <__fp_splitA>:
    5cda:	88 0f       	add	r24, r24
    5cdc:	97 fb       	bst	r25, 7
    5cde:	99 1f       	adc	r25, r25
    5ce0:	61 f0       	breq	.+24     	; 0x5cfa <__fp_splitA+0x20>
    5ce2:	9f 3f       	cpi	r25, 0xFF	; 255
    5ce4:	79 f0       	breq	.+30     	; 0x5d04 <__fp_splitA+0x2a>
    5ce6:	87 95       	ror	r24
    5ce8:	08 95       	ret
    5cea:	12 16       	cp	r1, r18
    5cec:	13 06       	cpc	r1, r19
    5cee:	14 06       	cpc	r1, r20
    5cf0:	55 1f       	adc	r21, r21
    5cf2:	f2 cf       	rjmp	.-28     	; 0x5cd8 <__fp_split3+0xe>
    5cf4:	46 95       	lsr	r20
    5cf6:	f1 df       	rcall	.-30     	; 0x5cda <__fp_splitA>
    5cf8:	08 c0       	rjmp	.+16     	; 0x5d0a <__fp_splitA+0x30>
    5cfa:	16 16       	cp	r1, r22
    5cfc:	17 06       	cpc	r1, r23
    5cfe:	18 06       	cpc	r1, r24
    5d00:	99 1f       	adc	r25, r25
    5d02:	f1 cf       	rjmp	.-30     	; 0x5ce6 <__fp_splitA+0xc>
    5d04:	86 95       	lsr	r24
    5d06:	71 05       	cpc	r23, r1
    5d08:	61 05       	cpc	r22, r1
    5d0a:	08 94       	sec
    5d0c:	08 95       	ret

00005d0e <__fp_zero>:
    5d0e:	e8 94       	clt

00005d10 <__fp_szero>:
    5d10:	bb 27       	eor	r27, r27
    5d12:	66 27       	eor	r22, r22
    5d14:	77 27       	eor	r23, r23
    5d16:	cb 01       	movw	r24, r22
    5d18:	97 f9       	bld	r25, 7
    5d1a:	08 95       	ret

00005d1c <__gesf2>:
    5d1c:	8a df       	rcall	.-236    	; 0x5c32 <__fp_cmp>
    5d1e:	08 f4       	brcc	.+2      	; 0x5d22 <__gesf2+0x6>
    5d20:	8f ef       	ldi	r24, 0xFF	; 255
    5d22:	08 95       	ret

00005d24 <__mulsf3>:
    5d24:	0b d0       	rcall	.+22     	; 0x5d3c <__mulsf3x>
    5d26:	c0 cf       	rjmp	.-128    	; 0x5ca8 <__fp_round>
    5d28:	b1 df       	rcall	.-158    	; 0x5c8c <__fp_pscA>
    5d2a:	28 f0       	brcs	.+10     	; 0x5d36 <__mulsf3+0x12>
    5d2c:	b6 df       	rcall	.-148    	; 0x5c9a <__fp_pscB>
    5d2e:	18 f0       	brcs	.+6      	; 0x5d36 <__mulsf3+0x12>
    5d30:	95 23       	and	r25, r21
    5d32:	09 f0       	breq	.+2      	; 0x5d36 <__mulsf3+0x12>
    5d34:	a2 cf       	rjmp	.-188    	; 0x5c7a <__fp_inf>
    5d36:	a7 cf       	rjmp	.-178    	; 0x5c86 <__fp_nan>
    5d38:	11 24       	eor	r1, r1
    5d3a:	ea cf       	rjmp	.-44     	; 0x5d10 <__fp_szero>

00005d3c <__mulsf3x>:
    5d3c:	c6 df       	rcall	.-116    	; 0x5cca <__fp_split3>
    5d3e:	a0 f3       	brcs	.-24     	; 0x5d28 <__mulsf3+0x4>

00005d40 <__mulsf3_pse>:
    5d40:	95 9f       	mul	r25, r21
    5d42:	d1 f3       	breq	.-12     	; 0x5d38 <__mulsf3+0x14>
    5d44:	95 0f       	add	r25, r21
    5d46:	50 e0       	ldi	r21, 0x00	; 0
    5d48:	55 1f       	adc	r21, r21
    5d4a:	62 9f       	mul	r22, r18
    5d4c:	f0 01       	movw	r30, r0
    5d4e:	72 9f       	mul	r23, r18
    5d50:	bb 27       	eor	r27, r27
    5d52:	f0 0d       	add	r31, r0
    5d54:	b1 1d       	adc	r27, r1
    5d56:	63 9f       	mul	r22, r19
    5d58:	aa 27       	eor	r26, r26
    5d5a:	f0 0d       	add	r31, r0
    5d5c:	b1 1d       	adc	r27, r1
    5d5e:	aa 1f       	adc	r26, r26
    5d60:	64 9f       	mul	r22, r20
    5d62:	66 27       	eor	r22, r22
    5d64:	b0 0d       	add	r27, r0
    5d66:	a1 1d       	adc	r26, r1
    5d68:	66 1f       	adc	r22, r22
    5d6a:	82 9f       	mul	r24, r18
    5d6c:	22 27       	eor	r18, r18
    5d6e:	b0 0d       	add	r27, r0
    5d70:	a1 1d       	adc	r26, r1
    5d72:	62 1f       	adc	r22, r18
    5d74:	73 9f       	mul	r23, r19
    5d76:	b0 0d       	add	r27, r0
    5d78:	a1 1d       	adc	r26, r1
    5d7a:	62 1f       	adc	r22, r18
    5d7c:	83 9f       	mul	r24, r19
    5d7e:	a0 0d       	add	r26, r0
    5d80:	61 1d       	adc	r22, r1
    5d82:	22 1f       	adc	r18, r18
    5d84:	74 9f       	mul	r23, r20
    5d86:	33 27       	eor	r19, r19
    5d88:	a0 0d       	add	r26, r0
    5d8a:	61 1d       	adc	r22, r1
    5d8c:	23 1f       	adc	r18, r19
    5d8e:	84 9f       	mul	r24, r20
    5d90:	60 0d       	add	r22, r0
    5d92:	21 1d       	adc	r18, r1
    5d94:	82 2f       	mov	r24, r18
    5d96:	76 2f       	mov	r23, r22
    5d98:	6a 2f       	mov	r22, r26
    5d9a:	11 24       	eor	r1, r1
    5d9c:	9f 57       	subi	r25, 0x7F	; 127
    5d9e:	50 40       	sbci	r21, 0x00	; 0
    5da0:	8a f0       	brmi	.+34     	; 0x5dc4 <__mulsf3_pse+0x84>
    5da2:	e1 f0       	breq	.+56     	; 0x5ddc <__mulsf3_pse+0x9c>
    5da4:	88 23       	and	r24, r24
    5da6:	4a f0       	brmi	.+18     	; 0x5dba <__mulsf3_pse+0x7a>
    5da8:	ee 0f       	add	r30, r30
    5daa:	ff 1f       	adc	r31, r31
    5dac:	bb 1f       	adc	r27, r27
    5dae:	66 1f       	adc	r22, r22
    5db0:	77 1f       	adc	r23, r23
    5db2:	88 1f       	adc	r24, r24
    5db4:	91 50       	subi	r25, 0x01	; 1
    5db6:	50 40       	sbci	r21, 0x00	; 0
    5db8:	a9 f7       	brne	.-22     	; 0x5da4 <__mulsf3_pse+0x64>
    5dba:	9e 3f       	cpi	r25, 0xFE	; 254
    5dbc:	51 05       	cpc	r21, r1
    5dbe:	70 f0       	brcs	.+28     	; 0x5ddc <__mulsf3_pse+0x9c>
    5dc0:	5c cf       	rjmp	.-328    	; 0x5c7a <__fp_inf>
    5dc2:	a6 cf       	rjmp	.-180    	; 0x5d10 <__fp_szero>
    5dc4:	5f 3f       	cpi	r21, 0xFF	; 255
    5dc6:	ec f3       	brlt	.-6      	; 0x5dc2 <__mulsf3_pse+0x82>
    5dc8:	98 3e       	cpi	r25, 0xE8	; 232
    5dca:	dc f3       	brlt	.-10     	; 0x5dc2 <__mulsf3_pse+0x82>
    5dcc:	86 95       	lsr	r24
    5dce:	77 95       	ror	r23
    5dd0:	67 95       	ror	r22
    5dd2:	b7 95       	ror	r27
    5dd4:	f7 95       	ror	r31
    5dd6:	e7 95       	ror	r30
    5dd8:	9f 5f       	subi	r25, 0xFF	; 255
    5dda:	c1 f7       	brne	.-16     	; 0x5dcc <__mulsf3_pse+0x8c>
    5ddc:	fe 2b       	or	r31, r30
    5dde:	88 0f       	add	r24, r24
    5de0:	91 1d       	adc	r25, r1
    5de2:	96 95       	lsr	r25
    5de4:	87 95       	ror	r24
    5de6:	97 f9       	bld	r25, 7
    5de8:	08 95       	ret

00005dea <pow>:
    5dea:	fa 01       	movw	r30, r20
    5dec:	ee 0f       	add	r30, r30
    5dee:	ff 1f       	adc	r31, r31
    5df0:	30 96       	adiw	r30, 0x00	; 0
    5df2:	21 05       	cpc	r18, r1
    5df4:	31 05       	cpc	r19, r1
    5df6:	99 f1       	breq	.+102    	; 0x5e5e <pow+0x74>
    5df8:	61 15       	cp	r22, r1
    5dfa:	71 05       	cpc	r23, r1
    5dfc:	61 f4       	brne	.+24     	; 0x5e16 <pow+0x2c>
    5dfe:	80 38       	cpi	r24, 0x80	; 128
    5e00:	bf e3       	ldi	r27, 0x3F	; 63
    5e02:	9b 07       	cpc	r25, r27
    5e04:	49 f1       	breq	.+82     	; 0x5e58 <pow+0x6e>
    5e06:	68 94       	set
    5e08:	90 38       	cpi	r25, 0x80	; 128
    5e0a:	81 05       	cpc	r24, r1
    5e0c:	61 f0       	breq	.+24     	; 0x5e26 <pow+0x3c>
    5e0e:	80 38       	cpi	r24, 0x80	; 128
    5e10:	bf ef       	ldi	r27, 0xFF	; 255
    5e12:	9b 07       	cpc	r25, r27
    5e14:	41 f0       	breq	.+16     	; 0x5e26 <pow+0x3c>
    5e16:	99 23       	and	r25, r25
    5e18:	42 f5       	brpl	.+80     	; 0x5e6a <pow+0x80>
    5e1a:	ff 3f       	cpi	r31, 0xFF	; 255
    5e1c:	e1 05       	cpc	r30, r1
    5e1e:	31 05       	cpc	r19, r1
    5e20:	21 05       	cpc	r18, r1
    5e22:	11 f1       	breq	.+68     	; 0x5e68 <pow+0x7e>
    5e24:	e8 94       	clt
    5e26:	08 94       	sec
    5e28:	e7 95       	ror	r30
    5e2a:	d9 01       	movw	r26, r18
    5e2c:	aa 23       	and	r26, r26
    5e2e:	29 f4       	brne	.+10     	; 0x5e3a <pow+0x50>
    5e30:	ab 2f       	mov	r26, r27
    5e32:	be 2f       	mov	r27, r30
    5e34:	f8 5f       	subi	r31, 0xF8	; 248
    5e36:	d0 f3       	brcs	.-12     	; 0x5e2c <pow+0x42>
    5e38:	10 c0       	rjmp	.+32     	; 0x5e5a <pow+0x70>
    5e3a:	ff 5f       	subi	r31, 0xFF	; 255
    5e3c:	70 f4       	brcc	.+28     	; 0x5e5a <pow+0x70>
    5e3e:	a6 95       	lsr	r26
    5e40:	e0 f7       	brcc	.-8      	; 0x5e3a <pow+0x50>
    5e42:	f7 39       	cpi	r31, 0x97	; 151
    5e44:	50 f0       	brcs	.+20     	; 0x5e5a <pow+0x70>
    5e46:	19 f0       	breq	.+6      	; 0x5e4e <pow+0x64>
    5e48:	ff 3a       	cpi	r31, 0xAF	; 175
    5e4a:	38 f4       	brcc	.+14     	; 0x5e5a <pow+0x70>
    5e4c:	9f 77       	andi	r25, 0x7F	; 127
    5e4e:	9f 93       	push	r25
    5e50:	0c d0       	rcall	.+24     	; 0x5e6a <pow+0x80>
    5e52:	0f 90       	pop	r0
    5e54:	07 fc       	sbrc	r0, 7
    5e56:	90 58       	subi	r25, 0x80	; 128
    5e58:	08 95       	ret
    5e5a:	3e f0       	brts	.+14     	; 0x5e6a <pow+0x80>
    5e5c:	14 cf       	rjmp	.-472    	; 0x5c86 <__fp_nan>
    5e5e:	60 e0       	ldi	r22, 0x00	; 0
    5e60:	70 e0       	ldi	r23, 0x00	; 0
    5e62:	80 e8       	ldi	r24, 0x80	; 128
    5e64:	9f e3       	ldi	r25, 0x3F	; 63
    5e66:	08 95       	ret
    5e68:	4f e7       	ldi	r20, 0x7F	; 127
    5e6a:	9f 77       	andi	r25, 0x7F	; 127
    5e6c:	5f 93       	push	r21
    5e6e:	4f 93       	push	r20
    5e70:	3f 93       	push	r19
    5e72:	2f 93       	push	r18
    5e74:	03 d1       	rcall	.+518    	; 0x607c <log>
    5e76:	2f 91       	pop	r18
    5e78:	3f 91       	pop	r19
    5e7a:	4f 91       	pop	r20
    5e7c:	5f 91       	pop	r21
    5e7e:	52 df       	rcall	.-348    	; 0x5d24 <__mulsf3>
    5e80:	53 c0       	rjmp	.+166    	; 0x5f28 <exp>
    5e82:	11 f4       	brne	.+4      	; 0x5e88 <pow+0x9e>
    5e84:	0e f4       	brtc	.+2      	; 0x5e88 <pow+0x9e>
    5e86:	ff ce       	rjmp	.-514    	; 0x5c86 <__fp_nan>
    5e88:	7b c0       	rjmp	.+246    	; 0x5f80 <__fp_mpack>

00005e8a <sqrt>:
    5e8a:	27 df       	rcall	.-434    	; 0x5cda <__fp_splitA>
    5e8c:	d0 f3       	brcs	.-12     	; 0x5e82 <pow+0x98>
    5e8e:	99 23       	and	r25, r25
    5e90:	d9 f3       	breq	.-10     	; 0x5e88 <pow+0x9e>
    5e92:	ce f3       	brts	.-14     	; 0x5e86 <pow+0x9c>
    5e94:	9f 57       	subi	r25, 0x7F	; 127
    5e96:	55 0b       	sbc	r21, r21
    5e98:	87 ff       	sbrs	r24, 7
    5e9a:	82 d0       	rcall	.+260    	; 0x5fa0 <__fp_norm2>
    5e9c:	56 95       	lsr	r21
    5e9e:	97 95       	ror	r25
    5ea0:	b0 e0       	ldi	r27, 0x00	; 0
    5ea2:	20 f4       	brcc	.+8      	; 0x5eac <sqrt+0x22>
    5ea4:	66 0f       	add	r22, r22
    5ea6:	77 1f       	adc	r23, r23
    5ea8:	88 1f       	adc	r24, r24
    5eaa:	bb 1f       	adc	r27, r27
    5eac:	1f 93       	push	r17
    5eae:	0f 93       	push	r16
    5eb0:	00 24       	eor	r0, r0
    5eb2:	90 01       	movw	r18, r0
    5eb4:	a0 01       	movw	r20, r0
    5eb6:	80 01       	movw	r16, r0
    5eb8:	f0 01       	movw	r30, r0
    5eba:	a0 e8       	ldi	r26, 0x80	; 128
    5ebc:	0e 0f       	add	r16, r30
    5ebe:	1f 1f       	adc	r17, r31
    5ec0:	0a 1e       	adc	r0, r26
    5ec2:	51 1d       	adc	r21, r1
    5ec4:	60 1b       	sub	r22, r16
    5ec6:	71 0b       	sbc	r23, r17
    5ec8:	80 09       	sbc	r24, r0
    5eca:	b5 0b       	sbc	r27, r21
    5ecc:	48 f4       	brcc	.+18     	; 0x5ee0 <sqrt+0x56>
    5ece:	60 0f       	add	r22, r16
    5ed0:	71 1f       	adc	r23, r17
    5ed2:	80 1d       	adc	r24, r0
    5ed4:	b5 1f       	adc	r27, r21
    5ed6:	0e 1b       	sub	r16, r30
    5ed8:	1f 0b       	sbc	r17, r31
    5eda:	0a 0a       	sbc	r0, r26
    5edc:	51 09       	sbc	r21, r1
    5ede:	07 c0       	rjmp	.+14     	; 0x5eee <sqrt+0x64>
    5ee0:	2e 0f       	add	r18, r30
    5ee2:	3f 1f       	adc	r19, r31
    5ee4:	4a 1f       	adc	r20, r26
    5ee6:	0e 0f       	add	r16, r30
    5ee8:	1f 1f       	adc	r17, r31
    5eea:	0a 1e       	adc	r0, r26
    5eec:	51 1d       	adc	r21, r1
    5eee:	66 0f       	add	r22, r22
    5ef0:	77 1f       	adc	r23, r23
    5ef2:	88 1f       	adc	r24, r24
    5ef4:	bb 1f       	adc	r27, r27
    5ef6:	a6 95       	lsr	r26
    5ef8:	f7 95       	ror	r31
    5efa:	e7 95       	ror	r30
    5efc:	f8 f6       	brcc	.-66     	; 0x5ebc <sqrt+0x32>
    5efe:	06 17       	cp	r16, r22
    5f00:	17 07       	cpc	r17, r23
    5f02:	08 06       	cpc	r0, r24
    5f04:	5b 07       	cpc	r21, r27
    5f06:	21 1d       	adc	r18, r1
    5f08:	31 1d       	adc	r19, r1
    5f0a:	41 1d       	adc	r20, r1
    5f0c:	0f 91       	pop	r16
    5f0e:	1f 91       	pop	r17
    5f10:	b9 01       	movw	r22, r18
    5f12:	84 2f       	mov	r24, r20
    5f14:	91 58       	subi	r25, 0x81	; 129
    5f16:	88 0f       	add	r24, r24
    5f18:	96 95       	lsr	r25
    5f1a:	87 95       	ror	r24
    5f1c:	08 95       	ret
    5f1e:	19 f4       	brne	.+6      	; 0x5f26 <sqrt+0x9c>
    5f20:	0e f0       	brts	.+2      	; 0x5f24 <sqrt+0x9a>
    5f22:	ab ce       	rjmp	.-682    	; 0x5c7a <__fp_inf>
    5f24:	f4 ce       	rjmp	.-536    	; 0x5d0e <__fp_zero>
    5f26:	af ce       	rjmp	.-674    	; 0x5c86 <__fp_nan>

00005f28 <exp>:
    5f28:	d8 de       	rcall	.-592    	; 0x5cda <__fp_splitA>
    5f2a:	c8 f3       	brcs	.-14     	; 0x5f1e <sqrt+0x94>
    5f2c:	96 38       	cpi	r25, 0x86	; 134
    5f2e:	c0 f7       	brcc	.-16     	; 0x5f20 <sqrt+0x96>
    5f30:	07 f8       	bld	r0, 7
    5f32:	0f 92       	push	r0
    5f34:	e8 94       	clt
    5f36:	2b e3       	ldi	r18, 0x3B	; 59
    5f38:	3a ea       	ldi	r19, 0xAA	; 170
    5f3a:	48 eb       	ldi	r20, 0xB8	; 184
    5f3c:	5f e7       	ldi	r21, 0x7F	; 127
    5f3e:	00 df       	rcall	.-512    	; 0x5d40 <__mulsf3_pse>
    5f40:	0f 92       	push	r0
    5f42:	0f 92       	push	r0
    5f44:	0f 92       	push	r0
    5f46:	4d b7       	in	r20, 0x3d	; 61
    5f48:	5e b7       	in	r21, 0x3e	; 62
    5f4a:	0f 92       	push	r0
    5f4c:	d7 d0       	rcall	.+430    	; 0x60fc <modf>
    5f4e:	e4 ee       	ldi	r30, 0xE4	; 228
    5f50:	f0 e0       	ldi	r31, 0x00	; 0
    5f52:	2d d0       	rcall	.+90     	; 0x5fae <__fp_powser>
    5f54:	4f 91       	pop	r20
    5f56:	5f 91       	pop	r21
    5f58:	ef 91       	pop	r30
    5f5a:	ff 91       	pop	r31
    5f5c:	e5 95       	asr	r30
    5f5e:	ee 1f       	adc	r30, r30
    5f60:	ff 1f       	adc	r31, r31
    5f62:	49 f0       	breq	.+18     	; 0x5f76 <exp+0x4e>
    5f64:	fe 57       	subi	r31, 0x7E	; 126
    5f66:	e0 68       	ori	r30, 0x80	; 128
    5f68:	44 27       	eor	r20, r20
    5f6a:	ee 0f       	add	r30, r30
    5f6c:	44 1f       	adc	r20, r20
    5f6e:	fa 95       	dec	r31
    5f70:	e1 f7       	brne	.-8      	; 0x5f6a <exp+0x42>
    5f72:	41 95       	neg	r20
    5f74:	55 0b       	sbc	r21, r21
    5f76:	49 d0       	rcall	.+146    	; 0x600a <ldexp>
    5f78:	0f 90       	pop	r0
    5f7a:	07 fe       	sbrs	r0, 7
    5f7c:	3d c0       	rjmp	.+122    	; 0x5ff8 <inverse>
    5f7e:	08 95       	ret

00005f80 <__fp_mpack>:
    5f80:	9f 3f       	cpi	r25, 0xFF	; 255
    5f82:	49 f0       	breq	.+18     	; 0x5f96 <__fp_mpack+0x16>
    5f84:	91 50       	subi	r25, 0x01	; 1
    5f86:	28 f4       	brcc	.+10     	; 0x5f92 <__fp_mpack+0x12>
    5f88:	86 95       	lsr	r24
    5f8a:	77 95       	ror	r23
    5f8c:	67 95       	ror	r22
    5f8e:	b7 95       	ror	r27
    5f90:	9f 5f       	subi	r25, 0xFF	; 255
    5f92:	80 38       	cpi	r24, 0x80	; 128
    5f94:	9f 4f       	sbci	r25, 0xFF	; 255
    5f96:	88 0f       	add	r24, r24
    5f98:	96 95       	lsr	r25
    5f9a:	87 95       	ror	r24
    5f9c:	97 f9       	bld	r25, 7
    5f9e:	08 95       	ret

00005fa0 <__fp_norm2>:
    5fa0:	91 50       	subi	r25, 0x01	; 1
    5fa2:	50 40       	sbci	r21, 0x00	; 0
    5fa4:	66 0f       	add	r22, r22
    5fa6:	77 1f       	adc	r23, r23
    5fa8:	88 1f       	adc	r24, r24
    5faa:	d2 f7       	brpl	.-12     	; 0x5fa0 <__fp_norm2>
    5fac:	08 95       	ret

00005fae <__fp_powser>:
    5fae:	df 93       	push	r29
    5fb0:	cf 93       	push	r28
    5fb2:	1f 93       	push	r17
    5fb4:	0f 93       	push	r16
    5fb6:	ff 92       	push	r15
    5fb8:	ef 92       	push	r14
    5fba:	df 92       	push	r13
    5fbc:	7b 01       	movw	r14, r22
    5fbe:	8c 01       	movw	r16, r24
    5fc0:	68 94       	set
    5fc2:	05 c0       	rjmp	.+10     	; 0x5fce <__fp_powser+0x20>
    5fc4:	da 2e       	mov	r13, r26
    5fc6:	ef 01       	movw	r28, r30
    5fc8:	b9 de       	rcall	.-654    	; 0x5d3c <__mulsf3x>
    5fca:	fe 01       	movw	r30, r28
    5fcc:	e8 94       	clt
    5fce:	a5 91       	lpm	r26, Z+
    5fd0:	25 91       	lpm	r18, Z+
    5fd2:	35 91       	lpm	r19, Z+
    5fd4:	45 91       	lpm	r20, Z+
    5fd6:	55 91       	lpm	r21, Z+
    5fd8:	ae f3       	brts	.-22     	; 0x5fc4 <__fp_powser+0x16>
    5fda:	ef 01       	movw	r28, r30
    5fdc:	fd dc       	rcall	.-1542   	; 0x59d8 <__addsf3x>
    5fde:	fe 01       	movw	r30, r28
    5fe0:	97 01       	movw	r18, r14
    5fe2:	a8 01       	movw	r20, r16
    5fe4:	da 94       	dec	r13
    5fe6:	79 f7       	brne	.-34     	; 0x5fc6 <__fp_powser+0x18>
    5fe8:	df 90       	pop	r13
    5fea:	ef 90       	pop	r14
    5fec:	ff 90       	pop	r15
    5fee:	0f 91       	pop	r16
    5ff0:	1f 91       	pop	r17
    5ff2:	cf 91       	pop	r28
    5ff4:	df 91       	pop	r29
    5ff6:	08 95       	ret

00005ff8 <inverse>:
    5ff8:	9b 01       	movw	r18, r22
    5ffa:	ac 01       	movw	r20, r24
    5ffc:	60 e0       	ldi	r22, 0x00	; 0
    5ffe:	70 e0       	ldi	r23, 0x00	; 0
    6000:	80 e8       	ldi	r24, 0x80	; 128
    6002:	9f e3       	ldi	r25, 0x3F	; 63
    6004:	40 cd       	rjmp	.-1408   	; 0x5a86 <__divsf3>
    6006:	39 ce       	rjmp	.-910    	; 0x5c7a <__fp_inf>
    6008:	bb cf       	rjmp	.-138    	; 0x5f80 <__fp_mpack>

0000600a <ldexp>:
    600a:	67 de       	rcall	.-818    	; 0x5cda <__fp_splitA>
    600c:	e8 f3       	brcs	.-6      	; 0x6008 <inverse+0x10>
    600e:	99 23       	and	r25, r25
    6010:	d9 f3       	breq	.-10     	; 0x6008 <inverse+0x10>
    6012:	94 0f       	add	r25, r20
    6014:	51 1d       	adc	r21, r1
    6016:	bb f3       	brvs	.-18     	; 0x6006 <inverse+0xe>
    6018:	91 50       	subi	r25, 0x01	; 1
    601a:	50 40       	sbci	r21, 0x00	; 0
    601c:	94 f0       	brlt	.+36     	; 0x6042 <ldexp+0x38>
    601e:	59 f0       	breq	.+22     	; 0x6036 <ldexp+0x2c>
    6020:	88 23       	and	r24, r24
    6022:	32 f0       	brmi	.+12     	; 0x6030 <ldexp+0x26>
    6024:	66 0f       	add	r22, r22
    6026:	77 1f       	adc	r23, r23
    6028:	88 1f       	adc	r24, r24
    602a:	91 50       	subi	r25, 0x01	; 1
    602c:	50 40       	sbci	r21, 0x00	; 0
    602e:	c1 f7       	brne	.-16     	; 0x6020 <ldexp+0x16>
    6030:	9e 3f       	cpi	r25, 0xFE	; 254
    6032:	51 05       	cpc	r21, r1
    6034:	44 f7       	brge	.-48     	; 0x6006 <inverse+0xe>
    6036:	88 0f       	add	r24, r24
    6038:	91 1d       	adc	r25, r1
    603a:	96 95       	lsr	r25
    603c:	87 95       	ror	r24
    603e:	97 f9       	bld	r25, 7
    6040:	08 95       	ret
    6042:	5f 3f       	cpi	r21, 0xFF	; 255
    6044:	ac f0       	brlt	.+42     	; 0x6070 <ldexp+0x66>
    6046:	98 3e       	cpi	r25, 0xE8	; 232
    6048:	9c f0       	brlt	.+38     	; 0x6070 <ldexp+0x66>
    604a:	bb 27       	eor	r27, r27
    604c:	86 95       	lsr	r24
    604e:	77 95       	ror	r23
    6050:	67 95       	ror	r22
    6052:	b7 95       	ror	r27
    6054:	08 f4       	brcc	.+2      	; 0x6058 <ldexp+0x4e>
    6056:	b1 60       	ori	r27, 0x01	; 1
    6058:	93 95       	inc	r25
    605a:	c1 f7       	brne	.-16     	; 0x604c <ldexp+0x42>
    605c:	bb 0f       	add	r27, r27
    605e:	58 f7       	brcc	.-42     	; 0x6036 <ldexp+0x2c>
    6060:	11 f4       	brne	.+4      	; 0x6066 <ldexp+0x5c>
    6062:	60 ff       	sbrs	r22, 0
    6064:	e8 cf       	rjmp	.-48     	; 0x6036 <ldexp+0x2c>
    6066:	6f 5f       	subi	r22, 0xFF	; 255
    6068:	7f 4f       	sbci	r23, 0xFF	; 255
    606a:	8f 4f       	sbci	r24, 0xFF	; 255
    606c:	9f 4f       	sbci	r25, 0xFF	; 255
    606e:	e3 cf       	rjmp	.-58     	; 0x6036 <ldexp+0x2c>
    6070:	4f ce       	rjmp	.-866    	; 0x5d10 <__fp_szero>
    6072:	0e f0       	brts	.+2      	; 0x6076 <ldexp+0x6c>
    6074:	85 cf       	rjmp	.-246    	; 0x5f80 <__fp_mpack>
    6076:	07 ce       	rjmp	.-1010   	; 0x5c86 <__fp_nan>
    6078:	68 94       	set
    607a:	ff cd       	rjmp	.-1026   	; 0x5c7a <__fp_inf>

0000607c <log>:
    607c:	2e de       	rcall	.-932    	; 0x5cda <__fp_splitA>
    607e:	c8 f3       	brcs	.-14     	; 0x6072 <ldexp+0x68>
    6080:	99 23       	and	r25, r25
    6082:	d1 f3       	breq	.-12     	; 0x6078 <ldexp+0x6e>
    6084:	c6 f3       	brts	.-16     	; 0x6076 <ldexp+0x6c>
    6086:	df 93       	push	r29
    6088:	cf 93       	push	r28
    608a:	1f 93       	push	r17
    608c:	0f 93       	push	r16
    608e:	ff 92       	push	r15
    6090:	c9 2f       	mov	r28, r25
    6092:	dd 27       	eor	r29, r29
    6094:	88 23       	and	r24, r24
    6096:	2a f0       	brmi	.+10     	; 0x60a2 <log+0x26>
    6098:	21 97       	sbiw	r28, 0x01	; 1
    609a:	66 0f       	add	r22, r22
    609c:	77 1f       	adc	r23, r23
    609e:	88 1f       	adc	r24, r24
    60a0:	da f7       	brpl	.-10     	; 0x6098 <log+0x1c>
    60a2:	20 e0       	ldi	r18, 0x00	; 0
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	40 e8       	ldi	r20, 0x80	; 128
    60a8:	5f eb       	ldi	r21, 0xBF	; 191
    60aa:	9f e3       	ldi	r25, 0x3F	; 63
    60ac:	88 39       	cpi	r24, 0x98	; 152
    60ae:	20 f0       	brcs	.+8      	; 0x60b8 <log+0x3c>
    60b0:	80 3e       	cpi	r24, 0xE0	; 224
    60b2:	30 f0       	brcs	.+12     	; 0x60c0 <log+0x44>
    60b4:	21 96       	adiw	r28, 0x01	; 1
    60b6:	8f 77       	andi	r24, 0x7F	; 127
    60b8:	7e dc       	rcall	.-1796   	; 0x59b6 <__addsf3>
    60ba:	ec e0       	ldi	r30, 0x0C	; 12
    60bc:	f1 e0       	ldi	r31, 0x01	; 1
    60be:	03 c0       	rjmp	.+6      	; 0x60c6 <log+0x4a>
    60c0:	7a dc       	rcall	.-1804   	; 0x59b6 <__addsf3>
    60c2:	e9 e3       	ldi	r30, 0x39	; 57
    60c4:	f1 e0       	ldi	r31, 0x01	; 1
    60c6:	73 df       	rcall	.-282    	; 0x5fae <__fp_powser>
    60c8:	8b 01       	movw	r16, r22
    60ca:	be 01       	movw	r22, r28
    60cc:	ec 01       	movw	r28, r24
    60ce:	fb 2e       	mov	r15, r27
    60d0:	6f 57       	subi	r22, 0x7F	; 127
    60d2:	71 09       	sbc	r23, r1
    60d4:	75 95       	asr	r23
    60d6:	77 1f       	adc	r23, r23
    60d8:	88 0b       	sbc	r24, r24
    60da:	99 0b       	sbc	r25, r25
    60dc:	6f dd       	rcall	.-1314   	; 0x5bbc <__floatsisf>
    60de:	28 e1       	ldi	r18, 0x18	; 24
    60e0:	32 e7       	ldi	r19, 0x72	; 114
    60e2:	41 e3       	ldi	r20, 0x31	; 49
    60e4:	5f e3       	ldi	r21, 0x3F	; 63
    60e6:	2a de       	rcall	.-940    	; 0x5d3c <__mulsf3x>
    60e8:	af 2d       	mov	r26, r15
    60ea:	98 01       	movw	r18, r16
    60ec:	ae 01       	movw	r20, r28
    60ee:	ff 90       	pop	r15
    60f0:	0f 91       	pop	r16
    60f2:	1f 91       	pop	r17
    60f4:	cf 91       	pop	r28
    60f6:	df 91       	pop	r29
    60f8:	6f dc       	rcall	.-1826   	; 0x59d8 <__addsf3x>
    60fa:	d6 cd       	rjmp	.-1108   	; 0x5ca8 <__fp_round>

000060fc <modf>:
    60fc:	fa 01       	movw	r30, r20
    60fe:	dc 01       	movw	r26, r24
    6100:	aa 0f       	add	r26, r26
    6102:	bb 1f       	adc	r27, r27
    6104:	9b 01       	movw	r18, r22
    6106:	ac 01       	movw	r20, r24
    6108:	bf 57       	subi	r27, 0x7F	; 127
    610a:	28 f4       	brcc	.+10     	; 0x6116 <modf+0x1a>
    610c:	22 27       	eor	r18, r18
    610e:	33 27       	eor	r19, r19
    6110:	44 27       	eor	r20, r20
    6112:	50 78       	andi	r21, 0x80	; 128
    6114:	1f c0       	rjmp	.+62     	; 0x6154 <modf+0x58>
    6116:	b7 51       	subi	r27, 0x17	; 23
    6118:	88 f4       	brcc	.+34     	; 0x613c <modf+0x40>
    611a:	ab 2f       	mov	r26, r27
    611c:	00 24       	eor	r0, r0
    611e:	46 95       	lsr	r20
    6120:	37 95       	ror	r19
    6122:	27 95       	ror	r18
    6124:	01 1c       	adc	r0, r1
    6126:	a3 95       	inc	r26
    6128:	d2 f3       	brmi	.-12     	; 0x611e <modf+0x22>
    612a:	00 20       	and	r0, r0
    612c:	69 f0       	breq	.+26     	; 0x6148 <modf+0x4c>
    612e:	22 0f       	add	r18, r18
    6130:	33 1f       	adc	r19, r19
    6132:	44 1f       	adc	r20, r20
    6134:	b3 95       	inc	r27
    6136:	da f3       	brmi	.-10     	; 0x612e <modf+0x32>
    6138:	0d d0       	rcall	.+26     	; 0x6154 <modf+0x58>
    613a:	3c cc       	rjmp	.-1928   	; 0x59b4 <__subsf3>
    613c:	61 30       	cpi	r22, 0x01	; 1
    613e:	71 05       	cpc	r23, r1
    6140:	a0 e8       	ldi	r26, 0x80	; 128
    6142:	8a 07       	cpc	r24, r26
    6144:	b9 46       	sbci	r27, 0x69	; 105
    6146:	30 f4       	brcc	.+12     	; 0x6154 <modf+0x58>
    6148:	9b 01       	movw	r18, r22
    614a:	ac 01       	movw	r20, r24
    614c:	66 27       	eor	r22, r22
    614e:	77 27       	eor	r23, r23
    6150:	88 27       	eor	r24, r24
    6152:	90 78       	andi	r25, 0x80	; 128
    6154:	30 96       	adiw	r30, 0x00	; 0
    6156:	21 f0       	breq	.+8      	; 0x6160 <modf+0x64>
    6158:	20 83       	st	Z, r18
    615a:	31 83       	std	Z+1, r19	; 0x01
    615c:	42 83       	std	Z+2, r20	; 0x02
    615e:	53 83       	std	Z+3, r21	; 0x03
    6160:	08 95       	ret

00006162 <__mulsi3>:
    6162:	62 9f       	mul	r22, r18
    6164:	d0 01       	movw	r26, r0
    6166:	73 9f       	mul	r23, r19
    6168:	f0 01       	movw	r30, r0
    616a:	82 9f       	mul	r24, r18
    616c:	e0 0d       	add	r30, r0
    616e:	f1 1d       	adc	r31, r1
    6170:	64 9f       	mul	r22, r20
    6172:	e0 0d       	add	r30, r0
    6174:	f1 1d       	adc	r31, r1
    6176:	92 9f       	mul	r25, r18
    6178:	f0 0d       	add	r31, r0
    617a:	83 9f       	mul	r24, r19
    617c:	f0 0d       	add	r31, r0
    617e:	74 9f       	mul	r23, r20
    6180:	f0 0d       	add	r31, r0
    6182:	65 9f       	mul	r22, r21
    6184:	f0 0d       	add	r31, r0
    6186:	99 27       	eor	r25, r25
    6188:	72 9f       	mul	r23, r18
    618a:	b0 0d       	add	r27, r0
    618c:	e1 1d       	adc	r30, r1
    618e:	f9 1f       	adc	r31, r25
    6190:	63 9f       	mul	r22, r19
    6192:	b0 0d       	add	r27, r0
    6194:	e1 1d       	adc	r30, r1
    6196:	f9 1f       	adc	r31, r25
    6198:	bd 01       	movw	r22, r26
    619a:	cf 01       	movw	r24, r30
    619c:	11 24       	eor	r1, r1
    619e:	08 95       	ret

000061a0 <__udivmodhi4>:
    61a0:	aa 1b       	sub	r26, r26
    61a2:	bb 1b       	sub	r27, r27
    61a4:	51 e1       	ldi	r21, 0x11	; 17
    61a6:	07 c0       	rjmp	.+14     	; 0x61b6 <__udivmodhi4_ep>

000061a8 <__udivmodhi4_loop>:
    61a8:	aa 1f       	adc	r26, r26
    61aa:	bb 1f       	adc	r27, r27
    61ac:	a6 17       	cp	r26, r22
    61ae:	b7 07       	cpc	r27, r23
    61b0:	10 f0       	brcs	.+4      	; 0x61b6 <__udivmodhi4_ep>
    61b2:	a6 1b       	sub	r26, r22
    61b4:	b7 0b       	sbc	r27, r23

000061b6 <__udivmodhi4_ep>:
    61b6:	88 1f       	adc	r24, r24
    61b8:	99 1f       	adc	r25, r25
    61ba:	5a 95       	dec	r21
    61bc:	a9 f7       	brne	.-22     	; 0x61a8 <__udivmodhi4_loop>
    61be:	80 95       	com	r24
    61c0:	90 95       	com	r25
    61c2:	bc 01       	movw	r22, r24
    61c4:	cd 01       	movw	r24, r26
    61c6:	08 95       	ret

000061c8 <__divmodhi4>:
    61c8:	97 fb       	bst	r25, 7
    61ca:	09 2e       	mov	r0, r25
    61cc:	07 26       	eor	r0, r23
    61ce:	0a d0       	rcall	.+20     	; 0x61e4 <__divmodhi4_neg1>
    61d0:	77 fd       	sbrc	r23, 7
    61d2:	04 d0       	rcall	.+8      	; 0x61dc <__divmodhi4_neg2>
    61d4:	e5 df       	rcall	.-54     	; 0x61a0 <__udivmodhi4>
    61d6:	06 d0       	rcall	.+12     	; 0x61e4 <__divmodhi4_neg1>
    61d8:	00 20       	and	r0, r0
    61da:	1a f4       	brpl	.+6      	; 0x61e2 <__divmodhi4_exit>

000061dc <__divmodhi4_neg2>:
    61dc:	70 95       	com	r23
    61de:	61 95       	neg	r22
    61e0:	7f 4f       	sbci	r23, 0xFF	; 255

000061e2 <__divmodhi4_exit>:
    61e2:	08 95       	ret

000061e4 <__divmodhi4_neg1>:
    61e4:	f6 f7       	brtc	.-4      	; 0x61e2 <__divmodhi4_exit>
    61e6:	90 95       	com	r25
    61e8:	81 95       	neg	r24
    61ea:	9f 4f       	sbci	r25, 0xFF	; 255
    61ec:	08 95       	ret

000061ee <__udivmodsi4>:
    61ee:	a1 e2       	ldi	r26, 0x21	; 33
    61f0:	1a 2e       	mov	r1, r26
    61f2:	aa 1b       	sub	r26, r26
    61f4:	bb 1b       	sub	r27, r27
    61f6:	fd 01       	movw	r30, r26
    61f8:	0d c0       	rjmp	.+26     	; 0x6214 <__udivmodsi4_ep>

000061fa <__udivmodsi4_loop>:
    61fa:	aa 1f       	adc	r26, r26
    61fc:	bb 1f       	adc	r27, r27
    61fe:	ee 1f       	adc	r30, r30
    6200:	ff 1f       	adc	r31, r31
    6202:	a2 17       	cp	r26, r18
    6204:	b3 07       	cpc	r27, r19
    6206:	e4 07       	cpc	r30, r20
    6208:	f5 07       	cpc	r31, r21
    620a:	20 f0       	brcs	.+8      	; 0x6214 <__udivmodsi4_ep>
    620c:	a2 1b       	sub	r26, r18
    620e:	b3 0b       	sbc	r27, r19
    6210:	e4 0b       	sbc	r30, r20
    6212:	f5 0b       	sbc	r31, r21

00006214 <__udivmodsi4_ep>:
    6214:	66 1f       	adc	r22, r22
    6216:	77 1f       	adc	r23, r23
    6218:	88 1f       	adc	r24, r24
    621a:	99 1f       	adc	r25, r25
    621c:	1a 94       	dec	r1
    621e:	69 f7       	brne	.-38     	; 0x61fa <__udivmodsi4_loop>
    6220:	60 95       	com	r22
    6222:	70 95       	com	r23
    6224:	80 95       	com	r24
    6226:	90 95       	com	r25
    6228:	9b 01       	movw	r18, r22
    622a:	ac 01       	movw	r20, r24
    622c:	bd 01       	movw	r22, r26
    622e:	cf 01       	movw	r24, r30
    6230:	08 95       	ret

00006232 <__divmodsi4>:
    6232:	97 fb       	bst	r25, 7
    6234:	09 2e       	mov	r0, r25
    6236:	05 26       	eor	r0, r21
    6238:	0e d0       	rcall	.+28     	; 0x6256 <__divmodsi4_neg1>
    623a:	57 fd       	sbrc	r21, 7
    623c:	04 d0       	rcall	.+8      	; 0x6246 <__divmodsi4_neg2>
    623e:	d7 df       	rcall	.-82     	; 0x61ee <__udivmodsi4>
    6240:	0a d0       	rcall	.+20     	; 0x6256 <__divmodsi4_neg1>
    6242:	00 1c       	adc	r0, r0
    6244:	38 f4       	brcc	.+14     	; 0x6254 <__divmodsi4_exit>

00006246 <__divmodsi4_neg2>:
    6246:	50 95       	com	r21
    6248:	40 95       	com	r20
    624a:	30 95       	com	r19
    624c:	21 95       	neg	r18
    624e:	3f 4f       	sbci	r19, 0xFF	; 255
    6250:	4f 4f       	sbci	r20, 0xFF	; 255
    6252:	5f 4f       	sbci	r21, 0xFF	; 255

00006254 <__divmodsi4_exit>:
    6254:	08 95       	ret

00006256 <__divmodsi4_neg1>:
    6256:	f6 f7       	brtc	.-4      	; 0x6254 <__divmodsi4_exit>
    6258:	90 95       	com	r25
    625a:	80 95       	com	r24
    625c:	70 95       	com	r23
    625e:	61 95       	neg	r22
    6260:	7f 4f       	sbci	r23, 0xFF	; 255
    6262:	8f 4f       	sbci	r24, 0xFF	; 255
    6264:	9f 4f       	sbci	r25, 0xFF	; 255
    6266:	08 95       	ret

00006268 <_exit>:
    6268:	f8 94       	cli

0000626a <__stop_program>:
    626a:	ff cf       	rjmp	.-2      	; 0x626a <__stop_program>
