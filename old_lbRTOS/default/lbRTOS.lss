
lbRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800200  00001ffa  0000208e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000672  008002a8  008002a8  00002136  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000904  00000000  00000000  00002216  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025e2  00000000  00000000  00002b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aee  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002116  00000000  00000000  00005bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006e0  00000000  00000000  00007d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001123  00000000  00000000  000083e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001089  00000000  00000000  00009503  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000a58c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__vector_17>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ea ef       	ldi	r30, 0xFA	; 250
      f8:	ff e1       	ldi	r31, 0x1F	; 31
      fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
     100:	a8 3a       	cpi	r26, 0xA8	; 168
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
     106:	19 e0       	ldi	r17, 0x09	; 9
     108:	a8 ea       	ldi	r26, 0xA8	; 168
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	aa 31       	cpi	r26, 0x1A	; 26
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 d5 03 	call	0x7aa	; 0x7aa <main>
     11a:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <PWM_Init_timer1_LED>:

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     122:	89 30       	cpi	r24, 0x09	; 9
     124:	49 f4       	brne	.+18     	; 0x138 <PWM_Init_timer1_LED+0x16>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     126:	80 91 80 00 	lds	r24, 0x0080
     12a:	82 60       	ori	r24, 0x02	; 2
     12c:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,PWM10);
     130:	80 91 80 00 	lds	r24, 0x0080
     134:	8e 7f       	andi	r24, 0xFE	; 254
     136:	0e c0       	rjmp	.+28     	; 0x154 <PWM_Init_timer1_LED+0x32>
	}
	else if( bitRes == 10 )
     138:	8a 30       	cpi	r24, 0x0A	; 10
     13a:	21 f4       	brne	.+8      	; 0x144 <PWM_Init_timer1_LED+0x22>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     13c:	80 91 80 00 	lds	r24, 0x0080
     140:	82 60       	ori	r24, 0x02	; 2
     142:	03 c0       	rjmp	.+6      	; 0x14a <PWM_Init_timer1_LED+0x28>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     144:	80 91 80 00 	lds	r24, 0x0080
     148:	8d 7f       	andi	r24, 0xFD	; 253
     14a:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,PWM10);
     14e:	80 91 80 00 	lds	r24, 0x0080
     152:	81 60       	ori	r24, 0x01	; 1
     154:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     158:	10 92 8b 00 	sts	0x008B, r1
     15c:	10 92 8a 00 	sts	0x008A, r1
}
     160:	08 95       	ret

00000162 <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     162:	89 30       	cpi	r24, 0x09	; 9
     164:	49 f4       	brne	.+18     	; 0x178 <PWM_Init_timer2_H6+0x16>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
     166:	80 91 b0 00 	lds	r24, 0x00B0
     16a:	82 60       	ori	r24, 0x02	; 2
     16c:	80 93 b0 00 	sts	0x00B0, r24
		cbi(TCCR2A,PWM10);
     170:	80 91 b0 00 	lds	r24, 0x00B0
     174:	8e 7f       	andi	r24, 0xFE	; 254
     176:	0e c0       	rjmp	.+28     	; 0x194 <PWM_Init_timer2_H6+0x32>
	}
	else if( bitRes == 10 )
     178:	8a 30       	cpi	r24, 0x0A	; 10
     17a:	21 f4       	brne	.+8      	; 0x184 <PWM_Init_timer2_H6+0x22>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
     17c:	80 91 b0 00 	lds	r24, 0x00B0
     180:	82 60       	ori	r24, 0x02	; 2
     182:	03 c0       	rjmp	.+6      	; 0x18a <PWM_Init_timer2_H6+0x28>
		sbi(TCCR2A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
     184:	80 91 b0 00 	lds	r24, 0x00B0
     188:	8d 7f       	andi	r24, 0xFD	; 253
     18a:	80 93 b0 00 	sts	0x00B0, r24
		sbi(TCCR2A,PWM10);
     18e:	80 91 b0 00 	lds	r24, 0x00B0
     192:	81 60       	ori	r24, 0x01	; 1
     194:	80 93 b0 00 	sts	0x00B0, r24
	}
	// clear output compare values
	OCR2B = 0;
     198:	10 92 b4 00 	sts	0x00B4, r1
}
     19c:	08 95       	ret

0000019e <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     19e:	89 30       	cpi	r24, 0x09	; 9
     1a0:	49 f4       	brne	.+18     	; 0x1b4 <PWM_Init_timer3_E3+0x16>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
     1a2:	80 91 90 00 	lds	r24, 0x0090
     1a6:	82 60       	ori	r24, 0x02	; 2
     1a8:	80 93 90 00 	sts	0x0090, r24
		cbi(TCCR3A,PWM10);
     1ac:	80 91 90 00 	lds	r24, 0x0090
     1b0:	8e 7f       	andi	r24, 0xFE	; 254
     1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <PWM_Init_timer3_E3+0x32>
	}
	else if( bitRes == 10 )
     1b4:	8a 30       	cpi	r24, 0x0A	; 10
     1b6:	21 f4       	brne	.+8      	; 0x1c0 <PWM_Init_timer3_E3+0x22>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
     1b8:	80 91 90 00 	lds	r24, 0x0090
     1bc:	82 60       	ori	r24, 0x02	; 2
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <PWM_Init_timer3_E3+0x28>
		sbi(TCCR3A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
     1c0:	80 91 90 00 	lds	r24, 0x0090
     1c4:	8d 7f       	andi	r24, 0xFD	; 253
     1c6:	80 93 90 00 	sts	0x0090, r24
		sbi(TCCR3A,PWM10);
     1ca:	80 91 90 00 	lds	r24, 0x0090
     1ce:	81 60       	ori	r24, 0x01	; 1
     1d0:	80 93 90 00 	sts	0x0090, r24
	}
	// clear output compare values
	OCR3A = 0;
     1d4:	10 92 99 00 	sts	0x0099, r1
     1d8:	10 92 98 00 	sts	0x0098, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     1dc:	08 95       	ret

000001de <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     1de:	89 30       	cpi	r24, 0x09	; 9
     1e0:	49 f4       	brne	.+18     	; 0x1f4 <PWM_Init_timer3_E4+0x16>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
     1e2:	80 91 91 00 	lds	r24, 0x0091
     1e6:	82 60       	ori	r24, 0x02	; 2
     1e8:	80 93 91 00 	sts	0x0091, r24
		cbi(TCCR3B,PWM10);
     1ec:	80 91 91 00 	lds	r24, 0x0091
     1f0:	8e 7f       	andi	r24, 0xFE	; 254
     1f2:	0e c0       	rjmp	.+28     	; 0x210 <PWM_Init_timer3_E4+0x32>
	}
	else if( bitRes == 10 )
     1f4:	8a 30       	cpi	r24, 0x0A	; 10
     1f6:	21 f4       	brne	.+8      	; 0x200 <PWM_Init_timer3_E4+0x22>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
     1f8:	80 91 91 00 	lds	r24, 0x0091
     1fc:	82 60       	ori	r24, 0x02	; 2
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <PWM_Init_timer3_E4+0x28>
		sbi(TCCR3B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
     200:	80 91 91 00 	lds	r24, 0x0091
     204:	8d 7f       	andi	r24, 0xFD	; 253
     206:	80 93 91 00 	sts	0x0091, r24
		sbi(TCCR3B,PWM10);
     20a:	80 91 91 00 	lds	r24, 0x0091
     20e:	81 60       	ori	r24, 0x01	; 1
     210:	80 93 91 00 	sts	0x0091, r24
	}
	// clear output compare values
	OCR3B = 0;
     214:	10 92 9b 00 	sts	0x009B, r1
     218:	10 92 9a 00 	sts	0x009A, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     21c:	08 95       	ret

0000021e <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     21e:	89 30       	cpi	r24, 0x09	; 9
     220:	49 f4       	brne	.+18     	; 0x234 <PWM_Init_timer3_E5+0x16>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
     222:	80 91 92 00 	lds	r24, 0x0092
     226:	82 60       	ori	r24, 0x02	; 2
     228:	80 93 92 00 	sts	0x0092, r24
		cbi(TCCR3C,PWM10);
     22c:	80 91 92 00 	lds	r24, 0x0092
     230:	8e 7f       	andi	r24, 0xFE	; 254
     232:	0e c0       	rjmp	.+28     	; 0x250 <PWM_Init_timer3_E5+0x32>
	}
	else if( bitRes == 10 )
     234:	8a 30       	cpi	r24, 0x0A	; 10
     236:	21 f4       	brne	.+8      	; 0x240 <PWM_Init_timer3_E5+0x22>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
     238:	80 91 92 00 	lds	r24, 0x0092
     23c:	82 60       	ori	r24, 0x02	; 2
     23e:	03 c0       	rjmp	.+6      	; 0x246 <PWM_Init_timer3_E5+0x28>
		sbi(TCCR3C,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
     240:	80 91 92 00 	lds	r24, 0x0092
     244:	8d 7f       	andi	r24, 0xFD	; 253
     246:	80 93 92 00 	sts	0x0092, r24
		sbi(TCCR3C,PWM10);
     24a:	80 91 92 00 	lds	r24, 0x0092
     24e:	81 60       	ori	r24, 0x01	; 1
     250:	80 93 92 00 	sts	0x0092, r24
	}
	// clear output compare values
	OCR3C = 0;
     254:	10 92 9d 00 	sts	0x009D, r1
     258:	10 92 9c 00 	sts	0x009C, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     25c:	08 95       	ret

0000025e <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     25e:	89 30       	cpi	r24, 0x09	; 9
     260:	49 f4       	brne	.+18     	; 0x274 <PWM_Init_timer4_H3+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     262:	80 91 a0 00 	lds	r24, 0x00A0
     266:	82 60       	ori	r24, 0x02	; 2
     268:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     26c:	80 91 a0 00 	lds	r24, 0x00A0
     270:	8e 7f       	andi	r24, 0xFE	; 254
     272:	0e c0       	rjmp	.+28     	; 0x290 <PWM_Init_timer4_H3+0x32>
	}
	else if( bitRes == 10 )
     274:	8a 30       	cpi	r24, 0x0A	; 10
     276:	21 f4       	brne	.+8      	; 0x280 <PWM_Init_timer4_H3+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     278:	80 91 a0 00 	lds	r24, 0x00A0
     27c:	82 60       	ori	r24, 0x02	; 2
     27e:	03 c0       	rjmp	.+6      	; 0x286 <PWM_Init_timer4_H3+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     280:	80 91 a0 00 	lds	r24, 0x00A0
     284:	8d 7f       	andi	r24, 0xFD	; 253
     286:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     28a:	80 91 a0 00 	lds	r24, 0x00A0
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4A = 0;
     294:	10 92 a9 00 	sts	0x00A9, r1
     298:	10 92 a8 00 	sts	0x00A8, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     29c:	08 95       	ret

0000029e <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     29e:	89 30       	cpi	r24, 0x09	; 9
     2a0:	49 f4       	brne	.+18     	; 0x2b4 <PWM_Init_timer4_H4+0x16>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
     2a2:	80 91 a1 00 	lds	r24, 0x00A1
     2a6:	82 60       	ori	r24, 0x02	; 2
     2a8:	80 93 a1 00 	sts	0x00A1, r24
		cbi(TCCR4B,PWM10);
     2ac:	80 91 a1 00 	lds	r24, 0x00A1
     2b0:	8e 7f       	andi	r24, 0xFE	; 254
     2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <PWM_Init_timer4_H4+0x32>
	}
	else if( bitRes == 10 )
     2b4:	8a 30       	cpi	r24, 0x0A	; 10
     2b6:	21 f4       	brne	.+8      	; 0x2c0 <PWM_Init_timer4_H4+0x22>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
     2b8:	80 91 a1 00 	lds	r24, 0x00A1
     2bc:	82 60       	ori	r24, 0x02	; 2
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <PWM_Init_timer4_H4+0x28>
		sbi(TCCR4B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
     2c0:	80 91 a1 00 	lds	r24, 0x00A1
     2c4:	8d 7f       	andi	r24, 0xFD	; 253
     2c6:	80 93 a1 00 	sts	0x00A1, r24
		sbi(TCCR4B,PWM10);
     2ca:	80 91 a1 00 	lds	r24, 0x00A1
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	80 93 a1 00 	sts	0x00A1, r24
	}
	// clear output compare values
	OCR4B = 0;
     2d4:	10 92 ab 00 	sts	0x00AB, r1
     2d8:	10 92 aa 00 	sts	0x00AA, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     2dc:	08 95       	ret

000002de <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     2de:	89 30       	cpi	r24, 0x09	; 9
     2e0:	49 f4       	brne	.+18     	; 0x2f4 <PWM_Init_timer4_H5+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     2e2:	80 91 a0 00 	lds	r24, 0x00A0
     2e6:	82 60       	ori	r24, 0x02	; 2
     2e8:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     2ec:	80 91 a0 00 	lds	r24, 0x00A0
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	0e c0       	rjmp	.+28     	; 0x310 <PWM_Init_timer4_H5+0x32>
	}
	else if( bitRes == 10 )
     2f4:	8a 30       	cpi	r24, 0x0A	; 10
     2f6:	21 f4       	brne	.+8      	; 0x300 <PWM_Init_timer4_H5+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     2f8:	80 91 a0 00 	lds	r24, 0x00A0
     2fc:	82 60       	ori	r24, 0x02	; 2
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <PWM_Init_timer4_H5+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     300:	80 91 a0 00 	lds	r24, 0x00A0
     304:	8d 7f       	andi	r24, 0xFD	; 253
     306:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     30a:	80 91 a0 00 	lds	r24, 0x00A0
     30e:	81 60       	ori	r24, 0x01	; 1
     310:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4C = 0;
     314:	10 92 ad 00 	sts	0x00AD, r1
     318:	10 92 ac 00 	sts	0x00AC, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     31c:	08 95       	ret

0000031e <timer1PWMInitICR>:
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     31e:	e0 e8       	ldi	r30, 0x80	; 128
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	20 81       	ld	r18, Z
     324:	2e 7f       	andi	r18, 0xFE	; 254
     326:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     328:	20 81       	ld	r18, Z
     32a:	22 60       	ori	r18, 0x02	; 2
     32c:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     32e:	e1 e8       	ldi	r30, 0x81	; 129
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	20 81       	ld	r18, Z
     334:	28 60       	ori	r18, 0x08	; 8
     336:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     338:	20 81       	ld	r18, Z
     33a:	20 61       	ori	r18, 0x10	; 16
     33c:	20 83       	st	Z, r18
	
	// set top count value
	ICR1 = topcount;
     33e:	90 93 87 00 	sts	0x0087, r25
     342:	80 93 86 00 	sts	0x0086, r24
	
	// clear output compare values
	OCR1A = 0;
     346:	10 92 89 00 	sts	0x0089, r1
     34a:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     34e:	10 92 8b 00 	sts	0x008B, r1
     352:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     356:	10 92 8d 00 	sts	0x008D, r1
     35a:	10 92 8c 00 	sts	0x008C, r1
}
     35e:	08 95       	ret

00000360 <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
     360:	e0 e9       	ldi	r30, 0x90	; 144
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	20 81       	ld	r18, Z
     366:	2e 7f       	andi	r18, 0xFE	; 254
     368:	20 83       	st	Z, r18
	sbi(TCCR3A,WGM11);
     36a:	20 81       	ld	r18, Z
     36c:	22 60       	ori	r18, 0x02	; 2
     36e:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM12);
     370:	e1 e9       	ldi	r30, 0x91	; 145
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	20 81       	ld	r18, Z
     376:	28 60       	ori	r18, 0x08	; 8
     378:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM13);
     37a:	20 81       	ld	r18, Z
     37c:	20 61       	ori	r18, 0x10	; 16
     37e:	20 83       	st	Z, r18
	
	// set top count value
	ICR3 = topcount;
     380:	90 93 97 00 	sts	0x0097, r25
     384:	80 93 96 00 	sts	0x0096, r24
	
	// clear output compare values
	OCR3A = 0;
     388:	10 92 99 00 	sts	0x0099, r1
     38c:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
     390:	10 92 9b 00 	sts	0x009B, r1
     394:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
     398:	10 92 9d 00 	sts	0x009D, r1
     39c:	10 92 9c 00 	sts	0x009C, r1
}
     3a0:	08 95       	ret

000003a2 <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
     3a2:	e0 ea       	ldi	r30, 0xA0	; 160
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	20 81       	ld	r18, Z
     3a8:	2e 7f       	andi	r18, 0xFE	; 254
     3aa:	20 83       	st	Z, r18
	sbi(TCCR4A,WGM11);
     3ac:	20 81       	ld	r18, Z
     3ae:	22 60       	ori	r18, 0x02	; 2
     3b0:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM12);
     3b2:	e1 ea       	ldi	r30, 0xA1	; 161
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	20 81       	ld	r18, Z
     3b8:	28 60       	ori	r18, 0x08	; 8
     3ba:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM13);
     3bc:	20 81       	ld	r18, Z
     3be:	20 61       	ori	r18, 0x10	; 16
     3c0:	20 83       	st	Z, r18
	
	// set top count value
	ICR4 = topcount;
     3c2:	90 93 a7 00 	sts	0x00A7, r25
     3c6:	80 93 a6 00 	sts	0x00A6, r24
	
	// clear output compare values
	OCR4A = 0;
     3ca:	10 92 a9 00 	sts	0x00A9, r1
     3ce:	10 92 a8 00 	sts	0x00A8, r1
	OCR4B = 0;
     3d2:	10 92 ab 00 	sts	0x00AB, r1
     3d6:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
     3da:	10 92 ad 00 	sts	0x00AD, r1
     3de:	10 92 ac 00 	sts	0x00AC, r1
}
     3e2:	08 95       	ret

000003e4 <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
	sbi(TCCR1A,COM1B1);
     3e4:	e0 e8       	ldi	r30, 0x80	; 128
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	80 62       	ori	r24, 0x20	; 32
     3ec:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     3ee:	80 81       	ld	r24, Z
     3f0:	8f 7e       	andi	r24, 0xEF	; 239
     3f2:	80 83       	st	Z, r24
}
     3f4:	08 95       	ret

000003f6 <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
	sbi(TCCR2A,COM2B1);
     3f6:	e0 eb       	ldi	r30, 0xB0	; 176
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     400:	80 81       	ld	r24, Z
     402:	8f 7e       	andi	r24, 0xEF	; 239
     404:	80 83       	st	Z, r24
}
     406:	08 95       	ret

00000408 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
	sbi(TCCR3A,COM3A1);
     408:	e0 e9       	ldi	r30, 0x90	; 144
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	80 68       	ori	r24, 0x80	; 128
     410:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     412:	80 81       	ld	r24, Z
     414:	8f 7b       	andi	r24, 0xBF	; 191
     416:	80 83       	st	Z, r24
}
     418:	08 95       	ret

0000041a <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
	sbi(TCCR3A,COM3B1);
     41a:	e0 e9       	ldi	r30, 0x90	; 144
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 62       	ori	r24, 0x20	; 32
     422:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     424:	80 81       	ld	r24, Z
     426:	8f 7e       	andi	r24, 0xEF	; 239
     428:	80 83       	st	Z, r24
}
     42a:	08 95       	ret

0000042c <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
	sbi(TCCR3A,COM3C1);
     42c:	e0 e9       	ldi	r30, 0x90	; 144
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	88 60       	ori	r24, 0x08	; 8
     434:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     436:	80 81       	ld	r24, Z
     438:	8b 7f       	andi	r24, 0xFB	; 251
     43a:	80 83       	st	Z, r24
}
     43c:	08 95       	ret

0000043e <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
	sbi(TCCR4A,COM4A1);
     43e:	e0 ea       	ldi	r30, 0xA0	; 160
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	80 68       	ori	r24, 0x80	; 128
     446:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     448:	80 81       	ld	r24, Z
     44a:	8f 7b       	andi	r24, 0xBF	; 191
     44c:	80 83       	st	Z, r24
}
     44e:	08 95       	ret

00000450 <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
	sbi(TCCR4A,COM4B1);
     450:	e0 ea       	ldi	r30, 0xA0	; 160
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	80 62       	ori	r24, 0x20	; 32
     458:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     45a:	80 81       	ld	r24, Z
     45c:	8f 7e       	andi	r24, 0xEF	; 239
     45e:	80 83       	st	Z, r24
}
     460:	08 95       	ret

00000462 <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
	sbi(TCCR4A,COM4C1);
     462:	e0 ea       	ldi	r30, 0xA0	; 160
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     46c:	80 81       	ld	r24, Z
     46e:	8b 7f       	andi	r24, 0xFB	; 251
     470:	80 83       	st	Z, r24
}
     472:	08 95       	ret

00000474 <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     474:	e0 e8       	ldi	r30, 0x80	; 128
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	8f 7d       	andi	r24, 0xDF	; 223
     47c:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     47e:	80 81       	ld	r24, Z
     480:	8f 7e       	andi	r24, 0xEF	; 239
     482:	80 83       	st	Z, r24
}
     484:	08 95       	ret

00000486 <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     486:	e0 eb       	ldi	r30, 0xB0	; 176
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8f 7d       	andi	r24, 0xDF	; 223
     48e:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     490:	80 81       	ld	r24, Z
     492:	8f 7e       	andi	r24, 0xEF	; 239
     494:	80 83       	st	Z, r24
}
     496:	08 95       	ret

00000498 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     498:	e0 e9       	ldi	r30, 0x90	; 144
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	8f 77       	andi	r24, 0x7F	; 127
     4a0:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     4a2:	80 81       	ld	r24, Z
     4a4:	8f 7b       	andi	r24, 0xBF	; 191
     4a6:	80 83       	st	Z, r24
}
     4a8:	08 95       	ret

000004aa <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     4aa:	e0 e9       	ldi	r30, 0x90	; 144
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	8f 7d       	andi	r24, 0xDF	; 223
     4b2:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     4b4:	80 81       	ld	r24, Z
     4b6:	8f 7e       	andi	r24, 0xEF	; 239
     4b8:	80 83       	st	Z, r24
}
     4ba:	08 95       	ret

000004bc <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     4bc:	e0 e9       	ldi	r30, 0x90	; 144
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	87 7f       	andi	r24, 0xF7	; 247
     4c4:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     4c6:	80 81       	ld	r24, Z
     4c8:	8b 7f       	andi	r24, 0xFB	; 251
     4ca:	80 83       	st	Z, r24
}
     4cc:	08 95       	ret

000004ce <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     4ce:	e0 ea       	ldi	r30, 0xA0	; 160
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	8f 77       	andi	r24, 0x7F	; 127
     4d6:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     4d8:	80 81       	ld	r24, Z
     4da:	8f 7b       	andi	r24, 0xBF	; 191
     4dc:	80 83       	st	Z, r24
}
     4de:	08 95       	ret

000004e0 <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     4e0:	e0 ea       	ldi	r30, 0xA0	; 160
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	8f 7d       	andi	r24, 0xDF	; 223
     4e8:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     4ea:	80 81       	ld	r24, Z
     4ec:	8f 7e       	andi	r24, 0xEF	; 239
     4ee:	80 83       	st	Z, r24
}
     4f0:	08 95       	ret

000004f2 <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     4f2:	e0 ea       	ldi	r30, 0xA0	; 160
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	87 7f       	andi	r24, 0xF7	; 247
     4fa:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     4fc:	80 81       	ld	r24, Z
     4fe:	8b 7f       	andi	r24, 0xFB	; 251
     500:	80 83       	st	Z, r24
}
     502:	08 95       	ret

00000504 <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
	cbi(TCCR1A,PWM11);
     504:	e0 e8       	ldi	r30, 0x80	; 128
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	8d 7f       	andi	r24, 0xFD	; 253
     50c:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM10);
     50e:	80 81       	ld	r24, Z
     510:	8e 7f       	andi	r24, 0xFE	; 254
     512:	80 83       	st	Z, r24
}

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     514:	80 81       	ld	r24, Z
     516:	8f 7d       	andi	r24, 0xDF	; 223
     518:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     51a:	80 81       	ld	r24, Z
     51c:	8f 7e       	andi	r24, 0xEF	; 239
     51e:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
	//timer2PWMCOff();
}
     520:	08 95       	ret

00000522 <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
	cbi(TCCR2A,PWM11);
     522:	e0 eb       	ldi	r30, 0xB0	; 176
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	8d 7f       	andi	r24, 0xFD	; 253
     52a:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM10);
     52c:	80 81       	ld	r24, Z
     52e:	8e 7f       	andi	r24, 0xFE	; 254
     530:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     532:	80 81       	ld	r24, Z
     534:	8f 7d       	andi	r24, 0xDF	; 223
     536:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     538:	80 81       	ld	r24, Z
     53a:	8f 7e       	andi	r24, 0xEF	; 239
     53c:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM11);
	cbi(TCCR2A,PWM10);
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
	//timer2PWMCOff();
}
     53e:	08 95       	ret

00000540 <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
	cbi(TCCR3A,PWM11);
     540:	e0 e9       	ldi	r30, 0x90	; 144
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	8d 7f       	andi	r24, 0xFD	; 253
     548:	80 83       	st	Z, r24
	cbi(TCCR3A,PWM10);
     54a:	80 81       	ld	r24, Z
     54c:	8e 7f       	andi	r24, 0xFE	; 254
     54e:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B1);
	cbi(TCCR2A,COM2B0);
}
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     550:	80 81       	ld	r24, Z
     552:	8f 77       	andi	r24, 0x7F	; 127
     554:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     556:	80 81       	ld	r24, Z
     558:	8f 7b       	andi	r24, 0xBF	; 191
     55a:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     55c:	80 81       	ld	r24, Z
     55e:	8f 7d       	andi	r24, 0xDF	; 223
     560:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     562:	80 81       	ld	r24, Z
     564:	8f 7e       	andi	r24, 0xEF	; 239
     566:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     568:	80 81       	ld	r24, Z
     56a:	87 7f       	andi	r24, 0xF7	; 247
     56c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     56e:	80 81       	ld	r24, Z
     570:	8b 7f       	andi	r24, 0xFB	; 251
     572:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
	PWM_timer3_Off_E4();
	PWM_timer3_Off_E5();
	//timer2PWMCOff();
}
     574:	08 95       	ret

00000576 <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
	cbi(TCCR4A,PWM11);
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	8d 7f       	andi	r24, 0xFD	; 253
     57e:	80 83       	st	Z, r24
	cbi(TCCR4A,PWM10);
     580:	80 81       	ld	r24, Z
     582:	8e 7f       	andi	r24, 0xFE	; 254
     584:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C1);
	cbi(TCCR3A,COM3C0);
}
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     586:	80 81       	ld	r24, Z
     588:	8f 77       	andi	r24, 0x7F	; 127
     58a:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     58c:	80 81       	ld	r24, Z
     58e:	8f 7b       	andi	r24, 0xBF	; 191
     590:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     592:	80 81       	ld	r24, Z
     594:	8f 7d       	andi	r24, 0xDF	; 223
     596:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     598:	80 81       	ld	r24, Z
     59a:	8f 7e       	andi	r24, 0xEF	; 239
     59c:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     59e:	80 81       	ld	r24, Z
     5a0:	87 7f       	andi	r24, 0xF7	; 247
     5a2:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     5a4:	80 81       	ld	r24, Z
     5a6:	8b 7f       	andi	r24, 0xFB	; 251
     5a8:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
	PWM_timer4_Off_H4();
	PWM_timer4_Off_H5();
	//timer2PWMCOff();
}
     5aa:	08 95       	ret

000005ac <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
     5ac:	90 93 8b 00 	sts	0x008B, r25
     5b0:	80 93 8a 00 	sts	0x008A, r24
     5b4:	08 95       	ret

000005b6 <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     5b6:	80 93 b4 00 	sts	0x00B4, r24
     5ba:	08 95       	ret

000005bc <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
     5bc:	90 93 99 00 	sts	0x0099, r25
     5c0:	80 93 98 00 	sts	0x0098, r24
     5c4:	08 95       	ret

000005c6 <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
     5c6:	90 93 9b 00 	sts	0x009B, r25
     5ca:	80 93 9a 00 	sts	0x009A, r24
     5ce:	08 95       	ret

000005d0 <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
     5d0:	90 93 9d 00 	sts	0x009D, r25
     5d4:	80 93 9c 00 	sts	0x009C, r24
     5d8:	08 95       	ret

000005da <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
     5da:	90 93 a9 00 	sts	0x00A9, r25
     5de:	80 93 a8 00 	sts	0x00A8, r24
     5e2:	08 95       	ret

000005e4 <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
     5e4:	90 93 ab 00 	sts	0x00AB, r25
     5e8:	80 93 aa 00 	sts	0x00AA, r24
     5ec:	08 95       	ret

000005ee <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
     5ee:	90 93 ad 00 	sts	0x00AD, r25
     5f2:	80 93 ac 00 	sts	0x00AC, r24
     5f6:	08 95       	ret

000005f8 <configure_ports>:
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
     5f8:	10 ba       	out	0x10, r1	; 16
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
     5fa:	11 ba       	out	0x11, r1	; 17
	DDRK = 0b00000000;  //configure all K ports for input				0x00
     5fc:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
     600:	10 92 08 01 	sts	0x0108, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	91 b9       	out	0x01, r25	; 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
     608:	80 e4       	ldi	r24, 0x40	; 64
     60a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;  //configure ports for output
     60c:	97 b9       	out	0x07, r25	; 7
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
     60e:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, PD1); // SDA pull-up
     610:	59 9a       	sbi	0x0b, 1	; 11
	DDRD = 0b11110011;  //configure ports for output
     612:	83 ef       	ldi	r24, 0xF3	; 243
     614:	8a b9       	out	0x0a, r24	; 10
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
     616:	8e ef       	ldi	r24, 0xFE	; 254
     618:	8d b9       	out	0x0d, r24	; 13
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
     61a:	a5 9a       	sbi	0x14, 5	; 20
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
     61c:	9d 98       	cbi	0x13, 5	; 19
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
     61e:	80 93 01 01 	sts	0x0101, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
     622:	80 93 04 01 	sts	0x0104, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
     626:	08 95       	ret

00000628 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
	}
     628:	08 95       	ret

0000062a <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     62a:	2e 9a       	sbi	0x05, 6	; 5
     62c:	08 95       	ret

0000062e <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     62e:	2e 98       	cbi	0x05, 6	; 5
     630:	08 95       	ret

00000632 <button_pressed>:


//*****************BUTTON****************
int button_pressed(void)
	{
	return (bit_is_clear(PING, 5));
     632:	22 b3       	in	r18, 0x12	; 18
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	85 e0       	ldi	r24, 0x05	; 5
     638:	36 95       	lsr	r19
     63a:	27 95       	ror	r18
     63c:	8a 95       	dec	r24
     63e:	e1 f7       	brne	.-8      	; 0x638 <button_pressed+0x6>
     640:	20 95       	com	r18
     642:	30 95       	com	r19
     644:	21 70       	andi	r18, 0x01	; 1
     646:	30 70       	andi	r19, 0x00	; 0
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
     648:	c9 01       	movw	r24, r18
     64a:	08 95       	ret

0000064c <cos_SoR>:
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
	if (degrees >= 0)//positive angles
     64c:	97 fd       	sbrc	r25, 7
     64e:	10 c0       	rjmp	.+32     	; 0x670 <cos_SoR+0x24>
		return angtable[degrees/5];
     650:	25 e0       	ldi	r18, 0x05	; 5
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__divmodsi4>
     65c:	da 01       	movw	r26, r20
     65e:	c9 01       	movw	r24, r18
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	80 5f       	subi	r24, 0xF0	; 240
     666:	9d 4f       	sbci	r25, 0xFD	; 253
     668:	fc 01       	movw	r30, r24
     66a:	20 81       	ld	r18, Z
     66c:	31 81       	ldd	r19, Z+1	; 0x01
     66e:	17 c0       	rjmp	.+46     	; 0x69e <cos_SoR+0x52>
	else
		return -angtable[72-(-degrees)/5];
     670:	25 e0       	ldi	r18, 0x05	; 5
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__divmodsi4>
     67c:	da 01       	movw	r26, r20
     67e:	c9 01       	movw	r24, r18
     680:	88 5b       	subi	r24, 0xB8	; 184
     682:	9f 4f       	sbci	r25, 0xFF	; 255
     684:	af 4f       	sbci	r26, 0xFF	; 255
     686:	bf 4f       	sbci	r27, 0xFF	; 255
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	80 5f       	subi	r24, 0xF0	; 240
     68e:	9d 4f       	sbci	r25, 0xFD	; 253
     690:	fc 01       	movw	r30, r24
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	22 27       	eor	r18, r18
     698:	33 27       	eor	r19, r19
     69a:	28 1b       	sub	r18, r24
     69c:	39 0b       	sbc	r19, r25
	}
     69e:	c9 01       	movw	r24, r18
     6a0:	08 95       	ret

000006a2 <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
	degrees=degrees - 90;//phase shift 90 degrees
     6a2:	6a 55       	subi	r22, 0x5A	; 90
     6a4:	70 40       	sbci	r23, 0x00	; 0
     6a6:	80 40       	sbci	r24, 0x00	; 0
     6a8:	90 40       	sbci	r25, 0x00	; 0

	if (degrees >= 0)//positive angles
     6aa:	97 fd       	sbrc	r25, 7
     6ac:	10 c0       	rjmp	.+32     	; 0x6ce <sin_SoR+0x2c>
		return angtable[degrees/5];
     6ae:	25 e0       	ldi	r18, 0x05	; 5
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__divmodsi4>
     6ba:	da 01       	movw	r26, r20
     6bc:	c9 01       	movw	r24, r18
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	80 5f       	subi	r24, 0xF0	; 240
     6c4:	9d 4f       	sbci	r25, 0xFD	; 253
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 81       	ld	r18, Z
     6ca:	31 81       	ldd	r19, Z+1	; 0x01
     6cc:	17 c0       	rjmp	.+46     	; 0x6fc <sin_SoR+0x5a>
	else
		return -angtable[72-(-degrees)/5];
     6ce:	25 e0       	ldi	r18, 0x05	; 5
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__divmodsi4>
     6da:	da 01       	movw	r26, r20
     6dc:	c9 01       	movw	r24, r18
     6de:	88 5b       	subi	r24, 0xB8	; 184
     6e0:	9f 4f       	sbci	r25, 0xFF	; 255
     6e2:	af 4f       	sbci	r26, 0xFF	; 255
     6e4:	bf 4f       	sbci	r27, 0xFF	; 255
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	80 5f       	subi	r24, 0xF0	; 240
     6ec:	9d 4f       	sbci	r25, 0xFD	; 253
     6ee:	fc 01       	movw	r30, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	91 81       	ldd	r25, Z+1	; 0x01
     6f4:	22 27       	eor	r18, r18
     6f6:	33 27       	eor	r19, r19
     6f8:	28 1b       	sub	r18, r24
     6fa:	39 0b       	sbc	r19, r25
	}
     6fc:	c9 01       	movw	r24, r18
     6fe:	08 95       	ret

00000700 <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
     710:	8a e5       	ldi	r24, 0x5A	; 90
     712:	c8 16       	cp	r12, r24
     714:	d1 04       	cpc	r13, r1
     716:	e1 04       	cpc	r14, r1
     718:	f1 04       	cpc	r15, r1
     71a:	a1 f1       	breq	.+104    	; 0x784 <tan_SoR+0x84>
     71c:	86 ea       	ldi	r24, 0xA6	; 166
     71e:	c8 16       	cp	r12, r24
     720:	8f ef       	ldi	r24, 0xFF	; 255
     722:	d8 06       	cpc	r13, r24
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	e8 06       	cpc	r14, r24
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	f8 06       	cpc	r15, r24
     72c:	59 f1       	breq	.+86     	; 0x784 <tan_SoR+0x84>
     72e:	8e e0       	ldi	r24, 0x0E	; 14
     730:	c8 16       	cp	r12, r24
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	d8 06       	cpc	r13, r24
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	e8 06       	cpc	r14, r24
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	f8 06       	cpc	r15, r24
     73e:	11 f1       	breq	.+68     	; 0x784 <tan_SoR+0x84>
     740:	82 ef       	ldi	r24, 0xF2	; 242
     742:	c8 16       	cp	r12, r24
     744:	8e ef       	ldi	r24, 0xFE	; 254
     746:	d8 06       	cpc	r13, r24
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	e8 06       	cpc	r14, r24
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	f8 06       	cpc	r15, r24
     750:	c9 f0       	breq	.+50     	; 0x784 <tan_SoR+0x84>
		return 0;//what else should I return?!?!?
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
     752:	c7 01       	movw	r24, r14
     754:	b6 01       	movw	r22, r12
     756:	0e 94 51 03 	call	0x6a2	; 0x6a2 <sin_SoR>
     75a:	8c 01       	movw	r16, r24
     75c:	c7 01       	movw	r24, r14
     75e:	b6 01       	movw	r22, r12
     760:	0e 94 26 03 	call	0x64c	; 0x64c <cos_SoR>
     764:	bc 01       	movw	r22, r24
     766:	c8 01       	movw	r24, r16
     768:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__divmodhi4>
     76c:	cb 01       	movw	r24, r22
     76e:	9b 01       	movw	r18, r22
     770:	73 e0       	ldi	r23, 0x03	; 3
     772:	22 0f       	add	r18, r18
     774:	33 1f       	adc	r19, r19
     776:	7a 95       	dec	r23
     778:	e1 f7       	brne	.-8      	; 0x772 <tan_SoR+0x72>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	28 0f       	add	r18, r24
     780:	39 1f       	adc	r19, r25
     782:	02 c0       	rjmp	.+4      	; 0x788 <tan_SoR+0x88>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
	}
     788:	c9 01       	movw	r24, r18
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	08 95       	ret

00000798 <vServoOsc>:
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     798:	8f e7       	ldi	r24, 0x7F	; 127
}

void vServoOsc(){
	
	for(;;){
		taskENTER_CRITICAL();
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	0f 92       	push	r0
     7a0:	80 93 b4 00 	sts	0x00B4, r24
		PWM_timer2_Set_H6(127);	
		taskEXIT_CRITICAL();
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	f8 cf       	rjmp	.-16     	; 0x79a <vServoOsc+0x2>

000007aa <main>:
	*/
}


int main(void)
{
     7aa:	af 92       	push	r10
     7ac:	bf 92       	push	r11
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
	//add UART config here
	configure_ports();
     7b8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <configure_ports>
	TCCR2B = TIMER2_CLK_64;
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = _BV(TOIE2); // enable interrupts
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	80 93 70 00 	sts	0x0070, r24
 	//TCNT2 = timer2_ovrflow_cnt = 0; // reset counter
	TCNT2 = 0;
     7c8:	10 92 b2 00 	sts	0x00B2, r1
	
	
	PWM_Init_timer2_H6(8);
     7cc:	88 e0       	ldi	r24, 0x08	; 8
     7ce:	0e 94 b1 00 	call	0x162	; 0x162 <PWM_Init_timer2_H6>
	sbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}
void PWM_timer2_On_H6(void)
{
	sbi(TCCR2A,COM2B1);
     7d2:	80 91 b0 00 	lds	r24, 0x00B0
     7d6:	80 62       	ori	r24, 0x20	; 32
     7d8:	80 93 b0 00 	sts	0x00B0, r24
	cbi(TCCR2A,COM2B0);
     7dc:	80 91 b0 00 	lds	r24, 0x00B0
     7e0:	8f 7e       	andi	r24, 0xEF	; 239
     7e2:	80 93 b0 00 	sts	0x00B0, r24


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     7e6:	2e 9a       	sbi	0x05, 6	; 5
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     7e8:	8f e7       	ldi	r24, 0x7F	; 127
     7ea:	80 93 b4 00 	sts	0x00B4, r24
	PWM_timer2_Set_H6(127);	
	//for(;;);	

//	while(!button_pressed());

	xTaskCreate(vLEDon, "LED ON", 10, NULL, 1, NULL);
     7ee:	8c e2       	ldi	r24, 0x2C	; 44
     7f0:	94 e0       	ldi	r25, 0x04	; 4
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	72 e0       	ldi	r23, 0x02	; 2
     7f6:	4a e0       	ldi	r20, 0x0A	; 10
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	01 e0       	ldi	r16, 0x01	; 1
     800:	ee 24       	eor	r14, r14
     802:	ff 24       	eor	r15, r15
     804:	cc 24       	eor	r12, r12
     806:	dd 24       	eor	r13, r13
     808:	aa 24       	eor	r10, r10
     80a:	bb 24       	eor	r11, r11
     80c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <xTaskGenericCreate>
	xTaskCreate(vLightOn, "Light on", 10, NULL, 1, NULL);
     810:	8b e1       	ldi	r24, 0x1B	; 27
     812:	94 e0       	ldi	r25, 0x04	; 4
     814:	67 e0       	ldi	r22, 0x07	; 7
     816:	72 e0       	ldi	r23, 0x02	; 2
     818:	4a e0       	ldi	r20, 0x0A	; 10
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <xTaskGenericCreate>
//	xTaskCreate(vServoOsc, "servo go", 100, NULL, 2, NULL);
//	xTaskCreate(vLEDblink, "LED blink", 100, NULL, 1, NULL);
//	xTaskCreate(vTaskNULL, "do NULL", 100, NULL, 1, NULL);
	vTaskStartScheduler();
     824:	0e 94 12 0c 	call	0x1824	; 0x1824 <vTaskStartScheduler>
	for(;;)PORT_ON(PORTA,0);;
     828:	10 9a       	sbi	0x02, 0	; 2
     82a:	fe cf       	rjmp	.-4      	; 0x828 <main+0x7e>

0000082c <vTaskNULL>:
}

void vTaskNULL(){
	
	for(;;){
		vTaskDelay(250/portTICK_RATE_MS);
     82c:	8a ef       	ldi	r24, 0xFA	; 250
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 c6 09 	call	0x138c	; 0x138c <vTaskDelay>
     834:	fb cf       	rjmp	.-10     	; 0x82c <vTaskNULL>

00000836 <vLightOn>:
}

void vLightOn(){
	for(;;){

		PORT_ON(PORTA,0);
     836:	10 9a       	sbi	0x02, 0	; 2
		vTaskDelay(250/portTICK_RATE_MS);
     838:	8a ef       	ldi	r24, 0xFA	; 250
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 c6 09 	call	0x138c	; 0x138c <vTaskDelay>
     840:	fa cf       	rjmp	.-12     	; 0x836 <vLightOn>

00000842 <vLEDblink>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     842:	2e 98       	cbi	0x05, 6	; 5
}

void vLEDblink(){
	for(;;){
		LED_on();
		vTaskDelay(10/portTICK_RATE_MS);
     844:	8a e0       	ldi	r24, 0x0A	; 10
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 c6 09 	call	0x138c	; 0x138c <vTaskDelay>


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     84c:	2e 9a       	sbi	0x05, 6	; 5
		LED_off();
		vTaskDelay(500/portTICK_RATE_MS);
     84e:	84 ef       	ldi	r24, 0xF4	; 244
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 c6 09 	call	0x138c	; 0x138c <vTaskDelay>
     856:	f5 cf       	rjmp	.-22     	; 0x842 <vLEDblink>

00000858 <vLEDon>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     858:	2e 98       	cbi	0x05, 6	; 5

void vLEDon(){
	for(;;){

		LED_on();
		vTaskDelay(250/portTICK_RATE_MS);
     85a:	8a ef       	ldi	r24, 0xFA	; 250
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 c6 09 	call	0x138c	; 0x138c <vTaskDelay>
     862:	fa cf       	rjmp	.-12     	; 0x858 <vLEDon>

00000864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     864:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     866:	9c 01       	movw	r18, r24
     868:	2d 5f       	subi	r18, 0xFD	; 253
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
     86c:	32 83       	std	Z+2, r19	; 0x02
     86e:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	9f ef       	ldi	r25, 0xFF	; 255
     874:	94 83       	std	Z+4, r25	; 0x04
     876:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     878:	36 83       	std	Z+6, r19	; 0x06
     87a:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     87c:	30 87       	std	Z+8, r19	; 0x08
     87e:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = 0;
     880:	10 82       	st	Z, r1
}
     882:	08 95       	ret

00000884 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     884:	fc 01       	movw	r30, r24
     886:	11 86       	std	Z+9, r1	; 0x09
     888:	10 86       	std	Z+8, r1	; 0x08
}
     88a:	08 95       	ret

0000088c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ac 01       	movw	r20, r24
     892:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     894:	ec 01       	movw	r28, r24
     896:	29 81       	ldd	r18, Y+1	; 0x01
     898:	3a 81       	ldd	r19, Y+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     89a:	f9 01       	movw	r30, r18
     89c:	82 81       	ldd	r24, Z+2	; 0x02
     89e:	93 81       	ldd	r25, Z+3	; 0x03
     8a0:	13 96       	adiw	r26, 0x03	; 3
     8a2:	9c 93       	st	X, r25
     8a4:	8e 93       	st	-X, r24
     8a6:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	15 96       	adiw	r26, 0x05	; 5
     8ae:	9c 93       	st	X, r25
     8b0:	8e 93       	st	-X, r24
     8b2:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     8b4:	02 80       	ldd	r0, Z+2	; 0x02
     8b6:	f3 81       	ldd	r31, Z+3	; 0x03
     8b8:	e0 2d       	mov	r30, r0
     8ba:	75 83       	std	Z+5, r23	; 0x05
     8bc:	64 83       	std	Z+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     8be:	e9 01       	movw	r28, r18
     8c0:	7b 83       	std	Y+3, r23	; 0x03
     8c2:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     8c4:	fa 01       	movw	r30, r20
     8c6:	72 83       	std	Z+2, r23	; 0x02
     8c8:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8ca:	19 96       	adiw	r26, 0x09	; 9
     8cc:	5c 93       	st	X, r21
     8ce:	4e 93       	st	-X, r20
     8d0:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     8d2:	80 81       	ld	r24, Z
     8d4:	8f 5f       	subi	r24, 0xFF	; 255
     8d6:	80 83       	st	Z, r24
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	9c 01       	movw	r18, r24
     8e4:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     8e6:	48 81       	ld	r20, Y
     8e8:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as 
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the 
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	4f 3f       	cpi	r20, 0xFF	; 255
     8ee:	58 07       	cpc	r21, r24
     8f0:	21 f4       	brne	.+8      	; 0x8fa <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     8f2:	f9 01       	movw	r30, r18
     8f4:	a7 81       	ldd	r26, Z+7	; 0x07
     8f6:	b0 85       	ldd	r27, Z+8	; 0x08
     8f8:	10 c0       	rjmp	.+32     	; 0x91a <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips. 
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     8fa:	d9 01       	movw	r26, r18
     8fc:	13 96       	adiw	r26, 0x03	; 3
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <vListInsert+0x2a>
     900:	12 96       	adiw	r26, 0x02	; 2
     902:	0d 90       	ld	r0, X+
     904:	bc 91       	ld	r27, X
     906:	a0 2d       	mov	r26, r0
     908:	12 96       	adiw	r26, 0x02	; 2
     90a:	ed 91       	ld	r30, X+
     90c:	fc 91       	ld	r31, X
     90e:	13 97       	sbiw	r26, 0x03	; 3
     910:	80 81       	ld	r24, Z
     912:	91 81       	ldd	r25, Z+1	; 0x01
     914:	48 17       	cp	r20, r24
     916:	59 07       	cpc	r21, r25
     918:	98 f7       	brcc	.-26     	; 0x900 <vListInsert+0x22>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     91a:	12 96       	adiw	r26, 0x02	; 2
     91c:	ed 91       	ld	r30, X+
     91e:	fc 91       	ld	r31, X
     920:	13 97       	sbiw	r26, 0x03	; 3
     922:	fb 83       	std	Y+3, r31	; 0x03
     924:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     926:	d5 83       	std	Z+5, r29	; 0x05
     928:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     92a:	bd 83       	std	Y+5, r27	; 0x05
     92c:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     92e:	13 96       	adiw	r26, 0x03	; 3
     930:	dc 93       	st	X, r29
     932:	ce 93       	st	-X, r28
     934:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     936:	39 87       	std	Y+9, r19	; 0x09
     938:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     93a:	f9 01       	movw	r30, r18
     93c:	80 81       	ld	r24, Z
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	80 83       	st	Z, r24
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	dc 01       	movw	r26, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     94e:	12 96       	adiw	r26, 0x02	; 2
     950:	ed 91       	ld	r30, X+
     952:	fc 91       	ld	r31, X
     954:	13 97       	sbiw	r26, 0x03	; 3
     956:	14 96       	adiw	r26, 0x04	; 4
     958:	8d 91       	ld	r24, X+
     95a:	9c 91       	ld	r25, X
     95c:	15 97       	sbiw	r26, 0x05	; 5
     95e:	95 83       	std	Z+5, r25	; 0x05
     960:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     962:	14 96       	adiw	r26, 0x04	; 4
     964:	cd 91       	ld	r28, X+
     966:	dc 91       	ld	r29, X
     968:	15 97       	sbiw	r26, 0x05	; 5
     96a:	fb 83       	std	Y+3, r31	; 0x03
     96c:	ea 83       	std	Y+2, r30	; 0x02
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     96e:	18 96       	adiw	r26, 0x08	; 8
     970:	ed 91       	ld	r30, X+
     972:	fc 91       	ld	r31, X
     974:	19 97       	sbiw	r26, 0x09	; 9

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     976:	81 81       	ldd	r24, Z+1	; 0x01
     978:	92 81       	ldd	r25, Z+2	; 0x02
     97a:	8a 17       	cp	r24, r26
     97c:	9b 07       	cpc	r25, r27
     97e:	11 f4       	brne	.+4      	; 0x984 <vListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     980:	d2 83       	std	Z+2, r29	; 0x02
     982:	c1 83       	std	Z+1, r28	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
     984:	19 96       	adiw	r26, 0x09	; 9
     986:	1c 92       	st	X, r1
     988:	1e 92       	st	-X, r1
     98a:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
     98c:	80 81       	ld	r24, Z
     98e:	81 50       	subi	r24, 0x01	; 1
     990:	80 83       	st	Z, r24
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
     998:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	taskENTER_CRITICAL();
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
     9a0:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
     9a2:	0f 90       	pop	r0
     9a4:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
     9a6:	08 95       	ret

000009a8 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
     9a8:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	uxReturn = pxQueue->uxMessagesWaiting;
     9aa:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
}
     9ac:	08 95       	ret

000009ae <xQueueIsQueueEmptyFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
     9ae:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
     9b0:	82 8d       	ldd	r24, Z+26	; 0x1a
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	88 23       	and	r24, r24
     9b6:	09 f4       	brne	.+2      	; 0x9ba <xQueueIsQueueEmptyFromISR+0xc>
     9b8:	91 e0       	ldi	r25, 0x01	; 1

	return xReturn;
}
     9ba:	89 2f       	mov	r24, r25
     9bc:	08 95       	ret

000009be <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
     9be:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
     9c0:	92 8d       	ldd	r25, Z+26	; 0x1a
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	83 8d       	ldd	r24, Z+27	; 0x1b
     9c6:	98 17       	cp	r25, r24
     9c8:	09 f4       	brne	.+2      	; 0x9cc <xQueueIsQueueFullFromISR+0xe>
     9ca:	21 e0       	ldi	r18, 0x01	; 1

	return xReturn;
}
     9cc:	82 2f       	mov	r24, r18
     9ce:	08 95       	ret

000009d0 <vQueueDelete>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	8c 01       	movw	r16, r24
	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
     9d6:	fc 01       	movw	r30, r24
     9d8:	80 81       	ld	r24, Z
     9da:	91 81       	ldd	r25, Z+1	; 0x01
     9dc:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vPortFree>
	vPortFree( pxQueue );
     9e0:	c8 01       	movw	r24, r16
     9e2:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vPortFree>
}
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	ec 01       	movw	r28, r24
     9f6:	fb 01       	movw	r30, r22
     9f8:	8a 01       	movw	r16, r20
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
     9fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9fc:	88 23       	and	r24, r24
     9fe:	81 f1       	breq	.+96     	; 0xa60 <xQueueReceiveFromISR+0x74>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     a00:	48 81       	ld	r20, Y
     a02:	59 81       	ldd	r21, Y+1	; 0x01
     a04:	41 15       	cp	r20, r1
     a06:	51 05       	cpc	r21, r1
     a08:	a9 f0       	breq	.+42     	; 0xa34 <xQueueReceiveFromISR+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
     a0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a0c:	2e 81       	ldd	r18, Y+6	; 0x06
     a0e:	3f 81       	ldd	r19, Y+7	; 0x07
     a10:	28 0f       	add	r18, r24
     a12:	31 1d       	adc	r19, r1
     a14:	3f 83       	std	Y+7, r19	; 0x07
     a16:	2e 83       	std	Y+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
     a1a:	9b 81       	ldd	r25, Y+3	; 0x03
     a1c:	28 17       	cp	r18, r24
     a1e:	39 07       	cpc	r19, r25
     a20:	10 f0       	brcs	.+4      	; 0xa26 <xQueueReceiveFromISR+0x3a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
     a22:	5f 83       	std	Y+7, r21	; 0x07
     a24:	4e 83       	std	Y+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
     a26:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a28:	6e 81       	ldd	r22, Y+6	; 0x06
     a2a:	7f 81       	ldd	r23, Y+7	; 0x07
     a2c:	cf 01       	movw	r24, r30
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
     a34:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a36:	81 50       	subi	r24, 0x01	; 1
     a38:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
     a3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a3c:	8f 3f       	cpi	r24, 0xFF	; 255
     a3e:	69 f4       	brne	.+26     	; 0xa5a <xQueueReceiveFromISR+0x6e>
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
     a40:	88 85       	ldd	r24, Y+8	; 0x08
     a42:	88 23       	and	r24, r24
     a44:	61 f0       	breq	.+24     	; 0xa5e <xQueueReceiveFromISR+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     a46:	ce 01       	movw	r24, r28
     a48:	08 96       	adiw	r24, 0x08	; 8
     a4a:	0e 94 56 08 	call	0x10ac	; 0x10ac <xTaskRemoveFromEventList>
     a4e:	88 23       	and	r24, r24
     a50:	31 f0       	breq	.+12     	; 0xa5e <xQueueReceiveFromISR+0x72>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	f8 01       	movw	r30, r16
     a56:	80 83       	st	Z, r24
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <xQueueReceiveFromISR+0x74>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	8d 8f       	std	Y+29, r24	; 0x1d
     a5e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	08 95       	ret

00000a6a <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	ec 01       	movw	r28, r24
     a70:	84 2f       	mov	r24, r20
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
     a72:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a74:	44 23       	and	r20, r20
     a76:	a1 f1       	breq	.+104    	; 0xae0 <prvCopyDataToQueue+0x76>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
     a78:	88 23       	and	r24, r24
     a7a:	b1 f4       	brne	.+44     	; 0xaa8 <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
     a7c:	8c 81       	ldd	r24, Y+4	; 0x04
     a7e:	9d 81       	ldd	r25, Y+5	; 0x05
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     a86:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a88:	2c 81       	ldd	r18, Y+4	; 0x04
     a8a:	3d 81       	ldd	r19, Y+5	; 0x05
     a8c:	28 0f       	add	r18, r24
     a8e:	31 1d       	adc	r19, r1
     a90:	3d 83       	std	Y+5, r19	; 0x05
     a92:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	9b 81       	ldd	r25, Y+3	; 0x03
     a98:	28 17       	cp	r18, r24
     a9a:	39 07       	cpc	r19, r25
     a9c:	08 f1       	brcs	.+66     	; 0xae0 <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     a9e:	88 81       	ld	r24, Y
     aa0:	99 81       	ldd	r25, Y+1	; 0x01
     aa2:	9d 83       	std	Y+5, r25	; 0x05
     aa4:	8c 83       	std	Y+4, r24	; 0x04
     aa6:	1c c0       	rjmp	.+56     	; 0xae0 <prvCopyDataToQueue+0x76>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
     aa8:	8e 81       	ldd	r24, Y+6	; 0x06
     aaa:	9f 81       	ldd	r25, Y+7	; 0x07
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
     ab2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	44 27       	eor	r20, r20
     ab8:	55 27       	eor	r21, r21
     aba:	48 1b       	sub	r20, r24
     abc:	59 0b       	sbc	r21, r25
     abe:	8e 81       	ldd	r24, Y+6	; 0x06
     ac0:	9f 81       	ldd	r25, Y+7	; 0x07
     ac2:	84 0f       	add	r24, r20
     ac4:	95 1f       	adc	r25, r21
     ac6:	9f 83       	std	Y+7, r25	; 0x07
     ac8:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
     aca:	28 81       	ld	r18, Y
     acc:	39 81       	ldd	r19, Y+1	; 0x01
     ace:	82 17       	cp	r24, r18
     ad0:	93 07       	cpc	r25, r19
     ad2:	30 f4       	brcc	.+12     	; 0xae0 <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     ad4:	8a 81       	ldd	r24, Y+2	; 0x02
     ad6:	9b 81       	ldd	r25, Y+3	; 0x03
     ad8:	84 0f       	add	r24, r20
     ada:	95 1f       	adc	r25, r21
     adc:	9f 83       	std	Y+7, r25	; 0x07
     ade:	8e 83       	std	Y+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
     ae0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ae2:	8f 5f       	subi	r24, 0xFF	; 255
     ae4:	8a 8f       	std	Y+26, r24	; 0x1a
}
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	ec 01       	movw	r28, r24
     af6:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     af8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     afc:	98 17       	cp	r25, r24
     afe:	10 f0       	brcs	.+4      	; 0xb04 <xQueueGenericSendFromISR+0x18>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	17 c0       	rjmp	.+46     	; 0xb32 <xQueueGenericSendFromISR+0x46>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     b04:	ce 01       	movw	r24, r28
     b06:	42 2f       	mov	r20, r18
     b08:	0e 94 35 05 	call	0xa6a	; 0xa6a <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     b0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b0e:	8f 3f       	cpi	r24, 0xFF	; 255
     b10:	69 f4       	brne	.+26     	; 0xb2c <xQueueGenericSendFromISR+0x40>
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
     b12:	89 89       	ldd	r24, Y+17	; 0x11
     b14:	88 23       	and	r24, r24
     b16:	61 f0       	breq	.+24     	; 0xb30 <xQueueGenericSendFromISR+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     b18:	ce 01       	movw	r24, r28
     b1a:	41 96       	adiw	r24, 0x11	; 17
     b1c:	0e 94 56 08 	call	0x10ac	; 0x10ac <xTaskRemoveFromEventList>
     b20:	88 23       	and	r24, r24
     b22:	31 f0       	breq	.+12     	; 0xb30 <xQueueGenericSendFromISR+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	f8 01       	movw	r30, r16
     b28:	80 83       	st	Z, r24
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <xQueueGenericSendFromISR+0x46>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	8e 8f       	std	Y+30, r24	; 0x1e
     b30:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	08 95       	ret

00000b3c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	0f 92       	push	r0
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     b4c:	8c 01       	movw	r16, r24
     b4e:	0f 5e       	subi	r16, 0xEF	; 239
     b50:	1f 4f       	sbci	r17, 0xFF	; 255
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <prvUnlockQueue+0x32>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
     b54:	89 89       	ldd	r24, Y+17	; 0x11
     b56:	88 23       	and	r24, r24
     b58:	69 f0       	breq	.+26     	; 0xb74 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     b5a:	c8 01       	movw	r24, r16
     b5c:	0e 94 56 08 	call	0x10ac	; 0x10ac <xTaskRemoveFromEventList>
     b60:	88 23       	and	r24, r24
     b62:	11 f0       	breq	.+4      	; 0xb68 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
     b64:	0e 94 52 08 	call	0x10a4	; 0x10a4 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
     b68:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b6a:	81 50       	subi	r24, 0x01	; 1
     b6c:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     b6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b70:	18 16       	cp	r1, r24
     b72:	84 f3       	brlt	.-32     	; 0xb54 <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     b82:	8e 01       	movw	r16, r28
     b84:	08 5f       	subi	r16, 0xF8	; 248
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <prvUnlockQueue+0x68>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
     b8a:	88 85       	ldd	r24, Y+8	; 0x08
     b8c:	88 23       	and	r24, r24
     b8e:	69 f0       	breq	.+26     	; 0xbaa <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     b90:	c8 01       	movw	r24, r16
     b92:	0e 94 56 08 	call	0x10ac	; 0x10ac <xTaskRemoveFromEventList>
     b96:	88 23       	and	r24, r24
     b98:	11 f0       	breq	.+4      	; 0xb9e <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
     b9a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
     b9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ba0:	81 50       	subi	r24, 0x01	; 1
     ba2:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     ba4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ba6:	18 16       	cp	r1, r24
     ba8:	84 f3       	brlt	.-32     	; 0xb8a <prvUnlockQueue+0x4e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	08 95       	ret

00000bbc <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
     bbc:	7f 92       	push	r7
     bbe:	8f 92       	push	r8
     bc0:	9f 92       	push	r9
     bc2:	af 92       	push	r10
     bc4:	bf 92       	push	r11
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <xQueueGenericReceive+0x1c>
     bd8:	00 d0       	rcall	.+0      	; 0xbda <xQueueGenericReceive+0x1e>
     bda:	0f 92       	push	r0
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	8c 01       	movw	r16, r24
     be2:	96 2e       	mov	r9, r22
     be4:	87 2e       	mov	r8, r23
     be6:	5d 83       	std	Y+5, r21	; 0x05
     be8:	4c 83       	std	Y+4, r20	; 0x04
     bea:	72 2e       	mov	r7, r18
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     bec:	91 e1       	ldi	r25, 0x11	; 17
     bee:	c9 2e       	mov	r12, r25
     bf0:	d1 2c       	mov	r13, r1
     bf2:	c0 0e       	add	r12, r16
     bf4:	d1 1e       	adc	r13, r17
     bf6:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     bf8:	7e 01       	movw	r14, r28
     bfa:	08 94       	sec
     bfc:	e1 1c       	adc	r14, r1
     bfe:	f1 1c       	adc	r15, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	a8 2e       	mov	r10, r24
     c04:	b1 2c       	mov	r11, r1
     c06:	ac 0e       	add	r10, r28
     c08:	bd 1e       	adc	r11, r29
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <xQueueGenericReceive+0x52>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     c0c:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
     c14:	f8 01       	movw	r30, r16
     c16:	82 8d       	ldd	r24, Z+26	; 0x1a
     c18:	88 23       	and	r24, r24
     c1a:	09 f4       	brne	.+2      	; 0xc1e <xQueueGenericReceive+0x62>
     c1c:	3e c0       	rjmp	.+124    	; 0xc9a <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
     c1e:	e6 80       	ldd	r14, Z+6	; 0x06
     c20:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     c22:	40 81       	ld	r20, Z
     c24:	51 81       	ldd	r21, Z+1	; 0x01
     c26:	41 15       	cp	r20, r1
     c28:	51 05       	cpc	r21, r1
     c2a:	b1 f0       	breq	.+44     	; 0xc58 <xQueueGenericReceive+0x9c>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
     c2c:	84 8d       	ldd	r24, Z+28	; 0x1c
     c2e:	97 01       	movw	r18, r14
     c30:	28 0f       	add	r18, r24
     c32:	31 1d       	adc	r19, r1
     c34:	37 83       	std	Z+7, r19	; 0x07
     c36:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	28 17       	cp	r18, r24
     c3e:	39 07       	cpc	r19, r25
     c40:	10 f0       	brcs	.+4      	; 0xc46 <xQueueGenericReceive+0x8a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
     c42:	57 83       	std	Z+7, r21	; 0x07
     c44:	46 83       	std	Z+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
     c46:	f8 01       	movw	r30, r16
     c48:	44 8d       	ldd	r20, Z+28	; 0x1c
     c4a:	66 81       	ldd	r22, Z+6	; 0x06
     c4c:	77 81       	ldd	r23, Z+7	; 0x07
     c4e:	89 2d       	mov	r24, r9
     c50:	98 2d       	mov	r25, r8
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
     c58:	77 20       	and	r7, r7
     c5a:	71 f4       	brne	.+28     	; 0xc78 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
     c5c:	f8 01       	movw	r30, r16
     c5e:	82 8d       	ldd	r24, Z+26	; 0x1a
     c60:	81 50       	subi	r24, 0x01	; 1
     c62:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     c64:	80 85       	ldd	r24, Z+8	; 0x08
     c66:	88 23       	and	r24, r24
     c68:	a1 f0       	breq	.+40     	; 0xc92 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     c6a:	c8 01       	movw	r24, r16
     c6c:	08 96       	adiw	r24, 0x08	; 8
     c6e:	0e 94 56 08 	call	0x10ac	; 0x10ac <xTaskRemoveFromEventList>
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	71 f4       	brne	.+28     	; 0xc92 <xQueueGenericReceive+0xd6>
     c76:	0b c0       	rjmp	.+22     	; 0xc8e <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
     c78:	f8 01       	movw	r30, r16
     c7a:	f7 82       	std	Z+7, r15	; 0x07
     c7c:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
     c7e:	81 89       	ldd	r24, Z+17	; 0x11
     c80:	88 23       	and	r24, r24
     c82:	39 f0       	breq	.+14     	; 0xc92 <xQueueGenericReceive+0xd6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     c84:	c6 01       	movw	r24, r12
     c86:	0e 94 56 08 	call	0x10ac	; 0x10ac <xTaskRemoveFromEventList>
     c8a:	88 23       	and	r24, r24
     c8c:	11 f0       	breq	.+4      	; 0xc92 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
     c8e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
     c92:	0f 90       	pop	r0
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	4a c0       	rjmp	.+148    	; 0xd2e <xQueueGenericReceive+0x172>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
     c9c:	9d 81       	ldd	r25, Y+5	; 0x05
     c9e:	89 2b       	or	r24, r25
     ca0:	19 f4       	brne	.+6      	; 0xca8 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	42 c0       	rjmp	.+132    	; 0xd2c <xQueueGenericReceive+0x170>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
     ca8:	22 23       	and	r18, r18
     caa:	19 f4       	brne	.+6      	; 0xcb2 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     cac:	c7 01       	movw	r24, r14
     cae:	0e 94 0d 08 	call	0x101a	; 0x101a <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     cb6:	0e 94 b1 07 	call	0xf62	; 0xf62 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	0f 92       	push	r0
     cc0:	f8 01       	movw	r30, r16
     cc2:	85 8d       	ldd	r24, Z+29	; 0x1d
     cc4:	8f 3f       	cpi	r24, 0xFF	; 255
     cc6:	09 f4       	brne	.+2      	; 0xcca <xQueueGenericReceive+0x10e>
     cc8:	15 8e       	std	Z+29, r1	; 0x1d
     cca:	f8 01       	movw	r30, r16
     ccc:	86 8d       	ldd	r24, Z+30	; 0x1e
     cce:	8f 3f       	cpi	r24, 0xFF	; 255
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <xQueueGenericReceive+0x118>
     cd2:	16 8e       	std	Z+30, r1	; 0x1e
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     cd8:	c7 01       	movw	r24, r14
     cda:	b5 01       	movw	r22, r10
     cdc:	0e 94 18 08 	call	0x1030	; 0x1030 <xTaskCheckForTimeOut>
     ce0:	88 23       	and	r24, r24
     ce2:	f9 f4       	brne	.+62     	; 0xd22 <xQueueGenericReceive+0x166>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
     cea:	f8 01       	movw	r30, r16
     cec:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
     cee:	0f 90       	pop	r0
     cf0:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
     cf2:	88 23       	and	r24, r24
     cf4:	81 f4       	brne	.+32     	; 0xd16 <xQueueGenericReceive+0x15a>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     cf6:	6c 81       	ldd	r22, Y+4	; 0x04
     cf8:	7d 81       	ldd	r23, Y+5	; 0x05
     cfa:	c6 01       	movw	r24, r12
     cfc:	0e 94 0f 09 	call	0x121e	; 0x121e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
     d00:	c8 01       	movw	r24, r16
     d02:	0e 94 9e 05 	call	0xb3c	; 0xb3c <prvUnlockQueue>
				if( !xTaskResumeAll() )
     d06:	0e 94 48 09 	call	0x1290	; 0x1290 <xTaskResumeAll>
     d0a:	88 23       	and	r24, r24
     d0c:	09 f0       	breq	.+2      	; 0xd10 <xQueueGenericReceive+0x154>
     d0e:	7e cf       	rjmp	.-260    	; 0xc0c <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
     d10:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vPortYield>
     d14:	7b cf       	rjmp	.-266    	; 0xc0c <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     d16:	c8 01       	movw	r24, r16
     d18:	0e 94 9e 05 	call	0xb3c	; 0xb3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
     d1c:	0e 94 48 09 	call	0x1290	; 0x1290 <xTaskResumeAll>
     d20:	75 cf       	rjmp	.-278    	; 0xc0c <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 9e 05 	call	0xb3c	; 0xb3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
     d28:	0e 94 48 09 	call	0x1290	; 0x1290 <xTaskResumeAll>
     d2c:	80 e0       	ldi	r24, 0x00	; 0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	7f 90       	pop	r7
     d52:	08 95       	ret

00000d54 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
     d54:	7f 92       	push	r7
     d56:	8f 92       	push	r8
     d58:	9f 92       	push	r9
     d5a:	af 92       	push	r10
     d5c:	bf 92       	push	r11
     d5e:	cf 92       	push	r12
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <xQueueGenericSend+0x1c>
     d70:	00 d0       	rcall	.+0      	; 0xd72 <xQueueGenericSend+0x1e>
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	8c 01       	movw	r16, r24
     d7a:	6b 01       	movw	r12, r22
     d7c:	5d 83       	std	Y+5, r21	; 0x05
     d7e:	4c 83       	std	Y+4, r20	; 0x04
     d80:	72 2e       	mov	r7, r18
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     d82:	48 e0       	ldi	r20, 0x08	; 8
     d84:	e4 2e       	mov	r14, r20
     d86:	f1 2c       	mov	r15, r1
     d88:	e8 0e       	add	r14, r24
     d8a:	f9 1e       	adc	r15, r25
     d8c:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     d8e:	5e 01       	movw	r10, r28
     d90:	08 94       	sec
     d92:	a1 1c       	adc	r10, r1
     d94:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     d96:	34 e0       	ldi	r19, 0x04	; 4
     d98:	83 2e       	mov	r8, r19
     d9a:	91 2c       	mov	r9, r1
     d9c:	8c 0e       	add	r8, r28
     d9e:	9d 1e       	adc	r9, r29
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     da2:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     daa:	f8 01       	movw	r30, r16
     dac:	92 8d       	ldd	r25, Z+26	; 0x1a
     dae:	83 8d       	ldd	r24, Z+27	; 0x1b
     db0:	98 17       	cp	r25, r24
     db2:	a8 f4       	brcc	.+42     	; 0xdde <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     db4:	c8 01       	movw	r24, r16
     db6:	b6 01       	movw	r22, r12
     db8:	47 2d       	mov	r20, r7
     dba:	0e 94 35 05 	call	0xa6a	; 0xa6a <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     dbe:	f8 01       	movw	r30, r16
     dc0:	81 89       	ldd	r24, Z+17	; 0x11
     dc2:	88 23       	and	r24, r24
     dc4:	41 f0       	breq	.+16     	; 0xdd6 <xQueueGenericSend+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     dc6:	c8 01       	movw	r24, r16
     dc8:	41 96       	adiw	r24, 0x11	; 17
     dca:	0e 94 56 08 	call	0x10ac	; 0x10ac <xTaskRemoveFromEventList>
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	11 f4       	brne	.+4      	; 0xdd6 <xQueueGenericSend+0x82>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
     dd2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
     dd6:	0f 90       	pop	r0
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	4c c0       	rjmp	.+152    	; 0xe76 <xQueueGenericSend+0x122>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     dde:	8c 81       	ldd	r24, Y+4	; 0x04
     de0:	9d 81       	ldd	r25, Y+5	; 0x05
     de2:	89 2b       	or	r24, r25
     de4:	19 f4       	brne	.+6      	; 0xdec <xQueueGenericSend+0x98>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	44 c0       	rjmp	.+136    	; 0xe74 <xQueueGenericSend+0x120>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
     dec:	22 23       	and	r18, r18
     dee:	19 f4       	brne	.+6      	; 0xdf6 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     df0:	c5 01       	movw	r24, r10
     df2:	0e 94 0d 08 	call	0x101a	; 0x101a <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     dfa:	0e 94 b1 07 	call	0xf62	; 0xf62 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	0f 92       	push	r0
     e04:	f8 01       	movw	r30, r16
     e06:	85 8d       	ldd	r24, Z+29	; 0x1d
     e08:	8f 3f       	cpi	r24, 0xFF	; 255
     e0a:	09 f4       	brne	.+2      	; 0xe0e <xQueueGenericSend+0xba>
     e0c:	15 8e       	std	Z+29, r1	; 0x1d
     e0e:	f8 01       	movw	r30, r16
     e10:	86 8d       	ldd	r24, Z+30	; 0x1e
     e12:	8f 3f       	cpi	r24, 0xFF	; 255
     e14:	09 f4       	brne	.+2      	; 0xe18 <xQueueGenericSend+0xc4>
     e16:	16 8e       	std	Z+30, r1	; 0x1e
     e18:	0f 90       	pop	r0
     e1a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     e1c:	c5 01       	movw	r24, r10
     e1e:	b4 01       	movw	r22, r8
     e20:	0e 94 18 08 	call	0x1030	; 0x1030 <xTaskCheckForTimeOut>
     e24:	88 23       	and	r24, r24
     e26:	09 f5       	brne	.+66     	; 0xe6a <xQueueGenericSend+0x116>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
     e2e:	f8 01       	movw	r30, r16
     e30:	92 8d       	ldd	r25, Z+26	; 0x1a
	taskEXIT_CRITICAL();
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
     e36:	f8 01       	movw	r30, r16
     e38:	83 8d       	ldd	r24, Z+27	; 0x1b
     e3a:	98 17       	cp	r25, r24
     e3c:	81 f4       	brne	.+32     	; 0xe5e <xQueueGenericSend+0x10a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     e3e:	6c 81       	ldd	r22, Y+4	; 0x04
     e40:	7d 81       	ldd	r23, Y+5	; 0x05
     e42:	c7 01       	movw	r24, r14
     e44:	0e 94 0f 09 	call	0x121e	; 0x121e <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     e48:	c8 01       	movw	r24, r16
     e4a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
     e4e:	0e 94 48 09 	call	0x1290	; 0x1290 <xTaskResumeAll>
     e52:	88 23       	and	r24, r24
     e54:	09 f0       	breq	.+2      	; 0xe58 <xQueueGenericSend+0x104>
     e56:	a5 cf       	rjmp	.-182    	; 0xda2 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
     e58:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vPortYield>
     e5c:	a2 cf       	rjmp	.-188    	; 0xda2 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     e5e:	c8 01       	movw	r24, r16
     e60:	0e 94 9e 05 	call	0xb3c	; 0xb3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
     e64:	0e 94 48 09 	call	0x1290	; 0x1290 <xTaskResumeAll>
     e68:	9c cf       	rjmp	.-200    	; 0xda2 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     e6a:	c8 01       	movw	r24, r16
     e6c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
     e70:	0e 94 48 09 	call	0x1290	; 0x1290 <xTaskResumeAll>
     e74:	80 e0       	ldi	r24, 0x00	; 0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	bf 90       	pop	r11
     e92:	af 90       	pop	r10
     e94:	9f 90       	pop	r9
     e96:	8f 90       	pop	r8
     e98:	7f 90       	pop	r7
     e9a:	08 95       	ret

00000e9c <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
     e9c:	8f 92       	push	r8
     e9e:	9f 92       	push	r9
     ea0:	af 92       	push	r10
     ea2:	bf 92       	push	r11
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	98 2e       	mov	r9, r24
     eb6:	86 2e       	mov	r8, r22
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
     eb8:	88 23       	and	r24, r24
     eba:	09 f4       	brne	.+2      	; 0xebe <xQueueCreate+0x22>
     ebc:	42 c0       	rjmp	.+132    	; 0xf42 <xQueueCreate+0xa6>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     ebe:	8f e1       	ldi	r24, 0x1F	; 31
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <pvPortMalloc>
     ec6:	8c 01       	movw	r16, r24
     ec8:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	e1 f1       	breq	.+120    	; 0xf46 <xQueueCreate+0xaa>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
     ece:	c9 2c       	mov	r12, r9
     ed0:	dd 24       	eor	r13, r13
     ed2:	a8 2c       	mov	r10, r8
     ed4:	bb 24       	eor	r11, r11
     ed6:	ac 9c       	mul	r10, r12
     ed8:	70 01       	movw	r14, r0
     eda:	ad 9c       	mul	r10, r13
     edc:	f0 0c       	add	r15, r0
     ede:	bc 9c       	mul	r11, r12
     ee0:	f0 0c       	add	r15, r0
     ee2:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
     ee4:	c7 01       	movw	r24, r14
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <pvPortMalloc>
     eec:	9c 01       	movw	r18, r24
     eee:	99 83       	std	Y+1, r25	; 0x01
     ef0:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	19 f1       	breq	.+70     	; 0xf3c <xQueueCreate+0xa0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
     ef6:	e8 0e       	add	r14, r24
     ef8:	f9 1e       	adc	r15, r25
     efa:	fb 82       	std	Y+3, r15	; 0x03
     efc:	ea 82       	std	Y+2, r14	; 0x02
				pxNewQueue->uxMessagesWaiting = 0;
     efe:	1a 8e       	std	Y+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
     f00:	9d 83       	std	Y+5, r25	; 0x05
     f02:	8c 83       	std	Y+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
     f04:	08 94       	sec
     f06:	c1 08       	sbc	r12, r1
     f08:	d1 08       	sbc	r13, r1
     f0a:	ca 9c       	mul	r12, r10
     f0c:	c0 01       	movw	r24, r0
     f0e:	cb 9c       	mul	r12, r11
     f10:	90 0d       	add	r25, r0
     f12:	da 9c       	mul	r13, r10
     f14:	90 0d       	add	r25, r0
     f16:	11 24       	eor	r1, r1
     f18:	28 0f       	add	r18, r24
     f1a:	39 1f       	adc	r19, r25
     f1c:	3f 83       	std	Y+7, r19	; 0x07
     f1e:	2e 83       	std	Y+6, r18	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
     f20:	9b 8e       	std	Y+27, r9	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
     f22:	8c 8e       	std	Y+28, r8	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	8d 8f       	std	Y+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
     f28:	8e 8f       	std	Y+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     f2a:	c8 01       	movw	r24, r16
     f2c:	08 96       	adiw	r24, 0x08	; 8
     f2e:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
     f32:	c8 01       	movw	r24, r16
     f34:	41 96       	adiw	r24, 0x11	; 17
     f36:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <xQueueCreate+0xaa>
				return  pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
     f3c:	c8 01       	movw	r24, r16
     f3e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vPortFree>
     f42:	c0 e0       	ldi	r28, 0x00	; 0
     f44:	d0 e0       	ldi	r29, 0x00	; 0
	}

	/* Will only reach here if we could not allocate enough memory or no memory
	was required. */
	return NULL;
}
     f46:	ce 01       	movw	r24, r28
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	9f 90       	pop	r9
     f5e:	8f 90       	pop	r8
     f60:	08 95       	ret

00000f62 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     f62:	80 91 ae 02 	lds	r24, 0x02AE
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	80 93 ae 02 	sts	0x02AE, r24
}
     f6c:	08 95       	ret

00000f6e <xTaskGetTickCount>:
portTickType xTaskGetTickCount( void )
{
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portENTER_CRITICAL();
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	0f 92       	push	r0
	{
		xTicks = xTickCount;
     f74:	20 91 ac 02 	lds	r18, 0x02AC
     f78:	30 91 ad 02 	lds	r19, 0x02AD
	}
	portEXIT_CRITICAL();
     f7c:	0f 90       	pop	r0
     f7e:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
     f80:	c9 01       	movw	r24, r18
     f82:	08 95       	ret

00000f84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
	return xTickCount;
     f84:	20 91 ac 02 	lds	r18, 0x02AC
     f88:	30 91 ad 02 	lds	r19, 0x02AD
}
     f8c:	c9 01       	movw	r24, r18
     f8e:	08 95       	ret

00000f90 <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
     f90:	80 91 b1 02 	lds	r24, 0x02B1
}
     f94:	08 95       	ret

00000f96 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     f96:	80 91 ae 02 	lds	r24, 0x02AE
     f9a:	88 23       	and	r24, r24
     f9c:	51 f0       	breq	.+20     	; 0xfb2 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	80 93 aa 02 	sts	0x02AA, r24
     fa4:	08 95       	ret
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
	{
		--uxTopReadyPriority;
     fa6:	80 91 af 02 	lds	r24, 0x02AF
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	80 93 af 02 	sts	0x02AF, r24
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <vTaskSwitchContext+0x1e>

	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
     fb2:	99 e0       	ldi	r25, 0x09	; 9
     fb4:	e0 91 af 02 	lds	r30, 0x02AF
     fb8:	e9 9f       	mul	r30, r25
     fba:	f0 01       	movw	r30, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	ea 54       	subi	r30, 0x4A	; 74
     fc0:	fd 4f       	sbci	r31, 0xFD	; 253
     fc2:	80 81       	ld	r24, Z
     fc4:	88 23       	and	r24, r24
     fc6:	79 f3       	breq	.-34     	; 0xfa6 <vTaskSwitchContext+0x10>
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
     fc8:	90 91 af 02 	lds	r25, 0x02AF
     fcc:	89 e0       	ldi	r24, 0x09	; 9
     fce:	98 9f       	mul	r25, r24
     fd0:	d0 01       	movw	r26, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	aa 54       	subi	r26, 0x4A	; 74
     fd6:	bd 4f       	sbci	r27, 0xFD	; 253
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	ed 91       	ld	r30, X+
     fdc:	fc 91       	ld	r31, X
     fde:	12 97       	sbiw	r26, 0x02	; 2
     fe0:	02 80       	ldd	r0, Z+2	; 0x02
     fe2:	f3 81       	ldd	r31, Z+3	; 0x03
     fe4:	e0 2d       	mov	r30, r0
     fe6:	12 96       	adiw	r26, 0x02	; 2
     fe8:	fc 93       	st	X, r31
     fea:	ee 93       	st	-X, r30
     fec:	11 97       	sbiw	r26, 0x01	; 1
     fee:	cd 01       	movw	r24, r26
     ff0:	03 96       	adiw	r24, 0x03	; 3
     ff2:	e8 17       	cp	r30, r24
     ff4:	f9 07       	cpc	r31, r25
     ff6:	31 f4       	brne	.+12     	; 0x1004 <vTaskSwitchContext+0x6e>
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	93 81       	ldd	r25, Z+3	; 0x03
     ffc:	12 96       	adiw	r26, 0x02	; 2
     ffe:	9c 93       	st	X, r25
    1000:	8e 93       	st	-X, r24
    1002:	11 97       	sbiw	r26, 0x01	; 1
    1004:	11 96       	adiw	r26, 0x01	; 1
    1006:	ed 91       	ld	r30, X+
    1008:	fc 91       	ld	r31, X
    100a:	12 97       	sbiw	r26, 0x02	; 2
    100c:	86 81       	ldd	r24, Z+6	; 0x06
    100e:	97 81       	ldd	r25, Z+7	; 0x07
    1010:	90 93 a9 02 	sts	0x02A9, r25
    1014:	80 93 a8 02 	sts	0x02A8, r24
    1018:	08 95       	ret

0000101a <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    101a:	fc 01       	movw	r30, r24
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    101c:	80 91 ab 02 	lds	r24, 0x02AB
    1020:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    1022:	80 91 ac 02 	lds	r24, 0x02AC
    1026:	90 91 ad 02 	lds	r25, 0x02AD
    102a:	92 83       	std	Z+2, r25	; 0x02
    102c:	81 83       	std	Z+1, r24	; 0x01
}
    102e:	08 95       	ret

00001030 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    1030:	fc 01       	movw	r30, r24
    1032:	db 01       	movw	r26, r22
portBASE_TYPE xReturn;

	portENTER_CRITICAL();
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    103a:	90 91 ab 02 	lds	r25, 0x02AB
    103e:	80 81       	ld	r24, Z
    1040:	98 17       	cp	r25, r24
    1042:	49 f0       	breq	.+18     	; 0x1056 <xTaskCheckForTimeOut+0x26>
    1044:	20 91 ac 02 	lds	r18, 0x02AC
    1048:	30 91 ad 02 	lds	r19, 0x02AD
    104c:	81 81       	ldd	r24, Z+1	; 0x01
    104e:	92 81       	ldd	r25, Z+2	; 0x02
    1050:	28 17       	cp	r18, r24
    1052:	39 07       	cpc	r19, r25
    1054:	18 f5       	brcc	.+70     	; 0x109c <xTaskCheckForTimeOut+0x6c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    1056:	80 91 ac 02 	lds	r24, 0x02AC
    105a:	90 91 ad 02 	lds	r25, 0x02AD
    105e:	21 81       	ldd	r18, Z+1	; 0x01
    1060:	32 81       	ldd	r19, Z+2	; 0x02
    1062:	4d 91       	ld	r20, X+
    1064:	5c 91       	ld	r21, X
    1066:	11 97       	sbiw	r26, 0x01	; 1
    1068:	82 1b       	sub	r24, r18
    106a:	93 0b       	sbc	r25, r19
    106c:	84 17       	cp	r24, r20
    106e:	95 07       	cpc	r25, r21
    1070:	a8 f4       	brcc	.+42     	; 0x109c <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    1072:	80 91 ac 02 	lds	r24, 0x02AC
    1076:	90 91 ad 02 	lds	r25, 0x02AD
    107a:	28 1b       	sub	r18, r24
    107c:	39 0b       	sbc	r19, r25
    107e:	24 0f       	add	r18, r20
    1080:	35 1f       	adc	r19, r21
    1082:	2d 93       	st	X+, r18
    1084:	3c 93       	st	X, r19
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1086:	80 91 ab 02 	lds	r24, 0x02AB
    108a:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    108c:	80 91 ac 02 	lds	r24, 0x02AC
    1090:	90 91 ad 02 	lds	r25, 0x02AD
    1094:	92 83       	std	Z+2, r25	; 0x02
    1096:	81 83       	std	Z+1, r24	; 0x01
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	01 c0       	rjmp	.+2      	; 0x109e <xTaskCheckForTimeOut+0x6e>
    109c:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	portEXIT_CRITICAL();
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    10a2:	08 95       	ret

000010a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 93 aa 02 	sts	0x02AA, r24
}
    10aa:	08 95       	ret

000010ac <xTaskRemoveFromEventList>:
	#endif
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	fc 01       	movw	r30, r24
	it to the ready list.

	If an event is for a queue that is locked then this function will never
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    10b6:	80 81       	ld	r24, Z
    10b8:	88 23       	and	r24, r24
    10ba:	19 f4       	brne	.+6      	; 0x10c2 <xTaskRemoveFromEventList+0x16>
    10bc:	c0 e0       	ldi	r28, 0x00	; 0
    10be:	d0 e0       	ldi	r29, 0x00	; 0
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <xTaskRemoveFromEventList+0x20>
    10c2:	05 80       	ldd	r0, Z+5	; 0x05
    10c4:	f6 81       	ldd	r31, Z+6	; 0x06
    10c6:	e0 2d       	mov	r30, r0
    10c8:	c6 81       	ldd	r28, Z+6	; 0x06
    10ca:	d7 81       	ldd	r29, Z+7	; 0x07
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    10cc:	8e 01       	movw	r16, r28
    10ce:	04 5f       	subi	r16, 0xF4	; 244
    10d0:	1f 4f       	sbci	r17, 0xFF	; 255
    10d2:	c8 01       	movw	r24, r16
    10d4:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    10d8:	80 91 ae 02 	lds	r24, 0x02AE
    10dc:	88 23       	and	r24, r24
    10de:	a1 f4       	brne	.+40     	; 0x1108 <xTaskRemoveFromEventList+0x5c>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    10e0:	8e 01       	movw	r16, r28
    10e2:	0e 5f       	subi	r16, 0xFE	; 254
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	c8 01       	movw	r24, r16
    10e8:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    10ec:	9e 89       	ldd	r25, Y+22	; 0x16
    10ee:	80 91 af 02 	lds	r24, 0x02AF
    10f2:	89 17       	cp	r24, r25
    10f4:	10 f4       	brcc	.+4      	; 0x10fa <xTaskRemoveFromEventList+0x4e>
    10f6:	90 93 af 02 	sts	0x02AF, r25
    10fa:	89 e0       	ldi	r24, 0x09	; 9
    10fc:	98 9f       	mul	r25, r24
    10fe:	c0 01       	movw	r24, r0
    1100:	11 24       	eor	r1, r1
    1102:	8a 54       	subi	r24, 0x4A	; 74
    1104:	9d 4f       	sbci	r25, 0xFD	; 253
    1106:	02 c0       	rjmp	.+4      	; 0x110c <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1108:	80 ef       	ldi	r24, 0xF0	; 240
    110a:	92 e0       	ldi	r25, 0x02	; 2
    110c:	b8 01       	movw	r22, r16
    110e:	0e 94 46 04 	call	0x88c	; 0x88c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1112:	e0 91 a8 02 	lds	r30, 0x02A8
    1116:	f0 91 a9 02 	lds	r31, 0x02A9
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	9e 89       	ldd	r25, Y+22	; 0x16
    111e:	86 89       	ldd	r24, Z+22	; 0x16
    1120:	98 17       	cp	r25, r24
    1122:	08 f0       	brcs	.+2      	; 0x1126 <xTaskRemoveFromEventList+0x7a>
    1124:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    1126:	82 2f       	mov	r24, r18
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    113c:	80 91 ae 02 	lds	r24, 0x02AE
    1140:	88 23       	and	r24, r24
    1142:	09 f0       	breq	.+2      	; 0x1146 <vTaskIncrementTick+0x14>
    1144:	61 c0       	rjmp	.+194    	; 0x1208 <vTaskIncrementTick+0xd6>
	{
		++xTickCount;
    1146:	80 91 ac 02 	lds	r24, 0x02AC
    114a:	90 91 ad 02 	lds	r25, 0x02AD
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	90 93 ad 02 	sts	0x02AD, r25
    1154:	80 93 ac 02 	sts	0x02AC, r24
		if( xTickCount == ( portTickType ) 0 )
    1158:	80 91 ac 02 	lds	r24, 0x02AC
    115c:	90 91 ad 02 	lds	r25, 0x02AD
    1160:	89 2b       	or	r24, r25
    1162:	e9 f5       	brne	.+122    	; 0x11de <vTaskIncrementTick+0xac>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
    1164:	80 91 ec 02 	lds	r24, 0x02EC
    1168:	90 91 ed 02 	lds	r25, 0x02ED
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    116c:	20 91 ee 02 	lds	r18, 0x02EE
    1170:	30 91 ef 02 	lds	r19, 0x02EF
    1174:	30 93 ed 02 	sts	0x02ED, r19
    1178:	20 93 ec 02 	sts	0x02EC, r18
			pxOverflowDelayedTaskList = pxTemp;
    117c:	90 93 ef 02 	sts	0x02EF, r25
    1180:	80 93 ee 02 	sts	0x02EE, r24
			xNumOfOverflows++;
    1184:	80 91 ab 02 	lds	r24, 0x02AB
    1188:	8f 5f       	subi	r24, 0xFF	; 255
    118a:	80 93 ab 02 	sts	0x02AB, r24
    118e:	27 c0       	rjmp	.+78     	; 0x11de <vTaskIncrementTick+0xac>
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    1190:	20 91 ac 02 	lds	r18, 0x02AC
    1194:	30 91 ad 02 	lds	r19, 0x02AD
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	9b 81       	ldd	r25, Y+3	; 0x03
    119c:	28 17       	cp	r18, r24
    119e:	39 07       	cpc	r19, r25
    11a0:	c0 f1       	brcs	.+112    	; 0x1212 <vTaskIncrementTick+0xe0>
    11a2:	8e 01       	movw	r16, r28
    11a4:	0e 5f       	subi	r16, 0xFE	; 254
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	c8 01       	movw	r24, r16
    11aa:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
    11ae:	8c 89       	ldd	r24, Y+20	; 0x14
    11b0:	9d 89       	ldd	r25, Y+21	; 0x15
    11b2:	89 2b       	or	r24, r25
    11b4:	21 f0       	breq	.+8      	; 0x11be <vTaskIncrementTick+0x8c>
    11b6:	ce 01       	movw	r24, r28
    11b8:	0c 96       	adiw	r24, 0x0c	; 12
    11ba:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
    11be:	9e 89       	ldd	r25, Y+22	; 0x16
    11c0:	80 91 af 02 	lds	r24, 0x02AF
    11c4:	89 17       	cp	r24, r25
    11c6:	10 f4       	brcc	.+4      	; 0x11cc <vTaskIncrementTick+0x9a>
    11c8:	90 93 af 02 	sts	0x02AF, r25
    11cc:	9f 9d       	mul	r25, r15
    11ce:	c0 01       	movw	r24, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	8a 54       	subi	r24, 0x4A	; 74
    11d4:	9d 4f       	sbci	r25, 0xFD	; 253
    11d6:	b8 01       	movw	r22, r16
    11d8:	0e 94 46 04 	call	0x88c	; 0x88c <vListInsertEnd>
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <vTaskIncrementTick+0xb0>
    11de:	89 e0       	ldi	r24, 0x09	; 9
    11e0:	f8 2e       	mov	r15, r24
    11e2:	e0 91 ec 02 	lds	r30, 0x02EC
    11e6:	f0 91 ed 02 	lds	r31, 0x02ED
    11ea:	80 81       	ld	r24, Z
    11ec:	88 23       	and	r24, r24
    11ee:	89 f0       	breq	.+34     	; 0x1212 <vTaskIncrementTick+0xe0>
    11f0:	e0 91 ec 02 	lds	r30, 0x02EC
    11f4:	f0 91 ed 02 	lds	r31, 0x02ED
    11f8:	05 80       	ldd	r0, Z+5	; 0x05
    11fa:	f6 81       	ldd	r31, Z+6	; 0x06
    11fc:	e0 2d       	mov	r30, r0
    11fe:	c6 81       	ldd	r28, Z+6	; 0x06
    1200:	d7 81       	ldd	r29, Z+7	; 0x07
    1202:	20 97       	sbiw	r28, 0x00	; 0
    1204:	29 f6       	brne	.-118    	; 0x1190 <vTaskIncrementTick+0x5e>
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <vTaskIncrementTick+0xe0>
	}
	else
	{
		++uxMissedTicks;
    1208:	80 91 b0 02 	lds	r24, 0x02B0
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	80 93 b0 02 	sts	0x02B0, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	08 95       	ret

0000121e <vTaskPlaceOnEventList>:
	vWriteTraceToBuffer();
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	8b 01       	movw	r16, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    1224:	60 91 a8 02 	lds	r22, 0x02A8
    1228:	70 91 a9 02 	lds	r23, 0x02A9
    122c:	64 5f       	subi	r22, 0xF4	; 244
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	0e 94 6f 04 	call	0x8de	; 0x8de <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1234:	80 91 a8 02 	lds	r24, 0x02A8
    1238:	90 91 a9 02 	lds	r25, 0x02A9
    123c:	02 96       	adiw	r24, 0x02	; 2
    123e:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    1242:	80 91 ac 02 	lds	r24, 0x02AC
    1246:	90 91 ad 02 	lds	r25, 0x02AD
    124a:	80 0f       	add	r24, r16
    124c:	91 1f       	adc	r25, r17

			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    124e:	e0 91 a8 02 	lds	r30, 0x02A8
    1252:	f0 91 a9 02 	lds	r31, 0x02A9
    1256:	93 83       	std	Z+3, r25	; 0x03
    1258:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xTickCount )
    125a:	20 91 ac 02 	lds	r18, 0x02AC
    125e:	30 91 ad 02 	lds	r19, 0x02AD
    1262:	82 17       	cp	r24, r18
    1264:	93 07       	cpc	r25, r19
    1266:	28 f4       	brcc	.+10     	; 0x1272 <vTaskPlaceOnEventList+0x54>
			{
				/* Wake time has overflowed.  Place this item in the overflow list. */
				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1268:	80 91 ee 02 	lds	r24, 0x02EE
    126c:	90 91 ef 02 	lds	r25, 0x02EF
    1270:	04 c0       	rjmp	.+8      	; 0x127a <vTaskPlaceOnEventList+0x5c>
			}
			else
			{
				/* The wake time has not overflowed, so we can use the current block list. */
				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1272:	80 91 ec 02 	lds	r24, 0x02EC
    1276:	90 91 ed 02 	lds	r25, 0x02ED
    127a:	60 91 a8 02 	lds	r22, 0x02A8
    127e:	70 91 a9 02 	lds	r23, 0x02A9
    1282:	6e 5f       	subi	r22, 0xFE	; 254
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	0e 94 6f 04 	call	0x8de	; 0x8de <vListInsert>
			}
	}
	#endif
}
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1290:	cf 92       	push	r12
    1292:	df 92       	push	r13
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	portENTER_CRITICAL();
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    12aa:	80 91 ae 02 	lds	r24, 0x02AE
    12ae:	81 50       	subi	r24, 0x01	; 1
    12b0:	80 93 ae 02 	sts	0x02AE, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    12b4:	80 91 ae 02 	lds	r24, 0x02AE
    12b8:	88 23       	and	r24, r24
    12ba:	09 f0       	breq	.+2      	; 0x12be <xTaskResumeAll+0x2e>
    12bc:	5b c0       	rjmp	.+182    	; 0x1374 <xTaskResumeAll+0xe4>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
    12be:	80 91 b1 02 	lds	r24, 0x02B1
    12c2:	88 23       	and	r24, r24
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <xTaskResumeAll+0x38>
    12c6:	56 c0       	rjmp	.+172    	; 0x1374 <xTaskResumeAll+0xe4>
    12c8:	19 82       	std	Y+1, r1	; 0x01
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    12ca:	99 e0       	ldi	r25, 0x09	; 9
    12cc:	f9 2e       	mov	r15, r25
    12ce:	27 c0       	rjmp	.+78     	; 0x131e <xTaskResumeAll+0x8e>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
    12d0:	c6 01       	movw	r24, r12
    12d2:	0c 96       	adiw	r24, 0x0c	; 12
    12d4:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    12d8:	86 01       	movw	r16, r12
    12da:	0e 5f       	subi	r16, 0xFE	; 254
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	c8 01       	movw	r24, r16
    12e0:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    12e4:	d6 01       	movw	r26, r12
    12e6:	56 96       	adiw	r26, 0x16	; 22
    12e8:	9c 91       	ld	r25, X
    12ea:	80 91 af 02 	lds	r24, 0x02AF
    12ee:	89 17       	cp	r24, r25
    12f0:	10 f4       	brcc	.+4      	; 0x12f6 <xTaskResumeAll+0x66>
    12f2:	90 93 af 02 	sts	0x02AF, r25
    12f6:	9f 9d       	mul	r25, r15
    12f8:	c0 01       	movw	r24, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	8a 54       	subi	r24, 0x4A	; 74
    12fe:	9d 4f       	sbci	r25, 0xFD	; 253
    1300:	b8 01       	movw	r22, r16
    1302:	0e 94 46 04 	call	0x88c	; 0x88c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1306:	e0 91 a8 02 	lds	r30, 0x02A8
    130a:	f0 91 a9 02 	lds	r31, 0x02A9
    130e:	d6 01       	movw	r26, r12
    1310:	56 96       	adiw	r26, 0x16	; 22
    1312:	9c 91       	ld	r25, X
    1314:	86 89       	ldd	r24, Z+22	; 0x16
    1316:	98 17       	cp	r25, r24
    1318:	10 f0       	brcs	.+4      	; 0x131e <xTaskResumeAll+0x8e>
    131a:	b1 e0       	ldi	r27, 0x01	; 1
    131c:	b9 83       	std	Y+1, r27	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
    131e:	80 91 f0 02 	lds	r24, 0x02F0
    1322:	88 23       	and	r24, r24
    1324:	49 f0       	breq	.+18     	; 0x1338 <xTaskResumeAll+0xa8>
    1326:	e0 91 f5 02 	lds	r30, 0x02F5
    132a:	f0 91 f6 02 	lds	r31, 0x02F6
    132e:	c6 80       	ldd	r12, Z+6	; 0x06
    1330:	d7 80       	ldd	r13, Z+7	; 0x07
    1332:	c1 14       	cp	r12, r1
    1334:	d1 04       	cpc	r13, r1
    1336:	61 f6       	brne	.-104    	; 0x12d0 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    1338:	80 91 b0 02 	lds	r24, 0x02B0
    133c:	88 23       	and	r24, r24
    133e:	41 f4       	brne	.+16     	; 0x1350 <xTaskResumeAll+0xc0>
    1340:	0c c0       	rjmp	.+24     	; 0x135a <xTaskResumeAll+0xca>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
    1342:	0e 94 99 08 	call	0x1132	; 0x1132 <vTaskIncrementTick>
						--uxMissedTicks;
    1346:	80 91 b0 02 	lds	r24, 0x02B0
    134a:	81 50       	subi	r24, 0x01	; 1
    134c:	80 93 b0 02 	sts	0x02B0, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    1350:	80 91 b0 02 	lds	r24, 0x02B0
    1354:	88 23       	and	r24, r24
    1356:	a9 f7       	brne	.-22     	; 0x1342 <xTaskResumeAll+0xb2>
    1358:	07 c0       	rjmp	.+14     	; 0x1368 <xTaskResumeAll+0xd8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    135a:	e9 81       	ldd	r30, Y+1	; 0x01
    135c:	e1 30       	cpi	r30, 0x01	; 1
    135e:	21 f0       	breq	.+8      	; 0x1368 <xTaskResumeAll+0xd8>
    1360:	80 91 aa 02 	lds	r24, 0x02AA
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	31 f4       	brne	.+12     	; 0x1374 <xTaskResumeAll+0xe4>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    1368:	10 92 aa 02 	sts	0x02AA, r1
					portYIELD_WITHIN_API();
    136c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vPortYield>
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <xTaskResumeAll+0xe6>
    1374:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	portEXIT_CRITICAL();
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	08 95       	ret

0000138c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	9c 01       	movw	r18, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	a1 f1       	breq	.+104    	; 0x13fe <vTaskDelay+0x72>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1396:	80 91 ae 02 	lds	r24, 0x02AE
    139a:	8f 5f       	subi	r24, 0xFF	; 255
    139c:	80 93 ae 02 	sts	0x02AE, r24
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    13a0:	00 91 ac 02 	lds	r16, 0x02AC
    13a4:	10 91 ad 02 	lds	r17, 0x02AD
    13a8:	02 0f       	add	r16, r18
    13aa:	13 1f       	adc	r17, r19

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    13ac:	80 91 a8 02 	lds	r24, 0x02A8
    13b0:	90 91 a9 02 	lds	r25, 0x02A9
    13b4:	02 96       	adiw	r24, 0x02	; 2
    13b6:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    13ba:	e0 91 a8 02 	lds	r30, 0x02A8
    13be:	f0 91 a9 02 	lds	r31, 0x02A9
    13c2:	13 83       	std	Z+3, r17	; 0x03
    13c4:	02 83       	std	Z+2, r16	; 0x02

				if( xTimeToWake < xTickCount )
    13c6:	80 91 ac 02 	lds	r24, 0x02AC
    13ca:	90 91 ad 02 	lds	r25, 0x02AD
    13ce:	08 17       	cp	r16, r24
    13d0:	19 07       	cpc	r17, r25
    13d2:	28 f4       	brcc	.+10     	; 0x13de <vTaskDelay+0x52>
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    13d4:	80 91 ee 02 	lds	r24, 0x02EE
    13d8:	90 91 ef 02 	lds	r25, 0x02EF
    13dc:	04 c0       	rjmp	.+8      	; 0x13e6 <vTaskDelay+0x5a>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    13de:	80 91 ec 02 	lds	r24, 0x02EC
    13e2:	90 91 ed 02 	lds	r25, 0x02ED
    13e6:	60 91 a8 02 	lds	r22, 0x02A8
    13ea:	70 91 a9 02 	lds	r23, 0x02A9
    13ee:	6e 5f       	subi	r22, 0xFE	; 254
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	0e 94 6f 04 	call	0x8de	; 0x8de <vListInsert>
				}
			}
			xAlreadyYielded = xTaskResumeAll();
    13f6:	0e 94 48 09 	call	0x1290	; 0x1290 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    13fa:	88 23       	and	r24, r24
    13fc:	11 f4       	brne	.+4      	; 0x1402 <vTaskDelay+0x76>
		{
			portYIELD_WITHIN_API();
    13fe:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vPortYield>
		}
	}
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	fc 01       	movw	r30, r24
    140e:	eb 01       	movw	r28, r22

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1410:	80 91 ae 02 	lds	r24, 0x02AE
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	80 93 ae 02 	sts	0x02AE, r24
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    141a:	20 81       	ld	r18, Z
    141c:	31 81       	ldd	r19, Z+1	; 0x01
    141e:	c2 0f       	add	r28, r18
    1420:	d3 1f       	adc	r29, r19

			if( xTickCount < *pxPreviousWakeTime )
    1422:	80 91 ac 02 	lds	r24, 0x02AC
    1426:	90 91 ad 02 	lds	r25, 0x02AD
    142a:	82 17       	cp	r24, r18
    142c:	93 07       	cpc	r25, r19
    142e:	28 f4       	brcc	.+10     	; 0x143a <vTaskDelayUntil+0x32>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1430:	c2 17       	cp	r28, r18
    1432:	d3 07       	cpc	r29, r19
    1434:	28 f0       	brcs	.+10     	; 0x1440 <vTaskDelayUntil+0x38>
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	0c c0       	rjmp	.+24     	; 0x1452 <vTaskDelayUntil+0x4a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    143a:	c2 17       	cp	r28, r18
    143c:	d3 07       	cpc	r29, r19
    143e:	40 f0       	brcs	.+16     	; 0x1450 <vTaskDelayUntil+0x48>
    1440:	80 91 ac 02 	lds	r24, 0x02AC
    1444:	90 91 ad 02 	lds	r25, 0x02AD
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	8c 17       	cp	r24, r28
    144c:	9d 07       	cpc	r25, r29
    144e:	08 f4       	brcc	.+2      	; 0x1452 <vTaskDelayUntil+0x4a>
    1450:	21 e0       	ldi	r18, 0x01	; 1
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1452:	d1 83       	std	Z+1, r29	; 0x01
    1454:	c0 83       	st	Z, r28

			if( xShouldDelay )
    1456:	22 23       	and	r18, r18
    1458:	29 f1       	breq	.+74     	; 0x14a4 <vTaskDelayUntil+0x9c>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    145a:	80 91 a8 02 	lds	r24, 0x02A8
    145e:	90 91 a9 02 	lds	r25, 0x02A9
    1462:	02 96       	adiw	r24, 0x02	; 2
    1464:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1468:	e0 91 a8 02 	lds	r30, 0x02A8
    146c:	f0 91 a9 02 	lds	r31, 0x02A9
    1470:	d3 83       	std	Z+3, r29	; 0x03
    1472:	c2 83       	std	Z+2, r28	; 0x02

				if( xTimeToWake < xTickCount )
    1474:	80 91 ac 02 	lds	r24, 0x02AC
    1478:	90 91 ad 02 	lds	r25, 0x02AD
    147c:	c8 17       	cp	r28, r24
    147e:	d9 07       	cpc	r29, r25
    1480:	28 f4       	brcc	.+10     	; 0x148c <vTaskDelayUntil+0x84>
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1482:	80 91 ee 02 	lds	r24, 0x02EE
    1486:	90 91 ef 02 	lds	r25, 0x02EF
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <vTaskDelayUntil+0x8c>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    148c:	80 91 ec 02 	lds	r24, 0x02EC
    1490:	90 91 ed 02 	lds	r25, 0x02ED
    1494:	60 91 a8 02 	lds	r22, 0x02A8
    1498:	70 91 a9 02 	lds	r23, 0x02A9
    149c:	6e 5f       	subi	r22, 0xFE	; 254
    149e:	7f 4f       	sbci	r23, 0xFF	; 255
    14a0:	0e 94 6f 04 	call	0x8de	; 0x8de <vListInsert>
				}
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    14a4:	0e 94 48 09 	call	0x1290	; 0x1290 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    14a8:	88 23       	and	r24, r24
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
    14ac:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vPortYield>
		}
	}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		portENTER_CRITICAL();
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    14ca:	80 91 a8 02 	lds	r24, 0x02A8
    14ce:	90 91 a9 02 	lds	r25, 0x02A9
    14d2:	08 17       	cp	r16, r24
    14d4:	19 07       	cpc	r17, r25
    14d6:	19 f4       	brne	.+6      	; 0x14de <vTaskDelete+0x28>
    14d8:	00 e0       	ldi	r16, 0x00	; 0
    14da:	10 e0       	ldi	r17, 0x00	; 0
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    14de:	01 15       	cp	r16, r1
    14e0:	11 05       	cpc	r17, r1
    14e2:	29 f4       	brne	.+10     	; 0x14ee <vTaskDelete+0x38>
    14e4:	c0 91 a8 02 	lds	r28, 0x02A8
    14e8:	d0 91 a9 02 	lds	r29, 0x02A9
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <vTaskDelete+0x3a>
    14ee:	e8 01       	movw	r28, r16

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    14f0:	22 e0       	ldi	r18, 0x02	; 2
    14f2:	e2 2e       	mov	r14, r18
    14f4:	f1 2c       	mov	r15, r1
    14f6:	ec 0e       	add	r14, r28
    14f8:	fd 1e       	adc	r15, r29
    14fa:	c7 01       	movw	r24, r14
    14fc:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
    1500:	8c 89       	ldd	r24, Y+20	; 0x14
    1502:	9d 89       	ldd	r25, Y+21	; 0x15
    1504:	89 2b       	or	r24, r25
    1506:	21 f0       	breq	.+8      	; 0x1510 <vTaskDelete+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1508:	ce 01       	movw	r24, r28
    150a:	0c 96       	adiw	r24, 0x0c	; 12
    150c:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    1510:	89 ef       	ldi	r24, 0xF9	; 249
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	b7 01       	movw	r22, r14
    1516:	0e 94 46 04 	call	0x88c	; 0x88c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    151a:	80 91 b3 02 	lds	r24, 0x02B3
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	80 93 b3 02 	sts	0x02B3, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    1524:	80 91 b4 02 	lds	r24, 0x02B4
    1528:	8f 5f       	subi	r24, 0xFF	; 255
    152a:	80 93 b4 02 	sts	0x02B4, r24

			traceTASK_DELETE( pxTCB );
		}
		portEXIT_CRITICAL();
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    1532:	80 91 b2 02 	lds	r24, 0x02B2
    1536:	88 23       	and	r24, r24
    1538:	21 f0       	breq	.+8      	; 0x1542 <vTaskDelete+0x8c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    153a:	01 2b       	or	r16, r17
    153c:	11 f4       	brne	.+4      	; 0x1542 <vTaskDelete+0x8c>
			{
				portYIELD_WITHIN_API();
    153e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vPortYield>
			}
		}
	}
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	08 95       	ret

00001550 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1550:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1552:	10 92 b2 02 	sts	0x02B2, r1
	vPortEndScheduler();
    1556:	0e 94 bf 0c 	call	0x197e	; 0x197e <vPortEndScheduler>
}
    155a:	08 95       	ret

0000155c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
    1562:	80 91 b3 02 	lds	r24, 0x02B3
    1566:	88 23       	and	r24, r24
    1568:	91 f1       	breq	.+100    	; 0x15ce <prvIdleTask+0x72>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    156a:	80 91 ae 02 	lds	r24, 0x02AE
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	80 93 ae 02 	sts	0x02AE, r24
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1574:	10 91 f9 02 	lds	r17, 0x02F9
			xTaskResumeAll();
    1578:	0e 94 48 09 	call	0x1290	; 0x1290 <xTaskResumeAll>

			if( !xListIsEmpty )
    157c:	11 23       	and	r17, r17
    157e:	39 f1       	breq	.+78     	; 0x15ce <prvIdleTask+0x72>
			{
				tskTCB *pxTCB;

				portENTER_CRITICAL();
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1586:	80 91 f9 02 	lds	r24, 0x02F9
    158a:	88 23       	and	r24, r24
    158c:	19 f4       	brne	.+6      	; 0x1594 <prvIdleTask+0x38>
    158e:	c0 e0       	ldi	r28, 0x00	; 0
    1590:	d0 e0       	ldi	r29, 0x00	; 0
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <prvIdleTask+0x44>
    1594:	e0 91 fe 02 	lds	r30, 0x02FE
    1598:	f0 91 ff 02 	lds	r31, 0x02FF
    159c:	c6 81       	ldd	r28, Z+6	; 0x06
    159e:	d7 81       	ldd	r29, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    15a0:	ce 01       	movw	r24, r28
    15a2:	02 96       	adiw	r24, 0x02	; 2
    15a4:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
					--uxCurrentNumberOfTasks;
    15a8:	80 91 b1 02 	lds	r24, 0x02B1
    15ac:	81 50       	subi	r24, 0x01	; 1
    15ae:	80 93 b1 02 	sts	0x02B1, r24
					--uxTasksDeleted;
    15b2:	80 91 b3 02 	lds	r24, 0x02B3
    15b6:	81 50       	subi	r24, 0x01	; 1
    15b8:	80 93 b3 02 	sts	0x02B3, r24
				}
				portEXIT_CRITICAL();
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    15c0:	8f 89       	ldd	r24, Y+23	; 0x17
    15c2:	98 8d       	ldd	r25, Y+24	; 0x18
    15c4:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vPortFree>
		vPortFree( pxTCB );
    15c8:	ce 01       	movw	r24, r28
    15ca:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    15ce:	80 91 b6 02 	lds	r24, 0x02B6
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	30 f2       	brcs	.-116    	; 0x1562 <prvIdleTask+0x6>
			{
				taskYIELD();
    15d6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vPortYield>
    15da:	c3 cf       	rjmp	.-122    	; 0x1562 <prvIdleTask+0x6>

000015dc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    15dc:	2f 92       	push	r2
    15de:	3f 92       	push	r3
    15e0:	5f 92       	push	r5
    15e2:	6f 92       	push	r6
    15e4:	7f 92       	push	r7
    15e6:	8f 92       	push	r8
    15e8:	9f 92       	push	r9
    15ea:	af 92       	push	r10
    15ec:	bf 92       	push	r11
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <xTaskGenericCreate+0x24>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <xTaskGenericCreate+0x26>
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	4b 01       	movw	r8, r22
    160c:	5a 01       	movw	r10, r20
    160e:	19 01       	movw	r2, r18
    1610:	50 2e       	mov	r5, r16
    1612:	37 01       	movw	r6, r14
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    1614:	81 e2       	ldi	r24, 0x21	; 33
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <pvPortMalloc>
    161c:	8b 83       	std	Y+3, r24	; 0x03
    161e:	9c 83       	std	Y+4, r25	; 0x04

	if( pxNewTCB != NULL )
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	89 2b       	or	r24, r25
    1626:	89 f0       	breq	.+34     	; 0x164a <xTaskGenericCreate+0x6e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    1628:	c1 14       	cp	r12, r1
    162a:	d1 04       	cpc	r13, r1
    162c:	21 f4       	brne	.+8      	; 0x1636 <xTaskGenericCreate+0x5a>
    162e:	c5 01       	movw	r24, r10
    1630:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <pvPortMalloc>
    1634:	6c 01       	movw	r12, r24
    1636:	eb 81       	ldd	r30, Y+3	; 0x03
    1638:	fc 81       	ldd	r31, Y+4	; 0x04
    163a:	d0 8e       	std	Z+24, r13	; 0x18
    163c:	c7 8a       	std	Z+23, r12	; 0x17

		if( pxNewTCB->pxStack == NULL )
    163e:	c1 14       	cp	r12, r1
    1640:	d1 04       	cpc	r13, r1
    1642:	29 f4       	brne	.+10     	; 0x164e <xTaskGenericCreate+0x72>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    1644:	cf 01       	movw	r24, r30
    1646:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vPortFree>
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	d5 c0       	rjmp	.+426    	; 0x17f8 <xTaskGenericCreate+0x21c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
    164e:	c6 01       	movw	r24, r12
    1650:	65 ea       	ldi	r22, 0xA5	; 165
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	a5 01       	movw	r20, r10
    1656:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    165a:	08 94       	sec
    165c:	a1 08       	sbc	r10, r1
    165e:	b1 08       	sbc	r11, r1
    1660:	eb 81       	ldd	r30, Y+3	; 0x03
    1662:	fc 81       	ldd	r31, Y+4	; 0x04
    1664:	e7 88       	ldd	r14, Z+23	; 0x17
    1666:	f0 8c       	ldd	r15, Z+24	; 0x18
    1668:	ea 0c       	add	r14, r10
    166a:	fb 1c       	adc	r15, r11
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    166c:	cf 01       	movw	r24, r30
    166e:	49 96       	adiw	r24, 0x19	; 25
    1670:	b4 01       	movw	r22, r8
    1672:	48 e0       	ldi	r20, 0x08	; 8
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    167a:	eb 81       	ldd	r30, Y+3	; 0x03
    167c:	fc 81       	ldd	r31, Y+4	; 0x04
    167e:	10 a2       	std	Z+32, r1	; 0x20
    1680:	05 2d       	mov	r16, r5
    1682:	f3 e0       	ldi	r31, 0x03	; 3
    1684:	f5 15       	cp	r31, r5
    1686:	08 f4       	brcc	.+2      	; 0x168a <xTaskGenericCreate+0xae>
    1688:	03 e0       	ldi	r16, 0x03	; 3
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - 1;
	}

	pxTCB->uxPriority = uxPriority;
    168a:	eb 81       	ldd	r30, Y+3	; 0x03
    168c:	fc 81       	ldd	r31, Y+4	; 0x04
    168e:	06 8b       	std	Z+22, r16	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1690:	42 e0       	ldi	r20, 0x02	; 2
    1692:	c4 2e       	mov	r12, r20
    1694:	d1 2c       	mov	r13, r1
    1696:	ce 0e       	add	r12, r30
    1698:	df 1e       	adc	r13, r31
    169a:	c6 01       	movw	r24, r12
    169c:	0e 94 42 04 	call	0x884	; 0x884 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	0c 96       	adiw	r24, 0x0c	; 12
    16a6:	0e 94 42 04 	call	0x884	; 0x884 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	fc 01       	movw	r30, r24
    16b0:	91 87       	std	Z+9, r25	; 0x09
    16b2:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    16b4:	84 e0       	ldi	r24, 0x04	; 4
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	80 1b       	sub	r24, r16
    16ba:	91 09       	sbc	r25, r1
    16bc:	95 87       	std	Z+13, r25	; 0x0d
    16be:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    16c0:	f3 8b       	std	Z+19, r31	; 0x13
    16c2:	e2 8b       	std	Z+18, r30	; 0x12
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    16c4:	c7 01       	movw	r24, r14
    16c6:	69 81       	ldd	r22, Y+1	; 0x01
    16c8:	7a 81       	ldd	r23, Y+2	; 0x02
    16ca:	a1 01       	movw	r20, r2
    16cc:	0e 94 3d 0c 	call	0x187a	; 0x187a <pxPortInitialiseStack>
    16d0:	eb 81       	ldd	r30, Y+3	; 0x03
    16d2:	fc 81       	ldd	r31, Y+4	; 0x04
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
		}
		#endif

		if( ( void * ) pxCreatedTask != NULL )
    16d8:	61 14       	cp	r6, r1
    16da:	71 04       	cpc	r7, r1
    16dc:	21 f0       	breq	.+8      	; 0x16e6 <xTaskGenericCreate+0x10a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    16de:	cf 01       	movw	r24, r30
    16e0:	f3 01       	movw	r30, r6
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		portENTER_CRITICAL();
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    16ec:	80 91 b1 02 	lds	r24, 0x02B1
    16f0:	8f 5f       	subi	r24, 0xFF	; 255
    16f2:	80 93 b1 02 	sts	0x02B1, r24
			if( pxCurrentTCB == NULL )
    16f6:	80 91 a8 02 	lds	r24, 0x02A8
    16fa:	90 91 a9 02 	lds	r25, 0x02A9
    16fe:	89 2b       	or	r24, r25
    1700:	b9 f5       	brne	.+110    	; 0x1770 <xTaskGenericCreate+0x194>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1702:	eb 81       	ldd	r30, Y+3	; 0x03
    1704:	fc 81       	ldd	r31, Y+4	; 0x04
    1706:	f0 93 a9 02 	sts	0x02A9, r31
    170a:	e0 93 a8 02 	sts	0x02A8, r30

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    170e:	80 91 b1 02 	lds	r24, 0x02B1
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	f1 f5       	brne	.+124    	; 0x1792 <xTaskGenericCreate+0x1b6>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    1716:	86 eb       	ldi	r24, 0xB6	; 182
    1718:	92 e0       	ldi	r25, 0x02	; 2
    171a:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
    171e:	8f eb       	ldi	r24, 0xBF	; 191
    1720:	92 e0       	ldi	r25, 0x02	; 2
    1722:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
    1726:	88 ec       	ldi	r24, 0xC8	; 200
    1728:	92 e0       	ldi	r25, 0x02	; 2
    172a:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
    172e:	81 ed       	ldi	r24, 0xD1	; 209
    1730:	92 e0       	ldi	r25, 0x02	; 2
    1732:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    1736:	3a ed       	ldi	r19, 0xDA	; 218
    1738:	e3 2e       	mov	r14, r19
    173a:	32 e0       	ldi	r19, 0x02	; 2
    173c:	f3 2e       	mov	r15, r19
    173e:	c7 01       	movw	r24, r14
    1740:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    1744:	03 ee       	ldi	r16, 0xE3	; 227
    1746:	12 e0       	ldi	r17, 0x02	; 2
    1748:	c8 01       	movw	r24, r16
    174a:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    174e:	80 ef       	ldi	r24, 0xF0	; 240
    1750:	92 e0       	ldi	r25, 0x02	; 2
    1752:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    1756:	89 ef       	ldi	r24, 0xF9	; 249
    1758:	92 e0       	ldi	r25, 0x02	; 2
    175a:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    175e:	f0 92 ed 02 	sts	0x02ED, r15
    1762:	e0 92 ec 02 	sts	0x02EC, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1766:	10 93 ef 02 	sts	0x02EF, r17
    176a:	00 93 ee 02 	sts	0x02EE, r16
    176e:	11 c0       	rjmp	.+34     	; 0x1792 <xTaskGenericCreate+0x1b6>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1770:	80 91 b2 02 	lds	r24, 0x02B2
    1774:	88 23       	and	r24, r24
    1776:	69 f4       	brne	.+26     	; 0x1792 <xTaskGenericCreate+0x1b6>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1778:	e0 91 a8 02 	lds	r30, 0x02A8
    177c:	f0 91 a9 02 	lds	r31, 0x02A9
    1780:	86 89       	ldd	r24, Z+22	; 0x16
    1782:	58 16       	cp	r5, r24
    1784:	30 f0       	brcs	.+12     	; 0x1792 <xTaskGenericCreate+0x1b6>
					{
						pxCurrentTCB = pxNewTCB;
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	90 93 a9 02 	sts	0x02A9, r25
    178e:	80 93 a8 02 	sts	0x02A8, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1792:	eb 81       	ldd	r30, Y+3	; 0x03
    1794:	fc 81       	ldd	r31, Y+4	; 0x04
    1796:	96 89       	ldd	r25, Z+22	; 0x16
    1798:	80 91 b5 02 	lds	r24, 0x02B5
    179c:	89 17       	cp	r24, r25
    179e:	10 f4       	brcc	.+4      	; 0x17a4 <xTaskGenericCreate+0x1c8>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    17a0:	90 93 b5 02 	sts	0x02B5, r25
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    17a4:	80 91 b4 02 	lds	r24, 0x02B4
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	80 93 b4 02 	sts	0x02B4, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    17ae:	eb 81       	ldd	r30, Y+3	; 0x03
    17b0:	fc 81       	ldd	r31, Y+4	; 0x04
    17b2:	96 89       	ldd	r25, Z+22	; 0x16
    17b4:	80 91 af 02 	lds	r24, 0x02AF
    17b8:	89 17       	cp	r24, r25
    17ba:	10 f4       	brcc	.+4      	; 0x17c0 <xTaskGenericCreate+0x1e4>
    17bc:	90 93 af 02 	sts	0x02AF, r25
    17c0:	eb 81       	ldd	r30, Y+3	; 0x03
    17c2:	fc 81       	ldd	r31, Y+4	; 0x04
    17c4:	86 89       	ldd	r24, Z+22	; 0x16
    17c6:	29 e0       	ldi	r18, 0x09	; 9
    17c8:	82 9f       	mul	r24, r18
    17ca:	c0 01       	movw	r24, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	8a 54       	subi	r24, 0x4A	; 74
    17d0:	9d 4f       	sbci	r25, 0xFD	; 253
    17d2:	b6 01       	movw	r22, r12
    17d4:	0e 94 46 04 	call	0x88c	; 0x88c <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		portEXIT_CRITICAL();
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED( pxNewTCB );
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    17dc:	80 91 b2 02 	lds	r24, 0x02B2
    17e0:	88 23       	and	r24, r24
    17e2:	49 f0       	breq	.+18     	; 0x17f6 <xTaskGenericCreate+0x21a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    17e4:	e0 91 a8 02 	lds	r30, 0x02A8
    17e8:	f0 91 a9 02 	lds	r31, 0x02A9
    17ec:	86 89       	ldd	r24, Z+22	; 0x16
    17ee:	85 15       	cp	r24, r5
    17f0:	10 f4       	brcc	.+4      	; 0x17f6 <xTaskGenericCreate+0x21a>
			{
				portYIELD_WITHIN_API();
    17f2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vPortYield>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return xReturn;
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	df 90       	pop	r13
    180e:	cf 90       	pop	r12
    1810:	bf 90       	pop	r11
    1812:	af 90       	pop	r10
    1814:	9f 90       	pop	r9
    1816:	8f 90       	pop	r8
    1818:	7f 90       	pop	r7
    181a:	6f 90       	pop	r6
    181c:	5f 90       	pop	r5
    181e:	3f 90       	pop	r3
    1820:	2f 90       	pop	r2
    1822:	08 95       	ret

00001824 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    1824:	af 92       	push	r10
    1826:	bf 92       	push	r11
    1828:	cf 92       	push	r12
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
    1832:	8e ea       	ldi	r24, 0xAE	; 174
    1834:	9a e0       	ldi	r25, 0x0A	; 10
    1836:	62 ea       	ldi	r22, 0xA2	; 162
    1838:	72 e0       	ldi	r23, 0x02	; 2
    183a:	45 e5       	ldi	r20, 0x55	; 85
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	00 e0       	ldi	r16, 0x00	; 0
    1844:	ee 24       	eor	r14, r14
    1846:	ff 24       	eor	r15, r15
    1848:	cc 24       	eor	r12, r12
    184a:	dd 24       	eor	r13, r13
    184c:	aa 24       	eor	r10, r10
    184e:	bb 24       	eor	r11, r11
    1850:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <xTaskGenericCreate>

	if( xReturn == pdPASS )
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	49 f4       	brne	.+18     	; 0x186a <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1858:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    185a:	80 93 b2 02 	sts	0x02B2, r24
		xTickCount = ( portTickType ) 0;
    185e:	10 92 ad 02 	sts	0x02AD, r1
    1862:	10 92 ac 02 	sts	0x02AC, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
    1866:	0e 94 85 0c 	call	0x190a	; 0x190a <xPortStartScheduler>
		else
		{
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}
}
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	08 95       	ret

0000187a <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    187a:	fc 01       	movw	r30, r24
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    187c:	91 e1       	ldi	r25, 0x11	; 17
    187e:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    1880:	22 e2       	ldi	r18, 0x22	; 34
    1882:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    1884:	83 e3       	ldi	r24, 0x33	; 51
    1886:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1888:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    188a:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    188c:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    188e:	80 e8       	ldi	r24, 0x80	; 128
    1890:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    1892:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    1898:	83 e0       	ldi	r24, 0x03	; 3
    189a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    189c:	84 e0       	ldi	r24, 0x04	; 4
    189e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    18a0:	85 e0       	ldi	r24, 0x05	; 5
    18a2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    18a4:	86 e0       	ldi	r24, 0x06	; 6
    18a6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    18a8:	87 e0       	ldi	r24, 0x07	; 7
    18aa:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    18ac:	88 e0       	ldi	r24, 0x08	; 8
    18ae:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    18b0:	89 e0       	ldi	r24, 0x09	; 9
    18b2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    18b4:	80 e1       	ldi	r24, 0x10	; 16
    18b6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    18b8:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    18ba:	82 e1       	ldi	r24, 0x12	; 18
    18bc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    18be:	83 e1       	ldi	r24, 0x13	; 19
    18c0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    18c2:	84 e1       	ldi	r24, 0x14	; 20
    18c4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    18c6:	85 e1       	ldi	r24, 0x15	; 21
    18c8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    18ca:	86 e1       	ldi	r24, 0x16	; 22
    18cc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    18ce:	87 e1       	ldi	r24, 0x17	; 23
    18d0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    18d2:	88 e1       	ldi	r24, 0x18	; 24
    18d4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    18d6:	89 e1       	ldi	r24, 0x19	; 25
    18d8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    18de:	81 e2       	ldi	r24, 0x21	; 33
    18e0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    18e2:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    18e4:	83 e2       	ldi	r24, 0x23	; 35
    18e6:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    18e8:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    18ea:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    18ec:	86 e2       	ldi	r24, 0x26	; 38
    18ee:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    18f0:	87 e2       	ldi	r24, 0x27	; 39
    18f2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    18f4:	88 e2       	ldi	r24, 0x28	; 40
    18f6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    18f8:	89 e2       	ldi	r24, 0x29	; 41
    18fa:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    18fc:	80 e3       	ldi	r24, 0x30	; 48
    18fe:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    1900:	81 e3       	ldi	r24, 0x31	; 49
    1902:	82 93       	st	-Z, r24
    1904:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    1906:	cf 01       	movw	r24, r30
    1908:	08 95       	ret

0000190a <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	OCR1AH = ucHighByte;
    190a:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = ucLowByte;
    190e:	89 ef       	ldi	r24, 0xF9	; 249
    1910:	80 93 88 00 	sts	0x0088, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    1914:	8b e0       	ldi	r24, 0x0B	; 11
    1916:	80 93 81 00 	sts	0x0081, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    191a:	ef e6       	ldi	r30, 0x6F	; 111
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1920:	80 61       	ori	r24, 0x10	; 16
	TIMSK1 = ucLowByte;
    1922:	80 83       	st	Z, r24
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1924:	a0 91 a8 02 	lds	r26, 0x02A8
    1928:	b0 91 a9 02 	lds	r27, 0x02A9
    192c:	cd 91       	ld	r28, X+
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	dd 91       	ld	r29, X+
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	ff 91       	pop	r31
    1936:	ef 91       	pop	r30
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	bf 91       	pop	r27
    193e:	af 91       	pop	r26
    1940:	9f 91       	pop	r25
    1942:	8f 91       	pop	r24
    1944:	7f 91       	pop	r23
    1946:	6f 91       	pop	r22
    1948:	5f 91       	pop	r21
    194a:	4f 91       	pop	r20
    194c:	3f 91       	pop	r19
    194e:	2f 91       	pop	r18
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	ff 90       	pop	r15
    1956:	ef 90       	pop	r14
    1958:	df 90       	pop	r13
    195a:	cf 90       	pop	r12
    195c:	bf 90       	pop	r11
    195e:	af 90       	pop	r10
    1960:	9f 90       	pop	r9
    1962:	8f 90       	pop	r8
    1964:	7f 90       	pop	r7
    1966:	6f 90       	pop	r6
    1968:	5f 90       	pop	r5
    196a:	4f 90       	pop	r4
    196c:	3f 90       	pop	r3
    196e:	2f 90       	pop	r2
    1970:	1f 90       	pop	r1
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    1978:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	08 95       	ret

0000197e <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    197e:	08 95       	ret

00001980 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1980:	0f 92       	push	r0
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	0f 92       	push	r0
    1988:	1f 92       	push	r1
    198a:	11 24       	eor	r1, r1
    198c:	2f 92       	push	r2
    198e:	3f 92       	push	r3
    1990:	4f 92       	push	r4
    1992:	5f 92       	push	r5
    1994:	6f 92       	push	r6
    1996:	7f 92       	push	r7
    1998:	8f 92       	push	r8
    199a:	9f 92       	push	r9
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	cf 92       	push	r12
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	2f 93       	push	r18
    19ae:	3f 93       	push	r19
    19b0:	4f 93       	push	r20
    19b2:	5f 93       	push	r21
    19b4:	6f 93       	push	r22
    19b6:	7f 93       	push	r23
    19b8:	8f 93       	push	r24
    19ba:	9f 93       	push	r25
    19bc:	af 93       	push	r26
    19be:	bf 93       	push	r27
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	ef 93       	push	r30
    19c6:	ff 93       	push	r31
    19c8:	a0 91 a8 02 	lds	r26, 0x02A8
    19cc:	b0 91 a9 02 	lds	r27, 0x02A9
    19d0:	0d b6       	in	r0, 0x3d	; 61
    19d2:	0d 92       	st	X+, r0
    19d4:	0e b6       	in	r0, 0x3e	; 62
    19d6:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    19d8:	0e 94 99 08 	call	0x1132	; 0x1132 <vTaskIncrementTick>
	vTaskSwitchContext();
    19dc:	0e 94 cb 07 	call	0xf96	; 0xf96 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    19e0:	a0 91 a8 02 	lds	r26, 0x02A8
    19e4:	b0 91 a9 02 	lds	r27, 0x02A9
    19e8:	cd 91       	ld	r28, X+
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	dd 91       	ld	r29, X+
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	ff 91       	pop	r31
    19f2:	ef 91       	pop	r30
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	bf 91       	pop	r27
    19fa:	af 91       	pop	r26
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	7f 91       	pop	r23
    1a02:	6f 91       	pop	r22
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	cf 90       	pop	r12
    1a18:	bf 90       	pop	r11
    1a1a:	af 90       	pop	r10
    1a1c:	9f 90       	pop	r9
    1a1e:	8f 90       	pop	r8
    1a20:	7f 90       	pop	r7
    1a22:	6f 90       	pop	r6
    1a24:	5f 90       	pop	r5
    1a26:	4f 90       	pop	r4
    1a28:	3f 90       	pop	r3
    1a2a:	2f 90       	pop	r2
    1a2c:	1f 90       	pop	r1
    1a2e:	0f 90       	pop	r0
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1a34:	08 95       	ret

00001a36 <__vector_17>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    1a36:	0e 94 c0 0c 	call	0x1980	; 0x1980 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1a3a:	18 95       	reti

00001a3c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1a3c:	0f 92       	push	r0
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	0f 92       	push	r0
    1a44:	1f 92       	push	r1
    1a46:	11 24       	eor	r1, r1
    1a48:	2f 92       	push	r2
    1a4a:	3f 92       	push	r3
    1a4c:	4f 92       	push	r4
    1a4e:	5f 92       	push	r5
    1a50:	6f 92       	push	r6
    1a52:	7f 92       	push	r7
    1a54:	8f 92       	push	r8
    1a56:	9f 92       	push	r9
    1a58:	af 92       	push	r10
    1a5a:	bf 92       	push	r11
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	2f 93       	push	r18
    1a6a:	3f 93       	push	r19
    1a6c:	4f 93       	push	r20
    1a6e:	5f 93       	push	r21
    1a70:	6f 93       	push	r22
    1a72:	7f 93       	push	r23
    1a74:	8f 93       	push	r24
    1a76:	9f 93       	push	r25
    1a78:	af 93       	push	r26
    1a7a:	bf 93       	push	r27
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
    1a80:	ef 93       	push	r30
    1a82:	ff 93       	push	r31
    1a84:	a0 91 a8 02 	lds	r26, 0x02A8
    1a88:	b0 91 a9 02 	lds	r27, 0x02A9
    1a8c:	0d b6       	in	r0, 0x3d	; 61
    1a8e:	0d 92       	st	X+, r0
    1a90:	0e b6       	in	r0, 0x3e	; 62
    1a92:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1a94:	0e 94 cb 07 	call	0xf96	; 0xf96 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1a98:	a0 91 a8 02 	lds	r26, 0x02A8
    1a9c:	b0 91 a9 02 	lds	r27, 0x02A9
    1aa0:	cd 91       	ld	r28, X+
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	dd 91       	ld	r29, X+
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	ff 91       	pop	r31
    1aaa:	ef 91       	pop	r30
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	bf 91       	pop	r27
    1ab2:	af 91       	pop	r26
    1ab4:	9f 91       	pop	r25
    1ab6:	8f 91       	pop	r24
    1ab8:	7f 91       	pop	r23
    1aba:	6f 91       	pop	r22
    1abc:	5f 91       	pop	r21
    1abe:	4f 91       	pop	r20
    1ac0:	3f 91       	pop	r19
    1ac2:	2f 91       	pop	r18
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	ff 90       	pop	r15
    1aca:	ef 90       	pop	r14
    1acc:	df 90       	pop	r13
    1ace:	cf 90       	pop	r12
    1ad0:	bf 90       	pop	r11
    1ad2:	af 90       	pop	r10
    1ad4:	9f 90       	pop	r9
    1ad6:	8f 90       	pop	r8
    1ad8:	7f 90       	pop	r7
    1ada:	6f 90       	pop	r6
    1adc:	5f 90       	pop	r5
    1ade:	4f 90       	pop	r4
    1ae0:	3f 90       	pop	r3
    1ae2:	2f 90       	pop	r2
    1ae4:	1f 90       	pop	r1
    1ae6:	0f 90       	pop	r0
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1aec:	08 95       	ret

00001aee <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	fc 01       	movw	r30, r24
corCRCB *pxUnblockedCRCB;
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1af8:	80 81       	ld	r24, Z
    1afa:	88 23       	and	r24, r24
    1afc:	19 f4       	brne	.+6      	; 0x1b04 <xCoRoutineRemoveFromEventList+0x16>
    1afe:	c0 e0       	ldi	r28, 0x00	; 0
    1b00:	d0 e0       	ldi	r29, 0x00	; 0
    1b02:	05 c0       	rjmp	.+10     	; 0x1b0e <xCoRoutineRemoveFromEventList+0x20>
    1b04:	05 80       	ldd	r0, Z+5	; 0x05
    1b06:	f6 81       	ldd	r31, Z+6	; 0x06
    1b08:	e0 2d       	mov	r30, r0
    1b0a:	c6 81       	ldd	r28, Z+6	; 0x06
    1b0c:	d7 81       	ldd	r29, Z+7	; 0x07
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1b0e:	8e 01       	movw	r16, r28
    1b10:	04 5f       	subi	r16, 0xF4	; 244
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	c8 01       	movw	r24, r16
    1b16:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    1b1a:	83 e3       	ldi	r24, 0x33	; 51
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	b8 01       	movw	r22, r16
    1b20:	0e 94 46 04 	call	0x88c	; 0x88c <vListInsertEnd>
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	e0 91 02 03 	lds	r30, 0x0302
    1b2a:	f0 91 03 03 	lds	r31, 0x0303
    1b2e:	9e 89       	ldd	r25, Y+22	; 0x16
    1b30:	86 89       	ldd	r24, Z+22	; 0x16
    1b32:	98 17       	cp	r25, r24
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <xCoRoutineRemoveFromEventList+0x4a>
    1b36:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    1b38:	82 2f       	mov	r24, r18
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    1b4e:	99 e0       	ldi	r25, 0x09	; 9
    1b50:	f9 2e       	mov	r15, r25
    1b52:	28 c0       	rjmp	.+80     	; 0x1ba4 <vCoRoutineSchedule+0x60>
	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    1b54:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    1b56:	80 91 33 03 	lds	r24, 0x0333
    1b5a:	88 23       	and	r24, r24
    1b5c:	19 f4       	brne	.+6      	; 0x1b64 <vCoRoutineSchedule+0x20>
    1b5e:	c0 e0       	ldi	r28, 0x00	; 0
    1b60:	d0 e0       	ldi	r29, 0x00	; 0
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <vCoRoutineSchedule+0x2c>
    1b64:	e0 91 38 03 	lds	r30, 0x0338
    1b68:	f0 91 39 03 	lds	r31, 0x0339
    1b6c:	c6 81       	ldd	r28, Z+6	; 0x06
    1b6e:	d7 81       	ldd	r29, Z+7	; 0x07
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1b70:	ce 01       	movw	r24, r28
    1b72:	0c 96       	adiw	r24, 0x0c	; 12
    1b74:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    1b78:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	0e 5f       	subi	r16, 0xFE	; 254
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	c8 01       	movw	r24, r16
    1b82:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    1b86:	9e 89       	ldd	r25, Y+22	; 0x16
    1b88:	80 91 04 03 	lds	r24, 0x0304
    1b8c:	89 17       	cp	r24, r25
    1b8e:	10 f4       	brcc	.+4      	; 0x1b94 <vCoRoutineSchedule+0x50>
    1b90:	90 93 04 03 	sts	0x0304, r25
    1b94:	9f 9d       	mul	r25, r15
    1b96:	c0 01       	movw	r24, r0
    1b98:	11 24       	eor	r1, r1
    1b9a:	85 5f       	subi	r24, 0xF5	; 245
    1b9c:	9c 4f       	sbci	r25, 0xFC	; 252
    1b9e:	b8 01       	movw	r22, r16
    1ba0:	0e 94 46 04 	call	0x88c	; 0x88c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
    1ba4:	80 91 33 03 	lds	r24, 0x0333
    1ba8:	88 23       	and	r24, r24
    1baa:	a1 f6       	brne	.-88     	; 0x1b54 <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    1bac:	0e 94 b7 07 	call	0xf6e	; 0xf6e <xTaskGetTickCount>
    1bb0:	20 91 05 03 	lds	r18, 0x0305
    1bb4:	30 91 06 03 	lds	r19, 0x0306
    1bb8:	82 1b       	sub	r24, r18
    1bba:	93 0b       	sbc	r25, r19
    1bbc:	90 93 08 03 	sts	0x0308, r25
    1bc0:	80 93 07 03 	sts	0x0307, r24
					vListRemove( &( pxCRCB->xEventListItem ) );											
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    1bc4:	89 e0       	ldi	r24, 0x09	; 9
    1bc6:	f8 2e       	mov	r15, r24
    1bc8:	54 c0       	rjmp	.+168    	; 0x1c72 <vCoRoutineSchedule+0x12e>
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	90 93 0a 03 	sts	0x030A, r25
    1bd0:	80 93 09 03 	sts	0x0309, r24
		xPassedTicks--;
    1bd4:	21 50       	subi	r18, 0x01	; 1
    1bd6:	30 40       	sbci	r19, 0x00	; 0
    1bd8:	30 93 08 03 	sts	0x0308, r19
    1bdc:	20 93 07 03 	sts	0x0307, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    1be0:	89 2b       	or	r24, r25
    1be2:	c9 f5       	brne	.+114    	; 0x1c56 <vCoRoutineSchedule+0x112>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    1be4:	20 91 2f 03 	lds	r18, 0x032F
    1be8:	30 91 30 03 	lds	r19, 0x0330
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1bec:	80 91 31 03 	lds	r24, 0x0331
    1bf0:	90 91 32 03 	lds	r25, 0x0332
    1bf4:	90 93 30 03 	sts	0x0330, r25
    1bf8:	80 93 2f 03 	sts	0x032F, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    1bfc:	30 93 32 03 	sts	0x0332, r19
    1c00:	20 93 31 03 	sts	0x0331, r18
    1c04:	28 c0       	rjmp	.+80     	; 0x1c56 <vCoRoutineSchedule+0x112>
		}

		/* See if this tick has made a timeout expire. */
		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
		{	
			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    1c06:	20 91 09 03 	lds	r18, 0x0309
    1c0a:	30 91 0a 03 	lds	r19, 0x030A
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	9b 81       	ldd	r25, Y+3	; 0x03
    1c12:	28 17       	cp	r18, r24
    1c14:	39 07       	cpc	r19, r25
    1c16:	68 f1       	brcs	.+90     	; 0x1c72 <vCoRoutineSchedule+0x12e>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    1c18:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    1c1a:	8e 01       	movw	r16, r28
    1c1c:	0e 5f       	subi	r16, 0xFE	; 254
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	c8 01       	movw	r24, r16
    1c22:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    1c26:	8c 89       	ldd	r24, Y+20	; 0x14
    1c28:	9d 89       	ldd	r25, Y+21	; 0x15
    1c2a:	89 2b       	or	r24, r25
    1c2c:	21 f0       	breq	.+8      	; 0x1c36 <vCoRoutineSchedule+0xf2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    1c2e:	ce 01       	movw	r24, r28
    1c30:	0c 96       	adiw	r24, 0x0c	; 12
    1c32:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    1c36:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    1c38:	9e 89       	ldd	r25, Y+22	; 0x16
    1c3a:	80 91 04 03 	lds	r24, 0x0304
    1c3e:	89 17       	cp	r24, r25
    1c40:	10 f4       	brcc	.+4      	; 0x1c46 <vCoRoutineSchedule+0x102>
    1c42:	90 93 04 03 	sts	0x0304, r25
    1c46:	9f 9d       	mul	r25, r15
    1c48:	c0 01       	movw	r24, r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	85 5f       	subi	r24, 0xF5	; 245
    1c4e:	9c 4f       	sbci	r25, 0xFC	; 252
    1c50:	b8 01       	movw	r22, r16
    1c52:	0e 94 46 04 	call	0x88c	; 0x88c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
    1c56:	e0 91 2f 03 	lds	r30, 0x032F
    1c5a:	f0 91 30 03 	lds	r31, 0x0330
    1c5e:	80 81       	ld	r24, Z
    1c60:	88 23       	and	r24, r24
    1c62:	39 f0       	breq	.+14     	; 0x1c72 <vCoRoutineSchedule+0x12e>
    1c64:	05 80       	ldd	r0, Z+5	; 0x05
    1c66:	f6 81       	ldd	r31, Z+6	; 0x06
    1c68:	e0 2d       	mov	r30, r0
    1c6a:	c6 81       	ldd	r28, Z+6	; 0x06
    1c6c:	d7 81       	ldd	r29, Z+7	; 0x07
    1c6e:	20 97       	sbiw	r28, 0x00	; 0
    1c70:	51 f6       	brne	.-108    	; 0x1c06 <vCoRoutineSchedule+0xc2>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    1c72:	20 91 07 03 	lds	r18, 0x0307
    1c76:	30 91 08 03 	lds	r19, 0x0308
    1c7a:	80 91 09 03 	lds	r24, 0x0309
    1c7e:	90 91 0a 03 	lds	r25, 0x030A
    1c82:	21 15       	cp	r18, r1
    1c84:	31 05       	cpc	r19, r1
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <vCoRoutineSchedule+0x146>
    1c88:	a0 cf       	rjmp	.-192    	; 0x1bca <vCoRoutineSchedule+0x86>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    1c8a:	90 93 06 03 	sts	0x0306, r25
    1c8e:	80 93 05 03 	sts	0x0305, r24
    1c92:	90 91 04 03 	lds	r25, 0x0304

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1c96:	29 e0       	ldi	r18, 0x09	; 9
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <vCoRoutineSchedule+0x162>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    1c9a:	99 23       	and	r25, r25
    1c9c:	19 f4       	brne	.+6      	; 0x1ca4 <vCoRoutineSchedule+0x160>
    1c9e:	10 92 04 03 	sts	0x0304, r1
    1ca2:	32 c0       	rjmp	.+100    	; 0x1d08 <vCoRoutineSchedule+0x1c4>
    1ca4:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1ca6:	92 9f       	mul	r25, r18
    1ca8:	d0 01       	movw	r26, r0
    1caa:	11 24       	eor	r1, r1
    1cac:	a5 5f       	subi	r26, 0xF5	; 245
    1cae:	bc 4f       	sbci	r27, 0xFC	; 252
    1cb0:	8c 91       	ld	r24, X
    1cb2:	88 23       	and	r24, r24
    1cb4:	91 f3       	breq	.-28     	; 0x1c9a <vCoRoutineSchedule+0x156>
    1cb6:	90 93 04 03 	sts	0x0304, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    1cba:	11 96       	adiw	r26, 0x01	; 1
    1cbc:	ed 91       	ld	r30, X+
    1cbe:	fc 91       	ld	r31, X
    1cc0:	12 97       	sbiw	r26, 0x02	; 2
    1cc2:	02 80       	ldd	r0, Z+2	; 0x02
    1cc4:	f3 81       	ldd	r31, Z+3	; 0x03
    1cc6:	e0 2d       	mov	r30, r0
    1cc8:	12 96       	adiw	r26, 0x02	; 2
    1cca:	fc 93       	st	X, r31
    1ccc:	ee 93       	st	-X, r30
    1cce:	11 97       	sbiw	r26, 0x01	; 1
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	03 96       	adiw	r24, 0x03	; 3
    1cd4:	e8 17       	cp	r30, r24
    1cd6:	f9 07       	cpc	r31, r25
    1cd8:	31 f4       	brne	.+12     	; 0x1ce6 <vCoRoutineSchedule+0x1a2>
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	12 96       	adiw	r26, 0x02	; 2
    1ce0:	9c 93       	st	X, r25
    1ce2:	8e 93       	st	-X, r24
    1ce4:	11 97       	sbiw	r26, 0x01	; 1
    1ce6:	11 96       	adiw	r26, 0x01	; 1
    1ce8:	ed 91       	ld	r30, X+
    1cea:	fc 91       	ld	r31, X
    1cec:	12 97       	sbiw	r26, 0x02	; 2
    1cee:	06 80       	ldd	r0, Z+6	; 0x06
    1cf0:	f7 81       	ldd	r31, Z+7	; 0x07
    1cf2:	e0 2d       	mov	r30, r0
    1cf4:	f0 93 03 03 	sts	0x0303, r31
    1cf8:	e0 93 02 03 	sts	0x0302, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    1cfc:	20 81       	ld	r18, Z
    1cfe:	31 81       	ldd	r19, Z+1	; 0x01
    1d00:	cf 01       	movw	r24, r30
    1d02:	67 89       	ldd	r22, Z+23	; 0x17
    1d04:	f9 01       	movw	r30, r18
    1d06:	09 95       	icall

	return;
}
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	ff 90       	pop	r15
    1d12:	08 95       	ret

00001d14 <vCoRoutineAddToDelayedList>:
	return xReturn;	
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	eb 01       	movw	r28, r22
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    1d1e:	00 91 09 03 	lds	r16, 0x0309
    1d22:	10 91 0a 03 	lds	r17, 0x030A
    1d26:	08 0f       	add	r16, r24
    1d28:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1d2a:	80 91 02 03 	lds	r24, 0x0302
    1d2e:	90 91 03 03 	lds	r25, 0x0303
    1d32:	02 96       	adiw	r24, 0x02	; 2
    1d34:	0e 94 a4 04 	call	0x948	; 0x948 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    1d38:	e0 91 02 03 	lds	r30, 0x0302
    1d3c:	f0 91 03 03 	lds	r31, 0x0303
    1d40:	13 83       	std	Z+3, r17	; 0x03
    1d42:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    1d44:	80 91 09 03 	lds	r24, 0x0309
    1d48:	90 91 0a 03 	lds	r25, 0x030A
    1d4c:	bf 01       	movw	r22, r30
    1d4e:	6e 5f       	subi	r22, 0xFE	; 254
    1d50:	7f 4f       	sbci	r23, 0xFF	; 255
    1d52:	08 17       	cp	r16, r24
    1d54:	19 07       	cpc	r17, r25
    1d56:	28 f4       	brcc	.+10     	; 0x1d62 <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1d58:	80 91 31 03 	lds	r24, 0x0331
    1d5c:	90 91 32 03 	lds	r25, 0x0332
    1d60:	04 c0       	rjmp	.+8      	; 0x1d6a <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1d62:	80 91 2f 03 	lds	r24, 0x032F
    1d66:	90 91 30 03 	lds	r25, 0x0330
    1d6a:	0e 94 6f 04 	call	0x8de	; 0x8de <vListInsert>
	}

	if( pxEventList )
    1d6e:	20 97       	sbiw	r28, 0x00	; 0
    1d70:	49 f0       	breq	.+18     	; 0x1d84 <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    1d72:	60 91 02 03 	lds	r22, 0x0302
    1d76:	70 91 03 03 	lds	r23, 0x0303
    1d7a:	64 5f       	subi	r22, 0xF4	; 244
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7e:	ce 01       	movw	r24, r28
    1d80:	0e 94 6f 04 	call	0x8de	; 0x8de <vListInsert>
	}
}
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	08 95       	ret

00001d8e <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    1d8e:	af 92       	push	r10
    1d90:	bf 92       	push	r11
    1d92:	cf 92       	push	r12
    1d94:	df 92       	push	r13
    1d96:	ef 92       	push	r14
    1d98:	ff 92       	push	r15
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	6c 01       	movw	r12, r24
    1da4:	b6 2e       	mov	r11, r22
    1da6:	a4 2e       	mov	r10, r20
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    1da8:	8a e1       	ldi	r24, 0x1A	; 26
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <pvPortMalloc>
    1db0:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	11 f4       	brne	.+4      	; 0x1dba <xCoRoutineCreate+0x2c>
    1db6:	8f ef       	ldi	r24, 0xFF	; 255
    1db8:	59 c0       	rjmp	.+178    	; 0x1e6c <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    1dba:	80 91 02 03 	lds	r24, 0x0302
    1dbe:	90 91 03 03 	lds	r25, 0x0303
    1dc2:	89 2b       	or	r24, r25
    1dc4:	21 f5       	brne	.+72     	; 0x1e0e <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    1dc6:	d0 93 03 03 	sts	0x0303, r29
    1dca:	c0 93 02 03 	sts	0x0302, r28
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    1dce:	8b e0       	ldi	r24, 0x0B	; 11
    1dd0:	93 e0       	ldi	r25, 0x03	; 3
    1dd2:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
    1dd6:	84 e1       	ldi	r24, 0x14	; 20
    1dd8:	93 e0       	ldi	r25, 0x03	; 3
    1dda:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    1dde:	2d e1       	ldi	r18, 0x1D	; 29
    1de0:	e2 2e       	mov	r14, r18
    1de2:	23 e0       	ldi	r18, 0x03	; 3
    1de4:	f2 2e       	mov	r15, r18
    1de6:	c7 01       	movw	r24, r14
    1de8:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    1dec:	06 e2       	ldi	r16, 0x26	; 38
    1dee:	13 e0       	ldi	r17, 0x03	; 3
    1df0:	c8 01       	movw	r24, r16
    1df2:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    1df6:	83 e3       	ldi	r24, 0x33	; 51
    1df8:	93 e0       	ldi	r25, 0x03	; 3
    1dfa:	0e 94 32 04 	call	0x864	; 0x864 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    1dfe:	f0 92 30 03 	sts	0x0330, r15
    1e02:	e0 92 2f 03 	sts	0x032F, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1e06:	10 93 32 03 	sts	0x0332, r17
    1e0a:	00 93 31 03 	sts	0x0331, r16
    1e0e:	eb 2c       	mov	r14, r11
    1e10:	bb 20       	and	r11, r11
    1e12:	11 f0       	breq	.+4      	; 0x1e18 <xCoRoutineCreate+0x8a>
    1e14:	ee 24       	eor	r14, r14
    1e16:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    1e18:	19 8e       	std	Y+25, r1	; 0x19
    1e1a:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    1e1c:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    1e1e:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    1e20:	fe 01       	movw	r30, r28
    1e22:	c1 92       	st	Z+, r12
    1e24:	d1 92       	st	Z+, r13
    1e26:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    1e28:	cf 01       	movw	r24, r30
    1e2a:	0e 94 42 04 	call	0x884	; 0x884 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    1e2e:	ce 01       	movw	r24, r28
    1e30:	0c 96       	adiw	r24, 0x0c	; 12
    1e32:	0e 94 42 04 	call	0x884	; 0x884 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    1e36:	d9 87       	std	Y+9, r29	; 0x09
    1e38:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    1e3a:	db 8b       	std	Y+19, r29	; 0x13
    1e3c:	ca 8b       	std	Y+18, r28	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    1e3e:	84 e0       	ldi	r24, 0x04	; 4
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	8e 19       	sub	r24, r14
    1e44:	91 09       	sbc	r25, r1
    1e46:	9d 87       	std	Y+13, r25	; 0x0d
    1e48:	8c 87       	std	Y+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    1e4a:	9e 89       	ldd	r25, Y+22	; 0x16
    1e4c:	80 91 04 03 	lds	r24, 0x0304
    1e50:	89 17       	cp	r24, r25
    1e52:	10 f4       	brcc	.+4      	; 0x1e58 <xCoRoutineCreate+0xca>
    1e54:	90 93 04 03 	sts	0x0304, r25
    1e58:	89 e0       	ldi	r24, 0x09	; 9
    1e5a:	98 9f       	mul	r25, r24
    1e5c:	c0 01       	movw	r24, r0
    1e5e:	11 24       	eor	r1, r1
    1e60:	85 5f       	subi	r24, 0xF5	; 245
    1e62:	9c 4f       	sbci	r25, 0xFC	; 252
    1e64:	b8 01       	movw	r22, r16
    1e66:	0e 94 46 04 	call	0x88c	; 0x88c <vListInsertEnd>
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}
	
	return xReturn;	
}
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	af 90       	pop	r10
    1e80:	08 95       	ret

00001e82 <vPortFree>:
{
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    1e82:	08 95       	ret

00001e84 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    1e84:	10 92 3d 03 	sts	0x033D, r1
    1e88:	10 92 3c 03 	sts	0x033C, r1
}
    1e8c:	08 95       	ret

00001e8e <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1e8e:	2c ed       	ldi	r18, 0xDC	; 220
    1e90:	35 e0       	ldi	r19, 0x05	; 5
    1e92:	80 91 3c 03 	lds	r24, 0x033C
    1e96:	90 91 3d 03 	lds	r25, 0x033D
    1e9a:	28 1b       	sub	r18, r24
    1e9c:	39 0b       	sbc	r19, r25
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
}
    1e9e:	c9 01       	movw	r24, r18
    1ea0:	08 95       	ret

00001ea2 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	8c 01       	movw	r16, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    1eac:	0e 94 b1 07 	call	0xf62	; 0xf62 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    1eb0:	80 91 3c 03 	lds	r24, 0x033C
    1eb4:	90 91 3d 03 	lds	r25, 0x033D
    1eb8:	98 01       	movw	r18, r16
    1eba:	28 0f       	add	r18, r24
    1ebc:	39 1f       	adc	r19, r25
    1ebe:	45 e0       	ldi	r20, 0x05	; 5
    1ec0:	2c 3d       	cpi	r18, 0xDC	; 220
    1ec2:	34 07       	cpc	r19, r20
    1ec4:	58 f4       	brcc	.+22     	; 0x1edc <pvPortMalloc+0x3a>
    1ec6:	82 17       	cp	r24, r18
    1ec8:	93 07       	cpc	r25, r19
    1eca:	40 f4       	brcc	.+16     	; 0x1edc <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    1ecc:	ec 01       	movw	r28, r24
    1ece:	c2 5c       	subi	r28, 0xC2	; 194
    1ed0:	dc 4f       	sbci	r29, 0xFC	; 252
			xNextFreeByte += xWantedSize;			
    1ed2:	30 93 3d 03 	sts	0x033D, r19
    1ed6:	20 93 3c 03 	sts	0x033C, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <pvPortMalloc+0x3e>
    1edc:	c0 e0       	ldi	r28, 0x00	; 0
    1ede:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}
	xTaskResumeAll();
    1ee0:	0e 94 48 09 	call	0x1290	; 0x1290 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	08 95       	ret

00001ef0 <memcpy>:
    1ef0:	fb 01       	movw	r30, r22
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <memcpy+0xa>
    1ef6:	01 90       	ld	r0, Z+
    1ef8:	0d 92       	st	X+, r0
    1efa:	41 50       	subi	r20, 0x01	; 1
    1efc:	50 40       	sbci	r21, 0x00	; 0
    1efe:	d8 f7       	brcc	.-10     	; 0x1ef6 <memcpy+0x6>
    1f00:	08 95       	ret

00001f02 <memset>:
    1f02:	dc 01       	movw	r26, r24
    1f04:	01 c0       	rjmp	.+2      	; 0x1f08 <memset+0x6>
    1f06:	6d 93       	st	X+, r22
    1f08:	41 50       	subi	r20, 0x01	; 1
    1f0a:	50 40       	sbci	r21, 0x00	; 0
    1f0c:	e0 f7       	brcc	.-8      	; 0x1f06 <memset+0x4>
    1f0e:	08 95       	ret

00001f10 <strncpy>:
    1f10:	fb 01       	movw	r30, r22
    1f12:	dc 01       	movw	r26, r24
    1f14:	41 50       	subi	r20, 0x01	; 1
    1f16:	50 40       	sbci	r21, 0x00	; 0
    1f18:	48 f0       	brcs	.+18     	; 0x1f2c <strncpy+0x1c>
    1f1a:	01 90       	ld	r0, Z+
    1f1c:	0d 92       	st	X+, r0
    1f1e:	00 20       	and	r0, r0
    1f20:	c9 f7       	brne	.-14     	; 0x1f14 <strncpy+0x4>
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <strncpy+0x16>
    1f24:	1d 92       	st	X+, r1
    1f26:	41 50       	subi	r20, 0x01	; 1
    1f28:	50 40       	sbci	r21, 0x00	; 0
    1f2a:	e0 f7       	brcc	.-8      	; 0x1f24 <strncpy+0x14>
    1f2c:	08 95       	ret

00001f2e <__divmodhi4>:
    1f2e:	97 fb       	bst	r25, 7
    1f30:	09 2e       	mov	r0, r25
    1f32:	07 26       	eor	r0, r23
    1f34:	0a d0       	rcall	.+20     	; 0x1f4a <__divmodhi4_neg1>
    1f36:	77 fd       	sbrc	r23, 7
    1f38:	04 d0       	rcall	.+8      	; 0x1f42 <__divmodhi4_neg2>
    1f3a:	27 d0       	rcall	.+78     	; 0x1f8a <__udivmodhi4>
    1f3c:	06 d0       	rcall	.+12     	; 0x1f4a <__divmodhi4_neg1>
    1f3e:	00 20       	and	r0, r0
    1f40:	1a f4       	brpl	.+6      	; 0x1f48 <__divmodhi4_exit>

00001f42 <__divmodhi4_neg2>:
    1f42:	70 95       	com	r23
    1f44:	61 95       	neg	r22
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255

00001f48 <__divmodhi4_exit>:
    1f48:	08 95       	ret

00001f4a <__divmodhi4_neg1>:
    1f4a:	f6 f7       	brtc	.-4      	; 0x1f48 <__divmodhi4_exit>
    1f4c:	90 95       	com	r25
    1f4e:	81 95       	neg	r24
    1f50:	9f 4f       	sbci	r25, 0xFF	; 255
    1f52:	08 95       	ret

00001f54 <__divmodsi4>:
    1f54:	97 fb       	bst	r25, 7
    1f56:	09 2e       	mov	r0, r25
    1f58:	05 26       	eor	r0, r21
    1f5a:	0e d0       	rcall	.+28     	; 0x1f78 <__divmodsi4_neg1>
    1f5c:	57 fd       	sbrc	r21, 7
    1f5e:	04 d0       	rcall	.+8      	; 0x1f68 <__divmodsi4_neg2>
    1f60:	28 d0       	rcall	.+80     	; 0x1fb2 <__udivmodsi4>
    1f62:	0a d0       	rcall	.+20     	; 0x1f78 <__divmodsi4_neg1>
    1f64:	00 1c       	adc	r0, r0
    1f66:	38 f4       	brcc	.+14     	; 0x1f76 <__divmodsi4_exit>

00001f68 <__divmodsi4_neg2>:
    1f68:	50 95       	com	r21
    1f6a:	40 95       	com	r20
    1f6c:	30 95       	com	r19
    1f6e:	21 95       	neg	r18
    1f70:	3f 4f       	sbci	r19, 0xFF	; 255
    1f72:	4f 4f       	sbci	r20, 0xFF	; 255
    1f74:	5f 4f       	sbci	r21, 0xFF	; 255

00001f76 <__divmodsi4_exit>:
    1f76:	08 95       	ret

00001f78 <__divmodsi4_neg1>:
    1f78:	f6 f7       	brtc	.-4      	; 0x1f76 <__divmodsi4_exit>
    1f7a:	90 95       	com	r25
    1f7c:	80 95       	com	r24
    1f7e:	70 95       	com	r23
    1f80:	61 95       	neg	r22
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	8f 4f       	sbci	r24, 0xFF	; 255
    1f86:	9f 4f       	sbci	r25, 0xFF	; 255
    1f88:	08 95       	ret

00001f8a <__udivmodhi4>:
    1f8a:	aa 1b       	sub	r26, r26
    1f8c:	bb 1b       	sub	r27, r27
    1f8e:	51 e1       	ldi	r21, 0x11	; 17
    1f90:	07 c0       	rjmp	.+14     	; 0x1fa0 <__udivmodhi4_ep>

00001f92 <__udivmodhi4_loop>:
    1f92:	aa 1f       	adc	r26, r26
    1f94:	bb 1f       	adc	r27, r27
    1f96:	a6 17       	cp	r26, r22
    1f98:	b7 07       	cpc	r27, r23
    1f9a:	10 f0       	brcs	.+4      	; 0x1fa0 <__udivmodhi4_ep>
    1f9c:	a6 1b       	sub	r26, r22
    1f9e:	b7 0b       	sbc	r27, r23

00001fa0 <__udivmodhi4_ep>:
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	5a 95       	dec	r21
    1fa6:	a9 f7       	brne	.-22     	; 0x1f92 <__udivmodhi4_loop>
    1fa8:	80 95       	com	r24
    1faa:	90 95       	com	r25
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	08 95       	ret

00001fb2 <__udivmodsi4>:
    1fb2:	a1 e2       	ldi	r26, 0x21	; 33
    1fb4:	1a 2e       	mov	r1, r26
    1fb6:	aa 1b       	sub	r26, r26
    1fb8:	bb 1b       	sub	r27, r27
    1fba:	fd 01       	movw	r30, r26
    1fbc:	0d c0       	rjmp	.+26     	; 0x1fd8 <__udivmodsi4_ep>

00001fbe <__udivmodsi4_loop>:
    1fbe:	aa 1f       	adc	r26, r26
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	ee 1f       	adc	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	a2 17       	cp	r26, r18
    1fc8:	b3 07       	cpc	r27, r19
    1fca:	e4 07       	cpc	r30, r20
    1fcc:	f5 07       	cpc	r31, r21
    1fce:	20 f0       	brcs	.+8      	; 0x1fd8 <__udivmodsi4_ep>
    1fd0:	a2 1b       	sub	r26, r18
    1fd2:	b3 0b       	sbc	r27, r19
    1fd4:	e4 0b       	sbc	r30, r20
    1fd6:	f5 0b       	sbc	r31, r21

00001fd8 <__udivmodsi4_ep>:
    1fd8:	66 1f       	adc	r22, r22
    1fda:	77 1f       	adc	r23, r23
    1fdc:	88 1f       	adc	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	1a 94       	dec	r1
    1fe2:	69 f7       	brne	.-38     	; 0x1fbe <__udivmodsi4_loop>
    1fe4:	60 95       	com	r22
    1fe6:	70 95       	com	r23
    1fe8:	80 95       	com	r24
    1fea:	90 95       	com	r25
    1fec:	9b 01       	movw	r18, r22
    1fee:	ac 01       	movw	r20, r24
    1ff0:	bd 01       	movw	r22, r26
    1ff2:	cf 01       	movw	r24, r30
    1ff4:	08 95       	ret

00001ff6 <_exit>:
    1ff6:	f8 94       	cli

00001ff8 <__stop_program>:
    1ff8:	ff cf       	rjmp	.-2      	; 0x1ff8 <__stop_program>
