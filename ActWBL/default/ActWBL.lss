
ActWBL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ca  00800200  000060e6  0000617a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000060e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008aa  008003ca  008003ca  00006344  2**0
                  ALLOC
  3 .debug_aranges 00000340  00000000  00000000  00006344  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000137a  00000000  00000000  00006684  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ca24  00000000  00000000  000079fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002a39  00000000  00000000  00014422  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000566d  00000000  00000000  00016e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000dd0  00000000  00000000  0001c4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000024cb  00000000  00000000  0001d298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000058e9  00000000  00000000  0001f763  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  0002504c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__ctors_end>
       4:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
       8:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
       c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      10:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      14:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      18:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      1c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      20:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      24:	0c 94 30 1b 	jmp	0x3660	; 0x3660 <__vector_9>
      28:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__vector_10>
      2c:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__vector_11>
      30:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      34:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__vector_13>
      38:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__vector_14>
      3c:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__vector_15>
      40:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__vector_16>
      44:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__vector_17>
      48:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__vector_18>
      4c:	0c 94 25 12 	jmp	0x244a	; 0x244a <__vector_19>
      50:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__vector_20>
      54:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__vector_21>
      58:	0c 94 97 12 	jmp	0x252e	; 0x252e <__vector_22>
      5c:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__vector_23>
      60:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      64:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__vector_25>
      68:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      6c:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__vector_27>
      70:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      74:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__vector_29>
      78:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      7c:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__vector_31>
      80:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__vector_32>
      84:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__vector_33>
      88:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__vector_34>
      8c:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__vector_35>
      90:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__vector_36>
      94:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      98:	0c 94 47 10 	jmp	0x208e	; 0x208e <__vector_38>
      9c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      a0:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      a4:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__vector_41>
      a8:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__vector_42>
      ac:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__vector_43>
      b0:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__vector_44>
      b4:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__vector_45>
      b8:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__vector_46>
      bc:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__vector_47>
      c0:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__vector_48>
      c4:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__vector_49>
      c8:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__vector_50>
      cc:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      d0:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      d4:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      d8:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      dc:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      e0:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <isAnythingZone6+0x46>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <_B6>:
     166:	98 04 40                                            ..@

00000169 <_C2>:
     169:	9e 04 04                                            ...

0000016c <_C3>:
     16c:	9e 04 08                                            ...

0000016f <_C4>:
     16f:	9e 04 10                                            ...

00000172 <_D2>:
     172:	a4 04 04                                            ...

00000175 <_D3>:
     175:	a4 04 08                                            ...

00000178 <_E0>:
     178:	aa 04 01                                            ...

0000017b <_E1>:
     17b:	aa 04 02                                            ...

0000017e <_E2>:
     17e:	aa 04 04                                            ...

00000181 <_E3>:
     181:	aa 04 08                                            ...

00000184 <_E4>:
     184:	aa 04 10                                            ...

00000187 <_E5>:
     187:	aa 04 20                                            .. 

0000018a <_E7>:
     18a:	aa 04 80                                            ...

0000018d <_G5>:
     18d:	b0 04 20                                            .. 

00000190 <_H3>:
     190:	b6 04 08                                            ...

00000193 <_H4>:
     193:	b6 04 10                                            ...

00000196 <_H5>:
     196:	b6 04 20                                            .. 

00000199 <_H6>:
     199:	b6 04 40                                            ..@

0000019c <_K4>:
     19c:	bc 04 10                                            ...

0000019f <_K5>:
     19f:	bc 04 20                                            .. 

000001a2 <_K6>:
     1a2:	bc 04 40                                            ..@

000001a5 <_K7>:
     1a5:	bc 04 80                                            ...

000001a8 <PCINT_PINS>:
	...
     1b4:	66 01 00 00 78 01 00 00 00 00 00 00 00 00 00 00     f...x...........
	...
     1d0:	9c 01 9f 01 a2 01 a5 01                             ........

000001d8 <__timer0Compare>:
     1d8:	db 0a 00 6e 00 02 47 00 35 00 02 44 00 06 00 00     ...n..G.5..D....
     1e8:	e3 0a 00 6e 00 04 48 00 35 00 04 44 00 04 8d 01     ...n..H.5..D....

000001f8 <__timer1Compare>:
     1f8:	eb 0a 01 6f 00 02 88 00 36 00 02 80 00 06 00 00     ...o....6.......
     208:	f3 0a 01 6f 00 04 8a 00 36 00 04 80 00 04 66 01     ...o....6.....f.
     218:	fb 0a 01 6f 00 08 8c 00 36 00 08 80 00 02 00 00     ...o....6.......

00000228 <__timer2Compare>:
     228:	03 0b 02 70 00 02 b3 00 37 00 02 b0 00 06 00 00     ...p....7.......
     238:	0b 0b 02 70 00 04 b4 00 37 00 04 b0 00 04 99 01     ...p....7.......

00000248 <__timer3Compare>:
     248:	13 0b 03 71 00 02 98 00 38 00 02 90 00 06 81 01     ...q....8.......
     258:	1b 0b 03 71 00 04 9a 00 38 00 04 90 00 04 84 01     ...q....8.......
     268:	23 0b 03 71 00 08 9c 00 38 00 08 90 00 02 87 01     #..q....8.......

00000278 <__timer4Compare>:
     278:	2b 0b 04 72 00 02 a8 00 39 00 02 a0 00 06 90 01     +..r....9.......
     288:	33 0b 04 72 00 04 aa 00 39 00 04 a0 00 04 93 01     3..r....9.......
     298:	3b 0b 04 72 00 08 ac 00 39 00 08 a0 00 02 96 01     ;..r....9.......

000002a8 <__timer5Compare>:
     2a8:	43 0b 05 73 00 02 28 01 3a 00 02 20 01 06 00 00     C..s..(.:.. ....
     2b8:	4b 0b 05 73 00 04 2a 01 3a 00 04 20 01 04 00 00     K..s..*.:.. ....
     2c8:	53 0b 05 73 00 08 2c 01 3a 00 08 20 01 02 00 00     S..s..,.:.. ....

000002d8 <pgm_Timers>:
     2d8:	5b 0b 46 00 45 00 00 00 02 33 88 44 00 01 44 00     [.F.E....3.D..D.
     2e8:	02 45 00 08 00 00 01 d8 01 6e 00 01 35 00 01 00     .E.......n..5...
     2f8:	00 00 00 01 00 00 01 00 00 01 00 00 6a 0b 84 00     ............j...
     308:	81 00 ff 00 03 ff df 80 00 01 80 00 02 81 00 08     ................
     318:	81 00 10 f8 01 6f 00 01 36 00 01 86 00 6f 00 20     .....o..6....o. 
     328:	36 00 20 81 00 40 00 00 79 0b b2 00 b1 00 00 ff     6. ..@..y.......
     338:	02 33 88 b0 00 01 b0 00 02 b1 00 08 00 00 01 28     .3.............(
     348:	02 70 00 01 37 00 01 00 00 00 00 01 00 00 01 00     .p..7...........
     358:	00 01 00 00 88 0b 94 00 91 00 ff 00 03 ff df 90     ................
     368:	00 01 90 00 02 91 00 08 91 00 10 48 02 71 00 01     ...........H.q..
     378:	38 00 01 96 00 71 00 20 38 00 20 91 00 40 8a 01     8....q. 8. ..@..
     388:	97 0b a4 00 a1 00 ff 00 03 ff df a0 00 01 a0 00     ................
     398:	02 a1 00 08 a1 00 10 78 02 72 00 01 39 00 01 a6     .......x.r..9...
     3a8:	00 72 00 20 39 00 20 a1 00 40 00 00 a6 0b 24 01     .r. 9. ..@....$.
     3b8:	21 01 ff 00 03 ff df 20 01 01 20 01 02 21 01 08     !...... .. ..!..
     3c8:	21 01 10 a8 02 73 00 01 3a 00 01 26 01 73 00 20     !....s..:..&.s. 
     3d8:	3a 00 20 21 01 40 00 00                             :. !.@..

000003e0 <__c.3298>:
     3e0:	25 64 0a 00                                         %d..

000003e4 <__c.3058>:
     3e4:	0a 00                                               ..

000003e6 <__c.3056>:
     3e6:	2c 00                                               ,.

000003e8 <__c.3054>:
     3e8:	2c 00                                               ,.

000003ea <__c.3052>:
     3ea:	25 64 2c 00                                         %d,.

000003ee <__c.3050>:
     3ee:	2c 00                                               ,.

000003f0 <__c.3047>:
     3f0:	0a 0a 0a 0a 0a 00                                   ......

000003f6 <__c.3030>:
     3f6:	44 45 47 52 45 45 3a 25 64 20 43 4f 53 3a 25 64     DEGREE:%d COS:%d
     406:	20 53 49 4e 3a 25 64 0a 00                           SIN:%d..

0000040f <__c.2984>:
     40f:	0a 00                                               ..

00000411 <__c.2979>:
     411:	0a 00                                               ..

00000413 <__c.2974>:
     413:	20 25 64 20 00                                       %d .

00000418 <__c.2972>:
     418:	47 47 47 00                                         GGG.

0000041c <__c.2970>:
     41c:	57 57 57 00                                         WWW.

00000420 <__c.2968>:
     420:	20 52 20 00                                          R .

00000424 <__c.2966>:
     424:	20 52 20 00                                          R .

00000428 <__c.2964>:
     428:	20 52 20 00                                          R .

0000042c <__c.2962>:
     42c:	20 52 20 00                                          R .

00000430 <__c.2960>:
     430:	20 52 20 00                                          R .

00000434 <__c.2958>:
     434:	20 52 20 00                                          R .

00000438 <__c.2956>:
     438:	20 52 20 00                                          R .

0000043c <__c.2954>:
     43c:	20 52 20 00                                          R .

00000440 <__c.2952>:
     440:	20 3c 20 00                                          < .

00000444 <__c.2950>:
     444:	20 56 20 00                                          V .

00000448 <__c.2948>:
     448:	20 3e 20 00                                          > .

0000044c <__c.2946>:
     44c:	20 5e 20 00                                          ^ .

00000450 <__c.2891>:
     450:	0a 00                                               ..

00000452 <__c.2889>:
     452:	77 61 6c 6c 43 6f 6c 3a 20 25 64 09 77 61 6c 6c     wallCol: %d.wall
     462:	52 6f 77 3a 20 25 64 09 61 6e 67 6c 65 3a 20 25     Row: %d.angle: %
     472:	64 00                                               d.

00000474 <__c.2882>:
     474:	0a 00                                               ..

00000476 <__c.2880>:
     476:	77 61 6c 6c 43 6f 6c 3a 20 25 64 09 77 61 6c 6c     wallCol: %d.wall
     486:	52 6f 77 3a 20 25 64 09 61 6e 67 6c 65 3a 20 25     Row: %d.angle: %
     496:	64 00                                               d.

00000498 <_PORTB>:
     498:	25 00 24 00 23 00                                   %.$.#.

0000049e <_PORTC>:
     49e:	28 00 27 00 26 00                                   (.'.&.

000004a4 <_PORTD>:
     4a4:	2b 00 2a 00 29 00                                   +.*.).

000004aa <_PORTE>:
     4aa:	2e 00 2d 00 2c 00                                   ..-.,.

000004b0 <_PORTG>:
     4b0:	34 00 33 00 32 00                                   4.3.2.

000004b6 <_PORTH>:
     4b6:	02 01 01 01 00 01                                   ......

000004bc <_PORTK>:
     4bc:	08 01 07 01 06 01                                   ......

000004c2 <wheel_bank_list>:
     4c2:	84 02 98 02                                         ....

000004c6 <ir_servo_bank_list>:
     4c6:	b5 02                                               ..

000004c8 <arm_bank_list>:
     4c8:	d2 02 e6 02 fa 02 0e 03                             ........

000004d0 <c_Sharp_GP2D12>:
     4d0:	00 00 5f 14 00 00 00 00                             .._.....

000004d8 <__c.1506>:
     4d8:	28 25 75 20 63 6d 29 00                             (%u cm).

000004e0 <c_quadrature>:
     4e0:	ca 14 a3 14 00 00 00 00                             ........

000004e8 <__c.1506>:
     4e8:	28 25 64 20 74 69 63 6b 73 29 00                    (%d ticks).

000004f3 <HexChars>:
     4f3:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

00000504 <c_Servos>:
     504:	2d 1e 00 00                                         -...

00000508 <TimerPrescaleFactor>:
     508:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000514 <TimerRTCPrescaleFactor>:
     514:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

00000524 <__3bit_modes>:
     524:	00 01 ff ff 02 03 ff ff ff ff ff 05 ff ff ff 07     ................

00000534 <__2bit_modes>:
     534:	00 01 ff ff 02 03                                   ......

0000053a <__c.2455>:
     53a:	55 73 65 72 20 45 72 72 6f 72 3a 25 64 0a 00        User Error:%d..

00000549 <__c.2453>:
     549:	57 65 62 62 6f 74 4c 69 62 20 45 72 72 6f 72 3a     WebbotLib Error:
     559:	25 64 0a 00                                         %d..

0000055d <c_hw_uart>:
     55d:	94 29 4a 2a 88 2a 1f 2a 51 2a 35 2a 00              .)J*.*.*Q*5*.

0000056a <__ctors_start>:
     56a:	7f 17       	cp	r23, r31

0000056c <__ctors_end>:
     56c:	11 24       	eor	r1, r1
     56e:	1f be       	out	0x3f, r1	; 63
     570:	cf ef       	ldi	r28, 0xFF	; 255
     572:	d1 e2       	ldi	r29, 0x21	; 33
     574:	de bf       	out	0x3e, r29	; 62
     576:	cd bf       	out	0x3d, r28	; 61

00000578 <__do_copy_data>:
     578:	13 e0       	ldi	r17, 0x03	; 3
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b2 e0       	ldi	r27, 0x02	; 2
     57e:	e6 ee       	ldi	r30, 0xE6	; 230
     580:	f0 e6       	ldi	r31, 0x60	; 96
     582:	02 c0       	rjmp	.+4      	; 0x588 <.do_copy_data_start>

00000584 <.do_copy_data_loop>:
     584:	05 90       	lpm	r0, Z+
     586:	0d 92       	st	X+, r0

00000588 <.do_copy_data_start>:
     588:	aa 3c       	cpi	r26, 0xCA	; 202
     58a:	b1 07       	cpc	r27, r17
     58c:	d9 f7       	brne	.-10     	; 0x584 <.do_copy_data_loop>

0000058e <__do_clear_bss>:
     58e:	1c e0       	ldi	r17, 0x0C	; 12
     590:	aa ec       	ldi	r26, 0xCA	; 202
     592:	b3 e0       	ldi	r27, 0x03	; 3
     594:	01 c0       	rjmp	.+2      	; 0x598 <.do_clear_bss_start>

00000596 <.do_clear_bss_loop>:
     596:	1d 92       	st	X+, r1

00000598 <.do_clear_bss_start>:
     598:	a4 37       	cpi	r26, 0x74	; 116
     59a:	b1 07       	cpc	r27, r17
     59c:	e1 f7       	brne	.-8      	; 0x596 <.do_clear_bss_loop>

0000059e <__do_global_ctors>:
     59e:	15 e0       	ldi	r17, 0x05	; 5
     5a0:	cc e6       	ldi	r28, 0x6C	; 108
     5a2:	d5 e0       	ldi	r29, 0x05	; 5
     5a4:	04 c0       	rjmp	.+8      	; 0x5ae <.do_global_ctors_start>

000005a6 <.do_global_ctors_loop>:
     5a6:	22 97       	sbiw	r28, 0x02	; 2
     5a8:	fe 01       	movw	r30, r28
     5aa:	0e 94 6d 30 	call	0x60da	; 0x60da <__tablejump__>

000005ae <.do_global_ctors_start>:
     5ae:	ca 36       	cpi	r28, 0x6A	; 106
     5b0:	d1 07       	cpc	r29, r17
     5b2:	c9 f7       	brne	.-14     	; 0x5a6 <.do_global_ctors_loop>
     5b4:	0e 94 ae 18 	call	0x315c	; 0x315c <main>
     5b8:	0c 94 8f 2c 	jmp	0x591e	; 0x591e <exit>

000005bc <__bad_interrupt>:
     5bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005c0 <configure_ports>:
	statusLEDregister(B6,false);
}

// ----------- Ports are configured on the fly --
void configure_ports(void){
}
     5c0:	08 95       	ret

000005c2 <appInitSoftware>:
}

// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart){
	return 0;
}
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	08 95       	ret

000005cc <cos_SoR>:
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
	if (degrees >= 0)//positive angles
     5cc:	97 fd       	sbrc	r25, 7
     5ce:	10 c0       	rjmp	.+32     	; 0x5f0 <cos_SoR+0x24>
		return angtable[degrees/5];
     5d0:	25 e0       	ldi	r18, 0x05	; 5
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
     5dc:	da 01       	movw	r26, r20
     5de:	c9 01       	movw	r24, r18
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	8b 5c       	subi	r24, 0xCB	; 203
     5e6:	9c 4f       	sbci	r25, 0xFC	; 252
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 81       	ld	r18, Z
     5ec:	31 81       	ldd	r19, Z+1	; 0x01
     5ee:	17 c0       	rjmp	.+46     	; 0x61e <cos_SoR+0x52>
	else
		return -angtable[72-(-degrees)/5];
     5f0:	25 e0       	ldi	r18, 0x05	; 5
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
     5fc:	da 01       	movw	r26, r20
     5fe:	c9 01       	movw	r24, r18
     600:	88 5b       	subi	r24, 0xB8	; 184
     602:	9f 4f       	sbci	r25, 0xFF	; 255
     604:	af 4f       	sbci	r26, 0xFF	; 255
     606:	bf 4f       	sbci	r27, 0xFF	; 255
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	8b 5c       	subi	r24, 0xCB	; 203
     60e:	9c 4f       	sbci	r25, 0xFC	; 252
     610:	fc 01       	movw	r30, r24
     612:	80 81       	ld	r24, Z
     614:	91 81       	ldd	r25, Z+1	; 0x01
     616:	22 27       	eor	r18, r18
     618:	33 27       	eor	r19, r19
     61a:	28 1b       	sub	r18, r24
     61c:	39 0b       	sbc	r19, r25
	}
     61e:	c9 01       	movw	r24, r18
     620:	08 95       	ret

00000622 <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
	degrees=degrees - 90;//phase shift 90 degrees
     622:	6a 55       	subi	r22, 0x5A	; 90
     624:	70 40       	sbci	r23, 0x00	; 0
     626:	80 40       	sbci	r24, 0x00	; 0
     628:	90 40       	sbci	r25, 0x00	; 0

	if (degrees >= 0)//positive angles
     62a:	97 fd       	sbrc	r25, 7
     62c:	10 c0       	rjmp	.+32     	; 0x64e <sin_SoR+0x2c>
		return angtable[degrees/5];
     62e:	25 e0       	ldi	r18, 0x05	; 5
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
     63a:	da 01       	movw	r26, r20
     63c:	c9 01       	movw	r24, r18
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	8b 5c       	subi	r24, 0xCB	; 203
     644:	9c 4f       	sbci	r25, 0xFC	; 252
     646:	fc 01       	movw	r30, r24
     648:	20 81       	ld	r18, Z
     64a:	31 81       	ldd	r19, Z+1	; 0x01
     64c:	17 c0       	rjmp	.+46     	; 0x67c <sin_SoR+0x5a>
	else
		return -angtable[72-(-degrees)/5];
     64e:	25 e0       	ldi	r18, 0x05	; 5
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
     65a:	da 01       	movw	r26, r20
     65c:	c9 01       	movw	r24, r18
     65e:	88 5b       	subi	r24, 0xB8	; 184
     660:	9f 4f       	sbci	r25, 0xFF	; 255
     662:	af 4f       	sbci	r26, 0xFF	; 255
     664:	bf 4f       	sbci	r27, 0xFF	; 255
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	8b 5c       	subi	r24, 0xCB	; 203
     66c:	9c 4f       	sbci	r25, 0xFC	; 252
     66e:	fc 01       	movw	r30, r24
     670:	80 81       	ld	r24, Z
     672:	91 81       	ldd	r25, Z+1	; 0x01
     674:	22 27       	eor	r18, r18
     676:	33 27       	eor	r19, r19
     678:	28 1b       	sub	r18, r24
     67a:	39 0b       	sbc	r19, r25
	}
     67c:	c9 01       	movw	r24, r18
     67e:	08 95       	ret

00000680 <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	6b 01       	movw	r12, r22
     68e:	7c 01       	movw	r14, r24
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
     690:	8a e5       	ldi	r24, 0x5A	; 90
     692:	c8 16       	cp	r12, r24
     694:	d1 04       	cpc	r13, r1
     696:	e1 04       	cpc	r14, r1
     698:	f1 04       	cpc	r15, r1
     69a:	a1 f1       	breq	.+104    	; 0x704 <tan_SoR+0x84>
     69c:	86 ea       	ldi	r24, 0xA6	; 166
     69e:	c8 16       	cp	r12, r24
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	d8 06       	cpc	r13, r24
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	e8 06       	cpc	r14, r24
     6a8:	8f ef       	ldi	r24, 0xFF	; 255
     6aa:	f8 06       	cpc	r15, r24
     6ac:	59 f1       	breq	.+86     	; 0x704 <tan_SoR+0x84>
     6ae:	8e e0       	ldi	r24, 0x0E	; 14
     6b0:	c8 16       	cp	r12, r24
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	d8 06       	cpc	r13, r24
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	e8 06       	cpc	r14, r24
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	f8 06       	cpc	r15, r24
     6be:	11 f1       	breq	.+68     	; 0x704 <tan_SoR+0x84>
     6c0:	82 ef       	ldi	r24, 0xF2	; 242
     6c2:	c8 16       	cp	r12, r24
     6c4:	8e ef       	ldi	r24, 0xFE	; 254
     6c6:	d8 06       	cpc	r13, r24
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	e8 06       	cpc	r14, r24
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	f8 06       	cpc	r15, r24
     6d0:	c9 f0       	breq	.+50     	; 0x704 <tan_SoR+0x84>
		return 0;//what else should I return?!?!?
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
     6d2:	c7 01       	movw	r24, r14
     6d4:	b6 01       	movw	r22, r12
     6d6:	0e 94 11 03 	call	0x622	; 0x622 <sin_SoR>
     6da:	8c 01       	movw	r16, r24
     6dc:	c7 01       	movw	r24, r14
     6de:	b6 01       	movw	r22, r12
     6e0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <cos_SoR>
     6e4:	bc 01       	movw	r22, r24
     6e6:	c8 01       	movw	r24, r16
     6e8:	0e 94 1b 30 	call	0x6036	; 0x6036 <__divmodhi4>
     6ec:	cb 01       	movw	r24, r22
     6ee:	9b 01       	movw	r18, r22
     6f0:	73 e0       	ldi	r23, 0x03	; 3
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	7a 95       	dec	r23
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <tan_SoR+0x72>
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	28 0f       	add	r18, r24
     700:	39 1f       	adc	r19, r25
     702:	02 c0       	rjmp	.+4      	; 0x708 <tan_SoR+0x88>
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
	}
     708:	c9 01       	movw	r24, r18
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	08 95       	ret

00000718 <degreeToSpeed>:
//***************************************



signed long int degreeToSpeed(signed long int degree)
{
     718:	2e ef       	ldi	r18, 0xFE	; 254
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
     724:	24 eb       	ldi	r18, 0xB4	; 180
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e0       	ldi	r20, 0x00	; 0
     72a:	50 e0       	ldi	r21, 0x00	; 0
     72c:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
     730:	2f 57       	subi	r18, 0x7F	; 127
     732:	30 40       	sbci	r19, 0x00	; 0
     734:	40 40       	sbci	r20, 0x00	; 0
     736:	50 40       	sbci	r21, 0x00	; 0
	return ((degree * (DRIVE_SPEED_MAX - DRIVE_SPEED_MIN))/180) + DRIVE_SPEED_MIN;
}
     738:	b9 01       	movw	r22, r18
     73a:	ca 01       	movw	r24, r20
     73c:	08 95       	ret

0000073e <clearMap>:
    rprintf("\n");//print an empty line since the map is complete
}

void clearMap()
//clears the map of propagated values
{
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
 
  for (int row=0; row < MAP_X; row++)
     742:	4c e3       	ldi	r20, 0x3C	; 60
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	0b c0       	rjmp	.+22     	; 0x75e <clearMap+0x20>

    for (int col=0; col < MAP_Y; col++)
    //traverse MAP_Y columns
    {
      
	  courseMap[row][col] = NOTH;
     748:	11 92       	st	Z+, r1
     74a:	11 92       	st	Z+, r1
 
  for (int row=0; row < MAP_X; row++)
  //traverse MAP_X rows
  {

    for (int col=0; col < MAP_Y; col++)
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	8e 31       	cpi	r24, 0x1E	; 30
     750:	91 05       	cpc	r25, r1
     752:	d1 f7       	brne	.-12     	; 0x748 <clearMap+0xa>

void clearMap()
//clears the map of propagated values
{
 
  for (int row=0; row < MAP_X; row++)
     754:	2f 5f       	subi	r18, 0xFF	; 255
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	2e 31       	cpi	r18, 0x1E	; 30
     75a:	31 05       	cpc	r19, r1
     75c:	61 f0       	breq	.+24     	; 0x776 <clearMap+0x38>
     75e:	24 9f       	mul	r18, r20
     760:	f0 01       	movw	r30, r0
     762:	25 9f       	mul	r18, r21
     764:	f0 0d       	add	r31, r0
     766:	34 9f       	mul	r19, r20
     768:	f0 0d       	add	r31, r0
     76a:	11 24       	eor	r1, r1
     76c:	e6 53       	subi	r30, 0x36	; 54
     76e:	fc 4f       	sbci	r31, 0xFC	; 252
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	e9 cf       	rjmp	.-46     	; 0x748 <clearMap+0xa>
     776:	08 95       	ret

00000778 <isAnythingZone0>:
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
	{
		for(short zon0col = 0; zon0col < 3; zon0col++)
		{
			zone0 += courseMap[robotX + (zon0row + ROBOT_DISTX + 1)][robotY + (zon0col - 1)];
     778:	40 91 2b 03 	lds	r20, 0x032B
     77c:	20 91 2c 03 	lds	r18, 0x032C
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	84 2f       	mov	r24, r20
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	02 96       	adiw	r24, 0x02	; 2
     788:	fc 01       	movw	r30, r24
     78a:	65 e0       	ldi	r22, 0x05	; 5
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	6a 95       	dec	r22
     792:	e1 f7       	brne	.-8      	; 0x78c <isAnythingZone0+0x14>
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	e8 1b       	sub	r30, r24
     79a:	f9 0b       	sbc	r31, r25
     79c:	e2 0f       	add	r30, r18
     79e:	f3 1f       	adc	r31, r19
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e8 53       	subi	r30, 0x38	; 56
     7a6:	fc 4f       	sbci	r31, 0xFC	; 252
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0

int isAnythingZone0()
{//zone 0 is a 3 row by 5 col block directly if front
	int zone0 = 0;
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
     7ac:	b9 01       	movw	r22, r18
     7ae:	6f 52       	subi	r22, 0x2F	; 47
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	8e e1       	ldi	r24, 0x1E	; 30
     7b4:	48 9f       	mul	r20, r24
     7b6:	a0 01       	movw	r20, r0
     7b8:	11 24       	eor	r1, r1
     7ba:	64 0f       	add	r22, r20
     7bc:	75 1f       	adc	r23, r21
     7be:	66 0f       	add	r22, r22
     7c0:	77 1f       	adc	r23, r23
     7c2:	66 53       	subi	r22, 0x36	; 54
     7c4:	7c 4f       	sbci	r23, 0xFC	; 252
	{
		for(short zon0col = 0; zon0col < 3; zon0col++)
		{
			zone0 += courseMap[robotX + (zon0row + ROBOT_DISTX + 1)][robotY + (zon0col - 1)];
     7c6:	82 81       	ldd	r24, Z+2	; 0x02
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	20 81       	ld	r18, Z
     7cc:	31 81       	ldd	r19, Z+1	; 0x01
     7ce:	82 0f       	add	r24, r18
     7d0:	93 1f       	adc	r25, r19
     7d2:	a8 0f       	add	r26, r24
     7d4:	b9 1f       	adc	r27, r25
     7d6:	84 81       	ldd	r24, Z+4	; 0x04
     7d8:	95 81       	ldd	r25, Z+5	; 0x05
     7da:	a8 0f       	add	r26, r24
     7dc:	b9 1f       	adc	r27, r25
     7de:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone0()
{//zone 0 is a 3 row by 5 col block directly if front
	int zone0 = 0;
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
     7e0:	e6 17       	cp	r30, r22
     7e2:	f7 07       	cpc	r31, r23
     7e4:	81 f7       	brne	.-32     	; 0x7c6 <isAnythingZone0+0x4e>
			zone0 += courseMap[robotX + (zon0row + ROBOT_DISTX + 1)][robotY + (zon0col - 1)];
		} 
	}

	return zone0;
}
     7e6:	cd 01       	movw	r24, r26
     7e8:	08 95       	ret

000007ea <isAnythingZone1>:

int isAnythingZone1()
{//zone 1 is four rows in front
     7ea:	20 91 2c 03 	lds	r18, 0x032C
     7ee:	80 91 2b 03 	lds	r24, 0x032B
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	07 96       	adiw	r24, 0x07	; 7
     7f6:	fc 01       	movw	r30, r24
     7f8:	b5 e0       	ldi	r27, 0x05	; 5
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	ba 95       	dec	r27
     800:	e1 f7       	brne	.-8      	; 0x7fa <isAnythingZone1+0x10>
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	e8 1b       	sub	r30, r24
     808:	f9 0b       	sbc	r31, r25
     80a:	e2 0f       	add	r30, r18
     80c:	f1 1d       	adc	r31, r1
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	e6 53       	subi	r30, 0x36	; 54
     814:	fc 4f       	sbci	r31, 0xFC	; 252
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
	int zone1 = 0;
	
	for(short zon1row = 0; zon1row < 5; zon1row++)
	{
		zone1 += courseMap[robotX + (ROBOT_DISTX + 1 + 5 + zon1row)][robotY];
     81e:	80 81       	ld	r24, Z
     820:	91 81       	ldd	r25, Z+1	; 0x01
     822:	48 0f       	add	r20, r24
     824:	59 1f       	adc	r21, r25

int isAnythingZone1()
{//zone 1 is four rows in front
	int zone1 = 0;
	
	for(short zon1row = 0; zon1row < 5; zon1row++)
     826:	2f 5f       	subi	r18, 0xFF	; 255
     828:	3f 4f       	sbci	r19, 0xFF	; 255
     82a:	fc 96       	adiw	r30, 0x3c	; 60
     82c:	25 30       	cpi	r18, 0x05	; 5
     82e:	31 05       	cpc	r19, r1
     830:	b1 f7       	brne	.-20     	; 0x81e <isAnythingZone1+0x34>
	{
		zone1 += courseMap[robotX + (ROBOT_DISTX + 1 + 5 + zon1row)][robotY];
	}

	return zone1;
}
     832:	ca 01       	movw	r24, r20
     834:	08 95       	ret

00000836 <isAnythingZone2>:

int isAnythingZone2()
{//zone 2 is four rows in front and 3 cols right of center
     836:	20 91 2c 03 	lds	r18, 0x032C
     83a:	80 91 2b 03 	lds	r24, 0x032B
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	07 96       	adiw	r24, 0x07	; 7
     842:	fc 01       	movw	r30, r24
     844:	45 e0       	ldi	r20, 0x05	; 5
     846:	ee 0f       	add	r30, r30
     848:	ff 1f       	adc	r31, r31
     84a:	4a 95       	dec	r20
     84c:	e1 f7       	brne	.-8      	; 0x846 <isAnythingZone2+0x10>
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	e8 1b       	sub	r30, r24
     854:	f9 0b       	sbc	r31, r25
     856:	e2 0f       	add	r30, r18
     858:	f1 1d       	adc	r31, r1
     85a:	ee 0f       	add	r30, r30
     85c:	ff 1f       	adc	r31, r31
     85e:	e8 53       	subi	r30, 0x38	; 56
     860:	fc 4f       	sbci	r31, 0xFC	; 252
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
	int zone2 = 0;
	
	for(short zon2row = 0; zon2row < 5; zon2row++)
	{
		zone2 += courseMap[robotX + (ROBOT_DISTX + 1 + 5 + zon2row)][robotY - 1];
     86a:	80 81       	ld	r24, Z
     86c:	91 81       	ldd	r25, Z+1	; 0x01
     86e:	48 0f       	add	r20, r24
     870:	59 1f       	adc	r21, r25

int isAnythingZone2()
{//zone 2 is four rows in front and 3 cols right of center
	int zone2 = 0;
	
	for(short zon2row = 0; zon2row < 5; zon2row++)
     872:	2f 5f       	subi	r18, 0xFF	; 255
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	fc 96       	adiw	r30, 0x3c	; 60
     878:	25 30       	cpi	r18, 0x05	; 5
     87a:	31 05       	cpc	r19, r1
     87c:	b1 f7       	brne	.-20     	; 0x86a <isAnythingZone2+0x34>
	{
		zone2 += courseMap[robotX + (ROBOT_DISTX + 1 + 5 + zon2row)][robotY - 1];
	}

	return zone2;
}
     87e:	ca 01       	movw	r24, r20
     880:	08 95       	ret

00000882 <isAnythingZone3>:

int isAnythingZone3()
{ //zone 3 is four rows in front and 3 cols left of center
     882:	20 91 2c 03 	lds	r18, 0x032C
     886:	80 91 2b 03 	lds	r24, 0x032B
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	07 96       	adiw	r24, 0x07	; 7
     88e:	fc 01       	movw	r30, r24
     890:	75 e0       	ldi	r23, 0x05	; 5
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	7a 95       	dec	r23
     898:	e1 f7       	brne	.-8      	; 0x892 <isAnythingZone3+0x10>
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	e8 1b       	sub	r30, r24
     8a0:	f9 0b       	sbc	r31, r25
     8a2:	e2 0f       	add	r30, r18
     8a4:	f1 1d       	adc	r31, r1
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	e4 53       	subi	r30, 0x34	; 52
     8ac:	fc 4f       	sbci	r31, 0xFC	; 252
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
	int zone3 = 0;
	
	for(short zon3row = 0; zon3row < 5; zon3row++)
	{
		zone3 += courseMap[robotX + (ROBOT_DISTX + 1 + 5 + zon3row)][robotY + 1];
     8b6:	80 81       	ld	r24, Z
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	48 0f       	add	r20, r24
     8bc:	59 1f       	adc	r21, r25

int isAnythingZone3()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone3 = 0;
	
	for(short zon3row = 0; zon3row < 5; zon3row++)
     8be:	2f 5f       	subi	r18, 0xFF	; 255
     8c0:	3f 4f       	sbci	r19, 0xFF	; 255
     8c2:	fc 96       	adiw	r30, 0x3c	; 60
     8c4:	25 30       	cpi	r18, 0x05	; 5
     8c6:	31 05       	cpc	r19, r1
     8c8:	b1 f7       	brne	.-20     	; 0x8b6 <isAnythingZone3+0x34>
	{
		zone3 += courseMap[robotX + (ROBOT_DISTX + 1 + 5 + zon3row)][robotY + 1];
	}

	return zone3;
}
     8ca:	ca 01       	movw	r24, r20
     8cc:	08 95       	ret

000008ce <isAnythingZone4>:

int isAnythingZone4()
{ //zone 3 is four rows in front and 3 cols left of center
     8ce:	20 91 2c 03 	lds	r18, 0x032C
     8d2:	80 91 2b 03 	lds	r24, 0x032B
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	02 96       	adiw	r24, 0x02	; 2
     8da:	fc 01       	movw	r30, r24
     8dc:	35 e0       	ldi	r19, 0x05	; 5
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	3a 95       	dec	r19
     8e4:	e1 f7       	brne	.-8      	; 0x8de <isAnythingZone4+0x10>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	e8 1b       	sub	r30, r24
     8ec:	f9 0b       	sbc	r31, r25
     8ee:	e2 0f       	add	r30, r18
     8f0:	f1 1d       	adc	r31, r1
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	ea 53       	subi	r30, 0x3A	; 58
     8f8:	fc 4f       	sbci	r31, 0xFC	; 252
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
	int zone4 = 0;
	
	for(short zon4row = 0; zon4row < 10; zon4row++)
	{
		zone4 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon4row)][robotY - 2];
     902:	80 81       	ld	r24, Z
     904:	91 81       	ldd	r25, Z+1	; 0x01
     906:	48 0f       	add	r20, r24
     908:	59 1f       	adc	r21, r25

int isAnythingZone4()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone4 = 0;
	
	for(short zon4row = 0; zon4row < 10; zon4row++)
     90a:	2f 5f       	subi	r18, 0xFF	; 255
     90c:	3f 4f       	sbci	r19, 0xFF	; 255
     90e:	fc 96       	adiw	r30, 0x3c	; 60
     910:	2a 30       	cpi	r18, 0x0A	; 10
     912:	31 05       	cpc	r19, r1
     914:	b1 f7       	brne	.-20     	; 0x902 <isAnythingZone4+0x34>
	{
		zone4 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon4row)][robotY - 2];
	}

	return zone4;
}
     916:	ca 01       	movw	r24, r20
     918:	08 95       	ret

0000091a <isAnythingZone6>:

int isAnythingZone6()
{ //zone 3 is four rows in front and 3 cols left of center
     91a:	20 91 2c 03 	lds	r18, 0x032C
     91e:	80 91 2b 03 	lds	r24, 0x032B
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	02 96       	adiw	r24, 0x02	; 2
     926:	fc 01       	movw	r30, r24
     928:	65 e0       	ldi	r22, 0x05	; 5
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	6a 95       	dec	r22
     930:	e1 f7       	brne	.-8      	; 0x92a <isAnythingZone6+0x10>
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	e8 1b       	sub	r30, r24
     938:	f9 0b       	sbc	r31, r25
     93a:	e2 0f       	add	r30, r18
     93c:	f1 1d       	adc	r31, r1
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	ec 53       	subi	r30, 0x3C	; 60
     944:	fc 4f       	sbci	r31, 0xFC	; 252
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
	int zone6 = 0;
	
	for(short zon6row = 0; zon6row < 5; zon6row++)
	{
		zone6 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon6row)][robotY - 3];
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	48 0f       	add	r20, r24
     954:	59 1f       	adc	r21, r25

int isAnythingZone6()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone6 = 0;
	
	for(short zon6row = 0; zon6row < 5; zon6row++)
     956:	2f 5f       	subi	r18, 0xFF	; 255
     958:	3f 4f       	sbci	r19, 0xFF	; 255
     95a:	fc 96       	adiw	r30, 0x3c	; 60
     95c:	25 30       	cpi	r18, 0x05	; 5
     95e:	31 05       	cpc	r19, r1
     960:	b1 f7       	brne	.-20     	; 0x94e <isAnythingZone6+0x34>
	{
		zone6 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon6row)][robotY - 3];
	}

	return zone6;
}
     962:	ca 01       	movw	r24, r20
     964:	08 95       	ret

00000966 <isAnythingZone5>:

int isAnythingZone5()
{ //zone 3 is four rows in front and 3 cols left of center
     966:	20 91 2c 03 	lds	r18, 0x032C
     96a:	80 91 2b 03 	lds	r24, 0x032B
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	02 96       	adiw	r24, 0x02	; 2
     972:	fc 01       	movw	r30, r24
     974:	b5 e0       	ldi	r27, 0x05	; 5
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	ba 95       	dec	r27
     97c:	e1 f7       	brne	.-8      	; 0x976 <isAnythingZone5+0x10>
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	e8 1b       	sub	r30, r24
     984:	f9 0b       	sbc	r31, r25
     986:	e2 0f       	add	r30, r18
     988:	f1 1d       	adc	r31, r1
     98a:	ee 0f       	add	r30, r30
     98c:	ff 1f       	adc	r31, r31
     98e:	e2 53       	subi	r30, 0x32	; 50
     990:	fc 4f       	sbci	r31, 0xFC	; 252
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
	int zone5 = 0;
	
	for(short zon5row = 0; zon5row < 5; zon5row++)
	{
		zone5 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon5row)][robotY + 2];
     99a:	80 81       	ld	r24, Z
     99c:	91 81       	ldd	r25, Z+1	; 0x01
     99e:	48 0f       	add	r20, r24
     9a0:	59 1f       	adc	r21, r25

int isAnythingZone5()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone5 = 0;
	
	for(short zon5row = 0; zon5row < 5; zon5row++)
     9a2:	2f 5f       	subi	r18, 0xFF	; 255
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	fc 96       	adiw	r30, 0x3c	; 60
     9a8:	25 30       	cpi	r18, 0x05	; 5
     9aa:	31 05       	cpc	r19, r1
     9ac:	b1 f7       	brne	.-20     	; 0x99a <isAnythingZone5+0x34>
	{
		zone5 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon5row)][robotY + 2];
	}

	return zone5;
}
     9ae:	ca 01       	movw	r24, r20
     9b0:	08 95       	ret

000009b2 <isAnythingZone7>:

int isAnythingZone7()
{ //zone 3 is four rows in front and 3 cols left of center
     9b2:	20 91 2c 03 	lds	r18, 0x032C
     9b6:	80 91 2b 03 	lds	r24, 0x032B
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	02 96       	adiw	r24, 0x02	; 2
     9be:	fc 01       	movw	r30, r24
     9c0:	45 e0       	ldi	r20, 0x05	; 5
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	4a 95       	dec	r20
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <isAnythingZone7+0x10>
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	e8 1b       	sub	r30, r24
     9d0:	f9 0b       	sbc	r31, r25
     9d2:	e2 0f       	add	r30, r18
     9d4:	f1 1d       	adc	r31, r1
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	e0 53       	subi	r30, 0x30	; 48
     9dc:	fc 4f       	sbci	r31, 0xFC	; 252
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
	int zone7 = 0;
	
	for(short zon7row = 0; zon7row < 5; zon7row++)
	{
		zone7 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon7row)][robotY + 3];
     9e6:	80 81       	ld	r24, Z
     9e8:	91 81       	ldd	r25, Z+1	; 0x01
     9ea:	48 0f       	add	r20, r24
     9ec:	59 1f       	adc	r21, r25

int isAnythingZone7()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone7 = 0;
	
	for(short zon7row = 0; zon7row < 5; zon7row++)
     9ee:	2f 5f       	subi	r18, 0xFF	; 255
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	fc 96       	adiw	r30, 0x3c	; 60
     9f4:	25 30       	cpi	r18, 0x05	; 5
     9f6:	31 05       	cpc	r19, r1
     9f8:	b1 f7       	brne	.-20     	; 0x9e6 <isAnythingZone7+0x34>
	{
		zone7 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon7row)][robotY + 3];
	}

	return zone7;
}
     9fa:	ca 01       	movw	r24, r20
     9fc:	08 95       	ret

000009fe <isAnythingLeftZone>:

int isAnythingLeftZone()
{ //zone 3 is four rows in front and 3 cols left of center
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
	
	for(short zonLeftRow = 0; zonLeftRow < 3; zonLeftRow++)
	{
		for(short zonLeftCol = 0; zonLeftCol < 5; zonLeftCol++)
		{
			zoneLeft += courseMap[robotX + (zonLeftRow)][robotY + (ROBOT_DISTY + 1 + zonLeftCol)];
     a02:	90 91 2b 03 	lds	r25, 0x032B
     a06:	80 91 2c 03 	lds	r24, 0x032C
     a0a:	a8 2f       	mov	r26, r24
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	12 96       	adiw	r26, 0x02	; 2
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0

int isAnythingLeftZone()
{ //zone 3 is four rows in front and 3 cols left of center
	int zoneLeft = 0;
	
	for(short zonLeftRow = 0; zonLeftRow < 3; zonLeftRow++)
     a18:	c9 2f       	mov	r28, r25
     a1a:	d0 e0       	ldi	r29, 0x00	; 0
     a1c:	0e c0       	rjmp	.+28     	; 0xa3a <isAnythingLeftZone+0x3c>
	{
		for(short zonLeftCol = 0; zonLeftCol < 5; zonLeftCol++)
		{
			zoneLeft += courseMap[robotX + (zonLeftRow)][robotY + (ROBOT_DISTY + 1 + zonLeftCol)];
     a1e:	81 91       	ld	r24, Z+
     a20:	91 91       	ld	r25, Z+
     a22:	68 0f       	add	r22, r24
     a24:	79 1f       	adc	r23, r25
{ //zone 3 is four rows in front and 3 cols left of center
	int zoneLeft = 0;
	
	for(short zonLeftRow = 0; zonLeftRow < 3; zonLeftRow++)
	{
		for(short zonLeftCol = 0; zonLeftCol < 5; zonLeftCol++)
     a26:	2f 5f       	subi	r18, 0xFF	; 255
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	25 30       	cpi	r18, 0x05	; 5
     a2c:	31 05       	cpc	r19, r1
     a2e:	b9 f7       	brne	.-18     	; 0xa1e <isAnythingLeftZone+0x20>

int isAnythingLeftZone()
{ //zone 3 is four rows in front and 3 cols left of center
	int zoneLeft = 0;
	
	for(short zonLeftRow = 0; zonLeftRow < 3; zonLeftRow++)
     a30:	4f 5f       	subi	r20, 0xFF	; 255
     a32:	5f 4f       	sbci	r21, 0xFF	; 255
     a34:	43 30       	cpi	r20, 0x03	; 3
     a36:	51 05       	cpc	r21, r1
     a38:	b1 f0       	breq	.+44     	; 0xa66 <isAnythingLeftZone+0x68>
     a3a:	ca 01       	movw	r24, r20
     a3c:	8c 0f       	add	r24, r28
     a3e:	9d 1f       	adc	r25, r29
     a40:	fc 01       	movw	r30, r24
     a42:	35 e0       	ldi	r19, 0x05	; 5
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	3a 95       	dec	r19
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <isAnythingLeftZone+0x46>
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	e8 1b       	sub	r30, r24
     a52:	f9 0b       	sbc	r31, r25
     a54:	ea 0f       	add	r30, r26
     a56:	fb 1f       	adc	r31, r27
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	e6 53       	subi	r30, 0x36	; 54
     a5e:	fc 4f       	sbci	r31, 0xFC	; 252
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	dc cf       	rjmp	.-72     	; 0xa1e <isAnythingLeftZone+0x20>
			zoneLeft += courseMap[robotX + (zonLeftRow)][robotY + (ROBOT_DISTY + 1 + zonLeftCol)];
		}
	}

	return zoneLeft;
}
     a66:	cb 01       	movw	r24, r22
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <isAnythingRightZone>:

int isAnythingRightZone()
{ //zone 3 is four rows in front and 3 cols left of center
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
	
	for(short zonRightRow = 0; zonRightRow < 3; zonRightRow++)
	{
		for(short zonRightCol = 0; zonRightCol < 5; zonRightCol++)
		{
			zoneRight += courseMap[robotX + (zonRightRow)][robotY - (ROBOT_DISTY + 1 + zonRightCol)];
     a72:	90 91 2b 03 	lds	r25, 0x032B
     a76:	80 91 2c 03 	lds	r24, 0x032C
     a7a:	a8 2f       	mov	r26, r24
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	12 97       	sbiw	r26, 0x02	; 2
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0

int isAnythingRightZone()
{ //zone 3 is four rows in front and 3 cols left of center
	int zoneRight = 0;
	
	for(short zonRightRow = 0; zonRightRow < 3; zonRightRow++)
     a88:	c9 2f       	mov	r28, r25
     a8a:	d0 e0       	ldi	r29, 0x00	; 0
     a8c:	0f c0       	rjmp	.+30     	; 0xaac <isAnythingRightZone+0x3e>
	{
		for(short zonRightCol = 0; zonRightCol < 5; zonRightCol++)
		{
			zoneRight += courseMap[robotX + (zonRightRow)][robotY - (ROBOT_DISTY + 1 + zonRightCol)];
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	68 0f       	add	r22, r24
     a94:	79 1f       	adc	r23, r25
{ //zone 3 is four rows in front and 3 cols left of center
	int zoneRight = 0;
	
	for(short zonRightRow = 0; zonRightRow < 3; zonRightRow++)
	{
		for(short zonRightCol = 0; zonRightCol < 5; zonRightCol++)
     a96:	2f 5f       	subi	r18, 0xFF	; 255
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	32 97       	sbiw	r30, 0x02	; 2
     a9c:	25 30       	cpi	r18, 0x05	; 5
     a9e:	31 05       	cpc	r19, r1
     aa0:	b1 f7       	brne	.-20     	; 0xa8e <isAnythingRightZone+0x20>

int isAnythingRightZone()
{ //zone 3 is four rows in front and 3 cols left of center
	int zoneRight = 0;
	
	for(short zonRightRow = 0; zonRightRow < 3; zonRightRow++)
     aa2:	4f 5f       	subi	r20, 0xFF	; 255
     aa4:	5f 4f       	sbci	r21, 0xFF	; 255
     aa6:	43 30       	cpi	r20, 0x03	; 3
     aa8:	51 05       	cpc	r21, r1
     aaa:	b1 f0       	breq	.+44     	; 0xad8 <isAnythingRightZone+0x6a>
     aac:	ca 01       	movw	r24, r20
     aae:	8c 0f       	add	r24, r28
     ab0:	9d 1f       	adc	r25, r29
     ab2:	fc 01       	movw	r30, r24
     ab4:	35 e0       	ldi	r19, 0x05	; 5
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	3a 95       	dec	r19
     abc:	e1 f7       	brne	.-8      	; 0xab6 <isAnythingRightZone+0x48>
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	e8 1b       	sub	r30, r24
     ac4:	f9 0b       	sbc	r31, r25
     ac6:	ea 0f       	add	r30, r26
     ac8:	fb 1f       	adc	r31, r27
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	e6 53       	subi	r30, 0x36	; 54
     ad0:	fc 4f       	sbci	r31, 0xFC	; 252
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	db cf       	rjmp	.-74     	; 0xa8e <isAnythingRightZone+0x20>
			zoneRight += courseMap[robotX + (zonRightRow)][robotY - (ROBOT_DISTY + 1 + zonRightCol)];
		}
	}

	return zoneRight;
}
     ad8:	cb 01       	movw	r24, r22
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <appControl>:
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart){

	
	while(true)
	{
		act_setSpeed(&ir_servo, degreeToSpeed(90));
     ae0:	85 eb       	ldi	r24, 0xB5	; 181
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
     aea:	fa cf       	rjmp	.-12     	; 0xae0 <appControl>

00000aec <driveStraight>:
	}

}

void driveStraight(int speed)
{
     aec:	1f 93       	push	r17
     aee:	18 2f       	mov	r17, r24
	
	act_setSpeed(&wheel_left, speed);
     af0:	84 e8       	ldi	r24, 0x84	; 132
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	61 2f       	mov	r22, r17
     af6:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
	act_setSpeed(&wheel_right, speed);
     afa:	88 e9       	ldi	r24, 0x98	; 152
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	61 2f       	mov	r22, r17
     b00:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>

}
     b04:	1f 91       	pop	r17
     b06:	08 95       	ret

00000b08 <printMap>:
    }
}

void printMap(int robotOrient)
//clears the map of propagated values
{
     b08:	2f 92       	push	r2
     b0a:	3f 92       	push	r3
     b0c:	4f 92       	push	r4
     b0e:	5f 92       	push	r5
     b10:	6f 92       	push	r6
     b12:	7f 92       	push	r7
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	5c 01       	movw	r10, r24
     b2c:	00 e0       	ldi	r16, 0x00	; 0
     b2e:	10 e0       	ldi	r17, 0x00	; 0
                    else
                        {rprintf(" < ");}
                }
//-----------print robot block
            else if((row == (robotX - ROBOT_DISTX)) && col == (robotY - ROBOT_DISTY))
                {rprintf(" R ");}
     b30:	7c e3       	ldi	r23, 0x3C	; 60
     b32:	27 2e       	mov	r2, r23
     b34:	74 e0       	ldi	r23, 0x04	; 4
     b36:	37 2e       	mov	r3, r23
                    if(robotOrient == NORTH)
                        {rprintf(" ^ ");}
                    else if(robotOrient == EAST)
                        {rprintf(" > ");}
                    else if(robotOrient == SOUTH)
                        {rprintf(" V ");}
     b38:	64 e4       	ldi	r22, 0x44	; 68
     b3a:	46 2e       	mov	r4, r22
     b3c:	64 e0       	ldi	r22, 0x04	; 4
     b3e:	56 2e       	mov	r5, r22
     b40:	2d c1       	rjmp	.+602    	; 0xd9c <printMap+0x294>
    //traverse MAP_X rows
    {
        for (int col=0; col < MAP_Y; col++)
        //traverse MAP_Y columns
        {
            if(row== robotX && col == robotY)
     b42:	80 91 2b 03 	lds	r24, 0x032B
     b46:	48 2f       	mov	r20, r24
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	04 17       	cp	r16, r20
     b4c:	15 07       	cpc	r17, r21
     b4e:	09 f0       	breq	.+2      	; 0xb52 <printMap+0x4a>
     b50:	40 c0       	rjmp	.+128    	; 0xbd2 <printMap+0xca>
     b52:	80 91 2c 03 	lds	r24, 0x032C
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	c8 17       	cp	r28, r24
     b5a:	d9 07       	cpc	r29, r25
     b5c:	d1 f5       	brne	.+116    	; 0xbd2 <printMap+0xca>
            //if the node is the robot print direction instead of the number
                {
                    if(robotOrient == NORTH)
     b5e:	a1 14       	cp	r10, r1
     b60:	b1 04       	cpc	r11, r1
     b62:	61 f4       	brne	.+24     	; 0xb7c <printMap+0x74>
                        {rprintf(" ^ ");}
     b64:	00 d0       	rcall	.+0      	; 0xb66 <printMap+0x5e>
     b66:	0f 92       	push	r0
     b68:	ad b7       	in	r26, 0x3d	; 61
     b6a:	be b7       	in	r27, 0x3e	; 62
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	fc 92       	st	X, r15
     b70:	11 97       	sbiw	r26, 0x01	; 1
     b72:	13 96       	adiw	r26, 0x03	; 3
     b74:	9c 92       	st	X, r9
     b76:	8e 92       	st	-X, r8
     b78:	12 97       	sbiw	r26, 0x02	; 2
     b7a:	25 c0       	rjmp	.+74     	; 0xbc6 <printMap+0xbe>
                    else if(robotOrient == EAST)
     b7c:	b1 e0       	ldi	r27, 0x01	; 1
     b7e:	ab 16       	cp	r10, r27
     b80:	b1 04       	cpc	r11, r1
     b82:	41 f4       	brne	.+16     	; 0xb94 <printMap+0x8c>
                        {rprintf(" > ");}
     b84:	00 d0       	rcall	.+0      	; 0xb86 <printMap+0x7e>
     b86:	0f 92       	push	r0
     b88:	ed b7       	in	r30, 0x3d	; 61
     b8a:	fe b7       	in	r31, 0x3e	; 62
     b8c:	f1 82       	std	Z+1, r15	; 0x01
     b8e:	73 82       	std	Z+3, r7	; 0x03
     b90:	62 82       	std	Z+2, r6	; 0x02
     b92:	19 c0       	rjmp	.+50     	; 0xbc6 <printMap+0xbe>
                    else if(robotOrient == SOUTH)
     b94:	f2 e0       	ldi	r31, 0x02	; 2
     b96:	af 16       	cp	r10, r31
     b98:	b1 04       	cpc	r11, r1
     b9a:	61 f4       	brne	.+24     	; 0xbb4 <printMap+0xac>
                        {rprintf(" V ");}
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <printMap+0x96>
     b9e:	0f 92       	push	r0
     ba0:	ad b7       	in	r26, 0x3d	; 61
     ba2:	be b7       	in	r27, 0x3e	; 62
     ba4:	11 96       	adiw	r26, 0x01	; 1
     ba6:	fc 92       	st	X, r15
     ba8:	11 97       	sbiw	r26, 0x01	; 1
     baa:	13 96       	adiw	r26, 0x03	; 3
     bac:	5c 92       	st	X, r5
     bae:	4e 92       	st	-X, r4
     bb0:	12 97       	sbiw	r26, 0x02	; 2
     bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <printMap+0xbe>
                    else
                        {rprintf(" < ");}
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <printMap+0xae>
     bb6:	0f 92       	push	r0
     bb8:	ed b7       	in	r30, 0x3d	; 61
     bba:	fe b7       	in	r31, 0x3e	; 62
     bbc:	f1 82       	std	Z+1, r15	; 0x01
     bbe:	20 e4       	ldi	r18, 0x40	; 64
     bc0:	34 e0       	ldi	r19, 0x04	; 4
     bc2:	33 83       	std	Z+3, r19	; 0x03
     bc4:	22 83       	std	Z+2, r18	; 0x02
     bc6:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	c3 c0       	rjmp	.+390    	; 0xd58 <printMap+0x250>
                }
//-----------print robot block
            else if((row == (robotX - ROBOT_DISTX)) && col == (robotY - ROBOT_DISTY))
     bd2:	ca 01       	movw	r24, r20
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	08 17       	cp	r16, r24
     bd8:	19 07       	cpc	r17, r25
     bda:	79 f5       	brne	.+94     	; 0xc3a <printMap+0x132>
     bdc:	80 91 2c 03 	lds	r24, 0x032C
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	c9 01       	movw	r24, r18
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	c8 17       	cp	r28, r24
     bea:	d9 07       	cpc	r29, r25
     bec:	61 f4       	brne	.+24     	; 0xc06 <printMap+0xfe>
                {rprintf(" R ");}
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <printMap+0xe8>
     bf0:	0f 92       	push	r0
     bf2:	ad b7       	in	r26, 0x3d	; 61
     bf4:	be b7       	in	r27, 0x3e	; 62
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	fc 92       	st	X, r15
     bfa:	11 97       	sbiw	r26, 0x01	; 1
     bfc:	13 96       	adiw	r26, 0x03	; 3
     bfe:	3c 92       	st	X, r3
     c00:	2e 92       	st	-X, r2
     c02:	12 97       	sbiw	r26, 0x02	; 2
     c04:	e0 cf       	rjmp	.-64     	; 0xbc6 <printMap+0xbe>
            else if((row == (robotX - ROBOT_DISTX)) && col == (robotY))
     c06:	c2 17       	cp	r28, r18
     c08:	d3 07       	cpc	r29, r19
     c0a:	41 f4       	brne	.+16     	; 0xc1c <printMap+0x114>
                {rprintf(" R ");}
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <printMap+0x106>
     c0e:	0f 92       	push	r0
     c10:	ed b7       	in	r30, 0x3d	; 61
     c12:	fe b7       	in	r31, 0x3e	; 62
     c14:	f1 82       	std	Z+1, r15	; 0x01
     c16:	28 e3       	ldi	r18, 0x38	; 56
     c18:	34 e0       	ldi	r19, 0x04	; 4
     c1a:	d3 cf       	rjmp	.-90     	; 0xbc2 <printMap+0xba>
            else if(row == (robotX - ROBOT_DISTX) && col == (robotY + ROBOT_DISTY))
     c1c:	2f 5f       	subi	r18, 0xFF	; 255
     c1e:	3f 4f       	sbci	r19, 0xFF	; 255
     c20:	c2 17       	cp	r28, r18
     c22:	d3 07       	cpc	r29, r19
     c24:	51 f4       	brne	.+20     	; 0xc3a <printMap+0x132>
                {rprintf(" R ");}
     c26:	00 d0       	rcall	.+0      	; 0xc28 <printMap+0x120>
     c28:	0f 92       	push	r0
     c2a:	ad b7       	in	r26, 0x3d	; 61
     c2c:	be b7       	in	r27, 0x3e	; 62
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	fc 92       	st	X, r15
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	e4 e3       	ldi	r30, 0x34	; 52
     c36:	f4 e0       	ldi	r31, 0x04	; 4
     c38:	73 c0       	rjmp	.+230    	; 0xd20 <printMap+0x218>
            else if(row == robotX && col == (robotY - ROBOT_DISTY))
     c3a:	04 17       	cp	r16, r20
     c3c:	15 07       	cpc	r17, r21
     c3e:	11 f5       	brne	.+68     	; 0xc84 <printMap+0x17c>
     c40:	80 91 2c 03 	lds	r24, 0x032C
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	c9 01       	movw	r24, r18
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	c8 17       	cp	r28, r24
     c4e:	d9 07       	cpc	r29, r25
     c50:	51 f4       	brne	.+20     	; 0xc66 <printMap+0x15e>
                {rprintf(" R ");}
     c52:	00 d0       	rcall	.+0      	; 0xc54 <printMap+0x14c>
     c54:	0f 92       	push	r0
     c56:	ad b7       	in	r26, 0x3d	; 61
     c58:	be b7       	in	r27, 0x3e	; 62
     c5a:	11 96       	adiw	r26, 0x01	; 1
     c5c:	fc 92       	st	X, r15
     c5e:	11 97       	sbiw	r26, 0x01	; 1
     c60:	e0 e3       	ldi	r30, 0x30	; 48
     c62:	f4 e0       	ldi	r31, 0x04	; 4
     c64:	5d c0       	rjmp	.+186    	; 0xd20 <printMap+0x218>
            else if(row == robotX && col == (robotY + ROBOT_DISTY))
     c66:	2f 5f       	subi	r18, 0xFF	; 255
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
     c6a:	c2 17       	cp	r28, r18
     c6c:	d3 07       	cpc	r29, r19
     c6e:	51 f4       	brne	.+20     	; 0xc84 <printMap+0x17c>
                {rprintf(" R ");}
     c70:	00 d0       	rcall	.+0      	; 0xc72 <printMap+0x16a>
     c72:	0f 92       	push	r0
     c74:	ad b7       	in	r26, 0x3d	; 61
     c76:	be b7       	in	r27, 0x3e	; 62
     c78:	11 96       	adiw	r26, 0x01	; 1
     c7a:	fc 92       	st	X, r15
     c7c:	11 97       	sbiw	r26, 0x01	; 1
     c7e:	ec e2       	ldi	r30, 0x2C	; 44
     c80:	f4 e0       	ldi	r31, 0x04	; 4
     c82:	4e c0       	rjmp	.+156    	; 0xd20 <printMap+0x218>
            else if(row == (robotX + ROBOT_DISTX) && col == (robotY - ROBOT_DISTY))
     c84:	4f 5f       	subi	r20, 0xFF	; 255
     c86:	5f 4f       	sbci	r21, 0xFF	; 255
     c88:	04 17       	cp	r16, r20
     c8a:	15 07       	cpc	r17, r21
     c8c:	79 f5       	brne	.+94     	; 0xcec <printMap+0x1e4>
     c8e:	80 91 2c 03 	lds	r24, 0x032C
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	c9 01       	movw	r24, r18
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	c8 17       	cp	r28, r24
     c9c:	d9 07       	cpc	r29, r25
     c9e:	51 f4       	brne	.+20     	; 0xcb4 <printMap+0x1ac>
                {rprintf(" R ");}
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <printMap+0x19a>
     ca2:	0f 92       	push	r0
     ca4:	ad b7       	in	r26, 0x3d	; 61
     ca6:	be b7       	in	r27, 0x3e	; 62
     ca8:	11 96       	adiw	r26, 0x01	; 1
     caa:	fc 92       	st	X, r15
     cac:	11 97       	sbiw	r26, 0x01	; 1
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f4 e0       	ldi	r31, 0x04	; 4
     cb2:	36 c0       	rjmp	.+108    	; 0xd20 <printMap+0x218>
            else if(row == (robotX + ROBOT_DISTX) && col == robotY)
     cb4:	c2 17       	cp	r28, r18
     cb6:	d3 07       	cpc	r29, r19
     cb8:	51 f4       	brne	.+20     	; 0xcce <printMap+0x1c6>
                {rprintf(" R ");}
     cba:	00 d0       	rcall	.+0      	; 0xcbc <printMap+0x1b4>
     cbc:	0f 92       	push	r0
     cbe:	ad b7       	in	r26, 0x3d	; 61
     cc0:	be b7       	in	r27, 0x3e	; 62
     cc2:	11 96       	adiw	r26, 0x01	; 1
     cc4:	fc 92       	st	X, r15
     cc6:	11 97       	sbiw	r26, 0x01	; 1
     cc8:	e4 e2       	ldi	r30, 0x24	; 36
     cca:	f4 e0       	ldi	r31, 0x04	; 4
     ccc:	29 c0       	rjmp	.+82     	; 0xd20 <printMap+0x218>
            else if(row == (robotX + ROBOT_DISTX) && col == (robotY + ROBOT_DISTY))
     cce:	2f 5f       	subi	r18, 0xFF	; 255
     cd0:	3f 4f       	sbci	r19, 0xFF	; 255
     cd2:	c2 17       	cp	r28, r18
     cd4:	d3 07       	cpc	r29, r19
     cd6:	51 f4       	brne	.+20     	; 0xcec <printMap+0x1e4>
                {rprintf(" R ");}
     cd8:	00 d0       	rcall	.+0      	; 0xcda <printMap+0x1d2>
     cda:	0f 92       	push	r0
     cdc:	ad b7       	in	r26, 0x3d	; 61
     cde:	be b7       	in	r27, 0x3e	; 62
     ce0:	11 96       	adiw	r26, 0x01	; 1
     ce2:	fc 92       	st	X, r15
     ce4:	11 97       	sbiw	r26, 0x01	; 1
     ce6:	e0 e2       	ldi	r30, 0x20	; 32
     ce8:	f4 e0       	ldi	r31, 0x04	; 4
     cea:	1a c0       	rjmp	.+52     	; 0xd20 <printMap+0x218>
//-----------print robot block
            else if(courseMap[row][col]==WALL)
     cec:	d6 01       	movw	r26, r12
     cee:	8d 91       	ld	r24, X+
     cf0:	9c 91       	ld	r25, X
     cf2:	8e 3f       	cpi	r24, 0xFE	; 254
     cf4:	91 05       	cpc	r25, r1
     cf6:	41 f4       	brne	.+16     	; 0xd08 <printMap+0x200>
            //if the node is a wall print W instead of the number
                {rprintf("WWW");}
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <printMap+0x1f2>
     cfa:	0f 92       	push	r0
     cfc:	ed b7       	in	r30, 0x3d	; 61
     cfe:	fe b7       	in	r31, 0x3e	; 62
     d00:	f1 82       	std	Z+1, r15	; 0x01
     d02:	2c e1       	ldi	r18, 0x1C	; 28
     d04:	34 e0       	ldi	r19, 0x04	; 4
     d06:	5d cf       	rjmp	.-326    	; 0xbc2 <printMap+0xba>
            else if(courseMap[row][col]==GOAL)
     d08:	8d 3f       	cpi	r24, 0xFD	; 253
     d0a:	91 05       	cpc	r25, r1
     d0c:	71 f4       	brne	.+28     	; 0xd2a <printMap+0x222>
            //if the node is the goal print G instead of the number
                {rprintf("GGG");}
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <printMap+0x208>
     d10:	0f 92       	push	r0
     d12:	ad b7       	in	r26, 0x3d	; 61
     d14:	be b7       	in	r27, 0x3e	; 62
     d16:	11 96       	adiw	r26, 0x01	; 1
     d18:	fc 92       	st	X, r15
     d1a:	11 97       	sbiw	r26, 0x01	; 1
     d1c:	e8 e1       	ldi	r30, 0x18	; 24
     d1e:	f4 e0       	ldi	r31, 0x04	; 4
     d20:	13 96       	adiw	r26, 0x03	; 3
     d22:	fc 93       	st	X, r31
     d24:	ee 93       	st	-X, r30
     d26:	12 97       	sbiw	r26, 0x02	; 2
     d28:	4e cf       	rjmp	.-356    	; 0xbc6 <printMap+0xbe>
            else
            //otherwise print the number
                {rprintf(" %d ",courseMap[row][col]);}
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <printMap+0x224>
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <printMap+0x226>
     d2e:	0f 92       	push	r0
     d30:	ed b7       	in	r30, 0x3d	; 61
     d32:	fe b7       	in	r31, 0x3e	; 62
     d34:	31 96       	adiw	r30, 0x01	; 1
     d36:	ad b7       	in	r26, 0x3d	; 61
     d38:	be b7       	in	r27, 0x3e	; 62
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	fc 92       	st	X, r15
     d3e:	23 e1       	ldi	r18, 0x13	; 19
     d40:	34 e0       	ldi	r19, 0x04	; 4
     d42:	32 83       	std	Z+2, r19	; 0x02
     d44:	21 83       	std	Z+1, r18	; 0x01
     d46:	94 83       	std	Z+4, r25	; 0x04
     d48:	83 83       	std	Z+3, r24	; 0x03
     d4a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
    //delay_ms(100);
    //system("cls");
    for (int row=0; row < MAP_X; row++)
    //traverse MAP_X rows
    {
        for (int col=0; col < MAP_Y; col++)
     d58:	21 96       	adiw	r28, 0x01	; 1
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	c8 0e       	add	r12, r24
     d60:	d9 1e       	adc	r13, r25
     d62:	ce 31       	cpi	r28, 0x1E	; 30
     d64:	d1 05       	cpc	r29, r1
     d66:	09 f0       	breq	.+2      	; 0xd6a <printMap+0x262>
     d68:	ec ce       	rjmp	.-552    	; 0xb42 <printMap+0x3a>
                {rprintf("GGG");}
            else
            //otherwise print the number
                {rprintf(" %d ",courseMap[row][col]);}
        }
        rprintf("\n");//go to the next line since the first line is over
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <printMap+0x264>
     d6c:	0f 92       	push	r0
     d6e:	ff 24       	eor	r15, r15
     d70:	f3 94       	inc	r15
     d72:	ad b7       	in	r26, 0x3d	; 61
     d74:	be b7       	in	r27, 0x3e	; 62
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	fc 92       	st	X, r15
     d7a:	11 97       	sbiw	r26, 0x01	; 1
     d7c:	81 e1       	ldi	r24, 0x11	; 17
     d7e:	94 e0       	ldi	r25, 0x04	; 4
     d80:	13 96       	adiw	r26, 0x03	; 3
     d82:	9c 93       	st	X, r25
     d84:	8e 93       	st	-X, r24
     d86:	12 97       	sbiw	r26, 0x02	; 2
     d88:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
void printMap(int robotOrient)
//clears the map of propagated values
{
    //delay_ms(100);
    //system("cls");
    for (int row=0; row < MAP_X; row++)
     d8c:	0f 5f       	subi	r16, 0xFF	; 255
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0e 31       	cpi	r16, 0x1E	; 30
     d98:	11 05       	cpc	r17, r1
     d9a:	d1 f0       	breq	.+52     	; 0xdd0 <printMap+0x2c8>
     d9c:	8c e3       	ldi	r24, 0x3C	; 60
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	08 9f       	mul	r16, r24
     da2:	60 01       	movw	r12, r0
     da4:	09 9f       	mul	r16, r25
     da6:	d0 0c       	add	r13, r0
     da8:	18 9f       	mul	r17, r24
     daa:	d0 0c       	add	r13, r0
     dac:	11 24       	eor	r1, r1
     dae:	ea ec       	ldi	r30, 0xCA	; 202
     db0:	f3 e0       	ldi	r31, 0x03	; 3
     db2:	ce 0e       	add	r12, r30
     db4:	df 1e       	adc	r13, r31
     db6:	c0 e0       	ldi	r28, 0x00	; 0
     db8:	d0 e0       	ldi	r29, 0x00	; 0
            else if(courseMap[row][col]==GOAL)
            //if the node is the goal print G instead of the number
                {rprintf("GGG");}
            else
            //otherwise print the number
                {rprintf(" %d ",courseMap[row][col]);}
     dba:	ff 24       	eor	r15, r15
     dbc:	f3 94       	inc	r15
            //if the node is the robot print direction instead of the number
                {
                    if(robotOrient == NORTH)
                        {rprintf(" ^ ");}
                    else if(robotOrient == EAST)
                        {rprintf(" > ");}
     dbe:	58 e4       	ldi	r21, 0x48	; 72
     dc0:	65 2e       	mov	r6, r21
     dc2:	54 e0       	ldi	r21, 0x04	; 4
     dc4:	75 2e       	mov	r7, r21
        {
            if(row== robotX && col == robotY)
            //if the node is the robot print direction instead of the number
                {
                    if(robotOrient == NORTH)
                        {rprintf(" ^ ");}
     dc6:	4c e4       	ldi	r20, 0x4C	; 76
     dc8:	84 2e       	mov	r8, r20
     dca:	44 e0       	ldi	r20, 0x04	; 4
     dcc:	94 2e       	mov	r9, r20
     dce:	b9 ce       	rjmp	.-654    	; 0xb42 <printMap+0x3a>
            //otherwise print the number
                {rprintf(" %d ",courseMap[row][col]);}
        }
        rprintf("\n");//go to the next line since the first line is over
    }
    rprintf("\n");//print an empty line since the map is complete
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <printMap+0x2ca>
     dd2:	0f 92       	push	r0
     dd4:	ad b7       	in	r26, 0x3d	; 61
     dd6:	be b7       	in	r27, 0x3e	; 62
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	fc 92       	st	X, r15
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	8f e0       	ldi	r24, 0x0F	; 15
     de0:	94 e0       	ldi	r25, 0x04	; 4
     de2:	13 96       	adiw	r26, 0x03	; 3
     de4:	9c 93       	st	X, r25
     de6:	8e 93       	st	-X, r24
     de8:	12 97       	sbiw	r26, 0x02	; 2
     dea:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	df 90       	pop	r13
     e00:	cf 90       	pop	r12
     e02:	bf 90       	pop	r11
     e04:	af 90       	pop	r10
     e06:	9f 90       	pop	r9
     e08:	8f 90       	pop	r8
     e0a:	7f 90       	pop	r7
     e0c:	6f 90       	pop	r6
     e0e:	5f 90       	pop	r5
     e10:	4f 90       	pop	r4
     e12:	3f 90       	pop	r3
     e14:	2f 90       	pop	r2
     e16:	08 95       	ret

00000e18 <armTester>:
	}

}

void armTester()
{
     e18:	1f 93       	push	r17
     e1a:	11 e8       	ldi	r17, 0x81	; 129
	for(int speed = DRIVE_SPEED_MIN; speed < DRIVE_SPEED_MAX; speed++)
	{
		act_setSpeed(&left_elbow, speed);
     e1c:	82 ed       	ldi	r24, 0xD2	; 210
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	61 2f       	mov	r22, r17
     e22:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
		act_setSpeed(&left_shoulder, speed);
     e26:	86 ee       	ldi	r24, 0xE6	; 230
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	61 2f       	mov	r22, r17
     e2c:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
		act_setSpeed(&right_elbow, speed);
     e30:	8a ef       	ldi	r24, 0xFA	; 250
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	61 2f       	mov	r22, r17
     e36:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
		act_setSpeed(&right_shoulder, speed);
     e3a:	8e e0       	ldi	r24, 0x0E	; 14
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	61 2f       	mov	r22, r17
     e40:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
		delay_ms(50);
     e44:	62 e3       	ldi	r22, 0x32	; 50
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
     e50:	1f 5f       	subi	r17, 0xFF	; 255

}

void armTester()
{
	for(int speed = DRIVE_SPEED_MIN; speed < DRIVE_SPEED_MAX; speed++)
     e52:	1f 37       	cpi	r17, 0x7F	; 127
     e54:	19 f7       	brne	.-58     	; 0xe1c <armTester+0x4>
		act_setSpeed(&left_shoulder, speed);
		act_setSpeed(&right_elbow, speed);
		act_setSpeed(&right_shoulder, speed);
		delay_ms(50);
	}
}
     e56:	1f 91       	pop	r17
     e58:	08 95       	ret

00000e5a <turn_leftTime>:
	act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
	*/
}

void turn_leftTime(int turnSpeed, int timeMS)
{
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	28 2f       	mov	r18, r24
     e64:	7b 01       	movw	r14, r22
	//act_setSpeed(&wheel_left, DRIVE_SPEED_MAX - turnSpeed); //the closer the object, the faster the turning
	act_setSpeed(&wheel_right, turnSpeed);
     e66:	88 e9       	ldi	r24, 0x98	; 152
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	62 2f       	mov	r22, r18
     e6c:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>

	delay_ms(timeMS);
     e70:	00 27       	eor	r16, r16
     e72:	f7 fc       	sbrc	r15, 7
     e74:	00 95       	com	r16
     e76:	10 2f       	mov	r17, r16
     e78:	c8 01       	movw	r24, r16
     e7a:	b7 01       	movw	r22, r14
     e7c:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
}
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	08 95       	ret

00000e8a <turn_left>:

void turn_left()
{
	turn_leftTime(5, 2000);
     e8a:	85 e0       	ldi	r24, 0x05	; 5
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	60 ed       	ldi	r22, 0xD0	; 208
     e90:	77 e0       	ldi	r23, 0x07	; 7
     e92:	0e 94 2d 07 	call	0xe5a	; 0xe5a <turn_leftTime>
	}

	act_setSpeed(&wheel_left, DRIVE_SPEED_BRAKE);
	act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
	*/
}
     e96:	08 95       	ret

00000e98 <turn_rightTime>:
	act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);

}

void turn_rightTime(int turnSpeed, int timeMS)
{
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	28 2f       	mov	r18, r24
     ea2:	7b 01       	movw	r14, r22
	act_setSpeed(&wheel_left, turnSpeed); //the closer the object, the faster the turning
     ea4:	84 e8       	ldi	r24, 0x84	; 132
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	62 2f       	mov	r22, r18
     eaa:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
	//act_setSpeed(&wheel_right, DRIVE_SPEED_MAX - turnSpeed);

	delay_ms(timeMS);
     eae:	00 27       	eor	r16, r16
     eb0:	f7 fc       	sbrc	r15, 7
     eb2:	00 95       	com	r16
     eb4:	10 2f       	mov	r17, r16
     eb6:	c8 01       	movw	r24, r16
     eb8:	b7 01       	movw	r22, r14
     eba:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
}
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	08 95       	ret

00000ec8 <turn_right>:


void turn_right()
{
	turn_rightTime(5, 2000);
     ec8:	85 e0       	ldi	r24, 0x05	; 5
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	60 ed       	ldi	r22, 0xD0	; 208
     ece:	77 e0       	ldi	r23, 0x07	; 7
     ed0:	0e 94 4c 07 	call	0xe98	; 0xe98 <turn_rightTime>
	}

	act_setSpeed(&wheel_left, DRIVE_SPEED_BRAKE);
	act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
	*/
}
     ed4:	08 95       	ret

00000ed6 <turn_aroundTime>:
	*/
}


void turn_aroundTime()
{
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
	act_setSpeed(&wheel_left, DRIVE_SPEED_BRAKE);
     ede:	e4 e8       	ldi	r30, 0x84	; 132
     ee0:	ee 2e       	mov	r14, r30
     ee2:	e2 e0       	ldi	r30, 0x02	; 2
     ee4:	fe 2e       	mov	r15, r30
     ee6:	c7 01       	movw	r24, r14
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
	act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
     eee:	08 e9       	ldi	r16, 0x98	; 152
     ef0:	12 e0       	ldi	r17, 0x02	; 2
     ef2:	c8 01       	movw	r24, r16
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
	
	act_setSpeed(&wheel_left, DRIVE_SPEED_MAX/24);
     efa:	c7 01       	movw	r24, r14
     efc:	65 e0       	ldi	r22, 0x05	; 5
     efe:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
	act_setSpeed(&wheel_right, DRIVE_SPEED_MIN/24);
     f02:	c8 01       	movw	r24, r16
     f04:	6b ef       	ldi	r22, 0xFB	; 251
     f06:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>

	delay_ms(2000);
     f0a:	60 ed       	ldi	r22, 0xD0	; 208
     f0c:	77 e0       	ldi	r23, 0x07	; 7
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>

	act_setSpeed(&wheel_left, DRIVE_SPEED_BRAKE);
     f16:	c7 01       	movw	r24, r14
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
	act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
     f1e:	c8 01       	movw	r24, r16
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>

}
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	08 95       	ret

00000f30 <turn_around>:
	return zoneRight;
}

void turn_around()
{
	turn_aroundTime();
     f30:	0e 94 6b 07 	call	0xed6	; 0xed6 <turn_aroundTime>
	}

	act_setSpeed(&wheel_left, DRIVE_SPEED_BRAKE);
	act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
	*/
}
     f34:	08 95       	ret

00000f36 <scan_once>:
int objectAccum = 0;
*/


void scan_once()
{
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
	
	act_setSpeed(&ir_servo, degreeToSpeed(ir_degree));
     f40:	60 91 2d 03 	lds	r22, 0x032D
     f44:	70 91 2e 03 	lds	r23, 0x032E
     f48:	88 27       	eor	r24, r24
     f4a:	77 fd       	sbrc	r23, 7
     f4c:	80 95       	com	r24
     f4e:	98 2f       	mov	r25, r24
     f50:	2e ef       	ldi	r18, 0xFE	; 254
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
     f5c:	24 eb       	ldi	r18, 0xB4	; 180
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
     f68:	2f 57       	subi	r18, 0x7F	; 127
     f6a:	30 40       	sbci	r19, 0x00	; 0
     f6c:	40 40       	sbci	r20, 0x00	; 0
     f6e:	50 40       	sbci	r21, 0x00	; 0
     f70:	85 eb       	ldi	r24, 0xB5	; 181
     f72:	92 e0       	ldi	r25, 0x02	; 2
     f74:	62 2f       	mov	r22, r18
     f76:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
	rprintf("%d\n",ir_degree);
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <scan_once+0x46>
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <scan_once+0x48>
     f7e:	0f 92       	push	r0
     f80:	ed b7       	in	r30, 0x3d	; 61
     f82:	fe b7       	in	r31, 0x3e	; 62
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	ff 24       	eor	r15, r15
     f88:	f3 94       	inc	r15
     f8a:	ad b7       	in	r26, 0x3d	; 61
     f8c:	be b7       	in	r27, 0x3e	; 62
     f8e:	11 96       	adiw	r26, 0x01	; 1
     f90:	fc 92       	st	X, r15
     f92:	80 ee       	ldi	r24, 0xE0	; 224
     f94:	93 e0       	ldi	r25, 0x03	; 3
     f96:	92 83       	std	Z+2, r25	; 0x02
     f98:	81 83       	std	Z+1, r24	; 0x01
     f9a:	80 91 2d 03 	lds	r24, 0x032D
     f9e:	90 91 2e 03 	lds	r25, 0x032E
     fa2:	94 83       	std	Z+4, r25	; 0x04
     fa4:	83 83       	std	Z+3, r24	; 0x03
     fa6:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
	delay_ms(20);
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	64 e1       	ldi	r22, 0x14	; 20
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
	distanceRead(ir_dist);
     fc0:	8a e7       	ldi	r24, 0x7A	; 122
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_sensorRead_>

	if((ir_dist.distance.cm >= 10) && (ir_dist.distance.cm <= 80)) //if the reading is within viewable range
     fc8:	e0 91 81 02 	lds	r30, 0x0281
     fcc:	f0 91 82 02 	lds	r31, 0x0282
     fd0:	cf 01       	movw	r24, r30
     fd2:	0a 97       	sbiw	r24, 0x0a	; 10
     fd4:	87 34       	cpi	r24, 0x47	; 71
     fd6:	91 05       	cpc	r25, r1
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <scan_once+0xa6>
     fda:	4b c0       	rjmp	.+150    	; 0x1072 <scan_once+0x13c>
	{
		if(ir_degree > scan_center) //then the object is on the right side
     fdc:	00 91 2d 03 	lds	r16, 0x032D
     fe0:	10 91 2e 03 	lds	r17, 0x032E
     fe4:	c0 91 31 03 	lds	r28, 0x0331
     fe8:	d0 91 32 03 	lds	r29, 0x0332
     fec:	c0 17       	cp	r28, r16
     fee:	d1 07       	cpc	r29, r17
     ff0:	1c f4       	brge	.+6      	; 0xff8 <scan_once+0xc2>
		{
			turnLeft = 1;
     ff2:	f0 92 d7 0a 	sts	0x0AD7, r15
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <scan_once+0xcc>
			
		}
		else if (ir_degree < scan_center)//it is on the left side
     ff8:	0c 17       	cp	r16, r28
     ffa:	1d 07       	cpc	r17, r29
     ffc:	14 f4       	brge	.+4      	; 0x1002 <scan_once+0xcc>
		{
			turnRight = 1;
     ffe:	f0 92 d8 0a 	sts	0x0AD8, r15
		}
		
		turn_speed = (DRIVE_SPEED_MAX / (9 - ((90 - ir_dist.distance.cm)/10))); //the closer the object, the smaller the divisor
    1002:	8a e5       	ldi	r24, 0x5A	; 90
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	8e 1b       	sub	r24, r30
    1008:	9f 0b       	sbc	r25, r31
    100a:	6a e0       	ldi	r22, 0x0A	; 10
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    1012:	29 e0       	ldi	r18, 0x09	; 9
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	c9 01       	movw	r24, r18
    1018:	86 1b       	sub	r24, r22
    101a:	97 0b       	sbc	r25, r23
    101c:	bc 01       	movw	r22, r24
    101e:	8f e7       	ldi	r24, 0x7F	; 127
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    1026:	70 93 34 03 	sts	0x0334, r23
    102a:	60 93 33 03 	sts	0x0333, r22
		
		speed = (DRIVE_SPEED_MAX / (9 - (ir_dist.distance.cm/10)));
    102e:	cf 01       	movw	r24, r30
    1030:	6a e0       	ldi	r22, 0x0A	; 10
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    1038:	26 1b       	sub	r18, r22
    103a:	37 0b       	sbc	r19, r23
    103c:	8f e7       	ldi	r24, 0x7F	; 127
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	b9 01       	movw	r22, r18
    1042:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    1046:	70 93 d4 0a 	sts	0x0AD4, r23
    104a:	60 93 d3 0a 	sts	0x0AD3, r22
		turn_timeMS = 1000/(abs(scan_center - ir_degree) + 1); //the more in front of the robot the object is, the longer the turn
    104e:	be 01       	movw	r22, r28
    1050:	60 1b       	sub	r22, r16
    1052:	71 0b       	sbc	r23, r17
    1054:	77 ff       	sbrs	r23, 7
    1056:	03 c0       	rjmp	.+6      	; 0x105e <scan_once+0x128>
    1058:	70 95       	com	r23
    105a:	61 95       	neg	r22
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	6f 5f       	subi	r22, 0xFF	; 255
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	88 ee       	ldi	r24, 0xE8	; 232
    1064:	93 e0       	ldi	r25, 0x03	; 3
    1066:	0e 94 1b 30 	call	0x6036	; 0x6036 <__divmodhi4>
    106a:	70 93 d6 0a 	sts	0x0AD6, r23
    106e:	60 93 d5 0a 	sts	0x0AD5, r22
        
	}
	

	//update next positon
	if(ir_degree > scan_center + scan_width)
    1072:	40 91 2d 03 	lds	r20, 0x032D
    1076:	50 91 2e 03 	lds	r21, 0x032E
    107a:	20 91 31 03 	lds	r18, 0x0331
    107e:	30 91 32 03 	lds	r19, 0x0332
    1082:	60 91 2f 03 	lds	r22, 0x032F
    1086:	70 91 30 03 	lds	r23, 0x0330
    108a:	cb 01       	movw	r24, r22
    108c:	82 0f       	add	r24, r18
    108e:	93 1f       	adc	r25, r19
    1090:	84 17       	cp	r24, r20
    1092:	95 07       	cpc	r25, r21
    1094:	24 f4       	brge	.+8      	; 0x109e <scan_once+0x168>
	{
		scan_dir = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 d2 0a 	sts	0x0AD2, r24
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <scan_once+0x176>
	
	}
	else if(ir_degree < scan_center - scan_width)
    109e:	26 1b       	sub	r18, r22
    10a0:	37 0b       	sbc	r19, r23
    10a2:	42 17       	cp	r20, r18
    10a4:	53 07       	cpc	r21, r19
    10a6:	14 f4       	brge	.+4      	; 0x10ac <scan_once+0x176>
	{
		scan_dir = 0;
    10a8:	10 92 d2 0a 	sts	0x0AD2, r1
		
	}

	if(scan_dir == 0)
    10ac:	80 91 d2 0a 	lds	r24, 0x0AD2
    10b0:	88 23       	and	r24, r24
    10b2:	19 f4       	brne	.+6      	; 0x10ba <scan_once+0x184>
	{
		ir_degree = ir_degree + 10;
    10b4:	46 5f       	subi	r20, 0xF6	; 246
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <scan_once+0x188>
	}
	else
	{
		ir_degree = ir_degree - 10;
    10ba:	4a 50       	subi	r20, 0x0A	; 10
    10bc:	50 40       	sbci	r21, 0x00	; 0
    10be:	50 93 2e 03 	sts	0x032E, r21
    10c2:	40 93 2d 03 	sts	0x032D, r20
	}

	
}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	08 95       	ret

000010d2 <driveVel>:
	}

}

void driveVel()
{
    10d2:	6f 92       	push	r6
    10d4:	7f 92       	push	r7
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29

	rprintf("\n\n\n\n\n");
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <driveVel+0x1c>
    10ee:	0f 92       	push	r0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	ad b7       	in	r26, 0x3d	; 61
    10f4:	be b7       	in	r27, 0x3e	; 62
    10f6:	11 96       	adiw	r26, 0x01	; 1
    10f8:	8c 93       	st	X, r24
    10fa:	11 97       	sbiw	r26, 0x01	; 1
    10fc:	80 ef       	ldi	r24, 0xF0	; 240
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	13 96       	adiw	r26, 0x03	; 3
    1102:	9c 93       	st	X, r25
    1104:	8e 93       	st	-X, r24
    1106:	12 97       	sbiw	r26, 0x02	; 2
    1108:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
    110c:	c1 e8       	ldi	r28, 0x81	; 129
    110e:	df ef       	ldi	r29, 0xFF	; 255
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
	{

    	act_setSpeed(&wheel_right,y);
		act_setSpeed(&wheel_left,0);

      	rprintfu32(clockGetus()); rprintf(",");
    1116:	11 e0       	ldi	r17, 0x01	; 1
    1118:	9e ee       	ldi	r25, 0xEE	; 238
    111a:	69 2e       	mov	r6, r25
    111c:	93 e0       	ldi	r25, 0x03	; 3
    111e:	79 2e       	mov	r7, r25

    	rprintf("%d,",y);
    1120:	8a ee       	ldi	r24, 0xEA	; 234
    1122:	88 2e       	mov	r8, r24
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	98 2e       	mov	r9, r24

    	encoderRead(quad_right);
    	encoderDump(quad_right);rprintf(",");
    1128:	b8 ee       	ldi	r27, 0xE8	; 232
    112a:	ab 2e       	mov	r10, r27
    112c:	b3 e0       	ldi	r27, 0x03	; 3
    112e:	bb 2e       	mov	r11, r27

    	delay_ms(1000);

    	rprintfu32(clockGetus()); rprintf(",");
    1130:	a6 ee       	ldi	r26, 0xE6	; 230
    1132:	ca 2e       	mov	r12, r26
    1134:	a3 e0       	ldi	r26, 0x03	; 3
    1136:	da 2e       	mov	r13, r26

	
    	encoderRead(quad_right);
    	encoderDump(quad_right);rprintf("\n");
    1138:	f4 ee       	ldi	r31, 0xE4	; 228
    113a:	ef 2e       	mov	r14, r31
    113c:	f3 e0       	ldi	r31, 0x03	; 3
    113e:	ff 2e       	mov	r15, r31
*/
	for(int y = -127; y < 127; y++)

	{

    	act_setSpeed(&wheel_right,y);
    1140:	88 e9       	ldi	r24, 0x98	; 152
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	6c 2f       	mov	r22, r28
    1146:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
		act_setSpeed(&wheel_left,0);
    114a:	84 e8       	ldi	r24, 0x84	; 132
    114c:	92 e0       	ldi	r25, 0x02	; 2
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>

      	rprintfu32(clockGetus()); rprintf(",");
    1154:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <clockGetus>
    1158:	0e 94 49 1c 	call	0x3892	; 0x3892 <rprintfu32>
    115c:	00 d0       	rcall	.+0      	; 0x115e <driveVel+0x8c>
    115e:	0f 92       	push	r0
    1160:	ed b7       	in	r30, 0x3d	; 61
    1162:	fe b7       	in	r31, 0x3e	; 62
    1164:	11 83       	std	Z+1, r17	; 0x01
    1166:	73 82       	std	Z+3, r7	; 0x03
    1168:	62 82       	std	Z+2, r6	; 0x02
    116a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>

    	rprintf("%d,",y);
    116e:	00 d0       	rcall	.+0      	; 0x1170 <driveVel+0x9e>
    1170:	ed b7       	in	r30, 0x3d	; 61
    1172:	fe b7       	in	r31, 0x3e	; 62
    1174:	31 96       	adiw	r30, 0x01	; 1
    1176:	ad b7       	in	r26, 0x3d	; 61
    1178:	be b7       	in	r27, 0x3e	; 62
    117a:	11 96       	adiw	r26, 0x01	; 1
    117c:	1c 93       	st	X, r17
    117e:	92 82       	std	Z+2, r9	; 0x02
    1180:	81 82       	std	Z+1, r8	; 0x01
    1182:	d4 83       	std	Z+4, r29	; 0x04
    1184:	c3 83       	std	Z+3, r28	; 0x03
    1186:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>

    	encoderRead(quad_right);
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	89 e6       	ldi	r24, 0x69	; 105
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_sensorRead_>
    	encoderDump(quad_right);rprintf(",");
    119c:	89 e6       	ldi	r24, 0x69	; 105
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_encoderDump>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <driveVel+0xd4>
    11a6:	0f 92       	push	r0
    11a8:	ed b7       	in	r30, 0x3d	; 61
    11aa:	fe b7       	in	r31, 0x3e	; 62
    11ac:	11 83       	std	Z+1, r17	; 0x01
    11ae:	b3 82       	std	Z+3, r11	; 0x03
    11b0:	a2 82       	std	Z+2, r10	; 0x02
    11b2:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>

    	delay_ms(1000);
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	68 ee       	ldi	r22, 0xE8	; 232
    11be:	73 e0       	ldi	r23, 0x03	; 3
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>

    	rprintfu32(clockGetus()); rprintf(",");
    11c8:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <clockGetus>
    11cc:	0e 94 49 1c 	call	0x3892	; 0x3892 <rprintfu32>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <driveVel+0x100>
    11d2:	0f 92       	push	r0
    11d4:	ad b7       	in	r26, 0x3d	; 61
    11d6:	be b7       	in	r27, 0x3e	; 62
    11d8:	11 96       	adiw	r26, 0x01	; 1
    11da:	1c 93       	st	X, r17
    11dc:	11 97       	sbiw	r26, 0x01	; 1
    11de:	13 96       	adiw	r26, 0x03	; 3
    11e0:	dc 92       	st	X, r13
    11e2:	ce 92       	st	-X, r12
    11e4:	12 97       	sbiw	r26, 0x02	; 2
    11e6:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>

	
    	encoderRead(quad_right);
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	89 e6       	ldi	r24, 0x69	; 105
    11f2:	92 e0       	ldi	r25, 0x02	; 2
    11f4:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_sensorRead_>
    	encoderDump(quad_right);rprintf("\n");
    11f8:	89 e6       	ldi	r24, 0x69	; 105
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_encoderDump>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <driveVel+0x130>
    1202:	0f 92       	push	r0
    1204:	ed b7       	in	r30, 0x3d	; 61
    1206:	fe b7       	in	r31, 0x3e	; 62
    1208:	11 83       	std	Z+1, r17	; 0x01
    120a:	f3 82       	std	Z+3, r15	; 0x03
    120c:	e2 82       	std	Z+2, r14	; 0x02
    120e:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
    	encoderRead(quad_left);
    	encoderDump(quad_left);rprintf("\n");

	}
*/
	for(int y = -127; y < 127; y++)
    1212:	21 96       	adiw	r28, 0x01	; 1
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 37       	cpi	r28, 0x7F	; 127
    121c:	d1 05       	cpc	r29, r1
    121e:	09 f0       	breq	.+2      	; 0x1222 <driveVel+0x150>
    1220:	8f cf       	rjmp	.-226    	; 0x1140 <driveVel+0x6e>
    encoderDump(quad_left);

    */


}
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	9f 90       	pop	r9
    1236:	8f 90       	pop	r8
    1238:	7f 90       	pop	r7
    123a:	6f 90       	pop	r6
    123c:	08 95       	ret

0000123e <scanAndDrive>:
  }
}


void scanAndDrive()
{
    123e:	7f 92       	push	r7
    1240:	8f 92       	push	r8
    1242:	9f 92       	push	r9
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	88 24       	eor	r8, r8
    125a:	99 24       	eor	r9, r9
    125c:	54 01       	movw	r10, r8
    125e:	cc 24       	eor	r12, r12
    1260:	dd 24       	eor	r13, r13
    1262:	76 01       	movw	r14, r12
		act_setSpeed(&ir_servo, degreeToSpeed(degree));

		if((ir_dist.distance.cm >= 10) && (ir_dist.distance.cm <= 80))
		{
			distanceDump(ir_dist);
			rprintf("DEGREE:%d COS:%d SIN:%d\n", degree, cos_SoR(degree), ABS(sin_SoR(degree)));
    1264:	77 24       	eor	r7, r7
    1266:	73 94       	inc	r7
    1268:	c6 ef       	ldi	r28, 0xF6	; 246
    126a:	d3 e0       	ldi	r29, 0x03	; 3

void scanAndDrive()
{
	for(int degree = 0; degree < 180; degree+= 10)
	{
		distanceRead(ir_dist);
    126c:	8a e7       	ldi	r24, 0x7A	; 122
    126e:	92 e0       	ldi	r25, 0x02	; 2
    1270:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_sensorRead_>
		act_setSpeed(&ir_servo, degreeToSpeed(degree));
    1274:	c5 01       	movw	r24, r10
    1276:	b4 01       	movw	r22, r8
    1278:	24 eb       	ldi	r18, 0xB4	; 180
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
    1284:	2f 57       	subi	r18, 0x7F	; 127
    1286:	30 40       	sbci	r19, 0x00	; 0
    1288:	40 40       	sbci	r20, 0x00	; 0
    128a:	50 40       	sbci	r21, 0x00	; 0
    128c:	85 eb       	ldi	r24, 0xB5	; 181
    128e:	92 e0       	ldi	r25, 0x02	; 2
    1290:	62 2f       	mov	r22, r18
    1292:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>

		if((ir_dist.distance.cm >= 10) && (ir_dist.distance.cm <= 80))
    1296:	80 91 81 02 	lds	r24, 0x0281
    129a:	90 91 82 02 	lds	r25, 0x0282
    129e:	0a 97       	sbiw	r24, 0x0a	; 10
    12a0:	87 34       	cpi	r24, 0x47	; 71
    12a2:	91 05       	cpc	r25, r1
    12a4:	a8 f5       	brcc	.+106    	; 0x1310 <scanAndDrive+0xd2>
		{
			distanceDump(ir_dist);
    12a6:	8a e7       	ldi	r24, 0x7A	; 122
    12a8:	92 e0       	ldi	r25, 0x02	; 2
    12aa:	0e 94 85 14 	call	0x290a	; 0x290a <_distanceDump>
			rprintf("DEGREE:%d COS:%d SIN:%d\n", degree, cos_SoR(degree), ABS(sin_SoR(degree)));
    12ae:	b6 01       	movw	r22, r12
    12b0:	c7 01       	movw	r24, r14
    12b2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <cos_SoR>
    12b6:	8c 01       	movw	r16, r24
    12b8:	b6 01       	movw	r22, r12
    12ba:	c7 01       	movw	r24, r14
    12bc:	0e 94 11 03 	call	0x622	; 0x622 <sin_SoR>
    12c0:	2d b7       	in	r18, 0x3d	; 61
    12c2:	3e b7       	in	r19, 0x3e	; 62
    12c4:	29 50       	subi	r18, 0x09	; 9
    12c6:	30 40       	sbci	r19, 0x00	; 0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	3e bf       	out	0x3e, r19	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	2d bf       	out	0x3d, r18	; 61
    12d2:	ed b7       	in	r30, 0x3d	; 61
    12d4:	fe b7       	in	r31, 0x3e	; 62
    12d6:	31 96       	adiw	r30, 0x01	; 1
    12d8:	ad b7       	in	r26, 0x3d	; 61
    12da:	be b7       	in	r27, 0x3e	; 62
    12dc:	11 96       	adiw	r26, 0x01	; 1
    12de:	7c 92       	st	X, r7
    12e0:	d2 83       	std	Z+2, r29	; 0x02
    12e2:	c1 83       	std	Z+1, r28	; 0x01
    12e4:	d4 82       	std	Z+4, r13	; 0x04
    12e6:	c3 82       	std	Z+3, r12	; 0x03
    12e8:	16 83       	std	Z+6, r17	; 0x06
    12ea:	05 83       	std	Z+5, r16	; 0x05
    12ec:	97 ff       	sbrs	r25, 7
    12ee:	03 c0       	rjmp	.+6      	; 0x12f6 <scanAndDrive+0xb8>
    12f0:	90 95       	com	r25
    12f2:	81 95       	neg	r24
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	90 87       	std	Z+8, r25	; 0x08
    12f8:	87 83       	std	Z+7, r24	; 0x07
    12fa:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
    12fe:	2d b7       	in	r18, 0x3d	; 61
    1300:	3e b7       	in	r19, 0x3e	; 62
    1302:	27 5f       	subi	r18, 0xF7	; 247
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	3e bf       	out	0x3e, r19	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	2d bf       	out	0x3d, r18	; 61
		}
		
		
		delay_ms(100);
    1310:	64 e6       	ldi	r22, 0x64	; 100
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
    131c:	8c ee       	ldi	r24, 0xEC	; 236
    131e:	99 e0       	ldi	r25, 0x09	; 9
    1320:	a0 e0       	ldi	r26, 0x00	; 0
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	88 0e       	add	r8, r24
    1326:	99 1e       	adc	r9, r25
    1328:	aa 1e       	adc	r10, r26
    132a:	bb 1e       	adc	r11, r27
    132c:	8a e0       	ldi	r24, 0x0A	; 10
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a0 e0       	ldi	r26, 0x00	; 0
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	c8 0e       	add	r12, r24
    1336:	d9 1e       	adc	r13, r25
    1338:	ea 1e       	adc	r14, r26
    133a:	fb 1e       	adc	r15, r27
}


void scanAndDrive()
{
	for(int degree = 0; degree < 180; degree+= 10)
    133c:	98 e9       	ldi	r25, 0x98	; 152
    133e:	89 16       	cp	r8, r25
    1340:	92 eb       	ldi	r25, 0xB2	; 178
    1342:	99 06       	cpc	r9, r25
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a9 06       	cpc	r10, r25
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	b9 06       	cpc	r11, r25
    134c:	09 f0       	breq	.+2      	; 0x1350 <scanAndDrive+0x112>
    134e:	8e cf       	rjmp	.-228    	; 0x126c <scanAndDrive+0x2e>
		
		delay_ms(100);
		
	}

}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	df 90       	pop	r13
    135e:	cf 90       	pop	r12
    1360:	bf 90       	pop	r11
    1362:	af 90       	pop	r10
    1364:	9f 90       	pop	r9
    1366:	8f 90       	pop	r8
    1368:	7f 90       	pop	r7
    136a:	08 95       	ret

0000136c <update_map_ir>:
{
	return ((degree * (DRIVE_SPEED_MAX - DRIVE_SPEED_MIN))/180) + DRIVE_SPEED_MIN;
}

void update_map_ir(short startAngle, short endAngle)
{
    136c:	2f 92       	push	r2
    136e:	3f 92       	push	r3
    1370:	4f 92       	push	r4
    1372:	5f 92       	push	r5
    1374:	6f 92       	push	r6
    1376:	7f 92       	push	r7
    1378:	8f 92       	push	r8
    137a:	9f 92       	push	r9
    137c:	af 92       	push	r10
    137e:	bf 92       	push	r11
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	62 97       	sbiw	r28, 0x12	; 18
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	78 87       	std	Y+8, r23	; 0x08
    13a6:	6f 83       	std	Y+7, r22	; 0x07



signed long int degreeToSpeed(signed long int degree)
{
	return ((degree * (DRIVE_SPEED_MAX - DRIVE_SPEED_MIN))/180) + DRIVE_SPEED_MIN;
    13a8:	7c 01       	movw	r14, r24
    13aa:	00 27       	eor	r16, r16
    13ac:	f7 fc       	sbrc	r15, 7
    13ae:	00 95       	com	r16
    13b0:	10 2f       	mov	r17, r16
    13b2:	c8 01       	movw	r24, r16
    13b4:	b7 01       	movw	r22, r14
    13b6:	2e ef       	ldi	r18, 0xFE	; 254
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    13c2:	d6 2e       	mov	r13, r22
    13c4:	c7 2e       	mov	r12, r23
    13c6:	b8 2e       	mov	r11, r24
    13c8:	a9 2e       	mov	r10, r25
{
    int wallRow;
    int wallCol;
	short zone0 = 0;
	 
    act_setSpeed(&ir_servo, degreeToSpeed(startAngle));
    13ca:	24 eb       	ldi	r18, 0xB4	; 180
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
    13d6:	2f 57       	subi	r18, 0x7F	; 127
    13d8:	30 40       	sbci	r19, 0x00	; 0
    13da:	40 40       	sbci	r20, 0x00	; 0
    13dc:	50 40       	sbci	r21, 0x00	; 0
    13de:	85 eb       	ldi	r24, 0xB5	; 181
    13e0:	92 e0       	ldi	r25, 0x02	; 2
    13e2:	62 2f       	mov	r22, r18
    13e4:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
	delay_ms(20);
    13e8:	64 e1       	ldi	r22, 0x14	; 20
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
    13f4:	2d 2d       	mov	r18, r13
    13f6:	3c 2d       	mov	r19, r12
    13f8:	4b 2d       	mov	r20, r11
    13fa:	5a 2d       	mov	r21, r10
    13fc:	c9 01       	movw	r24, r18
    13fe:	da 01       	movw	r26, r20
    1400:	1c 01       	movw	r2, r24
    1402:	2d 01       	movw	r4, r26
    1404:	2d 81       	ldd	r18, Y+5	; 0x05
    1406:	3e 81       	ldd	r19, Y+6	; 0x06
    1408:	3c 83       	std	Y+4, r19	; 0x04
    140a:	2b 83       	std	Y+3, r18	; 0x03
    140c:	66 24       	eor	r6, r6
    140e:	77 24       	eor	r7, r7
    1410:	43 01       	movw	r8, r6

    for(int currentAngle = startAngle; currentAngle <= endAngle; currentAngle += 5)
    { 
        distanceRead(ir_dist);
    1412:	ed 86       	std	Y+13, r14	; 0x0d
    1414:	fe 86       	std	Y+14, r15	; 0x0e
    1416:	0f 87       	std	Y+15, r16	; 0x0f
    1418:	18 8b       	std	Y+16, r17	; 0x10
    141a:	2d c1       	rjmp	.+602    	; 0x1676 <update_map_ir+0x30a>
    141c:	8a e7       	ldi	r24, 0x7A	; 122
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_sensorRead_>
    1424:	ed 84       	ldd	r14, Y+13	; 0x0d
    1426:	fe 84       	ldd	r15, Y+14	; 0x0e
    1428:	0f 85       	ldd	r16, Y+15	; 0x0f
    142a:	18 89       	ldd	r17, Y+16	; 0x10
    142c:	e6 0c       	add	r14, r6
    142e:	f7 1c       	adc	r15, r7
    1430:	08 1d       	adc	r16, r8
    1432:	19 1d       	adc	r17, r9
		act_setSpeed(&ir_servo, degreeToSpeed(currentAngle));
    1434:	c2 01       	movw	r24, r4
    1436:	b1 01       	movw	r22, r2
    1438:	24 eb       	ldi	r18, 0xB4	; 180
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
    1444:	2f 57       	subi	r18, 0x7F	; 127
    1446:	30 40       	sbci	r19, 0x00	; 0
    1448:	40 40       	sbci	r20, 0x00	; 0
    144a:	50 40       	sbci	r21, 0x00	; 0
    144c:	85 eb       	ldi	r24, 0xB5	; 181
    144e:	92 e0       	ldi	r25, 0x02	; 2
    1450:	62 2f       	mov	r22, r18
    1452:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>

		if((ir_dist.distance.cm >= 10) && (ir_dist.distance.cm <= 80))
    1456:	60 91 81 02 	lds	r22, 0x0281
    145a:	70 91 82 02 	lds	r23, 0x0282
    145e:	cb 01       	movw	r24, r22
    1460:	0a 97       	sbiw	r24, 0x0a	; 10
    1462:	87 34       	cpi	r24, 0x47	; 71
    1464:	91 05       	cpc	r25, r1
    1466:	08 f0       	brcs	.+2      	; 0x146a <update_map_ir+0xfe>
    1468:	a6 c0       	rjmp	.+332    	; 0x15b6 <update_map_ir+0x24a>
		{
        	

        	wallCol = ((ir_dist.distance.cm/5.0) * (cos_SoR(currentAngle)))/100;
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <__floatunsisf>
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 ea       	ldi	r20, 0xA0	; 160
    1478:	50 e4       	ldi	r21, 0x40	; 64
    147a:	0e 94 92 2c 	call	0x5924	; 0x5924 <__divsf3>
    147e:	5b 01       	movw	r10, r22
    1480:	6c 01       	movw	r12, r24
    1482:	c8 01       	movw	r24, r16
    1484:	b7 01       	movw	r22, r14
    1486:	0e 94 e6 02 	call	0x5cc	; 0x5cc <cos_SoR>
    148a:	aa 27       	eor	r26, r26
    148c:	97 fd       	sbrc	r25, 7
    148e:	a0 95       	com	r26
    1490:	ba 2f       	mov	r27, r26
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__floatsisf>
    149a:	9b 01       	movw	r18, r22
    149c:	ac 01       	movw	r20, r24
    149e:	c6 01       	movw	r24, r12
    14a0:	b5 01       	movw	r22, r10
    14a2:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <__mulsf3>
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	48 ec       	ldi	r20, 0xC8	; 200
    14ac:	52 e4       	ldi	r21, 0x42	; 66
    14ae:	0e 94 92 2c 	call	0x5924	; 0x5924 <__divsf3>
    14b2:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__fixsfsi>
    14b6:	7a 8b       	std	Y+18, r23	; 0x12
    14b8:	69 8b       	std	Y+17, r22	; 0x11
        	wallRow = ((ir_dist.distance.cm/5.0) * (ABS(sin_SoR(currentAngle))))/100;
    14ba:	c8 01       	movw	r24, r16
    14bc:	b7 01       	movw	r22, r14
    14be:	0e 94 11 03 	call	0x622	; 0x622 <sin_SoR>
    14c2:	9c 01       	movw	r18, r24
    14c4:	18 16       	cp	r1, r24
    14c6:	19 06       	cpc	r1, r25
    14c8:	34 f4       	brge	.+12     	; 0x14d6 <update_map_ir+0x16a>
    14ca:	b9 01       	movw	r22, r18
    14cc:	88 27       	eor	r24, r24
    14ce:	77 fd       	sbrc	r23, 7
    14d0:	80 95       	com	r24
    14d2:	98 2f       	mov	r25, r24
    14d4:	08 c0       	rjmp	.+16     	; 0x14e6 <update_map_ir+0x17a>
    14d6:	66 27       	eor	r22, r22
    14d8:	77 27       	eor	r23, r23
    14da:	68 1b       	sub	r22, r24
    14dc:	79 0b       	sbc	r23, r25
    14de:	88 27       	eor	r24, r24
    14e0:	77 fd       	sbrc	r23, 7
    14e2:	80 95       	com	r24
    14e4:	98 2f       	mov	r25, r24
    14e6:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__floatsisf>
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	c6 01       	movw	r24, r12
    14f0:	b5 01       	movw	r22, r10
    14f2:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <__mulsf3>
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	48 ec       	ldi	r20, 0xC8	; 200
    14fc:	52 e4       	ldi	r21, 0x42	; 66
    14fe:	0e 94 92 2c 	call	0x5924	; 0x5924 <__divsf3>
    1502:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__fixsfsi>
    1506:	9b 01       	movw	r18, r22
        	courseMap[robotX + wallRow][robotY + wallCol] = WALL;
    1508:	50 91 2c 03 	lds	r21, 0x032C
    150c:	40 91 2b 03 	lds	r20, 0x032B
    1510:	24 0f       	add	r18, r20
    1512:	31 1d       	adc	r19, r1
    1514:	f9 01       	movw	r30, r18
    1516:	15 e0       	ldi	r17, 0x05	; 5
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	1a 95       	dec	r17
    151e:	e1 f7       	brne	.-8      	; 0x1518 <update_map_ir+0x1ac>
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	e2 1b       	sub	r30, r18
    1526:	f3 0b       	sbc	r31, r19
    1528:	a9 89       	ldd	r26, Y+17	; 0x11
    152a:	ba 89       	ldd	r27, Y+18	; 0x12
    152c:	ea 0f       	add	r30, r26
    152e:	fb 1f       	adc	r31, r27
    1530:	e5 0f       	add	r30, r21
    1532:	f1 1d       	adc	r31, r1
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	e6 53       	subi	r30, 0x36	; 54
    153a:	fc 4f       	sbci	r31, 0xFC	; 252
    153c:	2e ef       	ldi	r18, 0xFE	; 254
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	31 83       	std	Z+1, r19	; 0x01
    1542:	20 83       	st	Z, r18
        	rprintf("wallCol: %d\twallRow: %d\tangle: %d",wallCol,wallRow,currentAngle); distanceDump(ir_dist);rprintf("\n");
    1544:	ad b7       	in	r26, 0x3d	; 61
    1546:	be b7       	in	r27, 0x3e	; 62
    1548:	19 97       	sbiw	r26, 0x09	; 9
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	be bf       	out	0x3e, r27	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	ad bf       	out	0x3d, r26	; 61
    1554:	ed b7       	in	r30, 0x3d	; 61
    1556:	fe b7       	in	r31, 0x3e	; 62
    1558:	31 96       	adiw	r30, 0x01	; 1
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	11 96       	adiw	r26, 0x01	; 1
    155e:	2c 93       	st	X, r18
    1560:	a6 e7       	ldi	r26, 0x76	; 118
    1562:	b4 e0       	ldi	r27, 0x04	; 4
    1564:	b2 83       	std	Z+2, r27	; 0x02
    1566:	a1 83       	std	Z+1, r26	; 0x01
    1568:	29 89       	ldd	r18, Y+17	; 0x11
    156a:	3a 89       	ldd	r19, Y+18	; 0x12
    156c:	34 83       	std	Z+4, r19	; 0x04
    156e:	23 83       	std	Z+3, r18	; 0x03
    1570:	76 83       	std	Z+6, r23	; 0x06
    1572:	65 83       	std	Z+5, r22	; 0x05
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	90 87       	std	Z+8, r25	; 0x08
    157a:	87 83       	std	Z+7, r24	; 0x07
    157c:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
    1580:	ad b7       	in	r26, 0x3d	; 61
    1582:	be b7       	in	r27, 0x3e	; 62
    1584:	19 96       	adiw	r26, 0x09	; 9
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	be bf       	out	0x3e, r27	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	ad bf       	out	0x3d, r26	; 61
    1590:	8a e7       	ldi	r24, 0x7A	; 122
    1592:	92 e0       	ldi	r25, 0x02	; 2
    1594:	0e 94 85 14 	call	0x290a	; 0x290a <_distanceDump>
    1598:	00 d0       	rcall	.+0      	; 0x159a <update_map_ir+0x22e>
    159a:	0f 92       	push	r0
    159c:	21 e0       	ldi	r18, 0x01	; 1
    159e:	ed b7       	in	r30, 0x3d	; 61
    15a0:	fe b7       	in	r31, 0x3e	; 62
    15a2:	21 83       	std	Z+1, r18	; 0x01
    15a4:	84 e7       	ldi	r24, 0x74	; 116
    15a6:	94 e0       	ldi	r25, 0x04	; 4
    15a8:	93 83       	std	Z+3, r25	; 0x03
    15aa:	82 83       	std	Z+2, r24	; 0x02
    15ac:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
	{
		for(short zon0col = 0; zon0col < 3; zon0col++)
		{
			zone0 += courseMap[robotX + (zon0row + ROBOT_DISTX + 1)][robotY + (zon0col - 1)];
    15b6:	40 91 2b 03 	lds	r20, 0x032B
    15ba:	20 91 2c 03 	lds	r18, 0x032C
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	84 2f       	mov	r24, r20
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 96       	adiw	r24, 0x02	; 2
    15c6:	fc 01       	movw	r30, r24
    15c8:	65 e0       	ldi	r22, 0x05	; 5
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	6a 95       	dec	r22
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <update_map_ir+0x25e>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	e8 1b       	sub	r30, r24
    15d8:	f9 0b       	sbc	r31, r25
    15da:	e2 0f       	add	r30, r18
    15dc:	f3 1f       	adc	r31, r19
    15de:	e1 50       	subi	r30, 0x01	; 1
    15e0:	f0 40       	sbci	r31, 0x00	; 0
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	e6 53       	subi	r30, 0x36	; 54
    15e8:	fc 4f       	sbci	r31, 0xFC	; 252
    15ea:	a0 e0       	ldi	r26, 0x00	; 0
    15ec:	b0 e0       	ldi	r27, 0x00	; 0

int isAnythingZone0()
{//zone 0 is a 3 row by 5 col block directly if front
	int zone0 = 0;
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
    15ee:	b9 01       	movw	r22, r18
    15f0:	6f 52       	subi	r22, 0x2F	; 47
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	9e e1       	ldi	r25, 0x1E	; 30
    15f6:	49 9f       	mul	r20, r25
    15f8:	a0 01       	movw	r20, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	64 0f       	add	r22, r20
    15fe:	75 1f       	adc	r23, r21
    1600:	66 0f       	add	r22, r22
    1602:	77 1f       	adc	r23, r23
    1604:	66 53       	subi	r22, 0x36	; 54
    1606:	7c 4f       	sbci	r23, 0xFC	; 252
	{
		for(short zon0col = 0; zon0col < 3; zon0col++)
		{
			zone0 += courseMap[robotX + (zon0row + ROBOT_DISTX + 1)][robotY + (zon0col - 1)];
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	22 81       	ldd	r18, Z+2	; 0x02
    160e:	33 81       	ldd	r19, Z+3	; 0x03
    1610:	82 0f       	add	r24, r18
    1612:	93 1f       	adc	r25, r19
    1614:	a8 0f       	add	r26, r24
    1616:	b9 1f       	adc	r27, r25
    1618:	84 81       	ldd	r24, Z+4	; 0x04
    161a:	95 81       	ldd	r25, Z+5	; 0x05
    161c:	a8 0f       	add	r26, r24
    161e:	b9 1f       	adc	r27, r25
    1620:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone0()
{//zone 0 is a 3 row by 5 col block directly if front
	int zone0 = 0;
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
    1622:	e6 17       	cp	r30, r22
    1624:	f7 07       	cpc	r31, r23
    1626:	81 f7       	brne	.-32     	; 0x1608 <update_map_ir+0x29c>
        	wallRow = ((ir_dist.distance.cm/5.0) * (ABS(sin_SoR(currentAngle))))/100;
        	courseMap[robotX + wallRow][robotY + wallCol] = WALL;
        	rprintf("wallCol: %d\twallRow: %d\tangle: %d",wallCol,wallRow,currentAngle); distanceDump(ir_dist);rprintf("\n");
		}
		zone0 = isAnythingZone0();
		if(zone0 !=0)
    1628:	ab 2b       	or	r26, r27
    162a:	51 f0       	breq	.+20     	; 0x1640 <update_map_ir+0x2d4>
		{
			act_setSpeed(&wheel_left, DRIVE_SPEED_BRAKE);
    162c:	84 e8       	ldi	r24, 0x84	; 132
    162e:	92 e0       	ldi	r25, 0x02	; 2
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
			act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
    1636:	88 e9       	ldi	r24, 0x98	; 152
    1638:	92 e0       	ldi	r25, 0x02	; 2
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
		}
		delay_ms(20);
    1640:	64 e1       	ldi	r22, 0x14	; 20
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
	short zone0 = 0;
	 
    act_setSpeed(&ir_servo, degreeToSpeed(startAngle));
	delay_ms(20);

    for(int currentAngle = startAngle; currentAngle <= endAngle; currentAngle += 5)
    164c:	ab 81       	ldd	r26, Y+3	; 0x03
    164e:	bc 81       	ldd	r27, Y+4	; 0x04
    1650:	15 96       	adiw	r26, 0x05	; 5
    1652:	bc 83       	std	Y+4, r27	; 0x04
    1654:	ab 83       	std	Y+3, r26	; 0x03
    1656:	86 ef       	ldi	r24, 0xF6	; 246
    1658:	94 e0       	ldi	r25, 0x04	; 4
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	28 0e       	add	r2, r24
    1660:	39 1e       	adc	r3, r25
    1662:	4a 1e       	adc	r4, r26
    1664:	5b 1e       	adc	r5, r27
    1666:	85 e0       	ldi	r24, 0x05	; 5
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	68 0e       	add	r6, r24
    1670:	79 1e       	adc	r7, r25
    1672:	8a 1e       	adc	r8, r26
    1674:	9b 1e       	adc	r9, r27
    1676:	ab 81       	ldd	r26, Y+3	; 0x03
    1678:	bc 81       	ldd	r27, Y+4	; 0x04
    167a:	ef 81       	ldd	r30, Y+7	; 0x07
    167c:	f8 85       	ldd	r31, Y+8	; 0x08
    167e:	ea 17       	cp	r30, r26
    1680:	fb 07       	cpc	r31, r27
    1682:	0c f0       	brlt	.+2      	; 0x1686 <update_map_ir+0x31a>
    1684:	cb ce       	rjmp	.-618    	; 0x141c <update_map_ir+0xb0>



signed long int degreeToSpeed(signed long int degree)
{
	return ((degree * (DRIVE_SPEED_MAX - DRIVE_SPEED_MIN))/180) + DRIVE_SPEED_MIN;
    1686:	7f 01       	movw	r14, r30
    1688:	00 27       	eor	r16, r16
    168a:	f7 fc       	sbrc	r15, 7
    168c:	00 95       	com	r16
    168e:	10 2f       	mov	r17, r16
    1690:	c8 01       	movw	r24, r16
    1692:	b7 01       	movw	r22, r14
    1694:	2e ef       	ldi	r18, 0xFE	; 254
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    16a0:	d6 2e       	mov	r13, r22
    16a2:	c7 2e       	mov	r12, r23
    16a4:	b8 2e       	mov	r11, r24
    16a6:	a9 2e       	mov	r10, r25
			act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
		}
		delay_ms(20);
    }

	act_setSpeed(&ir_servo, degreeToSpeed(endAngle));
    16a8:	24 eb       	ldi	r18, 0xB4	; 180
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
    16b4:	2f 57       	subi	r18, 0x7F	; 127
    16b6:	30 40       	sbci	r19, 0x00	; 0
    16b8:	40 40       	sbci	r20, 0x00	; 0
    16ba:	50 40       	sbci	r21, 0x00	; 0
    16bc:	85 eb       	ldi	r24, 0xB5	; 181
    16be:	92 e0       	ldi	r25, 0x02	; 2
    16c0:	62 2f       	mov	r22, r18
    16c2:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
	delay_ms(20);
    16c6:	64 e1       	ldi	r22, 0x14	; 20
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
    16d2:	2d 2d       	mov	r18, r13
    16d4:	3c 2d       	mov	r19, r12
    16d6:	4b 2d       	mov	r20, r11
    16d8:	5a 2d       	mov	r21, r10
    16da:	c9 01       	movw	r24, r18
    16dc:	da 01       	movw	r26, r20
    16de:	1c 01       	movw	r2, r24
    16e0:	2d 01       	movw	r4, r26
    16e2:	2f 81       	ldd	r18, Y+7	; 0x07
    16e4:	38 85       	ldd	r19, Y+8	; 0x08
    16e6:	3a 8b       	std	Y+18, r19	; 0x12
    16e8:	29 8b       	std	Y+17, r18	; 0x11
    16ea:	66 24       	eor	r6, r6
    16ec:	77 24       	eor	r7, r7
    16ee:	43 01       	movw	r8, r6

	for(int currentAngle = endAngle; currentAngle >= startAngle; currentAngle -= 5)
    { 
        distanceRead(ir_dist);
    16f0:	e9 86       	std	Y+9, r14	; 0x09
    16f2:	fa 86       	std	Y+10, r15	; 0x0a
    16f4:	0b 87       	std	Y+11, r16	; 0x0b
    16f6:	1c 87       	std	Y+12, r17	; 0x0c
    16f8:	e8 c0       	rjmp	.+464    	; 0x18ca <update_map_ir+0x55e>
    16fa:	8a e7       	ldi	r24, 0x7A	; 122
    16fc:	92 e0       	ldi	r25, 0x02	; 2
    16fe:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_sensorRead_>
    1702:	e9 84       	ldd	r14, Y+9	; 0x09
    1704:	fa 84       	ldd	r15, Y+10	; 0x0a
    1706:	0b 85       	ldd	r16, Y+11	; 0x0b
    1708:	1c 85       	ldd	r17, Y+12	; 0x0c
    170a:	e6 0c       	add	r14, r6
    170c:	f7 1c       	adc	r15, r7
    170e:	08 1d       	adc	r16, r8
    1710:	19 1d       	adc	r17, r9
		act_setSpeed(&ir_servo, degreeToSpeed(currentAngle));
    1712:	c2 01       	movw	r24, r4
    1714:	b1 01       	movw	r22, r2
    1716:	24 eb       	ldi	r18, 0xB4	; 180
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
    1722:	2f 57       	subi	r18, 0x7F	; 127
    1724:	30 40       	sbci	r19, 0x00	; 0
    1726:	40 40       	sbci	r20, 0x00	; 0
    1728:	50 40       	sbci	r21, 0x00	; 0
    172a:	85 eb       	ldi	r24, 0xB5	; 181
    172c:	92 e0       	ldi	r25, 0x02	; 2
    172e:	62 2f       	mov	r22, r18
    1730:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>

		if((ir_dist.distance.cm >= 10) && (ir_dist.distance.cm <= 80))
    1734:	60 91 81 02 	lds	r22, 0x0281
    1738:	70 91 82 02 	lds	r23, 0x0282
    173c:	cb 01       	movw	r24, r22
    173e:	0a 97       	sbiw	r24, 0x0a	; 10
    1740:	87 34       	cpi	r24, 0x47	; 71
    1742:	91 05       	cpc	r25, r1
    1744:	08 f0       	brcs	.+2      	; 0x1748 <update_map_ir+0x3dc>
    1746:	a6 c0       	rjmp	.+332    	; 0x1894 <update_map_ir+0x528>
		{
        	

        	wallCol = ((ir_dist.distance.cm/5.0) * (cos_SoR(currentAngle)))/100;
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <__floatunsisf>
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 ea       	ldi	r20, 0xA0	; 160
    1756:	50 e4       	ldi	r21, 0x40	; 64
    1758:	0e 94 92 2c 	call	0x5924	; 0x5924 <__divsf3>
    175c:	5b 01       	movw	r10, r22
    175e:	6c 01       	movw	r12, r24
    1760:	c8 01       	movw	r24, r16
    1762:	b7 01       	movw	r22, r14
    1764:	0e 94 e6 02 	call	0x5cc	; 0x5cc <cos_SoR>
    1768:	aa 27       	eor	r26, r26
    176a:	97 fd       	sbrc	r25, 7
    176c:	a0 95       	com	r26
    176e:	ba 2f       	mov	r27, r26
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__floatsisf>
    1778:	9b 01       	movw	r18, r22
    177a:	ac 01       	movw	r20, r24
    177c:	c6 01       	movw	r24, r12
    177e:	b5 01       	movw	r22, r10
    1780:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <__mulsf3>
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	48 ec       	ldi	r20, 0xC8	; 200
    178a:	52 e4       	ldi	r21, 0x42	; 66
    178c:	0e 94 92 2c 	call	0x5924	; 0x5924 <__divsf3>
    1790:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__fixsfsi>
    1794:	7a 83       	std	Y+2, r23	; 0x02
    1796:	69 83       	std	Y+1, r22	; 0x01
        	wallRow = ((ir_dist.distance.cm/5.0) * (ABS(sin_SoR(currentAngle))))/100;
    1798:	c8 01       	movw	r24, r16
    179a:	b7 01       	movw	r22, r14
    179c:	0e 94 11 03 	call	0x622	; 0x622 <sin_SoR>
    17a0:	9c 01       	movw	r18, r24
    17a2:	18 16       	cp	r1, r24
    17a4:	19 06       	cpc	r1, r25
    17a6:	34 f4       	brge	.+12     	; 0x17b4 <update_map_ir+0x448>
    17a8:	b9 01       	movw	r22, r18
    17aa:	88 27       	eor	r24, r24
    17ac:	77 fd       	sbrc	r23, 7
    17ae:	80 95       	com	r24
    17b0:	98 2f       	mov	r25, r24
    17b2:	08 c0       	rjmp	.+16     	; 0x17c4 <update_map_ir+0x458>
    17b4:	66 27       	eor	r22, r22
    17b6:	77 27       	eor	r23, r23
    17b8:	68 1b       	sub	r22, r24
    17ba:	79 0b       	sbc	r23, r25
    17bc:	88 27       	eor	r24, r24
    17be:	77 fd       	sbrc	r23, 7
    17c0:	80 95       	com	r24
    17c2:	98 2f       	mov	r25, r24
    17c4:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__floatsisf>
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	c6 01       	movw	r24, r12
    17ce:	b5 01       	movw	r22, r10
    17d0:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <__mulsf3>
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	48 ec       	ldi	r20, 0xC8	; 200
    17da:	52 e4       	ldi	r21, 0x42	; 66
    17dc:	0e 94 92 2c 	call	0x5924	; 0x5924 <__divsf3>
    17e0:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__fixsfsi>
    17e4:	9b 01       	movw	r18, r22
        	courseMap[robotX + wallRow][robotY + wallCol] = WALL;
    17e6:	50 91 2c 03 	lds	r21, 0x032C
    17ea:	40 91 2b 03 	lds	r20, 0x032B
    17ee:	24 0f       	add	r18, r20
    17f0:	31 1d       	adc	r19, r1
    17f2:	f9 01       	movw	r30, r18
    17f4:	a5 e0       	ldi	r26, 0x05	; 5
    17f6:	ee 0f       	add	r30, r30
    17f8:	ff 1f       	adc	r31, r31
    17fa:	aa 95       	dec	r26
    17fc:	e1 f7       	brne	.-8      	; 0x17f6 <update_map_ir+0x48a>
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	e2 1b       	sub	r30, r18
    1804:	f3 0b       	sbc	r31, r19
    1806:	a9 81       	ldd	r26, Y+1	; 0x01
    1808:	ba 81       	ldd	r27, Y+2	; 0x02
    180a:	ea 0f       	add	r30, r26
    180c:	fb 1f       	adc	r31, r27
    180e:	e5 0f       	add	r30, r21
    1810:	f1 1d       	adc	r31, r1
    1812:	ee 0f       	add	r30, r30
    1814:	ff 1f       	adc	r31, r31
    1816:	e6 53       	subi	r30, 0x36	; 54
    1818:	fc 4f       	sbci	r31, 0xFC	; 252
    181a:	2e ef       	ldi	r18, 0xFE	; 254
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	31 83       	std	Z+1, r19	; 0x01
    1820:	20 83       	st	Z, r18
        	rprintf("wallCol: %d\twallRow: %d\tangle: %d",wallCol,wallRow,currentAngle); distanceDump(ir_dist);rprintf("\n");
    1822:	ad b7       	in	r26, 0x3d	; 61
    1824:	be b7       	in	r27, 0x3e	; 62
    1826:	19 97       	sbiw	r26, 0x09	; 9
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	be bf       	out	0x3e, r27	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	ad bf       	out	0x3d, r26	; 61
    1832:	ed b7       	in	r30, 0x3d	; 61
    1834:	fe b7       	in	r31, 0x3e	; 62
    1836:	31 96       	adiw	r30, 0x01	; 1
    1838:	21 e0       	ldi	r18, 0x01	; 1
    183a:	11 96       	adiw	r26, 0x01	; 1
    183c:	2c 93       	st	X, r18
    183e:	a2 e5       	ldi	r26, 0x52	; 82
    1840:	b4 e0       	ldi	r27, 0x04	; 4
    1842:	b2 83       	std	Z+2, r27	; 0x02
    1844:	a1 83       	std	Z+1, r26	; 0x01
    1846:	29 81       	ldd	r18, Y+1	; 0x01
    1848:	3a 81       	ldd	r19, Y+2	; 0x02
    184a:	34 83       	std	Z+4, r19	; 0x04
    184c:	23 83       	std	Z+3, r18	; 0x03
    184e:	76 83       	std	Z+6, r23	; 0x06
    1850:	65 83       	std	Z+5, r22	; 0x05
    1852:	89 89       	ldd	r24, Y+17	; 0x11
    1854:	9a 89       	ldd	r25, Y+18	; 0x12
    1856:	90 87       	std	Z+8, r25	; 0x08
    1858:	87 83       	std	Z+7, r24	; 0x07
    185a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
    185e:	ad b7       	in	r26, 0x3d	; 61
    1860:	be b7       	in	r27, 0x3e	; 62
    1862:	19 96       	adiw	r26, 0x09	; 9
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	be bf       	out	0x3e, r27	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	ad bf       	out	0x3d, r26	; 61
    186e:	8a e7       	ldi	r24, 0x7A	; 122
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0e 94 85 14 	call	0x290a	; 0x290a <_distanceDump>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <update_map_ir+0x50c>
    1878:	0f 92       	push	r0
    187a:	21 e0       	ldi	r18, 0x01	; 1
    187c:	ed b7       	in	r30, 0x3d	; 61
    187e:	fe b7       	in	r31, 0x3e	; 62
    1880:	21 83       	std	Z+1, r18	; 0x01
    1882:	80 e5       	ldi	r24, 0x50	; 80
    1884:	94 e0       	ldi	r25, 0x04	; 4
    1886:	93 83       	std	Z+3, r25	; 0x03
    1888:	82 83       	std	Z+2, r24	; 0x02
    188a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
		}

		delay_ms(20);
    1894:	64 e1       	ldi	r22, 0x14	; 20
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
    }

	act_setSpeed(&ir_servo, degreeToSpeed(endAngle));
	delay_ms(20);

	for(int currentAngle = endAngle; currentAngle >= startAngle; currentAngle -= 5)
    18a0:	a9 89       	ldd	r26, Y+17	; 0x11
    18a2:	ba 89       	ldd	r27, Y+18	; 0x12
    18a4:	15 97       	sbiw	r26, 0x05	; 5
    18a6:	ba 8b       	std	Y+18, r27	; 0x12
    18a8:	a9 8b       	std	Y+17, r26	; 0x11
    18aa:	8a e0       	ldi	r24, 0x0A	; 10
    18ac:	9b ef       	ldi	r25, 0xFB	; 251
    18ae:	af ef       	ldi	r26, 0xFF	; 255
    18b0:	bf ef       	ldi	r27, 0xFF	; 255
    18b2:	28 0e       	add	r2, r24
    18b4:	39 1e       	adc	r3, r25
    18b6:	4a 1e       	adc	r4, r26
    18b8:	5b 1e       	adc	r5, r27
    18ba:	8b ef       	ldi	r24, 0xFB	; 251
    18bc:	9f ef       	ldi	r25, 0xFF	; 255
    18be:	af ef       	ldi	r26, 0xFF	; 255
    18c0:	bf ef       	ldi	r27, 0xFF	; 255
    18c2:	68 0e       	add	r6, r24
    18c4:	79 1e       	adc	r7, r25
    18c6:	8a 1e       	adc	r8, r26
    18c8:	9b 1e       	adc	r9, r27
    18ca:	a9 89       	ldd	r26, Y+17	; 0x11
    18cc:	ba 89       	ldd	r27, Y+18	; 0x12
    18ce:	ed 81       	ldd	r30, Y+5	; 0x05
    18d0:	fe 81       	ldd	r31, Y+6	; 0x06
    18d2:	ae 17       	cp	r26, r30
    18d4:	bf 07       	cpc	r27, r31
    18d6:	0c f0       	brlt	.+2      	; 0x18da <update_map_ir+0x56e>
    18d8:	10 cf       	rjmp	.-480    	; 0x16fa <update_map_ir+0x38e>
        	rprintf("wallCol: %d\twallRow: %d\tangle: %d",wallCol,wallRow,currentAngle); distanceDump(ir_dist);rprintf("\n");
		}

		delay_ms(20);
    }
}
    18da:	62 96       	adiw	r28, 0x12	; 18
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	bf 90       	pop	r11
    18f8:	af 90       	pop	r10
    18fa:	9f 90       	pop	r9
    18fc:	8f 90       	pop	r8
    18fe:	7f 90       	pop	r7
    1900:	6f 90       	pop	r6
    1902:	5f 90       	pop	r5
    1904:	4f 90       	pop	r4
    1906:	3f 90       	pop	r3
    1908:	2f 90       	pop	r2
    190a:	08 95       	ret

0000190c <turnToNothingAndGo>:
	*/
}


void turnToNothingAndGo()
{
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29

void clearMap()
//clears the map of propagated values
{
 
  for (int row=0; row < MAP_X; row++)
    191a:	4c e3       	ldi	r20, 0x3C	; 60
    191c:	c4 2e       	mov	r12, r20
    191e:	d1 2c       	mov	r13, r1
void turnToNothingAndGo()
{
	
	while(true)
	{
		act_setSpeed(&wheel_left, DRIVE_SPEED_BRAKE);
    1920:	84 e8       	ldi	r24, 0x84	; 132
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
		act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
    192a:	88 e9       	ldi	r24, 0x98	; 152
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	0b c0       	rjmp	.+22     	; 0x1950 <turnToNothingAndGo+0x44>

    for (int col=0; col < MAP_Y; col++)
    //traverse MAP_Y columns
    {
      
	  courseMap[row][col] = NOTH;
    193a:	11 92       	st	Z+, r1
    193c:	11 92       	st	Z+, r1
 
  for (int row=0; row < MAP_X; row++)
  //traverse MAP_X rows
  {

    for (int col=0; col < MAP_Y; col++)
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	8e 31       	cpi	r24, 0x1E	; 30
    1942:	91 05       	cpc	r25, r1
    1944:	d1 f7       	brne	.-12     	; 0x193a <turnToNothingAndGo+0x2e>

void clearMap()
//clears the map of propagated values
{
 
  for (int row=0; row < MAP_X; row++)
    1946:	2f 5f       	subi	r18, 0xFF	; 255
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	2e 31       	cpi	r18, 0x1E	; 30
    194c:	31 05       	cpc	r19, r1
    194e:	61 f0       	breq	.+24     	; 0x1968 <turnToNothingAndGo+0x5c>
    1950:	2c 9d       	mul	r18, r12
    1952:	f0 01       	movw	r30, r0
    1954:	2d 9d       	mul	r18, r13
    1956:	f0 0d       	add	r31, r0
    1958:	3c 9d       	mul	r19, r12
    195a:	f0 0d       	add	r31, r0
    195c:	11 24       	eor	r1, r1
    195e:	e6 53       	subi	r30, 0x36	; 54
    1960:	fc 4f       	sbci	r31, 0xFC	; 252
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	e9 cf       	rjmp	.-46     	; 0x193a <turnToNothingAndGo+0x2e>
	while(true)
	{
		act_setSpeed(&wheel_left, DRIVE_SPEED_BRAKE);
		act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
		clearMap();
		update_map_ir(0, 180); //scan 180
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	64 eb       	ldi	r22, 0xB4	; 180
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	0e 94 b6 09 	call	0x136c	; 0x136c <update_map_ir>
	
	for(short zonLeftRow = 0; zonLeftRow < 3; zonLeftRow++)
	{
		for(short zonLeftCol = 0; zonLeftCol < 5; zonLeftCol++)
		{
			zoneLeft += courseMap[robotX + (zonLeftRow)][robotY + (ROBOT_DISTY + 1 + zonLeftCol)];
    1974:	80 91 2b 03 	lds	r24, 0x032B
    1978:	f0 90 2c 03 	lds	r15, 0x032C
    197c:	0f 2d       	mov	r16, r15
    197e:	10 e0       	ldi	r17, 0x00	; 0
    1980:	b8 01       	movw	r22, r16
    1982:	6e 5f       	subi	r22, 0xFE	; 254
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	c0 e0       	ldi	r28, 0x00	; 0
    1988:	d0 e0       	ldi	r29, 0x00	; 0
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	50 e0       	ldi	r21, 0x00	; 0
	*/
}


void turnToNothingAndGo()
{
    198e:	a8 2f       	mov	r26, r24
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	0e c0       	rjmp	.+28     	; 0x19b0 <turnToNothingAndGo+0xa4>
	
	for(short zonLeftRow = 0; zonLeftRow < 3; zonLeftRow++)
	{
		for(short zonLeftCol = 0; zonLeftCol < 5; zonLeftCol++)
		{
			zoneLeft += courseMap[robotX + (zonLeftRow)][robotY + (ROBOT_DISTY + 1 + zonLeftCol)];
    1994:	81 91       	ld	r24, Z+
    1996:	91 91       	ld	r25, Z+
    1998:	c8 0f       	add	r28, r24
    199a:	d9 1f       	adc	r29, r25
{ //zone 3 is four rows in front and 3 cols left of center
	int zoneLeft = 0;
	
	for(short zonLeftRow = 0; zonLeftRow < 3; zonLeftRow++)
	{
		for(short zonLeftCol = 0; zonLeftCol < 5; zonLeftCol++)
    199c:	2f 5f       	subi	r18, 0xFF	; 255
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	25 30       	cpi	r18, 0x05	; 5
    19a2:	31 05       	cpc	r19, r1
    19a4:	b9 f7       	brne	.-18     	; 0x1994 <turnToNothingAndGo+0x88>

int isAnythingLeftZone()
{ //zone 3 is four rows in front and 3 cols left of center
	int zoneLeft = 0;
	
	for(short zonLeftRow = 0; zonLeftRow < 3; zonLeftRow++)
    19a6:	4f 5f       	subi	r20, 0xFF	; 255
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	43 30       	cpi	r20, 0x03	; 3
    19ac:	51 05       	cpc	r21, r1
    19ae:	b1 f0       	breq	.+44     	; 0x19dc <turnToNothingAndGo+0xd0>
	*/
}


void turnToNothingAndGo()
{
    19b0:	ca 01       	movw	r24, r20
    19b2:	8a 0f       	add	r24, r26
    19b4:	9b 1f       	adc	r25, r27
    19b6:	fc 01       	movw	r30, r24
    19b8:	35 e0       	ldi	r19, 0x05	; 5
    19ba:	ee 0f       	add	r30, r30
    19bc:	ff 1f       	adc	r31, r31
    19be:	3a 95       	dec	r19
    19c0:	e1 f7       	brne	.-8      	; 0x19ba <turnToNothingAndGo+0xae>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	e8 1b       	sub	r30, r24
    19c8:	f9 0b       	sbc	r31, r25
    19ca:	e6 0f       	add	r30, r22
    19cc:	f7 1f       	adc	r31, r23
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	e6 53       	subi	r30, 0x36	; 54
    19d4:	fc 4f       	sbci	r31, 0xFC	; 252
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	dc cf       	rjmp	.-72     	; 0x1994 <turnToNothingAndGo+0x88>
		clearMap();
		update_map_ir(0, 180); //scan 180
		//printMap(SOUTH);
		//is left zone clear? 
		int leftZone = isAnythingLeftZone();
		if(leftZone == 0)
    19dc:	20 97       	sbiw	r28, 0x00	; 0
    19de:	d1 f0       	breq	.+52     	; 0x1a14 <turnToNothingAndGo+0x108>
    19e0:	4f 2d       	mov	r20, r15
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	47 50       	subi	r20, 0x07	; 7
    19e6:	50 40       	sbci	r21, 0x00	; 0
    19e8:	9d 01       	movw	r18, r26
    19ea:	22 0f       	add	r18, r18
    19ec:	33 1f       	adc	r19, r19
    19ee:	cd 01       	movw	r24, r26
    19f0:	65 e0       	ldi	r22, 0x05	; 5
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	6a 95       	dec	r22
    19f8:	e1 f7       	brne	.-8      	; 0x19f2 <turnToNothingAndGo+0xe6>
    19fa:	82 1b       	sub	r24, r18
    19fc:	93 0b       	sbc	r25, r19
    19fe:	48 0f       	add	r20, r24
    1a00:	59 1f       	adc	r21, r25
    1a02:	44 0f       	add	r20, r20
    1a04:	55 1f       	adc	r21, r21
    1a06:	46 53       	subi	r20, 0x36	; 54
    1a08:	5c 4f       	sbci	r21, 0xFC	; 252
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	13 c0       	rjmp	.+38     	; 0x1a3a <turnToNothingAndGo+0x12e>
		{
			turn_left();
    1a14:	0e 94 45 07 	call	0xe8a	; 0xe8a <turn_left>
    1a18:	34 c0       	rjmp	.+104    	; 0x1a82 <turnToNothingAndGo+0x176>
	
	for(short zonRightRow = 0; zonRightRow < 3; zonRightRow++)
	{
		for(short zonRightCol = 0; zonRightCol < 5; zonRightCol++)
		{
			zoneRight += courseMap[robotX + (zonRightRow)][robotY - (ROBOT_DISTY + 1 + zonRightCol)];
    1a1a:	80 81       	ld	r24, Z
    1a1c:	91 81       	ldd	r25, Z+1	; 0x01
    1a1e:	68 0f       	add	r22, r24
    1a20:	79 1f       	adc	r23, r25
    1a22:	32 97       	sbiw	r30, 0x02	; 2
{ //zone 3 is four rows in front and 3 cols left of center
	int zoneRight = 0;
	
	for(short zonRightRow = 0; zonRightRow < 3; zonRightRow++)
	{
		for(short zonRightCol = 0; zonRightCol < 5; zonRightCol++)
    1a24:	e4 17       	cp	r30, r20
    1a26:	f5 07       	cpc	r31, r21
    1a28:	c1 f7       	brne	.-16     	; 0x1a1a <turnToNothingAndGo+0x10e>

int isAnythingRightZone()
{ //zone 3 is four rows in front and 3 cols left of center
	int zoneRight = 0;
	
	for(short zonRightRow = 0; zonRightRow < 3; zonRightRow++)
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	af 01       	movw	r20, r30
    1a30:	44 5c       	subi	r20, 0xC4	; 196
    1a32:	5f 4f       	sbci	r21, 0xFF	; 255
    1a34:	23 30       	cpi	r18, 0x03	; 3
    1a36:	31 05       	cpc	r19, r1
    1a38:	a9 f0       	breq	.+42     	; 0x1a64 <turnToNothingAndGo+0x158>
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	8a 0f       	add	r24, r26
    1a3e:	9b 1f       	adc	r25, r27
    1a40:	fc 01       	movw	r30, r24
    1a42:	68 94       	set
    1a44:	14 f8       	bld	r1, 4
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	16 94       	lsr	r1
    1a4c:	e1 f7       	brne	.-8      	; 0x1a46 <turnToNothingAndGo+0x13a>
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	e8 1b       	sub	r30, r24
    1a54:	f9 0b       	sbc	r31, r25
    1a56:	e0 0f       	add	r30, r16
    1a58:	f1 1f       	adc	r31, r17
    1a5a:	ee 0f       	add	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	ea 53       	subi	r30, 0x3A	; 58
    1a60:	fc 4f       	sbci	r31, 0xFC	; 252
    1a62:	db cf       	rjmp	.-74     	; 0x1a1a <turnToNothingAndGo+0x10e>
			turn_left();
			return;
		}
		//is right zone clear?
		int rightZone = isAnythingRightZone();
		if(rightZone == 0)
    1a64:	61 15       	cp	r22, r1
    1a66:	71 05       	cpc	r23, r1
    1a68:	19 f4       	brne	.+6      	; 0x1a70 <turnToNothingAndGo+0x164>
		{
			turn_right();
    1a6a:	0e 94 64 07 	call	0xec8	; 0xec8 <turn_right>
    1a6e:	09 c0       	rjmp	.+18     	; 0x1a82 <turnToNothingAndGo+0x176>
			return;
		}
		
		//turn and try again
		if(rightZone < leftZone)
    1a70:	6c 17       	cp	r22, r28
    1a72:	7d 07       	cpc	r23, r29
    1a74:	1c f4       	brge	.+6      	; 0x1a7c <turnToNothingAndGo+0x170>
		{
			turn_right();
    1a76:	0e 94 64 07 	call	0xec8	; 0xec8 <turn_right>
    1a7a:	52 cf       	rjmp	.-348    	; 0x1920 <turnToNothingAndGo+0x14>
		
		}
		else
		{
			turn_left();
    1a7c:	0e 94 45 07 	call	0xe8a	; 0xe8a <turn_left>
    1a80:	4f cf       	rjmp	.-354    	; 0x1920 <turnToNothingAndGo+0x14>
		}	

	}

}
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	df 90       	pop	r13
    1a8e:	cf 90       	pop	r12
    1a90:	08 95       	ret

00001a92 <driveForward>:
	act_setSpeed(&wheel_right, speed);

}

void driveForward()
{
    1a92:	4f 92       	push	r4
    1a94:	5f 92       	push	r5
    1a96:	6f 92       	push	r6
    1a98:	7f 92       	push	r7
    1a9a:	8f 92       	push	r8
    1a9c:	9f 92       	push	r9
    1a9e:	af 92       	push	r10
    1aa0:	bf 92       	push	r11
    1aa2:	cf 92       	push	r12
    1aa4:	df 92       	push	r13
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
	{
		for(short zon0col = 0; zon0col < 3; zon0col++)
		{
			zone0 += courseMap[robotX + (zon0row + ROBOT_DISTX + 1)][robotY + (zon0col - 1)];
    1ab2:	20 91 2b 03 	lds	r18, 0x032B
    1ab6:	c2 2e       	mov	r12, r18
    1ab8:	dd 24       	eor	r13, r13
    1aba:	d6 01       	movw	r26, r12
    1abc:	12 96       	adiw	r26, 0x02	; 2
    1abe:	80 91 2c 03 	lds	r24, 0x032C
    1ac2:	c8 2f       	mov	r28, r24
    1ac4:	d0 e0       	ldi	r29, 0x00	; 0
    1ac6:	5e 01       	movw	r10, r28
    1ac8:	08 94       	sec
    1aca:	a1 08       	sbc	r10, r1
    1acc:	b1 08       	sbc	r11, r1
    1ace:	cd 01       	movw	r24, r26
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	fd 01       	movw	r30, r26
    1ad6:	35 e0       	ldi	r19, 0x05	; 5
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	3a 95       	dec	r19
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <driveForward+0x46>
    1ae0:	e8 1b       	sub	r30, r24
    1ae2:	f9 0b       	sbc	r31, r25
    1ae4:	ea 0d       	add	r30, r10
    1ae6:	fb 1d       	adc	r31, r11
    1ae8:	ee 0f       	add	r30, r30
    1aea:	ff 1f       	adc	r31, r31
    1aec:	e6 53       	subi	r30, 0x36	; 54
    1aee:	fc 4f       	sbci	r31, 0xFC	; 252
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	70 e0       	ldi	r23, 0x00	; 0
	act_setSpeed(&wheel_right, speed);

}

void driveForward()
{
    1af4:	7e 01       	movw	r14, r28
    1af6:	8e e1       	ldi	r24, 0x1E	; 30
    1af8:	28 9f       	mul	r18, r24
    1afa:	80 01       	movw	r16, r0
    1afc:	11 24       	eor	r1, r1

int isAnythingZone0()
{//zone 0 is a 3 row by 5 col block directly if front
	int zone0 = 0;
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
    1afe:	ae 01       	movw	r20, r28
    1b00:	4f 52       	subi	r20, 0x2F	; 47
    1b02:	5f 4f       	sbci	r21, 0xFF	; 255
    1b04:	40 0f       	add	r20, r16
    1b06:	51 1f       	adc	r21, r17
    1b08:	44 0f       	add	r20, r20
    1b0a:	55 1f       	adc	r21, r21
    1b0c:	46 53       	subi	r20, 0x36	; 54
    1b0e:	5c 4f       	sbci	r21, 0xFC	; 252
	{
		for(short zon0col = 0; zon0col < 3; zon0col++)
		{
			zone0 += courseMap[robotX + (zon0row + ROBOT_DISTX + 1)][robotY + (zon0col - 1)];
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 81       	ld	r18, Z
    1b16:	31 81       	ldd	r19, Z+1	; 0x01
    1b18:	82 0f       	add	r24, r18
    1b1a:	93 1f       	adc	r25, r19
    1b1c:	68 0f       	add	r22, r24
    1b1e:	79 1f       	adc	r23, r25
    1b20:	84 81       	ldd	r24, Z+4	; 0x04
    1b22:	95 81       	ldd	r25, Z+5	; 0x05
    1b24:	68 0f       	add	r22, r24
    1b26:	79 1f       	adc	r23, r25
    1b28:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone0()
{//zone 0 is a 3 row by 5 col block directly if front
	int zone0 = 0;
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
    1b2a:	e4 17       	cp	r30, r20
    1b2c:	f5 07       	cpc	r31, r21
    1b2e:	81 f7       	brne	.-32     	; 0x1b10 <driveForward+0x7e>
	//if anything is still in zone one, turn around

	int zone0 = isAnythingZone0();

	
	if(zone0 != 0)
    1b30:	67 2b       	or	r22, r23
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <driveForward+0xa4>
    1b34:	6d c0       	rjmp	.+218    	; 0x1c10 <driveForward+0x17e>
	{
		//stop
		act_setSpeed(&wheel_left, DRIVE_SPEED_BRAKE);
    1b36:	84 e8       	ldi	r24, 0x84	; 132
    1b38:	92 e0       	ldi	r25, 0x02	; 2
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
		act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
    1b40:	88 e9       	ldi	r24, 0x98	; 152
    1b42:	92 e0       	ldi	r25, 0x02	; 2
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0

void clearMap()
//clears the map of propagated values
{
 
  for (int row=0; row < MAP_X; row++)
    1b4e:	4c e3       	ldi	r20, 0x3C	; 60
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	0b c0       	rjmp	.+22     	; 0x1b6a <driveForward+0xd8>

    for (int col=0; col < MAP_Y; col++)
    //traverse MAP_Y columns
    {
      
	  courseMap[row][col] = NOTH;
    1b54:	11 92       	st	Z+, r1
    1b56:	11 92       	st	Z+, r1
 
  for (int row=0; row < MAP_X; row++)
  //traverse MAP_X rows
  {

    for (int col=0; col < MAP_Y; col++)
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	8e 31       	cpi	r24, 0x1E	; 30
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	d1 f7       	brne	.-12     	; 0x1b54 <driveForward+0xc2>

void clearMap()
//clears the map of propagated values
{
 
  for (int row=0; row < MAP_X; row++)
    1b60:	2f 5f       	subi	r18, 0xFF	; 255
    1b62:	3f 4f       	sbci	r19, 0xFF	; 255
    1b64:	2e 31       	cpi	r18, 0x1E	; 30
    1b66:	31 05       	cpc	r19, r1
    1b68:	61 f0       	breq	.+24     	; 0x1b82 <driveForward+0xf0>
    1b6a:	24 9f       	mul	r18, r20
    1b6c:	f0 01       	movw	r30, r0
    1b6e:	25 9f       	mul	r18, r21
    1b70:	f0 0d       	add	r31, r0
    1b72:	34 9f       	mul	r19, r20
    1b74:	f0 0d       	add	r31, r0
    1b76:	11 24       	eor	r1, r1
    1b78:	e6 53       	subi	r30, 0x36	; 54
    1b7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	e9 cf       	rjmp	.-46     	; 0x1b54 <driveForward+0xc2>
		act_setSpeed(&wheel_left, DRIVE_SPEED_BRAKE);
		act_setSpeed(&wheel_right, DRIVE_SPEED_BRAKE);
		
		//rescan
		clearMap();
		update_map_ir(45, 135); //scan 45 degrees either side of center line
    1b82:	8d e2       	ldi	r24, 0x2D	; 45
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	67 e8       	ldi	r22, 0x87	; 135
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	0e 94 b6 09 	call	0x136c	; 0x136c <update_map_ir>
		printMap(SOUTH);
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 94 84 05 	call	0xb08	; 0xb08 <printMap>
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
	{
		for(short zon0col = 0; zon0col < 3; zon0col++)
		{
			zone0 += courseMap[robotX + (zon0row + ROBOT_DISTX + 1)][robotY + (zon0col - 1)];
    1b96:	40 91 2b 03 	lds	r20, 0x032B
    1b9a:	20 91 2c 03 	lds	r18, 0x032C
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	84 2f       	mov	r24, r20
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 96       	adiw	r24, 0x02	; 2
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	65 e0       	ldi	r22, 0x05	; 5
    1baa:	ee 0f       	add	r30, r30
    1bac:	ff 1f       	adc	r31, r31
    1bae:	6a 95       	dec	r22
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <driveForward+0x118>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	e8 1b       	sub	r30, r24
    1bb8:	f9 0b       	sbc	r31, r25
    1bba:	e2 0f       	add	r30, r18
    1bbc:	f3 1f       	adc	r31, r19
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	e8 53       	subi	r30, 0x38	; 56
    1bc4:	fc 4f       	sbci	r31, 0xFC	; 252
    1bc6:	a0 e0       	ldi	r26, 0x00	; 0
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0

int isAnythingZone0()
{//zone 0 is a 3 row by 5 col block directly if front
	int zone0 = 0;
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
    1bca:	b9 01       	movw	r22, r18
    1bcc:	6f 52       	subi	r22, 0x2F	; 47
    1bce:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd0:	8e e1       	ldi	r24, 0x1E	; 30
    1bd2:	48 9f       	mul	r20, r24
    1bd4:	a0 01       	movw	r20, r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	64 0f       	add	r22, r20
    1bda:	75 1f       	adc	r23, r21
    1bdc:	66 0f       	add	r22, r22
    1bde:	77 1f       	adc	r23, r23
    1be0:	66 53       	subi	r22, 0x36	; 54
    1be2:	7c 4f       	sbci	r23, 0xFC	; 252
	{
		for(short zon0col = 0; zon0col < 3; zon0col++)
		{
			zone0 += courseMap[robotX + (zon0row + ROBOT_DISTX + 1)][robotY + (zon0col - 1)];
    1be4:	80 81       	ld	r24, Z
    1be6:	91 81       	ldd	r25, Z+1	; 0x01
    1be8:	22 81       	ldd	r18, Z+2	; 0x02
    1bea:	33 81       	ldd	r19, Z+3	; 0x03
    1bec:	82 0f       	add	r24, r18
    1bee:	93 1f       	adc	r25, r19
    1bf0:	a8 0f       	add	r26, r24
    1bf2:	b9 1f       	adc	r27, r25
    1bf4:	84 81       	ldd	r24, Z+4	; 0x04
    1bf6:	95 81       	ldd	r25, Z+5	; 0x05
    1bf8:	a8 0f       	add	r26, r24
    1bfa:	b9 1f       	adc	r27, r25
    1bfc:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone0()
{//zone 0 is a 3 row by 5 col block directly if front
	int zone0 = 0;
	
	for(short zon0row = 0; zon0row < 5; zon0row++)
    1bfe:	e6 17       	cp	r30, r22
    1c00:	f7 07       	cpc	r31, r23
    1c02:	81 f7       	brne	.-32     	; 0x1be4 <driveForward+0x152>
		clearMap();
		update_map_ir(45, 135); //scan 45 degrees either side of center line
		printMap(SOUTH);
		zone0 = isAnythingZone0();
		
		if(zone0 != 0)
    1c04:	ab 2b       	or	r26, r27
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <driveForward+0x178>
    1c08:	5e c1       	rjmp	.+700    	; 0x1ec6 <driveForward+0x434>
		{
			//turn_around();
			turnToNothingAndGo();
    1c0a:	0e 94 86 0c 	call	0x190c	; 0x190c <turnToNothingAndGo>
    1c0e:	5b c1       	rjmp	.+694    	; 0x1ec6 <driveForward+0x434>
	act_setSpeed(&wheel_right, speed);

}

void driveForward()
{
    1c10:	96 01       	movw	r18, r12
    1c12:	29 5f       	subi	r18, 0xF9	; 249
    1c14:	3f 4f       	sbci	r19, 0xFF	; 255
    1c16:	c9 01       	movw	r24, r18
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	f9 01       	movw	r30, r18
    1c1e:	45 e0       	ldi	r20, 0x05	; 5
    1c20:	ee 0f       	add	r30, r30
    1c22:	ff 1f       	adc	r31, r31
    1c24:	4a 95       	dec	r20
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <driveForward+0x18e>
    1c28:	e8 1b       	sub	r30, r24
    1c2a:	f9 0b       	sbc	r31, r25
    1c2c:	ec 0f       	add	r30, r28
    1c2e:	fd 1f       	adc	r31, r29
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	e6 53       	subi	r30, 0x36	; 54
    1c36:	fc 4f       	sbci	r31, 0xFC	; 252
    1c38:	44 24       	eor	r4, r4
    1c3a:	55 24       	eor	r5, r5

int isAnythingZone1()
{//zone 1 is four rows in front
	int zone1 = 0;
	
	for(short zon1row = 0; zon1row < 5; zon1row++)
    1c3c:	a7 01       	movw	r20, r14
    1c3e:	48 59       	subi	r20, 0x98	; 152
    1c40:	5e 4f       	sbci	r21, 0xFE	; 254
    1c42:	40 0f       	add	r20, r16
    1c44:	51 1f       	adc	r21, r17
    1c46:	44 0f       	add	r20, r20
    1c48:	55 1f       	adc	r21, r21
    1c4a:	46 53       	subi	r20, 0x36	; 54
    1c4c:	5c 4f       	sbci	r21, 0xFC	; 252
	{
		zone1 += courseMap[robotX + (ROBOT_DISTX + 1 + 5 + zon1row)][robotY];
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	48 0e       	add	r4, r24
    1c54:	59 1e       	adc	r5, r25
    1c56:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone1()
{//zone 1 is four rows in front
	int zone1 = 0;
	
	for(short zon1row = 0; zon1row < 5; zon1row++)
    1c58:	e4 17       	cp	r30, r20
    1c5a:	f5 07       	cpc	r31, r21
    1c5c:	c1 f7       	brne	.-16     	; 0x1c4e <driveForward+0x1bc>
    1c5e:	c9 01       	movw	r24, r18
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	f9 01       	movw	r30, r18
    1c66:	45 e0       	ldi	r20, 0x05	; 5
    1c68:	ee 0f       	add	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	4a 95       	dec	r20
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <driveForward+0x1d6>
    1c70:	e8 1b       	sub	r30, r24
    1c72:	f9 0b       	sbc	r31, r25
    1c74:	ea 0d       	add	r30, r10
    1c76:	fb 1d       	adc	r31, r11
    1c78:	ee 0f       	add	r30, r30
    1c7a:	ff 1f       	adc	r31, r31
    1c7c:	e6 53       	subi	r30, 0x36	; 54
    1c7e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c80:	66 24       	eor	r6, r6
    1c82:	77 24       	eor	r7, r7

int isAnythingZone2()
{//zone 2 is four rows in front and 3 cols right of center
	int zone2 = 0;
	
	for(short zon2row = 0; zon2row < 5; zon2row++)
    1c84:	a7 01       	movw	r20, r14
    1c86:	49 59       	subi	r20, 0x99	; 153
    1c88:	5e 4f       	sbci	r21, 0xFE	; 254
    1c8a:	40 0f       	add	r20, r16
    1c8c:	51 1f       	adc	r21, r17
    1c8e:	44 0f       	add	r20, r20
    1c90:	55 1f       	adc	r21, r21
    1c92:	46 53       	subi	r20, 0x36	; 54
    1c94:	5c 4f       	sbci	r21, 0xFC	; 252
	{
		zone2 += courseMap[robotX + (ROBOT_DISTX + 1 + 5 + zon2row)][robotY - 1];
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	68 0e       	add	r6, r24
    1c9c:	79 1e       	adc	r7, r25
    1c9e:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone2()
{//zone 2 is four rows in front and 3 cols right of center
	int zone2 = 0;
	
	for(short zon2row = 0; zon2row < 5; zon2row++)
    1ca0:	e4 17       	cp	r30, r20
    1ca2:	f5 07       	cpc	r31, r21
    1ca4:	c1 f7       	brne	.-16     	; 0x1c96 <driveForward+0x204>
    1ca6:	f9 01       	movw	r30, r18
    1ca8:	55 e0       	ldi	r21, 0x05	; 5
    1caa:	ee 0f       	add	r30, r30
    1cac:	ff 1f       	adc	r31, r31
    1cae:	5a 95       	dec	r21
    1cb0:	e1 f7       	brne	.-8      	; 0x1caa <driveForward+0x218>
    1cb2:	22 0f       	add	r18, r18
    1cb4:	33 1f       	adc	r19, r19
    1cb6:	e2 1b       	sub	r30, r18
    1cb8:	f3 0b       	sbc	r31, r19
    1cba:	ec 0f       	add	r30, r28
    1cbc:	fd 1f       	adc	r31, r29
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	e4 53       	subi	r30, 0x34	; 52
    1cc4:	fc 4f       	sbci	r31, 0xFC	; 252
    1cc6:	88 24       	eor	r8, r8
    1cc8:	99 24       	eor	r9, r9

int isAnythingZone3()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone3 = 0;
	
	for(short zon3row = 0; zon3row < 5; zon3row++)
    1cca:	97 01       	movw	r18, r14
    1ccc:	27 59       	subi	r18, 0x97	; 151
    1cce:	3e 4f       	sbci	r19, 0xFE	; 254
    1cd0:	20 0f       	add	r18, r16
    1cd2:	31 1f       	adc	r19, r17
    1cd4:	22 0f       	add	r18, r18
    1cd6:	33 1f       	adc	r19, r19
    1cd8:	26 53       	subi	r18, 0x36	; 54
    1cda:	3c 4f       	sbci	r19, 0xFC	; 252
	{
		zone3 += courseMap[robotX + (ROBOT_DISTX + 1 + 5 + zon3row)][robotY + 1];
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	88 0e       	add	r8, r24
    1ce2:	99 1e       	adc	r9, r25
    1ce4:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone3()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone3 = 0;
	
	for(short zon3row = 0; zon3row < 5; zon3row++)
    1ce6:	e2 17       	cp	r30, r18
    1ce8:	f3 07       	cpc	r31, r19
    1cea:	c1 f7       	brne	.-16     	; 0x1cdc <driveForward+0x24a>
    1cec:	cd 01       	movw	r24, r26
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	fd 01       	movw	r30, r26
    1cf4:	65 e0       	ldi	r22, 0x05	; 5
    1cf6:	ee 0f       	add	r30, r30
    1cf8:	ff 1f       	adc	r31, r31
    1cfa:	6a 95       	dec	r22
    1cfc:	e1 f7       	brne	.-8      	; 0x1cf6 <driveForward+0x264>
    1cfe:	e8 1b       	sub	r30, r24
    1d00:	f9 0b       	sbc	r31, r25
    1d02:	ec 0f       	add	r30, r28
    1d04:	fd 1f       	adc	r31, r29
    1d06:	ee 0f       	add	r30, r30
    1d08:	ff 1f       	adc	r31, r31
    1d0a:	ea 53       	subi	r30, 0x3A	; 58
    1d0c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d0e:	aa 24       	eor	r10, r10
    1d10:	bb 24       	eor	r11, r11

int isAnythingZone4()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone4 = 0;
	
	for(short zon4row = 0; zon4row < 10; zon4row++)
    1d12:	97 01       	movw	r18, r14
    1d14:	2a 59       	subi	r18, 0x9A	; 154
    1d16:	3e 4f       	sbci	r19, 0xFE	; 254
    1d18:	20 0f       	add	r18, r16
    1d1a:	31 1f       	adc	r19, r17
    1d1c:	22 0f       	add	r18, r18
    1d1e:	33 1f       	adc	r19, r19
    1d20:	26 53       	subi	r18, 0x36	; 54
    1d22:	3c 4f       	sbci	r19, 0xFC	; 252
	{
		zone4 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon4row)][robotY - 2];
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	a8 0e       	add	r10, r24
    1d2a:	b9 1e       	adc	r11, r25
    1d2c:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone4()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone4 = 0;
	
	for(short zon4row = 0; zon4row < 10; zon4row++)
    1d2e:	e2 17       	cp	r30, r18
    1d30:	f3 07       	cpc	r31, r19
    1d32:	c1 f7       	brne	.-16     	; 0x1d24 <driveForward+0x292>
    1d34:	cd 01       	movw	r24, r26
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	fd 01       	movw	r30, r26
    1d3c:	25 e0       	ldi	r18, 0x05	; 5
    1d3e:	ee 0f       	add	r30, r30
    1d40:	ff 1f       	adc	r31, r31
    1d42:	2a 95       	dec	r18
    1d44:	e1 f7       	brne	.-8      	; 0x1d3e <driveForward+0x2ac>
    1d46:	e8 1b       	sub	r30, r24
    1d48:	f9 0b       	sbc	r31, r25
    1d4a:	ec 0f       	add	r30, r28
    1d4c:	fd 1f       	adc	r31, r29
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	e2 53       	subi	r30, 0x32	; 50
    1d54:	fc 4f       	sbci	r31, 0xFC	; 252
    1d56:	cc 24       	eor	r12, r12
    1d58:	dd 24       	eor	r13, r13

int isAnythingZone5()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone5 = 0;
	
	for(short zon5row = 0; zon5row < 5; zon5row++)
    1d5a:	97 01       	movw	r18, r14
    1d5c:	2c 52       	subi	r18, 0x2C	; 44
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	20 0f       	add	r18, r16
    1d62:	31 1f       	adc	r19, r17
    1d64:	22 0f       	add	r18, r18
    1d66:	33 1f       	adc	r19, r19
    1d68:	26 53       	subi	r18, 0x36	; 54
    1d6a:	3c 4f       	sbci	r19, 0xFC	; 252
	{
		zone5 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon5row)][robotY + 2];
    1d6c:	80 81       	ld	r24, Z
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	c8 0e       	add	r12, r24
    1d72:	d9 1e       	adc	r13, r25
    1d74:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone5()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone5 = 0;
	
	for(short zon5row = 0; zon5row < 5; zon5row++)
    1d76:	e2 17       	cp	r30, r18
    1d78:	f3 07       	cpc	r31, r19
    1d7a:	c1 f7       	brne	.-16     	; 0x1d6c <driveForward+0x2da>
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	fd 01       	movw	r30, r26
    1d84:	65 e0       	ldi	r22, 0x05	; 5
    1d86:	ee 0f       	add	r30, r30
    1d88:	ff 1f       	adc	r31, r31
    1d8a:	6a 95       	dec	r22
    1d8c:	e1 f7       	brne	.-8      	; 0x1d86 <driveForward+0x2f4>
    1d8e:	e8 1b       	sub	r30, r24
    1d90:	f9 0b       	sbc	r31, r25
    1d92:	ec 0f       	add	r30, r28
    1d94:	fd 1f       	adc	r31, r29
    1d96:	ee 0f       	add	r30, r30
    1d98:	ff 1f       	adc	r31, r31
    1d9a:	ec 53       	subi	r30, 0x3C	; 60
    1d9c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	70 e0       	ldi	r23, 0x00	; 0

int isAnythingZone6()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone6 = 0;
	
	for(short zon6row = 0; zon6row < 5; zon6row++)
    1da2:	97 01       	movw	r18, r14
    1da4:	21 53       	subi	r18, 0x31	; 49
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	20 0f       	add	r18, r16
    1daa:	31 1f       	adc	r19, r17
    1dac:	22 0f       	add	r18, r18
    1dae:	33 1f       	adc	r19, r19
    1db0:	26 53       	subi	r18, 0x36	; 54
    1db2:	3c 4f       	sbci	r19, 0xFC	; 252
	{
		zone6 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon6row)][robotY - 3];
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	68 0f       	add	r22, r24
    1dba:	79 1f       	adc	r23, r25
    1dbc:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone6()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone6 = 0;
	
	for(short zon6row = 0; zon6row < 5; zon6row++)
    1dbe:	e2 17       	cp	r30, r18
    1dc0:	f3 07       	cpc	r31, r19
    1dc2:	c1 f7       	brne	.-16     	; 0x1db4 <driveForward+0x322>
    1dc4:	fd 01       	movw	r30, r26
    1dc6:	95 e0       	ldi	r25, 0x05	; 5
    1dc8:	ee 0f       	add	r30, r30
    1dca:	ff 1f       	adc	r31, r31
    1dcc:	9a 95       	dec	r25
    1dce:	e1 f7       	brne	.-8      	; 0x1dc8 <driveForward+0x336>
    1dd0:	aa 0f       	add	r26, r26
    1dd2:	bb 1f       	adc	r27, r27
    1dd4:	ea 1b       	sub	r30, r26
    1dd6:	fb 0b       	sbc	r31, r27
    1dd8:	ec 0f       	add	r30, r28
    1dda:	fd 1f       	adc	r31, r29
    1ddc:	ee 0f       	add	r30, r30
    1dde:	ff 1f       	adc	r31, r31
    1de0:	e0 53       	subi	r30, 0x30	; 48
    1de2:	fc 4f       	sbci	r31, 0xFC	; 252
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	50 e0       	ldi	r21, 0x00	; 0

int isAnythingZone7()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone7 = 0;
	
	for(short zon7row = 0; zon7row < 5; zon7row++)
    1de8:	97 01       	movw	r18, r14
    1dea:	2b 52       	subi	r18, 0x2B	; 43
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	20 0f       	add	r18, r16
    1df0:	31 1f       	adc	r19, r17
    1df2:	22 0f       	add	r18, r18
    1df4:	33 1f       	adc	r19, r19
    1df6:	26 53       	subi	r18, 0x36	; 54
    1df8:	3c 4f       	sbci	r19, 0xFC	; 252
	{
		zone7 += courseMap[robotX + (ROBOT_DISTX + 1 + 0 + zon7row)][robotY + 3];
    1dfa:	80 81       	ld	r24, Z
    1dfc:	91 81       	ldd	r25, Z+1	; 0x01
    1dfe:	48 0f       	add	r20, r24
    1e00:	59 1f       	adc	r21, r25
    1e02:	fc 96       	adiw	r30, 0x3c	; 60

int isAnythingZone7()
{ //zone 3 is four rows in front and 3 cols left of center
	int zone7 = 0;
	
	for(short zon7row = 0; zon7row < 5; zon7row++)
    1e04:	e2 17       	cp	r30, r18
    1e06:	f3 07       	cpc	r31, r19
    1e08:	c1 f7       	brne	.-16     	; 0x1dfa <driveForward+0x368>
		short zone4 = isAnythingZone4();
		short zone5 = isAnythingZone5();
		short zone6 = isAnythingZone6();
		short zone7 = isAnythingZone7();
		
		if(zone1 != 0)
    1e0a:	45 28       	or	r4, r5
    1e0c:	49 f0       	breq	.+18     	; 0x1e20 <driveForward+0x38e>
		{//left 4
			act_setSpeed(&wheel_left, DRIVE_SPEED_MAX/128);
    1e0e:	84 e8       	ldi	r24, 0x84	; 132
    1e10:	92 e0       	ldi	r25, 0x02	; 2
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
			act_setSpeed(&wheel_right, DRIVE_SPEED_MAX/1);
    1e18:	88 e9       	ldi	r24, 0x98	; 152
    1e1a:	92 e0       	ldi	r25, 0x02	; 2
    1e1c:	6f e7       	ldi	r22, 0x7F	; 127
    1e1e:	41 c0       	rjmp	.+130    	; 0x1ea2 <driveForward+0x410>
			delay_ms(500);
		}
		else if(zone2 != 0)
    1e20:	67 28       	or	r6, r7
    1e22:	49 f0       	breq	.+18     	; 0x1e36 <driveForward+0x3a4>
		{//left 3
			act_setSpeed(&wheel_left, DRIVE_SPEED_MAX/64);
    1e24:	84 e8       	ldi	r24, 0x84	; 132
    1e26:	92 e0       	ldi	r25, 0x02	; 2
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
			act_setSpeed(&wheel_right, DRIVE_SPEED_MAX/2);
    1e2e:	88 e9       	ldi	r24, 0x98	; 152
    1e30:	92 e0       	ldi	r25, 0x02	; 2
    1e32:	6f e3       	ldi	r22, 0x3F	; 63
    1e34:	36 c0       	rjmp	.+108    	; 0x1ea2 <driveForward+0x410>
			delay_ms(500);
		}
		else if(zone4 != 0)
    1e36:	ab 28       	or	r10, r11
    1e38:	49 f0       	breq	.+18     	; 0x1e4c <driveForward+0x3ba>
		{//left 2
			act_setSpeed(&wheel_left, DRIVE_SPEED_MAX/32);
    1e3a:	84 e8       	ldi	r24, 0x84	; 132
    1e3c:	92 e0       	ldi	r25, 0x02	; 2
    1e3e:	63 e0       	ldi	r22, 0x03	; 3
    1e40:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
			act_setSpeed(&wheel_right, DRIVE_SPEED_MAX/4);
    1e44:	88 e9       	ldi	r24, 0x98	; 152
    1e46:	92 e0       	ldi	r25, 0x02	; 2
    1e48:	6f e1       	ldi	r22, 0x1F	; 31
    1e4a:	2b c0       	rjmp	.+86     	; 0x1ea2 <driveForward+0x410>
			delay_ms(500);
		}
		else if(zone6 != 0)
    1e4c:	67 2b       	or	r22, r23
    1e4e:	49 f0       	breq	.+18     	; 0x1e62 <driveForward+0x3d0>
		{//left1
			act_setSpeed(&wheel_left, DRIVE_SPEED_MAX/16);
    1e50:	84 e8       	ldi	r24, 0x84	; 132
    1e52:	92 e0       	ldi	r25, 0x02	; 2
    1e54:	67 e0       	ldi	r22, 0x07	; 7
    1e56:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
			act_setSpeed(&wheel_right, DRIVE_SPEED_MAX/8);
    1e5a:	88 e9       	ldi	r24, 0x98	; 152
    1e5c:	92 e0       	ldi	r25, 0x02	; 2
    1e5e:	6f e0       	ldi	r22, 0x0F	; 15
    1e60:	20 c0       	rjmp	.+64     	; 0x1ea2 <driveForward+0x410>
			delay_ms(500);
		}
		else if(zone3 != 0)
    1e62:	89 28       	or	r8, r9
    1e64:	49 f0       	breq	.+18     	; 0x1e78 <driveForward+0x3e6>
		{//right 3
			act_setSpeed(&wheel_left, DRIVE_SPEED_MAX/2);
    1e66:	84 e8       	ldi	r24, 0x84	; 132
    1e68:	92 e0       	ldi	r25, 0x02	; 2
    1e6a:	6f e3       	ldi	r22, 0x3F	; 63
    1e6c:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
			act_setSpeed(&wheel_right, DRIVE_SPEED_MAX/64);
    1e70:	88 e9       	ldi	r24, 0x98	; 152
    1e72:	92 e0       	ldi	r25, 0x02	; 2
    1e74:	61 e0       	ldi	r22, 0x01	; 1
    1e76:	15 c0       	rjmp	.+42     	; 0x1ea2 <driveForward+0x410>
			delay_ms(500);
		}
		else if(zone5 != 0)
    1e78:	cd 28       	or	r12, r13
    1e7a:	49 f0       	breq	.+18     	; 0x1e8e <driveForward+0x3fc>
		{//right 2
			act_setSpeed(&wheel_left, DRIVE_SPEED_MAX/4);
    1e7c:	84 e8       	ldi	r24, 0x84	; 132
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
    1e80:	6f e1       	ldi	r22, 0x1F	; 31
    1e82:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
			act_setSpeed(&wheel_right, DRIVE_SPEED_MAX/32);
    1e86:	88 e9       	ldi	r24, 0x98	; 152
    1e88:	92 e0       	ldi	r25, 0x02	; 2
    1e8a:	63 e0       	ldi	r22, 0x03	; 3
    1e8c:	0a c0       	rjmp	.+20     	; 0x1ea2 <driveForward+0x410>
			delay_ms(500);
		}
		else if(zone7 != 0)
    1e8e:	45 2b       	or	r20, r21
    1e90:	81 f0       	breq	.+32     	; 0x1eb2 <driveForward+0x420>
		{//right 1
			act_setSpeed(&wheel_left, DRIVE_SPEED_MAX/8);
    1e92:	84 e8       	ldi	r24, 0x84	; 132
    1e94:	92 e0       	ldi	r25, 0x02	; 2
    1e96:	6f e0       	ldi	r22, 0x0F	; 15
    1e98:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
			act_setSpeed(&wheel_right, DRIVE_SPEED_MAX/16);
    1e9c:	88 e9       	ldi	r24, 0x98	; 152
    1e9e:	92 e0       	ldi	r25, 0x02	; 2
    1ea0:	67 e0       	ldi	r22, 0x07	; 7
    1ea2:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
			delay_ms(500);
    1ea6:	64 ef       	ldi	r22, 0xF4	; 244
    1ea8:	71 e0       	ldi	r23, 0x01	; 1
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
		}
		
		act_setSpeed(&wheel_left, DRIVE_SPEED_MAX/10);
    1eb2:	84 e8       	ldi	r24, 0x84	; 132
    1eb4:	92 e0       	ldi	r25, 0x02	; 2
    1eb6:	6c e0       	ldi	r22, 0x0C	; 12
    1eb8:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
		act_setSpeed(&wheel_right, DRIVE_SPEED_MAX/10);
    1ebc:	88 e9       	ldi	r24, 0x98	; 152
    1ebe:	92 e0       	ldi	r25, 0x02	; 2
    1ec0:	6c e0       	ldi	r22, 0x0C	; 12
    1ec2:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
		return;		
			
	}

}
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	ff 90       	pop	r15
    1ed0:	ef 90       	pop	r14
    1ed2:	df 90       	pop	r13
    1ed4:	cf 90       	pop	r12
    1ed6:	bf 90       	pop	r11
    1ed8:	af 90       	pop	r10
    1eda:	9f 90       	pop	r9
    1edc:	8f 90       	pop	r8
    1ede:	7f 90       	pop	r7
    1ee0:	6f 90       	pop	r6
    1ee2:	5f 90       	pop	r5
    1ee4:	4f 90       	pop	r4
    1ee6:	08 95       	ret

00001ee8 <registerLED>:
static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
	statusLED.pin = pin;
    1ee8:	86 e6       	ldi	r24, 0x66	; 102
    1eea:	91 e0       	ldi	r25, 0x01	; 1
    1eec:	90 93 b6 0b 	sts	0x0BB6, r25
    1ef0:	80 93 b5 0b 	sts	0x0BB5, r24
	statusLED.activeHigh = activeHigh;
    1ef4:	80 91 b7 0b 	lds	r24, 0x0BB7
	statusLED.initialised=FALSE;
    1ef8:	8c 7f       	andi	r24, 0xFC	; 252
    1efa:	80 93 b7 0b 	sts	0x0BB7, r24


void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
	LED_set(led,TRUE);
    1efe:	85 eb       	ldi	r24, 0xB5	; 181
    1f00:	9b e0       	ldi	r25, 0x0B	; 11
    1f02:	6f ef       	ldi	r22, 0xFF	; 255
    1f04:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <LED_set>
	uartInit(bluetooth,115200);
}
// ----------- Register the statusLED -----------
void registerLED(void){
	statusLEDregister(B6,false);
}
    1f08:	08 95       	ret

00001f0a <initHardware>:
	uartInit(uart1,115200);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	encoderInit(quad_left);
    1f0a:	88 e5       	ldi	r24, 0x58	; 88
    1f0c:	92 e0       	ldi	r25, 0x02	; 2
    1f0e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_sensorInit_>
	encoderInit(quad_right);
    1f12:	89 e6       	ldi	r24, 0x69	; 105
    1f14:	92 e0       	ldi	r25, 0x02	; 2
    1f16:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_sensorInit_>
	distanceInit(ir_dist);
    1f1a:	8a e7       	ldi	r24, 0x7A	; 122
    1f1c:	92 e0       	ldi	r25, 0x02	; 2
    1f1e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_sensorInit_>
	servosInit(&wheel_bank,TIMER1);
    1f22:	8c ea       	ldi	r24, 0xAC	; 172
    1f24:	92 e0       	ldi	r25, 0x02	; 2
    1f26:	64 e0       	ldi	r22, 0x04	; 4
    1f28:	73 e0       	ldi	r23, 0x03	; 3
    1f2a:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <servosInit>
	servosInit(&ir_servo_bank,TIMER3);
    1f2e:	89 ec       	ldi	r24, 0xC9	; 201
    1f30:	92 e0       	ldi	r25, 0x02	; 2
    1f32:	6c e5       	ldi	r22, 0x5C	; 92
    1f34:	73 e0       	ldi	r23, 0x03	; 3
    1f36:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <servosInit>
	servosInit(&arm_bank,TIMER4);
    1f3a:	82 e2       	ldi	r24, 0x22	; 34
    1f3c:	93 e0       	ldi	r25, 0x03	; 3
    1f3e:	68 e8       	ldi	r22, 0x88	; 136
    1f40:	73 e0       	ldi	r23, 0x03	; 3
    1f42:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <servosInit>
	uartInit(bluetooth,115200);
    1f46:	80 e3       	ldi	r24, 0x30	; 48
    1f48:	92 e0       	ldi	r25, 0x02	; 2
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	52 ec       	ldi	r21, 0xC2	; 194
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_uartInit>
}
    1f56:	08 95       	ret

00001f58 <appInitHardware>:
// Initialise the hardware
// Now create any global variables such as motors, servos, sensors etc
// This routine is called once only and allows you to do set up the hardware
// Dont use any 'clock' functions here - use 'delay' functions instead
void appInitHardware(void) {
	initHardware();
    1f58:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <initHardware>
}
    1f5c:	08 95       	ret

00001f5e <sysInitHardware>:
SERVO right_shoulder = MAKE_SERVO(false,E4,1500,900);
static SERVO_LIST arm_bank_list[] = {&left_elbow,&left_shoulder,&right_elbow,&right_shoulder};
SERVO_DRIVER arm_bank = MAKE_SERVO_DRIVER(arm_bank_list);

// ----------- Initialise built in devices ------
void sysInitHardware(void){
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
	pin_make_input(sw->pin,TRUE);
    1f62:	80 91 56 02 	lds	r24, 0x0256
    1f66:	90 91 57 02 	lds	r25, 0x0257
    1f6a:	6f ef       	ldi	r22, 0xFF	; 255
    1f6c:	0e 94 1a 19 	call	0x3234	; 0x3234 <pin_make_input>
	SWITCH_init(&button);
	setErrorLog(&uart1SendByte);
    1f70:	0d e7       	ldi	r16, 0x7D	; 125
    1f72:	10 e1       	ldi	r17, 0x10	; 16
    1f74:	c8 01       	movw	r24, r16
    1f76:	0e 94 c6 20 	call	0x418c	; 0x418c <setErrorLog>
	rprintfInit(&uart1SendByte);
    1f7a:	c8 01       	movw	r24, r16
    1f7c:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <rprintfInit>
	uartInit(uart1,115200);
    1f80:	8b e0       	ldi	r24, 0x0B	; 11
    1f82:	92 e0       	ldi	r25, 0x02	; 2
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	52 ec       	ldi	r21, 0xC2	; 194
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	70 e0       	ldi	r23, 0x00	; 0
    1f8c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_uartInit>
}
    1f90:	1f 91       	pop	r17
    1f92:	0f 91       	pop	r16
    1f94:	08 95       	ret

00001f96 <__vector_25>:
#endif

#ifndef USART0_RX_vect
# error Uart0 Rx complete vector undefined
#else
UART_INTERRUPT_HANDLER(USART0_RX_vect){
    1f96:	1f 92       	push	r1
    1f98:	0f 92       	push	r0
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	0f 92       	push	r0
    1f9e:	11 24       	eor	r1, r1
    1fa0:	2f 93       	push	r18
    1fa2:	3f 93       	push	r19
    1fa4:	4f 93       	push	r20
    1fa6:	5f 93       	push	r21
    1fa8:	6f 93       	push	r22
    1faa:	7f 93       	push	r23
    1fac:	8f 93       	push	r24
    1fae:	9f 93       	push	r25
    1fb0:	af 93       	push	r26
    1fb2:	bf 93       	push	r27
    1fb4:	ef 93       	push	r30
    1fb6:	ff 93       	push	r31
	uartReceiveService(bluetooth);
    1fb8:	e0 91 50 02 	lds	r30, 0x0250
    1fbc:	f0 91 51 02 	lds	r31, 0x0251
    1fc0:	60 81       	ld	r22, Z
    1fc2:	80 e3       	ldi	r24, 0x30	; 48
    1fc4:	92 e0       	ldi	r25, 0x02	; 2
    1fc6:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__uartReceiveService>
}
    1fca:	ff 91       	pop	r31
    1fcc:	ef 91       	pop	r30
    1fce:	bf 91       	pop	r27
    1fd0:	af 91       	pop	r26
    1fd2:	9f 91       	pop	r25
    1fd4:	8f 91       	pop	r24
    1fd6:	7f 91       	pop	r23
    1fd8:	6f 91       	pop	r22
    1fda:	5f 91       	pop	r21
    1fdc:	4f 91       	pop	r20
    1fde:	3f 91       	pop	r19
    1fe0:	2f 91       	pop	r18
    1fe2:	0f 90       	pop	r0
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	0f 90       	pop	r0
    1fe8:	1f 90       	pop	r1
    1fea:	18 95       	reti

00001fec <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
UART_INTERRUPT_HANDLER(USART1_RX_vect){
    1fec:	1f 92       	push	r1
    1fee:	0f 92       	push	r0
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	0f 92       	push	r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	2f 93       	push	r18
    1ff8:	3f 93       	push	r19
    1ffa:	4f 93       	push	r20
    1ffc:	5f 93       	push	r21
    1ffe:	6f 93       	push	r22
    2000:	7f 93       	push	r23
    2002:	8f 93       	push	r24
    2004:	9f 93       	push	r25
    2006:	af 93       	push	r26
    2008:	bf 93       	push	r27
    200a:	ef 93       	push	r30
    200c:	ff 93       	push	r31
	uartReceiveService(uart1);
    200e:	e0 91 2b 02 	lds	r30, 0x022B
    2012:	f0 91 2c 02 	lds	r31, 0x022C
    2016:	60 81       	ld	r22, Z
    2018:	8b e0       	ldi	r24, 0x0B	; 11
    201a:	92 e0       	ldi	r25, 0x02	; 2
    201c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__uartReceiveService>
}
    2020:	ff 91       	pop	r31
    2022:	ef 91       	pop	r30
    2024:	bf 91       	pop	r27
    2026:	af 91       	pop	r26
    2028:	9f 91       	pop	r25
    202a:	8f 91       	pop	r24
    202c:	7f 91       	pop	r23
    202e:	6f 91       	pop	r22
    2030:	5f 91       	pop	r21
    2032:	4f 91       	pop	r20
    2034:	3f 91       	pop	r19
    2036:	2f 91       	pop	r18
    2038:	0f 90       	pop	r0
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	0f 90       	pop	r0
    203e:	1f 90       	pop	r1
    2040:	18 95       	reti

00002042 <__vector_27>:
}

#ifndef USART0_TX_vect
# error Uart0 Tx complete vector undefined
#else
UART_INTERRUPT_HANDLER(USART0_TX_vect){
    2042:	1f 92       	push	r1
    2044:	0f 92       	push	r0
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	0f 92       	push	r0
    204a:	11 24       	eor	r1, r1
    204c:	2f 93       	push	r18
    204e:	3f 93       	push	r19
    2050:	4f 93       	push	r20
    2052:	5f 93       	push	r21
    2054:	6f 93       	push	r22
    2056:	7f 93       	push	r23
    2058:	8f 93       	push	r24
    205a:	9f 93       	push	r25
    205c:	af 93       	push	r26
    205e:	bf 93       	push	r27
    2060:	ef 93       	push	r30
    2062:	ff 93       	push	r31
	uartTransmitService(bluetooth);
    2064:	80 e3       	ldi	r24, 0x30	; 48
    2066:	92 e0       	ldi	r25, 0x02	; 2
    2068:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__uartTransmitService>
}
    206c:	ff 91       	pop	r31
    206e:	ef 91       	pop	r30
    2070:	bf 91       	pop	r27
    2072:	af 91       	pop	r26
    2074:	9f 91       	pop	r25
    2076:	8f 91       	pop	r24
    2078:	7f 91       	pop	r23
    207a:	6f 91       	pop	r22
    207c:	5f 91       	pop	r21
    207e:	4f 91       	pop	r20
    2080:	3f 91       	pop	r19
    2082:	2f 91       	pop	r18
    2084:	0f 90       	pop	r0
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	0f 90       	pop	r0
    208a:	1f 90       	pop	r1
    208c:	18 95       	reti

0000208e <__vector_38>:
}

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
UART_INTERRUPT_HANDLER(USART1_TX_vect){
    208e:	1f 92       	push	r1
    2090:	0f 92       	push	r0
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	0f 92       	push	r0
    2096:	11 24       	eor	r1, r1
    2098:	2f 93       	push	r18
    209a:	3f 93       	push	r19
    209c:	4f 93       	push	r20
    209e:	5f 93       	push	r21
    20a0:	6f 93       	push	r22
    20a2:	7f 93       	push	r23
    20a4:	8f 93       	push	r24
    20a6:	9f 93       	push	r25
    20a8:	af 93       	push	r26
    20aa:	bf 93       	push	r27
    20ac:	ef 93       	push	r30
    20ae:	ff 93       	push	r31
	uartTransmitService(uart1);
    20b0:	8b e0       	ldi	r24, 0x0B	; 11
    20b2:	92 e0       	ldi	r25, 0x02	; 2
    20b4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__uartTransmitService>
}
    20b8:	ff 91       	pop	r31
    20ba:	ef 91       	pop	r30
    20bc:	bf 91       	pop	r27
    20be:	af 91       	pop	r26
    20c0:	9f 91       	pop	r25
    20c2:	8f 91       	pop	r24
    20c4:	7f 91       	pop	r23
    20c6:	6f 91       	pop	r22
    20c8:	5f 91       	pop	r21
    20ca:	4f 91       	pop	r20
    20cc:	3f 91       	pop	r19
    20ce:	2f 91       	pop	r18
    20d0:	0f 90       	pop	r0
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	0f 90       	pop	r0
    20d6:	1f 90       	pop	r1
    20d8:	18 95       	reti

000020da <bluetoothGetByte>:
}

// Create a routine to read a byte from bluetooth
// Returns -1 if there was no data
MAKE_READER( bluetoothGetByte){
	return uartGetByte(bluetooth);
    20da:	80 e3       	ldi	r24, 0x30	; 48
    20dc:	92 e0       	ldi	r25, 0x02	; 2
    20de:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__uartGetByte>
}
    20e2:	08 95       	ret

000020e4 <uart1GetByte>:
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(uart1);
    20e4:	8b e0       	ldi	r24, 0x0B	; 11
    20e6:	92 e0       	ldi	r25, 0x02	; 2
    20e8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__uartGetByte>
}
    20ec:	08 95       	ret

000020ee <bluetoothSendByte>:
// Create hardware UART bluetooth
HW_UART _bluetooth = MAKE_UART_BUFFERED(null,null,UCSR0A,UCSR0B,UBRR0L,UBRR0H,UDR0,null,BV(U2X0),E0,E1,&bluetoothGetByte,&bluetoothSendByte);

// Create a routine to write bytes to bluetooth
// You can set rprintf to use it by calling rprintfInit(&bluetoothSendByte)
MAKE_WRITER(bluetoothSendByte){
    20ee:	68 2f       	mov	r22, r24
	return uartSendByte(bluetooth,byte);
    20f0:	80 e3       	ldi	r24, 0x30	; 48
    20f2:	92 e0       	ldi	r25, 0x02	; 2
    20f4:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_uartSendByte>
}
    20f8:	08 95       	ret

000020fa <uart1SendByte>:
// Create hardware UART uart1
HW_UART _uart1 = MAKE_UART_BUFFERED(null,null,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
    20fa:	68 2f       	mov	r22, r24
	return uartSendByte(uart1,byte);
    20fc:	8b e0       	ldi	r24, 0x0B	; 11
    20fe:	92 e0       	ldi	r25, 0x02	; 2
    2100:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_uartSendByte>
}
    2104:	08 95       	ret

00002106 <__vector_49>:
#else
# error Missing vector definition
#endif

#ifdef TIMER5_COMPC_vect
TIMER_INTERRUPT_HANDLER(TIMER5_COMPC_vect){
    2106:	1f 92       	push	r1
    2108:	0f 92       	push	r0
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	0f 92       	push	r0
    210e:	11 24       	eor	r1, r1
    2110:	2f 93       	push	r18
    2112:	3f 93       	push	r19
    2114:	4f 93       	push	r20
    2116:	5f 93       	push	r21
    2118:	6f 93       	push	r22
    211a:	7f 93       	push	r23
    211c:	8f 93       	push	r24
    211e:	9f 93       	push	r25
    2120:	af 93       	push	r26
    2122:	bf 93       	push	r27
    2124:	ef 93       	push	r30
    2126:	ff 93       	push	r31
	__timer_compareService(TIMER5_COMPAREC);
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	92 e0       	ldi	r25, 0x02	; 2
    212c:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    2130:	ff 91       	pop	r31
    2132:	ef 91       	pop	r30
    2134:	bf 91       	pop	r27
    2136:	af 91       	pop	r26
    2138:	9f 91       	pop	r25
    213a:	8f 91       	pop	r24
    213c:	7f 91       	pop	r23
    213e:	6f 91       	pop	r22
    2140:	5f 91       	pop	r21
    2142:	4f 91       	pop	r20
    2144:	3f 91       	pop	r19
    2146:	2f 91       	pop	r18
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	0f 90       	pop	r0
    214e:	1f 90       	pop	r1
    2150:	18 95       	reti

00002152 <__vector_48>:
#else
# error Missing vector definition
#endif

#ifdef TIMER5_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER5_COMPB_vect){
    2152:	1f 92       	push	r1
    2154:	0f 92       	push	r0
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	0f 92       	push	r0
    215a:	11 24       	eor	r1, r1
    215c:	2f 93       	push	r18
    215e:	3f 93       	push	r19
    2160:	4f 93       	push	r20
    2162:	5f 93       	push	r21
    2164:	6f 93       	push	r22
    2166:	7f 93       	push	r23
    2168:	8f 93       	push	r24
    216a:	9f 93       	push	r25
    216c:	af 93       	push	r26
    216e:	bf 93       	push	r27
    2170:	ef 93       	push	r30
    2172:	ff 93       	push	r31
	__timer_compareService(TIMER5_COMPAREB);
    2174:	88 eb       	ldi	r24, 0xB8	; 184
    2176:	92 e0       	ldi	r25, 0x02	; 2
    2178:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    217c:	ff 91       	pop	r31
    217e:	ef 91       	pop	r30
    2180:	bf 91       	pop	r27
    2182:	af 91       	pop	r26
    2184:	9f 91       	pop	r25
    2186:	8f 91       	pop	r24
    2188:	7f 91       	pop	r23
    218a:	6f 91       	pop	r22
    218c:	5f 91       	pop	r21
    218e:	4f 91       	pop	r20
    2190:	3f 91       	pop	r19
    2192:	2f 91       	pop	r18
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	0f 90       	pop	r0
    219a:	1f 90       	pop	r1
    219c:	18 95       	reti

0000219e <__vector_47>:
#else
# error Missing vector definition
#endif

#ifdef TIMER5_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER5_COMPA_vect){
    219e:	1f 92       	push	r1
    21a0:	0f 92       	push	r0
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	0f 92       	push	r0
    21a6:	11 24       	eor	r1, r1
    21a8:	2f 93       	push	r18
    21aa:	3f 93       	push	r19
    21ac:	4f 93       	push	r20
    21ae:	5f 93       	push	r21
    21b0:	6f 93       	push	r22
    21b2:	7f 93       	push	r23
    21b4:	8f 93       	push	r24
    21b6:	9f 93       	push	r25
    21b8:	af 93       	push	r26
    21ba:	bf 93       	push	r27
    21bc:	ef 93       	push	r30
    21be:	ff 93       	push	r31
	__timer_compareService(TIMER5_COMPAREA);
    21c0:	88 ea       	ldi	r24, 0xA8	; 168
    21c2:	92 e0       	ldi	r25, 0x02	; 2
    21c4:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    21c8:	ff 91       	pop	r31
    21ca:	ef 91       	pop	r30
    21cc:	bf 91       	pop	r27
    21ce:	af 91       	pop	r26
    21d0:	9f 91       	pop	r25
    21d2:	8f 91       	pop	r24
    21d4:	7f 91       	pop	r23
    21d6:	6f 91       	pop	r22
    21d8:	5f 91       	pop	r21
    21da:	4f 91       	pop	r20
    21dc:	3f 91       	pop	r19
    21de:	2f 91       	pop	r18
    21e0:	0f 90       	pop	r0
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	0f 90       	pop	r0
    21e6:	1f 90       	pop	r1
    21e8:	18 95       	reti

000021ea <__vector_44>:
#else
# error Missing vector definition
#endif

#ifdef TIMER4_COMPC_vect
TIMER_INTERRUPT_HANDLER(TIMER4_COMPC_vect){
    21ea:	1f 92       	push	r1
    21ec:	0f 92       	push	r0
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	0f 92       	push	r0
    21f2:	11 24       	eor	r1, r1
    21f4:	2f 93       	push	r18
    21f6:	3f 93       	push	r19
    21f8:	4f 93       	push	r20
    21fa:	5f 93       	push	r21
    21fc:	6f 93       	push	r22
    21fe:	7f 93       	push	r23
    2200:	8f 93       	push	r24
    2202:	9f 93       	push	r25
    2204:	af 93       	push	r26
    2206:	bf 93       	push	r27
    2208:	ef 93       	push	r30
    220a:	ff 93       	push	r31
	__timer_compareService(TIMER4_COMPAREC);
    220c:	88 e9       	ldi	r24, 0x98	; 152
    220e:	92 e0       	ldi	r25, 0x02	; 2
    2210:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    2214:	ff 91       	pop	r31
    2216:	ef 91       	pop	r30
    2218:	bf 91       	pop	r27
    221a:	af 91       	pop	r26
    221c:	9f 91       	pop	r25
    221e:	8f 91       	pop	r24
    2220:	7f 91       	pop	r23
    2222:	6f 91       	pop	r22
    2224:	5f 91       	pop	r21
    2226:	4f 91       	pop	r20
    2228:	3f 91       	pop	r19
    222a:	2f 91       	pop	r18
    222c:	0f 90       	pop	r0
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	0f 90       	pop	r0
    2232:	1f 90       	pop	r1
    2234:	18 95       	reti

00002236 <__vector_43>:
#else
# error Missing vector definition
#endif

#ifdef TIMER4_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER4_COMPB_vect){
    2236:	1f 92       	push	r1
    2238:	0f 92       	push	r0
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	0f 92       	push	r0
    223e:	11 24       	eor	r1, r1
    2240:	2f 93       	push	r18
    2242:	3f 93       	push	r19
    2244:	4f 93       	push	r20
    2246:	5f 93       	push	r21
    2248:	6f 93       	push	r22
    224a:	7f 93       	push	r23
    224c:	8f 93       	push	r24
    224e:	9f 93       	push	r25
    2250:	af 93       	push	r26
    2252:	bf 93       	push	r27
    2254:	ef 93       	push	r30
    2256:	ff 93       	push	r31
	__timer_compareService(TIMER4_COMPAREB);
    2258:	88 e8       	ldi	r24, 0x88	; 136
    225a:	92 e0       	ldi	r25, 0x02	; 2
    225c:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    2260:	ff 91       	pop	r31
    2262:	ef 91       	pop	r30
    2264:	bf 91       	pop	r27
    2266:	af 91       	pop	r26
    2268:	9f 91       	pop	r25
    226a:	8f 91       	pop	r24
    226c:	7f 91       	pop	r23
    226e:	6f 91       	pop	r22
    2270:	5f 91       	pop	r21
    2272:	4f 91       	pop	r20
    2274:	3f 91       	pop	r19
    2276:	2f 91       	pop	r18
    2278:	0f 90       	pop	r0
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	0f 90       	pop	r0
    227e:	1f 90       	pop	r1
    2280:	18 95       	reti

00002282 <__vector_42>:
#else
# error Missing vector definition
#endif

#ifdef TIMER4_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER4_COMPA_vect){
    2282:	1f 92       	push	r1
    2284:	0f 92       	push	r0
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	0f 92       	push	r0
    228a:	11 24       	eor	r1, r1
    228c:	2f 93       	push	r18
    228e:	3f 93       	push	r19
    2290:	4f 93       	push	r20
    2292:	5f 93       	push	r21
    2294:	6f 93       	push	r22
    2296:	7f 93       	push	r23
    2298:	8f 93       	push	r24
    229a:	9f 93       	push	r25
    229c:	af 93       	push	r26
    229e:	bf 93       	push	r27
    22a0:	ef 93       	push	r30
    22a2:	ff 93       	push	r31
	__timer_compareService(TIMER4_COMPAREA);
    22a4:	88 e7       	ldi	r24, 0x78	; 120
    22a6:	92 e0       	ldi	r25, 0x02	; 2
    22a8:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    22ac:	ff 91       	pop	r31
    22ae:	ef 91       	pop	r30
    22b0:	bf 91       	pop	r27
    22b2:	af 91       	pop	r26
    22b4:	9f 91       	pop	r25
    22b6:	8f 91       	pop	r24
    22b8:	7f 91       	pop	r23
    22ba:	6f 91       	pop	r22
    22bc:	5f 91       	pop	r21
    22be:	4f 91       	pop	r20
    22c0:	3f 91       	pop	r19
    22c2:	2f 91       	pop	r18
    22c4:	0f 90       	pop	r0
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	0f 90       	pop	r0
    22ca:	1f 90       	pop	r1
    22cc:	18 95       	reti

000022ce <__vector_34>:
#else
# error Missing vector definition
#endif

#ifdef TIMER3_COMPC_vect
TIMER_INTERRUPT_HANDLER(TIMER3_COMPC_vect){
    22ce:	1f 92       	push	r1
    22d0:	0f 92       	push	r0
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	0f 92       	push	r0
    22d6:	11 24       	eor	r1, r1
    22d8:	2f 93       	push	r18
    22da:	3f 93       	push	r19
    22dc:	4f 93       	push	r20
    22de:	5f 93       	push	r21
    22e0:	6f 93       	push	r22
    22e2:	7f 93       	push	r23
    22e4:	8f 93       	push	r24
    22e6:	9f 93       	push	r25
    22e8:	af 93       	push	r26
    22ea:	bf 93       	push	r27
    22ec:	ef 93       	push	r30
    22ee:	ff 93       	push	r31
	__timer_compareService(TIMER3_COMPAREC);
    22f0:	88 e6       	ldi	r24, 0x68	; 104
    22f2:	92 e0       	ldi	r25, 0x02	; 2
    22f4:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    22f8:	ff 91       	pop	r31
    22fa:	ef 91       	pop	r30
    22fc:	bf 91       	pop	r27
    22fe:	af 91       	pop	r26
    2300:	9f 91       	pop	r25
    2302:	8f 91       	pop	r24
    2304:	7f 91       	pop	r23
    2306:	6f 91       	pop	r22
    2308:	5f 91       	pop	r21
    230a:	4f 91       	pop	r20
    230c:	3f 91       	pop	r19
    230e:	2f 91       	pop	r18
    2310:	0f 90       	pop	r0
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	0f 90       	pop	r0
    2316:	1f 90       	pop	r1
    2318:	18 95       	reti

0000231a <__vector_33>:
#else
# error Missing vector definition
#endif

#ifdef TIMER3_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER3_COMPB_vect){
    231a:	1f 92       	push	r1
    231c:	0f 92       	push	r0
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	0f 92       	push	r0
    2322:	11 24       	eor	r1, r1
    2324:	2f 93       	push	r18
    2326:	3f 93       	push	r19
    2328:	4f 93       	push	r20
    232a:	5f 93       	push	r21
    232c:	6f 93       	push	r22
    232e:	7f 93       	push	r23
    2330:	8f 93       	push	r24
    2332:	9f 93       	push	r25
    2334:	af 93       	push	r26
    2336:	bf 93       	push	r27
    2338:	ef 93       	push	r30
    233a:	ff 93       	push	r31
	__timer_compareService(TIMER3_COMPAREB);
    233c:	88 e5       	ldi	r24, 0x58	; 88
    233e:	92 e0       	ldi	r25, 0x02	; 2
    2340:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    2344:	ff 91       	pop	r31
    2346:	ef 91       	pop	r30
    2348:	bf 91       	pop	r27
    234a:	af 91       	pop	r26
    234c:	9f 91       	pop	r25
    234e:	8f 91       	pop	r24
    2350:	7f 91       	pop	r23
    2352:	6f 91       	pop	r22
    2354:	5f 91       	pop	r21
    2356:	4f 91       	pop	r20
    2358:	3f 91       	pop	r19
    235a:	2f 91       	pop	r18
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	0f 90       	pop	r0
    2362:	1f 90       	pop	r1
    2364:	18 95       	reti

00002366 <__vector_32>:
#else
# error Missing vector definition
#endif

#ifdef TIMER3_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER3_COMPA_vect){
    2366:	1f 92       	push	r1
    2368:	0f 92       	push	r0
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	0f 92       	push	r0
    236e:	11 24       	eor	r1, r1
    2370:	2f 93       	push	r18
    2372:	3f 93       	push	r19
    2374:	4f 93       	push	r20
    2376:	5f 93       	push	r21
    2378:	6f 93       	push	r22
    237a:	7f 93       	push	r23
    237c:	8f 93       	push	r24
    237e:	9f 93       	push	r25
    2380:	af 93       	push	r26
    2382:	bf 93       	push	r27
    2384:	ef 93       	push	r30
    2386:	ff 93       	push	r31
	__timer_compareService(TIMER3_COMPAREA);
    2388:	88 e4       	ldi	r24, 0x48	; 72
    238a:	92 e0       	ldi	r25, 0x02	; 2
    238c:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    2390:	ff 91       	pop	r31
    2392:	ef 91       	pop	r30
    2394:	bf 91       	pop	r27
    2396:	af 91       	pop	r26
    2398:	9f 91       	pop	r25
    239a:	8f 91       	pop	r24
    239c:	7f 91       	pop	r23
    239e:	6f 91       	pop	r22
    23a0:	5f 91       	pop	r21
    23a2:	4f 91       	pop	r20
    23a4:	3f 91       	pop	r19
    23a6:	2f 91       	pop	r18
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	0f 90       	pop	r0
    23ae:	1f 90       	pop	r1
    23b0:	18 95       	reti

000023b2 <__vector_14>:
#else
# error Missing vector definition
#endif

#ifdef TIMER2_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect){
    23b2:	1f 92       	push	r1
    23b4:	0f 92       	push	r0
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	0f 92       	push	r0
    23ba:	11 24       	eor	r1, r1
    23bc:	2f 93       	push	r18
    23be:	3f 93       	push	r19
    23c0:	4f 93       	push	r20
    23c2:	5f 93       	push	r21
    23c4:	6f 93       	push	r22
    23c6:	7f 93       	push	r23
    23c8:	8f 93       	push	r24
    23ca:	9f 93       	push	r25
    23cc:	af 93       	push	r26
    23ce:	bf 93       	push	r27
    23d0:	ef 93       	push	r30
    23d2:	ff 93       	push	r31
	__timer_compareService(TIMER2_COMPAREB);
    23d4:	88 e3       	ldi	r24, 0x38	; 56
    23d6:	92 e0       	ldi	r25, 0x02	; 2
    23d8:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    23dc:	ff 91       	pop	r31
    23de:	ef 91       	pop	r30
    23e0:	bf 91       	pop	r27
    23e2:	af 91       	pop	r26
    23e4:	9f 91       	pop	r25
    23e6:	8f 91       	pop	r24
    23e8:	7f 91       	pop	r23
    23ea:	6f 91       	pop	r22
    23ec:	5f 91       	pop	r21
    23ee:	4f 91       	pop	r20
    23f0:	3f 91       	pop	r19
    23f2:	2f 91       	pop	r18
    23f4:	0f 90       	pop	r0
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	0f 90       	pop	r0
    23fa:	1f 90       	pop	r1
    23fc:	18 95       	reti

000023fe <__vector_13>:
#else
# error Missing vector definition
#endif

#ifdef TIMER2_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect){
    23fe:	1f 92       	push	r1
    2400:	0f 92       	push	r0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	0f 92       	push	r0
    2406:	11 24       	eor	r1, r1
    2408:	2f 93       	push	r18
    240a:	3f 93       	push	r19
    240c:	4f 93       	push	r20
    240e:	5f 93       	push	r21
    2410:	6f 93       	push	r22
    2412:	7f 93       	push	r23
    2414:	8f 93       	push	r24
    2416:	9f 93       	push	r25
    2418:	af 93       	push	r26
    241a:	bf 93       	push	r27
    241c:	ef 93       	push	r30
    241e:	ff 93       	push	r31
	__timer_compareService(TIMER2_COMPAREA);
    2420:	88 e2       	ldi	r24, 0x28	; 40
    2422:	92 e0       	ldi	r25, 0x02	; 2
    2424:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    2428:	ff 91       	pop	r31
    242a:	ef 91       	pop	r30
    242c:	bf 91       	pop	r27
    242e:	af 91       	pop	r26
    2430:	9f 91       	pop	r25
    2432:	8f 91       	pop	r24
    2434:	7f 91       	pop	r23
    2436:	6f 91       	pop	r22
    2438:	5f 91       	pop	r21
    243a:	4f 91       	pop	r20
    243c:	3f 91       	pop	r19
    243e:	2f 91       	pop	r18
    2440:	0f 90       	pop	r0
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	0f 90       	pop	r0
    2446:	1f 90       	pop	r1
    2448:	18 95       	reti

0000244a <__vector_19>:
#else
# error Missing vector definition
#endif

#ifdef TIMER1_COMPC_vect
TIMER_INTERRUPT_HANDLER(TIMER1_COMPC_vect){
    244a:	1f 92       	push	r1
    244c:	0f 92       	push	r0
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	0f 92       	push	r0
    2452:	11 24       	eor	r1, r1
    2454:	2f 93       	push	r18
    2456:	3f 93       	push	r19
    2458:	4f 93       	push	r20
    245a:	5f 93       	push	r21
    245c:	6f 93       	push	r22
    245e:	7f 93       	push	r23
    2460:	8f 93       	push	r24
    2462:	9f 93       	push	r25
    2464:	af 93       	push	r26
    2466:	bf 93       	push	r27
    2468:	ef 93       	push	r30
    246a:	ff 93       	push	r31
	__timer_compareService(TIMER1_COMPAREC);
    246c:	88 e1       	ldi	r24, 0x18	; 24
    246e:	92 e0       	ldi	r25, 0x02	; 2
    2470:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    2474:	ff 91       	pop	r31
    2476:	ef 91       	pop	r30
    2478:	bf 91       	pop	r27
    247a:	af 91       	pop	r26
    247c:	9f 91       	pop	r25
    247e:	8f 91       	pop	r24
    2480:	7f 91       	pop	r23
    2482:	6f 91       	pop	r22
    2484:	5f 91       	pop	r21
    2486:	4f 91       	pop	r20
    2488:	3f 91       	pop	r19
    248a:	2f 91       	pop	r18
    248c:	0f 90       	pop	r0
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	0f 90       	pop	r0
    2492:	1f 90       	pop	r1
    2494:	18 95       	reti

00002496 <__vector_18>:
#else
# error Missing vector definition
#endif

#ifdef TIMER1_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect){
    2496:	1f 92       	push	r1
    2498:	0f 92       	push	r0
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	0f 92       	push	r0
    249e:	11 24       	eor	r1, r1
    24a0:	2f 93       	push	r18
    24a2:	3f 93       	push	r19
    24a4:	4f 93       	push	r20
    24a6:	5f 93       	push	r21
    24a8:	6f 93       	push	r22
    24aa:	7f 93       	push	r23
    24ac:	8f 93       	push	r24
    24ae:	9f 93       	push	r25
    24b0:	af 93       	push	r26
    24b2:	bf 93       	push	r27
    24b4:	ef 93       	push	r30
    24b6:	ff 93       	push	r31
	__timer_compareService(TIMER1_COMPAREB);
    24b8:	88 e0       	ldi	r24, 0x08	; 8
    24ba:	92 e0       	ldi	r25, 0x02	; 2
    24bc:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    24c0:	ff 91       	pop	r31
    24c2:	ef 91       	pop	r30
    24c4:	bf 91       	pop	r27
    24c6:	af 91       	pop	r26
    24c8:	9f 91       	pop	r25
    24ca:	8f 91       	pop	r24
    24cc:	7f 91       	pop	r23
    24ce:	6f 91       	pop	r22
    24d0:	5f 91       	pop	r21
    24d2:	4f 91       	pop	r20
    24d4:	3f 91       	pop	r19
    24d6:	2f 91       	pop	r18
    24d8:	0f 90       	pop	r0
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	0f 90       	pop	r0
    24de:	1f 90       	pop	r1
    24e0:	18 95       	reti

000024e2 <__vector_17>:
#else
# error Missing vector definition
#endif

#ifdef TIMER1_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect){
    24e2:	1f 92       	push	r1
    24e4:	0f 92       	push	r0
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	0f 92       	push	r0
    24ea:	11 24       	eor	r1, r1
    24ec:	2f 93       	push	r18
    24ee:	3f 93       	push	r19
    24f0:	4f 93       	push	r20
    24f2:	5f 93       	push	r21
    24f4:	6f 93       	push	r22
    24f6:	7f 93       	push	r23
    24f8:	8f 93       	push	r24
    24fa:	9f 93       	push	r25
    24fc:	af 93       	push	r26
    24fe:	bf 93       	push	r27
    2500:	ef 93       	push	r30
    2502:	ff 93       	push	r31
	__timer_compareService(TIMER1_COMPAREA);
    2504:	88 ef       	ldi	r24, 0xF8	; 248
    2506:	91 e0       	ldi	r25, 0x01	; 1
    2508:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    250c:	ff 91       	pop	r31
    250e:	ef 91       	pop	r30
    2510:	bf 91       	pop	r27
    2512:	af 91       	pop	r26
    2514:	9f 91       	pop	r25
    2516:	8f 91       	pop	r24
    2518:	7f 91       	pop	r23
    251a:	6f 91       	pop	r22
    251c:	5f 91       	pop	r21
    251e:	4f 91       	pop	r20
    2520:	3f 91       	pop	r19
    2522:	2f 91       	pop	r18
    2524:	0f 90       	pop	r0
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	0f 90       	pop	r0
    252a:	1f 90       	pop	r1
    252c:	18 95       	reti

0000252e <__vector_22>:
#else
# error Missing vector definition
#endif

#ifdef TIMER0_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER0_COMPB_vect){
    252e:	1f 92       	push	r1
    2530:	0f 92       	push	r0
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	0f 92       	push	r0
    2536:	11 24       	eor	r1, r1
    2538:	2f 93       	push	r18
    253a:	3f 93       	push	r19
    253c:	4f 93       	push	r20
    253e:	5f 93       	push	r21
    2540:	6f 93       	push	r22
    2542:	7f 93       	push	r23
    2544:	8f 93       	push	r24
    2546:	9f 93       	push	r25
    2548:	af 93       	push	r26
    254a:	bf 93       	push	r27
    254c:	ef 93       	push	r30
    254e:	ff 93       	push	r31
	__timer_compareService(TIMER0_COMPAREB);
    2550:	88 ee       	ldi	r24, 0xE8	; 232
    2552:	91 e0       	ldi	r25, 0x01	; 1
    2554:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    2558:	ff 91       	pop	r31
    255a:	ef 91       	pop	r30
    255c:	bf 91       	pop	r27
    255e:	af 91       	pop	r26
    2560:	9f 91       	pop	r25
    2562:	8f 91       	pop	r24
    2564:	7f 91       	pop	r23
    2566:	6f 91       	pop	r22
    2568:	5f 91       	pop	r21
    256a:	4f 91       	pop	r20
    256c:	3f 91       	pop	r19
    256e:	2f 91       	pop	r18
    2570:	0f 90       	pop	r0
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	0f 90       	pop	r0
    2576:	1f 90       	pop	r1
    2578:	18 95       	reti

0000257a <__vector_21>:
#else
# error Missing vector definition
#endif

#ifdef TIMER0_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER0_COMPA_vect){
    257a:	1f 92       	push	r1
    257c:	0f 92       	push	r0
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	0f 92       	push	r0
    2582:	11 24       	eor	r1, r1
    2584:	2f 93       	push	r18
    2586:	3f 93       	push	r19
    2588:	4f 93       	push	r20
    258a:	5f 93       	push	r21
    258c:	6f 93       	push	r22
    258e:	7f 93       	push	r23
    2590:	8f 93       	push	r24
    2592:	9f 93       	push	r25
    2594:	af 93       	push	r26
    2596:	bf 93       	push	r27
    2598:	ef 93       	push	r30
    259a:	ff 93       	push	r31
	__timer_compareService(TIMER0_COMPAREA);
    259c:	88 ed       	ldi	r24, 0xD8	; 216
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	0e 94 a5 20 	call	0x414a	; 0x414a <__timer_compareService>
}
    25a4:	ff 91       	pop	r31
    25a6:	ef 91       	pop	r30
    25a8:	bf 91       	pop	r27
    25aa:	af 91       	pop	r26
    25ac:	9f 91       	pop	r25
    25ae:	8f 91       	pop	r24
    25b0:	7f 91       	pop	r23
    25b2:	6f 91       	pop	r22
    25b4:	5f 91       	pop	r21
    25b6:	4f 91       	pop	r20
    25b8:	3f 91       	pop	r19
    25ba:	2f 91       	pop	r18
    25bc:	0f 90       	pop	r0
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	0f 90       	pop	r0
    25c2:	1f 90       	pop	r1
    25c4:	18 95       	reti

000025c6 <__vector_46>:
#else
# error Missing vector definition
#endif

#ifdef TIMER5_CAPT_vect
TIMER_INTERRUPT_HANDLER(TIMER5_CAPT_vect){
    25c6:	1f 92       	push	r1
    25c8:	0f 92       	push	r0
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	0f 92       	push	r0
    25ce:	11 24       	eor	r1, r1
    25d0:	2f 93       	push	r18
    25d2:	3f 93       	push	r19
    25d4:	4f 93       	push	r20
    25d6:	5f 93       	push	r21
    25d8:	6f 93       	push	r22
    25da:	7f 93       	push	r23
    25dc:	8f 93       	push	r24
    25de:	9f 93       	push	r25
    25e0:	af 93       	push	r26
    25e2:	bf 93       	push	r27
    25e4:	ef 93       	push	r30
    25e6:	ff 93       	push	r31
	__timer_captureService(TIMER5);
    25e8:	84 eb       	ldi	r24, 0xB4	; 180
    25ea:	93 e0       	ldi	r25, 0x03	; 3
    25ec:	0e 94 96 20 	call	0x412c	; 0x412c <__timer_captureService>
}
    25f0:	ff 91       	pop	r31
    25f2:	ef 91       	pop	r30
    25f4:	bf 91       	pop	r27
    25f6:	af 91       	pop	r26
    25f8:	9f 91       	pop	r25
    25fa:	8f 91       	pop	r24
    25fc:	7f 91       	pop	r23
    25fe:	6f 91       	pop	r22
    2600:	5f 91       	pop	r21
    2602:	4f 91       	pop	r20
    2604:	3f 91       	pop	r19
    2606:	2f 91       	pop	r18
    2608:	0f 90       	pop	r0
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	0f 90       	pop	r0
    260e:	1f 90       	pop	r1
    2610:	18 95       	reti

00002612 <__vector_41>:
#else
# error Missing vector definition
#endif

#ifdef TIMER4_CAPT_vect
TIMER_INTERRUPT_HANDLER(TIMER4_CAPT_vect){
    2612:	1f 92       	push	r1
    2614:	0f 92       	push	r0
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	0f 92       	push	r0
    261a:	11 24       	eor	r1, r1
    261c:	2f 93       	push	r18
    261e:	3f 93       	push	r19
    2620:	4f 93       	push	r20
    2622:	5f 93       	push	r21
    2624:	6f 93       	push	r22
    2626:	7f 93       	push	r23
    2628:	8f 93       	push	r24
    262a:	9f 93       	push	r25
    262c:	af 93       	push	r26
    262e:	bf 93       	push	r27
    2630:	ef 93       	push	r30
    2632:	ff 93       	push	r31
	__timer_captureService(TIMER4);
    2634:	88 e8       	ldi	r24, 0x88	; 136
    2636:	93 e0       	ldi	r25, 0x03	; 3
    2638:	0e 94 96 20 	call	0x412c	; 0x412c <__timer_captureService>
}
    263c:	ff 91       	pop	r31
    263e:	ef 91       	pop	r30
    2640:	bf 91       	pop	r27
    2642:	af 91       	pop	r26
    2644:	9f 91       	pop	r25
    2646:	8f 91       	pop	r24
    2648:	7f 91       	pop	r23
    264a:	6f 91       	pop	r22
    264c:	5f 91       	pop	r21
    264e:	4f 91       	pop	r20
    2650:	3f 91       	pop	r19
    2652:	2f 91       	pop	r18
    2654:	0f 90       	pop	r0
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	0f 90       	pop	r0
    265a:	1f 90       	pop	r1
    265c:	18 95       	reti

0000265e <__vector_31>:
#else
# error Missing vector definition
#endif

#ifdef TIMER3_CAPT_vect
TIMER_INTERRUPT_HANDLER(TIMER3_CAPT_vect){
    265e:	1f 92       	push	r1
    2660:	0f 92       	push	r0
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	0f 92       	push	r0
    2666:	11 24       	eor	r1, r1
    2668:	2f 93       	push	r18
    266a:	3f 93       	push	r19
    266c:	4f 93       	push	r20
    266e:	5f 93       	push	r21
    2670:	6f 93       	push	r22
    2672:	7f 93       	push	r23
    2674:	8f 93       	push	r24
    2676:	9f 93       	push	r25
    2678:	af 93       	push	r26
    267a:	bf 93       	push	r27
    267c:	ef 93       	push	r30
    267e:	ff 93       	push	r31
	__timer_captureService(TIMER3);
    2680:	8c e5       	ldi	r24, 0x5C	; 92
    2682:	93 e0       	ldi	r25, 0x03	; 3
    2684:	0e 94 96 20 	call	0x412c	; 0x412c <__timer_captureService>
}
    2688:	ff 91       	pop	r31
    268a:	ef 91       	pop	r30
    268c:	bf 91       	pop	r27
    268e:	af 91       	pop	r26
    2690:	9f 91       	pop	r25
    2692:	8f 91       	pop	r24
    2694:	7f 91       	pop	r23
    2696:	6f 91       	pop	r22
    2698:	5f 91       	pop	r21
    269a:	4f 91       	pop	r20
    269c:	3f 91       	pop	r19
    269e:	2f 91       	pop	r18
    26a0:	0f 90       	pop	r0
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	0f 90       	pop	r0
    26a6:	1f 90       	pop	r1
    26a8:	18 95       	reti

000026aa <__vector_16>:
#else
# error Missing vector definition
#endif

#ifdef TIMER1_CAPT_vect
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect){
    26aa:	1f 92       	push	r1
    26ac:	0f 92       	push	r0
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	0f 92       	push	r0
    26b2:	11 24       	eor	r1, r1
    26b4:	2f 93       	push	r18
    26b6:	3f 93       	push	r19
    26b8:	4f 93       	push	r20
    26ba:	5f 93       	push	r21
    26bc:	6f 93       	push	r22
    26be:	7f 93       	push	r23
    26c0:	8f 93       	push	r24
    26c2:	9f 93       	push	r25
    26c4:	af 93       	push	r26
    26c6:	bf 93       	push	r27
    26c8:	ef 93       	push	r30
    26ca:	ff 93       	push	r31
	__timer_captureService(TIMER1);
    26cc:	84 e0       	ldi	r24, 0x04	; 4
    26ce:	93 e0       	ldi	r25, 0x03	; 3
    26d0:	0e 94 96 20 	call	0x412c	; 0x412c <__timer_captureService>
}
    26d4:	ff 91       	pop	r31
    26d6:	ef 91       	pop	r30
    26d8:	bf 91       	pop	r27
    26da:	af 91       	pop	r26
    26dc:	9f 91       	pop	r25
    26de:	8f 91       	pop	r24
    26e0:	7f 91       	pop	r23
    26e2:	6f 91       	pop	r22
    26e4:	5f 91       	pop	r21
    26e6:	4f 91       	pop	r20
    26e8:	3f 91       	pop	r19
    26ea:	2f 91       	pop	r18
    26ec:	0f 90       	pop	r0
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	0f 90       	pop	r0
    26f2:	1f 90       	pop	r1
    26f4:	18 95       	reti

000026f6 <__vector_50>:
#else
# error Missing vector definition
#endif

#ifdef TIMER5_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER5_OVF_vect){
    26f6:	1f 92       	push	r1
    26f8:	0f 92       	push	r0
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	0f 92       	push	r0
    26fe:	11 24       	eor	r1, r1
    2700:	2f 93       	push	r18
    2702:	3f 93       	push	r19
    2704:	4f 93       	push	r20
    2706:	5f 93       	push	r21
    2708:	6f 93       	push	r22
    270a:	7f 93       	push	r23
    270c:	8f 93       	push	r24
    270e:	9f 93       	push	r25
    2710:	af 93       	push	r26
    2712:	bf 93       	push	r27
    2714:	ef 93       	push	r30
    2716:	ff 93       	push	r31
	__timer_overflowService(TIMER5);
    2718:	84 eb       	ldi	r24, 0xB4	; 180
    271a:	93 e0       	ldi	r25, 0x03	; 3
    271c:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__timer_overflowService>
}
    2720:	ff 91       	pop	r31
    2722:	ef 91       	pop	r30
    2724:	bf 91       	pop	r27
    2726:	af 91       	pop	r26
    2728:	9f 91       	pop	r25
    272a:	8f 91       	pop	r24
    272c:	7f 91       	pop	r23
    272e:	6f 91       	pop	r22
    2730:	5f 91       	pop	r21
    2732:	4f 91       	pop	r20
    2734:	3f 91       	pop	r19
    2736:	2f 91       	pop	r18
    2738:	0f 90       	pop	r0
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	0f 90       	pop	r0
    273e:	1f 90       	pop	r1
    2740:	18 95       	reti

00002742 <__vector_45>:
#else
# error Missing vector definition
#endif

#ifdef TIMER4_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER4_OVF_vect){
    2742:	1f 92       	push	r1
    2744:	0f 92       	push	r0
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	0f 92       	push	r0
    274a:	11 24       	eor	r1, r1
    274c:	2f 93       	push	r18
    274e:	3f 93       	push	r19
    2750:	4f 93       	push	r20
    2752:	5f 93       	push	r21
    2754:	6f 93       	push	r22
    2756:	7f 93       	push	r23
    2758:	8f 93       	push	r24
    275a:	9f 93       	push	r25
    275c:	af 93       	push	r26
    275e:	bf 93       	push	r27
    2760:	ef 93       	push	r30
    2762:	ff 93       	push	r31
	__timer_overflowService(TIMER4);
    2764:	88 e8       	ldi	r24, 0x88	; 136
    2766:	93 e0       	ldi	r25, 0x03	; 3
    2768:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__timer_overflowService>
}
    276c:	ff 91       	pop	r31
    276e:	ef 91       	pop	r30
    2770:	bf 91       	pop	r27
    2772:	af 91       	pop	r26
    2774:	9f 91       	pop	r25
    2776:	8f 91       	pop	r24
    2778:	7f 91       	pop	r23
    277a:	6f 91       	pop	r22
    277c:	5f 91       	pop	r21
    277e:	4f 91       	pop	r20
    2780:	3f 91       	pop	r19
    2782:	2f 91       	pop	r18
    2784:	0f 90       	pop	r0
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	0f 90       	pop	r0
    278a:	1f 90       	pop	r1
    278c:	18 95       	reti

0000278e <__vector_35>:
#else
# error Missing vector definition
#endif

#ifdef TIMER3_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER3_OVF_vect){
    278e:	1f 92       	push	r1
    2790:	0f 92       	push	r0
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	0f 92       	push	r0
    2796:	11 24       	eor	r1, r1
    2798:	2f 93       	push	r18
    279a:	3f 93       	push	r19
    279c:	4f 93       	push	r20
    279e:	5f 93       	push	r21
    27a0:	6f 93       	push	r22
    27a2:	7f 93       	push	r23
    27a4:	8f 93       	push	r24
    27a6:	9f 93       	push	r25
    27a8:	af 93       	push	r26
    27aa:	bf 93       	push	r27
    27ac:	ef 93       	push	r30
    27ae:	ff 93       	push	r31
	__timer_overflowService(TIMER3);
    27b0:	8c e5       	ldi	r24, 0x5C	; 92
    27b2:	93 e0       	ldi	r25, 0x03	; 3
    27b4:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__timer_overflowService>
}
    27b8:	ff 91       	pop	r31
    27ba:	ef 91       	pop	r30
    27bc:	bf 91       	pop	r27
    27be:	af 91       	pop	r26
    27c0:	9f 91       	pop	r25
    27c2:	8f 91       	pop	r24
    27c4:	7f 91       	pop	r23
    27c6:	6f 91       	pop	r22
    27c8:	5f 91       	pop	r21
    27ca:	4f 91       	pop	r20
    27cc:	3f 91       	pop	r19
    27ce:	2f 91       	pop	r18
    27d0:	0f 90       	pop	r0
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	0f 90       	pop	r0
    27d6:	1f 90       	pop	r1
    27d8:	18 95       	reti

000027da <__vector_15>:
#else
# error Missing vector definition
#endif

#ifdef TIMER2_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect){
    27da:	1f 92       	push	r1
    27dc:	0f 92       	push	r0
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	0f 92       	push	r0
    27e2:	11 24       	eor	r1, r1
    27e4:	2f 93       	push	r18
    27e6:	3f 93       	push	r19
    27e8:	4f 93       	push	r20
    27ea:	5f 93       	push	r21
    27ec:	6f 93       	push	r22
    27ee:	7f 93       	push	r23
    27f0:	8f 93       	push	r24
    27f2:	9f 93       	push	r25
    27f4:	af 93       	push	r26
    27f6:	bf 93       	push	r27
    27f8:	ef 93       	push	r30
    27fa:	ff 93       	push	r31
	__timer_overflowService(TIMER2);
    27fc:	80 e3       	ldi	r24, 0x30	; 48
    27fe:	93 e0       	ldi	r25, 0x03	; 3
    2800:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__timer_overflowService>
}
    2804:	ff 91       	pop	r31
    2806:	ef 91       	pop	r30
    2808:	bf 91       	pop	r27
    280a:	af 91       	pop	r26
    280c:	9f 91       	pop	r25
    280e:	8f 91       	pop	r24
    2810:	7f 91       	pop	r23
    2812:	6f 91       	pop	r22
    2814:	5f 91       	pop	r21
    2816:	4f 91       	pop	r20
    2818:	3f 91       	pop	r19
    281a:	2f 91       	pop	r18
    281c:	0f 90       	pop	r0
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	0f 90       	pop	r0
    2822:	1f 90       	pop	r1
    2824:	18 95       	reti

00002826 <__vector_20>:
#else
# error Missing vector definition
#endif

#ifdef TIMER1_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect){
    2826:	1f 92       	push	r1
    2828:	0f 92       	push	r0
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	0f 92       	push	r0
    282e:	11 24       	eor	r1, r1
    2830:	2f 93       	push	r18
    2832:	3f 93       	push	r19
    2834:	4f 93       	push	r20
    2836:	5f 93       	push	r21
    2838:	6f 93       	push	r22
    283a:	7f 93       	push	r23
    283c:	8f 93       	push	r24
    283e:	9f 93       	push	r25
    2840:	af 93       	push	r26
    2842:	bf 93       	push	r27
    2844:	ef 93       	push	r30
    2846:	ff 93       	push	r31
	__timer_overflowService(TIMER1);
    2848:	84 e0       	ldi	r24, 0x04	; 4
    284a:	93 e0       	ldi	r25, 0x03	; 3
    284c:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__timer_overflowService>
}
    2850:	ff 91       	pop	r31
    2852:	ef 91       	pop	r30
    2854:	bf 91       	pop	r27
    2856:	af 91       	pop	r26
    2858:	9f 91       	pop	r25
    285a:	8f 91       	pop	r24
    285c:	7f 91       	pop	r23
    285e:	6f 91       	pop	r22
    2860:	5f 91       	pop	r21
    2862:	4f 91       	pop	r20
    2864:	3f 91       	pop	r19
    2866:	2f 91       	pop	r18
    2868:	0f 90       	pop	r0
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	0f 90       	pop	r0
    286e:	1f 90       	pop	r1
    2870:	18 95       	reti

00002872 <__vector_23>:
		__timer5Compare,TIMSK5,TOIE5,TIFR5,TOV5,ICR5,TIMSK5,ICIE5,TIFR5,ICF5,TCCR5B,ICES5,null)
};
const uint8_t NUMBER_OF_TIMERS =  (sizeof(pgm_Timers)/sizeof(Timer));

#ifdef TIMER0_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect){
    2872:	1f 92       	push	r1
    2874:	0f 92       	push	r0
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	0f 92       	push	r0
    287a:	11 24       	eor	r1, r1
    287c:	2f 93       	push	r18
    287e:	3f 93       	push	r19
    2880:	4f 93       	push	r20
    2882:	5f 93       	push	r21
    2884:	6f 93       	push	r22
    2886:	7f 93       	push	r23
    2888:	8f 93       	push	r24
    288a:	9f 93       	push	r25
    288c:	af 93       	push	r26
    288e:	bf 93       	push	r27
    2890:	ef 93       	push	r30
    2892:	ff 93       	push	r31
	__timer_overflowService(TIMER0);
    2894:	88 ed       	ldi	r24, 0xD8	; 216
    2896:	92 e0       	ldi	r25, 0x02	; 2
    2898:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__timer_overflowService>
}
    289c:	ff 91       	pop	r31
    289e:	ef 91       	pop	r30
    28a0:	bf 91       	pop	r27
    28a2:	af 91       	pop	r26
    28a4:	9f 91       	pop	r25
    28a6:	8f 91       	pop	r24
    28a8:	7f 91       	pop	r23
    28aa:	6f 91       	pop	r22
    28ac:	5f 91       	pop	r21
    28ae:	4f 91       	pop	r20
    28b0:	3f 91       	pop	r19
    28b2:	2f 91       	pop	r18
    28b4:	0f 90       	pop	r0
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	0f 90       	pop	r0
    28ba:	1f 90       	pop	r1
    28bc:	18 95       	reti

000028be <__GP2D12_read>:
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	8c 01       	movw	r16, r24
    28c4:	fc 01       	movw	r30, r24
    28c6:	81 85       	ldd	r24, Z+9	; 0x09
    28c8:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <a2dConvert8bit>
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <__floatunsisf>
    28da:	2b e5       	ldi	r18, 0x5B	; 91
    28dc:	31 eb       	ldi	r19, 0xB1	; 177
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	5f eb       	ldi	r21, 0xBF	; 191
    28e2:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <pow>
    28e6:	9b 01       	movw	r18, r22
    28e8:	ac 01       	movw	r20, r24
    28ea:	ca 01       	movw	r24, r20
    28ec:	b9 01       	movw	r22, r18
    28ee:	2d ec       	ldi	r18, 0xCD	; 205
    28f0:	3c e0       	ldi	r19, 0x0C	; 12
    28f2:	4d ea       	ldi	r20, 0xAD	; 173
    28f4:	54 e4       	ldi	r21, 0x44	; 68
    28f6:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <__mulsf3>
    28fa:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__fixunssfsi>
    28fe:	f8 01       	movw	r30, r16
    2900:	70 87       	std	Z+8, r23	; 0x08
    2902:	67 83       	std	Z+7, r22	; 0x07
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	08 95       	ret

0000290a <_distanceDump>:
    290a:	00 d0       	rcall	.+0      	; 0x290c <_distanceDump+0x2>
    290c:	00 d0       	rcall	.+0      	; 0x290e <_distanceDump+0x4>
    290e:	0f 92       	push	r0
    2910:	ed b7       	in	r30, 0x3d	; 61
    2912:	fe b7       	in	r31, 0x3e	; 62
    2914:	31 96       	adiw	r30, 0x01	; 1
    2916:	21 e0       	ldi	r18, 0x01	; 1
    2918:	ad b7       	in	r26, 0x3d	; 61
    291a:	be b7       	in	r27, 0x3e	; 62
    291c:	11 96       	adiw	r26, 0x01	; 1
    291e:	2c 93       	st	X, r18
    2920:	28 ed       	ldi	r18, 0xD8	; 216
    2922:	34 e0       	ldi	r19, 0x04	; 4
    2924:	32 83       	std	Z+2, r19	; 0x02
    2926:	21 83       	std	Z+1, r18	; 0x01
    2928:	dc 01       	movw	r26, r24
    292a:	17 96       	adiw	r26, 0x07	; 7
    292c:	8d 91       	ld	r24, X+
    292e:	9c 91       	ld	r25, X
    2930:	18 97       	sbiw	r26, 0x08	; 8
    2932:	94 83       	std	Z+4, r25	; 0x04
    2934:	83 83       	std	Z+3, r24	; 0x03
    2936:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	08 95       	ret

00002946 <__quadrature_read>:
    2946:	fc 01       	movw	r30, r24
    2948:	8f b7       	in	r24, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	25 85       	ldd	r18, Z+13	; 0x0d
    294e:	36 85       	ldd	r19, Z+14	; 0x0e
    2950:	8f bf       	out	0x3f, r24	; 63
    2952:	87 85       	ldd	r24, Z+15	; 0x0f
    2954:	80 ff       	sbrs	r24, 0
    2956:	03 c0       	rjmp	.+6      	; 0x295e <__quadrature_read+0x18>
    2958:	30 95       	com	r19
    295a:	21 95       	neg	r18
    295c:	3f 4f       	sbci	r19, 0xFF	; 255
    295e:	30 87       	std	Z+8, r19	; 0x08
    2960:	27 83       	std	Z+7, r18	; 0x07
    2962:	08 95       	ret

00002964 <quadratureSubtract>:
    2964:	fc 01       	movw	r30, r24
    2966:	87 85       	ldd	r24, Z+15	; 0x0f
    2968:	80 ff       	sbrs	r24, 0
    296a:	03 c0       	rjmp	.+6      	; 0x2972 <quadratureSubtract+0xe>
    296c:	70 95       	com	r23
    296e:	61 95       	neg	r22
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	2f b7       	in	r18, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	85 85       	ldd	r24, Z+13	; 0x0d
    2978:	96 85       	ldd	r25, Z+14	; 0x0e
    297a:	86 1b       	sub	r24, r22
    297c:	97 0b       	sbc	r25, r23
    297e:	96 87       	std	Z+14, r25	; 0x0e
    2980:	85 87       	std	Z+13, r24	; 0x0d
    2982:	2f bf       	out	0x3f, r18	; 63
    2984:	08 95       	ret

00002986 <quadratureTicksPerRevolution>:
    2986:	fc 01       	movw	r30, r24
    2988:	20 89       	ldd	r18, Z+16	; 0x10
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	22 0f       	add	r18, r18
    298e:	33 1f       	adc	r19, r19
    2990:	c9 01       	movw	r24, r18
    2992:	08 95       	ret

00002994 <__quadrature_init>:
    2994:	0f 93       	push	r16
    2996:	1f 93       	push	r17
    2998:	8c 01       	movw	r16, r24
    299a:	fc 01       	movw	r30, r24
    299c:	81 85       	ldd	r24, Z+9	; 0x09
    299e:	92 85       	ldd	r25, Z+10	; 0x0a
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	0e 94 1a 19 	call	0x3234	; 0x3234 <pin_make_input>
    29a6:	f8 01       	movw	r30, r16
    29a8:	83 85       	ldd	r24, Z+11	; 0x0b
    29aa:	94 85       	ldd	r25, Z+12	; 0x0c
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	0e 94 1a 19 	call	0x3234	; 0x3234 <pin_make_input>
    29b2:	f8 01       	movw	r30, r16
    29b4:	81 85       	ldd	r24, Z+9	; 0x09
    29b6:	92 85       	ldd	r25, Z+10	; 0x0a
    29b8:	64 ee       	ldi	r22, 0xE4	; 228
    29ba:	74 e1       	ldi	r23, 0x14	; 20
    29bc:	a8 01       	movw	r20, r16
    29be:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <pin_change_attach>
    29c2:	1f 91       	pop	r17
    29c4:	0f 91       	pop	r16
    29c6:	08 95       	ret

000029c8 <__encChA>:
    29c8:	1f 93       	push	r17
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	16 2f       	mov	r17, r22
    29d0:	ea 01       	movw	r28, r20
    29d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    29d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    29d6:	0e 94 05 19 	call	0x320a	; 0x320a <pin_is_high>
    29da:	18 17       	cp	r17, r24
    29dc:	21 f0       	breq	.+8      	; 0x29e6 <__encChA+0x1e>
    29de:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	03 c0       	rjmp	.+6      	; 0x29ec <__encChA+0x24>
    29e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9e 87       	std	Y+14, r25	; 0x0e
    29ee:	8d 87       	std	Y+13, r24	; 0x0d
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	1f 91       	pop	r17
    29f6:	08 95       	ret

000029f8 <_encoderDump>:
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <_encoderDump+0x2>
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <_encoderDump+0x4>
    29fc:	0f 92       	push	r0
    29fe:	ed b7       	in	r30, 0x3d	; 61
    2a00:	fe b7       	in	r31, 0x3e	; 62
    2a02:	31 96       	adiw	r30, 0x01	; 1
    2a04:	21 e0       	ldi	r18, 0x01	; 1
    2a06:	ad b7       	in	r26, 0x3d	; 61
    2a08:	be b7       	in	r27, 0x3e	; 62
    2a0a:	11 96       	adiw	r26, 0x01	; 1
    2a0c:	2c 93       	st	X, r18
    2a0e:	28 ee       	ldi	r18, 0xE8	; 232
    2a10:	34 e0       	ldi	r19, 0x04	; 4
    2a12:	32 83       	std	Z+2, r19	; 0x02
    2a14:	21 83       	std	Z+1, r18	; 0x01
    2a16:	dc 01       	movw	r26, r24
    2a18:	17 96       	adiw	r26, 0x07	; 7
    2a1a:	8d 91       	ld	r24, X+
    2a1c:	9c 91       	ld	r25, X
    2a1e:	18 97       	sbiw	r26, 0x08	; 8
    2a20:	94 83       	std	Z+4, r25	; 0x04
    2a22:	83 83       	std	Z+3, r24	; 0x03
    2a24:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	08 95       	ret

00002a34 <_sensorRead_>:
    2a34:	cf 92       	push	r12
    2a36:	df 92       	push	r13
    2a38:	ef 92       	push	r14
    2a3a:	ff 92       	push	r15
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	ec 01       	movw	r28, r24
    2a46:	08 81       	ld	r16, Y
    2a48:	19 81       	ldd	r17, Y+1	; 0x01
    2a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4c:	88 23       	and	r24, r24
    2a4e:	51 f4       	brne	.+20     	; 0x2a64 <_sensorRead_+0x30>
    2a50:	f8 01       	movw	r30, r16
    2a52:	85 91       	lpm	r24, Z+
    2a54:	94 91       	lpm	r25, Z+
    2a56:	89 2b       	or	r24, r25
    2a58:	29 f0       	breq	.+10     	; 0x2a64 <_sensorRead_+0x30>
    2a5a:	84 ee       	ldi	r24, 0xE4	; 228
    2a5c:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	35 c0       	rjmp	.+106    	; 0x2ace <_sensorRead_+0x9a>
    2a64:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <clockGetus>
    2a68:	6b 01       	movw	r12, r22
    2a6a:	7c 01       	movw	r14, r24
    2a6c:	f8 01       	movw	r30, r16
    2a6e:	36 96       	adiw	r30, 0x06	; 6
    2a70:	65 91       	lpm	r22, Z+
    2a72:	74 91       	lpm	r23, Z+
    2a74:	61 15       	cp	r22, r1
    2a76:	71 05       	cpc	r23, r1
    2a78:	e9 f0       	breq	.+58     	; 0x2ab4 <_sensorRead_+0x80>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	28 ee       	ldi	r18, 0xE8	; 232
    2a80:	33 e0       	ldi	r19, 0x03	; 3
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	50 e0       	ldi	r21, 0x00	; 0
    2a86:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    2a8a:	9b 01       	movw	r18, r22
    2a8c:	ac 01       	movw	r20, r24
    2a8e:	80 91 6e 0c 	lds	r24, 0x0C6E
    2a92:	90 91 6f 0c 	lds	r25, 0x0C6F
    2a96:	89 2b       	or	r24, r25
    2a98:	29 f4       	brne	.+10     	; 0x2aa4 <_sensorRead_+0x70>
    2a9a:	ca 01       	movw	r24, r20
    2a9c:	b9 01       	movw	r22, r18
    2a9e:	0e 94 03 28 	call	0x5006	; 0x5006 <delay_us>
    2aa2:	08 c0       	rjmp	.+16     	; 0x2ab4 <_sensorRead_+0x80>
    2aa4:	6a 81       	ldd	r22, Y+2	; 0x02
    2aa6:	7b 81       	ldd	r23, Y+3	; 0x03
    2aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2aac:	0e 94 33 28 	call	0x5066	; 0x5066 <clockHasElapsed>
    2ab0:	88 23       	and	r24, r24
    2ab2:	69 f0       	breq	.+26     	; 0x2ace <_sensorRead_+0x9a>
    2ab4:	c8 01       	movw	r24, r16
    2ab6:	02 96       	adiw	r24, 0x02	; 2
    2ab8:	fc 01       	movw	r30, r24
    2aba:	25 91       	lpm	r18, Z+
    2abc:	34 91       	lpm	r19, Z+
    2abe:	ce 01       	movw	r24, r28
    2ac0:	f9 01       	movw	r30, r18
    2ac2:	09 95       	icall
    2ac4:	ca 82       	std	Y+2, r12	; 0x02
    2ac6:	db 82       	std	Y+3, r13	; 0x03
    2ac8:	ec 82       	std	Y+4, r14	; 0x04
    2aca:	fd 82       	std	Y+5, r15	; 0x05
    2acc:	8f ef       	ldi	r24, 0xFF	; 255
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	1f 91       	pop	r17
    2ad4:	0f 91       	pop	r16
    2ad6:	ff 90       	pop	r15
    2ad8:	ef 90       	pop	r14
    2ada:	df 90       	pop	r13
    2adc:	cf 90       	pop	r12
    2ade:	08 95       	ret

00002ae0 <_sensorInit_>:
    2ae0:	cf 92       	push	r12
    2ae2:	df 92       	push	r13
    2ae4:	ef 92       	push	r14
    2ae6:	ff 92       	push	r15
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	ec 01       	movw	r28, r24
    2af2:	8e 81       	ldd	r24, Y+6	; 0x06
    2af4:	88 23       	and	r24, r24
    2af6:	b1 f5       	brne	.+108    	; 0x2b64 <_sensorInit_+0x84>
    2af8:	88 81       	ld	r24, Y
    2afa:	99 81       	ldd	r25, Y+1	; 0x01
    2afc:	fc 01       	movw	r30, r24
    2afe:	c5 90       	lpm	r12, Z+
    2b00:	d4 90       	lpm	r13, Z+
    2b02:	c1 14       	cp	r12, r1
    2b04:	d1 04       	cpc	r13, r1
    2b06:	61 f1       	breq	.+88     	; 0x2b60 <_sensorInit_+0x80>
    2b08:	fc 01       	movw	r30, r24
    2b0a:	34 96       	adiw	r30, 0x04	; 4
    2b0c:	65 91       	lpm	r22, Z+
    2b0e:	74 91       	lpm	r23, Z+
    2b10:	61 15       	cp	r22, r1
    2b12:	71 05       	cpc	r23, r1
    2b14:	11 f1       	breq	.+68     	; 0x2b5a <_sensorInit_+0x7a>
    2b16:	80 91 6e 0c 	lds	r24, 0x0C6E
    2b1a:	90 91 6f 0c 	lds	r25, 0x0C6F
    2b1e:	9b 01       	movw	r18, r22
    2b20:	40 e0       	ldi	r20, 0x00	; 0
    2b22:	50 e0       	ldi	r21, 0x00	; 0
    2b24:	89 2b       	or	r24, r25
    2b26:	29 f4       	brne	.+10     	; 0x2b32 <_sensorInit_+0x52>
    2b28:	ca 01       	movw	r24, r20
    2b2a:	b9 01       	movw	r22, r18
    2b2c:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <delay_ms>
    2b30:	14 c0       	rjmp	.+40     	; 0x2b5a <_sensorInit_+0x7a>
    2b32:	ca 01       	movw	r24, r20
    2b34:	b9 01       	movw	r22, r18
    2b36:	28 ee       	ldi	r18, 0xE8	; 232
    2b38:	33 e0       	ldi	r19, 0x03	; 3
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    2b42:	7b 01       	movw	r14, r22
    2b44:	8c 01       	movw	r16, r24
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	70 e0       	ldi	r23, 0x00	; 0
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a8 01       	movw	r20, r16
    2b50:	97 01       	movw	r18, r14
    2b52:	0e 94 33 28 	call	0x5066	; 0x5066 <clockHasElapsed>
    2b56:	88 23       	and	r24, r24
    2b58:	b1 f3       	breq	.-20     	; 0x2b46 <_sensorInit_+0x66>
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	f6 01       	movw	r30, r12
    2b5e:	09 95       	icall
    2b60:	8f ef       	ldi	r24, 0xFF	; 255
    2b62:	8e 83       	std	Y+6, r24	; 0x06
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	1f 91       	pop	r17
    2b6a:	0f 91       	pop	r16
    2b6c:	ff 90       	pop	r15
    2b6e:	ef 90       	pop	r14
    2b70:	df 90       	pop	r13
    2b72:	cf 90       	pop	r12
    2b74:	08 95       	ret

00002b76 <_uartStartXmit>:
    2b76:	dc 01       	movw	r26, r24
    2b78:	17 96       	adiw	r26, 0x07	; 7
    2b7a:	8d 91       	ld	r24, X+
    2b7c:	9c 91       	ld	r25, X
    2b7e:	18 97       	sbiw	r26, 0x08	; 8
    2b80:	02 96       	adiw	r24, 0x02	; 2
    2b82:	fc 01       	movw	r30, r24
    2b84:	25 91       	lpm	r18, Z+
    2b86:	34 91       	lpm	r19, Z+
    2b88:	cd 01       	movw	r24, r26
    2b8a:	f9 01       	movw	r30, r18
    2b8c:	09 95       	icall
    2b8e:	08 95       	ret

00002b90 <_uartTransmitBlockStart>:
    2b90:	cf 93       	push	r28
    2b92:	df 93       	push	r29
    2b94:	ec 01       	movw	r28, r24
    2b96:	8e 81       	ldd	r24, Y+6	; 0x06
    2b98:	8e 7f       	andi	r24, 0xFE	; 254
    2b9a:	8e 83       	std	Y+6, r24	; 0x06
    2b9c:	ec 89       	ldd	r30, Y+20	; 0x14
    2b9e:	fd 89       	ldd	r31, Y+21	; 0x15
    2ba0:	30 97       	sbiw	r30, 0x00	; 0
    2ba2:	21 f0       	breq	.+8      	; 0x2bac <_uartTransmitBlockStart+0x1c>
    2ba4:	8e 89       	ldd	r24, Y+22	; 0x16
    2ba6:	9f 89       	ldd	r25, Y+23	; 0x17
    2ba8:	6f ef       	ldi	r22, 0xFF	; 255
    2baa:	09 95       	icall
    2bac:	ef 81       	ldd	r30, Y+7	; 0x07
    2bae:	f8 85       	ldd	r31, Y+8	; 0x08
    2bb0:	38 96       	adiw	r30, 0x08	; 8
    2bb2:	25 91       	lpm	r18, Z+
    2bb4:	34 91       	lpm	r19, Z+
    2bb6:	21 15       	cp	r18, r1
    2bb8:	31 05       	cpc	r19, r1
    2bba:	19 f0       	breq	.+6      	; 0x2bc2 <_uartTransmitBlockStart+0x32>
    2bbc:	ce 01       	movw	r24, r28
    2bbe:	f9 01       	movw	r30, r18
    2bc0:	09 95       	icall
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <_uartTransmitBlockEnd>:
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	ec 01       	movw	r28, r24
    2bce:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd0:	81 60       	ori	r24, 0x01	; 1
    2bd2:	8e 83       	std	Y+6, r24	; 0x06
    2bd4:	ef 81       	ldd	r30, Y+7	; 0x07
    2bd6:	f8 85       	ldd	r31, Y+8	; 0x08
    2bd8:	3a 96       	adiw	r30, 0x0a	; 10
    2bda:	25 91       	lpm	r18, Z+
    2bdc:	34 91       	lpm	r19, Z+
    2bde:	21 15       	cp	r18, r1
    2be0:	31 05       	cpc	r19, r1
    2be2:	19 f0       	breq	.+6      	; 0x2bea <_uartTransmitBlockEnd+0x22>
    2be4:	ce 01       	movw	r24, r28
    2be6:	f9 01       	movw	r30, r18
    2be8:	09 95       	icall
    2bea:	ec 89       	ldd	r30, Y+20	; 0x14
    2bec:	fd 89       	ldd	r31, Y+21	; 0x15
    2bee:	30 97       	sbiw	r30, 0x00	; 0
    2bf0:	21 f0       	breq	.+8      	; 0x2bfa <_uartTransmitBlockEnd+0x32>
    2bf2:	8e 89       	ldd	r24, Y+22	; 0x16
    2bf4:	9f 89       	ldd	r25, Y+23	; 0x17
    2bf6:	60 e0       	ldi	r22, 0x00	; 0
    2bf8:	09 95       	icall
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	08 95       	ret

00002c00 <_uartSetBaudRate>:
    2c00:	dc 01       	movw	r26, r24
    2c02:	17 96       	adiw	r26, 0x07	; 7
    2c04:	8d 91       	ld	r24, X+
    2c06:	9c 91       	ld	r25, X
    2c08:	18 97       	sbiw	r26, 0x08	; 8
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	25 91       	lpm	r18, Z+
    2c0e:	34 91       	lpm	r19, Z+
    2c10:	cd 01       	movw	r24, r26
    2c12:	f9 01       	movw	r30, r18
    2c14:	09 95       	icall
    2c16:	08 95       	ret

00002c18 <_uartOff>:
    2c18:	dc 01       	movw	r26, r24
    2c1a:	17 96       	adiw	r26, 0x07	; 7
    2c1c:	ed 91       	ld	r30, X+
    2c1e:	fc 91       	ld	r31, X
    2c20:	18 97       	sbiw	r26, 0x08	; 8
    2c22:	36 96       	adiw	r30, 0x06	; 6
    2c24:	25 91       	lpm	r18, Z+
    2c26:	34 91       	lpm	r19, Z+
    2c28:	9f b7       	in	r25, 0x3f	; 63
    2c2a:	78 94       	sei
    2c2c:	16 96       	adiw	r26, 0x06	; 6
    2c2e:	8c 91       	ld	r24, X
    2c30:	16 97       	sbiw	r26, 0x06	; 6
    2c32:	80 ff       	sbrs	r24, 0
    2c34:	fb cf       	rjmp	.-10     	; 0x2c2c <_uartOff+0x14>
    2c36:	9f bf       	out	0x3f, r25	; 63
    2c38:	cd 01       	movw	r24, r26
    2c3a:	f9 01       	movw	r30, r18
    2c3c:	09 95       	icall
    2c3e:	08 95       	ret

00002c40 <_uartInit>:
    2c40:	ef 92       	push	r14
    2c42:	ff 92       	push	r15
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	ec 01       	movw	r28, r24
    2c4e:	7a 01       	movw	r14, r20
    2c50:	8b 01       	movw	r16, r22
    2c52:	f8 94       	cli
    2c54:	8b 89       	ldd	r24, Y+19	; 0x13
    2c56:	88 23       	and	r24, r24
    2c58:	81 f0       	breq	.+32     	; 0x2c7a <_uartInit+0x3a>
    2c5a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c5c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c62:	28 17       	cp	r18, r24
    2c64:	39 07       	cpc	r19, r25
    2c66:	21 f0       	breq	.+8      	; 0x2c70 <_uartInit+0x30>
    2c68:	c9 01       	movw	r24, r18
    2c6a:	60 e0       	ldi	r22, 0x00	; 0
    2c6c:	0e 94 1a 19 	call	0x3234	; 0x3234 <pin_make_input>
    2c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c74:	6f ef       	ldi	r22, 0xFF	; 255
    2c76:	0e 94 1a 19 	call	0x3234	; 0x3234 <pin_make_input>
    2c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7c:	81 60       	ori	r24, 0x01	; 1
    2c7e:	8e 83       	std	Y+6, r24	; 0x06
    2c80:	8e 81       	ldd	r24, Y+6	; 0x06
    2c82:	8b 7f       	andi	r24, 0xFB	; 251
    2c84:	8e 83       	std	Y+6, r24	; 0x06
    2c86:	8e 81       	ldd	r24, Y+6	; 0x06
    2c88:	8d 7f       	andi	r24, 0xFD	; 253
    2c8a:	8e 83       	std	Y+6, r24	; 0x06
    2c8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c8e:	98 85       	ldd	r25, Y+8	; 0x08
    2c90:	04 96       	adiw	r24, 0x04	; 4
    2c92:	fc 01       	movw	r30, r24
    2c94:	25 91       	lpm	r18, Z+
    2c96:	34 91       	lpm	r19, Z+
    2c98:	ce 01       	movw	r24, r28
    2c9a:	b8 01       	movw	r22, r16
    2c9c:	a7 01       	movw	r20, r14
    2c9e:	f9 01       	movw	r30, r18
    2ca0:	09 95       	icall
    2ca2:	78 94       	sei
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	1f 91       	pop	r17
    2caa:	0f 91       	pop	r16
    2cac:	ff 90       	pop	r15
    2cae:	ef 90       	pop	r14
    2cb0:	08 95       	ret

00002cb2 <_uartSendByte>:
    2cb2:	0f 93       	push	r16
    2cb4:	1f 93       	push	r17
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	ec 01       	movw	r28, r24
    2cbc:	06 2f       	mov	r16, r22
    2cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc2:	89 2b       	or	r24, r25
    2cc4:	19 f4       	brne	.+6      	; 0x2ccc <_uartSendByte+0x1a>
    2cc6:	19 c0       	rjmp	.+50     	; 0x2cfa <_uartSendByte+0x48>
    2cc8:	0e 94 7d 18 	call	0x30fa	; 0x30fa <breathe>
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd0:	0e 94 67 18 	call	0x30ce	; 0x30ce <bufferIsFull>
    2cd4:	88 23       	and	r24, r24
    2cd6:	c1 f7       	brne	.-16     	; 0x2cc8 <_uartSendByte+0x16>
    2cd8:	1f b7       	in	r17, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cde:	81 fd       	sbrc	r24, 1
    2ce0:	04 c0       	rjmp	.+8      	; 0x2cea <_uartSendByte+0x38>
    2ce2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce4:	82 60       	ori	r24, 0x02	; 2
    2ce6:	8e 83       	std	Y+6, r24	; 0x06
    2ce8:	0d c0       	rjmp	.+26     	; 0x2d04 <_uartSendByte+0x52>
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	9b 81       	ldd	r25, Y+3	; 0x03
    2cee:	60 2f       	mov	r22, r16
    2cf0:	0e 94 41 18 	call	0x3082	; 0x3082 <bufferPut>
    2cf4:	0e c0       	rjmp	.+28     	; 0x2d12 <_uartSendByte+0x60>
    2cf6:	0e 94 7d 18 	call	0x30fa	; 0x30fa <breathe>
    2cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfc:	80 ff       	sbrs	r24, 0
    2cfe:	fb cf       	rjmp	.-10     	; 0x2cf6 <_uartSendByte+0x44>
    2d00:	1f b7       	in	r17, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	ce 01       	movw	r24, r28
    2d06:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <_uartTransmitBlockStart>
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	60 2f       	mov	r22, r16
    2d0e:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <_uartStartXmit>
    2d12:	1f bf       	out	0x3f, r17	; 63
    2d14:	80 2f       	mov	r24, r16
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	1f 91       	pop	r17
    2d1c:	0f 91       	pop	r16
    2d1e:	08 95       	ret

00002d20 <_uartSendBuffer>:
    2d20:	ef 92       	push	r14
    2d22:	ff 92       	push	r15
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	7c 01       	movw	r14, r24
    2d2e:	8b 01       	movw	r16, r22
    2d30:	ea 01       	movw	r28, r20
    2d32:	07 c0       	rjmp	.+14     	; 0x2d42 <_uartSendBuffer+0x22>
    2d34:	f8 01       	movw	r30, r16
    2d36:	61 91       	ld	r22, Z+
    2d38:	8f 01       	movw	r16, r30
    2d3a:	c7 01       	movw	r24, r14
    2d3c:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_uartSendByte>
    2d40:	21 97       	sbiw	r28, 0x01	; 1
    2d42:	20 97       	sbiw	r28, 0x00	; 0
    2d44:	b9 f7       	brne	.-18     	; 0x2d34 <_uartSendBuffer+0x14>
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	ff 90       	pop	r15
    2d50:	ef 90       	pop	r14
    2d52:	08 95       	ret

00002d54 <__uartGetByte>:
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	0f 92       	push	r0
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	fc 01       	movw	r30, r24
    2d60:	80 81       	ld	r24, Z
    2d62:	91 81       	ldd	r25, Z+1	; 0x01
    2d64:	00 97       	sbiw	r24, 0x00	; 0
    2d66:	71 f0       	breq	.+28     	; 0x2d84 <__uartGetByte+0x30>
    2d68:	be 01       	movw	r22, r28
    2d6a:	6f 5f       	subi	r22, 0xFF	; 255
    2d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6e:	0e 94 14 18 	call	0x3028	; 0x3028 <bufferGet>
    2d72:	88 23       	and	r24, r24
    2d74:	19 f4       	brne	.+6      	; 0x2d7c <__uartGetByte+0x28>
    2d76:	4f ef       	ldi	r20, 0xFF	; 255
    2d78:	5f ef       	ldi	r21, 0xFF	; 255
    2d7a:	0d c0       	rjmp	.+26     	; 0x2d96 <__uartGetByte+0x42>
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	48 2f       	mov	r20, r24
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	09 c0       	rjmp	.+18     	; 0x2d96 <__uartGetByte+0x42>
    2d84:	2f b7       	in	r18, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	41 85       	ldd	r20, Z+9	; 0x09
    2d8a:	52 85       	ldd	r21, Z+10	; 0x0a
    2d8c:	8f ef       	ldi	r24, 0xFF	; 255
    2d8e:	9f ef       	ldi	r25, 0xFF	; 255
    2d90:	92 87       	std	Z+10, r25	; 0x0a
    2d92:	81 87       	std	Z+9, r24	; 0x09
    2d94:	2f bf       	out	0x3f, r18	; 63
    2d96:	ca 01       	movw	r24, r20
    2d98:	0f 90       	pop	r0
    2d9a:	cf 91       	pop	r28
    2d9c:	df 91       	pop	r29
    2d9e:	08 95       	ret

00002da0 <__uartTransmitService>:
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	1f 93       	push	r17
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	0f 92       	push	r0
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	7c 01       	movw	r14, r24
    2db2:	fc 01       	movw	r30, r24
    2db4:	86 81       	ldd	r24, Z+6	; 0x06
    2db6:	81 ff       	sbrs	r24, 1
    2db8:	19 c0       	rjmp	.+50     	; 0x2dec <__uartTransmitService+0x4c>
    2dba:	1f b7       	in	r17, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	f7 01       	movw	r30, r14
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	be 01       	movw	r22, r28
    2dc6:	6f 5f       	subi	r22, 0xFF	; 255
    2dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dca:	0e 94 14 18 	call	0x3028	; 0x3028 <bufferGet>
    2dce:	88 23       	and	r24, r24
    2dd0:	29 f0       	breq	.+10     	; 0x2ddc <__uartTransmitService+0x3c>
    2dd2:	c7 01       	movw	r24, r14
    2dd4:	69 81       	ldd	r22, Y+1	; 0x01
    2dd6:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <_uartStartXmit>
    2dda:	0d c0       	rjmp	.+26     	; 0x2df6 <__uartTransmitService+0x56>
    2ddc:	c7 01       	movw	r24, r14
    2dde:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <_uartTransmitBlockEnd>
    2de2:	f7 01       	movw	r30, r14
    2de4:	86 81       	ldd	r24, Z+6	; 0x06
    2de6:	8d 7f       	andi	r24, 0xFD	; 253
    2de8:	86 83       	std	Z+6, r24	; 0x06
    2dea:	05 c0       	rjmp	.+10     	; 0x2df6 <__uartTransmitService+0x56>
    2dec:	1f b7       	in	r17, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	c7 01       	movw	r24, r14
    2df2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <_uartTransmitBlockEnd>
    2df6:	1f bf       	out	0x3f, r17	; 63
    2df8:	0f 90       	pop	r0
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	1f 91       	pop	r17
    2e00:	ff 90       	pop	r15
    2e02:	ef 90       	pop	r14
    2e04:	08 95       	ret

00002e06 <__uartReceiveService>:
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	ec 01       	movw	r28, r24
    2e0c:	86 2f       	mov	r24, r22
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	9a 87       	std	Y+10, r25	; 0x0a
    2e12:	89 87       	std	Y+9, r24	; 0x09
    2e14:	8c 81       	ldd	r24, Y+4	; 0x04
    2e16:	9d 81       	ldd	r25, Y+5	; 0x05
    2e18:	89 2b       	or	r24, r25
    2e1a:	29 f0       	breq	.+10     	; 0x2e26 <__uartReceiveService+0x20>
    2e1c:	ec 81       	ldd	r30, Y+4	; 0x04
    2e1e:	fd 81       	ldd	r31, Y+5	; 0x05
    2e20:	86 2f       	mov	r24, r22
    2e22:	09 95       	icall
    2e24:	0e c0       	rjmp	.+28     	; 0x2e42 <__uartReceiveService+0x3c>
    2e26:	88 81       	ld	r24, Y
    2e28:	99 81       	ldd	r25, Y+1	; 0x01
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	51 f0       	breq	.+20     	; 0x2e42 <__uartReceiveService+0x3c>
    2e2e:	0e 94 41 18 	call	0x3082	; 0x3082 <bufferPut>
    2e32:	88 23       	and	r24, r24
    2e34:	31 f4       	brne	.+12     	; 0x2e42 <__uartReceiveService+0x3c>
    2e36:	8e 81       	ldd	r24, Y+6	; 0x06
    2e38:	84 60       	ori	r24, 0x04	; 4
    2e3a:	8e 83       	std	Y+6, r24	; 0x06
    2e3c:	85 ef       	ldi	r24, 0xF5	; 245
    2e3e:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	08 95       	ret

00002e48 <a2dOff>:
    2e48:	ea e7       	ldi	r30, 0x7A	; 122
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	87 7f       	andi	r24, 0xF7	; 247
    2e50:	80 83       	st	Z, r24
    2e52:	80 81       	ld	r24, Z
    2e54:	8f 77       	andi	r24, 0x7F	; 127
    2e56:	80 83       	st	Z, r24
    2e58:	08 95       	ret

00002e5a <a2dSetPrescaler>:
    2e5a:	ea e7       	ldi	r30, 0x7A	; 122
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	90 81       	ld	r25, Z
    2e60:	87 70       	andi	r24, 0x07	; 7
    2e62:	98 7f       	andi	r25, 0xF8	; 248
    2e64:	89 2b       	or	r24, r25
    2e66:	80 83       	st	Z, r24
    2e68:	08 95       	ret

00002e6a <a2dSetReference>:
    2e6a:	ec e7       	ldi	r30, 0x7C	; 124
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	90 81       	ld	r25, Z
    2e70:	82 95       	swap	r24
    2e72:	88 0f       	add	r24, r24
    2e74:	88 0f       	add	r24, r24
    2e76:	80 7c       	andi	r24, 0xC0	; 192
    2e78:	9f 73       	andi	r25, 0x3F	; 63
    2e7a:	98 2b       	or	r25, r24
    2e7c:	90 83       	st	Z, r25
    2e7e:	08 95       	ret

00002e80 <a2dConvert10bit>:
    2e80:	98 2f       	mov	r25, r24
    2e82:	85 ff       	sbrs	r24, 5
    2e84:	04 c0       	rjmp	.+8      	; 0x2e8e <a2dConvert10bit+0xe>
    2e86:	80 91 7b 00 	lds	r24, 0x007B
    2e8a:	88 60       	ori	r24, 0x08	; 8
    2e8c:	03 c0       	rjmp	.+6      	; 0x2e94 <a2dConvert10bit+0x14>
    2e8e:	80 91 7b 00 	lds	r24, 0x007B
    2e92:	87 7f       	andi	r24, 0xF7	; 247
    2e94:	80 93 7b 00 	sts	0x007B, r24
    2e98:	80 91 7c 00 	lds	r24, 0x007C
    2e9c:	9f 71       	andi	r25, 0x1F	; 31
    2e9e:	80 7e       	andi	r24, 0xE0	; 224
    2ea0:	89 2b       	or	r24, r25
    2ea2:	80 93 7c 00 	sts	0x007C, r24
    2ea6:	10 92 68 0c 	sts	0x0C68, r1
    2eaa:	80 91 7a 00 	lds	r24, 0x007A
    2eae:	80 61       	ori	r24, 0x10	; 16
    2eb0:	80 93 7a 00 	sts	0x007A, r24
    2eb4:	80 91 7a 00 	lds	r24, 0x007A
    2eb8:	80 64       	ori	r24, 0x40	; 64
    2eba:	80 93 7a 00 	sts	0x007A, r24
    2ebe:	80 91 7a 00 	lds	r24, 0x007A
    2ec2:	86 fd       	sbrc	r24, 6
    2ec4:	fc cf       	rjmp	.-8      	; 0x2ebe <a2dConvert10bit+0x3e>
    2ec6:	20 91 78 00 	lds	r18, 0x0078
    2eca:	30 91 79 00 	lds	r19, 0x0079
    2ece:	c9 01       	movw	r24, r18
    2ed0:	08 95       	ret

00002ed2 <a2dConvert8bit>:
    2ed2:	0e 94 40 17 	call	0x2e80	; 0x2e80 <a2dConvert10bit>
    2ed6:	96 95       	lsr	r25
    2ed8:	87 95       	ror	r24
    2eda:	96 95       	lsr	r25
    2edc:	87 95       	ror	r24
    2ede:	08 95       	ret

00002ee0 <__vector_29>:
    2ee0:	1f 92       	push	r1
    2ee2:	0f 92       	push	r0
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	0f 92       	push	r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	8f 93       	push	r24
    2eec:	8f ef       	ldi	r24, 0xFF	; 255
    2eee:	80 93 68 0c 	sts	0x0C68, r24
    2ef2:	8f 91       	pop	r24
    2ef4:	0f 90       	pop	r0
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	0f 90       	pop	r0
    2efa:	1f 90       	pop	r1
    2efc:	18 95       	reti

00002efe <a2dInit>:
    2efe:	ef 92       	push	r14
    2f00:	ff 92       	push	r15
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	80 91 7a 00 	lds	r24, 0x007A
    2f0e:	80 68       	ori	r24, 0x80	; 128
    2f10:	80 93 7a 00 	sts	0x007A, r24
    2f14:	80 91 7a 00 	lds	r24, 0x007A
    2f18:	8f 7d       	andi	r24, 0xDF	; 223
    2f1a:	80 93 7a 00 	sts	0x007A, r24
    2f1e:	80 91 7a 00 	lds	r24, 0x007A
    2f22:	88 7f       	andi	r24, 0xF8	; 248
    2f24:	86 60       	ori	r24, 0x06	; 6
    2f26:	80 93 7a 00 	sts	0x007A, r24
    2f2a:	80 91 7c 00 	lds	r24, 0x007C
    2f2e:	8f 73       	andi	r24, 0x3F	; 63
    2f30:	80 64       	ori	r24, 0x40	; 64
    2f32:	80 93 7c 00 	sts	0x007C, r24
    2f36:	80 91 7c 00 	lds	r24, 0x007C
    2f3a:	8f 7d       	andi	r24, 0xDF	; 223
    2f3c:	80 93 7c 00 	sts	0x007C, r24
    2f40:	80 91 7a 00 	lds	r24, 0x007A
    2f44:	88 60       	ori	r24, 0x08	; 8
    2f46:	80 93 7a 00 	sts	0x007A, r24
    2f4a:	8f ef       	ldi	r24, 0xFF	; 255
    2f4c:	80 93 68 0c 	sts	0x0C68, r24
    2f50:	78 94       	sei
    2f52:	80 91 55 02 	lds	r24, 0x0255
    2f56:	c8 2f       	mov	r28, r24
    2f58:	d0 e0       	ldi	r29, 0x00	; 0
    2f5a:	21 97       	sbiw	r28, 0x01	; 1
    2f5c:	00 e0       	ldi	r16, 0x00	; 0
    2f5e:	10 e0       	ldi	r17, 0x00	; 0
    2f60:	7e 01       	movw	r14, r28
    2f62:	0f c0       	rjmp	.+30     	; 0x2f82 <a2dInit+0x84>
    2f64:	c7 01       	movw	r24, r14
    2f66:	80 1b       	sub	r24, r16
    2f68:	91 0b       	sbc	r25, r17
    2f6a:	08 97       	sbiw	r24, 0x08	; 8
    2f6c:	24 f0       	brlt	.+8      	; 0x2f76 <a2dInit+0x78>
    2f6e:	9e 01       	movw	r18, r28
    2f70:	28 5e       	subi	r18, 0xE8	; 232
    2f72:	82 2f       	mov	r24, r18
    2f74:	01 c0       	rjmp	.+2      	; 0x2f78 <a2dInit+0x7a>
    2f76:	8c 2f       	mov	r24, r28
    2f78:	0e 94 40 17 	call	0x2e80	; 0x2e80 <a2dConvert10bit>
    2f7c:	21 97       	sbiw	r28, 0x01	; 1
    2f7e:	0f 5f       	subi	r16, 0xFF	; 255
    2f80:	1f 4f       	sbci	r17, 0xFF	; 255
    2f82:	3f ef       	ldi	r19, 0xFF	; 255
    2f84:	cf 3f       	cpi	r28, 0xFF	; 255
    2f86:	d3 07       	cpc	r29, r19
    2f88:	69 f7       	brne	.-38     	; 0x2f64 <a2dInit+0x66>
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	1f 91       	pop	r17
    2f90:	0f 91       	pop	r16
    2f92:	ff 90       	pop	r15
    2f94:	ef 90       	pop	r14
    2f96:	08 95       	ret

00002f98 <__act_setSpeed>:
    2f98:	1f 93       	push	r17
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	ec 01       	movw	r28, r24
    2fa0:	16 2f       	mov	r17, r22
    2fa2:	61 38       	cpi	r22, 0x81	; 129
    2fa4:	0c f4       	brge	.+2      	; 0x2fa8 <__act_setSpeed+0x10>
    2fa6:	11 e8       	ldi	r17, 0x81	; 129
    2fa8:	e8 81       	ld	r30, Y
    2faa:	f9 81       	ldd	r31, Y+1	; 0x01
    2fac:	30 97       	sbiw	r30, 0x00	; 0
    2fae:	79 f0       	breq	.+30     	; 0x2fce <__act_setSpeed+0x36>
    2fb0:	25 91       	lpm	r18, Z+
    2fb2:	34 91       	lpm	r19, Z+
    2fb4:	21 15       	cp	r18, r1
    2fb6:	31 05       	cpc	r19, r1
    2fb8:	51 f0       	breq	.+20     	; 0x2fce <__act_setSpeed+0x36>
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	81 fd       	sbrc	r24, 1
    2fbe:	02 c0       	rjmp	.+4      	; 0x2fc4 <__act_setSpeed+0x2c>
    2fc0:	61 2f       	mov	r22, r17
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <__act_setSpeed+0x30>
    2fc4:	61 2f       	mov	r22, r17
    2fc6:	61 95       	neg	r22
    2fc8:	ce 01       	movw	r24, r28
    2fca:	f9 01       	movw	r30, r18
    2fcc:	09 95       	icall
    2fce:	1a 83       	std	Y+2, r17	; 0x02
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	1f 91       	pop	r17
    2fd6:	08 95       	ret

00002fd8 <__act_setConnected>:
    2fd8:	dc 01       	movw	r26, r24
    2fda:	96 2f       	mov	r25, r22
    2fdc:	91 70       	andi	r25, 0x01	; 1
    2fde:	13 96       	adiw	r26, 0x03	; 3
    2fe0:	8c 91       	ld	r24, X
    2fe2:	13 97       	sbiw	r26, 0x03	; 3
    2fe4:	8e 7f       	andi	r24, 0xFE	; 254
    2fe6:	89 2b       	or	r24, r25
    2fe8:	13 96       	adiw	r26, 0x03	; 3
    2fea:	8c 93       	st	X, r24
    2fec:	13 97       	sbiw	r26, 0x03	; 3
    2fee:	8d 91       	ld	r24, X+
    2ff0:	9c 91       	ld	r25, X
    2ff2:	11 97       	sbiw	r26, 0x01	; 1
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	51 f0       	breq	.+20     	; 0x300c <__act_setConnected+0x34>
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	32 96       	adiw	r30, 0x02	; 2
    2ffc:	25 91       	lpm	r18, Z+
    2ffe:	34 91       	lpm	r19, Z+
    3000:	21 15       	cp	r18, r1
    3002:	31 05       	cpc	r19, r1
    3004:	19 f0       	breq	.+6      	; 0x300c <__act_setConnected+0x34>
    3006:	cd 01       	movw	r24, r26
    3008:	f9 01       	movw	r30, r18
    300a:	09 95       	icall
    300c:	08 95       	ret

0000300e <bufferInit>:
    300e:	fc 01       	movw	r30, r24
    3010:	8f b7       	in	r24, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	71 83       	std	Z+1, r23	; 0x01
    3016:	60 83       	st	Z, r22
    3018:	53 83       	std	Z+3, r21	; 0x03
    301a:	42 83       	std	Z+2, r20	; 0x02
    301c:	15 82       	std	Z+5, r1	; 0x05
    301e:	14 82       	std	Z+4, r1	; 0x04
    3020:	17 82       	std	Z+7, r1	; 0x07
    3022:	16 82       	std	Z+6, r1	; 0x06
    3024:	8f bf       	out	0x3f, r24	; 63
    3026:	08 95       	ret

00003028 <bufferGet>:
    3028:	cf 93       	push	r28
    302a:	df 93       	push	r29
    302c:	ec 01       	movw	r28, r24
    302e:	db 01       	movw	r26, r22
    3030:	2f b7       	in	r18, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	01 f1       	breq	.+64     	; 0x3078 <bufferGet+0x50>
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	9b 81       	ldd	r25, Y+3	; 0x03
    303c:	89 2b       	or	r24, r25
    303e:	e1 f0       	breq	.+56     	; 0x3078 <bufferGet+0x50>
    3040:	8c 81       	ldd	r24, Y+4	; 0x04
    3042:	9d 81       	ldd	r25, Y+5	; 0x05
    3044:	89 2b       	or	r24, r25
    3046:	c1 f0       	breq	.+48     	; 0x3078 <bufferGet+0x50>
    3048:	e8 81       	ld	r30, Y
    304a:	f9 81       	ldd	r31, Y+1	; 0x01
    304c:	8e 81       	ldd	r24, Y+6	; 0x06
    304e:	9f 81       	ldd	r25, Y+7	; 0x07
    3050:	e8 0f       	add	r30, r24
    3052:	f9 1f       	adc	r31, r25
    3054:	80 81       	ld	r24, Z
    3056:	8c 93       	st	X, r24
    3058:	8e 81       	ldd	r24, Y+6	; 0x06
    305a:	9f 81       	ldd	r25, Y+7	; 0x07
    305c:	6a 81       	ldd	r22, Y+2	; 0x02
    305e:	7b 81       	ldd	r23, Y+3	; 0x03
    3060:	01 96       	adiw	r24, 0x01	; 1
    3062:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    3066:	9f 83       	std	Y+7, r25	; 0x07
    3068:	8e 83       	std	Y+6, r24	; 0x06
    306a:	8c 81       	ldd	r24, Y+4	; 0x04
    306c:	9d 81       	ldd	r25, Y+5	; 0x05
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	9d 83       	std	Y+5, r25	; 0x05
    3072:	8c 83       	std	Y+4, r24	; 0x04
    3074:	8f ef       	ldi	r24, 0xFF	; 255
    3076:	01 c0       	rjmp	.+2      	; 0x307a <bufferGet+0x52>
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	2f bf       	out	0x3f, r18	; 63
    307c:	df 91       	pop	r29
    307e:	cf 91       	pop	r28
    3080:	08 95       	ret

00003082 <bufferPut>:
    3082:	1f 93       	push	r17
    3084:	cf 93       	push	r28
    3086:	df 93       	push	r29
    3088:	ec 01       	movw	r28, r24
    308a:	46 2f       	mov	r20, r22
    308c:	1f b7       	in	r17, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	2c 81       	ldd	r18, Y+4	; 0x04
    3092:	3d 81       	ldd	r19, Y+5	; 0x05
    3094:	6a 81       	ldd	r22, Y+2	; 0x02
    3096:	7b 81       	ldd	r23, Y+3	; 0x03
    3098:	26 17       	cp	r18, r22
    309a:	37 07       	cpc	r19, r23
    309c:	10 f0       	brcs	.+4      	; 0x30a2 <bufferPut+0x20>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	11 c0       	rjmp	.+34     	; 0x30c4 <bufferPut+0x42>
    30a2:	8e 81       	ldd	r24, Y+6	; 0x06
    30a4:	9f 81       	ldd	r25, Y+7	; 0x07
    30a6:	82 0f       	add	r24, r18
    30a8:	93 1f       	adc	r25, r19
    30aa:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    30ae:	e8 81       	ld	r30, Y
    30b0:	f9 81       	ldd	r31, Y+1	; 0x01
    30b2:	e8 0f       	add	r30, r24
    30b4:	f9 1f       	adc	r31, r25
    30b6:	40 83       	st	Z, r20
    30b8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ba:	9d 81       	ldd	r25, Y+5	; 0x05
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	9d 83       	std	Y+5, r25	; 0x05
    30c0:	8c 83       	std	Y+4, r24	; 0x04
    30c2:	8f ef       	ldi	r24, 0xFF	; 255
    30c4:	1f bf       	out	0x3f, r17	; 63
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	1f 91       	pop	r17
    30cc:	08 95       	ret

000030ce <bufferIsFull>:
    30ce:	fc 01       	movw	r30, r24
    30d0:	8f b7       	in	r24, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	8f bf       	out	0x3f, r24	; 63
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	24 81       	ldd	r18, Z+4	; 0x04
    30da:	35 81       	ldd	r19, Z+5	; 0x05
    30dc:	82 81       	ldd	r24, Z+2	; 0x02
    30de:	93 81       	ldd	r25, Z+3	; 0x03
    30e0:	28 17       	cp	r18, r24
    30e2:	39 07       	cpc	r19, r25
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <bufferIsFull+0x1a>
    30e6:	41 e0       	ldi	r20, 0x01	; 1
    30e8:	84 2f       	mov	r24, r20
    30ea:	08 95       	ret

000030ec <bufferFlush>:
    30ec:	fc 01       	movw	r30, r24
    30ee:	8f b7       	in	r24, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	15 82       	std	Z+5, r1	; 0x05
    30f4:	14 82       	std	Z+4, r1	; 0x04
    30f6:	8f bf       	out	0x3f, r24	; 63
    30f8:	08 95       	ret

000030fa <breathe>:
    30fa:	8f b7       	in	r24, 0x3f	; 63
    30fc:	78 94       	sei
	...
    310a:	00 00       	nop
    310c:	8f bf       	out	0x3f, r24	; 63
    310e:	08 95       	ret

00003110 <__portMaskSet>:
    3110:	9c 01       	movw	r18, r24
    3112:	fc 01       	movw	r30, r24
    3114:	a5 91       	lpm	r26, Z+
    3116:	b4 91       	lpm	r27, Z+
    3118:	2e 5f       	subi	r18, 0xFE	; 254
    311a:	3f 4f       	sbci	r19, 0xFF	; 255
    311c:	f9 01       	movw	r30, r18
    311e:	94 91       	lpm	r25, Z+
    3120:	8c 91       	ld	r24, X
    3122:	89 2b       	or	r24, r25
    3124:	8c 93       	st	X, r24
    3126:	08 95       	ret

00003128 <__portMaskGet>:
    3128:	9c 01       	movw	r18, r24
    312a:	fc 01       	movw	r30, r24
    312c:	a5 91       	lpm	r26, Z+
    312e:	b4 91       	lpm	r27, Z+
    3130:	2e 5f       	subi	r18, 0xFE	; 254
    3132:	3f 4f       	sbci	r19, 0xFF	; 255
    3134:	f9 01       	movw	r30, r18
    3136:	94 91       	lpm	r25, Z+
    3138:	8c 91       	ld	r24, X
    313a:	89 23       	and	r24, r25
    313c:	09 f0       	breq	.+2      	; 0x3140 <__portMaskGet+0x18>
    313e:	8f ef       	ldi	r24, 0xFF	; 255
    3140:	08 95       	ret

00003142 <__portMaskClear>:
    3142:	9c 01       	movw	r18, r24
    3144:	fc 01       	movw	r30, r24
    3146:	a5 91       	lpm	r26, Z+
    3148:	b4 91       	lpm	r27, Z+
    314a:	2e 5f       	subi	r18, 0xFE	; 254
    314c:	3f 4f       	sbci	r19, 0xFF	; 255
    314e:	f9 01       	movw	r30, r18
    3150:	94 91       	lpm	r25, Z+
    3152:	8c 91       	ld	r24, X
    3154:	90 95       	com	r25
    3156:	89 23       	and	r24, r25
    3158:	8c 93       	st	X, r24
    315a:	08 95       	ret

0000315c <main>:
    315c:	6f 92       	push	r6
    315e:	7f 92       	push	r7
    3160:	8f 92       	push	r8
    3162:	9f 92       	push	r9
    3164:	af 92       	push	r10
    3166:	bf 92       	push	r11
    3168:	cf 92       	push	r12
    316a:	df 92       	push	r13
    316c:	ef 92       	push	r14
    316e:	ff 92       	push	r15
    3170:	0f 93       	push	r16
    3172:	1f 93       	push	r17
    3174:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <configure_ports>
    3178:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <registerLED>
    317c:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <initTimers>
    3180:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <sysInitHardware>
    3184:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <appInitHardware>
    3188:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__clockInit>
    318c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <clockGetus>
    3190:	5b 01       	movw	r10, r22
    3192:	6c 01       	movw	r12, r24
    3194:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <appInitSoftware>
    3198:	7b 01       	movw	r14, r22
    319a:	8c 01       	movw	r16, r24
    319c:	66 24       	eor	r6, r6
    319e:	77 24       	eor	r7, r7
    31a0:	43 01       	movw	r8, r6
    31a2:	8f b7       	in	r24, 0x3f	; 63
    31a4:	78 94       	sei
	...
    31b2:	00 00       	nop
    31b4:	8f bf       	out	0x3f, r24	; 63
    31b6:	e1 14       	cp	r14, r1
    31b8:	f1 04       	cpc	r15, r1
    31ba:	01 05       	cpc	r16, r1
    31bc:	11 05       	cpc	r17, r1
    31be:	59 f4       	brne	.+22     	; 0x31d6 <main+0x7a>
    31c0:	12 c0       	rjmp	.+36     	; 0x31e6 <main+0x8a>
    31c2:	8f b7       	in	r24, 0x3f	; 63
    31c4:	78 94       	sei
	...
    31d2:	00 00       	nop
    31d4:	8f bf       	out	0x3f, r24	; 63
    31d6:	c6 01       	movw	r24, r12
    31d8:	b5 01       	movw	r22, r10
    31da:	a8 01       	movw	r20, r16
    31dc:	97 01       	movw	r18, r14
    31de:	0e 94 33 28 	call	0x5066	; 0x5066 <clockHasElapsed>
    31e2:	88 23       	and	r24, r24
    31e4:	71 f3       	breq	.-36     	; 0x31c2 <main+0x66>
    31e6:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <clockGetus>
    31ea:	5b 01       	movw	r10, r22
    31ec:	6c 01       	movw	r12, r24
    31ee:	08 94       	sec
    31f0:	61 1c       	adc	r6, r1
    31f2:	71 1c       	adc	r7, r1
    31f4:	81 1c       	adc	r8, r1
    31f6:	91 1c       	adc	r9, r1
    31f8:	c4 01       	movw	r24, r8
    31fa:	b3 01       	movw	r22, r6
    31fc:	a6 01       	movw	r20, r12
    31fe:	95 01       	movw	r18, r10
    3200:	0e 94 70 05 	call	0xae0	; 0xae0 <appControl>
    3204:	7b 01       	movw	r14, r22
    3206:	8c 01       	movw	r16, r24
    3208:	cc cf       	rjmp	.-104    	; 0x31a2 <main+0x46>

0000320a <pin_is_high>:
    320a:	9c 01       	movw	r18, r24
    320c:	00 97       	sbiw	r24, 0x00	; 0
    320e:	81 f0       	breq	.+32     	; 0x3230 <pin_is_high+0x26>
    3210:	fc 01       	movw	r30, r24
    3212:	85 91       	lpm	r24, Z+
    3214:	94 91       	lpm	r25, Z+
    3216:	04 96       	adiw	r24, 0x04	; 4
    3218:	fc 01       	movw	r30, r24
    321a:	a5 91       	lpm	r26, Z+
    321c:	b4 91       	lpm	r27, Z+
    321e:	2e 5f       	subi	r18, 0xFE	; 254
    3220:	3f 4f       	sbci	r19, 0xFF	; 255
    3222:	f9 01       	movw	r30, r18
    3224:	94 91       	lpm	r25, Z+
    3226:	8c 91       	ld	r24, X
    3228:	89 23       	and	r24, r25
    322a:	11 f0       	breq	.+4      	; 0x3230 <pin_is_high+0x26>
    322c:	8f ef       	ldi	r24, 0xFF	; 255
    322e:	08 95       	ret
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	08 95       	ret

00003234 <pin_make_input>:
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	9c 01       	movw	r18, r24
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	f9 f0       	breq	.+62     	; 0x327c <pin_make_input+0x48>
    323e:	fc 01       	movw	r30, r24
    3240:	45 91       	lpm	r20, Z+
    3242:	54 91       	lpm	r21, Z+
    3244:	ca 01       	movw	r24, r20
    3246:	02 96       	adiw	r24, 0x02	; 2
    3248:	fc 01       	movw	r30, r24
    324a:	a5 91       	lpm	r26, Z+
    324c:	b4 91       	lpm	r27, Z+
    324e:	fa 01       	movw	r30, r20
    3250:	c5 91       	lpm	r28, Z+
    3252:	d4 91       	lpm	r29, Z+
    3254:	2e 5f       	subi	r18, 0xFE	; 254
    3256:	3f 4f       	sbci	r19, 0xFF	; 255
    3258:	f9 01       	movw	r30, r18
    325a:	24 91       	lpm	r18, Z+
    325c:	3f b7       	in	r19, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	8c 91       	ld	r24, X
    3262:	92 2f       	mov	r25, r18
    3264:	90 95       	com	r25
    3266:	89 23       	and	r24, r25
    3268:	8c 93       	st	X, r24
    326a:	88 81       	ld	r24, Y
    326c:	89 23       	and	r24, r25
    326e:	88 83       	st	Y, r24
    3270:	66 23       	and	r22, r22
    3272:	19 f0       	breq	.+6      	; 0x327a <pin_make_input+0x46>
    3274:	88 81       	ld	r24, Y
    3276:	82 2b       	or	r24, r18
    3278:	88 83       	st	Y, r24
    327a:	3f bf       	out	0x3f, r19	; 63
    327c:	df 91       	pop	r29
    327e:	cf 91       	pop	r28
    3280:	08 95       	ret

00003282 <pin_make_output>:
    3282:	9c 01       	movw	r18, r24
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	89 f0       	breq	.+34     	; 0x32aa <pin_make_output+0x28>
    3288:	fc 01       	movw	r30, r24
    328a:	85 91       	lpm	r24, Z+
    328c:	94 91       	lpm	r25, Z+
    328e:	02 96       	adiw	r24, 0x02	; 2
    3290:	fc 01       	movw	r30, r24
    3292:	a5 91       	lpm	r26, Z+
    3294:	b4 91       	lpm	r27, Z+
    3296:	2e 5f       	subi	r18, 0xFE	; 254
    3298:	3f 4f       	sbci	r19, 0xFF	; 255
    329a:	f9 01       	movw	r30, r18
    329c:	94 91       	lpm	r25, Z+
    329e:	2f b7       	in	r18, 0x3f	; 63
    32a0:	f8 94       	cli
    32a2:	8c 91       	ld	r24, X
    32a4:	89 2b       	or	r24, r25
    32a6:	8c 93       	st	X, r24
    32a8:	2f bf       	out	0x3f, r18	; 63
    32aa:	08 95       	ret

000032ac <pin_is_output>:
    32ac:	9c 01       	movw	r18, r24
    32ae:	00 97       	sbiw	r24, 0x00	; 0
    32b0:	81 f0       	breq	.+32     	; 0x32d2 <pin_is_output+0x26>
    32b2:	fc 01       	movw	r30, r24
    32b4:	85 91       	lpm	r24, Z+
    32b6:	94 91       	lpm	r25, Z+
    32b8:	02 96       	adiw	r24, 0x02	; 2
    32ba:	fc 01       	movw	r30, r24
    32bc:	a5 91       	lpm	r26, Z+
    32be:	b4 91       	lpm	r27, Z+
    32c0:	2e 5f       	subi	r18, 0xFE	; 254
    32c2:	3f 4f       	sbci	r19, 0xFF	; 255
    32c4:	f9 01       	movw	r30, r18
    32c6:	94 91       	lpm	r25, Z+
    32c8:	8c 91       	ld	r24, X
    32ca:	89 23       	and	r24, r25
    32cc:	11 f0       	breq	.+4      	; 0x32d2 <pin_is_output+0x26>
    32ce:	8f ef       	ldi	r24, 0xFF	; 255
    32d0:	08 95       	ret
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	08 95       	ret

000032d6 <pin_toggle>:
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	9c 01       	movw	r18, r24
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	e1 f0       	breq	.+56     	; 0x3318 <pin_toggle+0x42>
    32e0:	fc 01       	movw	r30, r24
    32e2:	85 91       	lpm	r24, Z+
    32e4:	94 91       	lpm	r25, Z+
    32e6:	fc 01       	movw	r30, r24
    32e8:	a5 91       	lpm	r26, Z+
    32ea:	b4 91       	lpm	r27, Z+
    32ec:	02 96       	adiw	r24, 0x02	; 2
    32ee:	fc 01       	movw	r30, r24
    32f0:	c5 91       	lpm	r28, Z+
    32f2:	d4 91       	lpm	r29, Z+
    32f4:	2e 5f       	subi	r18, 0xFE	; 254
    32f6:	3f 4f       	sbci	r19, 0xFF	; 255
    32f8:	f9 01       	movw	r30, r18
    32fa:	24 91       	lpm	r18, Z+
    32fc:	88 81       	ld	r24, Y
    32fe:	82 23       	and	r24, r18
    3300:	41 f0       	breq	.+16     	; 0x3312 <pin_toggle+0x3c>
    3302:	9f b7       	in	r25, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	8c 91       	ld	r24, X
    3308:	82 27       	eor	r24, r18
    330a:	8c 93       	st	X, r24
    330c:	9f bf       	out	0x3f, r25	; 63
    330e:	00 00       	nop
    3310:	03 c0       	rjmp	.+6      	; 0x3318 <pin_toggle+0x42>
    3312:	87 ef       	ldi	r24, 0xF7	; 247
    3314:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	08 95       	ret

0000331e <pin_low>:
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	9c 01       	movw	r18, r24
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	e9 f0       	breq	.+58     	; 0x3362 <pin_low+0x44>
    3328:	fc 01       	movw	r30, r24
    332a:	85 91       	lpm	r24, Z+
    332c:	94 91       	lpm	r25, Z+
    332e:	fc 01       	movw	r30, r24
    3330:	a5 91       	lpm	r26, Z+
    3332:	b4 91       	lpm	r27, Z+
    3334:	02 96       	adiw	r24, 0x02	; 2
    3336:	fc 01       	movw	r30, r24
    3338:	c5 91       	lpm	r28, Z+
    333a:	d4 91       	lpm	r29, Z+
    333c:	2e 5f       	subi	r18, 0xFE	; 254
    333e:	3f 4f       	sbci	r19, 0xFF	; 255
    3340:	f9 01       	movw	r30, r18
    3342:	24 91       	lpm	r18, Z+
    3344:	88 81       	ld	r24, Y
    3346:	82 23       	and	r24, r18
    3348:	49 f0       	breq	.+18     	; 0x335c <pin_low+0x3e>
    334a:	9f b7       	in	r25, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	8c 91       	ld	r24, X
    3350:	20 95       	com	r18
    3352:	82 23       	and	r24, r18
    3354:	8c 93       	st	X, r24
    3356:	9f bf       	out	0x3f, r25	; 63
    3358:	00 00       	nop
    335a:	03 c0       	rjmp	.+6      	; 0x3362 <pin_low+0x44>
    335c:	87 ef       	ldi	r24, 0xF7	; 247
    335e:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	08 95       	ret

00003368 <pin_high>:
    3368:	cf 93       	push	r28
    336a:	df 93       	push	r29
    336c:	9c 01       	movw	r18, r24
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	e1 f0       	breq	.+56     	; 0x33aa <pin_high+0x42>
    3372:	fc 01       	movw	r30, r24
    3374:	85 91       	lpm	r24, Z+
    3376:	94 91       	lpm	r25, Z+
    3378:	fc 01       	movw	r30, r24
    337a:	a5 91       	lpm	r26, Z+
    337c:	b4 91       	lpm	r27, Z+
    337e:	02 96       	adiw	r24, 0x02	; 2
    3380:	fc 01       	movw	r30, r24
    3382:	c5 91       	lpm	r28, Z+
    3384:	d4 91       	lpm	r29, Z+
    3386:	2e 5f       	subi	r18, 0xFE	; 254
    3388:	3f 4f       	sbci	r19, 0xFF	; 255
    338a:	f9 01       	movw	r30, r18
    338c:	24 91       	lpm	r18, Z+
    338e:	88 81       	ld	r24, Y
    3390:	82 23       	and	r24, r18
    3392:	41 f0       	breq	.+16     	; 0x33a4 <pin_high+0x3c>
    3394:	9f b7       	in	r25, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	8c 91       	ld	r24, X
    339a:	82 2b       	or	r24, r18
    339c:	8c 93       	st	X, r24
    339e:	9f bf       	out	0x3f, r25	; 63
    33a0:	00 00       	nop
    33a2:	03 c0       	rjmp	.+6      	; 0x33aa <pin_high+0x42>
    33a4:	87 ef       	ldi	r24, 0xF7	; 247
    33a6:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	08 95       	ret

000033b0 <pin_set>:
    33b0:	66 23       	and	r22, r22
    33b2:	19 f0       	breq	.+6      	; 0x33ba <pin_set+0xa>
    33b4:	0e 94 b4 19 	call	0x3368	; 0x3368 <pin_high>
    33b8:	08 95       	ret
    33ba:	0e 94 8f 19 	call	0x331e	; 0x331e <pin_low>
    33be:	08 95       	ret

000033c0 <LED_set>:
    33c0:	1f 93       	push	r17
    33c2:	cf 93       	push	r28
    33c4:	df 93       	push	r29
    33c6:	ec 01       	movw	r28, r24
    33c8:	16 2f       	mov	r17, r22
    33ca:	28 81       	ld	r18, Y
    33cc:	39 81       	ldd	r19, Y+1	; 0x01
    33ce:	21 15       	cp	r18, r1
    33d0:	31 05       	cpc	r19, r1
    33d2:	b1 f0       	breq	.+44     	; 0x3400 <LED_set+0x40>
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	81 fd       	sbrc	r24, 1
    33d8:	06 c0       	rjmp	.+12     	; 0x33e6 <LED_set+0x26>
    33da:	c9 01       	movw	r24, r18
    33dc:	0e 94 41 19 	call	0x3282	; 0x3282 <pin_make_output>
    33e0:	8a 81       	ldd	r24, Y+2	; 0x02
    33e2:	82 60       	ori	r24, 0x02	; 2
    33e4:	8a 83       	std	Y+2, r24	; 0x02
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	80 fd       	sbrc	r24, 0
    33ea:	05 c0       	rjmp	.+10     	; 0x33f6 <LED_set+0x36>
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	11 23       	and	r17, r17
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <LED_set+0x34>
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	18 2f       	mov	r17, r24
    33f6:	88 81       	ld	r24, Y
    33f8:	99 81       	ldd	r25, Y+1	; 0x01
    33fa:	61 2f       	mov	r22, r17
    33fc:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <pin_set>
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	1f 91       	pop	r17
    3406:	08 95       	ret

00003408 <__io_to_pc_index>:
    3408:	cf 93       	push	r28
    340a:	df 93       	push	r29
    340c:	ec 01       	movw	r28, r24
    340e:	80 91 09 02 	lds	r24, 0x0209
    3412:	a8 2f       	mov	r26, r24
    3414:	b0 e0       	ldi	r27, 0x00	; 0
    3416:	68 ea       	ldi	r22, 0xA8	; 168
    3418:	71 e0       	ldi	r23, 0x01	; 1
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	0d c0       	rjmp	.+26     	; 0x343a <__io_to_pc_index+0x32>
    3420:	fb 01       	movw	r30, r22
    3422:	45 91       	lpm	r20, Z+
    3424:	54 91       	lpm	r21, Z+
    3426:	41 15       	cp	r20, r1
    3428:	51 05       	cpc	r21, r1
    342a:	19 f0       	breq	.+6      	; 0x3432 <__io_to_pc_index+0x2a>
    342c:	4c 17       	cp	r20, r28
    342e:	5d 07       	cpc	r21, r29
    3430:	49 f0       	breq	.+18     	; 0x3444 <__io_to_pc_index+0x3c>
    3432:	2f 5f       	subi	r18, 0xFF	; 255
    3434:	3f 4f       	sbci	r19, 0xFF	; 255
    3436:	6e 5f       	subi	r22, 0xFE	; 254
    3438:	7f 4f       	sbci	r23, 0xFF	; 255
    343a:	2a 17       	cp	r18, r26
    343c:	3b 07       	cpc	r19, r27
    343e:	84 f3       	brlt	.-32     	; 0x3420 <__io_to_pc_index+0x18>
    3440:	2f ef       	ldi	r18, 0xFF	; 255
    3442:	3f ef       	ldi	r19, 0xFF	; 255
    3444:	c9 01       	movw	r24, r18
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	08 95       	ret

0000344c <pin_change_dettach>:
    344c:	1f 93       	push	r17
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	ec 01       	movw	r28, r24
    3454:	1f b7       	in	r17, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	80 91 09 02 	lds	r24, 0x0209
    345c:	a8 2f       	mov	r26, r24
    345e:	b0 e0       	ldi	r27, 0x00	; 0
    3460:	68 ea       	ldi	r22, 0xA8	; 168
    3462:	71 e0       	ldi	r23, 0x01	; 1
    3464:	40 e0       	ldi	r20, 0x00	; 0
    3466:	50 e0       	ldi	r21, 0x00	; 0
    3468:	0d c0       	rjmp	.+26     	; 0x3484 <pin_change_dettach+0x38>
    346a:	fb 01       	movw	r30, r22
    346c:	25 91       	lpm	r18, Z+
    346e:	34 91       	lpm	r19, Z+
    3470:	21 15       	cp	r18, r1
    3472:	31 05       	cpc	r19, r1
    3474:	19 f0       	breq	.+6      	; 0x347c <pin_change_dettach+0x30>
    3476:	2c 17       	cp	r18, r28
    3478:	3d 07       	cpc	r19, r29
    347a:	41 f0       	breq	.+16     	; 0x348c <pin_change_dettach+0x40>
    347c:	4f 5f       	subi	r20, 0xFF	; 255
    347e:	5f 4f       	sbci	r21, 0xFF	; 255
    3480:	6e 5f       	subi	r22, 0xFE	; 254
    3482:	7f 4f       	sbci	r23, 0xFF	; 255
    3484:	4a 17       	cp	r20, r26
    3486:	5b 07       	cpc	r21, r27
    3488:	84 f3       	brlt	.-32     	; 0x346a <pin_change_dettach+0x1e>
    348a:	43 c0       	rjmp	.+134    	; 0x3512 <pin_change_dettach+0xc6>
    348c:	fa 01       	movw	r30, r20
    348e:	ee 0f       	add	r30, r30
    3490:	ff 1f       	adc	r31, r31
    3492:	ee 0f       	add	r30, r30
    3494:	ff 1f       	adc	r31, r31
    3496:	e4 0f       	add	r30, r20
    3498:	f5 1f       	adc	r31, r21
    349a:	e0 51       	subi	r30, 0x10	; 16
    349c:	f4 4f       	sbci	r31, 0xF4	; 244
    349e:	11 82       	std	Z+1, r1	; 0x01
    34a0:	10 82       	st	Z, r1
    34a2:	13 82       	std	Z+3, r1	; 0x03
    34a4:	12 82       	std	Z+2, r1	; 0x02
    34a6:	48 30       	cpi	r20, 0x08	; 8
    34a8:	51 05       	cpc	r21, r1
    34aa:	74 f4       	brge	.+28     	; 0x34c8 <pin_change_dettach+0x7c>
    34ac:	20 91 6b 00 	lds	r18, 0x006B
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <pin_change_dettach+0x6e>
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	4a 95       	dec	r20
    34bc:	e2 f7       	brpl	.-8      	; 0x34b6 <pin_change_dettach+0x6a>
    34be:	80 95       	com	r24
    34c0:	82 23       	and	r24, r18
    34c2:	80 93 6b 00 	sts	0x006B, r24
    34c6:	25 c0       	rjmp	.+74     	; 0x3512 <pin_change_dettach+0xc6>
    34c8:	40 31       	cpi	r20, 0x10	; 16
    34ca:	51 05       	cpc	r21, r1
    34cc:	84 f4       	brge	.+32     	; 0x34ee <pin_change_dettach+0xa2>
    34ce:	20 91 6c 00 	lds	r18, 0x006C
    34d2:	47 70       	andi	r20, 0x07	; 7
    34d4:	50 70       	andi	r21, 0x00	; 0
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <pin_change_dettach+0x94>
    34dc:	88 0f       	add	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	4a 95       	dec	r20
    34e2:	e2 f7       	brpl	.-8      	; 0x34dc <pin_change_dettach+0x90>
    34e4:	80 95       	com	r24
    34e6:	82 23       	and	r24, r18
    34e8:	80 93 6c 00 	sts	0x006C, r24
    34ec:	12 c0       	rjmp	.+36     	; 0x3512 <pin_change_dettach+0xc6>
    34ee:	48 31       	cpi	r20, 0x18	; 24
    34f0:	51 05       	cpc	r21, r1
    34f2:	7c f4       	brge	.+30     	; 0x3512 <pin_change_dettach+0xc6>
    34f4:	20 91 6d 00 	lds	r18, 0x006D
    34f8:	47 70       	andi	r20, 0x07	; 7
    34fa:	50 70       	andi	r21, 0x00	; 0
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	02 c0       	rjmp	.+4      	; 0x3506 <pin_change_dettach+0xba>
    3502:	88 0f       	add	r24, r24
    3504:	99 1f       	adc	r25, r25
    3506:	4a 95       	dec	r20
    3508:	e2 f7       	brpl	.-8      	; 0x3502 <pin_change_dettach+0xb6>
    350a:	80 95       	com	r24
    350c:	82 23       	and	r24, r18
    350e:	80 93 6d 00 	sts	0x006D, r24
    3512:	1f bf       	out	0x3f, r17	; 63
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	1f 91       	pop	r17
    351a:	08 95       	ret

0000351c <pin_change_service>:
    351c:	bf 92       	push	r11
    351e:	cf 92       	push	r12
    3520:	df 92       	push	r13
    3522:	ef 92       	push	r14
    3524:	ff 92       	push	r15
    3526:	0f 93       	push	r16
    3528:	1f 93       	push	r17
    352a:	cf 93       	push	r28
    352c:	df 93       	push	r29
    352e:	b6 2e       	mov	r11, r22
    3530:	9c 01       	movw	r18, r24
    3532:	7c 01       	movw	r14, r24
    3534:	ee 0c       	add	r14, r14
    3536:	ff 1c       	adc	r15, r15
    3538:	88 ea       	ldi	r24, 0xA8	; 168
    353a:	91 e0       	ldi	r25, 0x01	; 1
    353c:	e8 0e       	add	r14, r24
    353e:	f9 1e       	adc	r15, r25
    3540:	e9 01       	movw	r28, r18
    3542:	cc 0f       	add	r28, r28
    3544:	dd 1f       	adc	r29, r29
    3546:	cc 0f       	add	r28, r28
    3548:	dd 1f       	adc	r29, r29
    354a:	c2 0f       	add	r28, r18
    354c:	d3 1f       	adc	r29, r19
    354e:	c0 51       	subi	r28, 0x10	; 16
    3550:	d4 4f       	sbci	r29, 0xF4	; 244
    3552:	cc 24       	eor	r12, r12
    3554:	dd 24       	eor	r13, r13
    3556:	b0 fe       	sbrs	r11, 0
    3558:	1b c0       	rjmp	.+54     	; 0x3590 <pin_change_service+0x74>
    355a:	f7 01       	movw	r30, r14
    355c:	05 91       	lpm	r16, Z+
    355e:	14 91       	lpm	r17, Z+
    3560:	01 15       	cp	r16, r1
    3562:	11 05       	cpc	r17, r1
    3564:	a9 f0       	breq	.+42     	; 0x3590 <pin_change_service+0x74>
    3566:	88 81       	ld	r24, Y
    3568:	99 81       	ldd	r25, Y+1	; 0x01
    356a:	89 2b       	or	r24, r25
    356c:	89 f0       	breq	.+34     	; 0x3590 <pin_change_service+0x74>
    356e:	c8 01       	movw	r24, r16
    3570:	0e 94 05 19 	call	0x320a	; 0x320a <pin_is_high>
    3574:	68 2f       	mov	r22, r24
    3576:	8c 81       	ldd	r24, Y+4	; 0x04
    3578:	68 17       	cp	r22, r24
    357a:	51 f0       	breq	.+20     	; 0x3590 <pin_change_service+0x74>
    357c:	e8 81       	ld	r30, Y
    357e:	f9 81       	ldd	r31, Y+1	; 0x01
    3580:	4a 81       	ldd	r20, Y+2	; 0x02
    3582:	5b 81       	ldd	r21, Y+3	; 0x03
    3584:	c8 01       	movw	r24, r16
    3586:	09 95       	icall
    3588:	c8 01       	movw	r24, r16
    358a:	0e 94 05 19 	call	0x320a	; 0x320a <pin_is_high>
    358e:	8c 83       	std	Y+4, r24	; 0x04
    3590:	08 94       	sec
    3592:	c1 1c       	adc	r12, r1
    3594:	d1 1c       	adc	r13, r1
    3596:	82 e0       	ldi	r24, 0x02	; 2
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	e8 0e       	add	r14, r24
    359c:	f9 1e       	adc	r15, r25
    359e:	25 96       	adiw	r28, 0x05	; 5
    35a0:	98 e0       	ldi	r25, 0x08	; 8
    35a2:	c9 16       	cp	r12, r25
    35a4:	d1 04       	cpc	r13, r1
    35a6:	11 f0       	breq	.+4      	; 0x35ac <pin_change_service+0x90>
    35a8:	b6 94       	lsr	r11
    35aa:	d5 cf       	rjmp	.-86     	; 0x3556 <pin_change_service+0x3a>
    35ac:	df 91       	pop	r29
    35ae:	cf 91       	pop	r28
    35b0:	1f 91       	pop	r17
    35b2:	0f 91       	pop	r16
    35b4:	ff 90       	pop	r15
    35b6:	ef 90       	pop	r14
    35b8:	df 90       	pop	r13
    35ba:	cf 90       	pop	r12
    35bc:	bf 90       	pop	r11
    35be:	08 95       	ret

000035c0 <__vector_11>:
    35c0:	1f 92       	push	r1
    35c2:	0f 92       	push	r0
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	0f 92       	push	r0
    35c8:	11 24       	eor	r1, r1
    35ca:	2f 93       	push	r18
    35cc:	3f 93       	push	r19
    35ce:	4f 93       	push	r20
    35d0:	5f 93       	push	r21
    35d2:	6f 93       	push	r22
    35d4:	7f 93       	push	r23
    35d6:	8f 93       	push	r24
    35d8:	9f 93       	push	r25
    35da:	af 93       	push	r26
    35dc:	bf 93       	push	r27
    35de:	ef 93       	push	r30
    35e0:	ff 93       	push	r31
    35e2:	60 91 6d 00 	lds	r22, 0x006D
    35e6:	80 e1       	ldi	r24, 0x10	; 16
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	0e 94 8e 1a 	call	0x351c	; 0x351c <pin_change_service>
    35ee:	ff 91       	pop	r31
    35f0:	ef 91       	pop	r30
    35f2:	bf 91       	pop	r27
    35f4:	af 91       	pop	r26
    35f6:	9f 91       	pop	r25
    35f8:	8f 91       	pop	r24
    35fa:	7f 91       	pop	r23
    35fc:	6f 91       	pop	r22
    35fe:	5f 91       	pop	r21
    3600:	4f 91       	pop	r20
    3602:	3f 91       	pop	r19
    3604:	2f 91       	pop	r18
    3606:	0f 90       	pop	r0
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	0f 90       	pop	r0
    360c:	1f 90       	pop	r1
    360e:	18 95       	reti

00003610 <__vector_10>:
    3610:	1f 92       	push	r1
    3612:	0f 92       	push	r0
    3614:	0f b6       	in	r0, 0x3f	; 63
    3616:	0f 92       	push	r0
    3618:	11 24       	eor	r1, r1
    361a:	2f 93       	push	r18
    361c:	3f 93       	push	r19
    361e:	4f 93       	push	r20
    3620:	5f 93       	push	r21
    3622:	6f 93       	push	r22
    3624:	7f 93       	push	r23
    3626:	8f 93       	push	r24
    3628:	9f 93       	push	r25
    362a:	af 93       	push	r26
    362c:	bf 93       	push	r27
    362e:	ef 93       	push	r30
    3630:	ff 93       	push	r31
    3632:	60 91 6c 00 	lds	r22, 0x006C
    3636:	88 e0       	ldi	r24, 0x08	; 8
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	0e 94 8e 1a 	call	0x351c	; 0x351c <pin_change_service>
    363e:	ff 91       	pop	r31
    3640:	ef 91       	pop	r30
    3642:	bf 91       	pop	r27
    3644:	af 91       	pop	r26
    3646:	9f 91       	pop	r25
    3648:	8f 91       	pop	r24
    364a:	7f 91       	pop	r23
    364c:	6f 91       	pop	r22
    364e:	5f 91       	pop	r21
    3650:	4f 91       	pop	r20
    3652:	3f 91       	pop	r19
    3654:	2f 91       	pop	r18
    3656:	0f 90       	pop	r0
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	0f 90       	pop	r0
    365c:	1f 90       	pop	r1
    365e:	18 95       	reti

00003660 <__vector_9>:
    3660:	1f 92       	push	r1
    3662:	0f 92       	push	r0
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	0f 92       	push	r0
    3668:	11 24       	eor	r1, r1
    366a:	2f 93       	push	r18
    366c:	3f 93       	push	r19
    366e:	4f 93       	push	r20
    3670:	5f 93       	push	r21
    3672:	6f 93       	push	r22
    3674:	7f 93       	push	r23
    3676:	8f 93       	push	r24
    3678:	9f 93       	push	r25
    367a:	af 93       	push	r26
    367c:	bf 93       	push	r27
    367e:	ef 93       	push	r30
    3680:	ff 93       	push	r31
    3682:	60 91 6b 00 	lds	r22, 0x006B
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 8e 1a 	call	0x351c	; 0x351c <pin_change_service>
    368e:	ff 91       	pop	r31
    3690:	ef 91       	pop	r30
    3692:	bf 91       	pop	r27
    3694:	af 91       	pop	r26
    3696:	9f 91       	pop	r25
    3698:	8f 91       	pop	r24
    369a:	7f 91       	pop	r23
    369c:	6f 91       	pop	r22
    369e:	5f 91       	pop	r21
    36a0:	4f 91       	pop	r20
    36a2:	3f 91       	pop	r19
    36a4:	2f 91       	pop	r18
    36a6:	0f 90       	pop	r0
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	0f 90       	pop	r0
    36ac:	1f 90       	pop	r1
    36ae:	18 95       	reti

000036b0 <pin_change_attach>:
    36b0:	ef 92       	push	r14
    36b2:	ff 92       	push	r15
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
    36bc:	7c 01       	movw	r14, r24
    36be:	f8 94       	cli
    36c0:	80 91 09 02 	lds	r24, 0x0209
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	a8 ea       	ldi	r26, 0xA8	; 168
    36c8:	b1 e0       	ldi	r27, 0x01	; 1
    36ca:	00 e0       	ldi	r16, 0x00	; 0
    36cc:	10 e0       	ldi	r17, 0x00	; 0
    36ce:	0c c0       	rjmp	.+24     	; 0x36e8 <pin_change_attach+0x38>
    36d0:	fd 01       	movw	r30, r26
    36d2:	25 91       	lpm	r18, Z+
    36d4:	34 91       	lpm	r19, Z+
    36d6:	21 15       	cp	r18, r1
    36d8:	31 05       	cpc	r19, r1
    36da:	19 f0       	breq	.+6      	; 0x36e2 <pin_change_attach+0x32>
    36dc:	2e 15       	cp	r18, r14
    36de:	3f 05       	cpc	r19, r15
    36e0:	39 f0       	breq	.+14     	; 0x36f0 <pin_change_attach+0x40>
    36e2:	0f 5f       	subi	r16, 0xFF	; 255
    36e4:	1f 4f       	sbci	r17, 0xFF	; 255
    36e6:	12 96       	adiw	r26, 0x02	; 2
    36e8:	08 17       	cp	r16, r24
    36ea:	19 07       	cpc	r17, r25
    36ec:	8c f3       	brlt	.-30     	; 0x36d0 <pin_change_attach+0x20>
    36ee:	5d c0       	rjmp	.+186    	; 0x37aa <pin_change_attach+0xfa>
    36f0:	e8 01       	movw	r28, r16
    36f2:	cc 0f       	add	r28, r28
    36f4:	dd 1f       	adc	r29, r29
    36f6:	cc 0f       	add	r28, r28
    36f8:	dd 1f       	adc	r29, r29
    36fa:	c0 0f       	add	r28, r16
    36fc:	d1 1f       	adc	r29, r17
    36fe:	c0 51       	subi	r28, 0x10	; 16
    3700:	d4 4f       	sbci	r29, 0xF4	; 244
    3702:	88 81       	ld	r24, Y
    3704:	99 81       	ldd	r25, Y+1	; 0x01
    3706:	89 2b       	or	r24, r25
    3708:	11 f0       	breq	.+4      	; 0x370e <pin_change_attach+0x5e>
    370a:	8b ee       	ldi	r24, 0xEB	; 235
    370c:	4f c0       	rjmp	.+158    	; 0x37ac <pin_change_attach+0xfc>
    370e:	79 83       	std	Y+1, r23	; 0x01
    3710:	68 83       	st	Y, r22
    3712:	5b 83       	std	Y+3, r21	; 0x03
    3714:	4a 83       	std	Y+2, r20	; 0x02
    3716:	c7 01       	movw	r24, r14
    3718:	0e 94 05 19 	call	0x320a	; 0x320a <pin_is_high>
    371c:	8c 83       	std	Y+4, r24	; 0x04
    371e:	08 30       	cpi	r16, 0x08	; 8
    3720:	11 05       	cpc	r17, r1
    3722:	84 f4       	brge	.+32     	; 0x3744 <pin_change_attach+0x94>
    3724:	80 91 6b 00 	lds	r24, 0x006B
    3728:	21 e0       	ldi	r18, 0x01	; 1
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	02 c0       	rjmp	.+4      	; 0x3732 <pin_change_attach+0x82>
    372e:	22 0f       	add	r18, r18
    3730:	33 1f       	adc	r19, r19
    3732:	0a 95       	dec	r16
    3734:	e2 f7       	brpl	.-8      	; 0x372e <pin_change_attach+0x7e>
    3736:	82 2b       	or	r24, r18
    3738:	80 93 6b 00 	sts	0x006B, r24
    373c:	80 91 68 00 	lds	r24, 0x0068
    3740:	81 60       	ori	r24, 0x01	; 1
    3742:	29 c0       	rjmp	.+82     	; 0x3796 <pin_change_attach+0xe6>
    3744:	00 31       	cpi	r16, 0x10	; 16
    3746:	11 05       	cpc	r17, r1
    3748:	94 f4       	brge	.+36     	; 0x376e <pin_change_attach+0xbe>
    374a:	80 91 6c 00 	lds	r24, 0x006C
    374e:	07 70       	andi	r16, 0x07	; 7
    3750:	10 70       	andi	r17, 0x00	; 0
    3752:	21 e0       	ldi	r18, 0x01	; 1
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	02 c0       	rjmp	.+4      	; 0x375c <pin_change_attach+0xac>
    3758:	22 0f       	add	r18, r18
    375a:	33 1f       	adc	r19, r19
    375c:	0a 95       	dec	r16
    375e:	e2 f7       	brpl	.-8      	; 0x3758 <pin_change_attach+0xa8>
    3760:	82 2b       	or	r24, r18
    3762:	80 93 6c 00 	sts	0x006C, r24
    3766:	80 91 68 00 	lds	r24, 0x0068
    376a:	82 60       	ori	r24, 0x02	; 2
    376c:	14 c0       	rjmp	.+40     	; 0x3796 <pin_change_attach+0xe6>
    376e:	08 31       	cpi	r16, 0x18	; 24
    3770:	11 05       	cpc	r17, r1
    3772:	9c f4       	brge	.+38     	; 0x379a <pin_change_attach+0xea>
    3774:	80 91 6d 00 	lds	r24, 0x006D
    3778:	07 70       	andi	r16, 0x07	; 7
    377a:	10 70       	andi	r17, 0x00	; 0
    377c:	21 e0       	ldi	r18, 0x01	; 1
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <pin_change_attach+0xd6>
    3782:	22 0f       	add	r18, r18
    3784:	33 1f       	adc	r19, r19
    3786:	0a 95       	dec	r16
    3788:	e2 f7       	brpl	.-8      	; 0x3782 <pin_change_attach+0xd2>
    378a:	82 2b       	or	r24, r18
    378c:	80 93 6d 00 	sts	0x006D, r24
    3790:	80 91 68 00 	lds	r24, 0x0068
    3794:	84 60       	ori	r24, 0x04	; 4
    3796:	80 93 68 00 	sts	0x0068, r24
    379a:	78 94       	sei
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	1f 91       	pop	r17
    37a2:	0f 91       	pop	r16
    37a4:	ff 90       	pop	r15
    37a6:	ef 90       	pop	r14
    37a8:	08 95       	ret
    37aa:	8c ee       	ldi	r24, 0xEC	; 236
    37ac:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    37b0:	f4 cf       	rjmp	.-24     	; 0x379a <pin_change_attach+0xea>

000037b2 <rprintfIgnore>:
    37b2:	08 95       	ret

000037b4 <rprintfInit>:
    37b4:	20 91 c7 03 	lds	r18, 0x03C7
    37b8:	30 91 c8 03 	lds	r19, 0x03C8
    37bc:	90 93 c8 03 	sts	0x03C8, r25
    37c0:	80 93 c7 03 	sts	0x03C7, r24
    37c4:	c9 01       	movw	r24, r18
    37c6:	08 95       	ret

000037c8 <rprintfChar>:
    37c8:	1f 93       	push	r17
    37ca:	18 2f       	mov	r17, r24
    37cc:	8a 30       	cpi	r24, 0x0A	; 10
    37ce:	31 f4       	brne	.+12     	; 0x37dc <rprintfChar+0x14>
    37d0:	e0 91 c7 03 	lds	r30, 0x03C7
    37d4:	f0 91 c8 03 	lds	r31, 0x03C8
    37d8:	8d e0       	ldi	r24, 0x0D	; 13
    37da:	09 95       	icall
    37dc:	e0 91 c7 03 	lds	r30, 0x03C7
    37e0:	f0 91 c8 03 	lds	r31, 0x03C8
    37e4:	81 2f       	mov	r24, r17
    37e6:	09 95       	icall
    37e8:	1f 91       	pop	r17
    37ea:	08 95       	ret

000037ec <rprintfCharN>:
    37ec:	1f 93       	push	r17
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	18 2f       	mov	r17, r24
    37f4:	eb 01       	movw	r28, r22
    37f6:	04 c0       	rjmp	.+8      	; 0x3800 <rprintfCharN+0x14>
    37f8:	81 2f       	mov	r24, r17
    37fa:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <rprintfChar>
    37fe:	21 97       	sbiw	r28, 0x01	; 1
    3800:	20 97       	sbiw	r28, 0x00	; 0
    3802:	d1 f7       	brne	.-12     	; 0x37f8 <rprintfCharN+0xc>
    3804:	df 91       	pop	r29
    3806:	cf 91       	pop	r28
    3808:	1f 91       	pop	r17
    380a:	08 95       	ret

0000380c <rprintfStr>:
    380c:	cf 93       	push	r28
    380e:	df 93       	push	r29
    3810:	ec 01       	movw	r28, r24
    3812:	00 97       	sbiw	r24, 0x00	; 0
    3814:	21 f4       	brne	.+8      	; 0x381e <rprintfStr+0x12>
    3816:	06 c0       	rjmp	.+12     	; 0x3824 <rprintfStr+0x18>
    3818:	21 96       	adiw	r28, 0x01	; 1
    381a:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <rprintfChar>
    381e:	88 81       	ld	r24, Y
    3820:	88 23       	and	r24, r24
    3822:	d1 f7       	brne	.-12     	; 0x3818 <rprintfStr+0xc>
    3824:	df 91       	pop	r29
    3826:	cf 91       	pop	r28
    3828:	08 95       	ret

0000382a <rprintfProgStr>:
    382a:	cf 93       	push	r28
    382c:	df 93       	push	r29
    382e:	ec 01       	movw	r28, r24
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	19 f4       	brne	.+6      	; 0x383a <rprintfProgStr+0x10>
    3834:	07 c0       	rjmp	.+14     	; 0x3844 <rprintfProgStr+0x1a>
    3836:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <rprintfChar>
    383a:	fe 01       	movw	r30, r28
    383c:	21 96       	adiw	r28, 0x01	; 1
    383e:	84 91       	lpm	r24, Z+
    3840:	88 23       	and	r24, r24
    3842:	c9 f7       	brne	.-14     	; 0x3836 <rprintfProgStr+0xc>
    3844:	df 91       	pop	r29
    3846:	cf 91       	pop	r28
    3848:	08 95       	ret

0000384a <rprintfCRLF>:
    384a:	8a e0       	ldi	r24, 0x0A	; 10
    384c:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <rprintfChar>
    3850:	08 95       	ret

00003852 <rprintfu04>:
    3852:	e8 2f       	mov	r30, r24
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	ef 70       	andi	r30, 0x0F	; 15
    3858:	f0 70       	andi	r31, 0x00	; 0
    385a:	ed 50       	subi	r30, 0x0D	; 13
    385c:	fb 4f       	sbci	r31, 0xFB	; 251
    385e:	e4 91       	lpm	r30, Z+
    3860:	8e 2f       	mov	r24, r30
    3862:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <rprintfChar>
    3866:	08 95       	ret

00003868 <rprintfu08>:
    3868:	1f 93       	push	r17
    386a:	18 2f       	mov	r17, r24
    386c:	82 95       	swap	r24
    386e:	8f 70       	andi	r24, 0x0F	; 15
    3870:	0e 94 29 1c 	call	0x3852	; 0x3852 <rprintfu04>
    3874:	81 2f       	mov	r24, r17
    3876:	0e 94 29 1c 	call	0x3852	; 0x3852 <rprintfu04>
    387a:	1f 91       	pop	r17
    387c:	08 95       	ret

0000387e <rprintfu16>:
    387e:	1f 93       	push	r17
    3880:	18 2f       	mov	r17, r24
    3882:	89 2f       	mov	r24, r25
    3884:	0e 94 34 1c 	call	0x3868	; 0x3868 <rprintfu08>
    3888:	81 2f       	mov	r24, r17
    388a:	0e 94 34 1c 	call	0x3868	; 0x3868 <rprintfu08>
    388e:	1f 91       	pop	r17
    3890:	08 95       	ret

00003892 <rprintfu32>:
    3892:	ef 92       	push	r14
    3894:	ff 92       	push	r15
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	7b 01       	movw	r14, r22
    389c:	8c 01       	movw	r16, r24
    389e:	c8 01       	movw	r24, r16
    38a0:	aa 27       	eor	r26, r26
    38a2:	bb 27       	eor	r27, r27
    38a4:	0e 94 3f 1c 	call	0x387e	; 0x387e <rprintfu16>
    38a8:	c7 01       	movw	r24, r14
    38aa:	0e 94 3f 1c 	call	0x387e	; 0x387e <rprintfu16>
    38ae:	1f 91       	pop	r17
    38b0:	0f 91       	pop	r16
    38b2:	ff 90       	pop	r15
    38b4:	ef 90       	pop	r14
    38b6:	08 95       	ret

000038b8 <rprintf1RamRom>:
    38b8:	7f 92       	push	r7
    38ba:	8f 92       	push	r8
    38bc:	9f 92       	push	r9
    38be:	af 92       	push	r10
    38c0:	bf 92       	push	r11
    38c2:	cf 92       	push	r12
    38c4:	df 92       	push	r13
    38c6:	ef 92       	push	r14
    38c8:	ff 92       	push	r15
    38ca:	0f 93       	push	r16
    38cc:	1f 93       	push	r17
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	0f 92       	push	r0
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
    38d8:	79 88       	ldd	r7, Y+17	; 0x11
    38da:	ca 88       	ldd	r12, Y+18	; 0x12
    38dc:	db 88       	ldd	r13, Y+19	; 0x13
    38de:	64 e1       	ldi	r22, 0x14	; 20
    38e0:	e6 2e       	mov	r14, r22
    38e2:	f1 2c       	mov	r15, r1
    38e4:	ec 0e       	add	r14, r28
    38e6:	fd 1e       	adc	r15, r29
    38e8:	17 c0       	rjmp	.+46     	; 0x3918 <rprintf1RamRom+0x60>
    38ea:	88 23       	and	r24, r24
    38ec:	89 f4       	brne	.+34     	; 0x3910 <rprintf1RamRom+0x58>
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	0f 90       	pop	r0
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	1f 91       	pop	r17
    38fa:	0f 91       	pop	r16
    38fc:	ff 90       	pop	r15
    38fe:	ef 90       	pop	r14
    3900:	df 90       	pop	r13
    3902:	cf 90       	pop	r12
    3904:	bf 90       	pop	r11
    3906:	af 90       	pop	r10
    3908:	9f 90       	pop	r9
    390a:	8f 90       	pop	r8
    390c:	7f 90       	pop	r7
    390e:	08 95       	ret
    3910:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <rprintfChar>
    3914:	57 01       	movw	r10, r14
    3916:	75 01       	movw	r14, r10
    3918:	96 01       	movw	r18, r12
    391a:	2f 5f       	subi	r18, 0xFF	; 255
    391c:	3f 4f       	sbci	r19, 0xFF	; 255
    391e:	77 20       	and	r7, r7
    3920:	21 f0       	breq	.+8      	; 0x392a <rprintf1RamRom+0x72>
    3922:	f6 01       	movw	r30, r12
    3924:	69 01       	movw	r12, r18
    3926:	84 91       	lpm	r24, Z+
    3928:	03 c0       	rjmp	.+6      	; 0x3930 <rprintf1RamRom+0x78>
    392a:	f6 01       	movw	r30, r12
    392c:	80 81       	ld	r24, Z
    392e:	69 01       	movw	r12, r18
    3930:	85 32       	cpi	r24, 0x25	; 37
    3932:	d9 f6       	brne	.-74     	; 0x38ea <rprintf1RamRom+0x32>
    3934:	2f 5f       	subi	r18, 0xFF	; 255
    3936:	3f 4f       	sbci	r19, 0xFF	; 255
    3938:	77 20       	and	r7, r7
    393a:	21 f0       	breq	.+8      	; 0x3944 <rprintf1RamRom+0x8c>
    393c:	f6 01       	movw	r30, r12
    393e:	69 01       	movw	r12, r18
    3940:	94 91       	lpm	r25, Z+
    3942:	03 c0       	rjmp	.+6      	; 0x394a <rprintf1RamRom+0x92>
    3944:	f6 01       	movw	r30, r12
    3946:	90 81       	ld	r25, Z
    3948:	69 01       	movw	r12, r18
    394a:	93 37       	cpi	r25, 0x73	; 115
    394c:	a1 f0       	breq	.+40     	; 0x3976 <rprintf1RamRom+0xbe>
    394e:	94 37       	cpi	r25, 0x74	; 116
    3950:	38 f4       	brcc	.+14     	; 0x3960 <rprintf1RamRom+0xa8>
    3952:	93 36       	cpi	r25, 0x63	; 99
    3954:	d9 f0       	breq	.+54     	; 0x398c <rprintf1RamRom+0xd4>
    3956:	94 36       	cpi	r25, 0x64	; 100
    3958:	41 f0       	breq	.+16     	; 0x396a <rprintf1RamRom+0xb2>
    395a:	95 32       	cpi	r25, 0x25	; 37
    395c:	09 f5       	brne	.+66     	; 0x39a0 <rprintf1RamRom+0xe8>
    395e:	25 c0       	rjmp	.+74     	; 0x39aa <rprintf1RamRom+0xf2>
    3960:	95 37       	cpi	r25, 0x75	; 117
    3962:	19 f0       	breq	.+6      	; 0x396a <rprintf1RamRom+0xb2>
    3964:	98 37       	cpi	r25, 0x78	; 120
    3966:	e1 f4       	brne	.+56     	; 0x39a0 <rprintf1RamRom+0xe8>
    3968:	22 c0       	rjmp	.+68     	; 0x39ae <rprintf1RamRom+0xf6>
    396a:	00 e1       	ldi	r16, 0x10	; 16
    396c:	17 e2       	ldi	r17, 0x27	; 39
    396e:	5a e0       	ldi	r21, 0x0A	; 10
    3970:	85 2e       	mov	r8, r21
    3972:	91 2c       	mov	r9, r1
    3974:	21 c0       	rjmp	.+66     	; 0x39b8 <rprintf1RamRom+0x100>
    3976:	42 e0       	ldi	r20, 0x02	; 2
    3978:	a4 2e       	mov	r10, r20
    397a:	b1 2c       	mov	r11, r1
    397c:	ae 0c       	add	r10, r14
    397e:	bf 1c       	adc	r11, r15
    3980:	f7 01       	movw	r30, r14
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	0e 94 06 1c 	call	0x380c	; 0x380c <rprintfStr>
    398a:	c5 cf       	rjmp	.-118    	; 0x3916 <rprintf1RamRom+0x5e>
    398c:	32 e0       	ldi	r19, 0x02	; 2
    398e:	a3 2e       	mov	r10, r19
    3990:	b1 2c       	mov	r11, r1
    3992:	ae 0c       	add	r10, r14
    3994:	bf 1c       	adc	r11, r15
    3996:	f7 01       	movw	r30, r14
    3998:	80 81       	ld	r24, Z
    399a:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <rprintfChar>
    399e:	bb cf       	rjmp	.-138    	; 0x3916 <rprintf1RamRom+0x5e>
    39a0:	85 e2       	ldi	r24, 0x25	; 37
    39a2:	99 83       	std	Y+1, r25	; 0x01
    39a4:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <rprintfChar>
    39a8:	99 81       	ldd	r25, Y+1	; 0x01
    39aa:	89 2f       	mov	r24, r25
    39ac:	b1 cf       	rjmp	.-158    	; 0x3910 <rprintf1RamRom+0x58>
    39ae:	00 e0       	ldi	r16, 0x00	; 0
    39b0:	10 e1       	ldi	r17, 0x10	; 16
    39b2:	20 e1       	ldi	r18, 0x10	; 16
    39b4:	82 2e       	mov	r8, r18
    39b6:	91 2c       	mov	r9, r1
    39b8:	82 e0       	ldi	r24, 0x02	; 2
    39ba:	a8 2e       	mov	r10, r24
    39bc:	b1 2c       	mov	r11, r1
    39be:	ae 0c       	add	r10, r14
    39c0:	bf 1c       	adc	r11, r15
    39c2:	f7 01       	movw	r30, r14
    39c4:	e0 80       	ld	r14, Z
    39c6:	f1 80       	ldd	r15, Z+1	; 0x01
    39c8:	94 36       	cpi	r25, 0x64	; 100
    39ca:	51 f4       	brne	.+20     	; 0x39e0 <rprintf1RamRom+0x128>
    39cc:	f7 fe       	sbrs	r15, 7
    39ce:	14 c0       	rjmp	.+40     	; 0x39f8 <rprintf1RamRom+0x140>
    39d0:	f0 94       	com	r15
    39d2:	e1 94       	neg	r14
    39d4:	f1 08       	sbc	r15, r1
    39d6:	f3 94       	inc	r15
    39d8:	8d e2       	ldi	r24, 0x2D	; 45
    39da:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <rprintfChar>
    39de:	0c c0       	rjmp	.+24     	; 0x39f8 <rprintf1RamRom+0x140>
    39e0:	95 37       	cpi	r25, 0x75	; 117
    39e2:	69 f4       	brne	.+26     	; 0x39fe <rprintf1RamRom+0x146>
    39e4:	09 c0       	rjmp	.+18     	; 0x39f8 <rprintf1RamRom+0x140>
    39e6:	c8 01       	movw	r24, r16
    39e8:	6a e0       	ldi	r22, 0x0A	; 10
    39ea:	70 e0       	ldi	r23, 0x00	; 0
    39ec:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    39f0:	8b 01       	movw	r16, r22
    39f2:	62 30       	cpi	r22, 0x02	; 2
    39f4:	71 05       	cpc	r23, r1
    39f6:	18 f0       	brcs	.+6      	; 0x39fe <rprintf1RamRom+0x146>
    39f8:	e0 16       	cp	r14, r16
    39fa:	f1 06       	cpc	r15, r17
    39fc:	a0 f3       	brcs	.-24     	; 0x39e6 <rprintf1RamRom+0x12e>
    39fe:	c7 01       	movw	r24, r14
    3a00:	b8 01       	movw	r22, r16
    3a02:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    3a06:	86 2f       	mov	r24, r22
    3a08:	0e 94 29 1c 	call	0x3852	; 0x3852 <rprintfu04>
    3a0c:	c7 01       	movw	r24, r14
    3a0e:	b8 01       	movw	r22, r16
    3a10:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    3a14:	7c 01       	movw	r14, r24
    3a16:	c8 01       	movw	r24, r16
    3a18:	b4 01       	movw	r22, r8
    3a1a:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    3a1e:	8b 01       	movw	r16, r22
    3a20:	61 15       	cp	r22, r1
    3a22:	71 05       	cpc	r23, r1
    3a24:	61 f7       	brne	.-40     	; 0x39fe <rprintf1RamRom+0x146>
    3a26:	77 cf       	rjmp	.-274    	; 0x3916 <rprintf1RamRom+0x5e>

00003a28 <__servoEndService>:
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	ec 01       	movw	r28, r24
    3a2e:	fb 01       	movw	r30, r22
    3a30:	92 81       	ldd	r25, Z+2	; 0x02
    3a32:	85 81       	ldd	r24, Z+5	; 0x05
    3a34:	98 17       	cp	r25, r24
    3a36:	88 f4       	brcc	.+34     	; 0x3a5a <__servoEndService+0x32>
    3a38:	89 2f       	mov	r24, r25
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	20 81       	ld	r18, Z
    3a42:	31 81       	ldd	r19, Z+1	; 0x01
    3a44:	28 0f       	add	r18, r24
    3a46:	39 1f       	adc	r19, r25
    3a48:	f9 01       	movw	r30, r18
    3a4a:	a5 91       	lpm	r26, Z+
    3a4c:	b4 91       	lpm	r27, Z+
    3a4e:	16 96       	adiw	r26, 0x06	; 6
    3a50:	8d 91       	ld	r24, X+
    3a52:	9c 91       	ld	r25, X
    3a54:	17 97       	sbiw	r26, 0x07	; 7
    3a56:	0e 94 8f 19 	call	0x331e	; 0x331e <pin_low>
    3a5a:	ce 01       	movw	r24, r28
    3a5c:	03 96       	adiw	r24, 0x03	; 3
    3a5e:	0e 94 a1 18 	call	0x3142	; 0x3142 <__portMaskClear>
    3a62:	df 91       	pop	r29
    3a64:	cf 91       	pop	r28
    3a66:	08 95       	ret

00003a68 <servosInit>:
    3a68:	2f 92       	push	r2
    3a6a:	3f 92       	push	r3
    3a6c:	4f 92       	push	r4
    3a6e:	5f 92       	push	r5
    3a70:	6f 92       	push	r6
    3a72:	7f 92       	push	r7
    3a74:	8f 92       	push	r8
    3a76:	9f 92       	push	r9
    3a78:	af 92       	push	r10
    3a7a:	bf 92       	push	r11
    3a7c:	cf 92       	push	r12
    3a7e:	df 92       	push	r13
    3a80:	ef 92       	push	r14
    3a82:	ff 92       	push	r15
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	5c 01       	movw	r10, r24
    3a8e:	eb 01       	movw	r28, r22
    3a90:	9b 01       	movw	r18, r22
    3a92:	29 5e       	subi	r18, 0xE9	; 233
    3a94:	3f 4f       	sbci	r19, 0xFF	; 255
    3a96:	f9 01       	movw	r30, r18
    3a98:	65 90       	lpm	r6, Z+
    3a9a:	74 90       	lpm	r7, Z+
    3a9c:	f9 01       	movw	r30, r18
    3a9e:	25 90       	lpm	r2, Z+
    3aa0:	34 90       	lpm	r3, Z+
    3aa2:	26 96       	adiw	r28, 0x06	; 6
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	84 91       	lpm	r24, Z+
    3aa8:	26 97       	sbiw	r28, 0x06	; 6
    3aaa:	88 23       	and	r24, r24
    3aac:	09 f4       	brne	.+2      	; 0x3ab0 <servosInit+0x48>
    3aae:	b7 c0       	rjmp	.+366    	; 0x3c1e <servosInit+0x1b6>
    3ab0:	28 96       	adiw	r28, 0x08	; 8
    3ab2:	fe 01       	movw	r30, r28
    3ab4:	84 91       	lpm	r24, Z+
    3ab6:	28 97       	sbiw	r28, 0x08	; 8
    3ab8:	82 30       	cpi	r24, 0x02	; 2
    3aba:	08 f4       	brcc	.+2      	; 0x3abe <servosInit+0x56>
    3abc:	b0 c0       	rjmp	.+352    	; 0x3c1e <servosInit+0x1b6>
    3abe:	ce 01       	movw	r24, r28
    3ac0:	04 96       	adiw	r24, 0x04	; 4
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	a5 91       	lpm	r26, Z+
    3ac6:	b4 91       	lpm	r27, Z+
    3ac8:	8c 91       	ld	r24, X
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	87 70       	andi	r24, 0x07	; 7
    3ace:	90 70       	andi	r25, 0x00	; 0
    3ad0:	89 2b       	or	r24, r25
    3ad2:	09 f4       	brne	.+2      	; 0x3ad6 <servosInit+0x6e>
    3ad4:	a8 c0       	rjmp	.+336    	; 0x3c26 <servosInit+0x1be>
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	a5 91       	lpm	r26, Z+
    3ada:	b4 91       	lpm	r27, Z+
    3adc:	8d 90       	ld	r8, X+
    3ade:	9c 90       	ld	r9, X
    3ae0:	11 97       	sbiw	r26, 0x01	; 1
    3ae2:	1e 96       	adiw	r26, 0x0e	; 14
    3ae4:	8c 91       	ld	r24, X
    3ae6:	88 23       	and	r24, r24
    3ae8:	19 f0       	breq	.+6      	; 0x3af0 <servosInit+0x88>
    3aea:	82 ef       	ldi	r24, 0xF2	; 242
    3aec:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    3af0:	d5 01       	movw	r26, r10
    3af2:	15 96       	adiw	r26, 0x05	; 5
    3af4:	8c 91       	ld	r24, X
    3af6:	15 97       	sbiw	r26, 0x05	; 5
    3af8:	12 96       	adiw	r26, 0x02	; 2
    3afa:	8c 93       	st	X, r24
    3afc:	64 e1       	ldi	r22, 0x14	; 20
    3afe:	70 e0       	ldi	r23, 0x00	; 0
    3b00:	80 e0       	ldi	r24, 0x00	; 0
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	a4 01       	movw	r20, r8
    3b06:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <ticks_per_ms>
    3b0a:	f5 01       	movw	r30, r10
    3b0c:	77 83       	std	Z+7, r23	; 0x07
    3b0e:	66 83       	std	Z+6, r22	; 0x06
    3b10:	60 70       	andi	r22, 0x00	; 0
    3b12:	70 70       	andi	r23, 0x00	; 0
    3b14:	61 15       	cp	r22, r1
    3b16:	71 05       	cpc	r23, r1
    3b18:	81 05       	cpc	r24, r1
    3b1a:	91 05       	cpc	r25, r1
    3b1c:	19 f0       	breq	.+6      	; 0x3b24 <servosInit+0xbc>
    3b1e:	86 ee       	ldi	r24, 0xE6	; 230
    3b20:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    3b24:	d5 01       	movw	r26, r10
    3b26:	15 96       	adiw	r26, 0x05	; 5
    3b28:	8c 91       	ld	r24, X
    3b2a:	e8 2e       	mov	r14, r24
    3b2c:	ff 24       	eor	r15, r15
    3b2e:	08 94       	sec
    3b30:	e1 08       	sbc	r14, r1
    3b32:	f1 08       	sbc	r15, r1
    3b34:	67 01       	movw	r12, r14
    3b36:	cc 0c       	add	r12, r12
    3b38:	dd 1c       	adc	r13, r13
    3b3a:	34 e0       	ldi	r19, 0x04	; 4
    3b3c:	43 2e       	mov	r4, r19
    3b3e:	35 e0       	ldi	r19, 0x05	; 5
    3b40:	53 2e       	mov	r5, r19
    3b42:	35 c0       	rjmp	.+106    	; 0x3bae <servosInit+0x146>
    3b44:	d5 01       	movw	r26, r10
    3b46:	ed 91       	ld	r30, X+
    3b48:	fc 91       	ld	r31, X
    3b4a:	11 97       	sbiw	r26, 0x01	; 1
    3b4c:	ec 0d       	add	r30, r12
    3b4e:	fd 1d       	adc	r31, r13
    3b50:	05 91       	lpm	r16, Z+
    3b52:	14 91       	lpm	r17, Z+
    3b54:	f8 01       	movw	r30, r16
    3b56:	51 82       	std	Z+1, r5	; 0x01
    3b58:	40 82       	st	Z, r4
    3b5a:	b5 82       	std	Z+5, r11	; 0x05
    3b5c:	a4 82       	std	Z+4, r10	; 0x04
    3b5e:	16 96       	adiw	r26, 0x06	; 6
    3b60:	8d 91       	ld	r24, X+
    3b62:	9c 91       	ld	r25, X
    3b64:	17 97       	sbiw	r26, 0x07	; 7
    3b66:	93 8b       	std	Z+19, r25	; 0x13
    3b68:	82 8b       	std	Z+18, r24	; 0x12
    3b6a:	86 81       	ldd	r24, Z+6	; 0x06
    3b6c:	97 81       	ldd	r25, Z+7	; 0x07
    3b6e:	0e 94 41 19 	call	0x3282	; 0x3282 <pin_make_output>
    3b72:	d8 01       	movw	r26, r16
    3b74:	16 96       	adiw	r26, 0x06	; 6
    3b76:	8d 91       	ld	r24, X+
    3b78:	9c 91       	ld	r25, X
    3b7a:	17 97       	sbiw	r26, 0x07	; 7
    3b7c:	0e 94 8f 19 	call	0x331e	; 0x331e <pin_low>
    3b80:	f8 01       	movw	r30, r16
    3b82:	60 85       	ldd	r22, Z+8	; 0x08
    3b84:	71 85       	ldd	r23, Z+9	; 0x09
    3b86:	42 85       	ldd	r20, Z+10	; 0x0a
    3b88:	53 85       	ldd	r21, Z+11	; 0x0b
    3b8a:	c8 01       	movw	r24, r16
    3b8c:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <servoSetConfig>
    3b90:	c8 01       	movw	r24, r16
    3b92:	6f ef       	ldi	r22, 0xFF	; 255
    3b94:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__act_setConnected>
    3b98:	c8 01       	movw	r24, r16
    3b9a:	60 e0       	ldi	r22, 0x00	; 0
    3b9c:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__act_setSpeed>
    3ba0:	08 94       	sec
    3ba2:	e1 08       	sbc	r14, r1
    3ba4:	f1 08       	sbc	r15, r1
    3ba6:	8e ef       	ldi	r24, 0xFE	; 254
    3ba8:	9f ef       	ldi	r25, 0xFF	; 255
    3baa:	c8 0e       	add	r12, r24
    3bac:	d9 1e       	adc	r13, r25
    3bae:	9f ef       	ldi	r25, 0xFF	; 255
    3bb0:	e9 16       	cp	r14, r25
    3bb2:	9f ef       	ldi	r25, 0xFF	; 255
    3bb4:	f9 06       	cpc	r15, r25
    3bb6:	31 f6       	brne	.-116    	; 0x3b44 <servosInit+0xdc>
    3bb8:	0e 94 c3 20 	call	0x4186	; 0x4186 <getError>
    3bbc:	88 23       	and	r24, r24
    3bbe:	d1 f5       	brne	.+116    	; 0x3c34 <servosInit+0x1cc>
    3bc0:	81 01       	movw	r16, r2
    3bc2:	00 5f       	subi	r16, 0xF0	; 240
    3bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc6:	df b6       	in	r13, 0x3f	; 63
    3bc8:	f8 94       	cli
    3bca:	86 2d       	mov	r24, r6
    3bcc:	97 2d       	mov	r25, r7
    3bce:	0e 94 2d 23 	call	0x465a	; 0x465a <compareGetThreshold>
    3bd2:	d5 01       	movw	r26, r10
    3bd4:	16 96       	adiw	r26, 0x06	; 6
    3bd6:	4d 91       	ld	r20, X+
    3bd8:	5c 91       	ld	r21, X
    3bda:	17 97       	sbiw	r26, 0x07	; 7
    3bdc:	48 0f       	add	r20, r24
    3bde:	59 1f       	adc	r21, r25
    3be0:	86 2d       	mov	r24, r6
    3be2:	97 2d       	mov	r25, r7
    3be4:	60 e5       	ldi	r22, 0x50	; 80
    3be6:	7e e1       	ldi	r23, 0x1E	; 30
    3be8:	95 01       	movw	r18, r10
    3bea:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <compareAttach>
    3bee:	c8 01       	movw	r24, r16
    3bf0:	0e 94 2d 23 	call	0x465a	; 0x465a <compareGetThreshold>
    3bf4:	f5 01       	movw	r30, r10
    3bf6:	46 81       	ldd	r20, Z+6	; 0x06
    3bf8:	57 81       	ldd	r21, Z+7	; 0x07
    3bfa:	48 0f       	add	r20, r24
    3bfc:	59 1f       	adc	r21, r25
    3bfe:	c8 01       	movw	r24, r16
    3c00:	64 e1       	ldi	r22, 0x14	; 20
    3c02:	7d e1       	ldi	r23, 0x1D	; 29
    3c04:	95 01       	movw	r18, r10
    3c06:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <compareAttach>
    3c0a:	c8 01       	movw	r24, r16
    3c0c:	03 96       	adiw	r24, 0x03	; 3
    3c0e:	0e 94 a1 18 	call	0x3142	; 0x3142 <__portMaskClear>
    3c12:	ce 01       	movw	r24, r28
    3c14:	b4 01       	movw	r22, r8
    3c16:	0e 94 3c 24 	call	0x4878	; 0x4878 <timerSetPrescaler>
    3c1a:	df be       	out	0x3f, r13	; 63
    3c1c:	0b c0       	rjmp	.+22     	; 0x3c34 <servosInit+0x1cc>
    3c1e:	89 ef       	ldi	r24, 0xF9	; 249
    3c20:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    3c24:	07 c0       	rjmp	.+14     	; 0x3c34 <servosInit+0x1cc>
    3c26:	ce 01       	movw	r24, r28
    3c28:	69 e1       	ldi	r22, 0x19	; 25
    3c2a:	70 e0       	ldi	r23, 0x00	; 0
    3c2c:	0e 94 b5 23 	call	0x476a	; 0x476a <timerGetBestPrescaler>
    3c30:	4c 01       	movw	r8, r24
    3c32:	5e cf       	rjmp	.-324    	; 0x3af0 <servosInit+0x88>
    3c34:	df 91       	pop	r29
    3c36:	cf 91       	pop	r28
    3c38:	1f 91       	pop	r17
    3c3a:	0f 91       	pop	r16
    3c3c:	ff 90       	pop	r15
    3c3e:	ef 90       	pop	r14
    3c40:	df 90       	pop	r13
    3c42:	cf 90       	pop	r12
    3c44:	bf 90       	pop	r11
    3c46:	af 90       	pop	r10
    3c48:	9f 90       	pop	r9
    3c4a:	8f 90       	pop	r8
    3c4c:	7f 90       	pop	r7
    3c4e:	6f 90       	pop	r6
    3c50:	5f 90       	pop	r5
    3c52:	4f 90       	pop	r4
    3c54:	3f 90       	pop	r3
    3c56:	2f 90       	pop	r2
    3c58:	08 95       	ret

00003c5a <setSpeed>:
    3c5a:	0f 93       	push	r16
    3c5c:	1f 93       	push	r17
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	ec 01       	movw	r28, r24
    3c64:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c66:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c68:	0e 85       	ldd	r16, Y+14	; 0x0e
    3c6a:	1f 85       	ldd	r17, Y+15	; 0x0f
    3c6c:	86 2f       	mov	r24, r22
    3c6e:	99 27       	eor	r25, r25
    3c70:	87 fd       	sbrc	r24, 7
    3c72:	90 95       	com	r25
    3c74:	61 e8       	ldi	r22, 0x81	; 129
    3c76:	7f ef       	ldi	r23, 0xFF	; 255
    3c78:	4f e7       	ldi	r20, 0x7F	; 127
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	0e 94 9e 2a 	call	0x553c	; 0x553c <interpolateU>
    3c80:	9c 01       	movw	r18, r24
    3c82:	88 89       	ldd	r24, Y+16	; 0x10
    3c84:	99 89       	ldd	r25, Y+17	; 0x11
    3c86:	28 17       	cp	r18, r24
    3c88:	39 07       	cpc	r19, r25
    3c8a:	29 f0       	breq	.+10     	; 0x3c96 <setSpeed+0x3c>
    3c8c:	8f b7       	in	r24, 0x3f	; 63
    3c8e:	f8 94       	cli
    3c90:	39 8b       	std	Y+17, r19	; 0x11
    3c92:	28 8b       	std	Y+16, r18	; 0x10
    3c94:	8f bf       	out	0x3f, r24	; 63
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	1f 91       	pop	r17
    3c9c:	0f 91       	pop	r16
    3c9e:	08 95       	ret

00003ca0 <__servoStartService>:
    3ca0:	8f 92       	push	r8
    3ca2:	9f 92       	push	r9
    3ca4:	af 92       	push	r10
    3ca6:	bf 92       	push	r11
    3ca8:	cf 92       	push	r12
    3caa:	df 92       	push	r13
    3cac:	ef 92       	push	r14
    3cae:	ff 92       	push	r15
    3cb0:	0f 93       	push	r16
    3cb2:	1f 93       	push	r17
    3cb4:	cf 93       	push	r28
    3cb6:	df 93       	push	r29
    3cb8:	5c 01       	movw	r10, r24
    3cba:	eb 01       	movw	r28, r22
    3cbc:	8c 01       	movw	r16, r24
    3cbe:	0e 5f       	subi	r16, 0xFE	; 254
    3cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc2:	f8 01       	movw	r30, r16
    3cc4:	94 91       	lpm	r25, Z+
    3cc6:	8c e2       	ldi	r24, 0x2C	; 44
    3cc8:	98 9f       	mul	r25, r24
    3cca:	70 01       	movw	r14, r0
    3ccc:	11 24       	eor	r1, r1
    3cce:	88 ed       	ldi	r24, 0xD8	; 216
    3cd0:	92 e0       	ldi	r25, 0x02	; 2
    3cd2:	e8 0e       	add	r14, r24
    3cd4:	f9 1e       	adc	r15, r25
    3cd6:	f7 01       	movw	r30, r14
    3cd8:	77 96       	adiw	r30, 0x17	; 23
    3cda:	85 91       	lpm	r24, Z+
    3cdc:	94 91       	lpm	r25, Z+
    3cde:	70 e1       	ldi	r23, 0x10	; 16
    3ce0:	87 2e       	mov	r8, r23
    3ce2:	91 2c       	mov	r9, r1
    3ce4:	88 0e       	add	r8, r24
    3ce6:	99 1e       	adc	r9, r25
    3ce8:	63 e1       	ldi	r22, 0x13	; 19
    3cea:	c6 2e       	mov	r12, r22
    3cec:	d1 2c       	mov	r13, r1
    3cee:	c8 0e       	add	r12, r24
    3cf0:	d9 1e       	adc	r13, r25
    3cf2:	02 c0       	rjmp	.+4      	; 0x3cf8 <__servoStartService+0x58>
    3cf4:	0e 94 7d 18 	call	0x30fa	; 0x30fa <breathe>
    3cf8:	c6 01       	movw	r24, r12
    3cfa:	0e 94 94 18 	call	0x3128	; 0x3128 <__portMaskGet>
    3cfe:	88 23       	and	r24, r24
    3d00:	c9 f7       	brne	.-14     	; 0x3cf4 <__servoStartService+0x54>
    3d02:	88 85       	ldd	r24, Y+8	; 0x08
    3d04:	88 23       	and	r24, r24
    3d06:	21 f0       	breq	.+8      	; 0x3d10 <__servoStartService+0x70>
    3d08:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0a:	8f 5f       	subi	r24, 0xFF	; 255
    3d0c:	8a 83       	std	Y+2, r24	; 0x02
    3d0e:	10 c0       	rjmp	.+32     	; 0x3d30 <__servoStartService+0x90>
    3d10:	8f ef       	ldi	r24, 0xFF	; 255
    3d12:	88 87       	std	Y+8, r24	; 0x08
    3d14:	f8 01       	movw	r30, r16
    3d16:	84 91       	lpm	r24, Z+
    3d18:	2c e2       	ldi	r18, 0x2C	; 44
    3d1a:	82 9f       	mul	r24, r18
    3d1c:	c0 01       	movw	r24, r0
    3d1e:	11 24       	eor	r1, r1
    3d20:	88 52       	subi	r24, 0x28	; 40
    3d22:	9d 4f       	sbci	r25, 0xFD	; 253
    3d24:	0e 94 26 20 	call	0x404c	; 0x404c <timerGetCounter>
    3d28:	bc 01       	movw	r22, r24
    3d2a:	c5 01       	movw	r24, r10
    3d2c:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <compareSetThreshold>
    3d30:	9a 81       	ldd	r25, Y+2	; 0x02
    3d32:	8d 81       	ldd	r24, Y+5	; 0x05
    3d34:	98 17       	cp	r25, r24
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <__servoStartService+0x9a>
    3d38:	3c c0       	rjmp	.+120    	; 0x3db2 <__servoStartService+0x112>
    3d3a:	89 17       	cp	r24, r25
    3d3c:	18 f4       	brcc	.+6      	; 0x3d44 <__servoStartService+0xa4>
    3d3e:	1a 82       	std	Y+2, r1	; 0x02
    3d40:	1c 82       	std	Y+4, r1	; 0x04
    3d42:	1b 82       	std	Y+3, r1	; 0x03
    3d44:	8a 81       	ldd	r24, Y+2	; 0x02
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	88 0f       	add	r24, r24
    3d4a:	99 1f       	adc	r25, r25
    3d4c:	e8 81       	ld	r30, Y
    3d4e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d50:	e8 0f       	add	r30, r24
    3d52:	f9 1f       	adc	r31, r25
    3d54:	05 91       	lpm	r16, Z+
    3d56:	14 91       	lpm	r17, Z+
    3d58:	c7 01       	movw	r24, r14
    3d5a:	0e 94 26 20 	call	0x404c	; 0x404c <timerGetCounter>
    3d5e:	7c 01       	movw	r14, r24
    3d60:	f8 01       	movw	r30, r16
    3d62:	83 81       	ldd	r24, Z+3	; 0x03
    3d64:	80 ff       	sbrs	r24, 0
    3d66:	04 c0       	rjmp	.+8      	; 0x3d70 <__servoStartService+0xd0>
    3d68:	86 81       	ldd	r24, Z+6	; 0x06
    3d6a:	97 81       	ldd	r25, Z+7	; 0x07
    3d6c:	0e 94 b4 19 	call	0x3368	; 0x3368 <pin_high>
    3d70:	f8 01       	movw	r30, r16
    3d72:	60 89       	ldd	r22, Z+16	; 0x10
    3d74:	71 89       	ldd	r23, Z+17	; 0x11
    3d76:	6e 0d       	add	r22, r14
    3d78:	7f 1d       	adc	r23, r15
    3d7a:	c4 01       	movw	r24, r8
    3d7c:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <compareSetThreshold>
    3d80:	c4 01       	movw	r24, r8
    3d82:	08 96       	adiw	r24, 0x08	; 8
    3d84:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    3d88:	c6 01       	movw	r24, r12
    3d8a:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    3d8e:	f8 01       	movw	r30, r16
    3d90:	66 85       	ldd	r22, Z+14	; 0x0e
    3d92:	77 85       	ldd	r23, Z+15	; 0x0f
    3d94:	6e 0d       	add	r22, r14
    3d96:	7f 1d       	adc	r23, r15
    3d98:	c5 01       	movw	r24, r10
    3d9a:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <compareSetThreshold>
    3d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3da0:	9c 81       	ldd	r25, Y+4	; 0x04
    3da2:	f8 01       	movw	r30, r16
    3da4:	26 85       	ldd	r18, Z+14	; 0x0e
    3da6:	37 85       	ldd	r19, Z+15	; 0x0f
    3da8:	82 0f       	add	r24, r18
    3daa:	93 1f       	adc	r25, r19
    3dac:	9c 83       	std	Y+4, r25	; 0x04
    3dae:	8b 83       	std	Y+3, r24	; 0x03
    3db0:	19 c0       	rjmp	.+50     	; 0x3de4 <__servoStartService+0x144>
    3db2:	c6 01       	movw	r24, r12
    3db4:	0e 94 a1 18 	call	0x3142	; 0x3142 <__portMaskClear>
    3db8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dba:	9c 81       	ldd	r25, Y+4	; 0x04
    3dbc:	6e 81       	ldd	r22, Y+6	; 0x06
    3dbe:	7f 81       	ldd	r23, Y+7	; 0x07
    3dc0:	68 17       	cp	r22, r24
    3dc2:	79 07       	cpc	r23, r25
    3dc4:	18 f4       	brcc	.+6      	; 0x3dcc <__servoStartService+0x12c>
    3dc6:	c4 e6       	ldi	r28, 0x64	; 100
    3dc8:	d0 e0       	ldi	r29, 0x00	; 0
    3dca:	03 c0       	rjmp	.+6      	; 0x3dd2 <__servoStartService+0x132>
    3dcc:	eb 01       	movw	r28, r22
    3dce:	c8 1b       	sub	r28, r24
    3dd0:	d9 0b       	sbc	r29, r25
    3dd2:	c5 01       	movw	r24, r10
    3dd4:	0e 94 2d 23 	call	0x465a	; 0x465a <compareGetThreshold>
    3dd8:	c8 0f       	add	r28, r24
    3dda:	d9 1f       	adc	r29, r25
    3ddc:	c5 01       	movw	r24, r10
    3dde:	be 01       	movw	r22, r28
    3de0:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <compareSetThreshold>
    3de4:	df 91       	pop	r29
    3de6:	cf 91       	pop	r28
    3de8:	1f 91       	pop	r17
    3dea:	0f 91       	pop	r16
    3dec:	ff 90       	pop	r15
    3dee:	ef 90       	pop	r14
    3df0:	df 90       	pop	r13
    3df2:	cf 90       	pop	r12
    3df4:	bf 90       	pop	r11
    3df6:	af 90       	pop	r10
    3df8:	9f 90       	pop	r9
    3dfa:	8f 90       	pop	r8
    3dfc:	08 95       	ret

00003dfe <servoSetConfig>:
    3dfe:	9f 92       	push	r9
    3e00:	af 92       	push	r10
    3e02:	bf 92       	push	r11
    3e04:	cf 92       	push	r12
    3e06:	df 92       	push	r13
    3e08:	ef 92       	push	r14
    3e0a:	ff 92       	push	r15
    3e0c:	0f 93       	push	r16
    3e0e:	1f 93       	push	r17
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	8c 01       	movw	r16, r24
    3e16:	7b 01       	movw	r14, r22
    3e18:	ea 01       	movw	r28, r20
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	71 87       	std	Z+9, r23	; 0x09
    3e1e:	60 87       	std	Z+8, r22	; 0x08
    3e20:	53 87       	std	Z+11, r21	; 0x0b
    3e22:	42 87       	std	Z+10, r20	; 0x0a
    3e24:	84 81       	ldd	r24, Z+4	; 0x04
    3e26:	95 81       	ldd	r25, Z+5	; 0x05
    3e28:	89 2b       	or	r24, r25
    3e2a:	09 f4       	brne	.+2      	; 0x3e2e <servoSetConfig+0x30>
    3e2c:	57 c0       	rjmp	.+174    	; 0x3edc <servoSetConfig+0xde>
    3e2e:	9f b6       	in	r9, 0x3f	; 63
    3e30:	f8 94       	cli
    3e32:	f8 01       	movw	r30, r16
    3e34:	82 89       	ldd	r24, Z+18	; 0x12
    3e36:	93 89       	ldd	r25, Z+19	; 0x13
    3e38:	68 ee       	ldi	r22, 0xE8	; 232
    3e3a:	73 e0       	ldi	r23, 0x03	; 3
    3e3c:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    3e40:	5b 01       	movw	r10, r22
    3e42:	cc 24       	eor	r12, r12
    3e44:	dd 24       	eor	r13, r13
    3e46:	b7 01       	movw	r22, r14
    3e48:	6c 1b       	sub	r22, r28
    3e4a:	7d 0b       	sbc	r23, r29
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	a6 01       	movw	r20, r12
    3e52:	95 01       	movw	r18, r10
    3e54:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    3e58:	24 e1       	ldi	r18, 0x14	; 20
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	40 e0       	ldi	r20, 0x00	; 0
    3e5e:	50 e0       	ldi	r21, 0x00	; 0
    3e60:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    3e64:	c9 01       	movw	r24, r18
    3e66:	da 01       	movw	r26, r20
    3e68:	9c 01       	movw	r18, r24
    3e6a:	ad 01       	movw	r20, r26
    3e6c:	da 01       	movw	r26, r20
    3e6e:	c9 01       	movw	r24, r18
    3e70:	80 70       	andi	r24, 0x00	; 0
    3e72:	90 70       	andi	r25, 0x00	; 0
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	a1 05       	cpc	r26, r1
    3e78:	b1 05       	cpc	r27, r1
    3e7a:	39 f0       	breq	.+14     	; 0x3e8a <servoSetConfig+0x8c>
    3e7c:	86 ee       	ldi	r24, 0xE6	; 230
    3e7e:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    3e82:	2f ef       	ldi	r18, 0xFF	; 255
    3e84:	3f ef       	ldi	r19, 0xFF	; 255
    3e86:	40 e0       	ldi	r20, 0x00	; 0
    3e88:	50 e0       	ldi	r21, 0x00	; 0
    3e8a:	f8 01       	movw	r30, r16
    3e8c:	35 87       	std	Z+13, r19	; 0x0d
    3e8e:	24 87       	std	Z+12, r18	; 0x0c
    3e90:	ce 0d       	add	r28, r14
    3e92:	df 1d       	adc	r29, r15
    3e94:	be 01       	movw	r22, r28
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	a6 01       	movw	r20, r12
    3e9c:	95 01       	movw	r18, r10
    3e9e:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    3ea2:	24 e1       	ldi	r18, 0x14	; 20
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	40 e0       	ldi	r20, 0x00	; 0
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    3eae:	c9 01       	movw	r24, r18
    3eb0:	da 01       	movw	r26, r20
    3eb2:	9c 01       	movw	r18, r24
    3eb4:	ad 01       	movw	r20, r26
    3eb6:	da 01       	movw	r26, r20
    3eb8:	c9 01       	movw	r24, r18
    3eba:	80 70       	andi	r24, 0x00	; 0
    3ebc:	90 70       	andi	r25, 0x00	; 0
    3ebe:	00 97       	sbiw	r24, 0x00	; 0
    3ec0:	a1 05       	cpc	r26, r1
    3ec2:	b1 05       	cpc	r27, r1
    3ec4:	39 f0       	breq	.+14     	; 0x3ed4 <servoSetConfig+0xd6>
    3ec6:	86 ee       	ldi	r24, 0xE6	; 230
    3ec8:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    3ecc:	2f ef       	ldi	r18, 0xFF	; 255
    3ece:	3f ef       	ldi	r19, 0xFF	; 255
    3ed0:	40 e0       	ldi	r20, 0x00	; 0
    3ed2:	50 e0       	ldi	r21, 0x00	; 0
    3ed4:	f8 01       	movw	r30, r16
    3ed6:	37 87       	std	Z+15, r19	; 0x0f
    3ed8:	26 87       	std	Z+14, r18	; 0x0e
    3eda:	9f be       	out	0x3f, r9	; 63
    3edc:	df 91       	pop	r29
    3ede:	cf 91       	pop	r28
    3ee0:	1f 91       	pop	r17
    3ee2:	0f 91       	pop	r16
    3ee4:	ff 90       	pop	r15
    3ee6:	ef 90       	pop	r14
    3ee8:	df 90       	pop	r13
    3eea:	cf 90       	pop	r12
    3eec:	bf 90       	pop	r11
    3eee:	af 90       	pop	r10
    3ef0:	9f 90       	pop	r9
    3ef2:	08 95       	ret

00003ef4 <ticks_per_ms>:
    3ef4:	ef 92       	push	r14
    3ef6:	ff 92       	push	r15
    3ef8:	0f 93       	push	r16
    3efa:	1f 93       	push	r17
    3efc:	7a 01       	movw	r14, r20
    3efe:	20 91 04 02 	lds	r18, 0x0204
    3f02:	30 91 05 02 	lds	r19, 0x0205
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    3f0e:	00 e0       	ldi	r16, 0x00	; 0
    3f10:	10 e0       	ldi	r17, 0x00	; 0
    3f12:	a8 01       	movw	r20, r16
    3f14:	97 01       	movw	r18, r14
    3f16:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    3f1a:	ca 01       	movw	r24, r20
    3f1c:	b9 01       	movw	r22, r18
    3f1e:	1f 91       	pop	r17
    3f20:	0f 91       	pop	r16
    3f22:	ff 90       	pop	r15
    3f24:	ef 90       	pop	r14
    3f26:	08 95       	ret

00003f28 <delay_cycles>:
    3f28:	61 30       	cpi	r22, 0x01	; 1
    3f2a:	23 e0       	ldi	r18, 0x03	; 3
    3f2c:	72 07       	cpc	r23, r18
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	82 07       	cpc	r24, r18
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	92 07       	cpc	r25, r18
    3f36:	48 f4       	brcc	.+18     	; 0x3f4a <delay_cycles+0x22>
    3f38:	23 e0       	ldi	r18, 0x03	; 3
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	40 e0       	ldi	r20, 0x00	; 0
    3f3e:	50 e0       	ldi	r21, 0x00	; 0
    3f40:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    3f44:	2a 95       	dec	r18
    3f46:	f1 f7       	brne	.-4      	; 0x3f44 <delay_cycles+0x1c>
    3f48:	08 95       	ret
    3f4a:	9b 01       	movw	r18, r22
    3f4c:	ac 01       	movw	r20, r24
    3f4e:	82 e0       	ldi	r24, 0x02	; 2
    3f50:	56 95       	lsr	r21
    3f52:	47 95       	ror	r20
    3f54:	37 95       	ror	r19
    3f56:	27 95       	ror	r18
    3f58:	8a 95       	dec	r24
    3f5a:	d1 f7       	brne	.-12     	; 0x3f50 <delay_cycles+0x28>
    3f5c:	da 01       	movw	r26, r20
    3f5e:	c9 01       	movw	r24, r18
    3f60:	20 30       	cpi	r18, 0x00	; 0
    3f62:	60 e0       	ldi	r22, 0x00	; 0
    3f64:	36 07       	cpc	r19, r22
    3f66:	61 e0       	ldi	r22, 0x01	; 1
    3f68:	46 07       	cpc	r20, r22
    3f6a:	60 e0       	ldi	r22, 0x00	; 0
    3f6c:	56 07       	cpc	r21, r22
    3f6e:	20 f0       	brcs	.+8      	; 0x3f78 <delay_cycles+0x50>
    3f70:	8f ef       	ldi	r24, 0xFF	; 255
    3f72:	9f ef       	ldi	r25, 0xFF	; 255
    3f74:	a0 e0       	ldi	r26, 0x00	; 0
    3f76:	b0 e0       	ldi	r27, 0x00	; 0
    3f78:	fc 01       	movw	r30, r24
    3f7a:	31 97       	sbiw	r30, 0x01	; 1
    3f7c:	f1 f7       	brne	.-4      	; 0x3f7a <delay_cycles+0x52>
    3f7e:	a0 e0       	ldi	r26, 0x00	; 0
    3f80:	b0 e0       	ldi	r27, 0x00	; 0
    3f82:	28 1b       	sub	r18, r24
    3f84:	39 0b       	sbc	r19, r25
    3f86:	4a 0b       	sbc	r20, r26
    3f88:	5b 0b       	sbc	r21, r27
    3f8a:	41 f7       	brne	.-48     	; 0x3f5c <delay_cycles+0x34>
    3f8c:	08 95       	ret

00003f8e <__timerPrescalerIndex>:
    3f8e:	fc 01       	movw	r30, r24
    3f90:	37 96       	adiw	r30, 0x07	; 7
    3f92:	e4 91       	lpm	r30, Z+
    3f94:	ee 23       	and	r30, r30
    3f96:	21 f4       	brne	.+8      	; 0x3fa0 <__timerPrescalerIndex+0x12>
    3f98:	26 e0       	ldi	r18, 0x06	; 6
    3f9a:	88 e0       	ldi	r24, 0x08	; 8
    3f9c:	95 e0       	ldi	r25, 0x05	; 5
    3f9e:	03 c0       	rjmp	.+6      	; 0x3fa6 <__timerPrescalerIndex+0x18>
    3fa0:	28 e0       	ldi	r18, 0x08	; 8
    3fa2:	84 e1       	ldi	r24, 0x14	; 20
    3fa4:	95 e0       	ldi	r25, 0x05	; 5
    3fa6:	42 2f       	mov	r20, r18
    3fa8:	41 50       	subi	r20, 0x01	; 1
    3faa:	24 2f       	mov	r18, r20
    3fac:	33 27       	eor	r19, r19
    3fae:	27 fd       	sbrc	r18, 7
    3fb0:	30 95       	com	r19
    3fb2:	22 0f       	add	r18, r18
    3fb4:	33 1f       	adc	r19, r19
    3fb6:	28 0f       	add	r18, r24
    3fb8:	39 1f       	adc	r19, r25
    3fba:	0e c0       	rjmp	.+28     	; 0x3fd8 <__timerPrescalerIndex+0x4a>
    3fbc:	f9 01       	movw	r30, r18
    3fbe:	85 91       	lpm	r24, Z+
    3fc0:	94 91       	lpm	r25, Z+
    3fc2:	22 50       	subi	r18, 0x02	; 2
    3fc4:	30 40       	sbci	r19, 0x00	; 0
    3fc6:	86 17       	cp	r24, r22
    3fc8:	97 07       	cpc	r25, r23
    3fca:	29 f4       	brne	.+10     	; 0x3fd6 <__timerPrescalerIndex+0x48>
    3fcc:	24 2f       	mov	r18, r20
    3fce:	33 27       	eor	r19, r19
    3fd0:	27 fd       	sbrc	r18, 7
    3fd2:	30 95       	com	r19
    3fd4:	05 c0       	rjmp	.+10     	; 0x3fe0 <__timerPrescalerIndex+0x52>
    3fd6:	41 50       	subi	r20, 0x01	; 1
    3fd8:	47 ff       	sbrs	r20, 7
    3fda:	f0 cf       	rjmp	.-32     	; 0x3fbc <__timerPrescalerIndex+0x2e>
    3fdc:	2f ef       	ldi	r18, 0xFF	; 255
    3fde:	3f ef       	ldi	r19, 0xFF	; 255
    3fe0:	c9 01       	movw	r24, r18
    3fe2:	08 95       	ret

00003fe4 <timerGetClosestPrescale>:
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	24 e0       	ldi	r18, 0x04	; 4
    3fea:	61 30       	cpi	r22, 0x01	; 1
    3fec:	72 07       	cpc	r23, r18
    3fee:	10 f0       	brcs	.+4      	; 0x3ff4 <timerGetClosestPrescale+0x10>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	94 e0       	ldi	r25, 0x04	; 4
    3ff4:	ac 01       	movw	r20, r24
    3ff6:	00 97       	sbiw	r24, 0x00	; 0
    3ff8:	11 f4       	brne	.+4      	; 0x3ffe <timerGetClosestPrescale+0x1a>
    3ffa:	41 e0       	ldi	r20, 0x01	; 1
    3ffc:	50 e0       	ldi	r21, 0x00	; 0
    3ffe:	37 96       	adiw	r30, 0x07	; 7
    4000:	74 91       	lpm	r23, Z+
    4002:	77 23       	and	r23, r23
    4004:	21 f4       	brne	.+8      	; 0x400e <timerGetClosestPrescale+0x2a>
    4006:	e8 e0       	ldi	r30, 0x08	; 8
    4008:	f5 e0       	ldi	r31, 0x05	; 5
    400a:	86 e0       	ldi	r24, 0x06	; 6
    400c:	03 c0       	rjmp	.+6      	; 0x4014 <timerGetClosestPrescale+0x30>
    400e:	e4 e1       	ldi	r30, 0x14	; 20
    4010:	f5 e0       	ldi	r31, 0x05	; 5
    4012:	88 e0       	ldi	r24, 0x08	; 8
    4014:	68 2f       	mov	r22, r24
    4016:	61 50       	subi	r22, 0x01	; 1
    4018:	26 2f       	mov	r18, r22
    401a:	33 27       	eor	r19, r19
    401c:	27 fd       	sbrc	r18, 7
    401e:	30 95       	com	r19
    4020:	22 0f       	add	r18, r18
    4022:	33 1f       	adc	r19, r19
    4024:	2e 0f       	add	r18, r30
    4026:	3f 1f       	adc	r19, r31
    4028:	09 c0       	rjmp	.+18     	; 0x403c <timerGetClosestPrescale+0x58>
    402a:	f9 01       	movw	r30, r18
    402c:	85 91       	lpm	r24, Z+
    402e:	94 91       	lpm	r25, Z+
    4030:	22 50       	subi	r18, 0x02	; 2
    4032:	30 40       	sbci	r19, 0x00	; 0
    4034:	84 17       	cp	r24, r20
    4036:	95 07       	cpc	r25, r21
    4038:	21 f0       	breq	.+8      	; 0x4042 <timerGetClosestPrescale+0x5e>
    403a:	61 50       	subi	r22, 0x01	; 1
    403c:	67 ff       	sbrs	r22, 7
    403e:	f5 cf       	rjmp	.-22     	; 0x402a <timerGetClosestPrescale+0x46>
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <timerGetClosestPrescale+0x62>
    4042:	ca 01       	movw	r24, r20
    4044:	08 95       	ret
    4046:	4f 5f       	subi	r20, 0xFF	; 255
    4048:	5f 4f       	sbci	r21, 0xFF	; 255
    404a:	db cf       	rjmp	.-74     	; 0x4002 <timerGetClosestPrescale+0x1e>

0000404c <timerGetCounter>:
    404c:	9c 01       	movw	r18, r24
    404e:	02 96       	adiw	r24, 0x02	; 2
    4050:	fc 01       	movw	r30, r24
    4052:	a5 91       	lpm	r26, Z+
    4054:	b4 91       	lpm	r27, Z+
    4056:	2a 5f       	subi	r18, 0xFA	; 250
    4058:	3f 4f       	sbci	r19, 0xFF	; 255
    405a:	f9 01       	movw	r30, r18
    405c:	84 91       	lpm	r24, Z+
    405e:	88 23       	and	r24, r24
    4060:	19 f0       	breq	.+6      	; 0x4068 <timerGetCounter+0x1c>
    4062:	2d 91       	ld	r18, X+
    4064:	3c 91       	ld	r19, X
    4066:	03 c0       	rjmp	.+6      	; 0x406e <timerGetCounter+0x22>
    4068:	8c 91       	ld	r24, X
    406a:	28 2f       	mov	r18, r24
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	c9 01       	movw	r24, r18
    4070:	08 95       	ret

00004072 <compareSetOutputMode>:
    4072:	9c 01       	movw	r18, r24
    4074:	0b 96       	adiw	r24, 0x0b	; 11
    4076:	fc 01       	movw	r30, r24
    4078:	a5 91       	lpm	r26, Z+
    407a:	b4 91       	lpm	r27, Z+
    407c:	23 5f       	subi	r18, 0xF3	; 243
    407e:	3f 4f       	sbci	r19, 0xFF	; 255
    4080:	f9 01       	movw	r30, r18
    4082:	24 91       	lpm	r18, Z+
    4084:	70 e0       	ldi	r23, 0x00	; 0
    4086:	02 2e       	mov	r0, r18
    4088:	02 c0       	rjmp	.+4      	; 0x408e <compareSetOutputMode+0x1c>
    408a:	66 0f       	add	r22, r22
    408c:	77 1f       	adc	r23, r23
    408e:	0a 94       	dec	r0
    4090:	e2 f7       	brpl	.-8      	; 0x408a <compareSetOutputMode+0x18>
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	02 c0       	rjmp	.+4      	; 0x409c <compareSetOutputMode+0x2a>
    4098:	88 0f       	add	r24, r24
    409a:	99 1f       	adc	r25, r25
    409c:	2a 95       	dec	r18
    409e:	e2 f7       	brpl	.-8      	; 0x4098 <compareSetOutputMode+0x26>
    40a0:	28 2f       	mov	r18, r24
    40a2:	22 0f       	add	r18, r18
    40a4:	28 2b       	or	r18, r24
    40a6:	9c 91       	ld	r25, X
    40a8:	82 2f       	mov	r24, r18
    40aa:	86 23       	and	r24, r22
    40ac:	20 95       	com	r18
    40ae:	29 23       	and	r18, r25
    40b0:	82 2b       	or	r24, r18
    40b2:	8c 93       	st	X, r24
    40b4:	08 95       	ret

000040b6 <compareGetOutputMode>:
    40b6:	9c 01       	movw	r18, r24
    40b8:	0b 96       	adiw	r24, 0x0b	; 11
    40ba:	fc 01       	movw	r30, r24
    40bc:	a5 91       	lpm	r26, Z+
    40be:	b4 91       	lpm	r27, Z+
    40c0:	23 5f       	subi	r18, 0xF3	; 243
    40c2:	3f 4f       	sbci	r19, 0xFF	; 255
    40c4:	f9 01       	movw	r30, r18
    40c6:	44 91       	lpm	r20, Z+
    40c8:	21 e0       	ldi	r18, 0x01	; 1
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	04 2e       	mov	r0, r20
    40ce:	02 c0       	rjmp	.+4      	; 0x40d4 <compareGetOutputMode+0x1e>
    40d0:	22 0f       	add	r18, r18
    40d2:	33 1f       	adc	r19, r19
    40d4:	0a 94       	dec	r0
    40d6:	e2 f7       	brpl	.-8      	; 0x40d0 <compareGetOutputMode+0x1a>
    40d8:	82 2f       	mov	r24, r18
    40da:	88 0f       	add	r24, r24
    40dc:	82 2b       	or	r24, r18
    40de:	2c 91       	ld	r18, X
    40e0:	82 23       	and	r24, r18
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	02 c0       	rjmp	.+4      	; 0x40ea <compareGetOutputMode+0x34>
    40e6:	95 95       	asr	r25
    40e8:	87 95       	ror	r24
    40ea:	4a 95       	dec	r20
    40ec:	e2 f7       	brpl	.-8      	; 0x40e6 <compareGetOutputMode+0x30>
    40ee:	08 95       	ret

000040f0 <__timer_overflowService>:
    40f0:	cf 93       	push	r28
    40f2:	df 93       	push	r29
    40f4:	ac 01       	movw	r20, r24
    40f6:	fc 01       	movw	r30, r24
    40f8:	c5 91       	lpm	r28, Z+
    40fa:	d4 91       	lpm	r29, Z+
    40fc:	8a 81       	ldd	r24, Y+2	; 0x02
    40fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4100:	ac 81       	ldd	r26, Y+4	; 0x04
    4102:	bd 81       	ldd	r27, Y+5	; 0x05
    4104:	01 96       	adiw	r24, 0x01	; 1
    4106:	a1 1d       	adc	r26, r1
    4108:	b1 1d       	adc	r27, r1
    410a:	8a 83       	std	Y+2, r24	; 0x02
    410c:	9b 83       	std	Y+3, r25	; 0x03
    410e:	ac 83       	std	Y+4, r26	; 0x04
    4110:	bd 83       	std	Y+5, r27	; 0x05
    4112:	2e 81       	ldd	r18, Y+6	; 0x06
    4114:	3f 81       	ldd	r19, Y+7	; 0x07
    4116:	21 15       	cp	r18, r1
    4118:	31 05       	cpc	r19, r1
    411a:	29 f0       	breq	.+10     	; 0x4126 <__timer_overflowService+0x36>
    411c:	68 85       	ldd	r22, Y+8	; 0x08
    411e:	79 85       	ldd	r23, Y+9	; 0x09
    4120:	ca 01       	movw	r24, r20
    4122:	f9 01       	movw	r30, r18
    4124:	09 95       	icall
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <__timer_captureService>:
    412c:	fc 01       	movw	r30, r24
    412e:	a5 91       	lpm	r26, Z+
    4130:	b4 91       	lpm	r27, Z+
    4132:	1a 96       	adiw	r26, 0x0a	; 10
    4134:	ed 91       	ld	r30, X+
    4136:	fc 91       	ld	r31, X
    4138:	1b 97       	sbiw	r26, 0x0b	; 11
    413a:	30 97       	sbiw	r30, 0x00	; 0
    413c:	29 f0       	breq	.+10     	; 0x4148 <__timer_captureService+0x1c>
    413e:	1c 96       	adiw	r26, 0x0c	; 12
    4140:	6d 91       	ld	r22, X+
    4142:	7c 91       	ld	r23, X
    4144:	1d 97       	sbiw	r26, 0x0d	; 13
    4146:	09 95       	icall
    4148:	08 95       	ret

0000414a <__timer_compareService>:
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	ac 01       	movw	r20, r24
    4150:	fc 01       	movw	r30, r24
    4152:	c5 91       	lpm	r28, Z+
    4154:	d4 91       	lpm	r29, Z+
    4156:	8c 81       	ldd	r24, Y+4	; 0x04
    4158:	9d 81       	ldd	r25, Y+5	; 0x05
    415a:	ae 81       	ldd	r26, Y+6	; 0x06
    415c:	bf 81       	ldd	r27, Y+7	; 0x07
    415e:	01 96       	adiw	r24, 0x01	; 1
    4160:	a1 1d       	adc	r26, r1
    4162:	b1 1d       	adc	r27, r1
    4164:	8c 83       	std	Y+4, r24	; 0x04
    4166:	9d 83       	std	Y+5, r25	; 0x05
    4168:	ae 83       	std	Y+6, r26	; 0x06
    416a:	bf 83       	std	Y+7, r27	; 0x07
    416c:	28 81       	ld	r18, Y
    416e:	39 81       	ldd	r19, Y+1	; 0x01
    4170:	21 15       	cp	r18, r1
    4172:	31 05       	cpc	r19, r1
    4174:	29 f0       	breq	.+10     	; 0x4180 <__timer_compareService+0x36>
    4176:	6a 81       	ldd	r22, Y+2	; 0x02
    4178:	7b 81       	ldd	r23, Y+3	; 0x03
    417a:	ca 01       	movw	r24, r20
    417c:	f9 01       	movw	r30, r18
    417e:	09 95       	icall
    4180:	df 91       	pop	r29
    4182:	cf 91       	pop	r28
    4184:	08 95       	ret

00004186 <getError>:
    4186:	80 91 69 0c 	lds	r24, 0x0C69
    418a:	08 95       	ret

0000418c <setErrorLog>:
    418c:	90 93 6d 0c 	sts	0x0C6D, r25
    4190:	80 93 6c 0c 	sts	0x0C6C, r24
    4194:	08 95       	ret

00004196 <__error_flash>:
    4196:	8f 92       	push	r8
    4198:	9f 92       	push	r9
    419a:	af 92       	push	r10
    419c:	bf 92       	push	r11
    419e:	cf 92       	push	r12
    41a0:	df 92       	push	r13
    41a2:	ef 92       	push	r14
    41a4:	ff 92       	push	r15
    41a6:	0f 93       	push	r16
    41a8:	1f 93       	push	r17
    41aa:	cf 93       	push	r28
    41ac:	df 93       	push	r29
    41ae:	98 2e       	mov	r9, r24
    41b0:	89 2e       	mov	r8, r25
    41b2:	5a 01       	movw	r10, r20
    41b4:	6b 01       	movw	r12, r22
    41b6:	c8 2f       	mov	r28, r24
    41b8:	d9 2f       	mov	r29, r25
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	88 23       	and	r24, r24
    41be:	41 f4       	brne	.+16     	; 0x41d0 <__error_flash+0x3a>
    41c0:	88 81       	ld	r24, Y
    41c2:	18 16       	cp	r1, r24
    41c4:	14 f4       	brge	.+4      	; 0x41ca <__error_flash+0x34>
    41c6:	88 81       	ld	r24, Y
    41c8:	02 c0       	rjmp	.+4      	; 0x41ce <__error_flash+0x38>
    41ca:	88 81       	ld	r24, Y
    41cc:	81 95       	neg	r24
    41ce:	89 83       	std	Y+1, r24	; 0x01
    41d0:	88 81       	ld	r24, Y
    41d2:	87 fd       	sbrc	r24, 7
    41d4:	08 c0       	rjmp	.+16     	; 0x41e6 <__error_flash+0x50>
    41d6:	00 e2       	ldi	r16, 0x20	; 32
    41d8:	e0 2e       	mov	r14, r16
    41da:	01 ea       	ldi	r16, 0xA1	; 161
    41dc:	f0 2e       	mov	r15, r16
    41de:	07 e0       	ldi	r16, 0x07	; 7
    41e0:	00 2f       	mov	r16, r16
    41e2:	11 2d       	mov	r17, r1
    41e4:	07 c0       	rjmp	.+14     	; 0x41f4 <__error_flash+0x5e>
    41e6:	10 e9       	ldi	r17, 0x90	; 144
    41e8:	e1 2e       	mov	r14, r17
    41ea:	10 ed       	ldi	r17, 0xD0	; 208
    41ec:	f1 2e       	mov	r15, r17
    41ee:	13 e0       	ldi	r17, 0x03	; 3
    41f0:	01 2f       	mov	r16, r17
    41f2:	11 2d       	mov	r17, r1
    41f4:	8a 81       	ldd	r24, Y+2	; 0x02
    41f6:	80 ff       	sbrs	r24, 0
    41f8:	1d c0       	rjmp	.+58     	; 0x4234 <__error_flash+0x9e>
    41fa:	80 91 b5 0b 	lds	r24, 0x0BB5
    41fe:	90 91 b6 0b 	lds	r25, 0x0BB6
    4202:	0e 94 56 19 	call	0x32ac	; 0x32ac <pin_is_output>
    4206:	88 23       	and	r24, r24
    4208:	29 f0       	breq	.+10     	; 0x4214 <__error_flash+0x7e>
    420a:	85 eb       	ldi	r24, 0xB5	; 181
    420c:	9b e0       	ldi	r25, 0x0B	; 11
    420e:	60 e0       	ldi	r22, 0x00	; 0
    4210:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <LED_set>
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	81 50       	subi	r24, 0x01	; 1
    4218:	89 83       	std	Y+1, r24	; 0x01
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	88 23       	and	r24, r24
    421e:	39 f4       	brne	.+14     	; 0x422e <__error_flash+0x98>
    4220:	b0 e8       	ldi	r27, 0x80	; 128
    4222:	eb 2e       	mov	r14, r27
    4224:	b4 e8       	ldi	r27, 0x84	; 132
    4226:	fb 2e       	mov	r15, r27
    4228:	be e1       	ldi	r27, 0x1E	; 30
    422a:	0b 2f       	mov	r16, r27
    422c:	11 2d       	mov	r17, r1
    422e:	8a 81       	ldd	r24, Y+2	; 0x02
    4230:	8e 7f       	andi	r24, 0xFE	; 254
    4232:	0f c0       	rjmp	.+30     	; 0x4252 <__error_flash+0xbc>
    4234:	80 91 b5 0b 	lds	r24, 0x0BB5
    4238:	90 91 b6 0b 	lds	r25, 0x0BB6
    423c:	0e 94 56 19 	call	0x32ac	; 0x32ac <pin_is_output>
    4240:	88 23       	and	r24, r24
    4242:	29 f0       	breq	.+10     	; 0x424e <__error_flash+0xb8>
    4244:	85 eb       	ldi	r24, 0xB5	; 181
    4246:	9b e0       	ldi	r25, 0x0B	; 11
    4248:	6f ef       	ldi	r22, 0xFF	; 255
    424a:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <LED_set>
    424e:	8a 81       	ldd	r24, Y+2	; 0x02
    4250:	81 60       	ori	r24, 0x01	; 1
    4252:	8a 83       	std	Y+2, r24	; 0x02
    4254:	8b ec       	ldi	r24, 0xCB	; 203
    4256:	90 e2       	ldi	r25, 0x20	; 32
    4258:	69 2d       	mov	r22, r9
    425a:	78 2d       	mov	r23, r8
    425c:	a6 01       	movw	r20, r12
    425e:	95 01       	movw	r18, r10
    4260:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <scheduleJob>
    4264:	df 91       	pop	r29
    4266:	cf 91       	pop	r28
    4268:	1f 91       	pop	r17
    426a:	0f 91       	pop	r16
    426c:	ff 90       	pop	r15
    426e:	ef 90       	pop	r14
    4270:	df 90       	pop	r13
    4272:	cf 90       	pop	r12
    4274:	bf 90       	pop	r11
    4276:	af 90       	pop	r10
    4278:	9f 90       	pop	r9
    427a:	8f 90       	pop	r8
    427c:	08 95       	ret

0000427e <__timerRead>:
    427e:	4f 92       	push	r4
    4280:	5f 92       	push	r5
    4282:	6f 92       	push	r6
    4284:	7f 92       	push	r7
    4286:	9f 92       	push	r9
    4288:	af 92       	push	r10
    428a:	bf 92       	push	r11
    428c:	cf 92       	push	r12
    428e:	df 92       	push	r13
    4290:	ef 92       	push	r14
    4292:	ff 92       	push	r15
    4294:	0f 93       	push	r16
    4296:	1f 93       	push	r17
    4298:	cf 93       	push	r28
    429a:	df 93       	push	r29
    429c:	dc 01       	movw	r26, r24
    429e:	3b 01       	movw	r6, r22
    42a0:	2a 01       	movw	r4, r20
    42a2:	fc 01       	movw	r30, r24
    42a4:	c5 91       	lpm	r28, Z+
    42a6:	d4 91       	lpm	r29, Z+
    42a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    42aa:	84 30       	cpi	r24, 0x04	; 4
    42ac:	39 f0       	breq	.+14     	; 0x42bc <__timerRead+0x3e>
    42ae:	89 30       	cpi	r24, 0x09	; 9
    42b0:	29 f0       	breq	.+10     	; 0x42bc <__timerRead+0x3e>
    42b2:	8b 30       	cpi	r24, 0x0B	; 11
    42b4:	19 f0       	breq	.+6      	; 0x42bc <__timerRead+0x3e>
    42b6:	8f 30       	cpi	r24, 0x0F	; 15
    42b8:	09 f0       	breq	.+2      	; 0x42bc <__timerRead+0x3e>
    42ba:	39 c0       	rjmp	.+114    	; 0x432e <__timerRead+0xb0>
    42bc:	fd 01       	movw	r30, r26
    42be:	77 96       	adiw	r30, 0x17	; 23
    42c0:	65 91       	lpm	r22, Z+
    42c2:	74 91       	lpm	r23, Z+
    42c4:	fb 01       	movw	r30, r22
    42c6:	45 91       	lpm	r20, Z+
    42c8:	54 91       	lpm	r21, Z+
    42ca:	9f b6       	in	r9, 0x3f	; 63
    42cc:	f8 94       	cli
    42ce:	32 e0       	ldi	r19, 0x02	; 2
    42d0:	a3 2e       	mov	r10, r19
    42d2:	b1 2c       	mov	r11, r1
    42d4:	aa 0e       	add	r10, r26
    42d6:	bb 1e       	adc	r11, r27
    42d8:	f5 01       	movw	r30, r10
    42da:	c5 91       	lpm	r28, Z+
    42dc:	d4 91       	lpm	r29, Z+
    42de:	26 e0       	ldi	r18, 0x06	; 6
    42e0:	c2 2e       	mov	r12, r18
    42e2:	d1 2c       	mov	r13, r1
    42e4:	ca 0e       	add	r12, r26
    42e6:	db 1e       	adc	r13, r27
    42e8:	f6 01       	movw	r30, r12
    42ea:	84 91       	lpm	r24, Z+
    42ec:	88 23       	and	r24, r24
    42ee:	19 f0       	breq	.+6      	; 0x42f6 <__timerRead+0x78>
    42f0:	28 81       	ld	r18, Y
    42f2:	39 81       	ldd	r19, Y+1	; 0x01
    42f4:	03 c0       	rjmp	.+6      	; 0x42fc <__timerRead+0x7e>
    42f6:	88 81       	ld	r24, Y
    42f8:	28 2f       	mov	r18, r24
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	fa 01       	movw	r30, r20
    42fe:	e4 80       	ldd	r14, Z+4	; 0x04
    4300:	f5 80       	ldd	r15, Z+5	; 0x05
    4302:	06 81       	ldd	r16, Z+6	; 0x06
    4304:	17 81       	ldd	r17, Z+7	; 0x07
    4306:	f5 01       	movw	r30, r10
    4308:	a5 91       	lpm	r26, Z+
    430a:	b4 91       	lpm	r27, Z+
    430c:	f6 01       	movw	r30, r12
    430e:	84 91       	lpm	r24, Z+
    4310:	88 23       	and	r24, r24
    4312:	19 f0       	breq	.+6      	; 0x431a <__timerRead+0x9c>
    4314:	cd 91       	ld	r28, X+
    4316:	dc 91       	ld	r29, X
    4318:	03 c0       	rjmp	.+6      	; 0x4320 <__timerRead+0xa2>
    431a:	8c 91       	ld	r24, X
    431c:	c8 2f       	mov	r28, r24
    431e:	d0 e0       	ldi	r29, 0x00	; 0
    4320:	c2 17       	cp	r28, r18
    4322:	d3 07       	cpc	r29, r19
    4324:	08 f4       	brcc	.+2      	; 0x4328 <__timerRead+0xaa>
    4326:	3b c0       	rjmp	.+118    	; 0x439e <__timerRead+0x120>
    4328:	cb 01       	movw	r24, r22
    432a:	08 96       	adiw	r24, 0x08	; 8
    432c:	34 c0       	rjmp	.+104    	; 0x4396 <__timerRead+0x118>
    432e:	fd 01       	movw	r30, r26
    4330:	45 91       	lpm	r20, Z+
    4332:	54 91       	lpm	r21, Z+
    4334:	9f b6       	in	r9, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	92 e0       	ldi	r25, 0x02	; 2
    433a:	a9 2e       	mov	r10, r25
    433c:	b1 2c       	mov	r11, r1
    433e:	aa 0e       	add	r10, r26
    4340:	bb 1e       	adc	r11, r27
    4342:	f5 01       	movw	r30, r10
    4344:	c5 91       	lpm	r28, Z+
    4346:	d4 91       	lpm	r29, Z+
    4348:	86 e0       	ldi	r24, 0x06	; 6
    434a:	c8 2e       	mov	r12, r24
    434c:	d1 2c       	mov	r13, r1
    434e:	ca 0e       	add	r12, r26
    4350:	db 1e       	adc	r13, r27
    4352:	f6 01       	movw	r30, r12
    4354:	84 91       	lpm	r24, Z+
    4356:	88 23       	and	r24, r24
    4358:	19 f0       	breq	.+6      	; 0x4360 <__timerRead+0xe2>
    435a:	28 81       	ld	r18, Y
    435c:	39 81       	ldd	r19, Y+1	; 0x01
    435e:	03 c0       	rjmp	.+6      	; 0x4366 <__timerRead+0xe8>
    4360:	88 81       	ld	r24, Y
    4362:	28 2f       	mov	r18, r24
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	fa 01       	movw	r30, r20
    4368:	e2 80       	ldd	r14, Z+2	; 0x02
    436a:	f3 80       	ldd	r15, Z+3	; 0x03
    436c:	04 81       	ldd	r16, Z+4	; 0x04
    436e:	15 81       	ldd	r17, Z+5	; 0x05
    4370:	f5 01       	movw	r30, r10
    4372:	c5 91       	lpm	r28, Z+
    4374:	d4 91       	lpm	r29, Z+
    4376:	f6 01       	movw	r30, r12
    4378:	84 91       	lpm	r24, Z+
    437a:	88 23       	and	r24, r24
    437c:	21 f0       	breq	.+8      	; 0x4386 <__timerRead+0x108>
    437e:	09 90       	ld	r0, Y+
    4380:	d8 81       	ld	r29, Y
    4382:	c0 2d       	mov	r28, r0
    4384:	03 c0       	rjmp	.+6      	; 0x438c <__timerRead+0x10e>
    4386:	88 81       	ld	r24, Y
    4388:	c8 2f       	mov	r28, r24
    438a:	d0 e0       	ldi	r29, 0x00	; 0
    438c:	c2 17       	cp	r28, r18
    438e:	d3 07       	cpc	r29, r19
    4390:	30 f0       	brcs	.+12     	; 0x439e <__timerRead+0x120>
    4392:	cd 01       	movw	r24, r26
    4394:	4c 96       	adiw	r24, 0x1c	; 28
    4396:	0e 94 94 18 	call	0x3128	; 0x3128 <__portMaskGet>
    439a:	88 23       	and	r24, r24
    439c:	91 f0       	breq	.+36     	; 0x43c2 <__timerRead+0x144>
    439e:	08 94       	sec
    43a0:	e1 1c       	adc	r14, r1
    43a2:	f1 1c       	adc	r15, r1
    43a4:	01 1d       	adc	r16, r1
    43a6:	11 1d       	adc	r17, r1
    43a8:	f5 01       	movw	r30, r10
    43aa:	a5 91       	lpm	r26, Z+
    43ac:	b4 91       	lpm	r27, Z+
    43ae:	f6 01       	movw	r30, r12
    43b0:	84 91       	lpm	r24, Z+
    43b2:	88 23       	and	r24, r24
    43b4:	19 f0       	breq	.+6      	; 0x43bc <__timerRead+0x13e>
    43b6:	cd 91       	ld	r28, X+
    43b8:	dc 91       	ld	r29, X
    43ba:	03 c0       	rjmp	.+6      	; 0x43c2 <__timerRead+0x144>
    43bc:	8c 91       	ld	r24, X
    43be:	c8 2f       	mov	r28, r24
    43c0:	d0 e0       	ldi	r29, 0x00	; 0
    43c2:	9f be       	out	0x3f, r9	; 63
    43c4:	f3 01       	movw	r30, r6
    43c6:	e0 82       	st	Z, r14
    43c8:	f1 82       	std	Z+1, r15	; 0x01
    43ca:	02 83       	std	Z+2, r16	; 0x02
    43cc:	13 83       	std	Z+3, r17	; 0x03
    43ce:	f2 01       	movw	r30, r4
    43d0:	d1 83       	std	Z+1, r29	; 0x01
    43d2:	c0 83       	st	Z, r28
    43d4:	df 91       	pop	r29
    43d6:	cf 91       	pop	r28
    43d8:	1f 91       	pop	r17
    43da:	0f 91       	pop	r16
    43dc:	ff 90       	pop	r15
    43de:	ef 90       	pop	r14
    43e0:	df 90       	pop	r13
    43e2:	cf 90       	pop	r12
    43e4:	bf 90       	pop	r11
    43e6:	af 90       	pop	r10
    43e8:	9f 90       	pop	r9
    43ea:	7f 90       	pop	r7
    43ec:	6f 90       	pop	r6
    43ee:	5f 90       	pop	r5
    43f0:	4f 90       	pop	r4
    43f2:	08 95       	ret

000043f4 <clockGetus>:
    43f4:	ef 92       	push	r14
    43f6:	ff 92       	push	r15
    43f8:	0f 93       	push	r16
    43fa:	1f 93       	push	r17
    43fc:	df 93       	push	r29
    43fe:	cf 93       	push	r28
    4400:	00 d0       	rcall	.+0      	; 0x4402 <clockGetus+0xe>
    4402:	00 d0       	rcall	.+0      	; 0x4404 <clockGetus+0x10>
    4404:	00 d0       	rcall	.+0      	; 0x4406 <clockGetus+0x12>
    4406:	cd b7       	in	r28, 0x3d	; 61
    4408:	de b7       	in	r29, 0x3e	; 62
    440a:	80 91 6e 0c 	lds	r24, 0x0C6E
    440e:	90 91 6f 0c 	lds	r25, 0x0C6F
    4412:	be 01       	movw	r22, r28
    4414:	6d 5f       	subi	r22, 0xFD	; 253
    4416:	7f 4f       	sbci	r23, 0xFF	; 255
    4418:	ae 01       	movw	r20, r28
    441a:	4f 5f       	subi	r20, 0xFF	; 255
    441c:	5f 4f       	sbci	r21, 0xFF	; 255
    441e:	0e 94 3f 21 	call	0x427e	; 0x427e <__timerRead>
    4422:	6b 81       	ldd	r22, Y+3	; 0x03
    4424:	7c 81       	ldd	r23, Y+4	; 0x04
    4426:	8d 81       	ldd	r24, Y+5	; 0x05
    4428:	9e 81       	ldd	r25, Y+6	; 0x06
    442a:	20 91 b8 0b 	lds	r18, 0x0BB8
    442e:	30 91 b9 0b 	lds	r19, 0x0BB9
    4432:	40 91 ba 0b 	lds	r20, 0x0BBA
    4436:	50 91 bb 0b 	lds	r21, 0x0BBB
    443a:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    443e:	6b 83       	std	Y+3, r22	; 0x03
    4440:	7c 83       	std	Y+4, r23	; 0x04
    4442:	8d 83       	std	Y+5, r24	; 0x05
    4444:	9e 83       	std	Y+6, r25	; 0x06
    4446:	80 91 6e 0c 	lds	r24, 0x0C6E
    444a:	90 91 6f 0c 	lds	r25, 0x0C6F
    444e:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <timerGetTOP>
    4452:	7c 01       	movw	r14, r24
    4454:	69 81       	ldd	r22, Y+1	; 0x01
    4456:	7a 81       	ldd	r23, Y+2	; 0x02
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	20 91 b8 0b 	lds	r18, 0x0BB8
    4460:	30 91 b9 0b 	lds	r19, 0x0BB9
    4464:	40 91 ba 0b 	lds	r20, 0x0BBA
    4468:	50 91 bb 0b 	lds	r21, 0x0BBB
    446c:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    4470:	00 e0       	ldi	r16, 0x00	; 0
    4472:	10 e0       	ldi	r17, 0x00	; 0
    4474:	a8 01       	movw	r20, r16
    4476:	97 01       	movw	r18, r14
    4478:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    447c:	8b 81       	ldd	r24, Y+3	; 0x03
    447e:	9c 81       	ldd	r25, Y+4	; 0x04
    4480:	ad 81       	ldd	r26, Y+5	; 0x05
    4482:	be 81       	ldd	r27, Y+6	; 0x06
    4484:	28 0f       	add	r18, r24
    4486:	39 1f       	adc	r19, r25
    4488:	4a 1f       	adc	r20, r26
    448a:	5b 1f       	adc	r21, r27
    448c:	b9 01       	movw	r22, r18
    448e:	ca 01       	movw	r24, r20
    4490:	26 96       	adiw	r28, 0x06	; 6
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	f8 94       	cli
    4496:	de bf       	out	0x3e, r29	; 62
    4498:	0f be       	out	0x3f, r0	; 63
    449a:	cd bf       	out	0x3d, r28	; 61
    449c:	cf 91       	pop	r28
    449e:	df 91       	pop	r29
    44a0:	1f 91       	pop	r17
    44a2:	0f 91       	pop	r16
    44a4:	ff 90       	pop	r15
    44a6:	ef 90       	pop	r14
    44a8:	08 95       	ret

000044aa <setError>:
    44aa:	df 92       	push	r13
    44ac:	ef 92       	push	r14
    44ae:	ff 92       	push	r15
    44b0:	0f 93       	push	r16
    44b2:	1f 93       	push	r17
    44b4:	d8 2e       	mov	r13, r24
    44b6:	80 91 69 0c 	lds	r24, 0x0C69
    44ba:	88 23       	and	r24, r24
    44bc:	09 f0       	breq	.+2      	; 0x44c0 <setError+0x16>
    44be:	5b c0       	rjmp	.+182    	; 0x4576 <setError+0xcc>
    44c0:	d0 92 69 0c 	sts	0x0C69, r13
    44c4:	80 91 b5 0b 	lds	r24, 0x0BB5
    44c8:	90 91 b6 0b 	lds	r25, 0x0BB6
    44cc:	89 2b       	or	r24, r25
    44ce:	99 f0       	breq	.+38     	; 0x44f6 <setError+0x4c>
    44d0:	80 91 6e 0c 	lds	r24, 0x0C6E
    44d4:	90 91 6f 0c 	lds	r25, 0x0C6F
    44d8:	89 2b       	or	r24, r25
    44da:	69 f0       	breq	.+26     	; 0x44f6 <setError+0x4c>
    44dc:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <clockGetus>
    44e0:	9b 01       	movw	r18, r22
    44e2:	ac 01       	movw	r20, r24
    44e4:	8b ec       	ldi	r24, 0xCB	; 203
    44e6:	90 e2       	ldi	r25, 0x20	; 32
    44e8:	69 e6       	ldi	r22, 0x69	; 105
    44ea:	7c e0       	ldi	r23, 0x0C	; 12
    44ec:	ee 24       	eor	r14, r14
    44ee:	ff 24       	eor	r15, r15
    44f0:	87 01       	movw	r16, r14
    44f2:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <scheduleJob>
    44f6:	80 91 6c 0c 	lds	r24, 0x0C6C
    44fa:	90 91 6d 0c 	lds	r25, 0x0C6D
    44fe:	00 97       	sbiw	r24, 0x00	; 0
    4500:	d1 f1       	breq	.+116    	; 0x4576 <setError+0xcc>
    4502:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <rprintfInit>
    4506:	8c 01       	movw	r16, r24
    4508:	2d 2d       	mov	r18, r13
    450a:	33 27       	eor	r19, r19
    450c:	27 fd       	sbrc	r18, 7
    450e:	30 95       	com	r19
    4510:	d7 fe       	sbrs	r13, 7
    4512:	16 c0       	rjmp	.+44     	; 0x4540 <setError+0x96>
    4514:	00 d0       	rcall	.+0      	; 0x4516 <setError+0x6c>
    4516:	00 d0       	rcall	.+0      	; 0x4518 <setError+0x6e>
    4518:	0f 92       	push	r0
    451a:	ed b7       	in	r30, 0x3d	; 61
    451c:	fe b7       	in	r31, 0x3e	; 62
    451e:	31 96       	adiw	r30, 0x01	; 1
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	ad b7       	in	r26, 0x3d	; 61
    4524:	be b7       	in	r27, 0x3e	; 62
    4526:	11 96       	adiw	r26, 0x01	; 1
    4528:	8c 93       	st	X, r24
    452a:	89 e4       	ldi	r24, 0x49	; 73
    452c:	95 e0       	ldi	r25, 0x05	; 5
    452e:	92 83       	std	Z+2, r25	; 0x02
    4530:	81 83       	std	Z+1, r24	; 0x01
    4532:	88 27       	eor	r24, r24
    4534:	99 27       	eor	r25, r25
    4536:	82 1b       	sub	r24, r18
    4538:	93 0b       	sbc	r25, r19
    453a:	94 83       	std	Z+4, r25	; 0x04
    453c:	83 83       	std	Z+3, r24	; 0x03
    453e:	11 c0       	rjmp	.+34     	; 0x4562 <setError+0xb8>
    4540:	00 d0       	rcall	.+0      	; 0x4542 <setError+0x98>
    4542:	00 d0       	rcall	.+0      	; 0x4544 <setError+0x9a>
    4544:	0f 92       	push	r0
    4546:	ed b7       	in	r30, 0x3d	; 61
    4548:	fe b7       	in	r31, 0x3e	; 62
    454a:	31 96       	adiw	r30, 0x01	; 1
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	ad b7       	in	r26, 0x3d	; 61
    4550:	be b7       	in	r27, 0x3e	; 62
    4552:	11 96       	adiw	r26, 0x01	; 1
    4554:	8c 93       	st	X, r24
    4556:	8a e3       	ldi	r24, 0x3A	; 58
    4558:	95 e0       	ldi	r25, 0x05	; 5
    455a:	92 83       	std	Z+2, r25	; 0x02
    455c:	81 83       	std	Z+1, r24	; 0x01
    455e:	34 83       	std	Z+4, r19	; 0x04
    4560:	23 83       	std	Z+3, r18	; 0x03
    4562:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <rprintf1RamRom>
    4566:	0f 90       	pop	r0
    4568:	0f 90       	pop	r0
    456a:	0f 90       	pop	r0
    456c:	0f 90       	pop	r0
    456e:	0f 90       	pop	r0
    4570:	c8 01       	movw	r24, r16
    4572:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <rprintfInit>
    4576:	1f 91       	pop	r17
    4578:	0f 91       	pop	r16
    457a:	ff 90       	pop	r15
    457c:	ef 90       	pop	r14
    457e:	df 90       	pop	r13
    4580:	08 95       	ret

00004582 <compareDetach>:
    4582:	cf 93       	push	r28
    4584:	df 93       	push	r29
    4586:	ec 01       	movw	r28, r24
    4588:	22 96       	adiw	r28, 0x02	; 2
    458a:	fe 01       	movw	r30, r28
    458c:	94 91       	lpm	r25, Z+
    458e:	22 97       	sbiw	r28, 0x02	; 2
    4590:	8c e2       	ldi	r24, 0x2C	; 44
    4592:	98 9f       	mul	r25, r24
    4594:	f0 01       	movw	r30, r0
    4596:	11 24       	eor	r1, r1
    4598:	e0 52       	subi	r30, 0x20	; 32
    459a:	fd 4f       	sbci	r31, 0xFD	; 253
    459c:	e4 91       	lpm	r30, Z+
    459e:	ee 23       	and	r30, r30
    45a0:	09 f1       	breq	.+66     	; 0x45e4 <compareDetach+0x62>
    45a2:	ce 01       	movw	r24, r28
    45a4:	03 96       	adiw	r24, 0x03	; 3
    45a6:	0e 94 a1 18 	call	0x3142	; 0x3142 <__portMaskClear>
    45aa:	ce 01       	movw	r24, r28
    45ac:	0b 96       	adiw	r24, 0x0b	; 11
    45ae:	fc 01       	movw	r30, r24
    45b0:	a5 91       	lpm	r26, Z+
    45b2:	b4 91       	lpm	r27, Z+
    45b4:	2d 96       	adiw	r28, 0x0d	; 13
    45b6:	fe 01       	movw	r30, r28
    45b8:	84 91       	lpm	r24, Z+
    45ba:	2d 97       	sbiw	r28, 0x0d	; 13
    45bc:	21 e0       	ldi	r18, 0x01	; 1
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	02 c0       	rjmp	.+4      	; 0x45c6 <compareDetach+0x44>
    45c2:	22 0f       	add	r18, r18
    45c4:	33 1f       	adc	r19, r19
    45c6:	8a 95       	dec	r24
    45c8:	e2 f7       	brpl	.-8      	; 0x45c2 <compareDetach+0x40>
    45ca:	9c 91       	ld	r25, X
    45cc:	82 2f       	mov	r24, r18
    45ce:	88 0f       	add	r24, r24
    45d0:	82 2b       	or	r24, r18
    45d2:	80 95       	com	r24
    45d4:	89 23       	and	r24, r25
    45d6:	8c 93       	st	X, r24
    45d8:	fe 01       	movw	r30, r28
    45da:	a5 91       	lpm	r26, Z+
    45dc:	b4 91       	lpm	r27, Z+
    45de:	1d 92       	st	X+, r1
    45e0:	1c 92       	st	X, r1
    45e2:	03 c0       	rjmp	.+6      	; 0x45ea <compareDetach+0x68>
    45e4:	8d ef       	ldi	r24, 0xFD	; 253
    45e6:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    45ea:	df 91       	pop	r29
    45ec:	cf 91       	pop	r28
    45ee:	08 95       	ret

000045f0 <compareSetThreshold>:
    45f0:	cf 93       	push	r28
    45f2:	df 93       	push	r29
    45f4:	9c 01       	movw	r18, r24
    45f6:	2e 5f       	subi	r18, 0xFE	; 254
    45f8:	3f 4f       	sbci	r19, 0xFF	; 255
    45fa:	f9 01       	movw	r30, r18
    45fc:	84 91       	lpm	r24, Z+
    45fe:	22 50       	subi	r18, 0x02	; 2
    4600:	30 40       	sbci	r19, 0x00	; 0
    4602:	9c e2       	ldi	r25, 0x2C	; 44
    4604:	89 9f       	mul	r24, r25
    4606:	a0 01       	movw	r20, r0
    4608:	11 24       	eor	r1, r1
    460a:	48 52       	subi	r20, 0x28	; 40
    460c:	5d 4f       	sbci	r21, 0xFD	; 253
    460e:	48 5f       	subi	r20, 0xF8	; 248
    4610:	5f 4f       	sbci	r21, 0xFF	; 255
    4612:	fa 01       	movw	r30, r20
    4614:	84 91       	lpm	r24, Z+
    4616:	48 50       	subi	r20, 0x08	; 8
    4618:	50 40       	sbci	r21, 0x00	; 0
    461a:	88 23       	and	r24, r24
    461c:	c1 f0       	breq	.+48     	; 0x464e <compareSetThreshold+0x5e>
    461e:	c9 01       	movw	r24, r18
    4620:	06 96       	adiw	r24, 0x06	; 6
    4622:	fc 01       	movw	r30, r24
    4624:	c5 91       	lpm	r28, Z+
    4626:	d4 91       	lpm	r29, Z+
    4628:	fa 01       	movw	r30, r20
    462a:	36 96       	adiw	r30, 0x06	; 6
    462c:	e4 91       	lpm	r30, Z+
    462e:	ee 23       	and	r30, r30
    4630:	19 f0       	breq	.+6      	; 0x4638 <compareSetThreshold+0x48>
    4632:	79 83       	std	Y+1, r23	; 0x01
    4634:	68 83       	st	Y, r22
    4636:	0e c0       	rjmp	.+28     	; 0x4654 <compareSetThreshold+0x64>
    4638:	6f 3f       	cpi	r22, 0xFF	; 255
    463a:	71 05       	cpc	r23, r1
    463c:	31 f0       	breq	.+12     	; 0x464a <compareSetThreshold+0x5a>
    463e:	28 f0       	brcs	.+10     	; 0x464a <compareSetThreshold+0x5a>
    4640:	8e ef       	ldi	r24, 0xFE	; 254
    4642:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    4646:	6f ef       	ldi	r22, 0xFF	; 255
    4648:	70 e0       	ldi	r23, 0x00	; 0
    464a:	68 83       	st	Y, r22
    464c:	03 c0       	rjmp	.+6      	; 0x4654 <compareSetThreshold+0x64>
    464e:	8d ef       	ldi	r24, 0xFD	; 253
    4650:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	08 95       	ret

0000465a <compareGetThreshold>:
    465a:	9c 01       	movw	r18, r24
    465c:	2e 5f       	subi	r18, 0xFE	; 254
    465e:	3f 4f       	sbci	r19, 0xFF	; 255
    4660:	f9 01       	movw	r30, r18
    4662:	84 91       	lpm	r24, Z+
    4664:	22 50       	subi	r18, 0x02	; 2
    4666:	30 40       	sbci	r19, 0x00	; 0
    4668:	9c e2       	ldi	r25, 0x2C	; 44
    466a:	89 9f       	mul	r24, r25
    466c:	a0 01       	movw	r20, r0
    466e:	11 24       	eor	r1, r1
    4670:	48 52       	subi	r20, 0x28	; 40
    4672:	5d 4f       	sbci	r21, 0xFD	; 253
    4674:	48 5f       	subi	r20, 0xF8	; 248
    4676:	5f 4f       	sbci	r21, 0xFF	; 255
    4678:	fa 01       	movw	r30, r20
    467a:	84 91       	lpm	r24, Z+
    467c:	48 50       	subi	r20, 0x08	; 8
    467e:	50 40       	sbci	r21, 0x00	; 0
    4680:	88 23       	and	r24, r24
    4682:	89 f0       	breq	.+34     	; 0x46a6 <compareGetThreshold+0x4c>
    4684:	c9 01       	movw	r24, r18
    4686:	06 96       	adiw	r24, 0x06	; 6
    4688:	fc 01       	movw	r30, r24
    468a:	a5 91       	lpm	r26, Z+
    468c:	b4 91       	lpm	r27, Z+
    468e:	fa 01       	movw	r30, r20
    4690:	36 96       	adiw	r30, 0x06	; 6
    4692:	e4 91       	lpm	r30, Z+
    4694:	ee 23       	and	r30, r30
    4696:	19 f0       	breq	.+6      	; 0x469e <compareGetThreshold+0x44>
    4698:	2d 91       	ld	r18, X+
    469a:	3c 91       	ld	r19, X
    469c:	09 c0       	rjmp	.+18     	; 0x46b0 <compareGetThreshold+0x56>
    469e:	8c 91       	ld	r24, X
    46a0:	28 2f       	mov	r18, r24
    46a2:	30 e0       	ldi	r19, 0x00	; 0
    46a4:	05 c0       	rjmp	.+10     	; 0x46b0 <compareGetThreshold+0x56>
    46a6:	8d ef       	ldi	r24, 0xFD	; 253
    46a8:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    46ac:	2f ef       	ldi	r18, 0xFF	; 255
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	c9 01       	movw	r24, r18
    46b2:	08 95       	ret

000046b4 <timerGetTOP>:
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	ec 01       	movw	r28, r24
    46ba:	04 96       	adiw	r24, 0x04	; 4
    46bc:	fc 01       	movw	r30, r24
    46be:	a5 91       	lpm	r26, Z+
    46c0:	b4 91       	lpm	r27, Z+
    46c2:	8c 91       	ld	r24, X
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	87 70       	andi	r24, 0x07	; 7
    46c8:	90 70       	andi	r25, 0x00	; 0
    46ca:	89 2b       	or	r24, r25
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <timerGetTOP+0x1c>
    46ce:	41 c0       	rjmp	.+130    	; 0x4752 <timerGetTOP+0x9e>
    46d0:	fe 01       	movw	r30, r28
    46d2:	a5 91       	lpm	r26, Z+
    46d4:	b4 91       	lpm	r27, Z+
    46d6:	1e 96       	adiw	r26, 0x0e	; 14
    46d8:	8c 91       	ld	r24, X
    46da:	87 30       	cpi	r24, 0x07	; 7
    46dc:	39 f1       	breq	.+78     	; 0x472c <timerGetTOP+0x78>
    46de:	88 30       	cpi	r24, 0x08	; 8
    46e0:	70 f4       	brcc	.+28     	; 0x46fe <timerGetTOP+0x4a>
    46e2:	83 30       	cpi	r24, 0x03	; 3
    46e4:	19 f1       	breq	.+70     	; 0x472c <timerGetTOP+0x78>
    46e6:	84 30       	cpi	r24, 0x04	; 4
    46e8:	28 f4       	brcc	.+10     	; 0x46f4 <timerGetTOP+0x40>
    46ea:	81 30       	cpi	r24, 0x01	; 1
    46ec:	c9 f0       	breq	.+50     	; 0x4720 <timerGetTOP+0x6c>
    46ee:	82 30       	cpi	r24, 0x02	; 2
    46f0:	d0 f4       	brcc	.+52     	; 0x4726 <timerGetTOP+0x72>
    46f2:	13 c0       	rjmp	.+38     	; 0x471a <timerGetTOP+0x66>
    46f4:	85 30       	cpi	r24, 0x05	; 5
    46f6:	a1 f0       	breq	.+40     	; 0x4720 <timerGetTOP+0x6c>
    46f8:	86 30       	cpi	r24, 0x06	; 6
    46fa:	a8 f4       	brcc	.+42     	; 0x4726 <timerGetTOP+0x72>
    46fc:	1a c0       	rjmp	.+52     	; 0x4732 <timerGetTOP+0x7e>
    46fe:	8b 30       	cpi	r24, 0x0B	; 11
    4700:	c1 f0       	breq	.+48     	; 0x4732 <timerGetTOP+0x7e>
    4702:	8c 30       	cpi	r24, 0x0C	; 12
    4704:	18 f4       	brcc	.+6      	; 0x470c <timerGetTOP+0x58>
    4706:	89 30       	cpi	r24, 0x09	; 9
    4708:	e1 f4       	brne	.+56     	; 0x4742 <timerGetTOP+0x8e>
    470a:	13 c0       	rjmp	.+38     	; 0x4732 <timerGetTOP+0x7e>
    470c:	8e 30       	cpi	r24, 0x0E	; 14
    470e:	c9 f0       	breq	.+50     	; 0x4742 <timerGetTOP+0x8e>
    4710:	8f 30       	cpi	r24, 0x0F	; 15
    4712:	79 f0       	breq	.+30     	; 0x4732 <timerGetTOP+0x7e>
    4714:	8c 30       	cpi	r24, 0x0C	; 12
    4716:	e9 f4       	brne	.+58     	; 0x4752 <timerGetTOP+0x9e>
    4718:	14 c0       	rjmp	.+40     	; 0x4742 <timerGetTOP+0x8e>
    471a:	2f ef       	ldi	r18, 0xFF	; 255
    471c:	3f ef       	ldi	r19, 0xFF	; 255
    471e:	1b c0       	rjmp	.+54     	; 0x4756 <timerGetTOP+0xa2>
    4720:	2f ef       	ldi	r18, 0xFF	; 255
    4722:	30 e0       	ldi	r19, 0x00	; 0
    4724:	18 c0       	rjmp	.+48     	; 0x4756 <timerGetTOP+0xa2>
    4726:	2f ef       	ldi	r18, 0xFF	; 255
    4728:	31 e0       	ldi	r19, 0x01	; 1
    472a:	15 c0       	rjmp	.+42     	; 0x4756 <timerGetTOP+0xa2>
    472c:	2f ef       	ldi	r18, 0xFF	; 255
    472e:	33 e0       	ldi	r19, 0x03	; 3
    4730:	12 c0       	rjmp	.+36     	; 0x4756 <timerGetTOP+0xa2>
    4732:	fe 01       	movw	r30, r28
    4734:	77 96       	adiw	r30, 0x17	; 23
    4736:	85 91       	lpm	r24, Z+
    4738:	94 91       	lpm	r25, Z+
    473a:	0e 94 2d 23 	call	0x465a	; 0x465a <compareGetThreshold>
    473e:	9c 01       	movw	r18, r24
    4740:	0a c0       	rjmp	.+20     	; 0x4756 <timerGetTOP+0xa2>
    4742:	ce 01       	movw	r24, r28
    4744:	4f 96       	adiw	r24, 0x1f	; 31
    4746:	fc 01       	movw	r30, r24
    4748:	a5 91       	lpm	r26, Z+
    474a:	b4 91       	lpm	r27, Z+
    474c:	2d 91       	ld	r18, X+
    474e:	3c 91       	ld	r19, X
    4750:	02 c0       	rjmp	.+4      	; 0x4756 <timerGetTOP+0xa2>
    4752:	20 e0       	ldi	r18, 0x00	; 0
    4754:	30 e0       	ldi	r19, 0x00	; 0
    4756:	26 96       	adiw	r28, 0x06	; 6
    4758:	fe 01       	movw	r30, r28
    475a:	84 91       	lpm	r24, Z+
    475c:	88 23       	and	r24, r24
    475e:	09 f4       	brne	.+2      	; 0x4762 <timerGetTOP+0xae>
    4760:	30 70       	andi	r19, 0x00	; 0
    4762:	c9 01       	movw	r24, r18
    4764:	df 91       	pop	r29
    4766:	cf 91       	pop	r28
    4768:	08 95       	ret

0000476a <timerGetBestPrescaler>:
    476a:	3f 92       	push	r3
    476c:	4f 92       	push	r4
    476e:	5f 92       	push	r5
    4770:	6f 92       	push	r6
    4772:	7f 92       	push	r7
    4774:	8f 92       	push	r8
    4776:	9f 92       	push	r9
    4778:	af 92       	push	r10
    477a:	bf 92       	push	r11
    477c:	cf 92       	push	r12
    477e:	df 92       	push	r13
    4780:	ef 92       	push	r14
    4782:	ff 92       	push	r15
    4784:	0f 93       	push	r16
    4786:	1f 93       	push	r17
    4788:	cf 93       	push	r28
    478a:	df 93       	push	r29
    478c:	ec 01       	movw	r28, r24
    478e:	26 96       	adiw	r28, 0x06	; 6
    4790:	fe 01       	movw	r30, r28
    4792:	84 91       	lpm	r24, Z+
    4794:	26 97       	sbiw	r28, 0x06	; 6
    4796:	88 23       	and	r24, r24
    4798:	31 f4       	brne	.+12     	; 0x47a6 <timerGetBestPrescaler+0x3c>
    479a:	ff ef       	ldi	r31, 0xFF	; 255
    479c:	af 2e       	mov	r10, r31
    479e:	b1 2c       	mov	r11, r1
    47a0:	c1 2c       	mov	r12, r1
    47a2:	d1 2c       	mov	r13, r1
    47a4:	06 c0       	rjmp	.+12     	; 0x47b2 <timerGetBestPrescaler+0x48>
    47a6:	ef ef       	ldi	r30, 0xFF	; 255
    47a8:	ae 2e       	mov	r10, r30
    47aa:	ef ef       	ldi	r30, 0xFF	; 255
    47ac:	be 2e       	mov	r11, r30
    47ae:	c1 2c       	mov	r12, r1
    47b0:	d1 2c       	mov	r13, r1
    47b2:	27 96       	adiw	r28, 0x07	; 7
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	20 91 04 02 	lds	r18, 0x0204
    47bc:	30 91 05 02 	lds	r19, 0x0205
    47c0:	40 e0       	ldi	r20, 0x00	; 0
    47c2:	50 e0       	ldi	r21, 0x00	; 0
    47c4:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    47c8:	3b 01       	movw	r6, r22
    47ca:	4c 01       	movw	r8, r24
    47cc:	01 e0       	ldi	r16, 0x01	; 1
    47ce:	10 e0       	ldi	r17, 0x00	; 0
    47d0:	61 e0       	ldi	r22, 0x01	; 1
    47d2:	46 2e       	mov	r4, r22
    47d4:	51 2c       	mov	r5, r1
    47d6:	ee 24       	eor	r14, r14
    47d8:	ff 24       	eor	r15, r15
    47da:	fe 01       	movw	r30, r28
    47dc:	34 90       	lpm	r3, Z+
    47de:	33 20       	and	r3, r3
    47e0:	21 f4       	brne	.+8      	; 0x47ea <timerGetBestPrescaler+0x80>
    47e2:	68 e0       	ldi	r22, 0x08	; 8
    47e4:	75 e0       	ldi	r23, 0x05	; 5
    47e6:	86 e0       	ldi	r24, 0x06	; 6
    47e8:	03 c0       	rjmp	.+6      	; 0x47f0 <timerGetBestPrescaler+0x86>
    47ea:	64 e1       	ldi	r22, 0x14	; 20
    47ec:	75 e0       	ldi	r23, 0x05	; 5
    47ee:	88 e0       	ldi	r24, 0x08	; 8
    47f0:	48 2f       	mov	r20, r24
    47f2:	41 50       	subi	r20, 0x01	; 1
    47f4:	24 2f       	mov	r18, r20
    47f6:	33 27       	eor	r19, r19
    47f8:	27 fd       	sbrc	r18, 7
    47fa:	30 95       	com	r19
    47fc:	22 0f       	add	r18, r18
    47fe:	33 1f       	adc	r19, r19
    4800:	26 0f       	add	r18, r22
    4802:	37 1f       	adc	r19, r23
    4804:	09 c0       	rjmp	.+18     	; 0x4818 <timerGetBestPrescaler+0xae>
    4806:	f9 01       	movw	r30, r18
    4808:	85 91       	lpm	r24, Z+
    480a:	94 91       	lpm	r25, Z+
    480c:	22 50       	subi	r18, 0x02	; 2
    480e:	30 40       	sbci	r19, 0x00	; 0
    4810:	80 17       	cp	r24, r16
    4812:	91 07       	cpc	r25, r17
    4814:	21 f0       	breq	.+8      	; 0x481e <timerGetBestPrescaler+0xb4>
    4816:	41 50       	subi	r20, 0x01	; 1
    4818:	47 ff       	sbrs	r20, 7
    481a:	f5 cf       	rjmp	.-22     	; 0x4806 <timerGetBestPrescaler+0x9c>
    481c:	0d c0       	rjmp	.+26     	; 0x4838 <timerGetBestPrescaler+0xce>
    481e:	98 01       	movw	r18, r16
    4820:	40 e0       	ldi	r20, 0x00	; 0
    4822:	50 e0       	ldi	r21, 0x00	; 0
    4824:	c4 01       	movw	r24, r8
    4826:	b3 01       	movw	r22, r6
    4828:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    482c:	a2 16       	cp	r10, r18
    482e:	b3 06       	cpc	r11, r19
    4830:	c4 06       	cpc	r12, r20
    4832:	d5 06       	cpc	r13, r21
    4834:	70 f4       	brcc	.+28     	; 0x4852 <timerGetBestPrescaler+0xe8>
    4836:	28 01       	movw	r4, r16
    4838:	00 0f       	add	r16, r16
    483a:	11 1f       	adc	r17, r17
    483c:	08 94       	sec
    483e:	e1 1c       	adc	r14, r1
    4840:	f1 1c       	adc	r15, r1
    4842:	fb e0       	ldi	r31, 0x0B	; 11
    4844:	ef 16       	cp	r14, r31
    4846:	f1 04       	cpc	r15, r1
    4848:	51 f6       	brne	.-108    	; 0x47de <timerGetBestPrescaler+0x74>
    484a:	88 ef       	ldi	r24, 0xF8	; 248
    484c:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    4850:	82 01       	movw	r16, r4
    4852:	c8 01       	movw	r24, r16
    4854:	df 91       	pop	r29
    4856:	cf 91       	pop	r28
    4858:	1f 91       	pop	r17
    485a:	0f 91       	pop	r16
    485c:	ff 90       	pop	r15
    485e:	ef 90       	pop	r14
    4860:	df 90       	pop	r13
    4862:	cf 90       	pop	r12
    4864:	bf 90       	pop	r11
    4866:	af 90       	pop	r10
    4868:	9f 90       	pop	r9
    486a:	8f 90       	pop	r8
    486c:	7f 90       	pop	r7
    486e:	6f 90       	pop	r6
    4870:	5f 90       	pop	r5
    4872:	4f 90       	pop	r4
    4874:	3f 90       	pop	r3
    4876:	08 95       	ret

00004878 <timerSetPrescaler>:
    4878:	1f 93       	push	r17
    487a:	cf 93       	push	r28
    487c:	df 93       	push	r29
    487e:	ac 01       	movw	r20, r24
    4880:	eb 01       	movw	r28, r22
    4882:	fc 01       	movw	r30, r24
    4884:	34 96       	adiw	r30, 0x04	; 4
    4886:	a5 91       	lpm	r26, Z+
    4888:	b4 91       	lpm	r27, Z+
    488a:	1f b7       	in	r17, 0x3f	; 63
    488c:	f8 94       	cli
    488e:	49 5f       	subi	r20, 0xF9	; 249
    4890:	5f 4f       	sbci	r21, 0xFF	; 255
    4892:	fa 01       	movw	r30, r20
    4894:	84 91       	lpm	r24, Z+
    4896:	47 50       	subi	r20, 0x07	; 7
    4898:	50 40       	sbci	r21, 0x00	; 0
    489a:	88 23       	and	r24, r24
    489c:	21 f4       	brne	.+8      	; 0x48a6 <timerSetPrescaler+0x2e>
    489e:	e8 e0       	ldi	r30, 0x08	; 8
    48a0:	f5 e0       	ldi	r31, 0x05	; 5
    48a2:	86 e0       	ldi	r24, 0x06	; 6
    48a4:	03 c0       	rjmp	.+6      	; 0x48ac <timerSetPrescaler+0x34>
    48a6:	e4 e1       	ldi	r30, 0x14	; 20
    48a8:	f5 e0       	ldi	r31, 0x05	; 5
    48aa:	88 e0       	ldi	r24, 0x08	; 8
    48ac:	68 2f       	mov	r22, r24
    48ae:	61 50       	subi	r22, 0x01	; 1
    48b0:	26 2f       	mov	r18, r22
    48b2:	33 27       	eor	r19, r19
    48b4:	27 fd       	sbrc	r18, 7
    48b6:	30 95       	com	r19
    48b8:	22 0f       	add	r18, r18
    48ba:	33 1f       	adc	r19, r19
    48bc:	2e 0f       	add	r18, r30
    48be:	3f 1f       	adc	r19, r31
    48c0:	16 c0       	rjmp	.+44     	; 0x48ee <timerSetPrescaler+0x76>
    48c2:	f9 01       	movw	r30, r18
    48c4:	85 91       	lpm	r24, Z+
    48c6:	94 91       	lpm	r25, Z+
    48c8:	22 50       	subi	r18, 0x02	; 2
    48ca:	30 40       	sbci	r19, 0x00	; 0
    48cc:	8c 17       	cp	r24, r28
    48ce:	9d 07       	cpc	r25, r29
    48d0:	69 f4       	brne	.+26     	; 0x48ec <timerSetPrescaler+0x74>
    48d2:	fa 01       	movw	r30, r20
    48d4:	25 91       	lpm	r18, Z+
    48d6:	34 91       	lpm	r19, Z+
    48d8:	f9 01       	movw	r30, r18
    48da:	d1 83       	std	Z+1, r29	; 0x01
    48dc:	c0 83       	st	Z, r28
    48de:	8c 91       	ld	r24, X
    48e0:	88 7f       	andi	r24, 0xF8	; 248
    48e2:	8c 93       	st	X, r24
    48e4:	8c 91       	ld	r24, X
    48e6:	86 2b       	or	r24, r22
    48e8:	8c 93       	st	X, r24
    48ea:	04 c0       	rjmp	.+8      	; 0x48f4 <timerSetPrescaler+0x7c>
    48ec:	61 50       	subi	r22, 0x01	; 1
    48ee:	67 ff       	sbrs	r22, 7
    48f0:	e8 cf       	rjmp	.-48     	; 0x48c2 <timerSetPrescaler+0x4a>
    48f2:	05 c0       	rjmp	.+10     	; 0x48fe <timerSetPrescaler+0x86>
    48f4:	1f bf       	out	0x3f, r17	; 63
    48f6:	df 91       	pop	r29
    48f8:	cf 91       	pop	r28
    48fa:	1f 91       	pop	r17
    48fc:	08 95       	ret
    48fe:	8a ef       	ldi	r24, 0xFA	; 250
    4900:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    4904:	f7 cf       	rjmp	.-18     	; 0x48f4 <timerSetPrescaler+0x7c>

00004906 <timerInit>:
    4906:	7f 92       	push	r7
    4908:	8f 92       	push	r8
    490a:	9f 92       	push	r9
    490c:	af 92       	push	r10
    490e:	bf 92       	push	r11
    4910:	cf 92       	push	r12
    4912:	df 92       	push	r13
    4914:	ef 92       	push	r14
    4916:	ff 92       	push	r15
    4918:	0f 93       	push	r16
    491a:	1f 93       	push	r17
    491c:	cf 93       	push	r28
    491e:	df 93       	push	r29
    4920:	ec 01       	movw	r28, r24
    4922:	fc 01       	movw	r30, r24
    4924:	32 96       	adiw	r30, 0x02	; 2
    4926:	05 91       	lpm	r16, Z+
    4928:	14 91       	lpm	r17, Z+
    492a:	fc 01       	movw	r30, r24
    492c:	c5 90       	lpm	r12, Z+
    492e:	d4 90       	lpm	r13, Z+
    4930:	7f b6       	in	r7, 0x3f	; 63
    4932:	f8 94       	cli
    4934:	04 96       	adiw	r24, 0x04	; 4
    4936:	fc 01       	movw	r30, r24
    4938:	a5 91       	lpm	r26, Z+
    493a:	b4 91       	lpm	r27, Z+
    493c:	8c 91       	ld	r24, X
    493e:	88 7f       	andi	r24, 0xF8	; 248
    4940:	8c 93       	st	X, r24
    4942:	99 e1       	ldi	r25, 0x19	; 25
    4944:	89 2e       	mov	r8, r25
    4946:	91 2c       	mov	r9, r1
    4948:	8c 0e       	add	r8, r28
    494a:	9d 1e       	adc	r9, r29
    494c:	c4 01       	movw	r24, r8
    494e:	0e 94 a1 18 	call	0x3142	; 0x3142 <__portMaskClear>
    4952:	f8 01       	movw	r30, r16
    4954:	10 82       	st	Z, r1
    4956:	f6 01       	movw	r30, r12
    4958:	12 82       	std	Z+2, r1	; 0x02
    495a:	13 82       	std	Z+3, r1	; 0x03
    495c:	14 82       	std	Z+4, r1	; 0x04
    495e:	15 82       	std	Z+5, r1	; 0x05
    4960:	60 81       	ld	r22, Z
    4962:	71 81       	ldd	r23, Z+1	; 0x01
    4964:	ce 01       	movw	r24, r28
    4966:	0e 94 3c 24 	call	0x4878	; 0x4878 <timerSetPrescaler>
    496a:	28 96       	adiw	r28, 0x08	; 8
    496c:	fe 01       	movw	r30, r28
    496e:	e4 90       	lpm	r14, Z+
    4970:	2f 96       	adiw	r28, 0x0f	; 15
    4972:	ff 24       	eor	r15, r15
    4974:	00 e0       	ldi	r16, 0x00	; 0
    4976:	10 e0       	ldi	r17, 0x00	; 0
    4978:	fe 01       	movw	r30, r28
    497a:	a5 90       	lpm	r10, Z+
    497c:	b4 90       	lpm	r11, Z+
    497e:	67 97       	sbiw	r28, 0x17	; 23
    4980:	09 c0       	rjmp	.+18     	; 0x4994 <timerInit+0x8e>
    4982:	c5 01       	movw	r24, r10
    4984:	80 0f       	add	r24, r16
    4986:	91 1f       	adc	r25, r17
    4988:	08 96       	adiw	r24, 0x08	; 8
    498a:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    498e:	f3 94       	inc	r15
    4990:	00 5f       	subi	r16, 0xF0	; 240
    4992:	1f 4f       	sbci	r17, 0xFF	; 255
    4994:	fe 14       	cp	r15, r14
    4996:	a8 f3       	brcs	.-22     	; 0x4982 <timerInit+0x7c>
    4998:	ce 01       	movw	r24, r28
    499a:	4c 96       	adiw	r24, 0x1c	; 28
    499c:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    49a0:	f6 01       	movw	r30, r12
    49a2:	86 81       	ldd	r24, Z+6	; 0x06
    49a4:	97 81       	ldd	r25, Z+7	; 0x07
    49a6:	89 2b       	or	r24, r25
    49a8:	19 f0       	breq	.+6      	; 0x49b0 <timerInit+0xaa>
    49aa:	c4 01       	movw	r24, r8
    49ac:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    49b0:	7f be       	out	0x3f, r7	; 63
    49b2:	df 91       	pop	r29
    49b4:	cf 91       	pop	r28
    49b6:	1f 91       	pop	r17
    49b8:	0f 91       	pop	r16
    49ba:	ff 90       	pop	r15
    49bc:	ef 90       	pop	r14
    49be:	df 90       	pop	r13
    49c0:	cf 90       	pop	r12
    49c2:	bf 90       	pop	r11
    49c4:	af 90       	pop	r10
    49c6:	9f 90       	pop	r9
    49c8:	8f 90       	pop	r8
    49ca:	7f 90       	pop	r7
    49cc:	08 95       	ret

000049ce <timerSetMode>:
    49ce:	df 92       	push	r13
    49d0:	ef 92       	push	r14
    49d2:	ff 92       	push	r15
    49d4:	0f 93       	push	r16
    49d6:	1f 93       	push	r17
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
    49dc:	8c 01       	movw	r16, r24
    49de:	66 23       	and	r22, r22
    49e0:	41 f0       	breq	.+16     	; 0x49f2 <timerSetMode+0x24>
    49e2:	fc 01       	movw	r30, r24
    49e4:	a5 91       	lpm	r26, Z+
    49e6:	b4 91       	lpm	r27, Z+
    49e8:	1e 96       	adiw	r26, 0x0e	; 14
    49ea:	8c 91       	ld	r24, X
    49ec:	86 17       	cp	r24, r22
    49ee:	09 f4       	brne	.+2      	; 0x49f2 <timerSetMode+0x24>
    49f0:	7a c0       	rjmp	.+244    	; 0x4ae6 <timerSetMode+0x118>
    49f2:	f8 01       	movw	r30, r16
    49f4:	39 96       	adiw	r30, 0x09	; 9
    49f6:	25 91       	lpm	r18, Z+
    49f8:	34 91       	lpm	r19, Z+
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	06 2e       	mov	r0, r22
    4a00:	02 c0       	rjmp	.+4      	; 0x4a06 <timerSetMode+0x38>
    4a02:	88 0f       	add	r24, r24
    4a04:	99 1f       	adc	r25, r25
    4a06:	0a 94       	dec	r0
    4a08:	e2 f7       	brpl	.-8      	; 0x4a02 <timerSetMode+0x34>
    4a0a:	82 23       	and	r24, r18
    4a0c:	93 23       	and	r25, r19
    4a0e:	89 2b       	or	r24, r25
    4a10:	09 f4       	brne	.+2      	; 0x4a14 <timerSetMode+0x46>
    4a12:	66 c0       	rjmp	.+204    	; 0x4ae0 <timerSetMode+0x112>
    4a14:	f8 01       	movw	r30, r16
    4a16:	a5 91       	lpm	r26, Z+
    4a18:	b4 91       	lpm	r27, Z+
    4a1a:	1e 96       	adiw	r26, 0x0e	; 14
    4a1c:	6c 93       	st	X, r22
    4a1e:	ff ed       	ldi	r31, 0xDF	; 223
    4a20:	2f 3f       	cpi	r18, 0xFF	; 255
    4a22:	3f 07       	cpc	r19, r31
    4a24:	11 f4       	brne	.+4      	; 0x4a2a <timerSetMode+0x5c>
    4a26:	d6 2e       	mov	r13, r22
    4a28:	13 c0       	rjmp	.+38     	; 0x4a50 <timerSetMode+0x82>
    4a2a:	88 e8       	ldi	r24, 0x88	; 136
    4a2c:	23 33       	cpi	r18, 0x33	; 51
    4a2e:	38 07       	cpc	r19, r24
    4a30:	31 f4       	brne	.+12     	; 0x4a3e <timerSetMode+0x70>
    4a32:	e6 2f       	mov	r30, r22
    4a34:	f0 e0       	ldi	r31, 0x00	; 0
    4a36:	ec 5d       	subi	r30, 0xDC	; 220
    4a38:	fa 4f       	sbci	r31, 0xFA	; 250
    4a3a:	d4 90       	lpm	r13, Z+
    4a3c:	09 c0       	rjmp	.+18     	; 0x4a50 <timerSetMode+0x82>
    4a3e:	23 33       	cpi	r18, 0x33	; 51
    4a40:	31 05       	cpc	r19, r1
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <timerSetMode+0x78>
    4a44:	4d c0       	rjmp	.+154    	; 0x4ae0 <timerSetMode+0x112>
    4a46:	e6 2f       	mov	r30, r22
    4a48:	f0 e0       	ldi	r31, 0x00	; 0
    4a4a:	ec 5c       	subi	r30, 0xCC	; 204
    4a4c:	fa 4f       	sbci	r31, 0xFA	; 250
    4a4e:	d4 90       	lpm	r13, Z+
    4a50:	ef ef       	ldi	r30, 0xFF	; 255
    4a52:	de 16       	cp	r13, r30
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <timerSetMode+0x8a>
    4a56:	44 c0       	rjmp	.+136    	; 0x4ae0 <timerSetMode+0x112>
    4a58:	c8 01       	movw	r24, r16
    4a5a:	04 96       	adiw	r24, 0x04	; 4
    4a5c:	fc 01       	movw	r30, r24
    4a5e:	a5 91       	lpm	r26, Z+
    4a60:	b4 91       	lpm	r27, Z+
    4a62:	8c 91       	ld	r24, X
    4a64:	88 7f       	andi	r24, 0xF8	; 248
    4a66:	8c 93       	st	X, r24
    4a68:	e8 01       	movw	r28, r16
    4a6a:	2b 96       	adiw	r28, 0x0b	; 11
    4a6c:	ee 24       	eor	r14, r14
    4a6e:	ff 24       	eor	r15, r15
    4a70:	e8 81       	ld	r30, Y
    4a72:	f9 81       	ldd	r31, Y+1	; 0x01
    4a74:	85 91       	lpm	r24, Z+
    4a76:	94 91       	lpm	r25, Z+
    4a78:	89 2b       	or	r24, r25
    4a7a:	99 f0       	breq	.+38     	; 0x4aa2 <timerSetMode+0xd4>
    4a7c:	d0 fe       	sbrs	r13, 0
    4a7e:	04 c0       	rjmp	.+8      	; 0x4a88 <timerSetMode+0xba>
    4a80:	ce 01       	movw	r24, r28
    4a82:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    4a86:	03 c0       	rjmp	.+6      	; 0x4a8e <timerSetMode+0xc0>
    4a88:	ce 01       	movw	r24, r28
    4a8a:	0e 94 a1 18 	call	0x3142	; 0x3142 <__portMaskClear>
    4a8e:	08 94       	sec
    4a90:	e1 1c       	adc	r14, r1
    4a92:	f1 1c       	adc	r15, r1
    4a94:	f4 e0       	ldi	r31, 0x04	; 4
    4a96:	ef 16       	cp	r14, r31
    4a98:	f1 04       	cpc	r15, r1
    4a9a:	19 f0       	breq	.+6      	; 0x4aa2 <timerSetMode+0xd4>
    4a9c:	d6 94       	lsr	r13
    4a9e:	23 96       	adiw	r28, 0x03	; 3
    4aa0:	e7 cf       	rjmp	.-50     	; 0x4a70 <timerSetMode+0xa2>
    4aa2:	08 5f       	subi	r16, 0xF8	; 248
    4aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa6:	f8 01       	movw	r30, r16
    4aa8:	f4 90       	lpm	r15, Z+
    4aaa:	fa 94       	dec	r15
    4aac:	01 5f       	subi	r16, 0xF1	; 241
    4aae:	1f 4f       	sbci	r17, 0xFF	; 255
    4ab0:	f8 01       	movw	r30, r16
    4ab2:	c5 91       	lpm	r28, Z+
    4ab4:	d4 91       	lpm	r29, Z+
    4ab6:	07 51       	subi	r16, 0x17	; 23
    4ab8:	10 40       	sbci	r17, 0x00	; 0
    4aba:	0c c0       	rjmp	.+24     	; 0x4ad4 <timerSetMode+0x106>
    4abc:	8f 2d       	mov	r24, r15
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	24 e0       	ldi	r18, 0x04	; 4
    4ac2:	88 0f       	add	r24, r24
    4ac4:	99 1f       	adc	r25, r25
    4ac6:	2a 95       	dec	r18
    4ac8:	e1 f7       	brne	.-8      	; 0x4ac2 <timerSetMode+0xf4>
    4aca:	8c 0f       	add	r24, r28
    4acc:	9d 1f       	adc	r25, r29
    4ace:	0e 94 c1 22 	call	0x4582	; 0x4582 <compareDetach>
    4ad2:	fa 94       	dec	r15
    4ad4:	f7 fe       	sbrs	r15, 7
    4ad6:	f2 cf       	rjmp	.-28     	; 0x4abc <timerSetMode+0xee>
    4ad8:	c8 01       	movw	r24, r16
    4ada:	0e 94 83 24 	call	0x4906	; 0x4906 <timerInit>
    4ade:	03 c0       	rjmp	.+6      	; 0x4ae6 <timerSetMode+0x118>
    4ae0:	86 ef       	ldi	r24, 0xF6	; 246
    4ae2:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    4ae6:	df 91       	pop	r29
    4ae8:	cf 91       	pop	r28
    4aea:	1f 91       	pop	r17
    4aec:	0f 91       	pop	r16
    4aee:	ff 90       	pop	r15
    4af0:	ef 90       	pop	r14
    4af2:	df 90       	pop	r13
    4af4:	08 95       	ret

00004af6 <initTimers>:
    4af6:	0f 93       	push	r16
    4af8:	1f 93       	push	r17
    4afa:	cf 93       	push	r28
    4afc:	df 93       	push	r29
    4afe:	f8 94       	cli
    4b00:	00 91 0a 02 	lds	r16, 0x020A
    4b04:	c8 ed       	ldi	r28, 0xD8	; 216
    4b06:	d2 e0       	ldi	r29, 0x02	; 2
    4b08:	10 e0       	ldi	r17, 0x00	; 0
    4b0a:	18 c0       	rjmp	.+48     	; 0x4b3c <initTimers+0x46>
    4b0c:	ce 01       	movw	r24, r28
    4b0e:	60 e0       	ldi	r22, 0x00	; 0
    4b10:	70 e0       	ldi	r23, 0x00	; 0
    4b12:	40 e0       	ldi	r20, 0x00	; 0
    4b14:	50 e0       	ldi	r21, 0x00	; 0
    4b16:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <timerOverflowAttach>
    4b1a:	ce 01       	movw	r24, r28
    4b1c:	0e 94 8f 28 	call	0x511e	; 0x511e <timerCaptureDetach>
    4b20:	ce 01       	movw	r24, r28
    4b22:	60 e0       	ldi	r22, 0x00	; 0
    4b24:	0e 94 e7 24 	call	0x49ce	; 0x49ce <timerSetMode>
    4b28:	ce 01       	movw	r24, r28
    4b2a:	04 96       	adiw	r24, 0x04	; 4
    4b2c:	fc 01       	movw	r30, r24
    4b2e:	a5 91       	lpm	r26, Z+
    4b30:	b4 91       	lpm	r27, Z+
    4b32:	8c 91       	ld	r24, X
    4b34:	88 7f       	andi	r24, 0xF8	; 248
    4b36:	8c 93       	st	X, r24
    4b38:	1f 5f       	subi	r17, 0xFF	; 255
    4b3a:	ac 96       	adiw	r28, 0x2c	; 44
    4b3c:	10 17       	cp	r17, r16
    4b3e:	30 f3       	brcs	.-52     	; 0x4b0c <initTimers+0x16>
    4b40:	78 94       	sei
    4b42:	df 91       	pop	r29
    4b44:	cf 91       	pop	r28
    4b46:	1f 91       	pop	r17
    4b48:	0f 91       	pop	r16
    4b4a:	08 95       	ret

00004b4c <compareAttach>:
    4b4c:	6f 92       	push	r6
    4b4e:	7f 92       	push	r7
    4b50:	8f 92       	push	r8
    4b52:	9f 92       	push	r9
    4b54:	af 92       	push	r10
    4b56:	bf 92       	push	r11
    4b58:	cf 92       	push	r12
    4b5a:	df 92       	push	r13
    4b5c:	ef 92       	push	r14
    4b5e:	ff 92       	push	r15
    4b60:	0f 93       	push	r16
    4b62:	1f 93       	push	r17
    4b64:	cf 93       	push	r28
    4b66:	df 93       	push	r29
    4b68:	7c 01       	movw	r14, r24
    4b6a:	5b 01       	movw	r10, r22
    4b6c:	4a 01       	movw	r8, r20
    4b6e:	39 01       	movw	r6, r18
    4b70:	22 e0       	ldi	r18, 0x02	; 2
    4b72:	30 e0       	ldi	r19, 0x00	; 0
    4b74:	e2 0e       	add	r14, r18
    4b76:	f3 1e       	adc	r15, r19
    4b78:	f7 01       	movw	r30, r14
    4b7a:	84 91       	lpm	r24, Z+
    4b7c:	2e ef       	ldi	r18, 0xFE	; 254
    4b7e:	3f ef       	ldi	r19, 0xFF	; 255
    4b80:	e2 0e       	add	r14, r18
    4b82:	f3 1e       	adc	r15, r19
    4b84:	9c e2       	ldi	r25, 0x2C	; 44
    4b86:	89 9f       	mul	r24, r25
    4b88:	e0 01       	movw	r28, r0
    4b8a:	11 24       	eor	r1, r1
    4b8c:	c8 52       	subi	r28, 0x28	; 40
    4b8e:	dd 4f       	sbci	r29, 0xFD	; 253
    4b90:	28 96       	adiw	r28, 0x08	; 8
    4b92:	fe 01       	movw	r30, r28
    4b94:	84 91       	lpm	r24, Z+
    4b96:	28 97       	sbiw	r28, 0x08	; 8
    4b98:	88 23       	and	r24, r24
    4b9a:	69 f1       	breq	.+90     	; 0x4bf6 <compareAttach+0xaa>
    4b9c:	f7 01       	movw	r30, r14
    4b9e:	c5 90       	lpm	r12, Z+
    4ba0:	d4 90       	lpm	r13, Z+
    4ba2:	61 15       	cp	r22, r1
    4ba4:	71 05       	cpc	r23, r1
    4ba6:	41 f0       	breq	.+16     	; 0x4bb8 <compareAttach+0x6c>
    4ba8:	f6 01       	movw	r30, r12
    4baa:	80 81       	ld	r24, Z
    4bac:	91 81       	ldd	r25, Z+1	; 0x01
    4bae:	89 2b       	or	r24, r25
    4bb0:	19 f0       	breq	.+6      	; 0x4bb8 <compareAttach+0x6c>
    4bb2:	8b ef       	ldi	r24, 0xFB	; 251
    4bb4:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    4bb8:	ce 01       	movw	r24, r28
    4bba:	fe 01       	movw	r30, r28
    4bbc:	a5 91       	lpm	r26, Z+
    4bbe:	b4 91       	lpm	r27, Z+
    4bc0:	6d 91       	ld	r22, X+
    4bc2:	7c 91       	ld	r23, X
    4bc4:	0e 94 3c 24 	call	0x4878	; 0x4878 <timerSetPrescaler>
    4bc8:	87 01       	movw	r16, r14
    4bca:	0d 5f       	subi	r16, 0xFD	; 253
    4bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bce:	c8 01       	movw	r24, r16
    4bd0:	0e 94 a1 18 	call	0x3142	; 0x3142 <__portMaskClear>
    4bd4:	c7 01       	movw	r24, r14
    4bd6:	b4 01       	movw	r22, r8
    4bd8:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <compareSetThreshold>
    4bdc:	f6 01       	movw	r30, r12
    4bde:	b1 82       	std	Z+1, r11	; 0x01
    4be0:	a0 82       	st	Z, r10
    4be2:	73 82       	std	Z+3, r7	; 0x03
    4be4:	62 82       	std	Z+2, r6	; 0x02
    4be6:	c7 01       	movw	r24, r14
    4be8:	08 96       	adiw	r24, 0x08	; 8
    4bea:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    4bee:	c8 01       	movw	r24, r16
    4bf0:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    4bf4:	03 c0       	rjmp	.+6      	; 0x4bfc <compareAttach+0xb0>
    4bf6:	8d ef       	ldi	r24, 0xFD	; 253
    4bf8:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    4bfc:	df 91       	pop	r29
    4bfe:	cf 91       	pop	r28
    4c00:	1f 91       	pop	r17
    4c02:	0f 91       	pop	r16
    4c04:	ff 90       	pop	r15
    4c06:	ef 90       	pop	r14
    4c08:	df 90       	pop	r13
    4c0a:	cf 90       	pop	r12
    4c0c:	bf 90       	pop	r11
    4c0e:	af 90       	pop	r10
    4c10:	9f 90       	pop	r9
    4c12:	8f 90       	pop	r8
    4c14:	7f 90       	pop	r7
    4c16:	6f 90       	pop	r6
    4c18:	08 95       	ret

00004c1a <__clockInit>:
    4c1a:	2f 92       	push	r2
    4c1c:	3f 92       	push	r3
    4c1e:	4f 92       	push	r4
    4c20:	5f 92       	push	r5
    4c22:	6f 92       	push	r6
    4c24:	7f 92       	push	r7
    4c26:	8f 92       	push	r8
    4c28:	9f 92       	push	r9
    4c2a:	af 92       	push	r10
    4c2c:	bf 92       	push	r11
    4c2e:	cf 92       	push	r12
    4c30:	df 92       	push	r13
    4c32:	ef 92       	push	r14
    4c34:	ff 92       	push	r15
    4c36:	0f 93       	push	r16
    4c38:	1f 93       	push	r17
    4c3a:	df 93       	push	r29
    4c3c:	cf 93       	push	r28
    4c3e:	cd b7       	in	r28, 0x3d	; 61
    4c40:	de b7       	in	r29, 0x3e	; 62
    4c42:	2e 97       	sbiw	r28, 0x0e	; 14
    4c44:	0f b6       	in	r0, 0x3f	; 63
    4c46:	f8 94       	cli
    4c48:	de bf       	out	0x3e, r29	; 62
    4c4a:	0f be       	out	0x3f, r0	; 63
    4c4c:	cd bf       	out	0x3d, r28	; 61
    4c4e:	10 92 6f 0c 	sts	0x0C6F, r1
    4c52:	10 92 6e 0c 	sts	0x0C6E, r1
    4c56:	b0 90 0a 02 	lds	r11, 0x020A
    4c5a:	ba 94       	dec	r11
    4c5c:	80 91 04 02 	lds	r24, 0x0204
    4c60:	90 91 05 02 	lds	r25, 0x0205
    4c64:	9c 01       	movw	r18, r24
    4c66:	40 e0       	ldi	r20, 0x00	; 0
    4c68:	50 e0       	ldi	r21, 0x00	; 0
    4c6a:	2d 83       	std	Y+5, r18	; 0x05
    4c6c:	3e 83       	std	Y+6, r19	; 0x06
    4c6e:	4f 83       	std	Y+7, r20	; 0x07
    4c70:	58 87       	std	Y+8, r21	; 0x08
    4c72:	ca 01       	movw	r24, r20
    4c74:	b9 01       	movw	r22, r18
    4c76:	2c e0       	ldi	r18, 0x0C	; 12
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e0       	ldi	r20, 0x00	; 0
    4c7c:	50 e0       	ldi	r21, 0x00	; 0
    4c7e:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    4c82:	2b 01       	movw	r4, r22
    4c84:	3c 01       	movw	r6, r24
    4c86:	8c e2       	ldi	r24, 0x2C	; 44
    4c88:	3b 2d       	mov	r19, r11
    4c8a:	38 02       	muls	r19, r24
    4c8c:	10 01       	movw	r2, r0
    4c8e:	11 24       	eor	r1, r1
    4c90:	48 ed       	ldi	r20, 0xD8	; 216
    4c92:	52 e0       	ldi	r21, 0x02	; 2
    4c94:	24 0e       	add	r2, r20
    4c96:	35 1e       	adc	r3, r21
    4c98:	1c 86       	std	Y+12, r1	; 0x0c
    4c9a:	1b 86       	std	Y+11, r1	; 0x0b
    4c9c:	1a 86       	std	Y+10, r1	; 0x0a
    4c9e:	19 86       	std	Y+9, r1	; 0x09
    4ca0:	88 24       	eor	r8, r8
    4ca2:	99 24       	eor	r9, r9
    4ca4:	51 c0       	rjmp	.+162    	; 0x4d48 <__clockInit+0x12e>
    4ca6:	c1 01       	movw	r24, r2
    4ca8:	04 96       	adiw	r24, 0x04	; 4
    4caa:	fc 01       	movw	r30, r24
    4cac:	a5 91       	lpm	r26, Z+
    4cae:	b4 91       	lpm	r27, Z+
    4cb0:	8c 91       	ld	r24, X
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	87 70       	andi	r24, 0x07	; 7
    4cb6:	90 70       	andi	r25, 0x00	; 0
    4cb8:	89 2b       	or	r24, r25
    4cba:	09 f0       	breq	.+2      	; 0x4cbe <__clockInit+0xa4>
    4cbc:	40 c0       	rjmp	.+128    	; 0x4d3e <__clockInit+0x124>
    4cbe:	f8 c0       	rjmp	.+496    	; 0x4eb0 <__clockInit+0x296>
    4cc0:	28 e0       	ldi	r18, 0x08	; 8
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	22 0e       	add	r2, r18
    4cc6:	33 1e       	adc	r3, r19
    4cc8:	f1 01       	movw	r30, r2
    4cca:	84 91       	lpm	r24, Z+
    4ccc:	28 ef       	ldi	r18, 0xF8	; 248
    4cce:	3f ef       	ldi	r19, 0xFF	; 255
    4cd0:	22 0e       	add	r2, r18
    4cd2:	33 1e       	adc	r3, r19
    4cd4:	82 30       	cpi	r24, 0x02	; 2
    4cd6:	98 f1       	brcs	.+102    	; 0x4d3e <__clockInit+0x124>
    4cd8:	4b 85       	ldd	r20, Y+11	; 0x0b
    4cda:	5c 85       	ldd	r21, Y+12	; 0x0c
    4cdc:	4f 3f       	cpi	r20, 0xFF	; 255
    4cde:	51 05       	cpc	r21, r1
    4ce0:	69 f0       	breq	.+26     	; 0x4cfc <__clockInit+0xe2>
    4ce2:	60 f0       	brcs	.+24     	; 0x4cfc <__clockInit+0xe2>
    4ce4:	86 e0       	ldi	r24, 0x06	; 6
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	28 0e       	add	r2, r24
    4cea:	39 1e       	adc	r3, r25
    4cec:	f1 01       	movw	r30, r2
    4cee:	84 91       	lpm	r24, Z+
    4cf0:	2a ef       	ldi	r18, 0xFA	; 250
    4cf2:	3f ef       	ldi	r19, 0xFF	; 255
    4cf4:	22 0e       	add	r2, r18
    4cf6:	33 1e       	adc	r3, r19
    4cf8:	88 23       	and	r24, r24
    4cfa:	09 f1       	breq	.+66     	; 0x4d3e <__clockInit+0x124>
    4cfc:	c1 01       	movw	r24, r2
    4cfe:	6c e0       	ldi	r22, 0x0C	; 12
    4d00:	70 e0       	ldi	r23, 0x00	; 0
    4d02:	0e 94 b5 23 	call	0x476a	; 0x476a <timerGetBestPrescaler>
    4d06:	6c 01       	movw	r12, r24
    4d08:	9c 01       	movw	r18, r24
    4d0a:	40 e0       	ldi	r20, 0x00	; 0
    4d0c:	50 e0       	ldi	r21, 0x00	; 0
    4d0e:	c3 01       	movw	r24, r6
    4d10:	b2 01       	movw	r22, r4
    4d12:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    4d16:	79 01       	movw	r14, r18
    4d18:	8a 01       	movw	r16, r20
    4d1a:	81 14       	cp	r8, r1
    4d1c:	91 04       	cpc	r9, r1
    4d1e:	51 f0       	breq	.+20     	; 0x4d34 <__clockInit+0x11a>
    4d20:	4b 85       	ldd	r20, Y+11	; 0x0b
    4d22:	5c 85       	ldd	r21, Y+12	; 0x0c
    4d24:	ca 01       	movw	r24, r20
    4d26:	a0 e0       	ldi	r26, 0x00	; 0
    4d28:	b0 e0       	ldi	r27, 0x00	; 0
    4d2a:	8e 15       	cp	r24, r14
    4d2c:	9f 05       	cpc	r25, r15
    4d2e:	a0 07       	cpc	r26, r16
    4d30:	b1 07       	cpc	r27, r17
    4d32:	28 f4       	brcc	.+10     	; 0x4d3e <__clockInit+0x124>
    4d34:	fc 86       	std	Y+12, r15	; 0x0c
    4d36:	eb 86       	std	Y+11, r14	; 0x0b
    4d38:	da 86       	std	Y+10, r13	; 0x0a
    4d3a:	c9 86       	std	Y+9, r12	; 0x09
    4d3c:	41 01       	movw	r8, r2
    4d3e:	ba 94       	dec	r11
    4d40:	84 ed       	ldi	r24, 0xD4	; 212
    4d42:	9f ef       	ldi	r25, 0xFF	; 255
    4d44:	28 0e       	add	r2, r24
    4d46:	39 1e       	adc	r3, r25
    4d48:	b7 fe       	sbrs	r11, 7
    4d4a:	ad cf       	rjmp	.-166    	; 0x4ca6 <__clockInit+0x8c>
    4d4c:	81 14       	cp	r8, r1
    4d4e:	91 04       	cpc	r9, r1
    4d50:	09 f4       	brne	.+2      	; 0x4d54 <__clockInit+0x13a>
    4d52:	a5 c0       	rjmp	.+330    	; 0x4e9e <__clockInit+0x284>
    4d54:	a6 e0       	ldi	r26, 0x06	; 6
    4d56:	b0 e0       	ldi	r27, 0x00	; 0
    4d58:	8a 0e       	add	r8, r26
    4d5a:	9b 1e       	adc	r9, r27
    4d5c:	f4 01       	movw	r30, r8
    4d5e:	84 91       	lpm	r24, Z+
    4d60:	2a ef       	ldi	r18, 0xFA	; 250
    4d62:	3f ef       	ldi	r19, 0xFF	; 255
    4d64:	82 0e       	add	r8, r18
    4d66:	93 1e       	adc	r9, r19
    4d68:	88 23       	and	r24, r24
    4d6a:	31 f4       	brne	.+12     	; 0x4d78 <__clockInit+0x15e>
    4d6c:	5f ef       	ldi	r21, 0xFF	; 255
    4d6e:	a5 2e       	mov	r10, r21
    4d70:	b1 2c       	mov	r11, r1
    4d72:	c1 2c       	mov	r12, r1
    4d74:	d1 2c       	mov	r13, r1
    4d76:	06 c0       	rjmp	.+12     	; 0x4d84 <__clockInit+0x16a>
    4d78:	4f ef       	ldi	r20, 0xFF	; 255
    4d7a:	a4 2e       	mov	r10, r20
    4d7c:	4f ef       	ldi	r20, 0xFF	; 255
    4d7e:	b4 2e       	mov	r11, r20
    4d80:	c1 2c       	mov	r12, r1
    4d82:	d1 2c       	mov	r13, r1
    4d84:	a9 85       	ldd	r26, Y+9	; 0x09
    4d86:	ba 85       	ldd	r27, Y+10	; 0x0a
    4d88:	cd 01       	movw	r24, r26
    4d8a:	a0 e0       	ldi	r26, 0x00	; 0
    4d8c:	b0 e0       	ldi	r27, 0x00	; 0
    4d8e:	89 83       	std	Y+1, r24	; 0x01
    4d90:	9a 83       	std	Y+2, r25	; 0x02
    4d92:	ab 83       	std	Y+3, r26	; 0x03
    4d94:	bc 83       	std	Y+4, r27	; 0x04
    4d96:	6d 81       	ldd	r22, Y+5	; 0x05
    4d98:	7e 81       	ldd	r23, Y+6	; 0x06
    4d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d9c:	98 85       	ldd	r25, Y+8	; 0x08
    4d9e:	29 81       	ldd	r18, Y+1	; 0x01
    4da0:	3a 81       	ldd	r19, Y+2	; 0x02
    4da2:	4b 81       	ldd	r20, Y+3	; 0x03
    4da4:	5c 81       	ldd	r21, Y+4	; 0x04
    4da6:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    4daa:	79 01       	movw	r14, r18
    4dac:	8a 01       	movw	r16, r20
    4dae:	08 94       	sec
    4db0:	e1 1c       	adc	r14, r1
    4db2:	f1 1c       	adc	r15, r1
    4db4:	01 1d       	adc	r16, r1
    4db6:	11 1d       	adc	r17, r1
    4db8:	3c e0       	ldi	r19, 0x0C	; 12
    4dba:	63 2e       	mov	r6, r19
    4dbc:	71 2c       	mov	r7, r1
    4dbe:	eb 85       	ldd	r30, Y+11	; 0x0b
    4dc0:	fc 85       	ldd	r31, Y+12	; 0x0c
    4dc2:	1f 01       	movw	r2, r30
    4dc4:	44 24       	eor	r4, r4
    4dc6:	55 24       	eor	r5, r5
    4dc8:	d2 01       	movw	r26, r4
    4dca:	c1 01       	movw	r24, r2
    4dcc:	8e 0d       	add	r24, r14
    4dce:	9f 1d       	adc	r25, r15
    4dd0:	a0 1f       	adc	r26, r16
    4dd2:	b1 1f       	adc	r27, r17
    4dd4:	8a 15       	cp	r24, r10
    4dd6:	9b 05       	cpc	r25, r11
    4dd8:	ac 05       	cpc	r26, r12
    4dda:	bd 05       	cpc	r27, r13
    4ddc:	80 f5       	brcc	.+96     	; 0x4e3e <__clockInit+0x224>
    4dde:	93 01       	movw	r18, r6
    4de0:	2f 5f       	subi	r18, 0xFF	; 255
    4de2:	3f 4f       	sbci	r19, 0xFF	; 255
    4de4:	3e 87       	std	Y+14, r19	; 0x0e
    4de6:	2d 87       	std	Y+13, r18	; 0x0d
    4de8:	c4 01       	movw	r24, r8
    4dea:	b9 01       	movw	r22, r18
    4dec:	0e 94 b5 23 	call	0x476a	; 0x476a <timerGetBestPrescaler>
    4df0:	49 85       	ldd	r20, Y+9	; 0x09
    4df2:	5a 85       	ldd	r21, Y+10	; 0x0a
    4df4:	84 17       	cp	r24, r20
    4df6:	95 07       	cpc	r25, r21
    4df8:	11 f5       	brne	.+68     	; 0x4e3e <__clockInit+0x224>
    4dfa:	ad 85       	ldd	r26, Y+13	; 0x0d
    4dfc:	be 85       	ldd	r27, Y+14	; 0x0e
    4dfe:	bd 01       	movw	r22, r26
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	2d 81       	ldd	r18, Y+5	; 0x05
    4e06:	3e 81       	ldd	r19, Y+6	; 0x06
    4e08:	4f 81       	ldd	r20, Y+7	; 0x07
    4e0a:	58 85       	ldd	r21, Y+8	; 0x08
    4e0c:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    4e10:	29 81       	ldd	r18, Y+1	; 0x01
    4e12:	3a 81       	ldd	r19, Y+2	; 0x02
    4e14:	4b 81       	ldd	r20, Y+3	; 0x03
    4e16:	5c 81       	ldd	r21, Y+4	; 0x04
    4e18:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    4e1c:	c9 01       	movw	r24, r18
    4e1e:	da 01       	movw	r26, r20
    4e20:	a8 16       	cp	r10, r24
    4e22:	b9 06       	cpc	r11, r25
    4e24:	ca 06       	cpc	r12, r26
    4e26:	db 06       	cpc	r13, r27
    4e28:	50 f0       	brcs	.+20     	; 0x4e3e <__clockInit+0x224>
    4e2a:	28 16       	cp	r2, r24
    4e2c:	39 06       	cpc	r3, r25
    4e2e:	4a 06       	cpc	r4, r26
    4e30:	5b 06       	cpc	r5, r27
    4e32:	28 f4       	brcc	.+10     	; 0x4e3e <__clockInit+0x224>
    4e34:	3c 87       	std	Y+12, r19	; 0x0c
    4e36:	2b 87       	std	Y+11, r18	; 0x0b
    4e38:	6d 84       	ldd	r6, Y+13	; 0x0d
    4e3a:	7e 84       	ldd	r7, Y+14	; 0x0e
    4e3c:	c0 cf       	rjmp	.-128    	; 0x4dbe <__clockInit+0x1a4>
    4e3e:	90 92 6f 0c 	sts	0x0C6F, r9
    4e42:	80 92 6e 0c 	sts	0x0C6E, r8
    4e46:	b3 01       	movw	r22, r6
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	28 ee       	ldi	r18, 0xE8	; 232
    4e4e:	33 e0       	ldi	r19, 0x03	; 3
    4e50:	40 e0       	ldi	r20, 0x00	; 0
    4e52:	50 e0       	ldi	r21, 0x00	; 0
    4e54:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    4e58:	60 93 b8 0b 	sts	0x0BB8, r22
    4e5c:	70 93 b9 0b 	sts	0x0BB9, r23
    4e60:	80 93 ba 0b 	sts	0x0BBA, r24
    4e64:	90 93 bb 0b 	sts	0x0BBB, r25
    4e68:	c4 01       	movw	r24, r8
    4e6a:	69 85       	ldd	r22, Y+9	; 0x09
    4e6c:	7a 85       	ldd	r23, Y+10	; 0x0a
    4e6e:	0e 94 3c 24 	call	0x4878	; 0x4878 <timerSetPrescaler>
    4e72:	80 91 6e 0c 	lds	r24, 0x0C6E
    4e76:	90 91 6f 0c 	lds	r25, 0x0C6F
    4e7a:	64 e0       	ldi	r22, 0x04	; 4
    4e7c:	0e 94 e7 24 	call	0x49ce	; 0x49ce <timerSetMode>
    4e80:	e0 91 6e 0c 	lds	r30, 0x0C6E
    4e84:	f0 91 6f 0c 	lds	r31, 0x0C6F
    4e88:	77 96       	adiw	r30, 0x17	; 23
    4e8a:	85 91       	lpm	r24, Z+
    4e8c:	94 91       	lpm	r25, Z+
    4e8e:	6b e5       	ldi	r22, 0x5B	; 91
    4e90:	79 e2       	ldi	r23, 0x29	; 41
    4e92:	4b 85       	ldd	r20, Y+11	; 0x0b
    4e94:	5c 85       	ldd	r21, Y+12	; 0x0c
    4e96:	20 e0       	ldi	r18, 0x00	; 0
    4e98:	30 e0       	ldi	r19, 0x00	; 0
    4e9a:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <compareAttach>
    4e9e:	80 91 69 0c 	lds	r24, 0x0C69
    4ea2:	88 23       	and	r24, r24
    4ea4:	61 f0       	breq	.+24     	; 0x4ebe <__clockInit+0x2a4>
    4ea6:	10 92 69 0c 	sts	0x0C69, r1
    4eaa:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    4eae:	07 c0       	rjmp	.+14     	; 0x4ebe <__clockInit+0x2a4>
    4eb0:	f1 01       	movw	r30, r2
    4eb2:	39 96       	adiw	r30, 0x09	; 9
    4eb4:	85 91       	lpm	r24, Z+
    4eb6:	94 91       	lpm	r25, Z+
    4eb8:	84 fd       	sbrc	r24, 4
    4eba:	02 cf       	rjmp	.-508    	; 0x4cc0 <__clockInit+0xa6>
    4ebc:	40 cf       	rjmp	.-384    	; 0x4d3e <__clockInit+0x124>
    4ebe:	2e 96       	adiw	r28, 0x0e	; 14
    4ec0:	0f b6       	in	r0, 0x3f	; 63
    4ec2:	f8 94       	cli
    4ec4:	de bf       	out	0x3e, r29	; 62
    4ec6:	0f be       	out	0x3f, r0	; 63
    4ec8:	cd bf       	out	0x3d, r28	; 61
    4eca:	cf 91       	pop	r28
    4ecc:	df 91       	pop	r29
    4ece:	1f 91       	pop	r17
    4ed0:	0f 91       	pop	r16
    4ed2:	ff 90       	pop	r15
    4ed4:	ef 90       	pop	r14
    4ed6:	df 90       	pop	r13
    4ed8:	cf 90       	pop	r12
    4eda:	bf 90       	pop	r11
    4edc:	af 90       	pop	r10
    4ede:	9f 90       	pop	r9
    4ee0:	8f 90       	pop	r8
    4ee2:	7f 90       	pop	r7
    4ee4:	6f 90       	pop	r6
    4ee6:	5f 90       	pop	r5
    4ee8:	4f 90       	pop	r4
    4eea:	3f 90       	pop	r3
    4eec:	2f 90       	pop	r2
    4eee:	08 95       	ret

00004ef0 <clockHasElapsedGetOverflow>:
    4ef0:	8f 92       	push	r8
    4ef2:	9f 92       	push	r9
    4ef4:	af 92       	push	r10
    4ef6:	bf 92       	push	r11
    4ef8:	cf 92       	push	r12
    4efa:	df 92       	push	r13
    4efc:	ef 92       	push	r14
    4efe:	ff 92       	push	r15
    4f00:	0f 93       	push	r16
    4f02:	1f 93       	push	r17
    4f04:	cf 93       	push	r28
    4f06:	df 93       	push	r29
    4f08:	6b 01       	movw	r12, r22
    4f0a:	7c 01       	movw	r14, r24
    4f0c:	49 01       	movw	r8, r18
    4f0e:	5a 01       	movw	r10, r20
    4f10:	e8 01       	movw	r28, r16
    4f12:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <clockGetus>
    4f16:	6c 19       	sub	r22, r12
    4f18:	7d 09       	sbc	r23, r13
    4f1a:	8e 09       	sbc	r24, r14
    4f1c:	9f 09       	sbc	r25, r15
    4f1e:	86 16       	cp	r8, r22
    4f20:	97 06       	cpc	r9, r23
    4f22:	a8 06       	cpc	r10, r24
    4f24:	b9 06       	cpc	r11, r25
    4f26:	50 f4       	brcc	.+20     	; 0x4f3c <clockHasElapsedGetOverflow+0x4c>
    4f28:	68 19       	sub	r22, r8
    4f2a:	79 09       	sbc	r23, r9
    4f2c:	8a 09       	sbc	r24, r10
    4f2e:	9b 09       	sbc	r25, r11
    4f30:	68 83       	st	Y, r22
    4f32:	79 83       	std	Y+1, r23	; 0x01
    4f34:	8a 83       	std	Y+2, r24	; 0x02
    4f36:	9b 83       	std	Y+3, r25	; 0x03
    4f38:	8f ef       	ldi	r24, 0xFF	; 255
    4f3a:	09 c0       	rjmp	.+18     	; 0x4f4e <clockHasElapsedGetOverflow+0x5e>
    4f3c:	86 1a       	sub	r8, r22
    4f3e:	97 0a       	sbc	r9, r23
    4f40:	a8 0a       	sbc	r10, r24
    4f42:	b9 0a       	sbc	r11, r25
    4f44:	88 82       	st	Y, r8
    4f46:	99 82       	std	Y+1, r9	; 0x01
    4f48:	aa 82       	std	Y+2, r10	; 0x02
    4f4a:	bb 82       	std	Y+3, r11	; 0x03
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	df 91       	pop	r29
    4f50:	cf 91       	pop	r28
    4f52:	1f 91       	pop	r17
    4f54:	0f 91       	pop	r16
    4f56:	ff 90       	pop	r15
    4f58:	ef 90       	pop	r14
    4f5a:	df 90       	pop	r13
    4f5c:	cf 90       	pop	r12
    4f5e:	bf 90       	pop	r11
    4f60:	af 90       	pop	r10
    4f62:	9f 90       	pop	r9
    4f64:	8f 90       	pop	r8
    4f66:	08 95       	ret

00004f68 <clockWaitus>:
    4f68:	af 92       	push	r10
    4f6a:	bf 92       	push	r11
    4f6c:	cf 92       	push	r12
    4f6e:	df 92       	push	r13
    4f70:	ef 92       	push	r14
    4f72:	ff 92       	push	r15
    4f74:	0f 93       	push	r16
    4f76:	1f 93       	push	r17
    4f78:	5b 01       	movw	r10, r22
    4f7a:	6c 01       	movw	r12, r24
    4f7c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <clockGetus>
    4f80:	7b 01       	movw	r14, r22
    4f82:	8c 01       	movw	r16, r24
    4f84:	01 c0       	rjmp	.+2      	; 0x4f88 <clockWaitus+0x20>
    4f86:	00 00       	nop
    4f88:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <clockGetus>
    4f8c:	6e 19       	sub	r22, r14
    4f8e:	7f 09       	sbc	r23, r15
    4f90:	80 0b       	sbc	r24, r16
    4f92:	91 0b       	sbc	r25, r17
    4f94:	6a 15       	cp	r22, r10
    4f96:	7b 05       	cpc	r23, r11
    4f98:	8c 05       	cpc	r24, r12
    4f9a:	9d 05       	cpc	r25, r13
    4f9c:	a0 f3       	brcs	.-24     	; 0x4f86 <clockWaitus+0x1e>
    4f9e:	1f 91       	pop	r17
    4fa0:	0f 91       	pop	r16
    4fa2:	ff 90       	pop	r15
    4fa4:	ef 90       	pop	r14
    4fa6:	df 90       	pop	r13
    4fa8:	cf 90       	pop	r12
    4faa:	bf 90       	pop	r11
    4fac:	af 90       	pop	r10
    4fae:	08 95       	ret

00004fb0 <clockWaitms>:
    4fb0:	28 ee       	ldi	r18, 0xE8	; 232
    4fb2:	33 e0       	ldi	r19, 0x03	; 3
    4fb4:	40 e0       	ldi	r20, 0x00	; 0
    4fb6:	50 e0       	ldi	r21, 0x00	; 0
    4fb8:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    4fbc:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <clockWaitus>
    4fc0:	08 95       	ret

00004fc2 <delay_ms>:
    4fc2:	ef 92       	push	r14
    4fc4:	ff 92       	push	r15
    4fc6:	0f 93       	push	r16
    4fc8:	1f 93       	push	r17
    4fca:	7b 01       	movw	r14, r22
    4fcc:	8c 01       	movw	r16, r24
    4fce:	80 91 6e 0c 	lds	r24, 0x0C6E
    4fd2:	90 91 6f 0c 	lds	r25, 0x0C6F
    4fd6:	89 2b       	or	r24, r25
    4fd8:	29 f0       	breq	.+10     	; 0x4fe4 <delay_ms+0x22>
    4fda:	c8 01       	movw	r24, r16
    4fdc:	b7 01       	movw	r22, r14
    4fde:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <clockWaitms>
    4fe2:	0c c0       	rjmp	.+24     	; 0x4ffc <delay_ms+0x3a>
    4fe4:	20 91 04 02 	lds	r18, 0x0204
    4fe8:	30 91 05 02 	lds	r19, 0x0205
    4fec:	40 e0       	ldi	r20, 0x00	; 0
    4fee:	50 e0       	ldi	r21, 0x00	; 0
    4ff0:	c8 01       	movw	r24, r16
    4ff2:	b7 01       	movw	r22, r14
    4ff4:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    4ff8:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <delay_cycles>
    4ffc:	1f 91       	pop	r17
    4ffe:	0f 91       	pop	r16
    5000:	ff 90       	pop	r15
    5002:	ef 90       	pop	r14
    5004:	08 95       	ret

00005006 <delay_us>:
    5006:	ef 92       	push	r14
    5008:	ff 92       	push	r15
    500a:	0f 93       	push	r16
    500c:	1f 93       	push	r17
    500e:	7b 01       	movw	r14, r22
    5010:	8c 01       	movw	r16, r24
    5012:	80 91 6e 0c 	lds	r24, 0x0C6E
    5016:	90 91 6f 0c 	lds	r25, 0x0C6F
    501a:	89 2b       	or	r24, r25
    501c:	59 f0       	breq	.+22     	; 0x5034 <delay_us+0x2e>
    501e:	85 e6       	ldi	r24, 0x65	; 101
    5020:	e8 16       	cp	r14, r24
    5022:	f1 04       	cpc	r15, r1
    5024:	01 05       	cpc	r16, r1
    5026:	11 05       	cpc	r17, r1
    5028:	28 f0       	brcs	.+10     	; 0x5034 <delay_us+0x2e>
    502a:	c8 01       	movw	r24, r16
    502c:	b7 01       	movw	r22, r14
    502e:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <clockWaitus>
    5032:	14 c0       	rjmp	.+40     	; 0x505c <delay_us+0x56>
    5034:	20 91 04 02 	lds	r18, 0x0204
    5038:	30 91 05 02 	lds	r19, 0x0205
    503c:	40 e0       	ldi	r20, 0x00	; 0
    503e:	50 e0       	ldi	r21, 0x00	; 0
    5040:	c8 01       	movw	r24, r16
    5042:	b7 01       	movw	r22, r14
    5044:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    5048:	28 ee       	ldi	r18, 0xE8	; 232
    504a:	33 e0       	ldi	r19, 0x03	; 3
    504c:	40 e0       	ldi	r20, 0x00	; 0
    504e:	50 e0       	ldi	r21, 0x00	; 0
    5050:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    5054:	ca 01       	movw	r24, r20
    5056:	b9 01       	movw	r22, r18
    5058:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <delay_cycles>
    505c:	1f 91       	pop	r17
    505e:	0f 91       	pop	r16
    5060:	ff 90       	pop	r15
    5062:	ef 90       	pop	r14
    5064:	08 95       	ret

00005066 <clockHasElapsed>:
    5066:	af 92       	push	r10
    5068:	bf 92       	push	r11
    506a:	cf 92       	push	r12
    506c:	df 92       	push	r13
    506e:	ef 92       	push	r14
    5070:	ff 92       	push	r15
    5072:	0f 93       	push	r16
    5074:	1f 93       	push	r17
    5076:	7b 01       	movw	r14, r22
    5078:	8c 01       	movw	r16, r24
    507a:	59 01       	movw	r10, r18
    507c:	6a 01       	movw	r12, r20
    507e:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <clockGetus>
    5082:	6e 19       	sub	r22, r14
    5084:	7f 09       	sbc	r23, r15
    5086:	80 0b       	sbc	r24, r16
    5088:	91 0b       	sbc	r25, r17
    508a:	6a 15       	cp	r22, r10
    508c:	7b 05       	cpc	r23, r11
    508e:	8c 05       	cpc	r24, r12
    5090:	9d 05       	cpc	r25, r13
    5092:	10 f4       	brcc	.+4      	; 0x5098 <clockHasElapsed+0x32>
    5094:	80 e0       	ldi	r24, 0x00	; 0
    5096:	01 c0       	rjmp	.+2      	; 0x509a <clockHasElapsed+0x34>
    5098:	8f ef       	ldi	r24, 0xFF	; 255
    509a:	1f 91       	pop	r17
    509c:	0f 91       	pop	r16
    509e:	ff 90       	pop	r15
    50a0:	ef 90       	pop	r14
    50a2:	df 90       	pop	r13
    50a4:	cf 90       	pop	r12
    50a6:	bf 90       	pop	r11
    50a8:	af 90       	pop	r10
    50aa:	08 95       	ret

000050ac <timerGetTicks>:
    50ac:	0f 93       	push	r16
    50ae:	1f 93       	push	r17
    50b0:	df 93       	push	r29
    50b2:	cf 93       	push	r28
    50b4:	00 d0       	rcall	.+0      	; 0x50b6 <timerGetTicks+0xa>
    50b6:	00 d0       	rcall	.+0      	; 0x50b8 <timerGetTicks+0xc>
    50b8:	00 d0       	rcall	.+0      	; 0x50ba <timerGetTicks+0xe>
    50ba:	cd b7       	in	r28, 0x3d	; 61
    50bc:	de b7       	in	r29, 0x3e	; 62
    50be:	8c 01       	movw	r16, r24
    50c0:	be 01       	movw	r22, r28
    50c2:	6d 5f       	subi	r22, 0xFD	; 253
    50c4:	7f 4f       	sbci	r23, 0xFF	; 255
    50c6:	ae 01       	movw	r20, r28
    50c8:	4f 5f       	subi	r20, 0xFF	; 255
    50ca:	5f 4f       	sbci	r21, 0xFF	; 255
    50cc:	0e 94 3f 21 	call	0x427e	; 0x427e <__timerRead>
    50d0:	c8 01       	movw	r24, r16
    50d2:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <timerGetTOP>
    50d6:	a0 e0       	ldi	r26, 0x00	; 0
    50d8:	b0 e0       	ldi	r27, 0x00	; 0
    50da:	01 96       	adiw	r24, 0x01	; 1
    50dc:	a1 1d       	adc	r26, r1
    50de:	b1 1d       	adc	r27, r1
    50e0:	2b 81       	ldd	r18, Y+3	; 0x03
    50e2:	3c 81       	ldd	r19, Y+4	; 0x04
    50e4:	4d 81       	ldd	r20, Y+5	; 0x05
    50e6:	5e 81       	ldd	r21, Y+6	; 0x06
    50e8:	bc 01       	movw	r22, r24
    50ea:	cd 01       	movw	r24, r26
    50ec:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    50f0:	9b 01       	movw	r18, r22
    50f2:	ac 01       	movw	r20, r24
    50f4:	89 81       	ldd	r24, Y+1	; 0x01
    50f6:	9a 81       	ldd	r25, Y+2	; 0x02
    50f8:	a0 e0       	ldi	r26, 0x00	; 0
    50fa:	b0 e0       	ldi	r27, 0x00	; 0
    50fc:	28 0f       	add	r18, r24
    50fe:	39 1f       	adc	r19, r25
    5100:	4a 1f       	adc	r20, r26
    5102:	5b 1f       	adc	r21, r27
    5104:	b9 01       	movw	r22, r18
    5106:	ca 01       	movw	r24, r20
    5108:	26 96       	adiw	r28, 0x06	; 6
    510a:	0f b6       	in	r0, 0x3f	; 63
    510c:	f8 94       	cli
    510e:	de bf       	out	0x3e, r29	; 62
    5110:	0f be       	out	0x3f, r0	; 63
    5112:	cd bf       	out	0x3d, r28	; 61
    5114:	cf 91       	pop	r28
    5116:	df 91       	pop	r29
    5118:	1f 91       	pop	r17
    511a:	0f 91       	pop	r16
    511c:	08 95       	ret

0000511e <timerCaptureDetach>:
    511e:	ef 92       	push	r14
    5120:	ff 92       	push	r15
    5122:	0f 93       	push	r16
    5124:	1f 93       	push	r17
    5126:	8c 01       	movw	r16, r24
    5128:	fc 01       	movw	r30, r24
    512a:	e5 90       	lpm	r14, Z+
    512c:	f4 90       	lpm	r15, Z+
    512e:	81 96       	adiw	r24, 0x21	; 33
    5130:	0e 94 a1 18 	call	0x3142	; 0x3142 <__portMaskClear>
    5134:	c8 01       	movw	r24, r16
    5136:	84 96       	adiw	r24, 0x24	; 36
    5138:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    513c:	f7 01       	movw	r30, r14
    513e:	13 86       	std	Z+11, r1	; 0x0b
    5140:	12 86       	std	Z+10, r1	; 0x0a
    5142:	1f 91       	pop	r17
    5144:	0f 91       	pop	r16
    5146:	ff 90       	pop	r15
    5148:	ef 90       	pop	r14
    514a:	08 95       	ret

0000514c <timerCaptureAttach>:
    514c:	af 92       	push	r10
    514e:	bf 92       	push	r11
    5150:	cf 92       	push	r12
    5152:	df 92       	push	r13
    5154:	ef 92       	push	r14
    5156:	ff 92       	push	r15
    5158:	0f 93       	push	r16
    515a:	1f 93       	push	r17
    515c:	cf 93       	push	r28
    515e:	df 93       	push	r29
    5160:	8c 01       	movw	r16, r24
    5162:	7b 01       	movw	r14, r22
    5164:	6a 01       	movw	r12, r20
    5166:	b2 2e       	mov	r11, r18
    5168:	fc 01       	movw	r30, r24
    516a:	c5 91       	lpm	r28, Z+
    516c:	d4 91       	lpm	r29, Z+
    516e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5170:	9b 85       	ldd	r25, Y+11	; 0x0b
    5172:	89 2b       	or	r24, r25
    5174:	19 f0       	breq	.+6      	; 0x517c <timerCaptureAttach+0x30>
    5176:	8a ee       	ldi	r24, 0xEA	; 234
    5178:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    517c:	af b6       	in	r10, 0x3f	; 63
    517e:	f8 94       	cli
    5180:	fb 86       	std	Y+11, r15	; 0x0b
    5182:	ea 86       	std	Y+10, r14	; 0x0a
    5184:	dd 86       	std	Y+13, r13	; 0x0d
    5186:	cc 86       	std	Y+12, r12	; 0x0c
    5188:	c8 01       	movw	r24, r16
    518a:	87 96       	adiw	r24, 0x27	; 39
    518c:	bb 20       	and	r11, r11
    518e:	19 f0       	breq	.+6      	; 0x5196 <timerCaptureAttach+0x4a>
    5190:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    5194:	02 c0       	rjmp	.+4      	; 0x519a <timerCaptureAttach+0x4e>
    5196:	0e 94 a1 18 	call	0x3142	; 0x3142 <__portMaskClear>
    519a:	c8 01       	movw	r24, r16
    519c:	84 96       	adiw	r24, 0x24	; 36
    519e:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    51a2:	c8 01       	movw	r24, r16
    51a4:	81 96       	adiw	r24, 0x21	; 33
    51a6:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    51aa:	af be       	out	0x3f, r10	; 63
    51ac:	df 91       	pop	r29
    51ae:	cf 91       	pop	r28
    51b0:	1f 91       	pop	r17
    51b2:	0f 91       	pop	r16
    51b4:	ff 90       	pop	r15
    51b6:	ef 90       	pop	r14
    51b8:	df 90       	pop	r13
    51ba:	cf 90       	pop	r12
    51bc:	bf 90       	pop	r11
    51be:	af 90       	pop	r10
    51c0:	08 95       	ret

000051c2 <compareIsInUse>:
    51c2:	9c 01       	movw	r18, r24
    51c4:	fc 01       	movw	r30, r24
    51c6:	a5 91       	lpm	r26, Z+
    51c8:	b4 91       	lpm	r27, Z+
    51ca:	8d 91       	ld	r24, X+
    51cc:	9c 91       	ld	r25, X
    51ce:	89 2b       	or	r24, r25
    51d0:	11 f5       	brne	.+68     	; 0x5216 <compareIsInUse+0x54>
    51d2:	2e 5f       	subi	r18, 0xFE	; 254
    51d4:	3f 4f       	sbci	r19, 0xFF	; 255
    51d6:	f9 01       	movw	r30, r18
    51d8:	94 91       	lpm	r25, Z+
    51da:	22 50       	subi	r18, 0x02	; 2
    51dc:	30 40       	sbci	r19, 0x00	; 0
    51de:	8c e2       	ldi	r24, 0x2C	; 44
    51e0:	98 9f       	mul	r25, r24
    51e2:	b0 01       	movw	r22, r0
    51e4:	11 24       	eor	r1, r1
    51e6:	68 52       	subi	r22, 0x28	; 40
    51e8:	7d 4f       	sbci	r23, 0xFD	; 253
    51ea:	ab 01       	movw	r20, r22
    51ec:	49 5e       	subi	r20, 0xE9	; 233
    51ee:	5f 4f       	sbci	r21, 0xFF	; 255
    51f0:	fa 01       	movw	r30, r20
    51f2:	85 91       	lpm	r24, Z+
    51f4:	94 91       	lpm	r25, Z+
    51f6:	28 17       	cp	r18, r24
    51f8:	39 07       	cpc	r19, r25
    51fa:	79 f4       	brne	.+30     	; 0x521a <compareIsInUse+0x58>
    51fc:	fb 01       	movw	r30, r22
    51fe:	a5 91       	lpm	r26, Z+
    5200:	b4 91       	lpm	r27, Z+
    5202:	1e 96       	adiw	r26, 0x0e	; 14
    5204:	8c 91       	ld	r24, X
    5206:	84 30       	cpi	r24, 0x04	; 4
    5208:	31 f0       	breq	.+12     	; 0x5216 <compareIsInUse+0x54>
    520a:	89 30       	cpi	r24, 0x09	; 9
    520c:	21 f0       	breq	.+8      	; 0x5216 <compareIsInUse+0x54>
    520e:	8b 30       	cpi	r24, 0x0B	; 11
    5210:	11 f0       	breq	.+4      	; 0x5216 <compareIsInUse+0x54>
    5212:	8f 30       	cpi	r24, 0x0F	; 15
    5214:	11 f4       	brne	.+4      	; 0x521a <compareIsInUse+0x58>
    5216:	8f ef       	ldi	r24, 0xFF	; 255
    5218:	08 95       	ret
    521a:	80 e0       	ldi	r24, 0x00	; 0
    521c:	08 95       	ret

0000521e <compareFromIOPin>:
    521e:	bf 92       	push	r11
    5220:	cf 92       	push	r12
    5222:	df 92       	push	r13
    5224:	ef 92       	push	r14
    5226:	ff 92       	push	r15
    5228:	0f 93       	push	r16
    522a:	1f 93       	push	r17
    522c:	cf 93       	push	r28
    522e:	df 93       	push	r29
    5230:	6c 01       	movw	r12, r24
    5232:	b0 90 0a 02 	lds	r11, 0x020A
    5236:	28 ed       	ldi	r18, 0xD8	; 216
    5238:	32 e0       	ldi	r19, 0x02	; 2
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	c0 e0       	ldi	r28, 0x00	; 0
    523e:	d0 e0       	ldi	r29, 0x00	; 0
    5240:	2d c0       	rjmp	.+90     	; 0x529c <compareFromIOPin+0x7e>
    5242:	28 5f       	subi	r18, 0xF8	; 248
    5244:	3f 4f       	sbci	r19, 0xFF	; 255
    5246:	f9 01       	movw	r30, r18
    5248:	e4 90       	lpm	r14, Z+
    524a:	28 50       	subi	r18, 0x08	; 8
    524c:	30 40       	sbci	r19, 0x00	; 0
    524e:	f9 01       	movw	r30, r18
    5250:	77 96       	adiw	r30, 0x17	; 23
    5252:	2a 5f       	subi	r18, 0xFA	; 250
    5254:	3f 4f       	sbci	r19, 0xFF	; 255
    5256:	80 e0       	ldi	r24, 0x00	; 0
    5258:	a0 e0       	ldi	r26, 0x00	; 0
    525a:	b0 e0       	ldi	r27, 0x00	; 0
    525c:	05 91       	lpm	r16, Z+
    525e:	14 91       	lpm	r17, Z+
    5260:	f9 01       	movw	r30, r18
    5262:	f4 90       	lpm	r15, Z+
    5264:	26 50       	subi	r18, 0x06	; 6
    5266:	30 40       	sbci	r19, 0x00	; 0
    5268:	14 c0       	rjmp	.+40     	; 0x5292 <compareFromIOPin+0x74>
    526a:	b8 01       	movw	r22, r16
    526c:	6a 0f       	add	r22, r26
    526e:	7b 1f       	adc	r23, r27
    5270:	fb 01       	movw	r30, r22
    5272:	3e 96       	adiw	r30, 0x0e	; 14
    5274:	45 91       	lpm	r20, Z+
    5276:	54 91       	lpm	r21, Z+
    5278:	41 15       	cp	r20, r1
    527a:	51 05       	cpc	r21, r1
    527c:	41 f0       	breq	.+16     	; 0x528e <compareFromIOPin+0x70>
    527e:	4c 15       	cp	r20, r12
    5280:	5d 05       	cpc	r21, r13
    5282:	29 f4       	brne	.+10     	; 0x528e <compareFromIOPin+0x70>
    5284:	ff 20       	and	r15, r15
    5286:	11 f0       	breq	.+4      	; 0x528c <compareFromIOPin+0x6e>
    5288:	eb 01       	movw	r28, r22
    528a:	0a c0       	rjmp	.+20     	; 0x52a0 <compareFromIOPin+0x82>
    528c:	eb 01       	movw	r28, r22
    528e:	8f 5f       	subi	r24, 0xFF	; 255
    5290:	50 96       	adiw	r26, 0x10	; 16
    5292:	8e 15       	cp	r24, r14
    5294:	50 f3       	brcs	.-44     	; 0x526a <compareFromIOPin+0x4c>
    5296:	9f 5f       	subi	r25, 0xFF	; 255
    5298:	24 5d       	subi	r18, 0xD4	; 212
    529a:	3f 4f       	sbci	r19, 0xFF	; 255
    529c:	9b 15       	cp	r25, r11
    529e:	88 f2       	brcs	.-94     	; 0x5242 <compareFromIOPin+0x24>
    52a0:	ce 01       	movw	r24, r28
    52a2:	df 91       	pop	r29
    52a4:	cf 91       	pop	r28
    52a6:	1f 91       	pop	r17
    52a8:	0f 91       	pop	r16
    52aa:	ff 90       	pop	r15
    52ac:	ef 90       	pop	r14
    52ae:	df 90       	pop	r13
    52b0:	cf 90       	pop	r12
    52b2:	bf 90       	pop	r11
    52b4:	08 95       	ret

000052b6 <nullTimerCompareCallback>:
    52b6:	08 95       	ret

000052b8 <timerOverflowAttach>:
    52b8:	df 92       	push	r13
    52ba:	ef 92       	push	r14
    52bc:	ff 92       	push	r15
    52be:	0f 93       	push	r16
    52c0:	1f 93       	push	r17
    52c2:	cf 93       	push	r28
    52c4:	df 93       	push	r29
    52c6:	ec 01       	movw	r28, r24
    52c8:	8b 01       	movw	r16, r22
    52ca:	7a 01       	movw	r14, r20
    52cc:	df b6       	in	r13, 0x3f	; 63
    52ce:	f8 94       	cli
    52d0:	61 15       	cp	r22, r1
    52d2:	71 05       	cpc	r23, r1
    52d4:	61 f0       	breq	.+24     	; 0x52ee <timerOverflowAttach+0x36>
    52d6:	fc 01       	movw	r30, r24
    52d8:	a5 91       	lpm	r26, Z+
    52da:	b4 91       	lpm	r27, Z+
    52dc:	16 96       	adiw	r26, 0x06	; 6
    52de:	8d 91       	ld	r24, X+
    52e0:	9c 91       	ld	r25, X
    52e2:	17 97       	sbiw	r26, 0x07	; 7
    52e4:	89 2b       	or	r24, r25
    52e6:	19 f0       	breq	.+6      	; 0x52ee <timerOverflowAttach+0x36>
    52e8:	8c ef       	ldi	r24, 0xFC	; 252
    52ea:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    52ee:	ce 01       	movw	r24, r28
    52f0:	fe 01       	movw	r30, r28
    52f2:	a5 91       	lpm	r26, Z+
    52f4:	b4 91       	lpm	r27, Z+
    52f6:	17 96       	adiw	r26, 0x07	; 7
    52f8:	1c 93       	st	X, r17
    52fa:	0e 93       	st	-X, r16
    52fc:	16 97       	sbiw	r26, 0x06	; 6
    52fe:	19 96       	adiw	r26, 0x09	; 9
    5300:	fc 92       	st	X, r15
    5302:	ee 92       	st	-X, r14
    5304:	18 97       	sbiw	r26, 0x08	; 8
    5306:	49 96       	adiw	r24, 0x19	; 25
    5308:	01 2b       	or	r16, r17
    530a:	19 f0       	breq	.+6      	; 0x5312 <timerOverflowAttach+0x5a>
    530c:	0e 94 88 18 	call	0x3110	; 0x3110 <__portMaskSet>
    5310:	02 c0       	rjmp	.+4      	; 0x5316 <timerOverflowAttach+0x5e>
    5312:	0e 94 a1 18 	call	0x3142	; 0x3142 <__portMaskClear>
    5316:	df be       	out	0x3f, r13	; 63
    5318:	df 91       	pop	r29
    531a:	cf 91       	pop	r28
    531c:	1f 91       	pop	r17
    531e:	0f 91       	pop	r16
    5320:	ff 90       	pop	r15
    5322:	ef 90       	pop	r14
    5324:	df 90       	pop	r13
    5326:	08 95       	ret

00005328 <__uartHWSetBaudRate>:
    5328:	bf 92       	push	r11
    532a:	cf 92       	push	r12
    532c:	df 92       	push	r13
    532e:	ef 92       	push	r14
    5330:	ff 92       	push	r15
    5332:	0f 93       	push	r16
    5334:	1f 93       	push	r17
    5336:	cf 93       	push	r28
    5338:	df 93       	push	r29
    533a:	7a 01       	movw	r14, r20
    533c:	8b 01       	movw	r16, r22
    533e:	ec 01       	movw	r28, r24
    5340:	bf b6       	in	r11, 0x3f	; 63
    5342:	f8 94       	cli
    5344:	4f 3f       	cpi	r20, 0xFF	; 255
    5346:	8f ef       	ldi	r24, 0xFF	; 255
    5348:	58 07       	cpc	r21, r24
    534a:	8f ef       	ldi	r24, 0xFF	; 255
    534c:	68 07       	cpc	r22, r24
    534e:	8f ef       	ldi	r24, 0xFF	; 255
    5350:	78 07       	cpc	r23, r24
    5352:	21 f4       	brne	.+8      	; 0x535c <__uartHWSetBaudRate+0x34>
    5354:	a1 e0       	ldi	r26, 0x01	; 1
    5356:	ca 2e       	mov	r12, r26
    5358:	d1 2c       	mov	r13, r1
    535a:	24 c0       	rjmp	.+72     	; 0x53a4 <__uartHWSetBaudRate+0x7c>
    535c:	cb 01       	movw	r24, r22
    535e:	ba 01       	movw	r22, r20
    5360:	f3 e0       	ldi	r31, 0x03	; 3
    5362:	66 0f       	add	r22, r22
    5364:	77 1f       	adc	r23, r23
    5366:	88 1f       	adc	r24, r24
    5368:	99 1f       	adc	r25, r25
    536a:	fa 95       	dec	r31
    536c:	d1 f7       	brne	.-12     	; 0x5362 <__uartHWSetBaudRate+0x3a>
    536e:	20 91 00 02 	lds	r18, 0x0200
    5372:	30 91 01 02 	lds	r19, 0x0201
    5376:	40 91 02 02 	lds	r20, 0x0202
    537a:	50 91 03 02 	lds	r21, 0x0203
    537e:	62 0f       	add	r22, r18
    5380:	73 1f       	adc	r23, r19
    5382:	84 1f       	adc	r24, r20
    5384:	95 1f       	adc	r25, r21
    5386:	a8 01       	movw	r20, r16
    5388:	97 01       	movw	r18, r14
    538a:	e4 e0       	ldi	r30, 0x04	; 4
    538c:	22 0f       	add	r18, r18
    538e:	33 1f       	adc	r19, r19
    5390:	44 1f       	adc	r20, r20
    5392:	55 1f       	adc	r21, r21
    5394:	ea 95       	dec	r30
    5396:	d1 f7       	brne	.-12     	; 0x538c <__uartHWSetBaudRate+0x64>
    5398:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    539c:	69 01       	movw	r12, r18
    539e:	08 94       	sec
    53a0:	c1 08       	sbc	r12, r1
    53a2:	d1 08       	sbc	r13, r1
    53a4:	9c a1       	ldd	r25, Y+36	; 0x24
    53a6:	99 23       	and	r25, r25
    53a8:	c9 f1       	breq	.+114    	; 0x541c <__uartHWSetBaudRate+0xf4>
    53aa:	e8 8d       	ldd	r30, Y+24	; 0x18
    53ac:	f9 8d       	ldd	r31, Y+25	; 0x19
    53ae:	80 81       	ld	r24, Z
    53b0:	90 95       	com	r25
    53b2:	89 23       	and	r24, r25
    53b4:	80 83       	st	Z, r24
    53b6:	8f ef       	ldi	r24, 0xFF	; 255
    53b8:	e8 16       	cp	r14, r24
    53ba:	8f ef       	ldi	r24, 0xFF	; 255
    53bc:	f8 06       	cpc	r15, r24
    53be:	8f ef       	ldi	r24, 0xFF	; 255
    53c0:	08 07       	cpc	r16, r24
    53c2:	8f ef       	ldi	r24, 0xFF	; 255
    53c4:	18 07       	cpc	r17, r24
    53c6:	19 f4       	brne	.+6      	; 0x53ce <__uartHWSetBaudRate+0xa6>
    53c8:	21 e0       	ldi	r18, 0x01	; 1
    53ca:	30 e0       	ldi	r19, 0x00	; 0
    53cc:	1d c0       	rjmp	.+58     	; 0x5408 <__uartHWSetBaudRate+0xe0>
    53ce:	32 e0       	ldi	r19, 0x02	; 2
    53d0:	ee 0c       	add	r14, r14
    53d2:	ff 1c       	adc	r15, r15
    53d4:	00 1f       	adc	r16, r16
    53d6:	11 1f       	adc	r17, r17
    53d8:	3a 95       	dec	r19
    53da:	d1 f7       	brne	.-12     	; 0x53d0 <__uartHWSetBaudRate+0xa8>
    53dc:	60 91 00 02 	lds	r22, 0x0200
    53e0:	70 91 01 02 	lds	r23, 0x0201
    53e4:	80 91 02 02 	lds	r24, 0x0202
    53e8:	90 91 03 02 	lds	r25, 0x0203
    53ec:	6e 0d       	add	r22, r14
    53ee:	7f 1d       	adc	r23, r15
    53f0:	80 1f       	adc	r24, r16
    53f2:	91 1f       	adc	r25, r17
    53f4:	ee 0c       	add	r14, r14
    53f6:	ff 1c       	adc	r15, r15
    53f8:	00 1f       	adc	r16, r16
    53fa:	11 1f       	adc	r17, r17
    53fc:	a8 01       	movw	r20, r16
    53fe:	97 01       	movw	r18, r14
    5400:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    5404:	21 50       	subi	r18, 0x01	; 1
    5406:	30 40       	sbci	r19, 0x00	; 0
    5408:	2c 15       	cp	r18, r12
    540a:	3d 05       	cpc	r19, r13
    540c:	38 f0       	brcs	.+14     	; 0x541c <__uartHWSetBaudRate+0xf4>
    540e:	e8 8d       	ldd	r30, Y+24	; 0x18
    5410:	f9 8d       	ldd	r31, Y+25	; 0x19
    5412:	80 81       	ld	r24, Z
    5414:	9c a1       	ldd	r25, Y+36	; 0x24
    5416:	89 2b       	or	r24, r25
    5418:	80 83       	st	Z, r24
    541a:	69 01       	movw	r12, r18
    541c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    541e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    5420:	c0 82       	st	Z, r12
    5422:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5424:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5426:	d0 82       	st	Z, r13
    5428:	bf be       	out	0x3f, r11	; 63
    542a:	df 91       	pop	r29
    542c:	cf 91       	pop	r28
    542e:	1f 91       	pop	r17
    5430:	0f 91       	pop	r16
    5432:	ff 90       	pop	r15
    5434:	ef 90       	pop	r14
    5436:	df 90       	pop	r13
    5438:	cf 90       	pop	r12
    543a:	bf 90       	pop	r11
    543c:	08 95       	ret

0000543e <__uartHWOff>:
    543e:	dc 01       	movw	r26, r24
    5440:	5a 96       	adiw	r26, 0x1a	; 26
    5442:	ed 91       	ld	r30, X+
    5444:	fc 91       	ld	r31, X
    5446:	5b 97       	sbiw	r26, 0x1b	; 27
    5448:	80 81       	ld	r24, Z
    544a:	87 72       	andi	r24, 0x27	; 39
    544c:	80 83       	st	Z, r24
    544e:	94 96       	adiw	r26, 0x24	; 36
    5450:	9c 91       	ld	r25, X
    5452:	94 97       	sbiw	r26, 0x24	; 36
    5454:	99 23       	and	r25, r25
    5456:	41 f0       	breq	.+16     	; 0x5468 <__uartHWOff+0x2a>
    5458:	58 96       	adiw	r26, 0x18	; 24
    545a:	ed 91       	ld	r30, X+
    545c:	fc 91       	ld	r31, X
    545e:	59 97       	sbiw	r26, 0x19	; 25
    5460:	80 81       	ld	r24, Z
    5462:	90 95       	com	r25
    5464:	89 23       	and	r24, r25
    5466:	80 83       	st	Z, r24
    5468:	08 95       	ret

0000546a <oneWireReceiveMode>:
    546a:	dc 01       	movw	r26, r24
    546c:	53 96       	adiw	r26, 0x13	; 19
    546e:	8c 91       	ld	r24, X
    5470:	53 97       	sbiw	r26, 0x13	; 19
    5472:	88 23       	and	r24, r24
    5474:	71 f0       	breq	.+28     	; 0x5492 <oneWireReceiveMode+0x28>
    5476:	5a 96       	adiw	r26, 0x1a	; 26
    5478:	ed 91       	ld	r30, X+
    547a:	fc 91       	ld	r31, X
    547c:	5b 97       	sbiw	r26, 0x1b	; 27
    547e:	80 81       	ld	r24, Z
    5480:	87 7b       	andi	r24, 0xB7	; 183
    5482:	80 83       	st	Z, r24
    5484:	5a 96       	adiw	r26, 0x1a	; 26
    5486:	ed 91       	ld	r30, X+
    5488:	fc 91       	ld	r31, X
    548a:	5b 97       	sbiw	r26, 0x1b	; 27
    548c:	80 81       	ld	r24, Z
    548e:	80 69       	ori	r24, 0x90	; 144
    5490:	80 83       	st	Z, r24
    5492:	08 95       	ret

00005494 <__uartHWStartXmit>:
    5494:	dc 01       	movw	r26, r24
    5496:	90 96       	adiw	r26, 0x20	; 32
    5498:	ed 91       	ld	r30, X+
    549a:	fc 91       	ld	r31, X
    549c:	91 97       	sbiw	r26, 0x21	; 33
    549e:	60 83       	st	Z, r22
    54a0:	08 95       	ret

000054a2 <startXmitMode>:
    54a2:	dc 01       	movw	r26, r24
    54a4:	53 96       	adiw	r26, 0x13	; 19
    54a6:	8c 91       	ld	r24, X
    54a8:	53 97       	sbiw	r26, 0x13	; 19
    54aa:	88 23       	and	r24, r24
    54ac:	71 f0       	breq	.+28     	; 0x54ca <startXmitMode+0x28>
    54ae:	5a 96       	adiw	r26, 0x1a	; 26
    54b0:	ed 91       	ld	r30, X+
    54b2:	fc 91       	ld	r31, X
    54b4:	5b 97       	sbiw	r26, 0x1b	; 27
    54b6:	80 81       	ld	r24, Z
    54b8:	8f 76       	andi	r24, 0x6F	; 111
    54ba:	80 83       	st	Z, r24
    54bc:	5a 96       	adiw	r26, 0x1a	; 26
    54be:	ed 91       	ld	r30, X+
    54c0:	fc 91       	ld	r31, X
    54c2:	5b 97       	sbiw	r26, 0x1b	; 27
    54c4:	80 81       	ld	r24, Z
    54c6:	88 64       	ori	r24, 0x48	; 72
    54c8:	80 83       	st	Z, r24
    54ca:	08 95       	ret

000054cc <uartReceivePollingMode>:
    54cc:	dc 01       	movw	r26, r24
    54ce:	5a 96       	adiw	r26, 0x1a	; 26
    54d0:	ed 91       	ld	r30, X+
    54d2:	fc 91       	ld	r31, X
    54d4:	5b 97       	sbiw	r26, 0x1b	; 27
    54d6:	66 23       	and	r22, r22
    54d8:	19 f0       	breq	.+6      	; 0x54e0 <uartReceivePollingMode+0x14>
    54da:	80 81       	ld	r24, Z
    54dc:	8f 77       	andi	r24, 0x7F	; 127
    54de:	02 c0       	rjmp	.+4      	; 0x54e4 <uartReceivePollingMode+0x18>
    54e0:	80 81       	ld	r24, Z
    54e2:	80 68       	ori	r24, 0x80	; 128
    54e4:	80 83       	st	Z, r24
    54e6:	08 95       	ret

000054e8 <uartPollByte>:
    54e8:	dc 01       	movw	r26, r24
    54ea:	58 96       	adiw	r26, 0x18	; 24
    54ec:	ed 91       	ld	r30, X+
    54ee:	fc 91       	ld	r31, X
    54f0:	59 97       	sbiw	r26, 0x19	; 25
    54f2:	80 81       	ld	r24, Z
    54f4:	87 fd       	sbrc	r24, 7
    54f6:	03 c0       	rjmp	.+6      	; 0x54fe <uartPollByte+0x16>
    54f8:	2f ef       	ldi	r18, 0xFF	; 255
    54fa:	3f ef       	ldi	r19, 0xFF	; 255
    54fc:	07 c0       	rjmp	.+14     	; 0x550c <uartPollByte+0x24>
    54fe:	90 96       	adiw	r26, 0x20	; 32
    5500:	ed 91       	ld	r30, X+
    5502:	fc 91       	ld	r31, X
    5504:	91 97       	sbiw	r26, 0x21	; 33
    5506:	80 81       	ld	r24, Z
    5508:	28 2f       	mov	r18, r24
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	c9 01       	movw	r24, r18
    550e:	08 95       	ret

00005510 <__uartHWInit>:
    5510:	0f 93       	push	r16
    5512:	1f 93       	push	r17
    5514:	8c 01       	movw	r16, r24
    5516:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_uartSetBaudRate>
    551a:	d8 01       	movw	r26, r16
    551c:	53 96       	adiw	r26, 0x13	; 19
    551e:	8c 91       	ld	r24, X
    5520:	53 97       	sbiw	r26, 0x13	; 19
    5522:	5a 96       	adiw	r26, 0x1a	; 26
    5524:	ed 91       	ld	r30, X+
    5526:	fc 91       	ld	r31, X
    5528:	5b 97       	sbiw	r26, 0x1b	; 27
    552a:	88 23       	and	r24, r24
    552c:	11 f0       	breq	.+4      	; 0x5532 <__uartHWInit+0x22>
    552e:	80 e9       	ldi	r24, 0x90	; 144
    5530:	01 c0       	rjmp	.+2      	; 0x5534 <__uartHWInit+0x24>
    5532:	88 ed       	ldi	r24, 0xD8	; 216
    5534:	80 83       	st	Z, r24
    5536:	1f 91       	pop	r17
    5538:	0f 91       	pop	r16
    553a:	08 95       	ret

0000553c <interpolateU>:
    553c:	4f 92       	push	r4
    553e:	5f 92       	push	r5
    5540:	6f 92       	push	r6
    5542:	7f 92       	push	r7
    5544:	8f 92       	push	r8
    5546:	9f 92       	push	r9
    5548:	af 92       	push	r10
    554a:	bf 92       	push	r11
    554c:	cf 92       	push	r12
    554e:	df 92       	push	r13
    5550:	ef 92       	push	r14
    5552:	ff 92       	push	r15
    5554:	0f 93       	push	r16
    5556:	1f 93       	push	r17
    5558:	2b 01       	movw	r4, r22
    555a:	5a 01       	movw	r10, r20
    555c:	39 01       	movw	r6, r18
    555e:	78 01       	movw	r14, r16
    5560:	e2 1a       	sub	r14, r18
    5562:	f3 0a       	sbc	r15, r19
    5564:	00 e0       	ldi	r16, 0x00	; 0
    5566:	10 e0       	ldi	r17, 0x00	; 0
    5568:	9c 01       	movw	r18, r24
    556a:	26 1b       	sub	r18, r22
    556c:	37 0b       	sbc	r19, r23
    556e:	44 27       	eor	r20, r20
    5570:	37 fd       	sbrc	r19, 7
    5572:	40 95       	com	r20
    5574:	54 2f       	mov	r21, r20
    5576:	c8 01       	movw	r24, r16
    5578:	b7 01       	movw	r22, r14
    557a:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    557e:	a4 18       	sub	r10, r4
    5580:	b5 08       	sbc	r11, r5
    5582:	cc 24       	eor	r12, r12
    5584:	b7 fc       	sbrc	r11, 7
    5586:	c0 94       	com	r12
    5588:	dc 2c       	mov	r13, r12
    558a:	a6 01       	movw	r20, r12
    558c:	95 01       	movw	r18, r10
    558e:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__divmodsi4>
    5592:	88 24       	eor	r8, r8
    5594:	99 24       	eor	r9, r9
    5596:	26 0d       	add	r18, r6
    5598:	37 1d       	adc	r19, r7
    559a:	48 1d       	adc	r20, r8
    559c:	59 1d       	adc	r21, r9
    559e:	c9 01       	movw	r24, r18
    55a0:	1f 91       	pop	r17
    55a2:	0f 91       	pop	r16
    55a4:	ff 90       	pop	r15
    55a6:	ef 90       	pop	r14
    55a8:	df 90       	pop	r13
    55aa:	cf 90       	pop	r12
    55ac:	bf 90       	pop	r11
    55ae:	af 90       	pop	r10
    55b0:	9f 90       	pop	r9
    55b2:	8f 90       	pop	r8
    55b4:	7f 90       	pop	r7
    55b6:	6f 90       	pop	r6
    55b8:	5f 90       	pop	r5
    55ba:	4f 90       	pop	r4
    55bc:	08 95       	ret

000055be <__scheduleUpdate>:
    55be:	2f 92       	push	r2
    55c0:	3f 92       	push	r3
    55c2:	4f 92       	push	r4
    55c4:	5f 92       	push	r5
    55c6:	6f 92       	push	r6
    55c8:	7f 92       	push	r7
    55ca:	8f 92       	push	r8
    55cc:	9f 92       	push	r9
    55ce:	af 92       	push	r10
    55d0:	bf 92       	push	r11
    55d2:	cf 92       	push	r12
    55d4:	df 92       	push	r13
    55d6:	ef 92       	push	r14
    55d8:	ff 92       	push	r15
    55da:	0f 93       	push	r16
    55dc:	1f 93       	push	r17
    55de:	df 93       	push	r29
    55e0:	cf 93       	push	r28
    55e2:	cd b7       	in	r28, 0x3d	; 61
    55e4:	de b7       	in	r29, 0x3e	; 62
    55e6:	29 97       	sbiw	r28, 0x09	; 9
    55e8:	0f b6       	in	r0, 0x3f	; 63
    55ea:	f8 94       	cli
    55ec:	de bf       	out	0x3e, r29	; 62
    55ee:	0f be       	out	0x3f, r0	; 63
    55f0:	cd bf       	out	0x3d, r28	; 61
    55f2:	99 87       	std	Y+9, r25	; 0x09
    55f4:	88 87       	std	Y+8, r24	; 0x08
    55f6:	0e 94 c1 22 	call	0x4582	; 0x4582 <compareDetach>
    55fa:	2f b7       	in	r18, 0x3f	; 63
    55fc:	2f 83       	std	Y+7, r18	; 0x07
    55fe:	78 94       	sei
    5600:	8f ef       	ldi	r24, 0xFF	; 255
    5602:	80 93 73 0c 	sts	0x0C73, r24
    5606:	10 92 72 0c 	sts	0x0C72, r1
    560a:	80 91 08 02 	lds	r24, 0x0208
    560e:	a8 2f       	mov	r26, r24
    5610:	b0 e0       	ldi	r27, 0x00	; 0
    5612:	11 97       	sbiw	r26, 0x01	; 1
    5614:	be 83       	std	Y+6, r27	; 0x06
    5616:	ad 83       	std	Y+5, r26	; 0x05
    5618:	ed e0       	ldi	r30, 0x0D	; 13
    561a:	f0 e0       	ldi	r31, 0x00	; 0
    561c:	ae 9f       	mul	r26, r30
    561e:	50 01       	movw	r10, r0
    5620:	af 9f       	mul	r26, r31
    5622:	b0 0c       	add	r11, r0
    5624:	be 9f       	mul	r27, r30
    5626:	b0 0c       	add	r11, r0
    5628:	11 24       	eor	r1, r1
    562a:	2c eb       	ldi	r18, 0xBC	; 188
    562c:	3b e0       	ldi	r19, 0x0B	; 11
    562e:	a2 0e       	add	r10, r18
    5630:	b3 1e       	adc	r11, r19
    5632:	22 24       	eor	r2, r2
    5634:	33 24       	eor	r3, r3
    5636:	21 01       	movw	r4, r2
    5638:	5a c0       	rjmp	.+180    	; 0x56ee <__scheduleUpdate+0x130>
    563a:	d5 01       	movw	r26, r10
    563c:	8c 91       	ld	r24, X
    563e:	88 23       	and	r24, r24
    5640:	09 f4       	brne	.+2      	; 0x5644 <__scheduleUpdate+0x86>
    5642:	4c c0       	rjmp	.+152    	; 0x56dc <__scheduleUpdate+0x11e>
    5644:	19 96       	adiw	r26, 0x09	; 9
    5646:	6d 90       	ld	r6, X+
    5648:	7d 90       	ld	r7, X+
    564a:	8d 90       	ld	r8, X+
    564c:	9c 90       	ld	r9, X
    564e:	1c 97       	sbiw	r26, 0x0c	; 12
    5650:	15 96       	adiw	r26, 0x05	; 5
    5652:	cd 90       	ld	r12, X+
    5654:	dd 90       	ld	r13, X+
    5656:	ed 90       	ld	r14, X+
    5658:	fc 90       	ld	r15, X
    565a:	18 97       	sbiw	r26, 0x08	; 8
    565c:	c4 01       	movw	r24, r8
    565e:	b3 01       	movw	r22, r6
    5660:	a7 01       	movw	r20, r14
    5662:	96 01       	movw	r18, r12
    5664:	8e 01       	movw	r16, r28
    5666:	0f 5f       	subi	r16, 0xFF	; 255
    5668:	1f 4f       	sbci	r17, 0xFF	; 255
    566a:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <clockHasElapsedGetOverflow>
    566e:	88 23       	and	r24, r24
    5670:	19 f1       	breq	.+70     	; 0x56b8 <__scheduleUpdate+0xfa>
    5672:	d5 01       	movw	r26, r10
    5674:	11 96       	adiw	r26, 0x01	; 1
    5676:	ed 91       	ld	r30, X+
    5678:	fc 91       	ld	r31, X
    567a:	12 97       	sbiw	r26, 0x02	; 2
    567c:	13 96       	adiw	r26, 0x03	; 3
    567e:	8d 91       	ld	r24, X+
    5680:	9c 91       	ld	r25, X
    5682:	14 97       	sbiw	r26, 0x04	; 4
    5684:	1c 92       	st	X, r1
    5686:	20 91 70 0c 	lds	r18, 0x0C70
    568a:	30 91 71 0c 	lds	r19, 0x0C71
    568e:	21 50       	subi	r18, 0x01	; 1
    5690:	30 40       	sbci	r19, 0x00	; 0
    5692:	30 93 71 0c 	sts	0x0C71, r19
    5696:	20 93 70 0c 	sts	0x0C70, r18
    569a:	c6 0c       	add	r12, r6
    569c:	d7 1c       	adc	r13, r7
    569e:	e8 1c       	adc	r14, r8
    56a0:	f9 1c       	adc	r15, r9
    56a2:	09 81       	ldd	r16, Y+1	; 0x01
    56a4:	1a 81       	ldd	r17, Y+2	; 0x02
    56a6:	2b 81       	ldd	r18, Y+3	; 0x03
    56a8:	3c 81       	ldd	r19, Y+4	; 0x04
    56aa:	b7 01       	movw	r22, r14
    56ac:	a6 01       	movw	r20, r12
    56ae:	09 95       	icall
    56b0:	bf ef       	ldi	r27, 0xFF	; 255
    56b2:	b0 93 72 0c 	sts	0x0C72, r27
    56b6:	12 c0       	rjmp	.+36     	; 0x56dc <__scheduleUpdate+0x11e>
    56b8:	21 14       	cp	r2, r1
    56ba:	31 04       	cpc	r3, r1
    56bc:	41 04       	cpc	r4, r1
    56be:	51 04       	cpc	r5, r1
    56c0:	49 f0       	breq	.+18     	; 0x56d4 <__scheduleUpdate+0x116>
    56c2:	89 81       	ldd	r24, Y+1	; 0x01
    56c4:	9a 81       	ldd	r25, Y+2	; 0x02
    56c6:	ab 81       	ldd	r26, Y+3	; 0x03
    56c8:	bc 81       	ldd	r27, Y+4	; 0x04
    56ca:	82 15       	cp	r24, r2
    56cc:	93 05       	cpc	r25, r3
    56ce:	a4 05       	cpc	r26, r4
    56d0:	b5 05       	cpc	r27, r5
    56d2:	20 f4       	brcc	.+8      	; 0x56dc <__scheduleUpdate+0x11e>
    56d4:	29 80       	ldd	r2, Y+1	; 0x01
    56d6:	3a 80       	ldd	r3, Y+2	; 0x02
    56d8:	4b 80       	ldd	r4, Y+3	; 0x03
    56da:	5c 80       	ldd	r5, Y+4	; 0x04
    56dc:	ed 81       	ldd	r30, Y+5	; 0x05
    56de:	fe 81       	ldd	r31, Y+6	; 0x06
    56e0:	31 97       	sbiw	r30, 0x01	; 1
    56e2:	fe 83       	std	Y+6, r31	; 0x06
    56e4:	ed 83       	std	Y+5, r30	; 0x05
    56e6:	23 ef       	ldi	r18, 0xF3	; 243
    56e8:	3f ef       	ldi	r19, 0xFF	; 255
    56ea:	a2 0e       	add	r10, r18
    56ec:	b3 1e       	adc	r11, r19
    56ee:	8d 81       	ldd	r24, Y+5	; 0x05
    56f0:	9e 81       	ldd	r25, Y+6	; 0x06
    56f2:	8f 5f       	subi	r24, 0xFF	; 255
    56f4:	9f 4f       	sbci	r25, 0xFF	; 255
    56f6:	09 f0       	breq	.+2      	; 0x56fa <__scheduleUpdate+0x13c>
    56f8:	a0 cf       	rjmp	.-192    	; 0x563a <__scheduleUpdate+0x7c>
    56fa:	80 91 72 0c 	lds	r24, 0x0C72
    56fe:	88 23       	and	r24, r24
    5700:	09 f0       	breq	.+2      	; 0x5704 <__scheduleUpdate+0x146>
    5702:	81 cf       	rjmp	.-254    	; 0x5606 <__scheduleUpdate+0x48>
    5704:	10 92 73 0c 	sts	0x0C73, r1
    5708:	80 91 70 0c 	lds	r24, 0x0C70
    570c:	90 91 71 0c 	lds	r25, 0x0C71
    5710:	18 16       	cp	r1, r24
    5712:	19 06       	cpc	r1, r25
    5714:	0c f0       	brlt	.+2      	; 0x5718 <__scheduleUpdate+0x15a>
    5716:	44 c0       	rjmp	.+136    	; 0x57a0 <__scheduleUpdate+0x1e2>
    5718:	f0 90 6e 0c 	lds	r15, 0x0C6E
    571c:	e0 90 6f 0c 	lds	r14, 0x0C6F
    5720:	ef 2d       	mov	r30, r15
    5722:	fe 2d       	mov	r31, r14
    5724:	05 91       	lpm	r16, Z+
    5726:	14 91       	lpm	r17, Z+
    5728:	20 91 06 02 	lds	r18, 0x0206
    572c:	30 91 07 02 	lds	r19, 0x0207
    5730:	40 e0       	ldi	r20, 0x00	; 0
    5732:	50 e0       	ldi	r21, 0x00	; 0
    5734:	c2 01       	movw	r24, r4
    5736:	b1 01       	movw	r22, r2
    5738:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__mulsi3>
    573c:	f8 01       	movw	r30, r16
    573e:	20 81       	ld	r18, Z
    5740:	31 81       	ldd	r19, Z+1	; 0x01
    5742:	40 e0       	ldi	r20, 0x00	; 0
    5744:	50 e0       	ldi	r21, 0x00	; 0
    5746:	0e 94 2e 30 	call	0x605c	; 0x605c <__udivmodsi4>
    574a:	59 01       	movw	r10, r18
    574c:	6a 01       	movw	r12, r20
    574e:	8f 2d       	mov	r24, r15
    5750:	9e 2d       	mov	r25, r14
    5752:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <timerGetTOP>
    5756:	7c 01       	movw	r14, r24
    5758:	00 e0       	ldi	r16, 0x00	; 0
    575a:	10 e0       	ldi	r17, 0x00	; 0
    575c:	ae 14       	cp	r10, r14
    575e:	bf 04       	cpc	r11, r15
    5760:	c0 06       	cpc	r12, r16
    5762:	d1 06       	cpc	r13, r17
    5764:	10 f4       	brcc	.+4      	; 0x576a <__scheduleUpdate+0x1ac>
    5766:	86 01       	movw	r16, r12
    5768:	75 01       	movw	r14, r10
    576a:	80 91 6e 0c 	lds	r24, 0x0C6E
    576e:	90 91 6f 0c 	lds	r25, 0x0C6F
    5772:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <timerGetTOP>
    5776:	8c 01       	movw	r16, r24
    5778:	80 91 6e 0c 	lds	r24, 0x0C6E
    577c:	90 91 6f 0c 	lds	r25, 0x0C6F
    5780:	0e 94 26 20 	call	0x404c	; 0x404c <timerGetCounter>
    5784:	8e 0d       	add	r24, r14
    5786:	9f 1d       	adc	r25, r15
    5788:	b8 01       	movw	r22, r16
    578a:	0e 94 07 30 	call	0x600e	; 0x600e <__udivmodhi4>
    578e:	ac 01       	movw	r20, r24
    5790:	88 85       	ldd	r24, Y+8	; 0x08
    5792:	99 85       	ldd	r25, Y+9	; 0x09
    5794:	6f ed       	ldi	r22, 0xDF	; 223
    5796:	7a e2       	ldi	r23, 0x2A	; 42
    5798:	20 e0       	ldi	r18, 0x00	; 0
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <compareAttach>
    57a0:	ff 81       	ldd	r31, Y+7	; 0x07
    57a2:	ff bf       	out	0x3f, r31	; 63
    57a4:	29 96       	adiw	r28, 0x09	; 9
    57a6:	0f b6       	in	r0, 0x3f	; 63
    57a8:	f8 94       	cli
    57aa:	de bf       	out	0x3e, r29	; 62
    57ac:	0f be       	out	0x3f, r0	; 63
    57ae:	cd bf       	out	0x3d, r28	; 61
    57b0:	cf 91       	pop	r28
    57b2:	df 91       	pop	r29
    57b4:	1f 91       	pop	r17
    57b6:	0f 91       	pop	r16
    57b8:	ff 90       	pop	r15
    57ba:	ef 90       	pop	r14
    57bc:	df 90       	pop	r13
    57be:	cf 90       	pop	r12
    57c0:	bf 90       	pop	r11
    57c2:	af 90       	pop	r10
    57c4:	9f 90       	pop	r9
    57c6:	8f 90       	pop	r8
    57c8:	7f 90       	pop	r7
    57ca:	6f 90       	pop	r6
    57cc:	5f 90       	pop	r5
    57ce:	4f 90       	pop	r4
    57d0:	3f 90       	pop	r3
    57d2:	2f 90       	pop	r2
    57d4:	08 95       	ret

000057d6 <scheduleJob>:
    57d6:	2f 92       	push	r2
    57d8:	3f 92       	push	r3
    57da:	4f 92       	push	r4
    57dc:	5f 92       	push	r5
    57de:	6f 92       	push	r6
    57e0:	7f 92       	push	r7
    57e2:	8f 92       	push	r8
    57e4:	9f 92       	push	r9
    57e6:	af 92       	push	r10
    57e8:	bf 92       	push	r11
    57ea:	cf 92       	push	r12
    57ec:	df 92       	push	r13
    57ee:	ef 92       	push	r14
    57f0:	ff 92       	push	r15
    57f2:	0f 93       	push	r16
    57f4:	1f 93       	push	r17
    57f6:	df 93       	push	r29
    57f8:	cf 93       	push	r28
    57fa:	00 d0       	rcall	.+0      	; 0x57fc <scheduleJob+0x26>
    57fc:	00 d0       	rcall	.+0      	; 0x57fe <scheduleJob+0x28>
    57fe:	cd b7       	in	r28, 0x3d	; 61
    5800:	de b7       	in	r29, 0x3e	; 62
    5802:	1c 01       	movw	r2, r24
    5804:	2b 01       	movw	r4, r22
    5806:	49 01       	movw	r8, r18
    5808:	5a 01       	movw	r10, r20
    580a:	67 01       	movw	r12, r14
    580c:	78 01       	movw	r14, r16
    580e:	88 ee       	ldi	r24, 0xE8	; 232
    5810:	c8 16       	cp	r12, r24
    5812:	83 e0       	ldi	r24, 0x03	; 3
    5814:	d8 06       	cpc	r13, r24
    5816:	80 e0       	ldi	r24, 0x00	; 0
    5818:	e8 06       	cpc	r14, r24
    581a:	80 e0       	ldi	r24, 0x00	; 0
    581c:	f8 06       	cpc	r15, r24
    581e:	38 f4       	brcc	.+14     	; 0x582e <scheduleJob+0x58>
    5820:	80 91 73 0c 	lds	r24, 0x0C73
    5824:	88 23       	and	r24, r24
    5826:	c1 f1       	breq	.+112    	; 0x5898 <scheduleJob+0xc2>
    5828:	8f ef       	ldi	r24, 0xFF	; 255
    582a:	80 93 72 0c 	sts	0x0C72, r24
    582e:	6f b7       	in	r22, 0x3f	; 63
    5830:	f8 94       	cli
    5832:	80 91 08 02 	lds	r24, 0x0208
    5836:	48 2f       	mov	r20, r24
    5838:	50 e0       	ldi	r21, 0x00	; 0
    583a:	ac eb       	ldi	r26, 0xBC	; 188
    583c:	bb e0       	ldi	r27, 0x0B	; 11
    583e:	20 e0       	ldi	r18, 0x00	; 0
    5840:	30 e0       	ldi	r19, 0x00	; 0
    5842:	20 c0       	rjmp	.+64     	; 0x5884 <scheduleJob+0xae>
    5844:	fd 01       	movw	r30, r26
    5846:	8c 91       	ld	r24, X
    5848:	1d 96       	adiw	r26, 0x0d	; 13
    584a:	88 23       	and	r24, r24
    584c:	c9 f4       	brne	.+50     	; 0x5880 <scheduleJob+0xaa>
    584e:	8f ef       	ldi	r24, 0xFF	; 255
    5850:	80 83       	st	Z, r24
    5852:	32 82       	std	Z+2, r3	; 0x02
    5854:	21 82       	std	Z+1, r2	; 0x01
    5856:	54 82       	std	Z+4, r5	; 0x04
    5858:	43 82       	std	Z+3, r4	; 0x03
    585a:	81 86       	std	Z+9, r8	; 0x09
    585c:	92 86       	std	Z+10, r9	; 0x0a
    585e:	a3 86       	std	Z+11, r10	; 0x0b
    5860:	b4 86       	std	Z+12, r11	; 0x0c
    5862:	c5 82       	std	Z+5, r12	; 0x05
    5864:	d6 82       	std	Z+6, r13	; 0x06
    5866:	e7 82       	std	Z+7, r14	; 0x07
    5868:	f0 86       	std	Z+8, r15	; 0x08
    586a:	80 91 70 0c 	lds	r24, 0x0C70
    586e:	90 91 71 0c 	lds	r25, 0x0C71
    5872:	01 96       	adiw	r24, 0x01	; 1
    5874:	90 93 71 0c 	sts	0x0C71, r25
    5878:	80 93 70 0c 	sts	0x0C70, r24
    587c:	8f ef       	ldi	r24, 0xFF	; 255
    587e:	06 c0       	rjmp	.+12     	; 0x588c <scheduleJob+0xb6>
    5880:	2f 5f       	subi	r18, 0xFF	; 255
    5882:	3f 4f       	sbci	r19, 0xFF	; 255
    5884:	24 17       	cp	r18, r20
    5886:	35 07       	cpc	r19, r21
    5888:	ec f2       	brlt	.-70     	; 0x5844 <scheduleJob+0x6e>
    588a:	80 e0       	ldi	r24, 0x00	; 0
    588c:	6f bf       	out	0x3f, r22	; 63
    588e:	88 23       	and	r24, r24
    5890:	59 f5       	brne	.+86     	; 0x58e8 <scheduleJob+0x112>
    5892:	8f ef       	ldi	r24, 0xFF	; 255
    5894:	0e 94 55 22 	call	0x44aa	; 0x44aa <setError>
    5898:	3e 01       	movw	r6, r28
    589a:	08 94       	sec
    589c:	61 1c       	adc	r6, r1
    589e:	71 1c       	adc	r7, r1
    58a0:	c5 01       	movw	r24, r10
    58a2:	b4 01       	movw	r22, r8
    58a4:	a7 01       	movw	r20, r14
    58a6:	96 01       	movw	r18, r12
    58a8:	83 01       	movw	r16, r6
    58aa:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <clockHasElapsedGetOverflow>
    58ae:	88 23       	and	r24, r24
    58b0:	b9 f3       	breq	.-18     	; 0x58a0 <scheduleJob+0xca>
    58b2:	c8 0c       	add	r12, r8
    58b4:	d9 1c       	adc	r13, r9
    58b6:	ea 1c       	adc	r14, r10
    58b8:	fb 1c       	adc	r15, r11
    58ba:	09 81       	ldd	r16, Y+1	; 0x01
    58bc:	1a 81       	ldd	r17, Y+2	; 0x02
    58be:	2b 81       	ldd	r18, Y+3	; 0x03
    58c0:	3c 81       	ldd	r19, Y+4	; 0x04
    58c2:	c2 01       	movw	r24, r4
    58c4:	b7 01       	movw	r22, r14
    58c6:	a6 01       	movw	r20, r12
    58c8:	f1 01       	movw	r30, r2
    58ca:	09 95       	icall
    58cc:	11 c0       	rjmp	.+34     	; 0x58f0 <scheduleJob+0x11a>
    58ce:	e0 91 6e 0c 	lds	r30, 0x0C6E
    58d2:	f0 91 6f 0c 	lds	r31, 0x0C6F
    58d6:	77 96       	adiw	r30, 0x17	; 23
    58d8:	85 91       	lpm	r24, Z+
    58da:	94 91       	lpm	r25, Z+
    58dc:	40 96       	adiw	r24, 0x10	; 16
    58de:	60 e0       	ldi	r22, 0x00	; 0
    58e0:	70 e0       	ldi	r23, 0x00	; 0
    58e2:	0e 94 df 2a 	call	0x55be	; 0x55be <__scheduleUpdate>
    58e6:	04 c0       	rjmp	.+8      	; 0x58f0 <scheduleJob+0x11a>
    58e8:	80 91 73 0c 	lds	r24, 0x0C73
    58ec:	88 23       	and	r24, r24
    58ee:	79 f3       	breq	.-34     	; 0x58ce <scheduleJob+0xf8>
    58f0:	0f 90       	pop	r0
    58f2:	0f 90       	pop	r0
    58f4:	0f 90       	pop	r0
    58f6:	0f 90       	pop	r0
    58f8:	cf 91       	pop	r28
    58fa:	df 91       	pop	r29
    58fc:	1f 91       	pop	r17
    58fe:	0f 91       	pop	r16
    5900:	ff 90       	pop	r15
    5902:	ef 90       	pop	r14
    5904:	df 90       	pop	r13
    5906:	cf 90       	pop	r12
    5908:	bf 90       	pop	r11
    590a:	af 90       	pop	r10
    590c:	9f 90       	pop	r9
    590e:	8f 90       	pop	r8
    5910:	7f 90       	pop	r7
    5912:	6f 90       	pop	r6
    5914:	5f 90       	pop	r5
    5916:	4f 90       	pop	r4
    5918:	3f 90       	pop	r3
    591a:	2f 90       	pop	r2
    591c:	08 95       	ret

0000591e <exit>:
    591e:	f8 94       	cli
    5920:	0c 94 71 30 	jmp	0x60e2	; 0x60e2 <_exit>

00005924 <__divsf3>:
    5924:	0c d0       	rcall	.+24     	; 0x593e <__divsf3x>
    5926:	eb c0       	rjmp	.+470    	; 0x5afe <__fp_round>
    5928:	e3 d0       	rcall	.+454    	; 0x5af0 <__fp_pscB>
    592a:	40 f0       	brcs	.+16     	; 0x593c <__divsf3+0x18>
    592c:	da d0       	rcall	.+436    	; 0x5ae2 <__fp_pscA>
    592e:	30 f0       	brcs	.+12     	; 0x593c <__divsf3+0x18>
    5930:	21 f4       	brne	.+8      	; 0x593a <__divsf3+0x16>
    5932:	5f 3f       	cpi	r21, 0xFF	; 255
    5934:	19 f0       	breq	.+6      	; 0x593c <__divsf3+0x18>
    5936:	cc c0       	rjmp	.+408    	; 0x5ad0 <__fp_inf>
    5938:	51 11       	cpse	r21, r1
    593a:	15 c1       	rjmp	.+554    	; 0x5b66 <__fp_szero>
    593c:	cf c0       	rjmp	.+414    	; 0x5adc <__fp_nan>

0000593e <__divsf3x>:
    593e:	f0 d0       	rcall	.+480    	; 0x5b20 <__fp_split3>
    5940:	98 f3       	brcs	.-26     	; 0x5928 <__divsf3+0x4>

00005942 <__divsf3_pse>:
    5942:	99 23       	and	r25, r25
    5944:	c9 f3       	breq	.-14     	; 0x5938 <__divsf3+0x14>
    5946:	55 23       	and	r21, r21
    5948:	b1 f3       	breq	.-20     	; 0x5936 <__divsf3+0x12>
    594a:	95 1b       	sub	r25, r21
    594c:	55 0b       	sbc	r21, r21
    594e:	bb 27       	eor	r27, r27
    5950:	aa 27       	eor	r26, r26
    5952:	62 17       	cp	r22, r18
    5954:	73 07       	cpc	r23, r19
    5956:	84 07       	cpc	r24, r20
    5958:	38 f0       	brcs	.+14     	; 0x5968 <__divsf3_pse+0x26>
    595a:	9f 5f       	subi	r25, 0xFF	; 255
    595c:	5f 4f       	sbci	r21, 0xFF	; 255
    595e:	22 0f       	add	r18, r18
    5960:	33 1f       	adc	r19, r19
    5962:	44 1f       	adc	r20, r20
    5964:	aa 1f       	adc	r26, r26
    5966:	a9 f3       	breq	.-22     	; 0x5952 <__divsf3_pse+0x10>
    5968:	33 d0       	rcall	.+102    	; 0x59d0 <__divsf3_pse+0x8e>
    596a:	0e 2e       	mov	r0, r30
    596c:	3a f0       	brmi	.+14     	; 0x597c <__divsf3_pse+0x3a>
    596e:	e0 e8       	ldi	r30, 0x80	; 128
    5970:	30 d0       	rcall	.+96     	; 0x59d2 <__divsf3_pse+0x90>
    5972:	91 50       	subi	r25, 0x01	; 1
    5974:	50 40       	sbci	r21, 0x00	; 0
    5976:	e6 95       	lsr	r30
    5978:	00 1c       	adc	r0, r0
    597a:	ca f7       	brpl	.-14     	; 0x596e <__divsf3_pse+0x2c>
    597c:	29 d0       	rcall	.+82     	; 0x59d0 <__divsf3_pse+0x8e>
    597e:	fe 2f       	mov	r31, r30
    5980:	27 d0       	rcall	.+78     	; 0x59d0 <__divsf3_pse+0x8e>
    5982:	66 0f       	add	r22, r22
    5984:	77 1f       	adc	r23, r23
    5986:	88 1f       	adc	r24, r24
    5988:	bb 1f       	adc	r27, r27
    598a:	26 17       	cp	r18, r22
    598c:	37 07       	cpc	r19, r23
    598e:	48 07       	cpc	r20, r24
    5990:	ab 07       	cpc	r26, r27
    5992:	b0 e8       	ldi	r27, 0x80	; 128
    5994:	09 f0       	breq	.+2      	; 0x5998 <__divsf3_pse+0x56>
    5996:	bb 0b       	sbc	r27, r27
    5998:	80 2d       	mov	r24, r0
    599a:	bf 01       	movw	r22, r30
    599c:	ff 27       	eor	r31, r31
    599e:	93 58       	subi	r25, 0x83	; 131
    59a0:	5f 4f       	sbci	r21, 0xFF	; 255
    59a2:	2a f0       	brmi	.+10     	; 0x59ae <__divsf3_pse+0x6c>
    59a4:	9e 3f       	cpi	r25, 0xFE	; 254
    59a6:	51 05       	cpc	r21, r1
    59a8:	68 f0       	brcs	.+26     	; 0x59c4 <__divsf3_pse+0x82>
    59aa:	92 c0       	rjmp	.+292    	; 0x5ad0 <__fp_inf>
    59ac:	dc c0       	rjmp	.+440    	; 0x5b66 <__fp_szero>
    59ae:	5f 3f       	cpi	r21, 0xFF	; 255
    59b0:	ec f3       	brlt	.-6      	; 0x59ac <__divsf3_pse+0x6a>
    59b2:	98 3e       	cpi	r25, 0xE8	; 232
    59b4:	dc f3       	brlt	.-10     	; 0x59ac <__divsf3_pse+0x6a>
    59b6:	86 95       	lsr	r24
    59b8:	77 95       	ror	r23
    59ba:	67 95       	ror	r22
    59bc:	b7 95       	ror	r27
    59be:	f7 95       	ror	r31
    59c0:	9f 5f       	subi	r25, 0xFF	; 255
    59c2:	c9 f7       	brne	.-14     	; 0x59b6 <__divsf3_pse+0x74>
    59c4:	88 0f       	add	r24, r24
    59c6:	91 1d       	adc	r25, r1
    59c8:	96 95       	lsr	r25
    59ca:	87 95       	ror	r24
    59cc:	97 f9       	bld	r25, 7
    59ce:	08 95       	ret
    59d0:	e1 e0       	ldi	r30, 0x01	; 1
    59d2:	66 0f       	add	r22, r22
    59d4:	77 1f       	adc	r23, r23
    59d6:	88 1f       	adc	r24, r24
    59d8:	bb 1f       	adc	r27, r27
    59da:	62 17       	cp	r22, r18
    59dc:	73 07       	cpc	r23, r19
    59de:	84 07       	cpc	r24, r20
    59e0:	ba 07       	cpc	r27, r26
    59e2:	20 f0       	brcs	.+8      	; 0x59ec <__divsf3_pse+0xaa>
    59e4:	62 1b       	sub	r22, r18
    59e6:	73 0b       	sbc	r23, r19
    59e8:	84 0b       	sbc	r24, r20
    59ea:	ba 0b       	sbc	r27, r26
    59ec:	ee 1f       	adc	r30, r30
    59ee:	88 f7       	brcc	.-30     	; 0x59d2 <__divsf3_pse+0x90>
    59f0:	e0 95       	com	r30
    59f2:	08 95       	ret

000059f4 <__fixsfsi>:
    59f4:	04 d0       	rcall	.+8      	; 0x59fe <__fixunssfsi>
    59f6:	68 94       	set
    59f8:	b1 11       	cpse	r27, r1
    59fa:	b5 c0       	rjmp	.+362    	; 0x5b66 <__fp_szero>
    59fc:	08 95       	ret

000059fe <__fixunssfsi>:
    59fe:	98 d0       	rcall	.+304    	; 0x5b30 <__fp_splitA>
    5a00:	88 f0       	brcs	.+34     	; 0x5a24 <__fixunssfsi+0x26>
    5a02:	9f 57       	subi	r25, 0x7F	; 127
    5a04:	90 f0       	brcs	.+36     	; 0x5a2a <__fixunssfsi+0x2c>
    5a06:	b9 2f       	mov	r27, r25
    5a08:	99 27       	eor	r25, r25
    5a0a:	b7 51       	subi	r27, 0x17	; 23
    5a0c:	a0 f0       	brcs	.+40     	; 0x5a36 <__fixunssfsi+0x38>
    5a0e:	d1 f0       	breq	.+52     	; 0x5a44 <__fixunssfsi+0x46>
    5a10:	66 0f       	add	r22, r22
    5a12:	77 1f       	adc	r23, r23
    5a14:	88 1f       	adc	r24, r24
    5a16:	99 1f       	adc	r25, r25
    5a18:	1a f0       	brmi	.+6      	; 0x5a20 <__fixunssfsi+0x22>
    5a1a:	ba 95       	dec	r27
    5a1c:	c9 f7       	brne	.-14     	; 0x5a10 <__fixunssfsi+0x12>
    5a1e:	12 c0       	rjmp	.+36     	; 0x5a44 <__fixunssfsi+0x46>
    5a20:	b1 30       	cpi	r27, 0x01	; 1
    5a22:	81 f0       	breq	.+32     	; 0x5a44 <__fixunssfsi+0x46>
    5a24:	9f d0       	rcall	.+318    	; 0x5b64 <__fp_zero>
    5a26:	b1 e0       	ldi	r27, 0x01	; 1
    5a28:	08 95       	ret
    5a2a:	9c c0       	rjmp	.+312    	; 0x5b64 <__fp_zero>
    5a2c:	67 2f       	mov	r22, r23
    5a2e:	78 2f       	mov	r23, r24
    5a30:	88 27       	eor	r24, r24
    5a32:	b8 5f       	subi	r27, 0xF8	; 248
    5a34:	39 f0       	breq	.+14     	; 0x5a44 <__fixunssfsi+0x46>
    5a36:	b9 3f       	cpi	r27, 0xF9	; 249
    5a38:	cc f3       	brlt	.-14     	; 0x5a2c <__fixunssfsi+0x2e>
    5a3a:	86 95       	lsr	r24
    5a3c:	77 95       	ror	r23
    5a3e:	67 95       	ror	r22
    5a40:	b3 95       	inc	r27
    5a42:	d9 f7       	brne	.-10     	; 0x5a3a <__fixunssfsi+0x3c>
    5a44:	3e f4       	brtc	.+14     	; 0x5a54 <__fixunssfsi+0x56>
    5a46:	90 95       	com	r25
    5a48:	80 95       	com	r24
    5a4a:	70 95       	com	r23
    5a4c:	61 95       	neg	r22
    5a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a50:	8f 4f       	sbci	r24, 0xFF	; 255
    5a52:	9f 4f       	sbci	r25, 0xFF	; 255
    5a54:	08 95       	ret

00005a56 <__floatunsisf>:
    5a56:	e8 94       	clt
    5a58:	09 c0       	rjmp	.+18     	; 0x5a6c <__floatsisf+0x12>

00005a5a <__floatsisf>:
    5a5a:	97 fb       	bst	r25, 7
    5a5c:	3e f4       	brtc	.+14     	; 0x5a6c <__floatsisf+0x12>
    5a5e:	90 95       	com	r25
    5a60:	80 95       	com	r24
    5a62:	70 95       	com	r23
    5a64:	61 95       	neg	r22
    5a66:	7f 4f       	sbci	r23, 0xFF	; 255
    5a68:	8f 4f       	sbci	r24, 0xFF	; 255
    5a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a6c:	99 23       	and	r25, r25
    5a6e:	a9 f0       	breq	.+42     	; 0x5a9a <__floatsisf+0x40>
    5a70:	f9 2f       	mov	r31, r25
    5a72:	96 e9       	ldi	r25, 0x96	; 150
    5a74:	bb 27       	eor	r27, r27
    5a76:	93 95       	inc	r25
    5a78:	f6 95       	lsr	r31
    5a7a:	87 95       	ror	r24
    5a7c:	77 95       	ror	r23
    5a7e:	67 95       	ror	r22
    5a80:	b7 95       	ror	r27
    5a82:	f1 11       	cpse	r31, r1
    5a84:	f8 cf       	rjmp	.-16     	; 0x5a76 <__floatsisf+0x1c>
    5a86:	fa f4       	brpl	.+62     	; 0x5ac6 <__floatsisf+0x6c>
    5a88:	bb 0f       	add	r27, r27
    5a8a:	11 f4       	brne	.+4      	; 0x5a90 <__floatsisf+0x36>
    5a8c:	60 ff       	sbrs	r22, 0
    5a8e:	1b c0       	rjmp	.+54     	; 0x5ac6 <__floatsisf+0x6c>
    5a90:	6f 5f       	subi	r22, 0xFF	; 255
    5a92:	7f 4f       	sbci	r23, 0xFF	; 255
    5a94:	8f 4f       	sbci	r24, 0xFF	; 255
    5a96:	9f 4f       	sbci	r25, 0xFF	; 255
    5a98:	16 c0       	rjmp	.+44     	; 0x5ac6 <__floatsisf+0x6c>
    5a9a:	88 23       	and	r24, r24
    5a9c:	11 f0       	breq	.+4      	; 0x5aa2 <__floatsisf+0x48>
    5a9e:	96 e9       	ldi	r25, 0x96	; 150
    5aa0:	11 c0       	rjmp	.+34     	; 0x5ac4 <__floatsisf+0x6a>
    5aa2:	77 23       	and	r23, r23
    5aa4:	21 f0       	breq	.+8      	; 0x5aae <__floatsisf+0x54>
    5aa6:	9e e8       	ldi	r25, 0x8E	; 142
    5aa8:	87 2f       	mov	r24, r23
    5aaa:	76 2f       	mov	r23, r22
    5aac:	05 c0       	rjmp	.+10     	; 0x5ab8 <__floatsisf+0x5e>
    5aae:	66 23       	and	r22, r22
    5ab0:	71 f0       	breq	.+28     	; 0x5ace <__floatsisf+0x74>
    5ab2:	96 e8       	ldi	r25, 0x86	; 134
    5ab4:	86 2f       	mov	r24, r22
    5ab6:	70 e0       	ldi	r23, 0x00	; 0
    5ab8:	60 e0       	ldi	r22, 0x00	; 0
    5aba:	2a f0       	brmi	.+10     	; 0x5ac6 <__floatsisf+0x6c>
    5abc:	9a 95       	dec	r25
    5abe:	66 0f       	add	r22, r22
    5ac0:	77 1f       	adc	r23, r23
    5ac2:	88 1f       	adc	r24, r24
    5ac4:	da f7       	brpl	.-10     	; 0x5abc <__floatsisf+0x62>
    5ac6:	88 0f       	add	r24, r24
    5ac8:	96 95       	lsr	r25
    5aca:	87 95       	ror	r24
    5acc:	97 f9       	bld	r25, 7
    5ace:	08 95       	ret

00005ad0 <__fp_inf>:
    5ad0:	97 f9       	bld	r25, 7
    5ad2:	9f 67       	ori	r25, 0x7F	; 127
    5ad4:	80 e8       	ldi	r24, 0x80	; 128
    5ad6:	70 e0       	ldi	r23, 0x00	; 0
    5ad8:	60 e0       	ldi	r22, 0x00	; 0
    5ada:	08 95       	ret

00005adc <__fp_nan>:
    5adc:	9f ef       	ldi	r25, 0xFF	; 255
    5ade:	80 ec       	ldi	r24, 0xC0	; 192
    5ae0:	08 95       	ret

00005ae2 <__fp_pscA>:
    5ae2:	00 24       	eor	r0, r0
    5ae4:	0a 94       	dec	r0
    5ae6:	16 16       	cp	r1, r22
    5ae8:	17 06       	cpc	r1, r23
    5aea:	18 06       	cpc	r1, r24
    5aec:	09 06       	cpc	r0, r25
    5aee:	08 95       	ret

00005af0 <__fp_pscB>:
    5af0:	00 24       	eor	r0, r0
    5af2:	0a 94       	dec	r0
    5af4:	12 16       	cp	r1, r18
    5af6:	13 06       	cpc	r1, r19
    5af8:	14 06       	cpc	r1, r20
    5afa:	05 06       	cpc	r0, r21
    5afc:	08 95       	ret

00005afe <__fp_round>:
    5afe:	09 2e       	mov	r0, r25
    5b00:	03 94       	inc	r0
    5b02:	00 0c       	add	r0, r0
    5b04:	11 f4       	brne	.+4      	; 0x5b0a <__fp_round+0xc>
    5b06:	88 23       	and	r24, r24
    5b08:	52 f0       	brmi	.+20     	; 0x5b1e <__fp_round+0x20>
    5b0a:	bb 0f       	add	r27, r27
    5b0c:	40 f4       	brcc	.+16     	; 0x5b1e <__fp_round+0x20>
    5b0e:	bf 2b       	or	r27, r31
    5b10:	11 f4       	brne	.+4      	; 0x5b16 <__fp_round+0x18>
    5b12:	60 ff       	sbrs	r22, 0
    5b14:	04 c0       	rjmp	.+8      	; 0x5b1e <__fp_round+0x20>
    5b16:	6f 5f       	subi	r22, 0xFF	; 255
    5b18:	7f 4f       	sbci	r23, 0xFF	; 255
    5b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    5b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b1e:	08 95       	ret

00005b20 <__fp_split3>:
    5b20:	57 fd       	sbrc	r21, 7
    5b22:	90 58       	subi	r25, 0x80	; 128
    5b24:	44 0f       	add	r20, r20
    5b26:	55 1f       	adc	r21, r21
    5b28:	59 f0       	breq	.+22     	; 0x5b40 <__fp_splitA+0x10>
    5b2a:	5f 3f       	cpi	r21, 0xFF	; 255
    5b2c:	71 f0       	breq	.+28     	; 0x5b4a <__fp_splitA+0x1a>
    5b2e:	47 95       	ror	r20

00005b30 <__fp_splitA>:
    5b30:	88 0f       	add	r24, r24
    5b32:	97 fb       	bst	r25, 7
    5b34:	99 1f       	adc	r25, r25
    5b36:	61 f0       	breq	.+24     	; 0x5b50 <__fp_splitA+0x20>
    5b38:	9f 3f       	cpi	r25, 0xFF	; 255
    5b3a:	79 f0       	breq	.+30     	; 0x5b5a <__fp_splitA+0x2a>
    5b3c:	87 95       	ror	r24
    5b3e:	08 95       	ret
    5b40:	12 16       	cp	r1, r18
    5b42:	13 06       	cpc	r1, r19
    5b44:	14 06       	cpc	r1, r20
    5b46:	55 1f       	adc	r21, r21
    5b48:	f2 cf       	rjmp	.-28     	; 0x5b2e <__fp_split3+0xe>
    5b4a:	46 95       	lsr	r20
    5b4c:	f1 df       	rcall	.-30     	; 0x5b30 <__fp_splitA>
    5b4e:	08 c0       	rjmp	.+16     	; 0x5b60 <__fp_splitA+0x30>
    5b50:	16 16       	cp	r1, r22
    5b52:	17 06       	cpc	r1, r23
    5b54:	18 06       	cpc	r1, r24
    5b56:	99 1f       	adc	r25, r25
    5b58:	f1 cf       	rjmp	.-30     	; 0x5b3c <__fp_splitA+0xc>
    5b5a:	86 95       	lsr	r24
    5b5c:	71 05       	cpc	r23, r1
    5b5e:	61 05       	cpc	r22, r1
    5b60:	08 94       	sec
    5b62:	08 95       	ret

00005b64 <__fp_zero>:
    5b64:	e8 94       	clt

00005b66 <__fp_szero>:
    5b66:	bb 27       	eor	r27, r27
    5b68:	66 27       	eor	r22, r22
    5b6a:	77 27       	eor	r23, r23
    5b6c:	cb 01       	movw	r24, r22
    5b6e:	97 f9       	bld	r25, 7
    5b70:	08 95       	ret

00005b72 <__mulsf3>:
    5b72:	0b d0       	rcall	.+22     	; 0x5b8a <__mulsf3x>
    5b74:	c4 cf       	rjmp	.-120    	; 0x5afe <__fp_round>
    5b76:	b5 df       	rcall	.-150    	; 0x5ae2 <__fp_pscA>
    5b78:	28 f0       	brcs	.+10     	; 0x5b84 <__mulsf3+0x12>
    5b7a:	ba df       	rcall	.-140    	; 0x5af0 <__fp_pscB>
    5b7c:	18 f0       	brcs	.+6      	; 0x5b84 <__mulsf3+0x12>
    5b7e:	95 23       	and	r25, r21
    5b80:	09 f0       	breq	.+2      	; 0x5b84 <__mulsf3+0x12>
    5b82:	a6 cf       	rjmp	.-180    	; 0x5ad0 <__fp_inf>
    5b84:	ab cf       	rjmp	.-170    	; 0x5adc <__fp_nan>
    5b86:	11 24       	eor	r1, r1
    5b88:	ee cf       	rjmp	.-36     	; 0x5b66 <__fp_szero>

00005b8a <__mulsf3x>:
    5b8a:	ca df       	rcall	.-108    	; 0x5b20 <__fp_split3>
    5b8c:	a0 f3       	brcs	.-24     	; 0x5b76 <__mulsf3+0x4>

00005b8e <__mulsf3_pse>:
    5b8e:	95 9f       	mul	r25, r21
    5b90:	d1 f3       	breq	.-12     	; 0x5b86 <__mulsf3+0x14>
    5b92:	95 0f       	add	r25, r21
    5b94:	50 e0       	ldi	r21, 0x00	; 0
    5b96:	55 1f       	adc	r21, r21
    5b98:	62 9f       	mul	r22, r18
    5b9a:	f0 01       	movw	r30, r0
    5b9c:	72 9f       	mul	r23, r18
    5b9e:	bb 27       	eor	r27, r27
    5ba0:	f0 0d       	add	r31, r0
    5ba2:	b1 1d       	adc	r27, r1
    5ba4:	63 9f       	mul	r22, r19
    5ba6:	aa 27       	eor	r26, r26
    5ba8:	f0 0d       	add	r31, r0
    5baa:	b1 1d       	adc	r27, r1
    5bac:	aa 1f       	adc	r26, r26
    5bae:	64 9f       	mul	r22, r20
    5bb0:	66 27       	eor	r22, r22
    5bb2:	b0 0d       	add	r27, r0
    5bb4:	a1 1d       	adc	r26, r1
    5bb6:	66 1f       	adc	r22, r22
    5bb8:	82 9f       	mul	r24, r18
    5bba:	22 27       	eor	r18, r18
    5bbc:	b0 0d       	add	r27, r0
    5bbe:	a1 1d       	adc	r26, r1
    5bc0:	62 1f       	adc	r22, r18
    5bc2:	73 9f       	mul	r23, r19
    5bc4:	b0 0d       	add	r27, r0
    5bc6:	a1 1d       	adc	r26, r1
    5bc8:	62 1f       	adc	r22, r18
    5bca:	83 9f       	mul	r24, r19
    5bcc:	a0 0d       	add	r26, r0
    5bce:	61 1d       	adc	r22, r1
    5bd0:	22 1f       	adc	r18, r18
    5bd2:	74 9f       	mul	r23, r20
    5bd4:	33 27       	eor	r19, r19
    5bd6:	a0 0d       	add	r26, r0
    5bd8:	61 1d       	adc	r22, r1
    5bda:	23 1f       	adc	r18, r19
    5bdc:	84 9f       	mul	r24, r20
    5bde:	60 0d       	add	r22, r0
    5be0:	21 1d       	adc	r18, r1
    5be2:	82 2f       	mov	r24, r18
    5be4:	76 2f       	mov	r23, r22
    5be6:	6a 2f       	mov	r22, r26
    5be8:	11 24       	eor	r1, r1
    5bea:	9f 57       	subi	r25, 0x7F	; 127
    5bec:	50 40       	sbci	r21, 0x00	; 0
    5bee:	8a f0       	brmi	.+34     	; 0x5c12 <__mulsf3_pse+0x84>
    5bf0:	e1 f0       	breq	.+56     	; 0x5c2a <__mulsf3_pse+0x9c>
    5bf2:	88 23       	and	r24, r24
    5bf4:	4a f0       	brmi	.+18     	; 0x5c08 <__mulsf3_pse+0x7a>
    5bf6:	ee 0f       	add	r30, r30
    5bf8:	ff 1f       	adc	r31, r31
    5bfa:	bb 1f       	adc	r27, r27
    5bfc:	66 1f       	adc	r22, r22
    5bfe:	77 1f       	adc	r23, r23
    5c00:	88 1f       	adc	r24, r24
    5c02:	91 50       	subi	r25, 0x01	; 1
    5c04:	50 40       	sbci	r21, 0x00	; 0
    5c06:	a9 f7       	brne	.-22     	; 0x5bf2 <__mulsf3_pse+0x64>
    5c08:	9e 3f       	cpi	r25, 0xFE	; 254
    5c0a:	51 05       	cpc	r21, r1
    5c0c:	70 f0       	brcs	.+28     	; 0x5c2a <__mulsf3_pse+0x9c>
    5c0e:	60 cf       	rjmp	.-320    	; 0x5ad0 <__fp_inf>
    5c10:	aa cf       	rjmp	.-172    	; 0x5b66 <__fp_szero>
    5c12:	5f 3f       	cpi	r21, 0xFF	; 255
    5c14:	ec f3       	brlt	.-6      	; 0x5c10 <__mulsf3_pse+0x82>
    5c16:	98 3e       	cpi	r25, 0xE8	; 232
    5c18:	dc f3       	brlt	.-10     	; 0x5c10 <__mulsf3_pse+0x82>
    5c1a:	86 95       	lsr	r24
    5c1c:	77 95       	ror	r23
    5c1e:	67 95       	ror	r22
    5c20:	b7 95       	ror	r27
    5c22:	f7 95       	ror	r31
    5c24:	e7 95       	ror	r30
    5c26:	9f 5f       	subi	r25, 0xFF	; 255
    5c28:	c1 f7       	brne	.-16     	; 0x5c1a <__mulsf3_pse+0x8c>
    5c2a:	fe 2b       	or	r31, r30
    5c2c:	88 0f       	add	r24, r24
    5c2e:	91 1d       	adc	r25, r1
    5c30:	96 95       	lsr	r25
    5c32:	87 95       	ror	r24
    5c34:	97 f9       	bld	r25, 7
    5c36:	08 95       	ret

00005c38 <pow>:
    5c38:	fa 01       	movw	r30, r20
    5c3a:	ee 0f       	add	r30, r30
    5c3c:	ff 1f       	adc	r31, r31
    5c3e:	30 96       	adiw	r30, 0x00	; 0
    5c40:	21 05       	cpc	r18, r1
    5c42:	31 05       	cpc	r19, r1
    5c44:	99 f1       	breq	.+102    	; 0x5cac <pow+0x74>
    5c46:	61 15       	cp	r22, r1
    5c48:	71 05       	cpc	r23, r1
    5c4a:	61 f4       	brne	.+24     	; 0x5c64 <pow+0x2c>
    5c4c:	80 38       	cpi	r24, 0x80	; 128
    5c4e:	bf e3       	ldi	r27, 0x3F	; 63
    5c50:	9b 07       	cpc	r25, r27
    5c52:	49 f1       	breq	.+82     	; 0x5ca6 <pow+0x6e>
    5c54:	68 94       	set
    5c56:	90 38       	cpi	r25, 0x80	; 128
    5c58:	81 05       	cpc	r24, r1
    5c5a:	61 f0       	breq	.+24     	; 0x5c74 <pow+0x3c>
    5c5c:	80 38       	cpi	r24, 0x80	; 128
    5c5e:	bf ef       	ldi	r27, 0xFF	; 255
    5c60:	9b 07       	cpc	r25, r27
    5c62:	41 f0       	breq	.+16     	; 0x5c74 <pow+0x3c>
    5c64:	99 23       	and	r25, r25
    5c66:	42 f5       	brpl	.+80     	; 0x5cb8 <pow+0x80>
    5c68:	ff 3f       	cpi	r31, 0xFF	; 255
    5c6a:	e1 05       	cpc	r30, r1
    5c6c:	31 05       	cpc	r19, r1
    5c6e:	21 05       	cpc	r18, r1
    5c70:	11 f1       	breq	.+68     	; 0x5cb6 <pow+0x7e>
    5c72:	e8 94       	clt
    5c74:	08 94       	sec
    5c76:	e7 95       	ror	r30
    5c78:	d9 01       	movw	r26, r18
    5c7a:	aa 23       	and	r26, r26
    5c7c:	29 f4       	brne	.+10     	; 0x5c88 <pow+0x50>
    5c7e:	ab 2f       	mov	r26, r27
    5c80:	be 2f       	mov	r27, r30
    5c82:	f8 5f       	subi	r31, 0xF8	; 248
    5c84:	d0 f3       	brcs	.-12     	; 0x5c7a <pow+0x42>
    5c86:	10 c0       	rjmp	.+32     	; 0x5ca8 <pow+0x70>
    5c88:	ff 5f       	subi	r31, 0xFF	; 255
    5c8a:	70 f4       	brcc	.+28     	; 0x5ca8 <pow+0x70>
    5c8c:	a6 95       	lsr	r26
    5c8e:	e0 f7       	brcc	.-8      	; 0x5c88 <pow+0x50>
    5c90:	f7 39       	cpi	r31, 0x97	; 151
    5c92:	50 f0       	brcs	.+20     	; 0x5ca8 <pow+0x70>
    5c94:	19 f0       	breq	.+6      	; 0x5c9c <pow+0x64>
    5c96:	ff 3a       	cpi	r31, 0xAF	; 175
    5c98:	38 f4       	brcc	.+14     	; 0x5ca8 <pow+0x70>
    5c9a:	9f 77       	andi	r25, 0x7F	; 127
    5c9c:	9f 93       	push	r25
    5c9e:	0c d0       	rcall	.+24     	; 0x5cb8 <pow+0x80>
    5ca0:	0f 90       	pop	r0
    5ca2:	07 fc       	sbrc	r0, 7
    5ca4:	90 58       	subi	r25, 0x80	; 128
    5ca6:	08 95       	ret
    5ca8:	3e f0       	brts	.+14     	; 0x5cb8 <pow+0x80>
    5caa:	18 cf       	rjmp	.-464    	; 0x5adc <__fp_nan>
    5cac:	60 e0       	ldi	r22, 0x00	; 0
    5cae:	70 e0       	ldi	r23, 0x00	; 0
    5cb0:	80 e8       	ldi	r24, 0x80	; 128
    5cb2:	9f e3       	ldi	r25, 0x3F	; 63
    5cb4:	08 95       	ret
    5cb6:	4f e7       	ldi	r20, 0x7F	; 127
    5cb8:	9f 77       	andi	r25, 0x7F	; 127
    5cba:	5f 93       	push	r21
    5cbc:	4f 93       	push	r20
    5cbe:	3f 93       	push	r19
    5cc0:	2f 93       	push	r18
    5cc2:	9e d0       	rcall	.+316    	; 0x5e00 <log>
    5cc4:	2f 91       	pop	r18
    5cc6:	3f 91       	pop	r19
    5cc8:	4f 91       	pop	r20
    5cca:	5f 91       	pop	r21
    5ccc:	52 df       	rcall	.-348    	; 0x5b72 <__mulsf3>
    5cce:	05 c0       	rjmp	.+10     	; 0x5cda <exp>
    5cd0:	19 f4       	brne	.+6      	; 0x5cd8 <pow+0xa0>
    5cd2:	0e f0       	brts	.+2      	; 0x5cd6 <pow+0x9e>
    5cd4:	fd ce       	rjmp	.-518    	; 0x5ad0 <__fp_inf>
    5cd6:	46 cf       	rjmp	.-372    	; 0x5b64 <__fp_zero>
    5cd8:	01 cf       	rjmp	.-510    	; 0x5adc <__fp_nan>

00005cda <exp>:
    5cda:	2a df       	rcall	.-428    	; 0x5b30 <__fp_splitA>
    5cdc:	c8 f3       	brcs	.-14     	; 0x5cd0 <pow+0x98>
    5cde:	96 38       	cpi	r25, 0x86	; 134
    5ce0:	c0 f7       	brcc	.-16     	; 0x5cd2 <pow+0x9a>
    5ce2:	07 f8       	bld	r0, 7
    5ce4:	0f 92       	push	r0
    5ce6:	e8 94       	clt
    5ce8:	2b e3       	ldi	r18, 0x3B	; 59
    5cea:	3a ea       	ldi	r19, 0xAA	; 170
    5cec:	48 eb       	ldi	r20, 0xB8	; 184
    5cee:	5f e7       	ldi	r21, 0x7F	; 127
    5cf0:	4e df       	rcall	.-356    	; 0x5b8e <__mulsf3_pse>
    5cf2:	0f 92       	push	r0
    5cf4:	0f 92       	push	r0
    5cf6:	0f 92       	push	r0
    5cf8:	4d b7       	in	r20, 0x3d	; 61
    5cfa:	5e b7       	in	r21, 0x3e	; 62
    5cfc:	0f 92       	push	r0
    5cfe:	c0 d0       	rcall	.+384    	; 0x5e80 <modf>
    5d00:	e4 ee       	ldi	r30, 0xE4	; 228
    5d02:	f0 e0       	ldi	r31, 0x00	; 0
    5d04:	16 d0       	rcall	.+44     	; 0x5d32 <__fp_powser>
    5d06:	4f 91       	pop	r20
    5d08:	5f 91       	pop	r21
    5d0a:	ef 91       	pop	r30
    5d0c:	ff 91       	pop	r31
    5d0e:	e5 95       	asr	r30
    5d10:	ee 1f       	adc	r30, r30
    5d12:	ff 1f       	adc	r31, r31
    5d14:	49 f0       	breq	.+18     	; 0x5d28 <exp+0x4e>
    5d16:	fe 57       	subi	r31, 0x7E	; 126
    5d18:	e0 68       	ori	r30, 0x80	; 128
    5d1a:	44 27       	eor	r20, r20
    5d1c:	ee 0f       	add	r30, r30
    5d1e:	44 1f       	adc	r20, r20
    5d20:	fa 95       	dec	r31
    5d22:	e1 f7       	brne	.-8      	; 0x5d1c <exp+0x42>
    5d24:	41 95       	neg	r20
    5d26:	55 0b       	sbc	r21, r21
    5d28:	32 d0       	rcall	.+100    	; 0x5d8e <ldexp>
    5d2a:	0f 90       	pop	r0
    5d2c:	07 fe       	sbrs	r0, 7
    5d2e:	26 c0       	rjmp	.+76     	; 0x5d7c <inverse>
    5d30:	08 95       	ret

00005d32 <__fp_powser>:
    5d32:	df 93       	push	r29
    5d34:	cf 93       	push	r28
    5d36:	1f 93       	push	r17
    5d38:	0f 93       	push	r16
    5d3a:	ff 92       	push	r15
    5d3c:	ef 92       	push	r14
    5d3e:	df 92       	push	r13
    5d40:	7b 01       	movw	r14, r22
    5d42:	8c 01       	movw	r16, r24
    5d44:	68 94       	set
    5d46:	05 c0       	rjmp	.+10     	; 0x5d52 <__fp_powser+0x20>
    5d48:	da 2e       	mov	r13, r26
    5d4a:	ef 01       	movw	r28, r30
    5d4c:	1e df       	rcall	.-452    	; 0x5b8a <__mulsf3x>
    5d4e:	fe 01       	movw	r30, r28
    5d50:	e8 94       	clt
    5d52:	a5 91       	lpm	r26, Z+
    5d54:	25 91       	lpm	r18, Z+
    5d56:	35 91       	lpm	r19, Z+
    5d58:	45 91       	lpm	r20, Z+
    5d5a:	55 91       	lpm	r21, Z+
    5d5c:	ae f3       	brts	.-22     	; 0x5d48 <__fp_powser+0x16>
    5d5e:	ef 01       	movw	r28, r30
    5d60:	d4 d0       	rcall	.+424    	; 0x5f0a <__addsf3x>
    5d62:	fe 01       	movw	r30, r28
    5d64:	97 01       	movw	r18, r14
    5d66:	a8 01       	movw	r20, r16
    5d68:	da 94       	dec	r13
    5d6a:	79 f7       	brne	.-34     	; 0x5d4a <__fp_powser+0x18>
    5d6c:	df 90       	pop	r13
    5d6e:	ef 90       	pop	r14
    5d70:	ff 90       	pop	r15
    5d72:	0f 91       	pop	r16
    5d74:	1f 91       	pop	r17
    5d76:	cf 91       	pop	r28
    5d78:	df 91       	pop	r29
    5d7a:	08 95       	ret

00005d7c <inverse>:
    5d7c:	9b 01       	movw	r18, r22
    5d7e:	ac 01       	movw	r20, r24
    5d80:	60 e0       	ldi	r22, 0x00	; 0
    5d82:	70 e0       	ldi	r23, 0x00	; 0
    5d84:	80 e8       	ldi	r24, 0x80	; 128
    5d86:	9f e3       	ldi	r25, 0x3F	; 63
    5d88:	cd cd       	rjmp	.-1126   	; 0x5924 <__divsf3>
    5d8a:	a2 ce       	rjmp	.-700    	; 0x5ad0 <__fp_inf>
    5d8c:	11 c1       	rjmp	.+546    	; 0x5fb0 <__fp_mpack>

00005d8e <ldexp>:
    5d8e:	d0 de       	rcall	.-608    	; 0x5b30 <__fp_splitA>
    5d90:	e8 f3       	brcs	.-6      	; 0x5d8c <inverse+0x10>
    5d92:	99 23       	and	r25, r25
    5d94:	d9 f3       	breq	.-10     	; 0x5d8c <inverse+0x10>
    5d96:	94 0f       	add	r25, r20
    5d98:	51 1d       	adc	r21, r1
    5d9a:	bb f3       	brvs	.-18     	; 0x5d8a <inverse+0xe>
    5d9c:	91 50       	subi	r25, 0x01	; 1
    5d9e:	50 40       	sbci	r21, 0x00	; 0
    5da0:	94 f0       	brlt	.+36     	; 0x5dc6 <ldexp+0x38>
    5da2:	59 f0       	breq	.+22     	; 0x5dba <ldexp+0x2c>
    5da4:	88 23       	and	r24, r24
    5da6:	32 f0       	brmi	.+12     	; 0x5db4 <ldexp+0x26>
    5da8:	66 0f       	add	r22, r22
    5daa:	77 1f       	adc	r23, r23
    5dac:	88 1f       	adc	r24, r24
    5dae:	91 50       	subi	r25, 0x01	; 1
    5db0:	50 40       	sbci	r21, 0x00	; 0
    5db2:	c1 f7       	brne	.-16     	; 0x5da4 <ldexp+0x16>
    5db4:	9e 3f       	cpi	r25, 0xFE	; 254
    5db6:	51 05       	cpc	r21, r1
    5db8:	44 f7       	brge	.-48     	; 0x5d8a <inverse+0xe>
    5dba:	88 0f       	add	r24, r24
    5dbc:	91 1d       	adc	r25, r1
    5dbe:	96 95       	lsr	r25
    5dc0:	87 95       	ror	r24
    5dc2:	97 f9       	bld	r25, 7
    5dc4:	08 95       	ret
    5dc6:	5f 3f       	cpi	r21, 0xFF	; 255
    5dc8:	ac f0       	brlt	.+42     	; 0x5df4 <ldexp+0x66>
    5dca:	98 3e       	cpi	r25, 0xE8	; 232
    5dcc:	9c f0       	brlt	.+38     	; 0x5df4 <ldexp+0x66>
    5dce:	bb 27       	eor	r27, r27
    5dd0:	86 95       	lsr	r24
    5dd2:	77 95       	ror	r23
    5dd4:	67 95       	ror	r22
    5dd6:	b7 95       	ror	r27
    5dd8:	08 f4       	brcc	.+2      	; 0x5ddc <ldexp+0x4e>
    5dda:	b1 60       	ori	r27, 0x01	; 1
    5ddc:	93 95       	inc	r25
    5dde:	c1 f7       	brne	.-16     	; 0x5dd0 <ldexp+0x42>
    5de0:	bb 0f       	add	r27, r27
    5de2:	58 f7       	brcc	.-42     	; 0x5dba <ldexp+0x2c>
    5de4:	11 f4       	brne	.+4      	; 0x5dea <ldexp+0x5c>
    5de6:	60 ff       	sbrs	r22, 0
    5de8:	e8 cf       	rjmp	.-48     	; 0x5dba <ldexp+0x2c>
    5dea:	6f 5f       	subi	r22, 0xFF	; 255
    5dec:	7f 4f       	sbci	r23, 0xFF	; 255
    5dee:	8f 4f       	sbci	r24, 0xFF	; 255
    5df0:	9f 4f       	sbci	r25, 0xFF	; 255
    5df2:	e3 cf       	rjmp	.-58     	; 0x5dba <ldexp+0x2c>
    5df4:	b8 ce       	rjmp	.-656    	; 0x5b66 <__fp_szero>
    5df6:	0e f0       	brts	.+2      	; 0x5dfa <ldexp+0x6c>
    5df8:	db c0       	rjmp	.+438    	; 0x5fb0 <__fp_mpack>
    5dfa:	70 ce       	rjmp	.-800    	; 0x5adc <__fp_nan>
    5dfc:	68 94       	set
    5dfe:	68 ce       	rjmp	.-816    	; 0x5ad0 <__fp_inf>

00005e00 <log>:
    5e00:	97 de       	rcall	.-722    	; 0x5b30 <__fp_splitA>
    5e02:	c8 f3       	brcs	.-14     	; 0x5df6 <ldexp+0x68>
    5e04:	99 23       	and	r25, r25
    5e06:	d1 f3       	breq	.-12     	; 0x5dfc <ldexp+0x6e>
    5e08:	c6 f3       	brts	.-16     	; 0x5dfa <ldexp+0x6c>
    5e0a:	df 93       	push	r29
    5e0c:	cf 93       	push	r28
    5e0e:	1f 93       	push	r17
    5e10:	0f 93       	push	r16
    5e12:	ff 92       	push	r15
    5e14:	c9 2f       	mov	r28, r25
    5e16:	dd 27       	eor	r29, r29
    5e18:	88 23       	and	r24, r24
    5e1a:	2a f0       	brmi	.+10     	; 0x5e26 <log+0x26>
    5e1c:	21 97       	sbiw	r28, 0x01	; 1
    5e1e:	66 0f       	add	r22, r22
    5e20:	77 1f       	adc	r23, r23
    5e22:	88 1f       	adc	r24, r24
    5e24:	da f7       	brpl	.-10     	; 0x5e1c <log+0x1c>
    5e26:	20 e0       	ldi	r18, 0x00	; 0
    5e28:	30 e0       	ldi	r19, 0x00	; 0
    5e2a:	40 e8       	ldi	r20, 0x80	; 128
    5e2c:	5f eb       	ldi	r21, 0xBF	; 191
    5e2e:	9f e3       	ldi	r25, 0x3F	; 63
    5e30:	88 39       	cpi	r24, 0x98	; 152
    5e32:	20 f0       	brcs	.+8      	; 0x5e3c <log+0x3c>
    5e34:	80 3e       	cpi	r24, 0xE0	; 224
    5e36:	30 f0       	brcs	.+12     	; 0x5e44 <log+0x44>
    5e38:	21 96       	adiw	r28, 0x01	; 1
    5e3a:	8f 77       	andi	r24, 0x7F	; 127
    5e3c:	55 d0       	rcall	.+170    	; 0x5ee8 <__addsf3>
    5e3e:	ec e0       	ldi	r30, 0x0C	; 12
    5e40:	f1 e0       	ldi	r31, 0x01	; 1
    5e42:	03 c0       	rjmp	.+6      	; 0x5e4a <log+0x4a>
    5e44:	51 d0       	rcall	.+162    	; 0x5ee8 <__addsf3>
    5e46:	e9 e3       	ldi	r30, 0x39	; 57
    5e48:	f1 e0       	ldi	r31, 0x01	; 1
    5e4a:	73 df       	rcall	.-282    	; 0x5d32 <__fp_powser>
    5e4c:	8b 01       	movw	r16, r22
    5e4e:	be 01       	movw	r22, r28
    5e50:	ec 01       	movw	r28, r24
    5e52:	fb 2e       	mov	r15, r27
    5e54:	6f 57       	subi	r22, 0x7F	; 127
    5e56:	71 09       	sbc	r23, r1
    5e58:	75 95       	asr	r23
    5e5a:	77 1f       	adc	r23, r23
    5e5c:	88 0b       	sbc	r24, r24
    5e5e:	99 0b       	sbc	r25, r25
    5e60:	fc dd       	rcall	.-1032   	; 0x5a5a <__floatsisf>
    5e62:	28 e1       	ldi	r18, 0x18	; 24
    5e64:	32 e7       	ldi	r19, 0x72	; 114
    5e66:	41 e3       	ldi	r20, 0x31	; 49
    5e68:	5f e3       	ldi	r21, 0x3F	; 63
    5e6a:	8f de       	rcall	.-738    	; 0x5b8a <__mulsf3x>
    5e6c:	af 2d       	mov	r26, r15
    5e6e:	98 01       	movw	r18, r16
    5e70:	ae 01       	movw	r20, r28
    5e72:	ff 90       	pop	r15
    5e74:	0f 91       	pop	r16
    5e76:	1f 91       	pop	r17
    5e78:	cf 91       	pop	r28
    5e7a:	df 91       	pop	r29
    5e7c:	46 d0       	rcall	.+140    	; 0x5f0a <__addsf3x>
    5e7e:	3f ce       	rjmp	.-898    	; 0x5afe <__fp_round>

00005e80 <modf>:
    5e80:	fa 01       	movw	r30, r20
    5e82:	dc 01       	movw	r26, r24
    5e84:	aa 0f       	add	r26, r26
    5e86:	bb 1f       	adc	r27, r27
    5e88:	9b 01       	movw	r18, r22
    5e8a:	ac 01       	movw	r20, r24
    5e8c:	bf 57       	subi	r27, 0x7F	; 127
    5e8e:	28 f4       	brcc	.+10     	; 0x5e9a <modf+0x1a>
    5e90:	22 27       	eor	r18, r18
    5e92:	33 27       	eor	r19, r19
    5e94:	44 27       	eor	r20, r20
    5e96:	50 78       	andi	r21, 0x80	; 128
    5e98:	1f c0       	rjmp	.+62     	; 0x5ed8 <modf+0x58>
    5e9a:	b7 51       	subi	r27, 0x17	; 23
    5e9c:	88 f4       	brcc	.+34     	; 0x5ec0 <modf+0x40>
    5e9e:	ab 2f       	mov	r26, r27
    5ea0:	00 24       	eor	r0, r0
    5ea2:	46 95       	lsr	r20
    5ea4:	37 95       	ror	r19
    5ea6:	27 95       	ror	r18
    5ea8:	01 1c       	adc	r0, r1
    5eaa:	a3 95       	inc	r26
    5eac:	d2 f3       	brmi	.-12     	; 0x5ea2 <modf+0x22>
    5eae:	00 20       	and	r0, r0
    5eb0:	69 f0       	breq	.+26     	; 0x5ecc <modf+0x4c>
    5eb2:	22 0f       	add	r18, r18
    5eb4:	33 1f       	adc	r19, r19
    5eb6:	44 1f       	adc	r20, r20
    5eb8:	b3 95       	inc	r27
    5eba:	da f3       	brmi	.-10     	; 0x5eb2 <modf+0x32>
    5ebc:	0d d0       	rcall	.+26     	; 0x5ed8 <modf+0x58>
    5ebe:	13 c0       	rjmp	.+38     	; 0x5ee6 <__subsf3>
    5ec0:	61 30       	cpi	r22, 0x01	; 1
    5ec2:	71 05       	cpc	r23, r1
    5ec4:	a0 e8       	ldi	r26, 0x80	; 128
    5ec6:	8a 07       	cpc	r24, r26
    5ec8:	b9 46       	sbci	r27, 0x69	; 105
    5eca:	30 f4       	brcc	.+12     	; 0x5ed8 <modf+0x58>
    5ecc:	9b 01       	movw	r18, r22
    5ece:	ac 01       	movw	r20, r24
    5ed0:	66 27       	eor	r22, r22
    5ed2:	77 27       	eor	r23, r23
    5ed4:	88 27       	eor	r24, r24
    5ed6:	90 78       	andi	r25, 0x80	; 128
    5ed8:	30 96       	adiw	r30, 0x00	; 0
    5eda:	21 f0       	breq	.+8      	; 0x5ee4 <modf+0x64>
    5edc:	20 83       	st	Z, r18
    5ede:	31 83       	std	Z+1, r19	; 0x01
    5ee0:	42 83       	std	Z+2, r20	; 0x02
    5ee2:	53 83       	std	Z+3, r21	; 0x03
    5ee4:	08 95       	ret

00005ee6 <__subsf3>:
    5ee6:	50 58       	subi	r21, 0x80	; 128

00005ee8 <__addsf3>:
    5ee8:	bb 27       	eor	r27, r27
    5eea:	aa 27       	eor	r26, r26
    5eec:	0e d0       	rcall	.+28     	; 0x5f0a <__addsf3x>
    5eee:	07 ce       	rjmp	.-1010   	; 0x5afe <__fp_round>
    5ef0:	f8 dd       	rcall	.-1040   	; 0x5ae2 <__fp_pscA>
    5ef2:	30 f0       	brcs	.+12     	; 0x5f00 <__addsf3+0x18>
    5ef4:	fd dd       	rcall	.-1030   	; 0x5af0 <__fp_pscB>
    5ef6:	20 f0       	brcs	.+8      	; 0x5f00 <__addsf3+0x18>
    5ef8:	31 f4       	brne	.+12     	; 0x5f06 <__addsf3+0x1e>
    5efa:	9f 3f       	cpi	r25, 0xFF	; 255
    5efc:	11 f4       	brne	.+4      	; 0x5f02 <__addsf3+0x1a>
    5efe:	1e f4       	brtc	.+6      	; 0x5f06 <__addsf3+0x1e>
    5f00:	ed cd       	rjmp	.-1062   	; 0x5adc <__fp_nan>
    5f02:	0e f4       	brtc	.+2      	; 0x5f06 <__addsf3+0x1e>
    5f04:	e0 95       	com	r30
    5f06:	e7 fb       	bst	r30, 7
    5f08:	e3 cd       	rjmp	.-1082   	; 0x5ad0 <__fp_inf>

00005f0a <__addsf3x>:
    5f0a:	e9 2f       	mov	r30, r25
    5f0c:	09 de       	rcall	.-1006   	; 0x5b20 <__fp_split3>
    5f0e:	80 f3       	brcs	.-32     	; 0x5ef0 <__addsf3+0x8>
    5f10:	ba 17       	cp	r27, r26
    5f12:	62 07       	cpc	r22, r18
    5f14:	73 07       	cpc	r23, r19
    5f16:	84 07       	cpc	r24, r20
    5f18:	95 07       	cpc	r25, r21
    5f1a:	18 f0       	brcs	.+6      	; 0x5f22 <__addsf3x+0x18>
    5f1c:	71 f4       	brne	.+28     	; 0x5f3a <__addsf3x+0x30>
    5f1e:	9e f5       	brtc	.+102    	; 0x5f86 <__addsf3x+0x7c>
    5f20:	21 ce       	rjmp	.-958    	; 0x5b64 <__fp_zero>
    5f22:	0e f4       	brtc	.+2      	; 0x5f26 <__addsf3x+0x1c>
    5f24:	e0 95       	com	r30
    5f26:	0b 2e       	mov	r0, r27
    5f28:	ba 2f       	mov	r27, r26
    5f2a:	a0 2d       	mov	r26, r0
    5f2c:	0b 01       	movw	r0, r22
    5f2e:	b9 01       	movw	r22, r18
    5f30:	90 01       	movw	r18, r0
    5f32:	0c 01       	movw	r0, r24
    5f34:	ca 01       	movw	r24, r20
    5f36:	a0 01       	movw	r20, r0
    5f38:	11 24       	eor	r1, r1
    5f3a:	ff 27       	eor	r31, r31
    5f3c:	59 1b       	sub	r21, r25
    5f3e:	99 f0       	breq	.+38     	; 0x5f66 <__addsf3x+0x5c>
    5f40:	59 3f       	cpi	r21, 0xF9	; 249
    5f42:	50 f4       	brcc	.+20     	; 0x5f58 <__addsf3x+0x4e>
    5f44:	50 3e       	cpi	r21, 0xE0	; 224
    5f46:	68 f1       	brcs	.+90     	; 0x5fa2 <__addsf3x+0x98>
    5f48:	1a 16       	cp	r1, r26
    5f4a:	f0 40       	sbci	r31, 0x00	; 0
    5f4c:	a2 2f       	mov	r26, r18
    5f4e:	23 2f       	mov	r18, r19
    5f50:	34 2f       	mov	r19, r20
    5f52:	44 27       	eor	r20, r20
    5f54:	58 5f       	subi	r21, 0xF8	; 248
    5f56:	f3 cf       	rjmp	.-26     	; 0x5f3e <__addsf3x+0x34>
    5f58:	46 95       	lsr	r20
    5f5a:	37 95       	ror	r19
    5f5c:	27 95       	ror	r18
    5f5e:	a7 95       	ror	r26
    5f60:	f0 40       	sbci	r31, 0x00	; 0
    5f62:	53 95       	inc	r21
    5f64:	c9 f7       	brne	.-14     	; 0x5f58 <__addsf3x+0x4e>
    5f66:	7e f4       	brtc	.+30     	; 0x5f86 <__addsf3x+0x7c>
    5f68:	1f 16       	cp	r1, r31
    5f6a:	ba 0b       	sbc	r27, r26
    5f6c:	62 0b       	sbc	r22, r18
    5f6e:	73 0b       	sbc	r23, r19
    5f70:	84 0b       	sbc	r24, r20
    5f72:	ba f0       	brmi	.+46     	; 0x5fa2 <__addsf3x+0x98>
    5f74:	91 50       	subi	r25, 0x01	; 1
    5f76:	a1 f0       	breq	.+40     	; 0x5fa0 <__addsf3x+0x96>
    5f78:	ff 0f       	add	r31, r31
    5f7a:	bb 1f       	adc	r27, r27
    5f7c:	66 1f       	adc	r22, r22
    5f7e:	77 1f       	adc	r23, r23
    5f80:	88 1f       	adc	r24, r24
    5f82:	c2 f7       	brpl	.-16     	; 0x5f74 <__addsf3x+0x6a>
    5f84:	0e c0       	rjmp	.+28     	; 0x5fa2 <__addsf3x+0x98>
    5f86:	ba 0f       	add	r27, r26
    5f88:	62 1f       	adc	r22, r18
    5f8a:	73 1f       	adc	r23, r19
    5f8c:	84 1f       	adc	r24, r20
    5f8e:	48 f4       	brcc	.+18     	; 0x5fa2 <__addsf3x+0x98>
    5f90:	87 95       	ror	r24
    5f92:	77 95       	ror	r23
    5f94:	67 95       	ror	r22
    5f96:	b7 95       	ror	r27
    5f98:	f7 95       	ror	r31
    5f9a:	9e 3f       	cpi	r25, 0xFE	; 254
    5f9c:	08 f0       	brcs	.+2      	; 0x5fa0 <__addsf3x+0x96>
    5f9e:	b3 cf       	rjmp	.-154    	; 0x5f06 <__addsf3+0x1e>
    5fa0:	93 95       	inc	r25
    5fa2:	88 0f       	add	r24, r24
    5fa4:	08 f0       	brcs	.+2      	; 0x5fa8 <__addsf3x+0x9e>
    5fa6:	99 27       	eor	r25, r25
    5fa8:	ee 0f       	add	r30, r30
    5faa:	97 95       	ror	r25
    5fac:	87 95       	ror	r24
    5fae:	08 95       	ret

00005fb0 <__fp_mpack>:
    5fb0:	9f 3f       	cpi	r25, 0xFF	; 255
    5fb2:	49 f0       	breq	.+18     	; 0x5fc6 <__fp_mpack+0x16>
    5fb4:	91 50       	subi	r25, 0x01	; 1
    5fb6:	28 f4       	brcc	.+10     	; 0x5fc2 <__fp_mpack+0x12>
    5fb8:	86 95       	lsr	r24
    5fba:	77 95       	ror	r23
    5fbc:	67 95       	ror	r22
    5fbe:	b7 95       	ror	r27
    5fc0:	9f 5f       	subi	r25, 0xFF	; 255
    5fc2:	80 38       	cpi	r24, 0x80	; 128
    5fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc6:	88 0f       	add	r24, r24
    5fc8:	96 95       	lsr	r25
    5fca:	87 95       	ror	r24
    5fcc:	97 f9       	bld	r25, 7
    5fce:	08 95       	ret

00005fd0 <__mulsi3>:
    5fd0:	62 9f       	mul	r22, r18
    5fd2:	d0 01       	movw	r26, r0
    5fd4:	73 9f       	mul	r23, r19
    5fd6:	f0 01       	movw	r30, r0
    5fd8:	82 9f       	mul	r24, r18
    5fda:	e0 0d       	add	r30, r0
    5fdc:	f1 1d       	adc	r31, r1
    5fde:	64 9f       	mul	r22, r20
    5fe0:	e0 0d       	add	r30, r0
    5fe2:	f1 1d       	adc	r31, r1
    5fe4:	92 9f       	mul	r25, r18
    5fe6:	f0 0d       	add	r31, r0
    5fe8:	83 9f       	mul	r24, r19
    5fea:	f0 0d       	add	r31, r0
    5fec:	74 9f       	mul	r23, r20
    5fee:	f0 0d       	add	r31, r0
    5ff0:	65 9f       	mul	r22, r21
    5ff2:	f0 0d       	add	r31, r0
    5ff4:	99 27       	eor	r25, r25
    5ff6:	72 9f       	mul	r23, r18
    5ff8:	b0 0d       	add	r27, r0
    5ffa:	e1 1d       	adc	r30, r1
    5ffc:	f9 1f       	adc	r31, r25
    5ffe:	63 9f       	mul	r22, r19
    6000:	b0 0d       	add	r27, r0
    6002:	e1 1d       	adc	r30, r1
    6004:	f9 1f       	adc	r31, r25
    6006:	bd 01       	movw	r22, r26
    6008:	cf 01       	movw	r24, r30
    600a:	11 24       	eor	r1, r1
    600c:	08 95       	ret

0000600e <__udivmodhi4>:
    600e:	aa 1b       	sub	r26, r26
    6010:	bb 1b       	sub	r27, r27
    6012:	51 e1       	ldi	r21, 0x11	; 17
    6014:	07 c0       	rjmp	.+14     	; 0x6024 <__udivmodhi4_ep>

00006016 <__udivmodhi4_loop>:
    6016:	aa 1f       	adc	r26, r26
    6018:	bb 1f       	adc	r27, r27
    601a:	a6 17       	cp	r26, r22
    601c:	b7 07       	cpc	r27, r23
    601e:	10 f0       	brcs	.+4      	; 0x6024 <__udivmodhi4_ep>
    6020:	a6 1b       	sub	r26, r22
    6022:	b7 0b       	sbc	r27, r23

00006024 <__udivmodhi4_ep>:
    6024:	88 1f       	adc	r24, r24
    6026:	99 1f       	adc	r25, r25
    6028:	5a 95       	dec	r21
    602a:	a9 f7       	brne	.-22     	; 0x6016 <__udivmodhi4_loop>
    602c:	80 95       	com	r24
    602e:	90 95       	com	r25
    6030:	bc 01       	movw	r22, r24
    6032:	cd 01       	movw	r24, r26
    6034:	08 95       	ret

00006036 <__divmodhi4>:
    6036:	97 fb       	bst	r25, 7
    6038:	09 2e       	mov	r0, r25
    603a:	07 26       	eor	r0, r23
    603c:	0a d0       	rcall	.+20     	; 0x6052 <__divmodhi4_neg1>
    603e:	77 fd       	sbrc	r23, 7
    6040:	04 d0       	rcall	.+8      	; 0x604a <__divmodhi4_neg2>
    6042:	e5 df       	rcall	.-54     	; 0x600e <__udivmodhi4>
    6044:	06 d0       	rcall	.+12     	; 0x6052 <__divmodhi4_neg1>
    6046:	00 20       	and	r0, r0
    6048:	1a f4       	brpl	.+6      	; 0x6050 <__divmodhi4_exit>

0000604a <__divmodhi4_neg2>:
    604a:	70 95       	com	r23
    604c:	61 95       	neg	r22
    604e:	7f 4f       	sbci	r23, 0xFF	; 255

00006050 <__divmodhi4_exit>:
    6050:	08 95       	ret

00006052 <__divmodhi4_neg1>:
    6052:	f6 f7       	brtc	.-4      	; 0x6050 <__divmodhi4_exit>
    6054:	90 95       	com	r25
    6056:	81 95       	neg	r24
    6058:	9f 4f       	sbci	r25, 0xFF	; 255
    605a:	08 95       	ret

0000605c <__udivmodsi4>:
    605c:	a1 e2       	ldi	r26, 0x21	; 33
    605e:	1a 2e       	mov	r1, r26
    6060:	aa 1b       	sub	r26, r26
    6062:	bb 1b       	sub	r27, r27
    6064:	fd 01       	movw	r30, r26
    6066:	0d c0       	rjmp	.+26     	; 0x6082 <__udivmodsi4_ep>

00006068 <__udivmodsi4_loop>:
    6068:	aa 1f       	adc	r26, r26
    606a:	bb 1f       	adc	r27, r27
    606c:	ee 1f       	adc	r30, r30
    606e:	ff 1f       	adc	r31, r31
    6070:	a2 17       	cp	r26, r18
    6072:	b3 07       	cpc	r27, r19
    6074:	e4 07       	cpc	r30, r20
    6076:	f5 07       	cpc	r31, r21
    6078:	20 f0       	brcs	.+8      	; 0x6082 <__udivmodsi4_ep>
    607a:	a2 1b       	sub	r26, r18
    607c:	b3 0b       	sbc	r27, r19
    607e:	e4 0b       	sbc	r30, r20
    6080:	f5 0b       	sbc	r31, r21

00006082 <__udivmodsi4_ep>:
    6082:	66 1f       	adc	r22, r22
    6084:	77 1f       	adc	r23, r23
    6086:	88 1f       	adc	r24, r24
    6088:	99 1f       	adc	r25, r25
    608a:	1a 94       	dec	r1
    608c:	69 f7       	brne	.-38     	; 0x6068 <__udivmodsi4_loop>
    608e:	60 95       	com	r22
    6090:	70 95       	com	r23
    6092:	80 95       	com	r24
    6094:	90 95       	com	r25
    6096:	9b 01       	movw	r18, r22
    6098:	ac 01       	movw	r20, r24
    609a:	bd 01       	movw	r22, r26
    609c:	cf 01       	movw	r24, r30
    609e:	08 95       	ret

000060a0 <__divmodsi4>:
    60a0:	97 fb       	bst	r25, 7
    60a2:	09 2e       	mov	r0, r25
    60a4:	05 26       	eor	r0, r21
    60a6:	0e d0       	rcall	.+28     	; 0x60c4 <__divmodsi4_neg1>
    60a8:	57 fd       	sbrc	r21, 7
    60aa:	04 d0       	rcall	.+8      	; 0x60b4 <__divmodsi4_neg2>
    60ac:	d7 df       	rcall	.-82     	; 0x605c <__udivmodsi4>
    60ae:	0a d0       	rcall	.+20     	; 0x60c4 <__divmodsi4_neg1>
    60b0:	00 1c       	adc	r0, r0
    60b2:	38 f4       	brcc	.+14     	; 0x60c2 <__divmodsi4_exit>

000060b4 <__divmodsi4_neg2>:
    60b4:	50 95       	com	r21
    60b6:	40 95       	com	r20
    60b8:	30 95       	com	r19
    60ba:	21 95       	neg	r18
    60bc:	3f 4f       	sbci	r19, 0xFF	; 255
    60be:	4f 4f       	sbci	r20, 0xFF	; 255
    60c0:	5f 4f       	sbci	r21, 0xFF	; 255

000060c2 <__divmodsi4_exit>:
    60c2:	08 95       	ret

000060c4 <__divmodsi4_neg1>:
    60c4:	f6 f7       	brtc	.-4      	; 0x60c2 <__divmodsi4_exit>
    60c6:	90 95       	com	r25
    60c8:	80 95       	com	r24
    60ca:	70 95       	com	r23
    60cc:	61 95       	neg	r22
    60ce:	7f 4f       	sbci	r23, 0xFF	; 255
    60d0:	8f 4f       	sbci	r24, 0xFF	; 255
    60d2:	9f 4f       	sbci	r25, 0xFF	; 255
    60d4:	08 95       	ret

000060d6 <__tablejump2__>:
    60d6:	ee 0f       	add	r30, r30
    60d8:	ff 1f       	adc	r31, r31

000060da <__tablejump__>:
    60da:	05 90       	lpm	r0, Z+
    60dc:	f4 91       	lpm	r31, Z+
    60de:	e0 2d       	mov	r30, r0
    60e0:	09 94       	ijmp

000060e2 <_exit>:
    60e2:	f8 94       	cli

000060e4 <__stop_program>:
    60e4:	ff cf       	rjmp	.-2      	; 0x60e4 <__stop_program>
