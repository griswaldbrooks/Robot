
lbRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800200  000044e2  00004576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000044e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000721  00800292  00800292  00004608  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00004608  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001336  00000000  00000000  00004708  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a80  00000000  00000000  00005a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f3b  00000000  00000000  000094be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002eed  00000000  00000000  0000a3f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e90  00000000  00000000  0000d2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001769  00000000  00000000  0000e178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b5b  00000000  00000000  0000f8e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0001143c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 01 	jmp	0x260	; 0x260 <__ctors_end>
       4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
       8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
       c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      10:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      14:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      18:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      1c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      20:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      24:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      28:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      2c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      30:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      34:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__vector_13>
      38:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__vector_14>
      3c:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_15>
      40:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_16>
      44:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      48:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__vector_18>
      4c:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__vector_19>
      50:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_20>
      54:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__vector_21>
      58:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__vector_22>
      5c:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__vector_23>
      60:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      64:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__vector_25>
      68:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      6c:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__vector_27>
      70:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      74:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__vector_29>
      78:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      7c:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__vector_31>
      80:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__vector_32>
      84:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__vector_33>
      88:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__vector_34>
      8c:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__vector_35>
      90:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__vector_36>
      94:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      98:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__vector_38>
      9c:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__vector_39>
      a0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      a4:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__vector_41>
      a8:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__vector_42>
      ac:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__vector_43>
      b0:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__vector_44>
      b4:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__vector_45>
      b8:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__vector_46>
      bc:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__vector_47>
      c0:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_48>
      c4:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__vector_49>
      c8:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_50>
      cc:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <__vector_51>
      d0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      d4:	0c 94 37 13 	jmp	0x266e	; 0x266e <__vector_53>
      d8:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__vector_54>
      dc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      e0:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__vector_56>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <navupdate+0x4c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__c.2976>:
     166:	53 54 41 52 54 21 21 21 21 21 21 21 21 21 21 21     START!!!!!!!!!!!
     176:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
     186:	21 0a 00                                            !..

00000189 <__c.2959>:
     189:	53 74 61 72 74 69 6e 67 20 70 72 6f 67 72 61 6d     Starting program
     199:	2e 0a 00                                            ...

0000019c <__c.2939>:
     19c:	09 6c 69 6e 5f 76 3a 20 00                          .lin_v: .

000001a5 <__c.2937>:
     1a5:	61 6e 67 5f 76 3a 20 00                             ang_v: .

000001ad <__c.2935>:
     1ad:	44 69 73 74 5f 7a 65 72 6f 3a 20 00                 Dist_zero: .

000001b9 <__c.2905>:
     1b9:	09 6c 69 6e 5f 76 3a 20 00                          .lin_v: .

000001c2 <__c.2903>:
     1c2:	61 6e 67 5f 76 3a 20 00                             ang_v: .

000001ca <__c.2851>:
     1ca:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 43     Initialization C
     1da:	6f 6d 70 6c 65 74 65 20 0d 0a 00                    omplete ...

000001e5 <__c.2846>:
     1e5:	2e 00                                               ..

000001e7 <__c.2844>:
     1e7:	0d 0a 53 79 73 74 65 6d 20 57 61 72 6d 65 64 20     ..System Warmed 
     1f7:	55 70 00                                            Up.

000001fa <TimerPrescaleFactor>:
     1fa:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000206 <Timer2PrescaleFactor>:
     206:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

00000216 <__c.1991>:
     216:	42 41 44 5f 76 65 63 74 20 63 61 6c 6c 65 64 21     BAD_vect called!
	...

00000227 <HexChars>:
     227:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

00000238 <__c.1708>:
     238:	25 64 20 00                                         %d .

0000023c <__c.1705>:
     23c:	20 44 69 73 74 61 6e 63 65 73 3a 20 00               Distances: .

00000249 <__c.1703>:
     249:	20 4d 6f 74 6f 72 20 53 70 65 65 64 3a 20 00         Motor Speed: .

00000258 <__c.1701>:
     258:	49 6e 64 65 78 3a 20 00                             Index: .

00000260 <__ctors_end>:
     260:	11 24       	eor	r1, r1
     262:	1f be       	out	0x3f, r1	; 63
     264:	cf ef       	ldi	r28, 0xFF	; 255
     266:	d1 e2       	ldi	r29, 0x21	; 33
     268:	de bf       	out	0x3e, r29	; 62
     26a:	cd bf       	out	0x3d, r28	; 61

0000026c <__do_copy_data>:
     26c:	12 e0       	ldi	r17, 0x02	; 2
     26e:	a0 e0       	ldi	r26, 0x00	; 0
     270:	b2 e0       	ldi	r27, 0x02	; 2
     272:	e2 ee       	ldi	r30, 0xE2	; 226
     274:	f4 e4       	ldi	r31, 0x44	; 68
     276:	02 c0       	rjmp	.+4      	; 0x27c <.do_copy_data_start>

00000278 <.do_copy_data_loop>:
     278:	05 90       	lpm	r0, Z+
     27a:	0d 92       	st	X+, r0

0000027c <.do_copy_data_start>:
     27c:	a2 39       	cpi	r26, 0x92	; 146
     27e:	b1 07       	cpc	r27, r17
     280:	d9 f7       	brne	.-10     	; 0x278 <.do_copy_data_loop>

00000282 <__do_clear_bss>:
     282:	19 e0       	ldi	r17, 0x09	; 9
     284:	a2 e9       	ldi	r26, 0x92	; 146
     286:	b2 e0       	ldi	r27, 0x02	; 2
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	a3 3b       	cpi	r26, 0xB3	; 179
     28e:	b1 07       	cpc	r27, r17
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	0e 94 2e 09 	call	0x125c	; 0x125c <main>
     296:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <exit>

0000029a <__bad_interrupt>:
     29a:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__vector_default>

0000029e <PWM_Init_timer1_LED>:

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     29e:	89 30       	cpi	r24, 0x09	; 9
     2a0:	49 f4       	brne	.+18     	; 0x2b4 <PWM_Init_timer1_LED+0x16>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     2a2:	80 91 80 00 	lds	r24, 0x0080
     2a6:	82 60       	ori	r24, 0x02	; 2
     2a8:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,PWM10);
     2ac:	80 91 80 00 	lds	r24, 0x0080
     2b0:	8e 7f       	andi	r24, 0xFE	; 254
     2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <PWM_Init_timer1_LED+0x32>
	}
	else if( bitRes == 10 )
     2b4:	8a 30       	cpi	r24, 0x0A	; 10
     2b6:	21 f4       	brne	.+8      	; 0x2c0 <PWM_Init_timer1_LED+0x22>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     2b8:	80 91 80 00 	lds	r24, 0x0080
     2bc:	82 60       	ori	r24, 0x02	; 2
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <PWM_Init_timer1_LED+0x28>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     2c0:	80 91 80 00 	lds	r24, 0x0080
     2c4:	8d 7f       	andi	r24, 0xFD	; 253
     2c6:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,PWM10);
     2ca:	80 91 80 00 	lds	r24, 0x0080
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     2d4:	10 92 8b 00 	sts	0x008B, r1
     2d8:	10 92 8a 00 	sts	0x008A, r1
}
     2dc:	08 95       	ret

000002de <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     2de:	89 30       	cpi	r24, 0x09	; 9
     2e0:	49 f4       	brne	.+18     	; 0x2f4 <PWM_Init_timer2_H6+0x16>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
     2e2:	80 91 b0 00 	lds	r24, 0x00B0
     2e6:	82 60       	ori	r24, 0x02	; 2
     2e8:	80 93 b0 00 	sts	0x00B0, r24
		cbi(TCCR2A,PWM10);
     2ec:	80 91 b0 00 	lds	r24, 0x00B0
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	0e c0       	rjmp	.+28     	; 0x310 <PWM_Init_timer2_H6+0x32>
	}
	else if( bitRes == 10 )
     2f4:	8a 30       	cpi	r24, 0x0A	; 10
     2f6:	21 f4       	brne	.+8      	; 0x300 <PWM_Init_timer2_H6+0x22>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
     2f8:	80 91 b0 00 	lds	r24, 0x00B0
     2fc:	82 60       	ori	r24, 0x02	; 2
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <PWM_Init_timer2_H6+0x28>
		sbi(TCCR2A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
     300:	80 91 b0 00 	lds	r24, 0x00B0
     304:	8d 7f       	andi	r24, 0xFD	; 253
     306:	80 93 b0 00 	sts	0x00B0, r24
		sbi(TCCR2A,PWM10);
     30a:	80 91 b0 00 	lds	r24, 0x00B0
     30e:	81 60       	ori	r24, 0x01	; 1
     310:	80 93 b0 00 	sts	0x00B0, r24
	}
	// clear output compare values
	OCR2B = 0;
     314:	10 92 b4 00 	sts	0x00B4, r1
}
     318:	08 95       	ret

0000031a <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     31a:	89 30       	cpi	r24, 0x09	; 9
     31c:	49 f4       	brne	.+18     	; 0x330 <PWM_Init_timer3_E3+0x16>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
     31e:	80 91 90 00 	lds	r24, 0x0090
     322:	82 60       	ori	r24, 0x02	; 2
     324:	80 93 90 00 	sts	0x0090, r24
		cbi(TCCR3A,PWM10);
     328:	80 91 90 00 	lds	r24, 0x0090
     32c:	8e 7f       	andi	r24, 0xFE	; 254
     32e:	0e c0       	rjmp	.+28     	; 0x34c <PWM_Init_timer3_E3+0x32>
	}
	else if( bitRes == 10 )
     330:	8a 30       	cpi	r24, 0x0A	; 10
     332:	21 f4       	brne	.+8      	; 0x33c <PWM_Init_timer3_E3+0x22>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
     334:	80 91 90 00 	lds	r24, 0x0090
     338:	82 60       	ori	r24, 0x02	; 2
     33a:	03 c0       	rjmp	.+6      	; 0x342 <PWM_Init_timer3_E3+0x28>
		sbi(TCCR3A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
     33c:	80 91 90 00 	lds	r24, 0x0090
     340:	8d 7f       	andi	r24, 0xFD	; 253
     342:	80 93 90 00 	sts	0x0090, r24
		sbi(TCCR3A,PWM10);
     346:	80 91 90 00 	lds	r24, 0x0090
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	80 93 90 00 	sts	0x0090, r24
	}
	// clear output compare values
	OCR3A = 0;
     350:	10 92 99 00 	sts	0x0099, r1
     354:	10 92 98 00 	sts	0x0098, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     358:	08 95       	ret

0000035a <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     35a:	89 30       	cpi	r24, 0x09	; 9
     35c:	49 f4       	brne	.+18     	; 0x370 <PWM_Init_timer3_E4+0x16>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
     35e:	80 91 91 00 	lds	r24, 0x0091
     362:	82 60       	ori	r24, 0x02	; 2
     364:	80 93 91 00 	sts	0x0091, r24
		cbi(TCCR3B,PWM10);
     368:	80 91 91 00 	lds	r24, 0x0091
     36c:	8e 7f       	andi	r24, 0xFE	; 254
     36e:	0e c0       	rjmp	.+28     	; 0x38c <PWM_Init_timer3_E4+0x32>
	}
	else if( bitRes == 10 )
     370:	8a 30       	cpi	r24, 0x0A	; 10
     372:	21 f4       	brne	.+8      	; 0x37c <PWM_Init_timer3_E4+0x22>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
     374:	80 91 91 00 	lds	r24, 0x0091
     378:	82 60       	ori	r24, 0x02	; 2
     37a:	03 c0       	rjmp	.+6      	; 0x382 <PWM_Init_timer3_E4+0x28>
		sbi(TCCR3B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
     37c:	80 91 91 00 	lds	r24, 0x0091
     380:	8d 7f       	andi	r24, 0xFD	; 253
     382:	80 93 91 00 	sts	0x0091, r24
		sbi(TCCR3B,PWM10);
     386:	80 91 91 00 	lds	r24, 0x0091
     38a:	81 60       	ori	r24, 0x01	; 1
     38c:	80 93 91 00 	sts	0x0091, r24
	}
	// clear output compare values
	OCR3B = 0;
     390:	10 92 9b 00 	sts	0x009B, r1
     394:	10 92 9a 00 	sts	0x009A, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     398:	08 95       	ret

0000039a <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     39a:	89 30       	cpi	r24, 0x09	; 9
     39c:	49 f4       	brne	.+18     	; 0x3b0 <PWM_Init_timer3_E5+0x16>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
     39e:	80 91 92 00 	lds	r24, 0x0092
     3a2:	82 60       	ori	r24, 0x02	; 2
     3a4:	80 93 92 00 	sts	0x0092, r24
		cbi(TCCR3C,PWM10);
     3a8:	80 91 92 00 	lds	r24, 0x0092
     3ac:	8e 7f       	andi	r24, 0xFE	; 254
     3ae:	0e c0       	rjmp	.+28     	; 0x3cc <PWM_Init_timer3_E5+0x32>
	}
	else if( bitRes == 10 )
     3b0:	8a 30       	cpi	r24, 0x0A	; 10
     3b2:	21 f4       	brne	.+8      	; 0x3bc <PWM_Init_timer3_E5+0x22>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
     3b4:	80 91 92 00 	lds	r24, 0x0092
     3b8:	82 60       	ori	r24, 0x02	; 2
     3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <PWM_Init_timer3_E5+0x28>
		sbi(TCCR3C,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
     3bc:	80 91 92 00 	lds	r24, 0x0092
     3c0:	8d 7f       	andi	r24, 0xFD	; 253
     3c2:	80 93 92 00 	sts	0x0092, r24
		sbi(TCCR3C,PWM10);
     3c6:	80 91 92 00 	lds	r24, 0x0092
     3ca:	81 60       	ori	r24, 0x01	; 1
     3cc:	80 93 92 00 	sts	0x0092, r24
	}
	// clear output compare values
	OCR3C = 0;
     3d0:	10 92 9d 00 	sts	0x009D, r1
     3d4:	10 92 9c 00 	sts	0x009C, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     3d8:	08 95       	ret

000003da <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     3da:	89 30       	cpi	r24, 0x09	; 9
     3dc:	49 f4       	brne	.+18     	; 0x3f0 <PWM_Init_timer4_H3+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     3de:	80 91 a0 00 	lds	r24, 0x00A0
     3e2:	82 60       	ori	r24, 0x02	; 2
     3e4:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     3e8:	80 91 a0 00 	lds	r24, 0x00A0
     3ec:	8e 7f       	andi	r24, 0xFE	; 254
     3ee:	0e c0       	rjmp	.+28     	; 0x40c <PWM_Init_timer4_H3+0x32>
	}
	else if( bitRes == 10 )
     3f0:	8a 30       	cpi	r24, 0x0A	; 10
     3f2:	21 f4       	brne	.+8      	; 0x3fc <PWM_Init_timer4_H3+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     3f4:	80 91 a0 00 	lds	r24, 0x00A0
     3f8:	82 60       	ori	r24, 0x02	; 2
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <PWM_Init_timer4_H3+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     3fc:	80 91 a0 00 	lds	r24, 0x00A0
     400:	8d 7f       	andi	r24, 0xFD	; 253
     402:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     406:	80 91 a0 00 	lds	r24, 0x00A0
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4A = 0;
     410:	10 92 a9 00 	sts	0x00A9, r1
     414:	10 92 a8 00 	sts	0x00A8, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     418:	08 95       	ret

0000041a <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     41a:	89 30       	cpi	r24, 0x09	; 9
     41c:	49 f4       	brne	.+18     	; 0x430 <PWM_Init_timer4_H4+0x16>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
     41e:	80 91 a1 00 	lds	r24, 0x00A1
     422:	82 60       	ori	r24, 0x02	; 2
     424:	80 93 a1 00 	sts	0x00A1, r24
		cbi(TCCR4B,PWM10);
     428:	80 91 a1 00 	lds	r24, 0x00A1
     42c:	8e 7f       	andi	r24, 0xFE	; 254
     42e:	0e c0       	rjmp	.+28     	; 0x44c <PWM_Init_timer4_H4+0x32>
	}
	else if( bitRes == 10 )
     430:	8a 30       	cpi	r24, 0x0A	; 10
     432:	21 f4       	brne	.+8      	; 0x43c <PWM_Init_timer4_H4+0x22>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
     434:	80 91 a1 00 	lds	r24, 0x00A1
     438:	82 60       	ori	r24, 0x02	; 2
     43a:	03 c0       	rjmp	.+6      	; 0x442 <PWM_Init_timer4_H4+0x28>
		sbi(TCCR4B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
     43c:	80 91 a1 00 	lds	r24, 0x00A1
     440:	8d 7f       	andi	r24, 0xFD	; 253
     442:	80 93 a1 00 	sts	0x00A1, r24
		sbi(TCCR4B,PWM10);
     446:	80 91 a1 00 	lds	r24, 0x00A1
     44a:	81 60       	ori	r24, 0x01	; 1
     44c:	80 93 a1 00 	sts	0x00A1, r24
	}
	// clear output compare values
	OCR4B = 0;
     450:	10 92 ab 00 	sts	0x00AB, r1
     454:	10 92 aa 00 	sts	0x00AA, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     458:	08 95       	ret

0000045a <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     45a:	89 30       	cpi	r24, 0x09	; 9
     45c:	49 f4       	brne	.+18     	; 0x470 <PWM_Init_timer4_H5+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     45e:	80 91 a0 00 	lds	r24, 0x00A0
     462:	82 60       	ori	r24, 0x02	; 2
     464:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     468:	80 91 a0 00 	lds	r24, 0x00A0
     46c:	8e 7f       	andi	r24, 0xFE	; 254
     46e:	0e c0       	rjmp	.+28     	; 0x48c <PWM_Init_timer4_H5+0x32>
	}
	else if( bitRes == 10 )
     470:	8a 30       	cpi	r24, 0x0A	; 10
     472:	21 f4       	brne	.+8      	; 0x47c <PWM_Init_timer4_H5+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     474:	80 91 a0 00 	lds	r24, 0x00A0
     478:	82 60       	ori	r24, 0x02	; 2
     47a:	03 c0       	rjmp	.+6      	; 0x482 <PWM_Init_timer4_H5+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     47c:	80 91 a0 00 	lds	r24, 0x00A0
     480:	8d 7f       	andi	r24, 0xFD	; 253
     482:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     486:	80 91 a0 00 	lds	r24, 0x00A0
     48a:	81 60       	ori	r24, 0x01	; 1
     48c:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4C = 0;
     490:	10 92 ad 00 	sts	0x00AD, r1
     494:	10 92 ac 00 	sts	0x00AC, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     498:	08 95       	ret

0000049a <timer1PWMInitICR>:
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     49a:	e0 e8       	ldi	r30, 0x80	; 128
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	20 81       	ld	r18, Z
     4a0:	2e 7f       	andi	r18, 0xFE	; 254
     4a2:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     4a4:	20 81       	ld	r18, Z
     4a6:	22 60       	ori	r18, 0x02	; 2
     4a8:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     4aa:	e1 e8       	ldi	r30, 0x81	; 129
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	20 81       	ld	r18, Z
     4b0:	28 60       	ori	r18, 0x08	; 8
     4b2:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     4b4:	20 81       	ld	r18, Z
     4b6:	20 61       	ori	r18, 0x10	; 16
     4b8:	20 83       	st	Z, r18
	
	// set top count value
	ICR1 = topcount;
     4ba:	90 93 87 00 	sts	0x0087, r25
     4be:	80 93 86 00 	sts	0x0086, r24
	
	// clear output compare values
	OCR1A = 0;
     4c2:	10 92 89 00 	sts	0x0089, r1
     4c6:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     4ca:	10 92 8b 00 	sts	0x008B, r1
     4ce:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     4d2:	10 92 8d 00 	sts	0x008D, r1
     4d6:	10 92 8c 00 	sts	0x008C, r1
}
     4da:	08 95       	ret

000004dc <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
     4dc:	e0 e9       	ldi	r30, 0x90	; 144
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	20 81       	ld	r18, Z
     4e2:	2e 7f       	andi	r18, 0xFE	; 254
     4e4:	20 83       	st	Z, r18
	sbi(TCCR3A,WGM11);
     4e6:	20 81       	ld	r18, Z
     4e8:	22 60       	ori	r18, 0x02	; 2
     4ea:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM12);
     4ec:	e1 e9       	ldi	r30, 0x91	; 145
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	20 81       	ld	r18, Z
     4f2:	28 60       	ori	r18, 0x08	; 8
     4f4:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM13);
     4f6:	20 81       	ld	r18, Z
     4f8:	20 61       	ori	r18, 0x10	; 16
     4fa:	20 83       	st	Z, r18
	
	// set top count value
	ICR3 = topcount;
     4fc:	90 93 97 00 	sts	0x0097, r25
     500:	80 93 96 00 	sts	0x0096, r24
	
	// clear output compare values
	OCR3A = 0;
     504:	10 92 99 00 	sts	0x0099, r1
     508:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
     50c:	10 92 9b 00 	sts	0x009B, r1
     510:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
     514:	10 92 9d 00 	sts	0x009D, r1
     518:	10 92 9c 00 	sts	0x009C, r1
}
     51c:	08 95       	ret

0000051e <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
     51e:	e0 ea       	ldi	r30, 0xA0	; 160
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	20 81       	ld	r18, Z
     524:	2e 7f       	andi	r18, 0xFE	; 254
     526:	20 83       	st	Z, r18
	sbi(TCCR4A,WGM11);
     528:	20 81       	ld	r18, Z
     52a:	22 60       	ori	r18, 0x02	; 2
     52c:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM12);
     52e:	e1 ea       	ldi	r30, 0xA1	; 161
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	20 81       	ld	r18, Z
     534:	28 60       	ori	r18, 0x08	; 8
     536:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM13);
     538:	20 81       	ld	r18, Z
     53a:	20 61       	ori	r18, 0x10	; 16
     53c:	20 83       	st	Z, r18
	
	// set top count value
	ICR4 = topcount;
     53e:	90 93 a7 00 	sts	0x00A7, r25
     542:	80 93 a6 00 	sts	0x00A6, r24
	
	// clear output compare values
	OCR4A = 0;
     546:	10 92 a9 00 	sts	0x00A9, r1
     54a:	10 92 a8 00 	sts	0x00A8, r1
	OCR4B = 0;
     54e:	10 92 ab 00 	sts	0x00AB, r1
     552:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
     556:	10 92 ad 00 	sts	0x00AD, r1
     55a:	10 92 ac 00 	sts	0x00AC, r1
}
     55e:	08 95       	ret

00000560 <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
	sbi(TCCR1A,COM1B1);
     560:	e0 e8       	ldi	r30, 0x80	; 128
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	80 62       	ori	r24, 0x20	; 32
     568:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     56a:	80 81       	ld	r24, Z
     56c:	8f 7e       	andi	r24, 0xEF	; 239
     56e:	80 83       	st	Z, r24
}
     570:	08 95       	ret

00000572 <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
	sbi(TCCR2A,COM2B1);
     572:	e0 eb       	ldi	r30, 0xB0	; 176
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	80 62       	ori	r24, 0x20	; 32
     57a:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     57c:	80 81       	ld	r24, Z
     57e:	8f 7e       	andi	r24, 0xEF	; 239
     580:	80 83       	st	Z, r24
}
     582:	08 95       	ret

00000584 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
	sbi(TCCR3A,COM3A1);
     584:	e0 e9       	ldi	r30, 0x90	; 144
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	80 68       	ori	r24, 0x80	; 128
     58c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     58e:	80 81       	ld	r24, Z
     590:	8f 7b       	andi	r24, 0xBF	; 191
     592:	80 83       	st	Z, r24
}
     594:	08 95       	ret

00000596 <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
	sbi(TCCR3A,COM3B1);
     596:	e0 e9       	ldi	r30, 0x90	; 144
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	80 62       	ori	r24, 0x20	; 32
     59e:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     5a0:	80 81       	ld	r24, Z
     5a2:	8f 7e       	andi	r24, 0xEF	; 239
     5a4:	80 83       	st	Z, r24
}
     5a6:	08 95       	ret

000005a8 <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
	sbi(TCCR3A,COM3C1);
     5a8:	e0 e9       	ldi	r30, 0x90	; 144
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	88 60       	ori	r24, 0x08	; 8
     5b0:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     5b2:	80 81       	ld	r24, Z
     5b4:	8b 7f       	andi	r24, 0xFB	; 251
     5b6:	80 83       	st	Z, r24
}
     5b8:	08 95       	ret

000005ba <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
	sbi(TCCR4A,COM4A1);
     5ba:	e0 ea       	ldi	r30, 0xA0	; 160
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	80 68       	ori	r24, 0x80	; 128
     5c2:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     5c4:	80 81       	ld	r24, Z
     5c6:	8f 7b       	andi	r24, 0xBF	; 191
     5c8:	80 83       	st	Z, r24
}
     5ca:	08 95       	ret

000005cc <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
	sbi(TCCR4A,COM4B1);
     5cc:	e0 ea       	ldi	r30, 0xA0	; 160
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	80 62       	ori	r24, 0x20	; 32
     5d4:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     5d6:	80 81       	ld	r24, Z
     5d8:	8f 7e       	andi	r24, 0xEF	; 239
     5da:	80 83       	st	Z, r24
}
     5dc:	08 95       	ret

000005de <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
	sbi(TCCR4A,COM4C1);
     5de:	e0 ea       	ldi	r30, 0xA0	; 160
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	88 60       	ori	r24, 0x08	; 8
     5e6:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     5e8:	80 81       	ld	r24, Z
     5ea:	8b 7f       	andi	r24, 0xFB	; 251
     5ec:	80 83       	st	Z, r24
}
     5ee:	08 95       	ret

000005f0 <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     5f0:	e0 e8       	ldi	r30, 0x80	; 128
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 81       	ld	r24, Z
     5f6:	8f 7d       	andi	r24, 0xDF	; 223
     5f8:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     5fa:	80 81       	ld	r24, Z
     5fc:	8f 7e       	andi	r24, 0xEF	; 239
     5fe:	80 83       	st	Z, r24
}
     600:	08 95       	ret

00000602 <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     602:	e0 eb       	ldi	r30, 0xB0	; 176
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	8f 7d       	andi	r24, 0xDF	; 223
     60a:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     60c:	80 81       	ld	r24, Z
     60e:	8f 7e       	andi	r24, 0xEF	; 239
     610:	80 83       	st	Z, r24
}
     612:	08 95       	ret

00000614 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     614:	e0 e9       	ldi	r30, 0x90	; 144
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	8f 77       	andi	r24, 0x7F	; 127
     61c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     61e:	80 81       	ld	r24, Z
     620:	8f 7b       	andi	r24, 0xBF	; 191
     622:	80 83       	st	Z, r24
}
     624:	08 95       	ret

00000626 <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     626:	e0 e9       	ldi	r30, 0x90	; 144
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	8f 7d       	andi	r24, 0xDF	; 223
     62e:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     630:	80 81       	ld	r24, Z
     632:	8f 7e       	andi	r24, 0xEF	; 239
     634:	80 83       	st	Z, r24
}
     636:	08 95       	ret

00000638 <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     638:	e0 e9       	ldi	r30, 0x90	; 144
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	87 7f       	andi	r24, 0xF7	; 247
     640:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     642:	80 81       	ld	r24, Z
     644:	8b 7f       	andi	r24, 0xFB	; 251
     646:	80 83       	st	Z, r24
}
     648:	08 95       	ret

0000064a <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     64a:	e0 ea       	ldi	r30, 0xA0	; 160
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8f 77       	andi	r24, 0x7F	; 127
     652:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     654:	80 81       	ld	r24, Z
     656:	8f 7b       	andi	r24, 0xBF	; 191
     658:	80 83       	st	Z, r24
}
     65a:	08 95       	ret

0000065c <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	8f 7d       	andi	r24, 0xDF	; 223
     664:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     666:	80 81       	ld	r24, Z
     668:	8f 7e       	andi	r24, 0xEF	; 239
     66a:	80 83       	st	Z, r24
}
     66c:	08 95       	ret

0000066e <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     66e:	e0 ea       	ldi	r30, 0xA0	; 160
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	87 7f       	andi	r24, 0xF7	; 247
     676:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     678:	80 81       	ld	r24, Z
     67a:	8b 7f       	andi	r24, 0xFB	; 251
     67c:	80 83       	st	Z, r24
}
     67e:	08 95       	ret

00000680 <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
	cbi(TCCR1A,PWM11);
     680:	e0 e8       	ldi	r30, 0x80	; 128
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	8d 7f       	andi	r24, 0xFD	; 253
     688:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM10);
     68a:	80 81       	ld	r24, Z
     68c:	8e 7f       	andi	r24, 0xFE	; 254
     68e:	80 83       	st	Z, r24
}

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     690:	80 81       	ld	r24, Z
     692:	8f 7d       	andi	r24, 0xDF	; 223
     694:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     696:	80 81       	ld	r24, Z
     698:	8f 7e       	andi	r24, 0xEF	; 239
     69a:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
	//timer2PWMCOff();
}
     69c:	08 95       	ret

0000069e <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
	cbi(TCCR2A,PWM11);
     69e:	e0 eb       	ldi	r30, 0xB0	; 176
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	8d 7f       	andi	r24, 0xFD	; 253
     6a6:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM10);
     6a8:	80 81       	ld	r24, Z
     6aa:	8e 7f       	andi	r24, 0xFE	; 254
     6ac:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     6ae:	80 81       	ld	r24, Z
     6b0:	8f 7d       	andi	r24, 0xDF	; 223
     6b2:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     6b4:	80 81       	ld	r24, Z
     6b6:	8f 7e       	andi	r24, 0xEF	; 239
     6b8:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM11);
	cbi(TCCR2A,PWM10);
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
	//timer2PWMCOff();
}
     6ba:	08 95       	ret

000006bc <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
	cbi(TCCR3A,PWM11);
     6bc:	e0 e9       	ldi	r30, 0x90	; 144
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	8d 7f       	andi	r24, 0xFD	; 253
     6c4:	80 83       	st	Z, r24
	cbi(TCCR3A,PWM10);
     6c6:	80 81       	ld	r24, Z
     6c8:	8e 7f       	andi	r24, 0xFE	; 254
     6ca:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B1);
	cbi(TCCR2A,COM2B0);
}
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     6cc:	80 81       	ld	r24, Z
     6ce:	8f 77       	andi	r24, 0x7F	; 127
     6d0:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     6d2:	80 81       	ld	r24, Z
     6d4:	8f 7b       	andi	r24, 0xBF	; 191
     6d6:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     6d8:	80 81       	ld	r24, Z
     6da:	8f 7d       	andi	r24, 0xDF	; 223
     6dc:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     6de:	80 81       	ld	r24, Z
     6e0:	8f 7e       	andi	r24, 0xEF	; 239
     6e2:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     6e4:	80 81       	ld	r24, Z
     6e6:	87 7f       	andi	r24, 0xF7	; 247
     6e8:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     6ea:	80 81       	ld	r24, Z
     6ec:	8b 7f       	andi	r24, 0xFB	; 251
     6ee:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
	PWM_timer3_Off_E4();
	PWM_timer3_Off_E5();
	//timer2PWMCOff();
}
     6f0:	08 95       	ret

000006f2 <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
	cbi(TCCR4A,PWM11);
     6f2:	e0 ea       	ldi	r30, 0xA0	; 160
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	8d 7f       	andi	r24, 0xFD	; 253
     6fa:	80 83       	st	Z, r24
	cbi(TCCR4A,PWM10);
     6fc:	80 81       	ld	r24, Z
     6fe:	8e 7f       	andi	r24, 0xFE	; 254
     700:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C1);
	cbi(TCCR3A,COM3C0);
}
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     702:	80 81       	ld	r24, Z
     704:	8f 77       	andi	r24, 0x7F	; 127
     706:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     708:	80 81       	ld	r24, Z
     70a:	8f 7b       	andi	r24, 0xBF	; 191
     70c:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     70e:	80 81       	ld	r24, Z
     710:	8f 7d       	andi	r24, 0xDF	; 223
     712:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     714:	80 81       	ld	r24, Z
     716:	8f 7e       	andi	r24, 0xEF	; 239
     718:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     71a:	80 81       	ld	r24, Z
     71c:	87 7f       	andi	r24, 0xF7	; 247
     71e:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     720:	80 81       	ld	r24, Z
     722:	8b 7f       	andi	r24, 0xFB	; 251
     724:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
	PWM_timer4_Off_H4();
	PWM_timer4_Off_H5();
	//timer2PWMCOff();
}
     726:	08 95       	ret

00000728 <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
     728:	90 93 8b 00 	sts	0x008B, r25
     72c:	80 93 8a 00 	sts	0x008A, r24
     730:	08 95       	ret

00000732 <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     732:	80 93 b4 00 	sts	0x00B4, r24
     736:	08 95       	ret

00000738 <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
     738:	90 93 99 00 	sts	0x0099, r25
     73c:	80 93 98 00 	sts	0x0098, r24
     740:	08 95       	ret

00000742 <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
     742:	90 93 9b 00 	sts	0x009B, r25
     746:	80 93 9a 00 	sts	0x009A, r24
     74a:	08 95       	ret

0000074c <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
     74c:	90 93 9d 00 	sts	0x009D, r25
     750:	80 93 9c 00 	sts	0x009C, r24
     754:	08 95       	ret

00000756 <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
     756:	90 93 a9 00 	sts	0x00A9, r25
     75a:	80 93 a8 00 	sts	0x00A8, r24
     75e:	08 95       	ret

00000760 <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
     760:	90 93 ab 00 	sts	0x00AB, r25
     764:	80 93 aa 00 	sts	0x00AA, r24
     768:	08 95       	ret

0000076a <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
     76a:	90 93 ad 00 	sts	0x00AD, r25
     76e:	80 93 ac 00 	sts	0x00AC, r24
     772:	08 95       	ret

00000774 <configure_ports>:
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
     774:	10 ba       	out	0x10, r1	; 16
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
     776:	11 ba       	out	0x11, r1	; 17
	DDRK = 0b00000000;  //configure all K ports for input				0x00
     778:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
     77c:	10 92 08 01 	sts	0x0108, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
     780:	9f ef       	ldi	r25, 0xFF	; 255
     782:	91 b9       	out	0x01, r25	; 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
     784:	80 e4       	ldi	r24, 0x40	; 64
     786:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;  //configure ports for output
     788:	97 b9       	out	0x07, r25	; 7
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
     78a:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, PD1); // SDA pull-up
     78c:	59 9a       	sbi	0x0b, 1	; 11
	DDRD = 0b11110011;  //configure ports for output
     78e:	83 ef       	ldi	r24, 0xF3	; 243
     790:	8a b9       	out	0x0a, r24	; 10
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
     792:	8e ef       	ldi	r24, 0xFE	; 254
     794:	8d b9       	out	0x0d, r24	; 13
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
     796:	a5 9a       	sbi	0x14, 5	; 20
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
     798:	9d 98       	cbi	0x13, 5	; 19
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
     79a:	80 93 01 01 	sts	0x0101, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
     79e:	80 93 04 01 	sts	0x0104, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
     7a2:	08 95       	ret

000007a4 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
	}
     7a4:	08 95       	ret

000007a6 <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     7a6:	2e 9a       	sbi	0x05, 6	; 5
     7a8:	08 95       	ret

000007aa <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     7aa:	2e 98       	cbi	0x05, 6	; 5
     7ac:	08 95       	ret

000007ae <button_pressed>:


//*****************BUTTON****************
int button_pressed(void)
	{
	return (bit_is_clear(PING, 5));
     7ae:	22 b3       	in	r18, 0x12	; 18
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	85 e0       	ldi	r24, 0x05	; 5
     7b4:	36 95       	lsr	r19
     7b6:	27 95       	ror	r18
     7b8:	8a 95       	dec	r24
     7ba:	e1 f7       	brne	.-8      	; 0x7b4 <button_pressed+0x6>
     7bc:	20 95       	com	r18
     7be:	30 95       	com	r19
     7c0:	21 70       	andi	r18, 0x01	; 1
     7c2:	30 70       	andi	r19, 0x00	; 0
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
     7c4:	c9 01       	movw	r24, r18
     7c6:	08 95       	ret

000007c8 <cos_SoR>:
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
	if (degrees >= 0)//positive angles
     7c8:	97 fd       	sbrc	r25, 7
     7ca:	10 c0       	rjmp	.+32     	; 0x7ec <cos_SoR+0x24>
		return angtable[degrees/5];
     7cc:	25 e0       	ldi	r18, 0x05	; 5
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__divmodsi4>
     7d8:	da 01       	movw	r26, r20
     7da:	c9 01       	movw	r24, r18
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	80 50       	subi	r24, 0x00	; 0
     7e2:	9e 4f       	sbci	r25, 0xFE	; 254
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 81       	ld	r18, Z
     7e8:	31 81       	ldd	r19, Z+1	; 0x01
     7ea:	17 c0       	rjmp	.+46     	; 0x81a <cos_SoR+0x52>
	else
		return -angtable[72-(-degrees)/5];
     7ec:	25 e0       	ldi	r18, 0x05	; 5
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__divmodsi4>
     7f8:	da 01       	movw	r26, r20
     7fa:	c9 01       	movw	r24, r18
     7fc:	88 5b       	subi	r24, 0xB8	; 184
     7fe:	9f 4f       	sbci	r25, 0xFF	; 255
     800:	af 4f       	sbci	r26, 0xFF	; 255
     802:	bf 4f       	sbci	r27, 0xFF	; 255
     804:	88 0f       	add	r24, r24
     806:	99 1f       	adc	r25, r25
     808:	80 50       	subi	r24, 0x00	; 0
     80a:	9e 4f       	sbci	r25, 0xFE	; 254
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	22 27       	eor	r18, r18
     814:	33 27       	eor	r19, r19
     816:	28 1b       	sub	r18, r24
     818:	39 0b       	sbc	r19, r25
	}
     81a:	c9 01       	movw	r24, r18
     81c:	08 95       	ret

0000081e <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
	degrees=degrees - 90;//phase shift 90 degrees
     81e:	6a 55       	subi	r22, 0x5A	; 90
     820:	70 40       	sbci	r23, 0x00	; 0
     822:	80 40       	sbci	r24, 0x00	; 0
     824:	90 40       	sbci	r25, 0x00	; 0

	if (degrees >= 0)//positive angles
     826:	97 fd       	sbrc	r25, 7
     828:	10 c0       	rjmp	.+32     	; 0x84a <sin_SoR+0x2c>
		return angtable[degrees/5];
     82a:	25 e0       	ldi	r18, 0x05	; 5
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__divmodsi4>
     836:	da 01       	movw	r26, r20
     838:	c9 01       	movw	r24, r18
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
     83e:	80 50       	subi	r24, 0x00	; 0
     840:	9e 4f       	sbci	r25, 0xFE	; 254
     842:	fc 01       	movw	r30, r24
     844:	20 81       	ld	r18, Z
     846:	31 81       	ldd	r19, Z+1	; 0x01
     848:	17 c0       	rjmp	.+46     	; 0x878 <sin_SoR+0x5a>
	else
		return -angtable[72-(-degrees)/5];
     84a:	25 e0       	ldi	r18, 0x05	; 5
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__divmodsi4>
     856:	da 01       	movw	r26, r20
     858:	c9 01       	movw	r24, r18
     85a:	88 5b       	subi	r24, 0xB8	; 184
     85c:	9f 4f       	sbci	r25, 0xFF	; 255
     85e:	af 4f       	sbci	r26, 0xFF	; 255
     860:	bf 4f       	sbci	r27, 0xFF	; 255
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	80 50       	subi	r24, 0x00	; 0
     868:	9e 4f       	sbci	r25, 0xFE	; 254
     86a:	fc 01       	movw	r30, r24
     86c:	80 81       	ld	r24, Z
     86e:	91 81       	ldd	r25, Z+1	; 0x01
     870:	22 27       	eor	r18, r18
     872:	33 27       	eor	r19, r19
     874:	28 1b       	sub	r18, r24
     876:	39 0b       	sbc	r19, r25
	}
     878:	c9 01       	movw	r24, r18
     87a:	08 95       	ret

0000087c <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	6b 01       	movw	r12, r22
     88a:	7c 01       	movw	r14, r24
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
     88c:	8a e5       	ldi	r24, 0x5A	; 90
     88e:	c8 16       	cp	r12, r24
     890:	d1 04       	cpc	r13, r1
     892:	e1 04       	cpc	r14, r1
     894:	f1 04       	cpc	r15, r1
     896:	a1 f1       	breq	.+104    	; 0x900 <tan_SoR+0x84>
     898:	86 ea       	ldi	r24, 0xA6	; 166
     89a:	c8 16       	cp	r12, r24
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	d8 06       	cpc	r13, r24
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	e8 06       	cpc	r14, r24
     8a4:	8f ef       	ldi	r24, 0xFF	; 255
     8a6:	f8 06       	cpc	r15, r24
     8a8:	59 f1       	breq	.+86     	; 0x900 <tan_SoR+0x84>
     8aa:	8e e0       	ldi	r24, 0x0E	; 14
     8ac:	c8 16       	cp	r12, r24
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	d8 06       	cpc	r13, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 06       	cpc	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	11 f1       	breq	.+68     	; 0x900 <tan_SoR+0x84>
     8bc:	82 ef       	ldi	r24, 0xF2	; 242
     8be:	c8 16       	cp	r12, r24
     8c0:	8e ef       	ldi	r24, 0xFE	; 254
     8c2:	d8 06       	cpc	r13, r24
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 06       	cpc	r14, r24
     8c8:	8f ef       	ldi	r24, 0xFF	; 255
     8ca:	f8 06       	cpc	r15, r24
     8cc:	c9 f0       	breq	.+50     	; 0x900 <tan_SoR+0x84>
		return 0;//what else should I return?!?!?
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
     8ce:	c7 01       	movw	r24, r14
     8d0:	b6 01       	movw	r22, r12
     8d2:	0e 94 0f 04 	call	0x81e	; 0x81e <sin_SoR>
     8d6:	8c 01       	movw	r16, r24
     8d8:	c7 01       	movw	r24, r14
     8da:	b6 01       	movw	r22, r12
     8dc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <cos_SoR>
     8e0:	bc 01       	movw	r22, r24
     8e2:	c8 01       	movw	r24, r16
     8e4:	0e 94 1f 22 	call	0x443e	; 0x443e <__divmodhi4>
     8e8:	cb 01       	movw	r24, r22
     8ea:	9b 01       	movw	r18, r22
     8ec:	73 e0       	ldi	r23, 0x03	; 3
     8ee:	22 0f       	add	r18, r18
     8f0:	33 1f       	adc	r19, r19
     8f2:	7a 95       	dec	r23
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <tan_SoR+0x72>
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	28 0f       	add	r18, r24
     8fc:	39 1f       	adc	r19, r25
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <tan_SoR+0x88>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
	}
     904:	c9 01       	movw	r24, r18
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	08 95       	ret

00000914 <navupdate>:

//double			_omega;
//double			_veloc;


void navupdate( unsigned int ranges[nScans], double* _veloc, double* _omega ) {
     914:	2f 92       	push	r2
     916:	3f 92       	push	r3
     918:	4f 92       	push	r4
     91a:	5f 92       	push	r5
     91c:	6f 92       	push	r6
     91e:	7f 92       	push	r7
     920:	8f 92       	push	r8
     922:	9f 92       	push	r9
     924:	af 92       	push	r10
     926:	bf 92       	push	r11
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	8c 01       	movw	r16, r24
     93a:	6b 01       	movw	r12, r22
     93c:	1a 01       	movw	r2, r20
	//.RESET PICK-OFFS
	*_omega = 0; 
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	fa 01       	movw	r30, r20
     948:	80 83       	st	Z, r24
     94a:	91 83       	std	Z+1, r25	; 0x01
     94c:	a2 83       	std	Z+2, r26	; 0x02
     94e:	b3 83       	std	Z+3, r27	; 0x03
	*_veloc = 0;
     950:	fb 01       	movw	r30, r22
     952:	80 83       	st	Z, r24
     954:	91 83       	std	Z+1, r25	; 0x01
     956:	a2 83       	std	Z+2, r26	; 0x02
     958:	b3 83       	std	Z+3, r27	; 0x03
     95a:	c0 e0       	ldi	r28, 0x00	; 0
     95c:	d0 e0       	ldi	r29, 0x00	; 0
	double	total_pot        ,
			effective_pot 	 ;

	//.INITIAL RANGE-SUM
	for( int i=0; i<nScans; i++ ) {
		if( ranges[i] > 0 ) {
     95e:	f8 01       	movw	r30, r16
     960:	ec 0f       	add	r30, r28
     962:	fd 1f       	adc	r31, r29
     964:	60 81       	ld	r22, Z
     966:	71 81       	ldd	r23, Z+1	; 0x01
     968:	61 15       	cp	r22, r1
     96a:	71 05       	cpc	r23, r1
     96c:	61 f0       	breq	.+24     	; 0x986 <navupdate+0x72>
			total_pot+=ranges[i];
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	c3 01       	movw	r24, r6
     97c:	b2 01       	movw	r22, r4
     97e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     982:	2b 01       	movw	r4, r22
     984:	3c 01       	movw	r6, r24
     986:	22 96       	adiw	r28, 0x02	; 2

	double	total_pot        ,
			effective_pot 	 ;

	//.INITIAL RANGE-SUM
	for( int i=0; i<nScans; i++ ) {
     988:	f2 e0       	ldi	r31, 0x02	; 2
     98a:	c0 3d       	cpi	r28, 0xD0	; 208
     98c:	df 07       	cpc	r29, r31
     98e:	39 f7       	brne	.-50     	; 0x95e <navupdate+0x4a>
     990:	58 01       	movw	r10, r16
     992:	ee ec       	ldi	r30, 0xCE	; 206
     994:	8e 2e       	mov	r8, r30
     996:	e2 e0       	ldi	r30, 0x02	; 2
     998:	9e 2e       	mov	r9, r30
     99a:	80 0e       	add	r8, r16
     99c:	91 1e       	adc	r9, r17
     99e:	0f 2e       	mov	r0, r31
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	ef 2e       	mov	r14, r31
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	ff 2e       	mov	r15, r31
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	0f 2f       	mov	r16, r31
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	1f 2f       	mov	r17, r31
     9b0:	f0 2d       	mov	r31, r0
     9b2:	c0 e0       	ldi	r28, 0x00	; 0
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
		#define	front 	30		// cutoff backward fan range
		#define	cut		90		// cutoff frontward fan range


		//.SIMPLE L-R WALL FOLLOWING
		if( (i>front) && (i<180-cut)){
     9b6:	ce 01       	movw	r24, r28
     9b8:	4f 97       	sbiw	r24, 0x1f	; 31
     9ba:	cb 97       	sbiw	r24, 0x3b	; 59
     9bc:	f8 f4       	brcc	.+62     	; 0x9fc <navupdate+0xe8>
			if( ranges[i] > 0 && ranges[360-i-1] > 0 ) {
     9be:	f5 01       	movw	r30, r10
     9c0:	60 81       	ld	r22, Z
     9c2:	71 81       	ldd	r23, Z+1	; 0x01
     9c4:	61 15       	cp	r22, r1
     9c6:	71 05       	cpc	r23, r1
     9c8:	c9 f0       	breq	.+50     	; 0x9fc <navupdate+0xe8>
     9ca:	f4 01       	movw	r30, r8
     9cc:	80 81       	ld	r24, Z
     9ce:	91 81       	ldd	r25, Z+1	; 0x01
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 f0       	breq	.+40     	; 0x9fc <navupdate+0xe8>
				left_fan += (ranges[i]-ranges[360-i-1])/scaling;
     9d4:	68 1b       	sub	r22, r24
     9d6:	79 0b       	sbc	r23, r25
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	5f e3       	ldi	r21, 0x3F	; 63
     9e8:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
     9ec:	9b 01       	movw	r18, r22
     9ee:	ac 01       	movw	r20, r24
     9f0:	c8 01       	movw	r24, r16
     9f2:	b7 01       	movw	r22, r14
     9f4:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     9f8:	7b 01       	movw	r14, r22
     9fa:	8c 01       	movw	r16, r24
			}
		}


		//.VELOCITY RECALCULATION
		if( i<20 ){
     9fc:	c4 31       	cpi	r28, 0x14	; 20
     9fe:	d1 05       	cpc	r29, r1
     a00:	6c f5       	brge	.+90     	; 0xa5c <navupdate+0x148>
			if( ranges[i] > 0 && ranges[360-i-1] > 0 ) {
     a02:	f5 01       	movw	r30, r10
     a04:	60 81       	ld	r22, Z
     a06:	71 81       	ldd	r23, Z+1	; 0x01
     a08:	61 15       	cp	r22, r1
     a0a:	71 05       	cpc	r23, r1
     a0c:	b9 f0       	breq	.+46     	; 0xa3c <navupdate+0x128>
     a0e:	f4 01       	movw	r30, r8
     a10:	80 81       	ld	r24, Z
     a12:	91 81       	ldd	r25, Z+1	; 0x01
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	91 f0       	breq	.+36     	; 0xa3c <navupdate+0x128>
				*_veloc += (ranges[i]-2*robotwidth)+(ranges[360-i-1]-2*robotwidth);
     a18:	68 0f       	add	r22, r24
     a1a:	79 1f       	adc	r23, r25
     a1c:	68 5c       	subi	r22, 0xC8	; 200
     a1e:	70 40       	sbci	r23, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	f6 01       	movw	r30, r12
     a2e:	60 81       	ld	r22, Z
     a30:	71 81       	ldd	r23, Z+1	; 0x01
     a32:	82 81       	ldd	r24, Z+2	; 0x02
     a34:	93 81       	ldd	r25, Z+3	; 0x03
     a36:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     a3a:	0b c0       	rjmp	.+22     	; 0xa52 <navupdate+0x13e>
			} else {
				*_veloc -= 1;
     a3c:	f6 01       	movw	r30, r12
     a3e:	60 81       	ld	r22, Z
     a40:	71 81       	ldd	r23, Z+1	; 0x01
     a42:	82 81       	ldd	r24, Z+2	; 0x02
     a44:	93 81       	ldd	r25, Z+3	; 0x03
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e8       	ldi	r20, 0x80	; 128
     a4c:	5f e3       	ldi	r21, 0x3F	; 63
     a4e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__subsf3>
     a52:	f6 01       	movw	r30, r12
     a54:	60 83       	st	Z, r22
     a56:	71 83       	std	Z+1, r23	; 0x01
     a58:	82 83       	std	Z+2, r24	; 0x02
     a5a:	93 83       	std	Z+3, r25	; 0x03
		}
	}

	double left_fan  = 0;
	double right_fan = 0;
	for( int i=0; i<nScans; i++ ) {
     a5c:	21 96       	adiw	r28, 0x01	; 1
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	a8 0e       	add	r10, r24
     a64:	b9 1e       	adc	r11, r25
     a66:	ee ef       	ldi	r30, 0xFE	; 254
     a68:	ff ef       	ldi	r31, 0xFF	; 255
     a6a:	8e 0e       	add	r8, r30
     a6c:	9f 1e       	adc	r9, r31
     a6e:	f1 e0       	ldi	r31, 0x01	; 1
     a70:	c8 36       	cpi	r28, 0x68	; 104
     a72:	df 07       	cpc	r29, r31
     a74:	09 f0       	breq	.+2      	; 0xa78 <navupdate+0x164>
     a76:	9f cf       	rjmp	.-194    	; 0x9b6 <navupdate+0xa2>
			} else {
				*_veloc -= 1;
			}
		}
	}
	*_omega = (-left_fan+right_fan)/total_pot;
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a8 01       	movw	r20, r16
     a82:	97 01       	movw	r18, r14
     a84:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__subsf3>
     a88:	a3 01       	movw	r20, r6
     a8a:	92 01       	movw	r18, r4
     a8c:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
     a90:	f1 01       	movw	r30, r2
     a92:	60 83       	st	Z, r22
     a94:	71 83       	std	Z+1, r23	; 0x01
     a96:	82 83       	std	Z+2, r24	; 0x02
     a98:	93 83       	std	Z+3, r25	; 0x03
	*_veloc /= 1000;
     a9a:	f6 01       	movw	r30, r12
     a9c:	60 81       	ld	r22, Z
     a9e:	71 81       	ldd	r23, Z+1	; 0x01
     aa0:	82 81       	ldd	r24, Z+2	; 0x02
     aa2:	93 81       	ldd	r25, Z+3	; 0x03
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	4a e7       	ldi	r20, 0x7A	; 122
     aaa:	54 e4       	ldi	r21, 0x44	; 68
     aac:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
     ab0:	f6 01       	movw	r30, r12
     ab2:	60 83       	st	Z, r22
     ab4:	71 83       	std	Z+1, r23	; 0x01
     ab6:	82 83       	std	Z+2, r24	; 0x02
     ab8:	93 83       	std	Z+3, r25	; 0x03
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	df 90       	pop	r13
     ac8:	cf 90       	pop	r12
     aca:	bf 90       	pop	r11
     acc:	af 90       	pop	r10
     ace:	9f 90       	pop	r9
     ad0:	8f 90       	pop	r8
     ad2:	7f 90       	pop	r7
     ad4:	6f 90       	pop	r6
     ad6:	5f 90       	pop	r5
     ad8:	4f 90       	pop	r4
     ada:	3f 90       	pop	r3
     adc:	2f 90       	pop	r2
     ade:	08 95       	ret

00000ae0 <lbRcv>:
//-----------------------------**&&**


void lbRcv(unsigned char c){
		
} 
     ae0:	08 95       	ret

00000ae2 <timer5PWMInitICR>:

void timer5PWMInitICR(u16 topcount)
{
	u08 sreg;
	// set PWM mode with ICR top-count
	cbi(TCCR5A,WGM10);
     ae2:	e0 e2       	ldi	r30, 0x20	; 32
     ae4:	f1 e0       	ldi	r31, 0x01	; 1
     ae6:	20 81       	ld	r18, Z
     ae8:	2e 7f       	andi	r18, 0xFE	; 254
     aea:	20 83       	st	Z, r18
	sbi(TCCR5A,WGM11);
     aec:	20 81       	ld	r18, Z
     aee:	22 60       	ori	r18, 0x02	; 2
     af0:	20 83       	st	Z, r18
	sbi(TCCR5B,WGM12);
     af2:	e1 e2       	ldi	r30, 0x21	; 33
     af4:	f1 e0       	ldi	r31, 0x01	; 1
     af6:	20 81       	ld	r18, Z
     af8:	28 60       	ori	r18, 0x08	; 8
     afa:	20 83       	st	Z, r18
	sbi(TCCR5B,WGM13);
     afc:	20 81       	ld	r18, Z
     afe:	20 61       	ori	r18, 0x10	; 16
     b00:	20 83       	st	Z, r18
	
	// Save global interrupt flag
	sreg = SREG;
     b02:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
     b04:	f8 94       	cli
	// set top count value
	ICR5 = topcount;
     b06:	90 93 27 01 	sts	0x0127, r25
     b0a:	80 93 26 01 	sts	0x0126, r24
	// Restore interrupts
	SREG = sreg;
     b0e:	2f bf       	out	0x3f, r18	; 63
	
	// clear output compare values
	OCR5A = 0;
     b10:	10 92 29 01 	sts	0x0129, r1
     b14:	10 92 28 01 	sts	0x0128, r1
	OCR5B = 0;
     b18:	10 92 2b 01 	sts	0x012B, r1
     b1c:	10 92 2a 01 	sts	0x012A, r1
}
     b20:	08 95       	ret

00000b22 <PWM_timer5_Off_L3>:

// Stop PWM ////////////////////
void PWM_timer5_Off_L3(void){
	cbi(TCCR5A,COM5A1);
     b22:	e0 e2       	ldi	r30, 0x20	; 32
     b24:	f1 e0       	ldi	r31, 0x01	; 1
     b26:	80 81       	ld	r24, Z
     b28:	8f 77       	andi	r24, 0x7F	; 127
     b2a:	80 83       	st	Z, r24
	cbi(TCCR5A,COM5A0);
     b2c:	80 81       	ld	r24, Z
     b2e:	8f 7b       	andi	r24, 0xBF	; 191
     b30:	80 83       	st	Z, r24
}
     b32:	08 95       	ret

00000b34 <PWM_timer5_Off_L4>:

void PWM_timer5_Off_L4(void){
	cbi(TCCR5A,COM5B1);
     b34:	e0 e2       	ldi	r30, 0x20	; 32
     b36:	f1 e0       	ldi	r31, 0x01	; 1
     b38:	80 81       	ld	r24, Z
     b3a:	8f 7d       	andi	r24, 0xDF	; 223
     b3c:	80 83       	st	Z, r24
	cbi(TCCR5A,COM5B0);
     b3e:	80 81       	ld	r24, Z
     b40:	8f 7e       	andi	r24, 0xEF	; 239
     b42:	80 83       	st	Z, r24
}
     b44:	08 95       	ret

00000b46 <PWM_timer5_On_L3>:
////////////////////////////////

// Start PWM ///////////////////
void PWM_timer5_On_L3(void){
	sbi(TCCR5A,COM5A1);
     b46:	e0 e2       	ldi	r30, 0x20	; 32
     b48:	f1 e0       	ldi	r31, 0x01	; 1
     b4a:	80 81       	ld	r24, Z
     b4c:	80 68       	ori	r24, 0x80	; 128
     b4e:	80 83       	st	Z, r24
	cbi(TCCR5A,COM5A0);
     b50:	80 81       	ld	r24, Z
     b52:	8f 7b       	andi	r24, 0xBF	; 191
     b54:	80 83       	st	Z, r24
}
     b56:	08 95       	ret

00000b58 <PWM_timer5_On_L4>:
void PWM_timer5_On_L4(void){
	sbi(TCCR5A,COM5B1);
     b58:	e0 e2       	ldi	r30, 0x20	; 32
     b5a:	f1 e0       	ldi	r31, 0x01	; 1
     b5c:	80 81       	ld	r24, Z
     b5e:	80 62       	ori	r24, 0x20	; 32
     b60:	80 83       	st	Z, r24
	cbi(TCCR5A,COM5B0);
     b62:	80 81       	ld	r24, Z
     b64:	8f 7e       	andi	r24, 0xEF	; 239
     b66:	80 83       	st	Z, r24
}
     b68:	08 95       	ret

00000b6a <PWM_timer5_Set_L3>:
////////////////////////////////

// Set PWM Duty ////////////////
void PWM_timer5_Set_L3(u16 duty){
	OCR5A = duty;
     b6a:	90 93 29 01 	sts	0x0129, r25
     b6e:	80 93 28 01 	sts	0x0128, r24
}
     b72:	08 95       	ret

00000b74 <PWM_timer5_Set_L4>:
void PWM_timer5_Set_L4(u16 duty){
	OCR5B = duty;
     b74:	90 93 2b 01 	sts	0x012B, r25
     b78:	80 93 2a 01 	sts	0x012A, r24
}
     b7c:	08 95       	ret

00000b7e <left_sprayer>:
////////////////////////////////

void left_sprayer(u16 position){
	u16 cmd = -2.778*position + 375;
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	bc 01       	movw	r22, r24
     b84:	cd 01       	movw	r24, r26
     b86:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
     b8a:	21 ec       	ldi	r18, 0xC1	; 193
     b8c:	3a ec       	ldi	r19, 0xCA	; 202
     b8e:	41 e3       	ldi	r20, 0x31	; 49
     b90:	50 ec       	ldi	r21, 0xC0	; 192
     b92:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e8       	ldi	r19, 0x80	; 128
     b9a:	4b eb       	ldi	r20, 0xBB	; 187
     b9c:	53 e4       	ldi	r21, 0x43	; 67
     b9e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     ba2:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__fixunssfsi>
}
////////////////////////////////

// Set PWM Duty ////////////////
void PWM_timer5_Set_L3(u16 duty){
	OCR5A = duty;
     ba6:	70 93 29 01 	sts	0x0129, r23
     baa:	60 93 28 01 	sts	0x0128, r22
////////////////////////////////

void left_sprayer(u16 position){
	u16 cmd = -2.778*position + 375;
	PWM_timer5_Set_L3(cmd);
}
     bae:	08 95       	ret

00000bb0 <right_sprayer>:

void right_sprayer(u16 position){
	u16 cmd = 2.778*position + 375;
     bb0:	a0 e0       	ldi	r26, 0x00	; 0
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	bc 01       	movw	r22, r24
     bb6:	cd 01       	movw	r24, r26
     bb8:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
     bbc:	21 ec       	ldi	r18, 0xC1	; 193
     bbe:	3a ec       	ldi	r19, 0xCA	; 202
     bc0:	41 e3       	ldi	r20, 0x31	; 49
     bc2:	50 e4       	ldi	r21, 0x40	; 64
     bc4:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e8       	ldi	r19, 0x80	; 128
     bcc:	4b eb       	ldi	r20, 0xBB	; 187
     bce:	53 e4       	ldi	r21, 0x43	; 67
     bd0:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     bd4:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__fixunssfsi>
// Set PWM Duty ////////////////
void PWM_timer5_Set_L3(u16 duty){
	OCR5A = duty;
}
void PWM_timer5_Set_L4(u16 duty){
	OCR5B = duty;
     bd8:	70 93 2b 01 	sts	0x012B, r23
     bdc:	60 93 2a 01 	sts	0x012A, r22
}

void right_sprayer(u16 position){
	u16 cmd = 2.778*position + 375;
	PWM_timer5_Set_L4(cmd);
}
     be0:	08 95       	ret

00000be2 <send_frame>:

/*************************************************/



void send_frame(float velocity, float omega){
     be2:	2f 92       	push	r2
     be4:	3f 92       	push	r3
     be6:	4f 92       	push	r4
     be8:	5f 92       	push	r5
     bea:	6f 92       	push	r6
     bec:	7f 92       	push	r7
     bee:	8f 92       	push	r8
     bf0:	9f 92       	push	r9
     bf2:	af 92       	push	r10
     bf4:	bf 92       	push	r11
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	06 2f       	mov	r16, r22
     c04:	f7 2e       	mov	r15, r23
     c06:	e8 2e       	mov	r14, r24
     c08:	d9 2e       	mov	r13, r25
     c0a:	c2 2e       	mov	r12, r18
     c0c:	b3 2e       	mov	r11, r19
     c0e:	a4 2e       	mov	r10, r20
     c10:	95 2e       	mov	r9, r21
//send data frame
	
	// Break the floats into 4 bytes
	union u_vel fltuint8_velocity;
	union u_ome fltuint8_omega;
	fltuint8_velocity.f_vel = velocity;
     c12:	17 2f       	mov	r17, r23
	fltuint8_omega.f_ome = omega;
     c14:	36 01       	movw	r6, r12
     c16:	25 01       	movw	r4, r10
		
	// Send header
	uart0SendByte(0xFA);
     c18:	8a ef       	ldi	r24, 0xFA	; 250
     c1a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <uart0SendByte>
	//rprintfu08(0xFA);

	// Send linear velocity
	uart0SendByte(fltuint8_velocity.arr_vel[0]);
     c1e:	80 2f       	mov	r24, r16
     c20:	0e 94 54 11 	call	0x22a8	; 0x22a8 <uart0SendByte>
	uart0SendByte(fltuint8_velocity.arr_vel[1]);
     c24:	8f 2d       	mov	r24, r15
     c26:	0e 94 54 11 	call	0x22a8	; 0x22a8 <uart0SendByte>
	uart0SendByte(fltuint8_velocity.arr_vel[2]);
     c2a:	8e 2d       	mov	r24, r14
     c2c:	0e 94 54 11 	call	0x22a8	; 0x22a8 <uart0SendByte>
	uart0SendByte(fltuint8_velocity.arr_vel[3]);
     c30:	8d 2d       	mov	r24, r13
     c32:	0e 94 54 11 	call	0x22a8	; 0x22a8 <uart0SendByte>
	//rprintfu08(fltuint8_velocity.arr_vel[1]);
	//rprintfu08(fltuint8_velocity.arr_vel[2]);
	//rprintfu08(fltuint8_velocity.arr_vel[3]);

	// Send angular velocity
	uart0SendByte(fltuint8_omega.arr_ome[0]);
     c36:	8c 2d       	mov	r24, r12
     c38:	0e 94 54 11 	call	0x22a8	; 0x22a8 <uart0SendByte>
	uart0SendByte(fltuint8_omega.arr_ome[1]);
     c3c:	8b 2d       	mov	r24, r11
     c3e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <uart0SendByte>
	uart0SendByte(fltuint8_omega.arr_ome[2]);
     c42:	8a 2d       	mov	r24, r10
     c44:	0e 94 54 11 	call	0x22a8	; 0x22a8 <uart0SendByte>
	uart0SendByte(fltuint8_omega.arr_ome[3]);
     c48:	89 2d       	mov	r24, r9
     c4a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <uart0SendByte>
	// Send checksum
	uint8_t chk = fltuint8_velocity.arr_vel[0] + fltuint8_velocity.arr_vel[1] + fltuint8_velocity.arr_vel[2]
	+ fltuint8_velocity.arr_vel[3] + fltuint8_omega.arr_ome[0] + fltuint8_omega.arr_ome[1] 
	+ fltuint8_omega.arr_ome[2] + fltuint8_omega.arr_ome[3];

	uart0SendByte(chk);
     c4e:	10 0f       	add	r17, r16
     c50:	1e 0d       	add	r17, r14
     c52:	17 0d       	add	r17, r7
     c54:	16 0d       	add	r17, r6
     c56:	15 0d       	add	r17, r5
     c58:	14 0d       	add	r17, r4
     c5a:	81 2f       	mov	r24, r17
     c5c:	89 0d       	add	r24, r9
     c5e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <uart0SendByte>
	//rprintfu08(chk);
}
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	bf 90       	pop	r11
     c70:	af 90       	pop	r10
     c72:	9f 90       	pop	r9
     c74:	8f 90       	pop	r8
     c76:	7f 90       	pop	r7
     c78:	6f 90       	pop	r6
     c7a:	5f 90       	pop	r5
     c7c:	4f 90       	pop	r4
     c7e:	3f 90       	pop	r3
     c80:	2f 90       	pop	r2
     c82:	08 95       	ret

00000c84 <straight_beam>:
	rprintfFloat(5,lin_v);
	rprintfCRLF();

}

void straight_beam(uint16_t range[]){
     c84:	2f 92       	push	r2
     c86:	3f 92       	push	r3
     c88:	4f 92       	push	r4
     c8a:	5f 92       	push	r5
     c8c:	6f 92       	push	r6
     c8e:	7f 92       	push	r7
     c90:	8f 92       	push	r8
     c92:	9f 92       	push	r9
     c94:	af 92       	push	r10
     c96:	bf 92       	push	r11
     c98:	cf 92       	push	r12
     c9a:	df 92       	push	r13
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	fc 01       	movw	r30, r24
	float ang_v = 0;
	float range_zero = 0;
	const uint8_t MIN_RANGE = 150; // mm


	if(range[0] > MIN_RANGE){
     ca6:	60 81       	ld	r22, Z
     ca8:	71 81       	ldd	r23, Z+1	; 0x01
     caa:	67 39       	cpi	r22, 0x97	; 151
     cac:	71 05       	cpc	r23, r1
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <straight_beam+0x3e>
     cb0:	55 24       	eor	r5, r5
     cb2:	77 24       	eor	r7, r7
     cb4:	88 24       	eor	r8, r8
     cb6:	99 24       	eor	r9, r9
     cb8:	dd 24       	eor	r13, r13
     cba:	22 24       	eor	r2, r2
     cbc:	66 24       	eor	r6, r6
     cbe:	aa 24       	eor	r10, r10
     cc0:	a1 c0       	rjmp	.+322    	; 0xe04 <straight_beam+0x180>
		range_zero = (float)range[0];
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
     cca:	3b 01       	movw	r6, r22
     ccc:	4c 01       	movw	r8, r24
	//	lin_v = pow(2,((range_zero-200)/20))/(pow(2,((range_zero-200)/20)) + 1024);
	//	ang_v = pow(2,(-(range_zero-200)/20))/(pow(2,((-(range_zero-200)/20))) + 1024);

		lin_v = ((((range_zero-200)/10)/sqrt(pow(2,((range_zero-200)/10)))+1)+1)/2;
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	48 e4       	ldi	r20, 0x48	; 72
     cd4:	53 e4       	ldi	r21, 0x43	; 67
     cd6:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__subsf3>
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e2       	ldi	r20, 0x20	; 32
     ce0:	51 e4       	ldi	r21, 0x41	; 65
     ce2:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
     ce6:	7b 01       	movw	r14, r22
     ce8:	8c 01       	movw	r16, r24
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e4       	ldi	r25, 0x40	; 64
     cf2:	a8 01       	movw	r20, r16
     cf4:	97 01       	movw	r18, r14
     cf6:	0e 94 4c 20 	call	0x4098	; 0x4098 <pow>
     cfa:	0e 94 9c 20 	call	0x4138	; 0x4138 <sqrt>
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	c8 01       	movw	r24, r16
     d04:	b7 01       	movw	r22, r14
     d06:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e8       	ldi	r20, 0x80	; 128
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e8       	ldi	r20, 0x80	; 128
     d1c:	5f e3       	ldi	r21, 0x3F	; 63
     d1e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
     d2e:	1b 01       	movw	r2, r22
     d30:	2c 01       	movw	r4, r24
		ang_v =	(((((range_zero+200)/10) / sqrt(pow(2,((range_zero+200)/10))))+1)+1)/2;
     d32:	c4 01       	movw	r24, r8
     d34:	b3 01       	movw	r22, r6
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	48 e4       	ldi	r20, 0x48	; 72
     d3c:	53 e4       	ldi	r21, 0x43	; 67
     d3e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e2       	ldi	r20, 0x20	; 32
     d48:	51 e4       	ldi	r21, 0x41	; 65
     d4a:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
     d4e:	7b 01       	movw	r14, r22
     d50:	8c 01       	movw	r16, r24
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e4       	ldi	r25, 0x40	; 64
     d5a:	a8 01       	movw	r20, r16
     d5c:	97 01       	movw	r18, r14
     d5e:	0e 94 4c 20 	call	0x4098	; 0x4098 <pow>
     d62:	0e 94 9c 20 	call	0x4138	; 0x4138 <sqrt>
     d66:	9b 01       	movw	r18, r22
     d68:	ac 01       	movw	r20, r24
     d6a:	c8 01       	movw	r24, r16
     d6c:	b7 01       	movw	r22, r14
     d6e:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e8       	ldi	r20, 0x80	; 128
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	5f e3       	ldi	r21, 0x3F	; 63
     d92:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
     d96:	5b 01       	movw	r10, r22
     d98:	6c 01       	movw	r12, r24

		rprintf("Dist_zero: ");
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <straight_beam+0x118>
     d9c:	0f 92       	push	r0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	ed b7       	in	r30, 0x3d	; 61
     da2:	fe b7       	in	r31, 0x3e	; 62
     da4:	81 83       	std	Z+1, r24	; 0x01
     da6:	8d ea       	ldi	r24, 0xAD	; 173
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	93 83       	std	Z+3, r25	; 0x03
     dac:	82 83       	std	Z+2, r24	; 0x02
     dae:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
		rprintfFloat(5,range_zero);
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	85 e0       	ldi	r24, 0x05	; 5
     dba:	b4 01       	movw	r22, r8
     dbc:	a3 01       	movw	r20, r6
     dbe:	0e 94 f5 16 	call	0x2dea	; 0x2dea <rprintfFloat>
		lin_v *= 30;
     dc2:	c2 01       	movw	r24, r4
     dc4:	b1 01       	movw	r22, r2
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 ef       	ldi	r20, 0xF0	; 240
     dcc:	51 e4       	ldi	r21, 0x41	; 65
     dce:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
     dd2:	7b 01       	movw	r14, r22
     dd4:	8c 01       	movw	r16, r24
     dd6:	56 2e       	mov	r5, r22
     dd8:	7f 2c       	mov	r7, r15
     dda:	48 01       	movw	r8, r16
		ang_v *= M_PI;
     ddc:	c6 01       	movw	r24, r12
     dde:	b5 01       	movw	r22, r10
     de0:	2b ed       	ldi	r18, 0xDB	; 219
     de2:	3f e0       	ldi	r19, 0x0F	; 15
     de4:	49 e4       	ldi	r20, 0x49	; 73
     de6:	50 e4       	ldi	r21, 0x40	; 64
     de8:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
     dec:	9b 01       	movw	r18, r22
     dee:	ac 01       	movw	r20, r24
     df0:	d6 2e       	mov	r13, r22
     df2:	23 2e       	mov	r2, r19
     df4:	64 2e       	mov	r6, r20
     df6:	a5 2e       	mov	r10, r21

		send_frame(lin_v,ang_v);
     df8:	b7 01       	movw	r22, r14
     dfa:	c8 01       	movw	r24, r16
     dfc:	da 01       	movw	r26, r20
     dfe:	ad 01       	movw	r20, r26
     e00:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <send_frame>
	}
	
	rprintf("ang_v: ");
     e04:	00 d0       	rcall	.+0      	; 0xe06 <straight_beam+0x182>
     e06:	0f 92       	push	r0
     e08:	11 e0       	ldi	r17, 0x01	; 1
     e0a:	ed b7       	in	r30, 0x3d	; 61
     e0c:	fe b7       	in	r31, 0x3e	; 62
     e0e:	11 83       	std	Z+1, r17	; 0x01
     e10:	85 ea       	ldi	r24, 0xA5	; 165
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	93 83       	std	Z+3, r25	; 0x03
     e16:	82 83       	std	Z+2, r24	; 0x02
     e18:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
	rprintfFloat(5,ang_v);
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	85 e0       	ldi	r24, 0x05	; 5
     e24:	4d 2d       	mov	r20, r13
     e26:	52 2d       	mov	r21, r2
     e28:	66 2d       	mov	r22, r6
     e2a:	7a 2d       	mov	r23, r10
     e2c:	0e 94 f5 16 	call	0x2dea	; 0x2dea <rprintfFloat>
	rprintf("\tlin_v: ");
     e30:	00 d0       	rcall	.+0      	; 0xe32 <straight_beam+0x1ae>
     e32:	0f 92       	push	r0
     e34:	ed b7       	in	r30, 0x3d	; 61
     e36:	fe b7       	in	r31, 0x3e	; 62
     e38:	11 83       	std	Z+1, r17	; 0x01
     e3a:	8c e9       	ldi	r24, 0x9C	; 156
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	93 83       	std	Z+3, r25	; 0x03
     e40:	82 83       	std	Z+2, r24	; 0x02
     e42:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
	rprintfFloat(5,lin_v);
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	85 e0       	ldi	r24, 0x05	; 5
     e4e:	45 2d       	mov	r20, r5
     e50:	57 2d       	mov	r21, r7
     e52:	68 2d       	mov	r22, r8
     e54:	79 2d       	mov	r23, r9
     e56:	0e 94 f5 16 	call	0x2dea	; 0x2dea <rprintfFloat>
	
	rprintfCRLF();
     e5a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <rprintfCRLF>

}
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	bf 90       	pop	r11
     e6c:	af 90       	pop	r10
     e6e:	9f 90       	pop	r9
     e70:	8f 90       	pop	r8
     e72:	7f 90       	pop	r7
     e74:	6f 90       	pop	r6
     e76:	5f 90       	pop	r5
     e78:	4f 90       	pop	r4
     e7a:	3f 90       	pop	r3
     e7c:	2f 90       	pop	r2
     e7e:	08 95       	ret

00000e80 <right_wall>:

	uart0SendByte(chk);
	//rprintfu08(chk);
}

void right_wall(uint16_t range[]){
     e80:	4f 92       	push	r4
     e82:	5f 92       	push	r5
     e84:	6f 92       	push	r6
     e86:	7f 92       	push	r7
     e88:	8f 92       	push	r8
     e8a:	9f 92       	push	r9
     e8c:	af 92       	push	r10
     e8e:	bf 92       	push	r11
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	4c 01       	movw	r8, r24
     ea2:	ec 01       	movw	r28, r24
     ea4:	c4 53       	subi	r28, 0x34	; 52
     ea6:	df 4f       	sbci	r29, 0xFF	; 255
     ea8:	cc 24       	eor	r12, r12
     eaa:	0f 2e       	mov	r0, r31
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	ef 2e       	mov	r14, r31
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	ff 2e       	mov	r15, r31
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	0f 2f       	mov	r16, r31
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	1f 2f       	mov	r17, r31
     ebc:	f0 2d       	mov	r31, r0
     ebe:	dd 24       	eor	r13, r13
		uint8_t f_ndx = 358 + r_ndx;
		// Accomodate wrap around
		if(f_ndx > 359){
			f_ndx -= 360;
		}
		if(range[f_ndx] > MIN_RANGE){
     ec0:	68 81       	ld	r22, Y
     ec2:	79 81       	ldd	r23, Y+1	; 0x01
     ec4:	67 39       	cpi	r22, 0x97	; 151
     ec6:	71 05       	cpc	r23, r1
     ec8:	68 f0       	brcs	.+26     	; 0xee4 <right_wall+0x64>
			f_rng_avg += (float)range[f_ndx];
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
     ed2:	9b 01       	movw	r18, r22
     ed4:	ac 01       	movw	r20, r24
     ed6:	c8 01       	movw	r24, r16
     ed8:	b7 01       	movw	r22, r14
     eda:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     ede:	7b 01       	movw	r14, r22
     ee0:	8c 01       	movw	r16, r24
			f_cntr++;
     ee2:	c3 94       	inc	r12
	uint8_t r_cntr = 0;
	float f_rng_avg = 0;
	float r_rng_avg = 0;
	const uint8_t MIN_RANGE = 150; // mm
	// Calculate the average of the front 5 valid beams
	for(uint8_t r_ndx = 0; r_ndx < 5; r_ndx++){
     ee4:	d3 94       	inc	r13
     ee6:	22 96       	adiw	r28, 0x02	; 2
     ee8:	85 e0       	ldi	r24, 0x05	; 5
     eea:	d8 16       	cp	r13, r24
     eec:	49 f7       	brne	.-46     	; 0xec0 <right_wall+0x40>
		if(range[f_ndx] > MIN_RANGE){
			f_rng_avg += (float)range[f_ndx];
			f_cntr++;
		}
	}
	if(f_cntr != 0){
     eee:	cc 20       	and	r12, r12
     ef0:	71 f0       	breq	.+28     	; 0xf0e <right_wall+0x8e>
		f_rng_avg = f_rng_avg/(float)f_cntr;
     ef2:	6c 2d       	mov	r22, r12
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
     efe:	9b 01       	movw	r18, r22
     f00:	ac 01       	movw	r20, r24
     f02:	c8 01       	movw	r24, r16
     f04:	b7 01       	movw	r22, r14
     f06:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
     f0a:	7b 01       	movw	r14, r22
     f0c:	8c 01       	movw	r16, r24
	}
//	rprintf("Front Range: ");
//	rprintfFloat(5, f_rng_avg);
//	rprintfCRLF();
	// Produce a linear velocity using sigmoid
	lin_v = 100*pow(2.0,(f_rng_avg/100)-5)/(pow(2.0,(f_rng_avg/100)-5) + 4.0);
     f0e:	c8 01       	movw	r24, r16
     f10:	b7 01       	movw	r22, r14
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	48 ec       	ldi	r20, 0xC8	; 200
     f18:	52 e4       	ldi	r21, 0x42	; 66
     f1a:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 ea       	ldi	r20, 0xA0	; 160
     f24:	50 e4       	ldi	r21, 0x40	; 64
     f26:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__subsf3>
     f2a:	9b 01       	movw	r18, r22
     f2c:	ac 01       	movw	r20, r24
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e4       	ldi	r25, 0x40	; 64
     f36:	0e 94 4c 20 	call	0x4098	; 0x4098 <pow>
     f3a:	7b 01       	movw	r14, r22
     f3c:	8c 01       	movw	r16, r24
     f3e:	c8 01       	movw	r24, r16
     f40:	b7 01       	movw	r22, r14
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	48 ec       	ldi	r20, 0xC8	; 200
     f48:	52 e4       	ldi	r21, 0x42	; 66
     f4a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
     f4e:	5b 01       	movw	r10, r22
     f50:	6c 01       	movw	r12, r24
     f52:	c8 01       	movw	r24, r16
     f54:	b7 01       	movw	r22, r14
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e8       	ldi	r20, 0x80	; 128
     f5c:	50 e4       	ldi	r21, 0x40	; 64
     f5e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     f62:	9b 01       	movw	r18, r22
     f64:	ac 01       	movw	r20, r24
     f66:	c6 01       	movw	r24, r12
     f68:	b5 01       	movw	r22, r10
     f6a:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
     f6e:	76 2e       	mov	r7, r22
     f70:	67 2e       	mov	r6, r23
     f72:	58 2e       	mov	r5, r24
     f74:	49 2e       	mov	r4, r25
     f76:	f0 e7       	ldi	r31, 0x70	; 112
     f78:	cf 2e       	mov	r12, r31
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	df 2e       	mov	r13, r31
     f7e:	c8 0c       	add	r12, r8
     f80:	d9 1c       	adc	r13, r9
     f82:	aa 24       	eor	r10, r10
     f84:	0f 2e       	mov	r0, r31
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	ef 2e       	mov	r14, r31
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	ff 2e       	mov	r15, r31
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	0f 2f       	mov	r16, r31
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	1f 2f       	mov	r17, r31
     f96:	f0 2d       	mov	r31, r0
     f98:	c8 e3       	ldi	r28, 0x38	; 56
     f9a:	d1 e0       	ldi	r29, 0x01	; 1

	// Calculate the average of the 5 right beams about -45 degrees
	for(uint16_t r_ndx = 312; r_ndx < 317; r_ndx++){
		
		if(range[r_ndx] > MIN_RANGE){
     f9c:	f6 01       	movw	r30, r12
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	67 39       	cpi	r22, 0x97	; 151
     fa4:	71 05       	cpc	r23, r1
     fa6:	68 f0       	brcs	.+26     	; 0xfc2 <right_wall+0x142>
			r_rng_avg += (float)range[r_ndx];
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	c8 01       	movw	r24, r16
     fb6:	b7 01       	movw	r22, r14
     fb8:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
     fbc:	7b 01       	movw	r14, r22
     fbe:	8c 01       	movw	r16, r24
			r_cntr++;
     fc0:	a3 94       	inc	r10
//	rprintfCRLF();
	// Produce a linear velocity using sigmoid
	lin_v = 100*pow(2.0,(f_rng_avg/100)-5)/(pow(2.0,(f_rng_avg/100)-5) + 4.0);

	// Calculate the average of the 5 right beams about -45 degrees
	for(uint16_t r_ndx = 312; r_ndx < 317; r_ndx++){
     fc2:	21 96       	adiw	r28, 0x01	; 1
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	c8 0e       	add	r12, r24
     fca:	d9 1e       	adc	r13, r25
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	cd 33       	cpi	r28, 0x3D	; 61
     fd0:	d9 07       	cpc	r29, r25
     fd2:	21 f7       	brne	.-56     	; 0xf9c <right_wall+0x11c>
		if(range[r_ndx] > MIN_RANGE){
			r_rng_avg += (float)range[r_ndx];
			r_cntr++;
		}
	}
	if(r_cntr != 0){
     fd4:	aa 20       	and	r10, r10
     fd6:	71 f0       	breq	.+28     	; 0xff4 <right_wall+0x174>
		r_rng_avg = r_rng_avg/(float)r_cntr;
     fd8:	6a 2d       	mov	r22, r10
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
     fe4:	9b 01       	movw	r18, r22
     fe6:	ac 01       	movw	r20, r24
     fe8:	c8 01       	movw	r24, r16
     fea:	b7 01       	movw	r22, r14
     fec:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
     ff0:	7b 01       	movw	r14, r22
     ff2:	8c 01       	movw	r16, r24
	}
//	rprintf("Right Range: ");
//	rprintfFloat(5, r_rng_avg);
//	rprintfCRLF();

	ang_v = -0.3*(r_rng_avg-230)/sqrt(1 + square(r_rng_avg-230));
     ff4:	c8 01       	movw	r24, r16
     ff6:	b7 01       	movw	r22, r14
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	46 e6       	ldi	r20, 0x66	; 102
     ffe:	53 e4       	ldi	r21, 0x43	; 67
    1000:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__subsf3>
    1004:	5b 01       	movw	r10, r22
    1006:	6c 01       	movw	r12, r24
    1008:	0e 94 e6 20 	call	0x41cc	; 0x41cc <square>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__addsf3>
    1018:	0e 94 9c 20 	call	0x4138	; 0x4138 <sqrt>
    101c:	7b 01       	movw	r14, r22
    101e:	8c 01       	movw	r16, r24
    1020:	c6 01       	movw	r24, r12
    1022:	b5 01       	movw	r22, r10
    1024:	2a e9       	ldi	r18, 0x9A	; 154
    1026:	39 e9       	ldi	r19, 0x99	; 153
    1028:	49 e9       	ldi	r20, 0x99	; 153
    102a:	5e eb       	ldi	r21, 0xBE	; 190
    102c:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
    1030:	a8 01       	movw	r20, r16
    1032:	97 01       	movw	r18, r14
    1034:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
    1038:	7b 01       	movw	r14, r22
    103a:	8c 01       	movw	r16, r24

	send_frame(lin_v,ang_v);
    103c:	27 2d       	mov	r18, r7
    103e:	36 2d       	mov	r19, r6
    1040:	45 2d       	mov	r20, r5
    1042:	54 2d       	mov	r21, r4
    1044:	b9 01       	movw	r22, r18
    1046:	ca 01       	movw	r24, r20
    1048:	97 01       	movw	r18, r14
    104a:	a8 01       	movw	r20, r16
    104c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <send_frame>
	//rprintfFloat(5,ang_v);
	//rprintfCRLF();
	//rprintf("500, ");
	//rprintfFloat(5,lin_v);
	//rprintfCRLF();
	rprintf("ang_v: ");
    1050:	00 d0       	rcall	.+0      	; 0x1052 <right_wall+0x1d2>
    1052:	0f 92       	push	r0
    1054:	dd 24       	eor	r13, r13
    1056:	d3 94       	inc	r13
    1058:	ed b7       	in	r30, 0x3d	; 61
    105a:	fe b7       	in	r31, 0x3e	; 62
    105c:	d1 82       	std	Z+1, r13	; 0x01
    105e:	82 ec       	ldi	r24, 0xC2	; 194
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	93 83       	std	Z+3, r25	; 0x03
    1064:	82 83       	std	Z+2, r24	; 0x02
    1066:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
	rprintfFloat(5,ang_v);
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	85 e0       	ldi	r24, 0x05	; 5
    1072:	4e 2d       	mov	r20, r14
    1074:	5f 2d       	mov	r21, r15
    1076:	60 2f       	mov	r22, r16
    1078:	71 2f       	mov	r23, r17
    107a:	0e 94 f5 16 	call	0x2dea	; 0x2dea <rprintfFloat>
	rprintf("\tlin_v: ");
    107e:	00 d0       	rcall	.+0      	; 0x1080 <right_wall+0x200>
    1080:	0f 92       	push	r0
    1082:	ed b7       	in	r30, 0x3d	; 61
    1084:	fe b7       	in	r31, 0x3e	; 62
    1086:	d1 82       	std	Z+1, r13	; 0x01
    1088:	89 eb       	ldi	r24, 0xB9	; 185
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	93 83       	std	Z+3, r25	; 0x03
    108e:	82 83       	std	Z+2, r24	; 0x02
    1090:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
	rprintfFloat(5,lin_v);
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	85 e0       	ldi	r24, 0x05	; 5
    109c:	47 2d       	mov	r20, r7
    109e:	56 2d       	mov	r21, r6
    10a0:	65 2d       	mov	r22, r5
    10a2:	74 2d       	mov	r23, r4
    10a4:	0e 94 f5 16 	call	0x2dea	; 0x2dea <rprintfFloat>
	rprintfCRLF();
    10a8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <rprintfCRLF>

}
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	af 90       	pop	r10
    10c0:	9f 90       	pop	r9
    10c2:	8f 90       	pop	r8
    10c4:	7f 90       	pop	r7
    10c6:	6f 90       	pop	r6
    10c8:	5f 90       	pop	r5
    10ca:	4f 90       	pop	r4
    10cc:	08 95       	ret

000010ce <prvSetupHardware>:
void right_sprayer(u16 position){
	u16 cmd = 2.778*position + 375;
	PWM_timer5_Set_L4(cmd);
}

void prvSetupHardware(){
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
	delay_cycles(65535);
	delay_cycles(65535);
	
	

	uartInit();  // initialize the UART (serial port)
    10d6:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <uartInit>
    uartSetBaudRate(0, 38400); // LB
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	56 e9       	ldi	r21, 0x96	; 150
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <uartSetBaudRate>
    uartSetBaudRate(1, 115200); // USB
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	52 ec       	ldi	r21, 0xC2	; 194
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <uartSetBaudRate>
    uartSetBaudRate(2, 115200); // XBEE
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	52 ec       	ldi	r21, 0xC2	; 194
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <uartSetBaudRate>
    uartSetBaudRate(3, 115200); // LDS
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	52 ec       	ldi	r21, 0xC2	; 194
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <uartSetBaudRate>
	//G=Ground, T=Tx (connect to external Rx), R=Rx (connect to external Tx)

	rprintfInit(uart1SendByte);// initialize rprintf system and configure uart1 (USB) for rprintf
    1112:	89 e5       	ldi	r24, 0x59	; 89
    1114:	91 e1       	ldi	r25, 0x11	; 17
    1116:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <rprintfInit>
	//rprintfInit(uart1SendByte);// initialize rprintf system and configure uart1 (USB) for rprintf

	configure_ports(); // configure which ports are analog, digital, etc.
    111a:	0e 94 ba 03 	call	0x774	; 0x774 <configure_ports>
	*/

	
	//UART ISR *** UART ISR ***
	
	uartSetRxHandler(0, &lbRcv);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	60 e7       	ldi	r22, 0x70	; 112
    1122:	75 e0       	ldi	r23, 0x05	; 5
    1124:	0e 94 d5 10 	call	0x21aa	; 0x21aa <uartSetRxHandler>
	uartSetRxHandler(3, &LDSRcv);
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	60 ee       	ldi	r22, 0xE0	; 224
    112c:	7a e1       	ldi	r23, 0x1A	; 26
    112e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <uartSetRxHandler>
//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
void LED_on(void)
	{PORT_OFF(PORTB,6);}
    1132:	2e 98       	cbi	0x05, 6	; 5

	//UART ISR *** UART ISR ***

	LED_on();

	rprintf("\r\nSystem Warmed Up");
    1134:	00 d0       	rcall	.+0      	; 0x1136 <prvSetupHardware+0x68>
    1136:	0f 92       	push	r0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	ed b7       	in	r30, 0x3d	; 61
    113c:	fe b7       	in	r31, 0x3e	; 62
    113e:	81 83       	std	Z+1, r24	; 0x01
    1140:	87 ee       	ldi	r24, 0xE7	; 231
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	93 83       	std	Z+3, r25	; 0x03
    1146:	82 83       	std	Z+2, r24	; 0x02
    1148:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>

	// initialize the timer system
 	init_timer0(TIMER_CLK_1024);
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <init_timer0>
 	init_timer1(TIMER_CLK_64); // Timer 1 is initialized by FreeRTOS
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <init_timer1>
 	//init_timer2(TIMER2_CLK_64);
	init_timer2(TIMER2_CLK_1024);
    115e:	87 e0       	ldi	r24, 0x07	; 7
    1160:	0e 94 0c 0b 	call	0x1618	; 0x1618 <init_timer2>
 	init_timer3(TIMER_CLK_64);
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	0e 94 1c 0b 	call	0x1638	; 0x1638 <init_timer3>
 	init_timer4(TIMER_CLK_64);
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	0e 94 2e 0b 	call	0x165c	; 0x165c <init_timer4>
 	init_timer5(TIMER_CLK_64);
    1170:	83 e0       	ldi	r24, 0x03	; 3
    1172:	0e 94 40 0b 	call	0x1680	; 0x1680 <init_timer5>

	a2dInit(); // initialize analog to digital converter (ADC)
    1176:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
    117a:	85 e0       	ldi	r24, 0x05	; 5
    117c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <a2dSetReference>
    1186:	10 e0       	ldi	r17, 0x00	; 0
	//let system stabelize for X time
	for(i=0;i<16;i++)
		{
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
		rprintf(".");
    1188:	01 e0       	ldi	r16, 0x01	; 1
    118a:	c5 ee       	ldi	r28, 0xE5	; 229
    118c:	d1 e0       	ldi	r29, 0x01	; 1
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage

	//let system stabelize for X time
	for(i=0;i<16;i++)
		{
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
    118e:	81 2f       	mov	r24, r17
    1190:	0e 94 84 15 	call	0x2b08	; 0x2b08 <a2dConvert8bit>
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
		rprintf(".");
    1194:	00 d0       	rcall	.+0      	; 0x1196 <prvSetupHardware+0xc8>
    1196:	0f 92       	push	r0
    1198:	ed b7       	in	r30, 0x3d	; 61
    119a:	fe b7       	in	r31, 0x3e	; 62
    119c:	01 83       	std	Z+1, r16	; 0x01
    119e:	d3 83       	std	Z+3, r29	; 0x03
    11a0:	c2 83       	std	Z+2, r28	; 0x02
    11a2:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
    11a6:	1f 5f       	subi	r17, 0xFF	; 255
	a2dInit(); // initialize analog to digital converter (ADC)
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage

	//let system stabelize for X time
	for(i=0;i<16;i++)
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	10 31       	cpi	r17, 0x10	; 16
    11b0:	71 f7       	brne	.-36     	; 0x118e <prvSetupHardware+0xc0>


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
    11b2:	2e 9a       	sbi	0x05, 6	; 5
		}

	LED_off();

	// Set pin H7 as Start Button input /////
	cbi(DDRH, PH7);  //set H7 as input pin
    11b4:	80 91 01 01 	lds	r24, 0x0101
    11b8:	8f 77       	andi	r24, 0x7F	; 127
    11ba:	80 93 01 01 	sts	0x0101, r24

void timer5PWMInitICR(u16 topcount)
{
	u08 sreg;
	// set PWM mode with ICR top-count
	cbi(TCCR5A,WGM10);
    11be:	80 91 20 01 	lds	r24, 0x0120
    11c2:	8e 7f       	andi	r24, 0xFE	; 254
    11c4:	80 93 20 01 	sts	0x0120, r24
	sbi(TCCR5A,WGM11);
    11c8:	80 91 20 01 	lds	r24, 0x0120
    11cc:	82 60       	ori	r24, 0x02	; 2
    11ce:	80 93 20 01 	sts	0x0120, r24
	sbi(TCCR5B,WGM12);
    11d2:	80 91 21 01 	lds	r24, 0x0121
    11d6:	88 60       	ori	r24, 0x08	; 8
    11d8:	80 93 21 01 	sts	0x0121, r24
	sbi(TCCR5B,WGM13);
    11dc:	80 91 21 01 	lds	r24, 0x0121
    11e0:	80 61       	ori	r24, 0x10	; 16
    11e2:	80 93 21 01 	sts	0x0121, r24
	
	// Save global interrupt flag
	sreg = SREG;
    11e6:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
    11e8:	f8 94       	cli
	// set top count value
	ICR5 = topcount;
    11ea:	88 e8       	ldi	r24, 0x88	; 136
    11ec:	93 e1       	ldi	r25, 0x13	; 19
    11ee:	90 93 27 01 	sts	0x0127, r25
    11f2:	80 93 26 01 	sts	0x0126, r24
	// Restore interrupts
	SREG = sreg;
    11f6:	2f bf       	out	0x3f, r18	; 63
	
	// clear output compare values
	OCR5A = 0;
    11f8:	10 92 29 01 	sts	0x0129, r1
    11fc:	10 92 28 01 	sts	0x0128, r1
	OCR5B = 0;
    1200:	10 92 2b 01 	sts	0x012B, r1
    1204:	10 92 2a 01 	sts	0x012A, r1
	/////////////////////////////////////////

	// PWM Setup ////////////////////////////
	// 20 ms period
	timer5PWMInitICR(5000);
	sbi(DDRL, PL3);
    1208:	80 91 0a 01 	lds	r24, 0x010A
    120c:	88 60       	ori	r24, 0x08	; 8
    120e:	80 93 0a 01 	sts	0x010A, r24
	sbi(DDRL, PL4);
    1212:	80 91 0a 01 	lds	r24, 0x010A
    1216:	80 61       	ori	r24, 0x10	; 16
    1218:	80 93 0a 01 	sts	0x010A, r24
	/////////////////////////////////////////

	rprintf("Initialization Complete \r\n");
    121c:	00 d0       	rcall	.+0      	; 0x121e <prvSetupHardware+0x150>
    121e:	0f 92       	push	r0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	ed b7       	in	r30, 0x3d	; 61
    1224:	fe b7       	in	r31, 0x3e	; 62
    1226:	81 83       	std	Z+1, r24	; 0x01
    1228:	8a ec       	ldi	r24, 0xCA	; 202
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	93 83       	std	Z+3, r25	; 0x03
    122e:	82 83       	std	Z+2, r24	; 0x02
    1230:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>

	//reset all timers to zero
	reset_timer0();
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <reset_timer0>
	reset_timer1();
    123e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <reset_timer1>
	reset_timer2();
    1242:	0e 94 b9 0a 	call	0x1572	; 0x1572 <reset_timer2>
	reset_timer3();
    1246:	0e 94 c4 0a 	call	0x1588	; 0x1588 <reset_timer3>
	reset_timer4();
    124a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <reset_timer4>
	reset_timer5();
    124e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <reset_timer5>


}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	08 95       	ret

0000125c <main>:
	rprintfCRLF();

}

int main(void)
{
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
	init_LDS_buffer();
    1262:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <init_LDS_buffer>
	prvSetupHardware();
    1266:	0e 94 67 08 	call	0x10ce	; 0x10ce <prvSetupHardware>
		delay_ms(500);
		PWM_timer5_Set_L4(500);
		delay_ms(500);
	}
	*/
	rprintf("Starting program.\n");
    126a:	00 d0       	rcall	.+0      	; 0x126c <main+0x10>
    126c:	0f 92       	push	r0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	ed b7       	in	r30, 0x3d	; 61
    1272:	fe b7       	in	r31, 0x3e	; 62
    1274:	81 83       	std	Z+1, r24	; 0x01
    1276:	89 e8       	ldi	r24, 0x89	; 137
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	93 83       	std	Z+3, r25	; 0x03
    127c:	82 83       	std	Z+2, r24	; 0x02
    127e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
	
	while(!audio_start && !button_start){
		if(bit_is_clear(PINH, 7)){
			button_start = SET;
    1288:	11 e0       	ldi	r17, 0x01	; 1
    128a:	6d c0       	rjmp	.+218    	; 0x1366 <main+0x10a>
	}
	*/
	rprintf("Starting program.\n");
	
	while(!audio_start && !button_start){
		if(bit_is_clear(PINH, 7)){
    128c:	80 91 00 01 	lds	r24, 0x0100
    1290:	87 fd       	sbrc	r24, 7
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <main+0x3c>
			button_start = SET;
    1294:	10 93 95 02 	sts	0x0295, r17
		}
		if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
    1298:	8a e0       	ldi	r24, 0x0A	; 10
    129a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <a2dConvert10bit>
    129e:	89 55       	subi	r24, 0x59	; 89
    12a0:	92 40       	sbci	r25, 0x02	; 2
    12a2:	08 f4       	brcc	.+2      	; 0x12a6 <main+0x4a>
    12a4:	5c c0       	rjmp	.+184    	; 0x135e <main+0x102>
    12a6:	c0 e0       	ldi	r28, 0x00	; 0
    12a8:	d0 e0       	ldi	r29, 0x00	; 0
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
				if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
    12aa:	8a e0       	ldi	r24, 0x0A	; 10
    12ac:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <a2dConvert10bit>
    12b0:	89 55       	subi	r24, 0x59	; 89
    12b2:	92 40       	sbci	r25, 0x02	; 2
    12b4:	48 f0       	brcs	.+18     	; 0x12c8 <main+0x6c>
					audio_count++;
    12b6:	80 91 93 02 	lds	r24, 0x0293
    12ba:	90 91 94 02 	lds	r25, 0x0294
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	90 93 94 02 	sts	0x0294, r25
    12c4:	80 93 93 02 	sts	0x0293, r24
				}
				delay_us(10);	// Sample every 10 us
    12c8:	8a e0       	ldi	r24, 0x0A	; 10
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <delay_us>
	while(!audio_start && !button_start){
		if(bit_is_clear(PINH, 7)){
			button_start = SET;
		}
		if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
    12d0:	21 96       	adiw	r28, 0x01	; 1
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	c8 3e       	cpi	r28, 0xE8	; 232
    12d6:	d8 07       	cpc	r29, r24
    12d8:	41 f7       	brne	.-48     	; 0x12aa <main+0x4e>
    12da:	c0 e0       	ldi	r28, 0x00	; 0
    12dc:	d0 e0       	ldi	r29, 0x00	; 0
					audio_count++;
				}
				delay_us(10);	// Sample every 10 us
			}
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
				if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
    12de:	8a e0       	ldi	r24, 0x0A	; 10
    12e0:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <a2dConvert10bit>
    12e4:	89 55       	subi	r24, 0x59	; 89
    12e6:	92 40       	sbci	r25, 0x02	; 2
    12e8:	48 f0       	brcs	.+18     	; 0x12fc <main+0xa0>
					audio_count++;
    12ea:	80 91 93 02 	lds	r24, 0x0293
    12ee:	90 91 94 02 	lds	r25, 0x0294
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	90 93 94 02 	sts	0x0294, r25
    12f8:	80 93 93 02 	sts	0x0293, r24
				}
				delay_us(10);	// Sample every 10 us
    12fc:	8a e0       	ldi	r24, 0x0A	; 10
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <delay_us>
				if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
					audio_count++;
				}
				delay_us(10);	// Sample every 10 us
			}
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
    1304:	21 96       	adiw	r28, 0x01	; 1
    1306:	f3 e0       	ldi	r31, 0x03	; 3
    1308:	c8 3e       	cpi	r28, 0xE8	; 232
    130a:	df 07       	cpc	r29, r31
    130c:	41 f7       	brne	.-48     	; 0x12de <main+0x82>
    130e:	c0 e0       	ldi	r28, 0x00	; 0
    1310:	d0 e0       	ldi	r29, 0x00	; 0
					audio_count++;
				}
				delay_us(10);	// Sample every 10 us
			}
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
				if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
    1312:	8a e0       	ldi	r24, 0x0A	; 10
    1314:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <a2dConvert10bit>
    1318:	89 55       	subi	r24, 0x59	; 89
    131a:	92 40       	sbci	r25, 0x02	; 2
    131c:	48 f0       	brcs	.+18     	; 0x1330 <main+0xd4>
					audio_count++;
    131e:	80 91 93 02 	lds	r24, 0x0293
    1322:	90 91 94 02 	lds	r25, 0x0294
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	90 93 94 02 	sts	0x0294, r25
    132c:	80 93 93 02 	sts	0x0293, r24
				}
				delay_us(10);	// Sample every 10 us
    1330:	8a e0       	ldi	r24, 0x0A	; 10
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <delay_us>
				if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
					audio_count++;
				}
				delay_us(10);	// Sample every 10 us
			}
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
    1338:	21 96       	adiw	r28, 0x01	; 1
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	c8 3e       	cpi	r28, 0xE8	; 232
    133e:	d8 07       	cpc	r29, r24
    1340:	41 f7       	brne	.-48     	; 0x1312 <main+0xb6>
					audio_count++;
				}
				delay_us(10);	// Sample every 10 us
			}
			
			if(audio_count > PEAKS_IN_SAMPLE){
    1342:	80 91 93 02 	lds	r24, 0x0293
    1346:	90 91 94 02 	lds	r25, 0x0294
    134a:	81 52       	subi	r24, 0x21	; 33
    134c:	93 40       	sbci	r25, 0x03	; 3
    134e:	18 f0       	brcs	.+6      	; 0x1356 <main+0xfa>
				audio_start = SET;
    1350:	10 93 92 02 	sts	0x0292, r17
    1354:	04 c0       	rjmp	.+8      	; 0x135e <main+0x102>
			}
			else{
				audio_count = 0;
    1356:	10 92 94 02 	sts	0x0294, r1
    135a:	10 92 93 02 	sts	0x0293, r1
			}
		}
		delay_us(10);	// Sample every 10 us
    135e:	8a e0       	ldi	r24, 0x0A	; 10
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <delay_us>
		delay_ms(500);
	}
	*/
	rprintf("Starting program.\n");
	
	while(!audio_start && !button_start){
    1366:	80 91 92 02 	lds	r24, 0x0292
    136a:	88 23       	and	r24, r24
    136c:	29 f4       	brne	.+10     	; 0x1378 <main+0x11c>
    136e:	80 91 95 02 	lds	r24, 0x0295
    1372:	88 23       	and	r24, r24
    1374:	09 f4       	brne	.+2      	; 0x1378 <main+0x11c>
    1376:	8a cf       	rjmp	.-236    	; 0x128c <main+0x30>
			}
		}
		delay_us(10);	// Sample every 10 us
	}
	
	rprintf("START!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
    1378:	00 d0       	rcall	.+0      	; 0x137a <main+0x11e>
    137a:	0f 92       	push	r0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	ed b7       	in	r30, 0x3d	; 61
    1380:	fe b7       	in	r31, 0x3e	; 62
    1382:	81 83       	std	Z+1, r24	; 0x01
    1384:	86 e6       	ldi	r24, 0x66	; 102
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	93 83       	std	Z+3, r25	; 0x03
    138a:	82 83       	std	Z+2, r24	; 0x02
    138c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0

	while(1){
		// Print ranges
		//rprintf("Scan start\n");
/**/
		get_range_scan(ranges);
    1396:	86 e7       	ldi	r24, 0x76	; 118
    1398:	95 e0       	ldi	r25, 0x05	; 5
    139a:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <get_range_scan>
		delay_ms(1000);
		*/
		//navupdate(ranges, &lin_vel, &ang_vel);

		//right_wall(ranges);
		straight_beam(ranges);
    139e:	86 e7       	ldi	r24, 0x76	; 118
    13a0:	95 e0       	ldi	r25, 0x05	; 5
    13a2:	0e 94 42 06 	call	0xc84	; 0xc84 <straight_beam>
		rprintfFloat(5,ang_vel);
		rprintf("\tlin_vel: ");
		rprintfFloat(5,lin_vel);
		rprintfCRLF();
		*/
		delay_ms(10);
    13a6:	8a e0       	ldi	r24, 0x0A	; 10
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 67 0b 	call	0x16ce	; 0x16ce <sleep>
    13ae:	f3 cf       	rjmp	.-26     	; 0x1396 <main+0x13a>

000013b0 <prescaler_hex_to_value>:
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    13b0:	e8 2f       	mov	r30, r24
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	e7 70       	andi	r30, 0x07	; 7
    13b6:	f0 70       	andi	r31, 0x00	; 0
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	e6 50       	subi	r30, 0x06	; 6
    13be:	fe 4f       	sbci	r31, 0xFE	; 254
    13c0:	25 91       	lpm	r18, Z+
    13c2:	34 91       	lpm	r19, Z+
}
    13c4:	c9 01       	movw	r24, r18
    13c6:	08 95       	ret

000013c8 <prescaler_hex_to_value_for_timer2>:
uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    13c8:	e8 2f       	mov	r30, r24
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	e7 70       	andi	r30, 0x07	; 7
    13ce:	f0 70       	andi	r31, 0x00	; 0
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	ea 5f       	subi	r30, 0xFA	; 250
    13d6:	fd 4f       	sbci	r31, 0xFD	; 253
    13d8:	25 91       	lpm	r18, Z+
    13da:	34 91       	lpm	r19, Z+
}
    13dc:	c9 01       	movw	r24, r18
    13de:	08 95       	ret

000013e0 <get_timer0_prescaler>:

uint16_t get_timer0_prescaler(void)
{
  return prescaler_hex_to_value(TCCR0B);
    13e0:	85 b5       	in	r24, 0x25	; 37
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    13e2:	e8 2f       	mov	r30, r24
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	e7 70       	andi	r30, 0x07	; 7
    13e8:	f0 70       	andi	r31, 0x00	; 0
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	e6 50       	subi	r30, 0x06	; 6
    13f0:	fe 4f       	sbci	r31, 0xFE	; 254
    13f2:	25 91       	lpm	r18, Z+
    13f4:	34 91       	lpm	r19, Z+
}

uint16_t get_timer0_prescaler(void)
{
  return prescaler_hex_to_value(TCCR0B);
}
    13f6:	c9 01       	movw	r24, r18
    13f8:	08 95       	ret

000013fa <get_timer1_prescaler>:
uint16_t get_timer1_prescaler(void)
{
  return prescaler_hex_to_value(TCCR1B);
    13fa:	80 91 81 00 	lds	r24, 0x0081
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    13fe:	e8 2f       	mov	r30, r24
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	e7 70       	andi	r30, 0x07	; 7
    1404:	f0 70       	andi	r31, 0x00	; 0
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	e6 50       	subi	r30, 0x06	; 6
    140c:	fe 4f       	sbci	r31, 0xFE	; 254
    140e:	25 91       	lpm	r18, Z+
    1410:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR0B);
}
uint16_t get_timer1_prescaler(void)
{
  return prescaler_hex_to_value(TCCR1B);
}
    1412:	c9 01       	movw	r24, r18
    1414:	08 95       	ret

00001416 <get_timer2_prescaler>:
uint16_t get_timer2_prescaler(void)
{
  return prescaler_hex_to_value_for_timer2(TCCR2B);
    1416:	80 91 b1 00 	lds	r24, 0x00B1
uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    141a:	e8 2f       	mov	r30, r24
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	e7 70       	andi	r30, 0x07	; 7
    1420:	f0 70       	andi	r31, 0x00	; 0
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	ea 5f       	subi	r30, 0xFA	; 250
    1428:	fd 4f       	sbci	r31, 0xFD	; 253
    142a:	25 91       	lpm	r18, Z+
    142c:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR1B);
}
uint16_t get_timer2_prescaler(void)
{
  return prescaler_hex_to_value_for_timer2(TCCR2B);
}
    142e:	c9 01       	movw	r24, r18
    1430:	08 95       	ret

00001432 <get_timer3_prescaler>:
uint16_t get_timer3_prescaler(void)
{
  return prescaler_hex_to_value(TCCR3B);
    1432:	80 91 91 00 	lds	r24, 0x0091
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    1436:	e8 2f       	mov	r30, r24
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	e7 70       	andi	r30, 0x07	; 7
    143c:	f0 70       	andi	r31, 0x00	; 0
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	e6 50       	subi	r30, 0x06	; 6
    1444:	fe 4f       	sbci	r31, 0xFE	; 254
    1446:	25 91       	lpm	r18, Z+
    1448:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value_for_timer2(TCCR2B);
}
uint16_t get_timer3_prescaler(void)
{
  return prescaler_hex_to_value(TCCR3B);
}
    144a:	c9 01       	movw	r24, r18
    144c:	08 95       	ret

0000144e <get_timer4_prescaler>:
uint16_t get_timer4_prescaler(void)
{
  return prescaler_hex_to_value(TCCR4B);
    144e:	80 91 a1 00 	lds	r24, 0x00A1
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    1452:	e8 2f       	mov	r30, r24
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	e7 70       	andi	r30, 0x07	; 7
    1458:	f0 70       	andi	r31, 0x00	; 0
    145a:	ee 0f       	add	r30, r30
    145c:	ff 1f       	adc	r31, r31
    145e:	e6 50       	subi	r30, 0x06	; 6
    1460:	fe 4f       	sbci	r31, 0xFE	; 254
    1462:	25 91       	lpm	r18, Z+
    1464:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR3B);
}
uint16_t get_timer4_prescaler(void)
{
  return prescaler_hex_to_value(TCCR4B);
}
    1466:	c9 01       	movw	r24, r18
    1468:	08 95       	ret

0000146a <get_timer5_prescaler>:
uint16_t get_timer5_prescaler(void)
{
  return prescaler_hex_to_value(TCCR5B);
    146a:	80 91 21 01 	lds	r24, 0x0121
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    146e:	e8 2f       	mov	r30, r24
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	e7 70       	andi	r30, 0x07	; 7
    1474:	f0 70       	andi	r31, 0x00	; 0
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	e6 50       	subi	r30, 0x06	; 6
    147c:	fe 4f       	sbci	r31, 0xFE	; 254
    147e:	25 91       	lpm	r18, Z+
    1480:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR4B);
}
uint16_t get_timer5_prescaler(void)
{
  return prescaler_hex_to_value(TCCR5B);
}
    1482:	c9 01       	movw	r24, r18
    1484:	08 95       	ret

00001486 <get_timer0_overflow>:

const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
    1486:	20 91 4e 08 	lds	r18, 0x084E
    148a:	30 91 4f 08 	lds	r19, 0x084F
    148e:	40 91 50 08 	lds	r20, 0x0850
    1492:	50 91 51 08 	lds	r21, 0x0851
}
    1496:	b9 01       	movw	r22, r18
    1498:	ca 01       	movw	r24, r20
    149a:	08 95       	ret

0000149c <get_timer1_overflow>:
const uint32_t get_timer1_overflow(void)
{
    return timer1_ovrflow_cnt;
    149c:	20 91 4a 08 	lds	r18, 0x084A
    14a0:	30 91 4b 08 	lds	r19, 0x084B
    14a4:	40 91 4c 08 	lds	r20, 0x084C
    14a8:	50 91 4d 08 	lds	r21, 0x084D
}
    14ac:	b9 01       	movw	r22, r18
    14ae:	ca 01       	movw	r24, r20
    14b0:	08 95       	ret

000014b2 <get_timer2_overflow>:
const uint32_t get_timer2_overflow(void)
{
    return timer2_ovrflow_cnt;
    14b2:	20 91 52 08 	lds	r18, 0x0852
    14b6:	30 91 53 08 	lds	r19, 0x0853
    14ba:	40 91 54 08 	lds	r20, 0x0854
    14be:	50 91 55 08 	lds	r21, 0x0855
}
    14c2:	b9 01       	movw	r22, r18
    14c4:	ca 01       	movw	r24, r20
    14c6:	08 95       	ret

000014c8 <get_timer3_overflow>:
const uint32_t get_timer3_overflow(void)
{
    return timer3_ovrflow_cnt;
    14c8:	20 91 5a 08 	lds	r18, 0x085A
    14cc:	30 91 5b 08 	lds	r19, 0x085B
    14d0:	40 91 5c 08 	lds	r20, 0x085C
    14d4:	50 91 5d 08 	lds	r21, 0x085D
}
    14d8:	b9 01       	movw	r22, r18
    14da:	ca 01       	movw	r24, r20
    14dc:	08 95       	ret

000014de <get_timer4_overflow>:
const uint32_t get_timer4_overflow(void)
{
    return timer4_ovrflow_cnt;
    14de:	20 91 46 08 	lds	r18, 0x0846
    14e2:	30 91 47 08 	lds	r19, 0x0847
    14e6:	40 91 48 08 	lds	r20, 0x0848
    14ea:	50 91 49 08 	lds	r21, 0x0849
}
    14ee:	b9 01       	movw	r22, r18
    14f0:	ca 01       	movw	r24, r20
    14f2:	08 95       	ret

000014f4 <get_timer5_overflow>:
const uint32_t get_timer5_overflow(void)
{
    return timer5_ovrflow_cnt;
    14f4:	20 91 5e 08 	lds	r18, 0x085E
    14f8:	30 91 5f 08 	lds	r19, 0x085F
    14fc:	40 91 60 08 	lds	r20, 0x0860
    1500:	50 91 61 08 	lds	r21, 0x0861
}
    1504:	b9 01       	movw	r22, r18
    1506:	ca 01       	movw	r24, r20
    1508:	08 95       	ret

0000150a <get_timer0_counter>:

const uint8_t get_timer0_counter(void)
{
    return TCNT0;
    150a:	86 b5       	in	r24, 0x26	; 38
}
    150c:	08 95       	ret

0000150e <get_timer1_counter>:
const uint16_t get_timer1_counter(void)
{
    return TCNT1;
    150e:	20 91 84 00 	lds	r18, 0x0084
    1512:	30 91 85 00 	lds	r19, 0x0085
}
    1516:	c9 01       	movw	r24, r18
    1518:	08 95       	ret

0000151a <get_timer2_counter>:
const uint8_t get_timer2_counter(void)
{
    return TCNT2;
    151a:	80 91 b2 00 	lds	r24, 0x00B2
}
    151e:	08 95       	ret

00001520 <get_timer3_counter>:
const uint16_t get_timer3_counter(void)
{
    return TCNT3;
    1520:	20 91 94 00 	lds	r18, 0x0094
    1524:	30 91 95 00 	lds	r19, 0x0095
}
    1528:	c9 01       	movw	r24, r18
    152a:	08 95       	ret

0000152c <get_timer4_counter>:
const uint16_t get_timer4_counter(void)
{
    return TCNT4;
    152c:	20 91 a4 00 	lds	r18, 0x00A4
    1530:	30 91 a5 00 	lds	r19, 0x00A5
}
    1534:	c9 01       	movw	r24, r18
    1536:	08 95       	ret

00001538 <get_timer5_counter>:
const uint16_t get_timer5_counter(void)
{
    return TCNT5;
    1538:	20 91 24 01 	lds	r18, 0x0124
    153c:	30 91 25 01 	lds	r19, 0x0125
}
    1540:	c9 01       	movw	r24, r18
    1542:	08 95       	ret

00001544 <reset_timer0>:

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    1544:	10 92 4e 08 	sts	0x084E, r1
    1548:	10 92 4f 08 	sts	0x084F, r1
    154c:	10 92 50 08 	sts	0x0850, r1
    1550:	10 92 51 08 	sts	0x0851, r1
    1554:	16 bc       	out	0x26, r1	; 38
}
    1556:	08 95       	ret

00001558 <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    1558:	10 92 4a 08 	sts	0x084A, r1
    155c:	10 92 4b 08 	sts	0x084B, r1
    1560:	10 92 4c 08 	sts	0x084C, r1
    1564:	10 92 4d 08 	sts	0x084D, r1
    1568:	10 92 85 00 	sts	0x0085, r1
    156c:	10 92 84 00 	sts	0x0084, r1
}
    1570:	08 95       	ret

00001572 <reset_timer2>:
void reset_timer2(void)
{
    TCNT2 = timer2_ovrflow_cnt = 0;
    1572:	10 92 52 08 	sts	0x0852, r1
    1576:	10 92 53 08 	sts	0x0853, r1
    157a:	10 92 54 08 	sts	0x0854, r1
    157e:	10 92 55 08 	sts	0x0855, r1
    1582:	10 92 b2 00 	sts	0x00B2, r1
}
    1586:	08 95       	ret

00001588 <reset_timer3>:
void reset_timer3(void)
{
    TCNT3 = timer3_ovrflow_cnt = 0;
    1588:	10 92 5a 08 	sts	0x085A, r1
    158c:	10 92 5b 08 	sts	0x085B, r1
    1590:	10 92 5c 08 	sts	0x085C, r1
    1594:	10 92 5d 08 	sts	0x085D, r1
    1598:	10 92 95 00 	sts	0x0095, r1
    159c:	10 92 94 00 	sts	0x0094, r1
}
    15a0:	08 95       	ret

000015a2 <reset_timer4>:
void reset_timer4(void)
{
    TCNT4 = timer4_ovrflow_cnt = 0;
    15a2:	10 92 46 08 	sts	0x0846, r1
    15a6:	10 92 47 08 	sts	0x0847, r1
    15aa:	10 92 48 08 	sts	0x0848, r1
    15ae:	10 92 49 08 	sts	0x0849, r1
    15b2:	10 92 a5 00 	sts	0x00A5, r1
    15b6:	10 92 a4 00 	sts	0x00A4, r1
}
    15ba:	08 95       	ret

000015bc <reset_timer5>:
void reset_timer5(void)
{
    TCNT5 = timer5_ovrflow_cnt = 0;
    15bc:	10 92 5e 08 	sts	0x085E, r1
    15c0:	10 92 5f 08 	sts	0x085F, r1
    15c4:	10 92 60 08 	sts	0x0860, r1
    15c8:	10 92 61 08 	sts	0x0861, r1
    15cc:	10 92 25 01 	sts	0x0125, r1
    15d0:	10 92 24 01 	sts	0x0124, r1
}
    15d4:	08 95       	ret

000015d6 <delay_us>:

	delay_loops = ((time_us * CYCLES_PER_US)+3) / 5; // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
}
    15d6:	08 95       	ret

000015d8 <init_timer0>:

void init_timer0(const uint8_t prescaler)
{
  TCCR0B = prescaler;
    15d8:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	80 93 6e 00 	sts	0x006E, r24
    return TCNT5;
}

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    15e0:	10 92 4e 08 	sts	0x084E, r1
    15e4:	10 92 4f 08 	sts	0x084F, r1
    15e8:	10 92 50 08 	sts	0x0850, r1
    15ec:	10 92 51 08 	sts	0x0851, r1
    15f0:	16 bc       	out	0x26, r1	; 38
void init_timer0(const uint8_t prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
    15f2:	08 95       	ret

000015f4 <init_timer1>:
void init_timer1(const uint8_t prescaler)
{
  TCCR1B = prescaler;
    15f4:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    15fe:	10 92 4a 08 	sts	0x084A, r1
    1602:	10 92 4b 08 	sts	0x084B, r1
    1606:	10 92 4c 08 	sts	0x084C, r1
    160a:	10 92 4d 08 	sts	0x084D, r1
    160e:	10 92 85 00 	sts	0x0085, r1
    1612:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const uint8_t prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
    1616:	08 95       	ret

00001618 <init_timer2>:
void init_timer2(const uint8_t prescaler)
{
  TCCR2B = prescaler;
    1618:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = _BV(TOIE2); // enable interrupts
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	80 93 70 00 	sts	0x0070, r24
{
    TCNT1 = timer1_ovrflow_cnt = 0;
}
void reset_timer2(void)
{
    TCNT2 = timer2_ovrflow_cnt = 0;
    1622:	10 92 52 08 	sts	0x0852, r1
    1626:	10 92 53 08 	sts	0x0853, r1
    162a:	10 92 54 08 	sts	0x0854, r1
    162e:	10 92 55 08 	sts	0x0855, r1
    1632:	10 92 b2 00 	sts	0x00B2, r1
void init_timer2(const uint8_t prescaler)
{
  TCCR2B = prescaler;
  TIMSK2 = _BV(TOIE2); // enable interrupts
  reset_timer2(); // reset counter
}
    1636:	08 95       	ret

00001638 <init_timer3>:
void init_timer3(const uint8_t prescaler)
{
  TCCR3B = prescaler;
    1638:	80 93 91 00 	sts	0x0091, r24
  TIMSK3 = _BV(TOIE3); // enable interrupts
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 71 00 	sts	0x0071, r24
{
    TCNT2 = timer2_ovrflow_cnt = 0;
}
void reset_timer3(void)
{
    TCNT3 = timer3_ovrflow_cnt = 0;
    1642:	10 92 5a 08 	sts	0x085A, r1
    1646:	10 92 5b 08 	sts	0x085B, r1
    164a:	10 92 5c 08 	sts	0x085C, r1
    164e:	10 92 5d 08 	sts	0x085D, r1
    1652:	10 92 95 00 	sts	0x0095, r1
    1656:	10 92 94 00 	sts	0x0094, r1
void init_timer3(const uint8_t prescaler)
{
  TCCR3B = prescaler;
  TIMSK3 = _BV(TOIE3); // enable interrupts
  reset_timer3(); // reset counter
}
    165a:	08 95       	ret

0000165c <init_timer4>:
void init_timer4(const uint8_t prescaler)
{
  TCCR4B = prescaler;
    165c:	80 93 a1 00 	sts	0x00A1, r24
  TIMSK4 = _BV(TOIE4); // enable interrupts
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	80 93 72 00 	sts	0x0072, r24
{
    TCNT3 = timer3_ovrflow_cnt = 0;
}
void reset_timer4(void)
{
    TCNT4 = timer4_ovrflow_cnt = 0;
    1666:	10 92 46 08 	sts	0x0846, r1
    166a:	10 92 47 08 	sts	0x0847, r1
    166e:	10 92 48 08 	sts	0x0848, r1
    1672:	10 92 49 08 	sts	0x0849, r1
    1676:	10 92 a5 00 	sts	0x00A5, r1
    167a:	10 92 a4 00 	sts	0x00A4, r1
void init_timer4(const uint8_t prescaler)
{
  TCCR4B = prescaler;
  TIMSK4 = _BV(TOIE4); // enable interrupts
  reset_timer4(); // reset counter
}
    167e:	08 95       	ret

00001680 <init_timer5>:
void init_timer5(const uint8_t prescaler)
{
  TCCR5B = prescaler;
    1680:	80 93 21 01 	sts	0x0121, r24
  TIMSK5 = _BV(TOIE5); // enable interrupts
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 93 73 00 	sts	0x0073, r24
{
    TCNT4 = timer4_ovrflow_cnt = 0;
}
void reset_timer5(void)
{
    TCNT5 = timer5_ovrflow_cnt = 0;
    168a:	10 92 5e 08 	sts	0x085E, r1
    168e:	10 92 5f 08 	sts	0x085F, r1
    1692:	10 92 60 08 	sts	0x0860, r1
    1696:	10 92 61 08 	sts	0x0861, r1
    169a:	10 92 25 01 	sts	0x0125, r1
    169e:	10 92 24 01 	sts	0x0124, r1
void init_timer5(const uint8_t prescaler)
{
  TCCR5B = prescaler;
  TIMSK5 = _BV(TOIE5); // enable interrupts
  reset_timer5(); // reset counter
}
    16a2:	08 95       	ret

000016a4 <timer_attach>:

void timer_attach(TimerInterrupt_t interrupt, void (*user_func)(void) )
{
  // set the interrupt function to run
  // the supplied user's function
  TimerIntFunc[interrupt] = user_func;
    16a4:	e8 2f       	mov	r30, r24
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	ee 0f       	add	r30, r30
    16aa:	ff 1f       	adc	r31, r31
    16ac:	e2 56       	subi	r30, 0x62	; 98
    16ae:	fd 4f       	sbci	r31, 0xFD	; 253
    16b0:	71 83       	std	Z+1, r23	; 0x01
    16b2:	60 83       	st	Z, r22
}
    16b4:	08 95       	ret

000016b6 <timer_detach>:

void timer_detach(TimerInterrupt_t interrupt)
{
  // clear the user defined interrupt function
  TimerIntFunc[interrupt] = NULL;
    16b6:	e8 2f       	mov	r30, r24
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	e2 56       	subi	r30, 0x62	; 98
    16c0:	fd 4f       	sbci	r31, 0xFD	; 253
    16c2:	11 82       	std	Z+1, r1	; 0x01
    16c4:	10 82       	st	Z, r1
}
    16c6:	08 95       	ret

000016c8 <_delay_loop_2>:

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <_delay_loop_2>
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    16cc:	08 95       	ret

000016ce <sleep>:

void sleep(uint16_t time_ms)
{
    16ce:	af 92       	push	r10
    16d0:	bf 92       	push	r11
    16d2:	cf 92       	push	r12
    16d4:	df 92       	push	r13
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * time_ms;
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	bc 01       	movw	r22, r24
    16e4:	cd 01       	movw	r24, r26
    16e6:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__floatunsisf>
    16ea:	5b 01       	movw	r10, r22
    16ec:	6c 01       	movw	r12, r24
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a e7       	ldi	r20, 0x7A	; 122
    16f4:	55 e4       	ldi	r21, 0x45	; 69
    16f6:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
    16fa:	7b 01       	movw	r14, r22
    16fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e8       	ldi	r20, 0x80	; 128
    1704:	5f e3       	ldi	r21, 0x3F	; 63
    1706:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__cmpsf2>
    170a:	88 23       	and	r24, r24
    170c:	1c f4       	brge	.+6      	; 0x1714 <sleep+0x46>
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	24 c0       	rjmp	.+72     	; 0x175c <sleep+0x8e>
		__ticks = 1;
	else if (__tmp > 65535)
    1714:	c8 01       	movw	r24, r16
    1716:	b7 01       	movw	r22, r14
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	3f ef       	ldi	r19, 0xFF	; 255
    171c:	4f e7       	ldi	r20, 0x7F	; 127
    171e:	57 e4       	ldi	r21, 0x47	; 71
    1720:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__gesf2>
    1724:	18 16       	cp	r1, r24
    1726:	b4 f4       	brge	.+44     	; 0x1754 <sleep+0x86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
    1728:	c6 01       	movw	r24, r12
    172a:	b5 01       	movw	r22, r10
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
    1738:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__fixunssfsi>
}

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    173c:	80 e9       	ldi	r24, 0x90	; 144
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	05 c0       	rjmp	.+10     	; 0x174c <sleep+0x7e>
    1742:	fc 01       	movw	r30, r24
    1744:	31 97       	sbiw	r30, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <sleep+0x76>
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1748:	61 50       	subi	r22, 0x01	; 1
    174a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
    174c:	61 15       	cp	r22, r1
    174e:	71 05       	cpc	r23, r1
    1750:	c1 f7       	brne	.-16     	; 0x1742 <sleep+0x74>
    1752:	07 c0       	rjmp	.+14     	; 0x1762 <sleep+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1754:	c8 01       	movw	r24, r16
    1756:	b7 01       	movw	r22, r14
    1758:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__fixunssfsi>
}

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    175c:	cb 01       	movw	r24, r22
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <sleep+0x90>
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	bf 90       	pop	r11
    1770:	af 90       	pop	r10
    1772:	08 95       	ret

00001774 <__vector_23>:
    }
  }
}*/

ISR(TIMER0_OVF_vect) 
{
    1774:	1f 92       	push	r1
    1776:	0f 92       	push	r0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	0f 92       	push	r0
    177c:	11 24       	eor	r1, r1
    177e:	2f 93       	push	r18
    1780:	3f 93       	push	r19
    1782:	4f 93       	push	r20
    1784:	5f 93       	push	r21
    1786:	6f 93       	push	r22
    1788:	7f 93       	push	r23
    178a:	8f 93       	push	r24
    178c:	9f 93       	push	r25
    178e:	af 93       	push	r26
    1790:	bf 93       	push	r27
    1792:	ef 93       	push	r30
    1794:	ff 93       	push	r31
  timer0_ovrflow_cnt++;
    1796:	80 91 4e 08 	lds	r24, 0x084E
    179a:	90 91 4f 08 	lds	r25, 0x084F
    179e:	a0 91 50 08 	lds	r26, 0x0850
    17a2:	b0 91 51 08 	lds	r27, 0x0851
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	a1 1d       	adc	r26, r1
    17aa:	b1 1d       	adc	r27, r1
    17ac:	80 93 4e 08 	sts	0x084E, r24
    17b0:	90 93 4f 08 	sts	0x084F, r25
    17b4:	a0 93 50 08 	sts	0x0850, r26
    17b8:	b0 93 51 08 	sts	0x0851, r27
  timer_sleep_cnt++;
    17bc:	80 91 56 08 	lds	r24, 0x0856
    17c0:	90 91 57 08 	lds	r25, 0x0857
    17c4:	a0 91 58 08 	lds	r26, 0x0858
    17c8:	b0 91 59 08 	lds	r27, 0x0859
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	a1 1d       	adc	r26, r1
    17d0:	b1 1d       	adc	r27, r1
    17d2:	80 93 56 08 	sts	0x0856, r24
    17d6:	90 93 57 08 	sts	0x0857, r25
    17da:	a0 93 58 08 	sts	0x0858, r26
    17de:	b0 93 59 08 	sts	0x0859, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER0_OVF_interrupt);
    17e2:	80 91 a2 02 	lds	r24, 0x02A2
    17e6:	90 91 a3 02 	lds	r25, 0x02A3
    17ea:	89 2b       	or	r24, r25
    17ec:	29 f0       	breq	.+10     	; 0x17f8 <__vector_23+0x84>
    17ee:	e0 91 a2 02 	lds	r30, 0x02A2
    17f2:	f0 91 a3 02 	lds	r31, 0x02A3
    17f6:	09 95       	icall
}
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_20>:
ISR(TIMER1_OVF_vect) 
{
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	11 24       	eor	r1, r1
    1824:	2f 93       	push	r18
    1826:	3f 93       	push	r19
    1828:	4f 93       	push	r20
    182a:	5f 93       	push	r21
    182c:	6f 93       	push	r22
    182e:	7f 93       	push	r23
    1830:	8f 93       	push	r24
    1832:	9f 93       	push	r25
    1834:	af 93       	push	r26
    1836:	bf 93       	push	r27
    1838:	ef 93       	push	r30
    183a:	ff 93       	push	r31
  timer1_ovrflow_cnt++;
    183c:	80 91 4a 08 	lds	r24, 0x084A
    1840:	90 91 4b 08 	lds	r25, 0x084B
    1844:	a0 91 4c 08 	lds	r26, 0x084C
    1848:	b0 91 4d 08 	lds	r27, 0x084D
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	a1 1d       	adc	r26, r1
    1850:	b1 1d       	adc	r27, r1
    1852:	80 93 4a 08 	sts	0x084A, r24
    1856:	90 93 4b 08 	sts	0x084B, r25
    185a:	a0 93 4c 08 	sts	0x084C, r26
    185e:	b0 93 4d 08 	sts	0x084D, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER1_OVF_interrupt);
    1862:	80 91 ac 02 	lds	r24, 0x02AC
    1866:	90 91 ad 02 	lds	r25, 0x02AD
    186a:	89 2b       	or	r24, r25
    186c:	29 f0       	breq	.+10     	; 0x1878 <__vector_20+0x5e>
    186e:	e0 91 ac 02 	lds	r30, 0x02AC
    1872:	f0 91 ad 02 	lds	r31, 0x02AD
    1876:	09 95       	icall
}
    1878:	ff 91       	pop	r31
    187a:	ef 91       	pop	r30
    187c:	bf 91       	pop	r27
    187e:	af 91       	pop	r26
    1880:	9f 91       	pop	r25
    1882:	8f 91       	pop	r24
    1884:	7f 91       	pop	r23
    1886:	6f 91       	pop	r22
    1888:	5f 91       	pop	r21
    188a:	4f 91       	pop	r20
    188c:	3f 91       	pop	r19
    188e:	2f 91       	pop	r18
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <__vector_15>:
ISR(TIMER2_OVF_vect) 
{
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	2f 93       	push	r18
    18a6:	3f 93       	push	r19
    18a8:	4f 93       	push	r20
    18aa:	5f 93       	push	r21
    18ac:	6f 93       	push	r22
    18ae:	7f 93       	push	r23
    18b0:	8f 93       	push	r24
    18b2:	9f 93       	push	r25
    18b4:	af 93       	push	r26
    18b6:	bf 93       	push	r27
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
  timer2_ovrflow_cnt++;
    18bc:	80 91 52 08 	lds	r24, 0x0852
    18c0:	90 91 53 08 	lds	r25, 0x0853
    18c4:	a0 91 54 08 	lds	r26, 0x0854
    18c8:	b0 91 55 08 	lds	r27, 0x0855
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	a1 1d       	adc	r26, r1
    18d0:	b1 1d       	adc	r27, r1
    18d2:	80 93 52 08 	sts	0x0852, r24
    18d6:	90 93 53 08 	sts	0x0853, r25
    18da:	a0 93 54 08 	sts	0x0854, r26
    18de:	b0 93 55 08 	sts	0x0855, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER2_OVF_interrupt);
    18e2:	80 91 b2 02 	lds	r24, 0x02B2
    18e6:	90 91 b3 02 	lds	r25, 0x02B3
    18ea:	89 2b       	or	r24, r25
    18ec:	29 f0       	breq	.+10     	; 0x18f8 <__vector_15+0x5e>
    18ee:	e0 91 b2 02 	lds	r30, 0x02B2
    18f2:	f0 91 b3 02 	lds	r31, 0x02B3
    18f6:	09 95       	icall
}
    18f8:	ff 91       	pop	r31
    18fa:	ef 91       	pop	r30
    18fc:	bf 91       	pop	r27
    18fe:	af 91       	pop	r26
    1900:	9f 91       	pop	r25
    1902:	8f 91       	pop	r24
    1904:	7f 91       	pop	r23
    1906:	6f 91       	pop	r22
    1908:	5f 91       	pop	r21
    190a:	4f 91       	pop	r20
    190c:	3f 91       	pop	r19
    190e:	2f 91       	pop	r18
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	0f 90       	pop	r0
    1916:	1f 90       	pop	r1
    1918:	18 95       	reti

0000191a <__vector_35>:
ISR(TIMER3_OVF_vect) 
{
    191a:	1f 92       	push	r1
    191c:	0f 92       	push	r0
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	0f 92       	push	r0
    1922:	11 24       	eor	r1, r1
    1924:	2f 93       	push	r18
    1926:	3f 93       	push	r19
    1928:	4f 93       	push	r20
    192a:	5f 93       	push	r21
    192c:	6f 93       	push	r22
    192e:	7f 93       	push	r23
    1930:	8f 93       	push	r24
    1932:	9f 93       	push	r25
    1934:	af 93       	push	r26
    1936:	bf 93       	push	r27
    1938:	ef 93       	push	r30
    193a:	ff 93       	push	r31
  timer3_ovrflow_cnt++;
    193c:	80 91 5a 08 	lds	r24, 0x085A
    1940:	90 91 5b 08 	lds	r25, 0x085B
    1944:	a0 91 5c 08 	lds	r26, 0x085C
    1948:	b0 91 5d 08 	lds	r27, 0x085D
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	a1 1d       	adc	r26, r1
    1950:	b1 1d       	adc	r27, r1
    1952:	80 93 5a 08 	sts	0x085A, r24
    1956:	90 93 5b 08 	sts	0x085B, r25
    195a:	a0 93 5c 08 	sts	0x085C, r26
    195e:	b0 93 5d 08 	sts	0x085D, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER3_OVF_interrupt);
    1962:	80 91 bc 02 	lds	r24, 0x02BC
    1966:	90 91 bd 02 	lds	r25, 0x02BD
    196a:	89 2b       	or	r24, r25
    196c:	29 f0       	breq	.+10     	; 0x1978 <__vector_35+0x5e>
    196e:	e0 91 bc 02 	lds	r30, 0x02BC
    1972:	f0 91 bd 02 	lds	r31, 0x02BD
    1976:	09 95       	icall
}
    1978:	ff 91       	pop	r31
    197a:	ef 91       	pop	r30
    197c:	bf 91       	pop	r27
    197e:	af 91       	pop	r26
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	7f 91       	pop	r23
    1986:	6f 91       	pop	r22
    1988:	5f 91       	pop	r21
    198a:	4f 91       	pop	r20
    198c:	3f 91       	pop	r19
    198e:	2f 91       	pop	r18
    1990:	0f 90       	pop	r0
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	0f 90       	pop	r0
    1996:	1f 90       	pop	r1
    1998:	18 95       	reti

0000199a <__vector_45>:
ISR(TIMER4_OVF_vect) 
{
    199a:	1f 92       	push	r1
    199c:	0f 92       	push	r0
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	0f 92       	push	r0
    19a2:	11 24       	eor	r1, r1
    19a4:	2f 93       	push	r18
    19a6:	3f 93       	push	r19
    19a8:	4f 93       	push	r20
    19aa:	5f 93       	push	r21
    19ac:	6f 93       	push	r22
    19ae:	7f 93       	push	r23
    19b0:	8f 93       	push	r24
    19b2:	9f 93       	push	r25
    19b4:	af 93       	push	r26
    19b6:	bf 93       	push	r27
    19b8:	ef 93       	push	r30
    19ba:	ff 93       	push	r31
  timer4_ovrflow_cnt++;
    19bc:	80 91 46 08 	lds	r24, 0x0846
    19c0:	90 91 47 08 	lds	r25, 0x0847
    19c4:	a0 91 48 08 	lds	r26, 0x0848
    19c8:	b0 91 49 08 	lds	r27, 0x0849
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	a1 1d       	adc	r26, r1
    19d0:	b1 1d       	adc	r27, r1
    19d2:	80 93 46 08 	sts	0x0846, r24
    19d6:	90 93 47 08 	sts	0x0847, r25
    19da:	a0 93 48 08 	sts	0x0848, r26
    19de:	b0 93 49 08 	sts	0x0849, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER4_OVF_interrupt);
    19e2:	80 91 c6 02 	lds	r24, 0x02C6
    19e6:	90 91 c7 02 	lds	r25, 0x02C7
    19ea:	89 2b       	or	r24, r25
    19ec:	29 f0       	breq	.+10     	; 0x19f8 <__vector_45+0x5e>
    19ee:	e0 91 c6 02 	lds	r30, 0x02C6
    19f2:	f0 91 c7 02 	lds	r31, 0x02C7
    19f6:	09 95       	icall
}
    19f8:	ff 91       	pop	r31
    19fa:	ef 91       	pop	r30
    19fc:	bf 91       	pop	r27
    19fe:	af 91       	pop	r26
    1a00:	9f 91       	pop	r25
    1a02:	8f 91       	pop	r24
    1a04:	7f 91       	pop	r23
    1a06:	6f 91       	pop	r22
    1a08:	5f 91       	pop	r21
    1a0a:	4f 91       	pop	r20
    1a0c:	3f 91       	pop	r19
    1a0e:	2f 91       	pop	r18
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <__vector_50>:
ISR(TIMER5_OVF_vect) 
{
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	0f 92       	push	r0
    1a22:	11 24       	eor	r1, r1
    1a24:	2f 93       	push	r18
    1a26:	3f 93       	push	r19
    1a28:	4f 93       	push	r20
    1a2a:	5f 93       	push	r21
    1a2c:	6f 93       	push	r22
    1a2e:	7f 93       	push	r23
    1a30:	8f 93       	push	r24
    1a32:	9f 93       	push	r25
    1a34:	af 93       	push	r26
    1a36:	bf 93       	push	r27
    1a38:	ef 93       	push	r30
    1a3a:	ff 93       	push	r31
  timer5_ovrflow_cnt++;
    1a3c:	80 91 5e 08 	lds	r24, 0x085E
    1a40:	90 91 5f 08 	lds	r25, 0x085F
    1a44:	a0 91 60 08 	lds	r26, 0x0860
    1a48:	b0 91 61 08 	lds	r27, 0x0861
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	a1 1d       	adc	r26, r1
    1a50:	b1 1d       	adc	r27, r1
    1a52:	80 93 5e 08 	sts	0x085E, r24
    1a56:	90 93 5f 08 	sts	0x085F, r25
    1a5a:	a0 93 60 08 	sts	0x0860, r26
    1a5e:	b0 93 61 08 	sts	0x0861, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER5_OVF_interrupt);
    1a62:	80 91 d0 02 	lds	r24, 0x02D0
    1a66:	90 91 d1 02 	lds	r25, 0x02D1
    1a6a:	89 2b       	or	r24, r25
    1a6c:	29 f0       	breq	.+10     	; 0x1a78 <__vector_50+0x5e>
    1a6e:	e0 91 d0 02 	lds	r30, 0x02D0
    1a72:	f0 91 d1 02 	lds	r31, 0x02D1
    1a76:	09 95       	icall
}
    1a78:	ff 91       	pop	r31
    1a7a:	ef 91       	pop	r30
    1a7c:	bf 91       	pop	r27
    1a7e:	af 91       	pop	r26
    1a80:	9f 91       	pop	r25
    1a82:	8f 91       	pop	r24
    1a84:	7f 91       	pop	r23
    1a86:	6f 91       	pop	r22
    1a88:	5f 91       	pop	r21
    1a8a:	4f 91       	pop	r20
    1a8c:	3f 91       	pop	r19
    1a8e:	2f 91       	pop	r18
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <__vector_21>:
ISR(TIMER0_COMPA_vect)
{
    1a9a:	1f 92       	push	r1
    1a9c:	0f 92       	push	r0
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	0f 92       	push	r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	2f 93       	push	r18
    1aa6:	3f 93       	push	r19
    1aa8:	4f 93       	push	r20
    1aaa:	5f 93       	push	r21
    1aac:	6f 93       	push	r22
    1aae:	7f 93       	push	r23
    1ab0:	8f 93       	push	r24
    1ab2:	9f 93       	push	r25
    1ab4:	af 93       	push	r26
    1ab6:	bf 93       	push	r27
    1ab8:	ef 93       	push	r30
    1aba:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPA_interrupt);
    1abc:	80 91 9e 02 	lds	r24, 0x029E
    1ac0:	90 91 9f 02 	lds	r25, 0x029F
    1ac4:	89 2b       	or	r24, r25
    1ac6:	29 f0       	breq	.+10     	; 0x1ad2 <__vector_21+0x38>
    1ac8:	e0 91 9e 02 	lds	r30, 0x029E
    1acc:	f0 91 9f 02 	lds	r31, 0x029F
    1ad0:	09 95       	icall
}
    1ad2:	ff 91       	pop	r31
    1ad4:	ef 91       	pop	r30
    1ad6:	bf 91       	pop	r27
    1ad8:	af 91       	pop	r26
    1ada:	9f 91       	pop	r25
    1adc:	8f 91       	pop	r24
    1ade:	7f 91       	pop	r23
    1ae0:	6f 91       	pop	r22
    1ae2:	5f 91       	pop	r21
    1ae4:	4f 91       	pop	r20
    1ae6:	3f 91       	pop	r19
    1ae8:	2f 91       	pop	r18
    1aea:	0f 90       	pop	r0
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	0f 90       	pop	r0
    1af0:	1f 90       	pop	r1
    1af2:	18 95       	reti

00001af4 <__vector_22>:
ISR(TIMER0_COMPB_vect)
{
    1af4:	1f 92       	push	r1
    1af6:	0f 92       	push	r0
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	0f 92       	push	r0
    1afc:	11 24       	eor	r1, r1
    1afe:	2f 93       	push	r18
    1b00:	3f 93       	push	r19
    1b02:	4f 93       	push	r20
    1b04:	5f 93       	push	r21
    1b06:	6f 93       	push	r22
    1b08:	7f 93       	push	r23
    1b0a:	8f 93       	push	r24
    1b0c:	9f 93       	push	r25
    1b0e:	af 93       	push	r26
    1b10:	bf 93       	push	r27
    1b12:	ef 93       	push	r30
    1b14:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPB_interrupt);
    1b16:	80 91 a0 02 	lds	r24, 0x02A0
    1b1a:	90 91 a1 02 	lds	r25, 0x02A1
    1b1e:	89 2b       	or	r24, r25
    1b20:	29 f0       	breq	.+10     	; 0x1b2c <__vector_22+0x38>
    1b22:	e0 91 a0 02 	lds	r30, 0x02A0
    1b26:	f0 91 a1 02 	lds	r31, 0x02A1
    1b2a:	09 95       	icall
}
    1b2c:	ff 91       	pop	r31
    1b2e:	ef 91       	pop	r30
    1b30:	bf 91       	pop	r27
    1b32:	af 91       	pop	r26
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	7f 91       	pop	r23
    1b3a:	6f 91       	pop	r22
    1b3c:	5f 91       	pop	r21
    1b3e:	4f 91       	pop	r20
    1b40:	3f 91       	pop	r19
    1b42:	2f 91       	pop	r18
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <__vector_16>:
ISR(TIMER1_CAPT_vect)
{
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	2f 93       	push	r18
    1b5a:	3f 93       	push	r19
    1b5c:	4f 93       	push	r20
    1b5e:	5f 93       	push	r21
    1b60:	6f 93       	push	r22
    1b62:	7f 93       	push	r23
    1b64:	8f 93       	push	r24
    1b66:	9f 93       	push	r25
    1b68:	af 93       	push	r26
    1b6a:	bf 93       	push	r27
    1b6c:	ef 93       	push	r30
    1b6e:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_CAPT_interrupt);
    1b70:	80 91 a4 02 	lds	r24, 0x02A4
    1b74:	90 91 a5 02 	lds	r25, 0x02A5
    1b78:	89 2b       	or	r24, r25
    1b7a:	29 f0       	breq	.+10     	; 0x1b86 <__vector_16+0x38>
    1b7c:	e0 91 a4 02 	lds	r30, 0x02A4
    1b80:	f0 91 a5 02 	lds	r31, 0x02A5
    1b84:	09 95       	icall
}
    1b86:	ff 91       	pop	r31
    1b88:	ef 91       	pop	r30
    1b8a:	bf 91       	pop	r27
    1b8c:	af 91       	pop	r26
    1b8e:	9f 91       	pop	r25
    1b90:	8f 91       	pop	r24
    1b92:	7f 91       	pop	r23
    1b94:	6f 91       	pop	r22
    1b96:	5f 91       	pop	r21
    1b98:	4f 91       	pop	r20
    1b9a:	3f 91       	pop	r19
    1b9c:	2f 91       	pop	r18
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	0f 90       	pop	r0
    1ba4:	1f 90       	pop	r1
    1ba6:	18 95       	reti

00001ba8 <__vector_18>:
{
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPA_interrupt);
}
*/
ISR(TIMER1_COMPB_vect)
{
    1ba8:	1f 92       	push	r1
    1baa:	0f 92       	push	r0
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	0f 92       	push	r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	2f 93       	push	r18
    1bb4:	3f 93       	push	r19
    1bb6:	4f 93       	push	r20
    1bb8:	5f 93       	push	r21
    1bba:	6f 93       	push	r22
    1bbc:	7f 93       	push	r23
    1bbe:	8f 93       	push	r24
    1bc0:	9f 93       	push	r25
    1bc2:	af 93       	push	r26
    1bc4:	bf 93       	push	r27
    1bc6:	ef 93       	push	r30
    1bc8:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPB_interrupt);
    1bca:	80 91 a8 02 	lds	r24, 0x02A8
    1bce:	90 91 a9 02 	lds	r25, 0x02A9
    1bd2:	89 2b       	or	r24, r25
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <__vector_18+0x38>
    1bd6:	e0 91 a8 02 	lds	r30, 0x02A8
    1bda:	f0 91 a9 02 	lds	r31, 0x02A9
    1bde:	09 95       	icall
}
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	7f 91       	pop	r23
    1bee:	6f 91       	pop	r22
    1bf0:	5f 91       	pop	r21
    1bf2:	4f 91       	pop	r20
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <__vector_19>:
ISR(TIMER1_COMPC_vect)
{
    1c02:	1f 92       	push	r1
    1c04:	0f 92       	push	r0
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	0f 92       	push	r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	2f 93       	push	r18
    1c0e:	3f 93       	push	r19
    1c10:	4f 93       	push	r20
    1c12:	5f 93       	push	r21
    1c14:	6f 93       	push	r22
    1c16:	7f 93       	push	r23
    1c18:	8f 93       	push	r24
    1c1a:	9f 93       	push	r25
    1c1c:	af 93       	push	r26
    1c1e:	bf 93       	push	r27
    1c20:	ef 93       	push	r30
    1c22:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPC_interrupt);
    1c24:	80 91 aa 02 	lds	r24, 0x02AA
    1c28:	90 91 ab 02 	lds	r25, 0x02AB
    1c2c:	89 2b       	or	r24, r25
    1c2e:	29 f0       	breq	.+10     	; 0x1c3a <__vector_19+0x38>
    1c30:	e0 91 aa 02 	lds	r30, 0x02AA
    1c34:	f0 91 ab 02 	lds	r31, 0x02AB
    1c38:	09 95       	icall
}
    1c3a:	ff 91       	pop	r31
    1c3c:	ef 91       	pop	r30
    1c3e:	bf 91       	pop	r27
    1c40:	af 91       	pop	r26
    1c42:	9f 91       	pop	r25
    1c44:	8f 91       	pop	r24
    1c46:	7f 91       	pop	r23
    1c48:	6f 91       	pop	r22
    1c4a:	5f 91       	pop	r21
    1c4c:	4f 91       	pop	r20
    1c4e:	3f 91       	pop	r19
    1c50:	2f 91       	pop	r18
    1c52:	0f 90       	pop	r0
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	0f 90       	pop	r0
    1c58:	1f 90       	pop	r1
    1c5a:	18 95       	reti

00001c5c <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
    1c5c:	1f 92       	push	r1
    1c5e:	0f 92       	push	r0
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	0f 92       	push	r0
    1c64:	11 24       	eor	r1, r1
    1c66:	2f 93       	push	r18
    1c68:	3f 93       	push	r19
    1c6a:	4f 93       	push	r20
    1c6c:	5f 93       	push	r21
    1c6e:	6f 93       	push	r22
    1c70:	7f 93       	push	r23
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	af 93       	push	r26
    1c78:	bf 93       	push	r27
    1c7a:	ef 93       	push	r30
    1c7c:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPA_interrupt);
    1c7e:	80 91 ae 02 	lds	r24, 0x02AE
    1c82:	90 91 af 02 	lds	r25, 0x02AF
    1c86:	89 2b       	or	r24, r25
    1c88:	29 f0       	breq	.+10     	; 0x1c94 <__vector_13+0x38>
    1c8a:	e0 91 ae 02 	lds	r30, 0x02AE
    1c8e:	f0 91 af 02 	lds	r31, 0x02AF
    1c92:	09 95       	icall
}
    1c94:	ff 91       	pop	r31
    1c96:	ef 91       	pop	r30
    1c98:	bf 91       	pop	r27
    1c9a:	af 91       	pop	r26
    1c9c:	9f 91       	pop	r25
    1c9e:	8f 91       	pop	r24
    1ca0:	7f 91       	pop	r23
    1ca2:	6f 91       	pop	r22
    1ca4:	5f 91       	pop	r21
    1ca6:	4f 91       	pop	r20
    1ca8:	3f 91       	pop	r19
    1caa:	2f 91       	pop	r18
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	0f 90       	pop	r0
    1cb2:	1f 90       	pop	r1
    1cb4:	18 95       	reti

00001cb6 <__vector_14>:
ISR(TIMER2_COMPB_vect)
{
    1cb6:	1f 92       	push	r1
    1cb8:	0f 92       	push	r0
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	0f 92       	push	r0
    1cbe:	11 24       	eor	r1, r1
    1cc0:	2f 93       	push	r18
    1cc2:	3f 93       	push	r19
    1cc4:	4f 93       	push	r20
    1cc6:	5f 93       	push	r21
    1cc8:	6f 93       	push	r22
    1cca:	7f 93       	push	r23
    1ccc:	8f 93       	push	r24
    1cce:	9f 93       	push	r25
    1cd0:	af 93       	push	r26
    1cd2:	bf 93       	push	r27
    1cd4:	ef 93       	push	r30
    1cd6:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPB_interrupt);
    1cd8:	80 91 b0 02 	lds	r24, 0x02B0
    1cdc:	90 91 b1 02 	lds	r25, 0x02B1
    1ce0:	89 2b       	or	r24, r25
    1ce2:	29 f0       	breq	.+10     	; 0x1cee <__vector_14+0x38>
    1ce4:	e0 91 b0 02 	lds	r30, 0x02B0
    1ce8:	f0 91 b1 02 	lds	r31, 0x02B1
    1cec:	09 95       	icall
}
    1cee:	ff 91       	pop	r31
    1cf0:	ef 91       	pop	r30
    1cf2:	bf 91       	pop	r27
    1cf4:	af 91       	pop	r26
    1cf6:	9f 91       	pop	r25
    1cf8:	8f 91       	pop	r24
    1cfa:	7f 91       	pop	r23
    1cfc:	6f 91       	pop	r22
    1cfe:	5f 91       	pop	r21
    1d00:	4f 91       	pop	r20
    1d02:	3f 91       	pop	r19
    1d04:	2f 91       	pop	r18
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	0f 90       	pop	r0
    1d0c:	1f 90       	pop	r1
    1d0e:	18 95       	reti

00001d10 <__vector_31>:
ISR(TIMER3_CAPT_vect)
{
    1d10:	1f 92       	push	r1
    1d12:	0f 92       	push	r0
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	0f 92       	push	r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	2f 93       	push	r18
    1d1c:	3f 93       	push	r19
    1d1e:	4f 93       	push	r20
    1d20:	5f 93       	push	r21
    1d22:	6f 93       	push	r22
    1d24:	7f 93       	push	r23
    1d26:	8f 93       	push	r24
    1d28:	9f 93       	push	r25
    1d2a:	af 93       	push	r26
    1d2c:	bf 93       	push	r27
    1d2e:	ef 93       	push	r30
    1d30:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_CAPT_interrupt);
    1d32:	80 91 b4 02 	lds	r24, 0x02B4
    1d36:	90 91 b5 02 	lds	r25, 0x02B5
    1d3a:	89 2b       	or	r24, r25
    1d3c:	29 f0       	breq	.+10     	; 0x1d48 <__vector_31+0x38>
    1d3e:	e0 91 b4 02 	lds	r30, 0x02B4
    1d42:	f0 91 b5 02 	lds	r31, 0x02B5
    1d46:	09 95       	icall
}
    1d48:	ff 91       	pop	r31
    1d4a:	ef 91       	pop	r30
    1d4c:	bf 91       	pop	r27
    1d4e:	af 91       	pop	r26
    1d50:	9f 91       	pop	r25
    1d52:	8f 91       	pop	r24
    1d54:	7f 91       	pop	r23
    1d56:	6f 91       	pop	r22
    1d58:	5f 91       	pop	r21
    1d5a:	4f 91       	pop	r20
    1d5c:	3f 91       	pop	r19
    1d5e:	2f 91       	pop	r18
    1d60:	0f 90       	pop	r0
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	0f 90       	pop	r0
    1d66:	1f 90       	pop	r1
    1d68:	18 95       	reti

00001d6a <__vector_32>:
ISR(TIMER3_COMPA_vect)
{
    1d6a:	1f 92       	push	r1
    1d6c:	0f 92       	push	r0
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	0f 92       	push	r0
    1d72:	11 24       	eor	r1, r1
    1d74:	2f 93       	push	r18
    1d76:	3f 93       	push	r19
    1d78:	4f 93       	push	r20
    1d7a:	5f 93       	push	r21
    1d7c:	6f 93       	push	r22
    1d7e:	7f 93       	push	r23
    1d80:	8f 93       	push	r24
    1d82:	9f 93       	push	r25
    1d84:	af 93       	push	r26
    1d86:	bf 93       	push	r27
    1d88:	ef 93       	push	r30
    1d8a:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPA_interrupt);
    1d8c:	80 91 b6 02 	lds	r24, 0x02B6
    1d90:	90 91 b7 02 	lds	r25, 0x02B7
    1d94:	89 2b       	or	r24, r25
    1d96:	29 f0       	breq	.+10     	; 0x1da2 <__vector_32+0x38>
    1d98:	e0 91 b6 02 	lds	r30, 0x02B6
    1d9c:	f0 91 b7 02 	lds	r31, 0x02B7
    1da0:	09 95       	icall
}
    1da2:	ff 91       	pop	r31
    1da4:	ef 91       	pop	r30
    1da6:	bf 91       	pop	r27
    1da8:	af 91       	pop	r26
    1daa:	9f 91       	pop	r25
    1dac:	8f 91       	pop	r24
    1dae:	7f 91       	pop	r23
    1db0:	6f 91       	pop	r22
    1db2:	5f 91       	pop	r21
    1db4:	4f 91       	pop	r20
    1db6:	3f 91       	pop	r19
    1db8:	2f 91       	pop	r18
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	0f 90       	pop	r0
    1dc0:	1f 90       	pop	r1
    1dc2:	18 95       	reti

00001dc4 <__vector_33>:
ISR(TIMER3_COMPB_vect)
{
    1dc4:	1f 92       	push	r1
    1dc6:	0f 92       	push	r0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	0f 92       	push	r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	2f 93       	push	r18
    1dd0:	3f 93       	push	r19
    1dd2:	4f 93       	push	r20
    1dd4:	5f 93       	push	r21
    1dd6:	6f 93       	push	r22
    1dd8:	7f 93       	push	r23
    1dda:	8f 93       	push	r24
    1ddc:	9f 93       	push	r25
    1dde:	af 93       	push	r26
    1de0:	bf 93       	push	r27
    1de2:	ef 93       	push	r30
    1de4:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPB_interrupt);
    1de6:	80 91 b8 02 	lds	r24, 0x02B8
    1dea:	90 91 b9 02 	lds	r25, 0x02B9
    1dee:	89 2b       	or	r24, r25
    1df0:	29 f0       	breq	.+10     	; 0x1dfc <__vector_33+0x38>
    1df2:	e0 91 b8 02 	lds	r30, 0x02B8
    1df6:	f0 91 b9 02 	lds	r31, 0x02B9
    1dfa:	09 95       	icall
}
    1dfc:	ff 91       	pop	r31
    1dfe:	ef 91       	pop	r30
    1e00:	bf 91       	pop	r27
    1e02:	af 91       	pop	r26
    1e04:	9f 91       	pop	r25
    1e06:	8f 91       	pop	r24
    1e08:	7f 91       	pop	r23
    1e0a:	6f 91       	pop	r22
    1e0c:	5f 91       	pop	r21
    1e0e:	4f 91       	pop	r20
    1e10:	3f 91       	pop	r19
    1e12:	2f 91       	pop	r18
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	0f 90       	pop	r0
    1e1a:	1f 90       	pop	r1
    1e1c:	18 95       	reti

00001e1e <__vector_34>:
ISR(TIMER3_COMPC_vect)
{
    1e1e:	1f 92       	push	r1
    1e20:	0f 92       	push	r0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	0f 92       	push	r0
    1e26:	11 24       	eor	r1, r1
    1e28:	2f 93       	push	r18
    1e2a:	3f 93       	push	r19
    1e2c:	4f 93       	push	r20
    1e2e:	5f 93       	push	r21
    1e30:	6f 93       	push	r22
    1e32:	7f 93       	push	r23
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	af 93       	push	r26
    1e3a:	bf 93       	push	r27
    1e3c:	ef 93       	push	r30
    1e3e:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPC_interrupt);
    1e40:	80 91 ba 02 	lds	r24, 0x02BA
    1e44:	90 91 bb 02 	lds	r25, 0x02BB
    1e48:	89 2b       	or	r24, r25
    1e4a:	29 f0       	breq	.+10     	; 0x1e56 <__vector_34+0x38>
    1e4c:	e0 91 ba 02 	lds	r30, 0x02BA
    1e50:	f0 91 bb 02 	lds	r31, 0x02BB
    1e54:	09 95       	icall
}
    1e56:	ff 91       	pop	r31
    1e58:	ef 91       	pop	r30
    1e5a:	bf 91       	pop	r27
    1e5c:	af 91       	pop	r26
    1e5e:	9f 91       	pop	r25
    1e60:	8f 91       	pop	r24
    1e62:	7f 91       	pop	r23
    1e64:	6f 91       	pop	r22
    1e66:	5f 91       	pop	r21
    1e68:	4f 91       	pop	r20
    1e6a:	3f 91       	pop	r19
    1e6c:	2f 91       	pop	r18
    1e6e:	0f 90       	pop	r0
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	0f 90       	pop	r0
    1e74:	1f 90       	pop	r1
    1e76:	18 95       	reti

00001e78 <__vector_41>:
ISR(TIMER4_CAPT_vect)
{
    1e78:	1f 92       	push	r1
    1e7a:	0f 92       	push	r0
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	0f 92       	push	r0
    1e80:	11 24       	eor	r1, r1
    1e82:	2f 93       	push	r18
    1e84:	3f 93       	push	r19
    1e86:	4f 93       	push	r20
    1e88:	5f 93       	push	r21
    1e8a:	6f 93       	push	r22
    1e8c:	7f 93       	push	r23
    1e8e:	8f 93       	push	r24
    1e90:	9f 93       	push	r25
    1e92:	af 93       	push	r26
    1e94:	bf 93       	push	r27
    1e96:	ef 93       	push	r30
    1e98:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_CAPT_interrupt);
    1e9a:	80 91 be 02 	lds	r24, 0x02BE
    1e9e:	90 91 bf 02 	lds	r25, 0x02BF
    1ea2:	89 2b       	or	r24, r25
    1ea4:	29 f0       	breq	.+10     	; 0x1eb0 <__vector_41+0x38>
    1ea6:	e0 91 be 02 	lds	r30, 0x02BE
    1eaa:	f0 91 bf 02 	lds	r31, 0x02BF
    1eae:	09 95       	icall
}
    1eb0:	ff 91       	pop	r31
    1eb2:	ef 91       	pop	r30
    1eb4:	bf 91       	pop	r27
    1eb6:	af 91       	pop	r26
    1eb8:	9f 91       	pop	r25
    1eba:	8f 91       	pop	r24
    1ebc:	7f 91       	pop	r23
    1ebe:	6f 91       	pop	r22
    1ec0:	5f 91       	pop	r21
    1ec2:	4f 91       	pop	r20
    1ec4:	3f 91       	pop	r19
    1ec6:	2f 91       	pop	r18
    1ec8:	0f 90       	pop	r0
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	0f 90       	pop	r0
    1ece:	1f 90       	pop	r1
    1ed0:	18 95       	reti

00001ed2 <__vector_42>:
ISR(TIMER4_COMPA_vect)
{
    1ed2:	1f 92       	push	r1
    1ed4:	0f 92       	push	r0
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	0f 92       	push	r0
    1eda:	11 24       	eor	r1, r1
    1edc:	2f 93       	push	r18
    1ede:	3f 93       	push	r19
    1ee0:	4f 93       	push	r20
    1ee2:	5f 93       	push	r21
    1ee4:	6f 93       	push	r22
    1ee6:	7f 93       	push	r23
    1ee8:	8f 93       	push	r24
    1eea:	9f 93       	push	r25
    1eec:	af 93       	push	r26
    1eee:	bf 93       	push	r27
    1ef0:	ef 93       	push	r30
    1ef2:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPA_interrupt);
    1ef4:	80 91 c0 02 	lds	r24, 0x02C0
    1ef8:	90 91 c1 02 	lds	r25, 0x02C1
    1efc:	89 2b       	or	r24, r25
    1efe:	29 f0       	breq	.+10     	; 0x1f0a <__vector_42+0x38>
    1f00:	e0 91 c0 02 	lds	r30, 0x02C0
    1f04:	f0 91 c1 02 	lds	r31, 0x02C1
    1f08:	09 95       	icall
}
    1f0a:	ff 91       	pop	r31
    1f0c:	ef 91       	pop	r30
    1f0e:	bf 91       	pop	r27
    1f10:	af 91       	pop	r26
    1f12:	9f 91       	pop	r25
    1f14:	8f 91       	pop	r24
    1f16:	7f 91       	pop	r23
    1f18:	6f 91       	pop	r22
    1f1a:	5f 91       	pop	r21
    1f1c:	4f 91       	pop	r20
    1f1e:	3f 91       	pop	r19
    1f20:	2f 91       	pop	r18
    1f22:	0f 90       	pop	r0
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	0f 90       	pop	r0
    1f28:	1f 90       	pop	r1
    1f2a:	18 95       	reti

00001f2c <__vector_43>:
ISR(TIMER4_COMPB_vect)
{
    1f2c:	1f 92       	push	r1
    1f2e:	0f 92       	push	r0
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	0f 92       	push	r0
    1f34:	11 24       	eor	r1, r1
    1f36:	2f 93       	push	r18
    1f38:	3f 93       	push	r19
    1f3a:	4f 93       	push	r20
    1f3c:	5f 93       	push	r21
    1f3e:	6f 93       	push	r22
    1f40:	7f 93       	push	r23
    1f42:	8f 93       	push	r24
    1f44:	9f 93       	push	r25
    1f46:	af 93       	push	r26
    1f48:	bf 93       	push	r27
    1f4a:	ef 93       	push	r30
    1f4c:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPB_interrupt);
    1f4e:	80 91 c2 02 	lds	r24, 0x02C2
    1f52:	90 91 c3 02 	lds	r25, 0x02C3
    1f56:	89 2b       	or	r24, r25
    1f58:	29 f0       	breq	.+10     	; 0x1f64 <__vector_43+0x38>
    1f5a:	e0 91 c2 02 	lds	r30, 0x02C2
    1f5e:	f0 91 c3 02 	lds	r31, 0x02C3
    1f62:	09 95       	icall
}
    1f64:	ff 91       	pop	r31
    1f66:	ef 91       	pop	r30
    1f68:	bf 91       	pop	r27
    1f6a:	af 91       	pop	r26
    1f6c:	9f 91       	pop	r25
    1f6e:	8f 91       	pop	r24
    1f70:	7f 91       	pop	r23
    1f72:	6f 91       	pop	r22
    1f74:	5f 91       	pop	r21
    1f76:	4f 91       	pop	r20
    1f78:	3f 91       	pop	r19
    1f7a:	2f 91       	pop	r18
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	0f 90       	pop	r0
    1f82:	1f 90       	pop	r1
    1f84:	18 95       	reti

00001f86 <__vector_44>:
ISR(TIMER4_COMPC_vect)
{
    1f86:	1f 92       	push	r1
    1f88:	0f 92       	push	r0
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	0f 92       	push	r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	2f 93       	push	r18
    1f92:	3f 93       	push	r19
    1f94:	4f 93       	push	r20
    1f96:	5f 93       	push	r21
    1f98:	6f 93       	push	r22
    1f9a:	7f 93       	push	r23
    1f9c:	8f 93       	push	r24
    1f9e:	9f 93       	push	r25
    1fa0:	af 93       	push	r26
    1fa2:	bf 93       	push	r27
    1fa4:	ef 93       	push	r30
    1fa6:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPC_interrupt);
    1fa8:	80 91 c4 02 	lds	r24, 0x02C4
    1fac:	90 91 c5 02 	lds	r25, 0x02C5
    1fb0:	89 2b       	or	r24, r25
    1fb2:	29 f0       	breq	.+10     	; 0x1fbe <__vector_44+0x38>
    1fb4:	e0 91 c4 02 	lds	r30, 0x02C4
    1fb8:	f0 91 c5 02 	lds	r31, 0x02C5
    1fbc:	09 95       	icall
}
    1fbe:	ff 91       	pop	r31
    1fc0:	ef 91       	pop	r30
    1fc2:	bf 91       	pop	r27
    1fc4:	af 91       	pop	r26
    1fc6:	9f 91       	pop	r25
    1fc8:	8f 91       	pop	r24
    1fca:	7f 91       	pop	r23
    1fcc:	6f 91       	pop	r22
    1fce:	5f 91       	pop	r21
    1fd0:	4f 91       	pop	r20
    1fd2:	3f 91       	pop	r19
    1fd4:	2f 91       	pop	r18
    1fd6:	0f 90       	pop	r0
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	0f 90       	pop	r0
    1fdc:	1f 90       	pop	r1
    1fde:	18 95       	reti

00001fe0 <__vector_46>:
ISR(TIMER5_CAPT_vect)
{
    1fe0:	1f 92       	push	r1
    1fe2:	0f 92       	push	r0
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	0f 92       	push	r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	2f 93       	push	r18
    1fec:	3f 93       	push	r19
    1fee:	4f 93       	push	r20
    1ff0:	5f 93       	push	r21
    1ff2:	6f 93       	push	r22
    1ff4:	7f 93       	push	r23
    1ff6:	8f 93       	push	r24
    1ff8:	9f 93       	push	r25
    1ffa:	af 93       	push	r26
    1ffc:	bf 93       	push	r27
    1ffe:	ef 93       	push	r30
    2000:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_CAPT_interrupt);
    2002:	80 91 c8 02 	lds	r24, 0x02C8
    2006:	90 91 c9 02 	lds	r25, 0x02C9
    200a:	89 2b       	or	r24, r25
    200c:	29 f0       	breq	.+10     	; 0x2018 <__vector_46+0x38>
    200e:	e0 91 c8 02 	lds	r30, 0x02C8
    2012:	f0 91 c9 02 	lds	r31, 0x02C9
    2016:	09 95       	icall
}
    2018:	ff 91       	pop	r31
    201a:	ef 91       	pop	r30
    201c:	bf 91       	pop	r27
    201e:	af 91       	pop	r26
    2020:	9f 91       	pop	r25
    2022:	8f 91       	pop	r24
    2024:	7f 91       	pop	r23
    2026:	6f 91       	pop	r22
    2028:	5f 91       	pop	r21
    202a:	4f 91       	pop	r20
    202c:	3f 91       	pop	r19
    202e:	2f 91       	pop	r18
    2030:	0f 90       	pop	r0
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	0f 90       	pop	r0
    2036:	1f 90       	pop	r1
    2038:	18 95       	reti

0000203a <__vector_47>:
ISR(TIMER5_COMPA_vect)
{
    203a:	1f 92       	push	r1
    203c:	0f 92       	push	r0
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	0f 92       	push	r0
    2042:	11 24       	eor	r1, r1
    2044:	2f 93       	push	r18
    2046:	3f 93       	push	r19
    2048:	4f 93       	push	r20
    204a:	5f 93       	push	r21
    204c:	6f 93       	push	r22
    204e:	7f 93       	push	r23
    2050:	8f 93       	push	r24
    2052:	9f 93       	push	r25
    2054:	af 93       	push	r26
    2056:	bf 93       	push	r27
    2058:	ef 93       	push	r30
    205a:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPA_interrupt);
    205c:	80 91 ca 02 	lds	r24, 0x02CA
    2060:	90 91 cb 02 	lds	r25, 0x02CB
    2064:	89 2b       	or	r24, r25
    2066:	29 f0       	breq	.+10     	; 0x2072 <__vector_47+0x38>
    2068:	e0 91 ca 02 	lds	r30, 0x02CA
    206c:	f0 91 cb 02 	lds	r31, 0x02CB
    2070:	09 95       	icall
}
    2072:	ff 91       	pop	r31
    2074:	ef 91       	pop	r30
    2076:	bf 91       	pop	r27
    2078:	af 91       	pop	r26
    207a:	9f 91       	pop	r25
    207c:	8f 91       	pop	r24
    207e:	7f 91       	pop	r23
    2080:	6f 91       	pop	r22
    2082:	5f 91       	pop	r21
    2084:	4f 91       	pop	r20
    2086:	3f 91       	pop	r19
    2088:	2f 91       	pop	r18
    208a:	0f 90       	pop	r0
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	0f 90       	pop	r0
    2090:	1f 90       	pop	r1
    2092:	18 95       	reti

00002094 <__vector_48>:
ISR(TIMER5_COMPB_vect)
{
    2094:	1f 92       	push	r1
    2096:	0f 92       	push	r0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	4f 93       	push	r20
    20a4:	5f 93       	push	r21
    20a6:	6f 93       	push	r22
    20a8:	7f 93       	push	r23
    20aa:	8f 93       	push	r24
    20ac:	9f 93       	push	r25
    20ae:	af 93       	push	r26
    20b0:	bf 93       	push	r27
    20b2:	ef 93       	push	r30
    20b4:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPB_interrupt);
    20b6:	80 91 cc 02 	lds	r24, 0x02CC
    20ba:	90 91 cd 02 	lds	r25, 0x02CD
    20be:	89 2b       	or	r24, r25
    20c0:	29 f0       	breq	.+10     	; 0x20cc <__vector_48+0x38>
    20c2:	e0 91 cc 02 	lds	r30, 0x02CC
    20c6:	f0 91 cd 02 	lds	r31, 0x02CD
    20ca:	09 95       	icall
}
    20cc:	ff 91       	pop	r31
    20ce:	ef 91       	pop	r30
    20d0:	bf 91       	pop	r27
    20d2:	af 91       	pop	r26
    20d4:	9f 91       	pop	r25
    20d6:	8f 91       	pop	r24
    20d8:	7f 91       	pop	r23
    20da:	6f 91       	pop	r22
    20dc:	5f 91       	pop	r21
    20de:	4f 91       	pop	r20
    20e0:	3f 91       	pop	r19
    20e2:	2f 91       	pop	r18
    20e4:	0f 90       	pop	r0
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	0f 90       	pop	r0
    20ea:	1f 90       	pop	r1
    20ec:	18 95       	reti

000020ee <__vector_49>:
ISR(TIMER5_COMPC_vect)
{
    20ee:	1f 92       	push	r1
    20f0:	0f 92       	push	r0
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	0f 92       	push	r0
    20f6:	11 24       	eor	r1, r1
    20f8:	2f 93       	push	r18
    20fa:	3f 93       	push	r19
    20fc:	4f 93       	push	r20
    20fe:	5f 93       	push	r21
    2100:	6f 93       	push	r22
    2102:	7f 93       	push	r23
    2104:	8f 93       	push	r24
    2106:	9f 93       	push	r25
    2108:	af 93       	push	r26
    210a:	bf 93       	push	r27
    210c:	ef 93       	push	r30
    210e:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPC_interrupt);
    2110:	80 91 ce 02 	lds	r24, 0x02CE
    2114:	90 91 cf 02 	lds	r25, 0x02CF
    2118:	89 2b       	or	r24, r25
    211a:	29 f0       	breq	.+10     	; 0x2126 <__vector_49+0x38>
    211c:	e0 91 ce 02 	lds	r30, 0x02CE
    2120:	f0 91 cf 02 	lds	r31, 0x02CF
    2124:	09 95       	icall
}
    2126:	ff 91       	pop	r31
    2128:	ef 91       	pop	r30
    212a:	bf 91       	pop	r27
    212c:	af 91       	pop	r26
    212e:	9f 91       	pop	r25
    2130:	8f 91       	pop	r24
    2132:	7f 91       	pop	r23
    2134:	6f 91       	pop	r22
    2136:	5f 91       	pop	r21
    2138:	4f 91       	pop	r20
    213a:	3f 91       	pop	r19
    213c:	2f 91       	pop	r18
    213e:	0f 90       	pop	r0
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	0f 90       	pop	r0
    2144:	1f 90       	pop	r1
    2146:	18 95       	reti

00002148 <__vector_default>:

ISR(BADISR_vect)
{
    2148:	1f 92       	push	r1
    214a:	0f 92       	push	r0
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	0f 92       	push	r0
    2150:	11 24       	eor	r1, r1
    2152:	2f 93       	push	r18
    2154:	3f 93       	push	r19
    2156:	4f 93       	push	r20
    2158:	5f 93       	push	r21
    215a:	6f 93       	push	r22
    215c:	7f 93       	push	r23
    215e:	8f 93       	push	r24
    2160:	9f 93       	push	r25
    2162:	af 93       	push	r26
    2164:	bf 93       	push	r27
    2166:	ef 93       	push	r30
    2168:	ff 93       	push	r31
  rprintf("BAD_vect called!");
    216a:	00 d0       	rcall	.+0      	; 0x216c <__vector_default+0x24>
    216c:	0f 92       	push	r0
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	ed b7       	in	r30, 0x3d	; 61
    2172:	fe b7       	in	r31, 0x3e	; 62
    2174:	81 83       	std	Z+1, r24	; 0x01
    2176:	86 e1       	ldi	r24, 0x16	; 22
    2178:	92 e0       	ldi	r25, 0x02	; 2
    217a:	93 83       	std	Z+3, r25	; 0x03
    217c:	82 83       	std	Z+2, r24	; 0x02
    217e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
}
    2188:	ff 91       	pop	r31
    218a:	ef 91       	pop	r30
    218c:	bf 91       	pop	r27
    218e:	af 91       	pop	r26
    2190:	9f 91       	pop	r25
    2192:	8f 91       	pop	r24
    2194:	7f 91       	pop	r23
    2196:	6f 91       	pop	r22
    2198:	5f 91       	pop	r21
    219a:	4f 91       	pop	r20
    219c:	3f 91       	pop	r19
    219e:	2f 91       	pop	r18
    21a0:	0f 90       	pop	r0
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	0f 90       	pop	r0
    21a6:	1f 90       	pop	r1
    21a8:	18 95       	reti

000021aa <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
    21aa:	84 30       	cpi	r24, 0x04	; 4
    21ac:	40 f4       	brcc	.+16     	; 0x21be <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
    21ae:	e8 2f       	mov	r30, r24
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	ee 0f       	add	r30, r30
    21b4:	ff 1f       	adc	r31, r31
    21b6:	ee 5e       	subi	r30, 0xEE	; 238
    21b8:	fa 4f       	sbci	r31, 0xFA	; 250
    21ba:	71 83       	std	Z+1, r23	; 0x01
    21bc:	60 83       	st	Z, r22
    21be:	08 95       	ret

000021c0 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
    21c0:	1f 93       	push	r17
    21c2:	18 2f       	mov	r17, r24
    21c4:	9a 01       	movw	r18, r20
    21c6:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    21c8:	ca 01       	movw	r24, r20
    21ca:	b9 01       	movw	r22, r18
    21cc:	60 58       	subi	r22, 0x80	; 128
    21ce:	7b 47       	sbci	r23, 0x7B	; 123
    21d0:	81 4e       	sbci	r24, 0xE1	; 225
    21d2:	9f 4f       	sbci	r25, 0xFF	; 255
    21d4:	f3 e0       	ldi	r31, 0x03	; 3
    21d6:	66 0f       	add	r22, r22
    21d8:	77 1f       	adc	r23, r23
    21da:	88 1f       	adc	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	fa 95       	dec	r31
    21e0:	d1 f7       	brne	.-12     	; 0x21d6 <uartSetBaudRate+0x16>
    21e2:	e4 e0       	ldi	r30, 0x04	; 4
    21e4:	22 0f       	add	r18, r18
    21e6:	33 1f       	adc	r19, r19
    21e8:	44 1f       	adc	r20, r20
    21ea:	55 1f       	adc	r21, r21
    21ec:	ea 95       	dec	r30
    21ee:	d1 f7       	brne	.-12     	; 0x21e4 <uartSetBaudRate+0x24>
    21f0:	0e 94 32 22 	call	0x4464	; 0x4464 <__udivmodsi4>
    21f4:	21 50       	subi	r18, 0x01	; 1
    21f6:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==3)
    21f8:	13 30       	cpi	r17, 0x03	; 3
    21fa:	29 f4       	brne	.+10     	; 0x2206 <__stack+0x7>
	{
		outb(UBRR3L, bauddiv);
    21fc:	20 93 34 01 	sts	0x0134, r18
		#ifdef UBRR3H
		outb(UBRR3H, bauddiv>>8);
    2200:	30 93 35 01 	sts	0x0135, r19
    2204:	12 c0       	rjmp	.+36     	; 0x222a <__stack+0x2b>
		#endif
	}
	else if(nUart==2)
    2206:	12 30       	cpi	r17, 0x02	; 2
    2208:	29 f4       	brne	.+10     	; 0x2214 <__stack+0x15>
	{
		outb(UBRR2L, bauddiv);
    220a:	20 93 d4 00 	sts	0x00D4, r18
		#ifdef UBRR2H
		outb(UBRR2H, bauddiv>>8);
    220e:	30 93 d5 00 	sts	0x00D5, r19
    2212:	0b c0       	rjmp	.+22     	; 0x222a <__stack+0x2b>
		#endif
	}
	else if(nUart==1)
    2214:	11 30       	cpi	r17, 0x01	; 1
    2216:	29 f4       	brne	.+10     	; 0x2222 <__stack+0x23>
	{
		outb(UBRR1L, bauddiv);
    2218:	20 93 cc 00 	sts	0x00CC, r18
		#ifdef UBRR1H
		outb(UBRR1H, bauddiv>>8);
    221c:	30 93 cd 00 	sts	0x00CD, r19
    2220:	04 c0       	rjmp	.+8      	; 0x222a <__stack+0x2b>
		#endif
	}
	else
	{
		outb(UBRR0L, bauddiv);
    2222:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
    2226:	30 93 c5 00 	sts	0x00C5, r19
		#endif
	}
}
    222a:	1f 91       	pop	r17
    222c:	08 95       	ret

0000222e <uartGetRxBuffer>:

cBuffer* uartGetRxBuffer(u08 nUart)
{
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	a3 e0       	ldi	r26, 0x03	; 3
    2234:	22 0f       	add	r18, r18
    2236:	33 1f       	adc	r19, r19
    2238:	aa 95       	dec	r26
    223a:	e1 f7       	brne	.-8      	; 0x2234 <uartGetRxBuffer+0x6>
    223c:	2a 59       	subi	r18, 0x9A	; 154
    223e:	37 4f       	sbci	r19, 0xF7	; 247
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
    2240:	c9 01       	movw	r24, r18
    2242:	08 95       	ret

00002244 <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	b3 e0       	ldi	r27, 0x03	; 3
    224a:	22 0f       	add	r18, r18
    224c:	33 1f       	adc	r19, r19
    224e:	ba 95       	dec	r27
    2250:	e1 f7       	brne	.-8      	; 0x224a <uartGetTxBuffer+0x6>
    2252:	26 57       	subi	r18, 0x76	; 118
    2254:	37 4f       	sbci	r19, 0xF7	; 247
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
    2256:	c9 01       	movw	r24, r18
    2258:	08 95       	ret

0000225a <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
    225a:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==3)
    225c:	83 30       	cpi	r24, 0x03	; 3
    225e:	39 f4       	brne	.+14     	; 0x226e <uartSendByte+0x14>
	{
		while(!(UCSR3A & (1<<UDRE3)));
    2260:	80 91 30 01 	lds	r24, 0x0130
    2264:	85 ff       	sbrs	r24, 5
    2266:	fc cf       	rjmp	.-8      	; 0x2260 <uartSendByte+0x6>
		outb(UDR3, txData);
    2268:	60 93 36 01 	sts	0x0136, r22
    226c:	18 c0       	rjmp	.+48     	; 0x229e <uartSendByte+0x44>
	}
	else if(nUart==2)
    226e:	82 30       	cpi	r24, 0x02	; 2
    2270:	39 f4       	brne	.+14     	; 0x2280 <uartSendByte+0x26>
	{
		while(!(UCSR2A & (1<<UDRE2)));
    2272:	80 91 d0 00 	lds	r24, 0x00D0
    2276:	85 ff       	sbrs	r24, 5
    2278:	fc cf       	rjmp	.-8      	; 0x2272 <uartSendByte+0x18>
		outb(UDR2, txData);
    227a:	60 93 d6 00 	sts	0x00D6, r22
    227e:	0f c0       	rjmp	.+30     	; 0x229e <uartSendByte+0x44>
	}
	else if(nUart==1)
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	39 f4       	brne	.+14     	; 0x2292 <uartSendByte+0x38>
	{
		while(!(UCSR1A & (1<<UDRE1)));
    2284:	80 91 c8 00 	lds	r24, 0x00C8
    2288:	85 ff       	sbrs	r24, 5
    228a:	fc cf       	rjmp	.-8      	; 0x2284 <uartSendByte+0x2a>
		outb(UDR1, txData);
    228c:	60 93 ce 00 	sts	0x00CE, r22
    2290:	06 c0       	rjmp	.+12     	; 0x229e <uartSendByte+0x44>
	}
	else
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2292:	80 91 c0 00 	lds	r24, 0x00C0
    2296:	85 ff       	sbrs	r24, 5
    2298:	fc cf       	rjmp	.-8      	; 0x2292 <uartSendByte+0x38>
		outb(UDR0, txData);
    229a:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	ee 59       	subi	r30, 0x9E	; 158
    22a2:	f7 4f       	sbci	r31, 0xF7	; 247
    22a4:	10 82       	st	Z, r1
}
    22a6:	08 95       	ret

000022a8 <uart0SendByte>:

void uart0SendByte(u08 data)
{
    22a8:	68 2f       	mov	r22, r24
	// send byte on UART0
	uartSendByte(0, data);
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	0e 94 2d 11 	call	0x225a	; 0x225a <uartSendByte>
}
    22b0:	08 95       	ret

000022b2 <uart1SendByte>:

void uart1SendByte(u08 data)
{
    22b2:	68 2f       	mov	r22, r24
	// send byte on UART1
	uartSendByte(1, data);
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	0e 94 2d 11 	call	0x225a	; 0x225a <uartSendByte>
}
    22ba:	08 95       	ret

000022bc <uart2SendByte>:

void uart2SendByte(u08 data)
{
    22bc:	68 2f       	mov	r22, r24
	// send byte on UART2
	uartSendByte(2, data);
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	0e 94 2d 11 	call	0x225a	; 0x225a <uartSendByte>
}
    22c4:	08 95       	ret

000022c6 <uart3SendByte>:

void uart3SendByte(u08 data)
{
    22c6:	68 2f       	mov	r22, r24
	// send byte on UART3
	uartSendByte(3, data);
    22c8:	83 e0       	ldi	r24, 0x03	; 3
    22ca:	0e 94 2d 11 	call	0x225a	; 0x225a <uartSendByte>
}
    22ce:	08 95       	ret

000022d0 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	e8 2f       	mov	r30, r24
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	ee 0f       	add	r30, r30
    22da:	ff 1f       	adc	r31, r31
    22dc:	8a 95       	dec	r24
    22de:	e1 f7       	brne	.-8      	; 0x22d8 <uartReceiveBufferIsEmpty+0x8>
    22e0:	e6 59       	subi	r30, 0x96	; 150
    22e2:	f7 4f       	sbci	r31, 0xF7	; 247
    22e4:	80 81       	ld	r24, Z
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	89 2b       	or	r24, r25
    22ea:	09 f4       	brne	.+2      	; 0x22ee <uartReceiveBufferIsEmpty+0x1e>
    22ec:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
    22ee:	82 2f       	mov	r24, r18
    22f0:	08 95       	ret

000022f2 <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
	u08 c;
	// get received char
	if(nUart==3)
    22f6:	83 30       	cpi	r24, 0x03	; 3
    22f8:	19 f4       	brne	.+6      	; 0x2300 <uartReceiveService+0xe>
		c = inb(UDR3);
    22fa:	60 91 36 01 	lds	r22, 0x0136
    22fe:	0c c0       	rjmp	.+24     	; 0x2318 <uartReceiveService+0x26>
	else if(nUart==2)
    2300:	82 30       	cpi	r24, 0x02	; 2
    2302:	19 f4       	brne	.+6      	; 0x230a <uartReceiveService+0x18>
		c = inb(UDR2);
    2304:	60 91 d6 00 	lds	r22, 0x00D6
    2308:	07 c0       	rjmp	.+14     	; 0x2318 <uartReceiveService+0x26>
	else if(nUart==1)
    230a:	81 30       	cpi	r24, 0x01	; 1
    230c:	19 f4       	brne	.+6      	; 0x2314 <uartReceiveService+0x22>
		c = inb(UDR1);
    230e:	60 91 ce 00 	lds	r22, 0x00CE
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <uartReceiveService+0x26>
	else
		c = inb(UDR0);
    2314:	60 91 c6 00 	lds	r22, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	e9 01       	movw	r28, r18
    231e:	cc 0f       	add	r28, r28
    2320:	dd 1f       	adc	r29, r29
    2322:	fe 01       	movw	r30, r28
    2324:	ee 5e       	subi	r30, 0xEE	; 238
    2326:	fa 4f       	sbci	r31, 0xFA	; 250
    2328:	80 81       	ld	r24, Z
    232a:	91 81       	ldd	r25, Z+1	; 0x01
    232c:	89 2b       	or	r24, r25
    232e:	31 f0       	breq	.+12     	; 0x233c <uartReceiveService+0x4a>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    2330:	01 90       	ld	r0, Z+
    2332:	f0 81       	ld	r31, Z
    2334:	e0 2d       	mov	r30, r0
    2336:	86 2f       	mov	r24, r22
    2338:	09 95       	icall
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <uartReceiveService+0x72>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    233c:	93 e0       	ldi	r25, 0x03	; 3
    233e:	22 0f       	add	r18, r18
    2340:	33 1f       	adc	r19, r19
    2342:	9a 95       	dec	r25
    2344:	e1 f7       	brne	.-8      	; 0x233e <uartReceiveService+0x4c>
    2346:	c9 01       	movw	r24, r18
    2348:	8a 59       	subi	r24, 0x9A	; 154
    234a:	97 4f       	sbci	r25, 0xF7	; 247
    234c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <bufferAddToEnd>
    2350:	88 23       	and	r24, r24
    2352:	41 f4       	brne	.+16     	; 0x2364 <uartReceiveService+0x72>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    2354:	fe 01       	movw	r30, r28
    2356:	e6 55       	subi	r30, 0x56	; 86
    2358:	f7 4f       	sbci	r31, 0xF7	; 247
    235a:	80 81       	ld	r24, Z
    235c:	91 81       	ldd	r25, Z+1	; 0x01
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	80 83       	st	Z, r24
		}
	}
}
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <__vector_54>:
{
	uartReceiveService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_RECV)      
{
    236a:	1f 92       	push	r1
    236c:	0f 92       	push	r0
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	0f 92       	push	r0
    2372:	11 24       	eor	r1, r1
    2374:	2f 93       	push	r18
    2376:	3f 93       	push	r19
    2378:	4f 93       	push	r20
    237a:	5f 93       	push	r21
    237c:	6f 93       	push	r22
    237e:	7f 93       	push	r23
    2380:	8f 93       	push	r24
    2382:	9f 93       	push	r25
    2384:	af 93       	push	r26
    2386:	bf 93       	push	r27
    2388:	ef 93       	push	r30
    238a:	ff 93       	push	r31
	uartReceiveService(3);
    238c:	83 e0       	ldi	r24, 0x03	; 3
    238e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <uartReceiveService>
}
    2392:	ff 91       	pop	r31
    2394:	ef 91       	pop	r30
    2396:	bf 91       	pop	r27
    2398:	af 91       	pop	r26
    239a:	9f 91       	pop	r25
    239c:	8f 91       	pop	r24
    239e:	7f 91       	pop	r23
    23a0:	6f 91       	pop	r22
    23a2:	5f 91       	pop	r21
    23a4:	4f 91       	pop	r20
    23a6:	3f 91       	pop	r19
    23a8:	2f 91       	pop	r18
    23aa:	0f 90       	pop	r0
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	0f 90       	pop	r0
    23b0:	1f 90       	pop	r1
    23b2:	18 95       	reti

000023b4 <__vector_51>:
{
	uartReceiveService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_RECV)      
{
    23b4:	1f 92       	push	r1
    23b6:	0f 92       	push	r0
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	0f 92       	push	r0
    23bc:	11 24       	eor	r1, r1
    23be:	2f 93       	push	r18
    23c0:	3f 93       	push	r19
    23c2:	4f 93       	push	r20
    23c4:	5f 93       	push	r21
    23c6:	6f 93       	push	r22
    23c8:	7f 93       	push	r23
    23ca:	8f 93       	push	r24
    23cc:	9f 93       	push	r25
    23ce:	af 93       	push	r26
    23d0:	bf 93       	push	r27
    23d2:	ef 93       	push	r30
    23d4:	ff 93       	push	r31
	uartReceiveService(2);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	0e 94 79 11 	call	0x22f2	; 0x22f2 <uartReceiveService>
}
    23dc:	ff 91       	pop	r31
    23de:	ef 91       	pop	r30
    23e0:	bf 91       	pop	r27
    23e2:	af 91       	pop	r26
    23e4:	9f 91       	pop	r25
    23e6:	8f 91       	pop	r24
    23e8:	7f 91       	pop	r23
    23ea:	6f 91       	pop	r22
    23ec:	5f 91       	pop	r21
    23ee:	4f 91       	pop	r20
    23f0:	3f 91       	pop	r19
    23f2:	2f 91       	pop	r18
    23f4:	0f 90       	pop	r0
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	0f 90       	pop	r0
    23fa:	1f 90       	pop	r1
    23fc:	18 95       	reti

000023fe <__vector_36>:
{
	uartReceiveService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_RECV)      
{
    23fe:	1f 92       	push	r1
    2400:	0f 92       	push	r0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	0f 92       	push	r0
    2406:	11 24       	eor	r1, r1
    2408:	2f 93       	push	r18
    240a:	3f 93       	push	r19
    240c:	4f 93       	push	r20
    240e:	5f 93       	push	r21
    2410:	6f 93       	push	r22
    2412:	7f 93       	push	r23
    2414:	8f 93       	push	r24
    2416:	9f 93       	push	r25
    2418:	af 93       	push	r26
    241a:	bf 93       	push	r27
    241c:	ef 93       	push	r30
    241e:	ff 93       	push	r31
	uartReceiveService(1);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	0e 94 79 11 	call	0x22f2	; 0x22f2 <uartReceiveService>
}
    2426:	ff 91       	pop	r31
    2428:	ef 91       	pop	r30
    242a:	bf 91       	pop	r27
    242c:	af 91       	pop	r26
    242e:	9f 91       	pop	r25
    2430:	8f 91       	pop	r24
    2432:	7f 91       	pop	r23
    2434:	6f 91       	pop	r22
    2436:	5f 91       	pop	r21
    2438:	4f 91       	pop	r20
    243a:	3f 91       	pop	r19
    243c:	2f 91       	pop	r18
    243e:	0f 90       	pop	r0
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	0f 90       	pop	r0
    2444:	1f 90       	pop	r1
    2446:	18 95       	reti

00002448 <__vector_25>:
	uartTransmitService(3);
}

	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
    2448:	1f 92       	push	r1
    244a:	0f 92       	push	r0
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	0f 92       	push	r0
    2450:	11 24       	eor	r1, r1
    2452:	2f 93       	push	r18
    2454:	3f 93       	push	r19
    2456:	4f 93       	push	r20
    2458:	5f 93       	push	r21
    245a:	6f 93       	push	r22
    245c:	7f 93       	push	r23
    245e:	8f 93       	push	r24
    2460:	9f 93       	push	r25
    2462:	af 93       	push	r26
    2464:	bf 93       	push	r27
    2466:	ef 93       	push	r30
    2468:	ff 93       	push	r31
	uartReceiveService(0);
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	0e 94 79 11 	call	0x22f2	; 0x22f2 <uartReceiveService>
}
    2470:	ff 91       	pop	r31
    2472:	ef 91       	pop	r30
    2474:	bf 91       	pop	r27
    2476:	af 91       	pop	r26
    2478:	9f 91       	pop	r25
    247a:	8f 91       	pop	r24
    247c:	7f 91       	pop	r23
    247e:	6f 91       	pop	r22
    2480:	5f 91       	pop	r21
    2482:	4f 91       	pop	r20
    2484:	3f 91       	pop	r19
    2486:	2f 91       	pop	r18
    2488:	0f 90       	pop	r0
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	0f 90       	pop	r0
    248e:	1f 90       	pop	r1
    2490:	18 95       	reti

00002492 <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    2492:	8f 92       	push	r8
    2494:	9f 92       	push	r9
    2496:	af 92       	push	r10
    2498:	bf 92       	push	r11
    249a:	cf 92       	push	r12
    249c:	df 92       	push	r13
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	88 2e       	mov	r8, r24
    24ac:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    24ae:	c8 2e       	mov	r12, r24
    24b0:	dd 24       	eor	r13, r13
    24b2:	f6 01       	movw	r30, r12
    24b4:	13 e0       	ldi	r17, 0x03	; 3
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	1a 95       	dec	r17
    24bc:	e1 f7       	brne	.-8      	; 0x24b6 <uartSendBuffer+0x24>
    24be:	e2 57       	subi	r30, 0x72	; 114
    24c0:	f7 4f       	sbci	r31, 0xF7	; 247
    24c2:	20 81       	ld	r18, Z
    24c4:	31 81       	ldd	r19, Z+1	; 0x01
    24c6:	24 0f       	add	r18, r20
    24c8:	35 1f       	adc	r19, r21
    24ca:	f6 01       	movw	r30, r12
    24cc:	73 e0       	ldi	r23, 0x03	; 3
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	7a 95       	dec	r23
    24d4:	e1 f7       	brne	.-8      	; 0x24ce <uartSendBuffer+0x3c>
    24d6:	e4 57       	subi	r30, 0x74	; 116
    24d8:	f7 4f       	sbci	r31, 0xF7	; 247
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	28 17       	cp	r18, r24
    24e0:	39 07       	cpc	r19, r25
    24e2:	70 f5       	brcc	.+92     	; 0x2540 <uartSendBuffer+0xae>
    24e4:	41 15       	cp	r20, r1
    24e6:	51 05       	cpc	r21, r1
    24e8:	59 f1       	breq	.+86     	; 0x2540 <uartSendBuffer+0xae>
	{
		// grab first character
		first = *buffer++;
    24ea:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    24ec:	76 01       	movw	r14, r12
    24ee:	63 e0       	ldi	r22, 0x03	; 3
    24f0:	ee 0c       	add	r14, r14
    24f2:	ff 1c       	adc	r15, r15
    24f4:	6a 95       	dec	r22
    24f6:	e1 f7       	brne	.-8      	; 0x24f0 <uartSendBuffer+0x5e>
    24f8:	8a e8       	ldi	r24, 0x8A	; 138
    24fa:	98 e0       	ldi	r25, 0x08	; 8
    24fc:	e8 0e       	add	r14, r24
    24fe:	f9 1e       	adc	r15, r25
    2500:	8d 01       	movw	r16, r26
    2502:	c0 e0       	ldi	r28, 0x00	; 0
    2504:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    2506:	5a 01       	movw	r10, r20
    2508:	08 94       	sec
    250a:	a1 08       	sbc	r10, r1
    250c:	b1 08       	sbc	r11, r1
    250e:	06 c0       	rjmp	.+12     	; 0x251c <uartSendBuffer+0x8a>
    2510:	c7 01       	movw	r24, r14
    2512:	f8 01       	movw	r30, r16
    2514:	60 81       	ld	r22, Z
    2516:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <bufferAddToEnd>
    251a:	21 96       	adiw	r28, 0x01	; 1
    251c:	0f 5f       	subi	r16, 0xFF	; 255
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	ca 15       	cp	r28, r10
    2522:	db 05       	cpc	r29, r11
    2524:	a8 f3       	brcs	.-22     	; 0x2510 <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    2526:	86 e8       	ldi	r24, 0x86	; 134
    2528:	98 e0       	ldi	r25, 0x08	; 8
    252a:	c8 0e       	add	r12, r24
    252c:	d9 1e       	adc	r13, r25
    252e:	8f ef       	ldi	r24, 0xFF	; 255
    2530:	f6 01       	movw	r30, r12
    2532:	80 83       	st	Z, r24
		uartSendByte(nUart, first);
    2534:	88 2d       	mov	r24, r8
    2536:	69 2d       	mov	r22, r9
    2538:	0e 94 2d 11 	call	0x225a	; 0x225a <uartSendByte>
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	01 c0       	rjmp	.+2      	; 0x2542 <uartSendBuffer+0xb0>
		// return success
		return TRUE;
    2540:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	ff 90       	pop	r15
    254c:	ef 90       	pop	r14
    254e:	df 90       	pop	r13
    2550:	cf 90       	pop	r12
    2552:	bf 90       	pop	r11
    2554:	af 90       	pop	r10
    2556:	9f 90       	pop	r9
    2558:	8f 90       	pop	r8
    255a:	08 95       	ret

0000255c <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	23 e0       	ldi	r18, 0x03	; 3
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	2a 95       	dec	r18
    2566:	e1 f7       	brne	.-8      	; 0x2560 <uartAddToTxBuffer+0x4>
    2568:	86 57       	subi	r24, 0x76	; 118
    256a:	97 4f       	sbci	r25, 0xF7	; 247
    256c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <bufferAddToEnd>
}
    2570:	08 95       	ret

00002572 <uart3AddToTxBuffer>:
{
	uartAddToTxBuffer(2,data);
}

void uart3AddToTxBuffer(u08 data)
{
    2572:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    2574:	82 ea       	ldi	r24, 0xA2	; 162
    2576:	98 e0       	ldi	r25, 0x08	; 8
    2578:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <bufferAddToEnd>
}

void uart3AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(3,data);
}
    257c:	08 95       	ret

0000257e <uart2AddToTxBuffer>:
{
	uartAddToTxBuffer(1,data);
}

void uart2AddToTxBuffer(u08 data)
{
    257e:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    2580:	8a e9       	ldi	r24, 0x9A	; 154
    2582:	98 e0       	ldi	r25, 0x08	; 8
    2584:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <bufferAddToEnd>
}

void uart2AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(2,data);
}
    2588:	08 95       	ret

0000258a <uart1AddToTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uart1AddToTxBuffer(u08 data)
{
    258a:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    258c:	82 e9       	ldi	r24, 0x92	; 146
    258e:	98 e0       	ldi	r25, 0x08	; 8
    2590:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <bufferAddToEnd>
}

void uart1AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(1,data);
}
    2594:	08 95       	ret

00002596 <uart0AddToTxBuffer>:
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
}

void uart0AddToTxBuffer(u08 data)
{
    2596:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    2598:	8a e8       	ldi	r24, 0x8A	; 138
    259a:	98 e0       	ldi	r25, 0x08	; 8
    259c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    25a0:	08 95       	ret

000025a2 <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    25a8:	a8 2f       	mov	r26, r24
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	ed 01       	movw	r28, r26
    25ae:	ca 57       	subi	r28, 0x7A	; 122
    25b0:	d7 4f       	sbci	r29, 0xF7	; 247
    25b2:	88 81       	ld	r24, Y
    25b4:	88 23       	and	r24, r24
    25b6:	79 f1       	breq	.+94     	; 0x2616 <uartTransmitService+0x74>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    25b8:	fd 01       	movw	r30, r26
    25ba:	33 e0       	ldi	r19, 0x03	; 3
    25bc:	ee 0f       	add	r30, r30
    25be:	ff 1f       	adc	r31, r31
    25c0:	3a 95       	dec	r19
    25c2:	e1 f7       	brne	.-8      	; 0x25bc <uartTransmitService+0x1a>
    25c4:	e2 57       	subi	r30, 0x72	; 114
    25c6:	f7 4f       	sbci	r31, 0xF7	; 247
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	89 2b       	or	r24, r25
    25ce:	11 f1       	breq	.+68     	; 0x2614 <uartTransmitService+0x72>
		{
			// send byte from top of buffer
			if(nUart==3)
    25d0:	23 30       	cpi	r18, 0x03	; 3
    25d2:	39 f4       	brne	.+14     	; 0x25e2 <uartTransmitService+0x40>
				outb(UDR3,  bufferGetFromFront(&uartTxBuffer[3]) );
    25d4:	82 ea       	ldi	r24, 0xA2	; 162
    25d6:	98 e0       	ldi	r25, 0x08	; 8
    25d8:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <bufferGetFromFront>
    25dc:	80 93 36 01 	sts	0x0136, r24
    25e0:	1e c0       	rjmp	.+60     	; 0x261e <uartTransmitService+0x7c>
			else if(nUart==2)
    25e2:	22 30       	cpi	r18, 0x02	; 2
    25e4:	39 f4       	brne	.+14     	; 0x25f4 <uartTransmitService+0x52>
				outb(UDR2,  bufferGetFromFront(&uartTxBuffer[2]) );
    25e6:	8a e9       	ldi	r24, 0x9A	; 154
    25e8:	98 e0       	ldi	r25, 0x08	; 8
    25ea:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <bufferGetFromFront>
    25ee:	80 93 d6 00 	sts	0x00D6, r24
    25f2:	15 c0       	rjmp	.+42     	; 0x261e <uartTransmitService+0x7c>
			else if(nUart==1)
    25f4:	21 30       	cpi	r18, 0x01	; 1
    25f6:	39 f4       	brne	.+14     	; 0x2606 <uartTransmitService+0x64>
				outb(UDR1,  bufferGetFromFront(&uartTxBuffer[1]) );
    25f8:	82 e9       	ldi	r24, 0x92	; 146
    25fa:	98 e0       	ldi	r25, 0x08	; 8
    25fc:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <bufferGetFromFront>
    2600:	80 93 ce 00 	sts	0x00CE, r24
    2604:	0c c0       	rjmp	.+24     	; 0x261e <uartTransmitService+0x7c>
			else
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    2606:	8a e8       	ldi	r24, 0x8A	; 138
    2608:	98 e0       	ldi	r25, 0x08	; 8
    260a:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <bufferGetFromFront>
    260e:	80 93 c6 00 	sts	0x00C6, r24
    2612:	05 c0       	rjmp	.+10     	; 0x261e <uartTransmitService+0x7c>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    2614:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    2616:	ae 59       	subi	r26, 0x9E	; 158
    2618:	b7 4f       	sbci	r27, 0xF7	; 247
    261a:	8f ef       	ldi	r24, 0xFF	; 255
    261c:	8c 93       	st	X, r24
	}
}
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	08 95       	ret

00002624 <__vector_56>:
{
	uartTransmitService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_TRANS)      
{
    2624:	1f 92       	push	r1
    2626:	0f 92       	push	r0
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	0f 92       	push	r0
    262c:	11 24       	eor	r1, r1
    262e:	2f 93       	push	r18
    2630:	3f 93       	push	r19
    2632:	4f 93       	push	r20
    2634:	5f 93       	push	r21
    2636:	6f 93       	push	r22
    2638:	7f 93       	push	r23
    263a:	8f 93       	push	r24
    263c:	9f 93       	push	r25
    263e:	af 93       	push	r26
    2640:	bf 93       	push	r27
    2642:	ef 93       	push	r30
    2644:	ff 93       	push	r31
	uartTransmitService(3);
    2646:	83 e0       	ldi	r24, 0x03	; 3
    2648:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <uartTransmitService>
}
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	bf 91       	pop	r27
    2652:	af 91       	pop	r26
    2654:	9f 91       	pop	r25
    2656:	8f 91       	pop	r24
    2658:	7f 91       	pop	r23
    265a:	6f 91       	pop	r22
    265c:	5f 91       	pop	r21
    265e:	4f 91       	pop	r20
    2660:	3f 91       	pop	r19
    2662:	2f 91       	pop	r18
    2664:	0f 90       	pop	r0
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	0f 90       	pop	r0
    266a:	1f 90       	pop	r1
    266c:	18 95       	reti

0000266e <__vector_53>:
{
	uartTransmitService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_TRANS)      
{
    266e:	1f 92       	push	r1
    2670:	0f 92       	push	r0
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	0f 92       	push	r0
    2676:	11 24       	eor	r1, r1
    2678:	2f 93       	push	r18
    267a:	3f 93       	push	r19
    267c:	4f 93       	push	r20
    267e:	5f 93       	push	r21
    2680:	6f 93       	push	r22
    2682:	7f 93       	push	r23
    2684:	8f 93       	push	r24
    2686:	9f 93       	push	r25
    2688:	af 93       	push	r26
    268a:	bf 93       	push	r27
    268c:	ef 93       	push	r30
    268e:	ff 93       	push	r31
	uartTransmitService(2);
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <uartTransmitService>
}
    2696:	ff 91       	pop	r31
    2698:	ef 91       	pop	r30
    269a:	bf 91       	pop	r27
    269c:	af 91       	pop	r26
    269e:	9f 91       	pop	r25
    26a0:	8f 91       	pop	r24
    26a2:	7f 91       	pop	r23
    26a4:	6f 91       	pop	r22
    26a6:	5f 91       	pop	r21
    26a8:	4f 91       	pop	r20
    26aa:	3f 91       	pop	r19
    26ac:	2f 91       	pop	r18
    26ae:	0f 90       	pop	r0
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	0f 90       	pop	r0
    26b4:	1f 90       	pop	r1
    26b6:	18 95       	reti

000026b8 <__vector_38>:
{
	uartTransmitService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_TRANS)      
{
    26b8:	1f 92       	push	r1
    26ba:	0f 92       	push	r0
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	0f 92       	push	r0
    26c0:	11 24       	eor	r1, r1
    26c2:	2f 93       	push	r18
    26c4:	3f 93       	push	r19
    26c6:	4f 93       	push	r20
    26c8:	5f 93       	push	r21
    26ca:	6f 93       	push	r22
    26cc:	7f 93       	push	r23
    26ce:	8f 93       	push	r24
    26d0:	9f 93       	push	r25
    26d2:	af 93       	push	r26
    26d4:	bf 93       	push	r27
    26d6:	ef 93       	push	r30
    26d8:	ff 93       	push	r31
	uartTransmitService(1);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <uartTransmitService>
}
    26e0:	ff 91       	pop	r31
    26e2:	ef 91       	pop	r30
    26e4:	bf 91       	pop	r27
    26e6:	af 91       	pop	r26
    26e8:	9f 91       	pop	r25
    26ea:	8f 91       	pop	r24
    26ec:	7f 91       	pop	r23
    26ee:	6f 91       	pop	r22
    26f0:	5f 91       	pop	r21
    26f2:	4f 91       	pop	r20
    26f4:	3f 91       	pop	r19
    26f6:	2f 91       	pop	r18
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <__vector_27>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    2702:	1f 92       	push	r1
    2704:	0f 92       	push	r0
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	0f 92       	push	r0
    270a:	11 24       	eor	r1, r1
    270c:	2f 93       	push	r18
    270e:	3f 93       	push	r19
    2710:	4f 93       	push	r20
    2712:	5f 93       	push	r21
    2714:	6f 93       	push	r22
    2716:	7f 93       	push	r23
    2718:	8f 93       	push	r24
    271a:	9f 93       	push	r25
    271c:	af 93       	push	r26
    271e:	bf 93       	push	r27
    2720:	ef 93       	push	r30
    2722:	ff 93       	push	r31
	uartTransmitService(0);
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <uartTransmitService>
}
    272a:	ff 91       	pop	r31
    272c:	ef 91       	pop	r30
    272e:	bf 91       	pop	r27
    2730:	af 91       	pop	r26
    2732:	9f 91       	pop	r25
    2734:	8f 91       	pop	r24
    2736:	7f 91       	pop	r23
    2738:	6f 91       	pop	r22
    273a:	5f 91       	pop	r21
    273c:	4f 91       	pop	r20
    273e:	3f 91       	pop	r19
    2740:	2f 91       	pop	r18
    2742:	0f 90       	pop	r0
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	0f 90       	pop	r0
    2748:	1f 90       	pop	r1
    274a:	18 95       	reti

0000274c <uartSendTxBuffer>:
{
	uartAddToTxBuffer(3,data);
}

void uartSendTxBuffer(u08 nUart)
{
    274c:	1f 93       	push	r17
    274e:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	fc 01       	movw	r30, r24
    2754:	ea 57       	subi	r30, 0x7A	; 122
    2756:	f7 4f       	sbci	r31, 0xF7	; 247
    2758:	2f ef       	ldi	r18, 0xFF	; 255
    275a:	20 83       	st	Z, r18
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    275c:	43 e0       	ldi	r20, 0x03	; 3
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	4a 95       	dec	r20
    2764:	e1 f7       	brne	.-8      	; 0x275e <uartSendTxBuffer+0x12>
    2766:	86 57       	subi	r24, 0x76	; 118
    2768:	97 4f       	sbci	r25, 0xF7	; 247
    276a:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <bufferGetFromFront>
    276e:	68 2f       	mov	r22, r24
    2770:	81 2f       	mov	r24, r17
    2772:	0e 94 2d 11 	call	0x225a	; 0x225a <uartSendByte>
}
    2776:	1f 91       	pop	r17
    2778:	08 95       	ret

0000277a <uartReceiveByte>:
		return -1;
}


u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	f9 01       	movw	r30, r18
    2786:	73 e0       	ldi	r23, 0x03	; 3
    2788:	ee 0f       	add	r30, r30
    278a:	ff 1f       	adc	r31, r31
    278c:	7a 95       	dec	r23
    278e:	e1 f7       	brne	.-8      	; 0x2788 <uartReceiveByte+0xe>
    2790:	e8 59       	subi	r30, 0x98	; 152
    2792:	f7 4f       	sbci	r31, 0xF7	; 247
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	89 2b       	or	r24, r25
    279a:	c9 f0       	breq	.+50     	; 0x27ce <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    279c:	f9 01       	movw	r30, r18
    279e:	63 e0       	ldi	r22, 0x03	; 3
    27a0:	ee 0f       	add	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	6a 95       	dec	r22
    27a6:	e1 f7       	brne	.-8      	; 0x27a0 <uartReceiveByte+0x26>
    27a8:	e6 59       	subi	r30, 0x96	; 150
    27aa:	f7 4f       	sbci	r31, 0xF7	; 247
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	89 2b       	or	r24, r25
    27b2:	69 f0       	breq	.+26     	; 0x27ce <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    27b4:	53 e0       	ldi	r21, 0x03	; 3
    27b6:	22 0f       	add	r18, r18
    27b8:	33 1f       	adc	r19, r19
    27ba:	5a 95       	dec	r21
    27bc:	e1 f7       	brne	.-8      	; 0x27b6 <uartReceiveByte+0x3c>
    27be:	c9 01       	movw	r24, r18
    27c0:	8a 59       	subi	r24, 0x9A	; 154
    27c2:	97 4f       	sbci	r25, 0xF7	; 247
    27c4:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <bufferGetFromFront>
    27c8:	88 83       	st	Y, r24
    27ca:	8f ef       	ldi	r24, 0xFF	; 255
    27cc:	01 c0       	rjmp	.+2      	; 0x27d0 <uartReceiveByte+0x56>
			return TRUE;
    27ce:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	08 95       	ret

000027d6 <uart3GetByte>:
	else
		return -1;
}

int uart3GetByte(void)
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	0f 92       	push	r0
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(3,&c))
    27e0:	83 e0       	ldi	r24, 0x03	; 3
    27e2:	be 01       	movw	r22, r28
    27e4:	6f 5f       	subi	r22, 0xFF	; 255
    27e6:	7f 4f       	sbci	r23, 0xFF	; 255
    27e8:	0e 94 bd 13 	call	0x277a	; 0x277a <uartReceiveByte>
    27ec:	88 23       	and	r24, r24
    27ee:	19 f4       	brne	.+6      	; 0x27f6 <uart3GetByte+0x20>
    27f0:	2f ef       	ldi	r18, 0xFF	; 255
    27f2:	3f ef       	ldi	r19, 0xFF	; 255
    27f4:	03 c0       	rjmp	.+6      	; 0x27fc <uart3GetByte+0x26>
		return c;
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    27fc:	c9 01       	movw	r24, r18
    27fe:	0f 90       	pop	r0
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <uart2GetByte>:
	else
		return -1;
}

int uart2GetByte(void)
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	0f 92       	push	r0
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(2,&c))
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	be 01       	movw	r22, r28
    2814:	6f 5f       	subi	r22, 0xFF	; 255
    2816:	7f 4f       	sbci	r23, 0xFF	; 255
    2818:	0e 94 bd 13 	call	0x277a	; 0x277a <uartReceiveByte>
    281c:	88 23       	and	r24, r24
    281e:	19 f4       	brne	.+6      	; 0x2826 <uart2GetByte+0x20>
    2820:	2f ef       	ldi	r18, 0xFF	; 255
    2822:	3f ef       	ldi	r19, 0xFF	; 255
    2824:	03 c0       	rjmp	.+6      	; 0x282c <uart2GetByte+0x26>
		return c;
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    282c:	c9 01       	movw	r24, r18
    282e:	0f 90       	pop	r0
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <uart1GetByte>:
	else
		return -1;
}

int uart1GetByte(void)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	0f 92       	push	r0
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(1,&c))
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	be 01       	movw	r22, r28
    2844:	6f 5f       	subi	r22, 0xFF	; 255
    2846:	7f 4f       	sbci	r23, 0xFF	; 255
    2848:	0e 94 bd 13 	call	0x277a	; 0x277a <uartReceiveByte>
    284c:	88 23       	and	r24, r24
    284e:	19 f4       	brne	.+6      	; 0x2856 <uart1GetByte+0x20>
    2850:	2f ef       	ldi	r18, 0xFF	; 255
    2852:	3f ef       	ldi	r19, 0xFF	; 255
    2854:	03 c0       	rjmp	.+6      	; 0x285c <uart1GetByte+0x26>
		return c;
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    285c:	c9 01       	movw	r24, r18
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <uart0GetByte>:
	// send byte on UART3
	uartSendByte(3, data);
}

int uart0GetByte(void)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	0f 92       	push	r0
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	be 01       	movw	r22, r28
    2874:	6f 5f       	subi	r22, 0xFF	; 255
    2876:	7f 4f       	sbci	r23, 0xFF	; 255
    2878:	0e 94 bd 13 	call	0x277a	; 0x277a <uartReceiveByte>
    287c:	88 23       	and	r24, r24
    287e:	19 f4       	brne	.+6      	; 0x2886 <uart0GetByte+0x20>
    2880:	2f ef       	ldi	r18, 0xFF	; 255
    2882:	3f ef       	ldi	r19, 0xFF	; 255
    2884:	03 c0       	rjmp	.+6      	; 0x288c <uart0GetByte+0x26>
		return c;
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	28 2f       	mov	r18, r24
    288a:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    288c:	c9 01       	movw	r24, r18
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	e3 e0       	ldi	r30, 0x03	; 3
    289a:	88 0f       	add	r24, r24
    289c:	99 1f       	adc	r25, r25
    289e:	ea 95       	dec	r30
    28a0:	e1 f7       	brne	.-8      	; 0x289a <uartFlushReceiveBuffer+0x4>
    28a2:	8a 59       	subi	r24, 0x9A	; 154
    28a4:	97 4f       	sbci	r25, 0xF7	; 247
    28a6:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <bufferFlush>
}
    28aa:	08 95       	ret

000028ac <uart3InitBuffers>:

void uart3InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) uart3RxData, UART3_RX_BUFFER_SIZE);
    28ac:	8e e7       	ldi	r24, 0x7E	; 126
    28ae:	98 e0       	ldi	r25, 0x08	; 8
    28b0:	62 e8       	ldi	r22, 0x82	; 130
    28b2:	74 e0       	ldi	r23, 0x04	; 4
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <bufferInit>
		bufferInit(&uartTxBuffer[3], (u08*) uart3TxData, UART3_TX_BUFFER_SIZE);
    28bc:	82 ea       	ldi	r24, 0xA2	; 162
    28be:	98 e0       	ldi	r25, 0x08	; 8
    28c0:	62 e0       	ldi	r22, 0x02	; 2
    28c2:	75 e0       	ldi	r23, 0x05	; 5
    28c4:	40 e1       	ldi	r20, 0x10	; 16
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <bufferInit>
	#else
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) UART3_RX_BUFFER_ADDR, UART3_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[3], (u08*) UART3_TX_BUFFER_ADDR, UART3_TX_BUFFER_SIZE);
	#endif
}
    28cc:	08 95       	ret

000028ce <uart3Init>:
}

void uart3Init(void)
{
	// initialize the buffers
	uart3InitBuffers();
    28ce:	0e 94 56 14 	call	0x28ac	; 0x28ac <uart3InitBuffers>
	// initialize user receive handlers
	UartRxFunc[3] = 0;
    28d2:	10 92 19 05 	sts	0x0519, r1
    28d6:	10 92 18 05 	sts	0x0518, r1
	// enable RxD/TxD and interrupts
	outb(UCSR3B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    28da:	88 ed       	ldi	r24, 0xD8	; 216
    28dc:	80 93 31 01 	sts	0x0131, r24
	// set default baud rate
	uartSetBaudRate(3, UART3_DEFAULT_BAUD_RATE);
    28e0:	83 e0       	ldi	r24, 0x03	; 3
    28e2:	40 e8       	ldi	r20, 0x80	; 128
    28e4:	55 e2       	ldi	r21, 0x25	; 37
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <uartSetBaudRate>
	// initialize states
	uartReadyTx[3] = TRUE;
    28ee:	8f ef       	ldi	r24, 0xFF	; 255
    28f0:	80 93 65 08 	sts	0x0865, r24
	uartBufferedTx[3] = FALSE;
    28f4:	10 92 89 08 	sts	0x0889, r1
	// clear overflow count
	uartRxOverflow[3] = 0;
    28f8:	10 92 b1 08 	sts	0x08B1, r1
    28fc:	10 92 b0 08 	sts	0x08B0, r1
	// enable interrupts
	sei();
    2900:	78 94       	sei
}
    2902:	08 95       	ret

00002904 <uart2InitBuffers>:

void uart2InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) uart2RxData, UART2_RX_BUFFER_SIZE);
    2904:	86 e7       	ldi	r24, 0x76	; 118
    2906:	98 e0       	ldi	r25, 0x08	; 8
    2908:	62 ef       	ldi	r22, 0xF2	; 242
    290a:	73 e0       	ldi	r23, 0x03	; 3
    290c:	40 e8       	ldi	r20, 0x80	; 128
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <bufferInit>
		bufferInit(&uartTxBuffer[2], (u08*) uart2TxData, UART2_TX_BUFFER_SIZE);
    2914:	8a e9       	ldi	r24, 0x9A	; 154
    2916:	98 e0       	ldi	r25, 0x08	; 8
    2918:	62 e7       	ldi	r22, 0x72	; 114
    291a:	74 e0       	ldi	r23, 0x04	; 4
    291c:	40 e1       	ldi	r20, 0x10	; 16
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <bufferInit>
	#else
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) UART2_RX_BUFFER_ADDR, UART2_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[2], (u08*) UART2_TX_BUFFER_ADDR, UART2_TX_BUFFER_SIZE);
	#endif
}
    2924:	08 95       	ret

00002926 <uart2Init>:
}

void uart2Init(void)
{
	// initialize the buffers
	uart2InitBuffers();
    2926:	0e 94 82 14 	call	0x2904	; 0x2904 <uart2InitBuffers>
	// initialize user receive handlers
	UartRxFunc[2] = 0;
    292a:	10 92 17 05 	sts	0x0517, r1
    292e:	10 92 16 05 	sts	0x0516, r1
	// enable RxD/TxD and interrupts
	outb(UCSR2B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    2932:	88 ed       	ldi	r24, 0xD8	; 216
    2934:	80 93 d1 00 	sts	0x00D1, r24
	// set default baud rate
	uartSetBaudRate(2, UART2_DEFAULT_BAUD_RATE);
    2938:	82 e0       	ldi	r24, 0x02	; 2
    293a:	40 e8       	ldi	r20, 0x80	; 128
    293c:	55 e2       	ldi	r21, 0x25	; 37
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	70 e0       	ldi	r23, 0x00	; 0
    2942:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <uartSetBaudRate>
	// initialize states
	uartReadyTx[2] = TRUE;
    2946:	8f ef       	ldi	r24, 0xFF	; 255
    2948:	80 93 64 08 	sts	0x0864, r24
	uartBufferedTx[2] = FALSE;
    294c:	10 92 88 08 	sts	0x0888, r1
	// clear overflow count
	uartRxOverflow[2] = 0;
    2950:	10 92 af 08 	sts	0x08AF, r1
    2954:	10 92 ae 08 	sts	0x08AE, r1
	// enable interrupts
	sei();
    2958:	78 94       	sei
}
    295a:	08 95       	ret

0000295c <uart1InitBuffers>:

void uart1InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) uart1RxData, UART1_RX_BUFFER_SIZE);
    295c:	8e e6       	ldi	r24, 0x6E	; 110
    295e:	98 e0       	ldi	r25, 0x08	; 8
    2960:	62 e6       	ldi	r22, 0x62	; 98
    2962:	73 e0       	ldi	r23, 0x03	; 3
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <bufferInit>
		bufferInit(&uartTxBuffer[1], (u08*) uart1TxData, UART1_TX_BUFFER_SIZE);
    296c:	82 e9       	ldi	r24, 0x92	; 146
    296e:	98 e0       	ldi	r25, 0x08	; 8
    2970:	62 ee       	ldi	r22, 0xE2	; 226
    2972:	73 e0       	ldi	r23, 0x03	; 3
    2974:	40 e1       	ldi	r20, 0x10	; 16
    2976:	50 e0       	ldi	r21, 0x00	; 0
    2978:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <bufferInit>
	#else
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) UART1_RX_BUFFER_ADDR, UART1_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[1], (u08*) UART1_TX_BUFFER_ADDR, UART1_TX_BUFFER_SIZE);
	#endif
}
    297c:	08 95       	ret

0000297e <uart1Init>:
}

void uart1Init(void)
{
	// initialize the buffers
	uart1InitBuffers();
    297e:	0e 94 ae 14 	call	0x295c	; 0x295c <uart1InitBuffers>
	// initialize user receive handlers
	UartRxFunc[1] = 0;
    2982:	10 92 15 05 	sts	0x0515, r1
    2986:	10 92 14 05 	sts	0x0514, r1
	// enable RxD/TxD and interrupts
	outb(UCSR1B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    298a:	88 ed       	ldi	r24, 0xD8	; 216
    298c:	80 93 c9 00 	sts	0x00C9, r24
	// set default baud rate
	uartSetBaudRate(1, UART1_DEFAULT_BAUD_RATE);
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	40 e8       	ldi	r20, 0x80	; 128
    2994:	55 e2       	ldi	r21, 0x25	; 37
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <uartSetBaudRate>
	// initialize states
	uartReadyTx[1] = TRUE;
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	80 93 63 08 	sts	0x0863, r24
	uartBufferedTx[1] = FALSE;
    29a4:	10 92 87 08 	sts	0x0887, r1
	// clear overflow count
	uartRxOverflow[1] = 0;
    29a8:	10 92 ad 08 	sts	0x08AD, r1
    29ac:	10 92 ac 08 	sts	0x08AC, r1
	// enable interrupts
	sei();
    29b0:	78 94       	sei
}
    29b2:	08 95       	ret

000029b4 <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    29b4:	86 e6       	ldi	r24, 0x66	; 102
    29b6:	98 e0       	ldi	r25, 0x08	; 8
    29b8:	62 ed       	ldi	r22, 0xD2	; 210
    29ba:	72 e0       	ldi	r23, 0x02	; 2
    29bc:	40 e8       	ldi	r20, 0x80	; 128
    29be:	50 e0       	ldi	r21, 0x00	; 0
    29c0:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    29c4:	8a e8       	ldi	r24, 0x8A	; 138
    29c6:	98 e0       	ldi	r25, 0x08	; 8
    29c8:	62 e5       	ldi	r22, 0x52	; 82
    29ca:	73 e0       	ldi	r23, 0x03	; 3
    29cc:	40 e1       	ldi	r20, 0x10	; 16
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    29d4:	08 95       	ret

000029d6 <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    29d6:	0e 94 da 14 	call	0x29b4	; 0x29b4 <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    29da:	10 92 13 05 	sts	0x0513, r1
    29de:	10 92 12 05 	sts	0x0512, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    29e2:	88 ed       	ldi	r24, 0xD8	; 216
    29e4:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	55 e2       	ldi	r21, 0x25	; 37
    29ee:	60 e0       	ldi	r22, 0x00	; 0
    29f0:	70 e0       	ldi	r23, 0x00	; 0
    29f2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    29f6:	8f ef       	ldi	r24, 0xFF	; 255
    29f8:	80 93 62 08 	sts	0x0862, r24
	uartBufferedTx[0] = FALSE;
    29fc:	10 92 86 08 	sts	0x0886, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    2a00:	10 92 ab 08 	sts	0x08AB, r1
    2a04:	10 92 aa 08 	sts	0x08AA, r1
	// enable interrupts
	sei();
    2a08:	78 94       	sei
}
    2a0a:	08 95       	ret

00002a0c <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    2a0c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <uart0Init>
	uart1Init();
    2a10:	0e 94 bf 14 	call	0x297e	; 0x297e <uart1Init>
	uart2Init();
    2a14:	0e 94 93 14 	call	0x2926	; 0x2926 <uart2Init>
	uart3Init();
    2a18:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart3Init>
}
    2a1c:	08 95       	ret

00002a1e <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
    2a1e:	aa e7       	ldi	r26, 0x7A	; 122
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	8c 91       	ld	r24, X
    2a24:	80 68       	ori	r24, 0x80	; 128
    2a26:	8c 93       	st	X, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
    2a28:	8c 91       	ld	r24, X
    2a2a:	8f 7d       	andi	r24, 0xDF	; 223
    2a2c:	8c 93       	st	X, r24
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    2a2e:	8c 91       	ld	r24, X
    2a30:	88 7f       	andi	r24, 0xF8	; 248
    2a32:	86 60       	ori	r24, 0x06	; 6
    2a34:	8c 93       	st	X, r24
}

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    2a36:	ec e7       	ldi	r30, 0x7C	; 124
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	8f 73       	andi	r24, 0x3F	; 63
    2a3e:	80 64       	ori	r24, 0x40	; 64
    2a40:	80 83       	st	Z, r24
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
	cbi(ADCSR, ADFR);				// default to single sample convert mode
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
	a2dSetReference(ADC_REFERENCE);	// set default reference
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 7d       	andi	r24, 0xDF	; 223
    2a46:	80 83       	st	Z, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
    2a48:	8c 91       	ld	r24, X
    2a4a:	88 60       	ori	r24, 0x08	; 8
    2a4c:	8c 93       	st	X, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
    2a4e:	10 92 b2 08 	sts	0x08B2, r1
	sei();							// turn on interrupts (if not already on)
    2a52:	78 94       	sei
}
    2a54:	08 95       	ret

00002a56 <a2dOff>:

// turn off a2d converter
void a2dOff(void)
{
	cbi(ADCSR, ADIE);				// disable ADC interrupts
    2a56:	ea e7       	ldi	r30, 0x7A	; 122
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	87 7f       	andi	r24, 0xF7	; 247
    2a5e:	80 83       	st	Z, r24
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
    2a60:	80 81       	ld	r24, Z
    2a62:	8f 77       	andi	r24, 0x7F	; 127
    2a64:	80 83       	st	Z, r24
}
    2a66:	08 95       	ret

00002a68 <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    2a68:	ea e7       	ldi	r30, 0x7A	; 122
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	90 81       	ld	r25, Z
    2a6e:	98 7f       	andi	r25, 0xF8	; 248
    2a70:	98 2b       	or	r25, r24
    2a72:	90 83       	st	Z, r25
}
    2a74:	08 95       	ret

00002a76 <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    2a76:	ec e7       	ldi	r30, 0x7C	; 124
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	90 81       	ld	r25, Z
    2a7c:	82 95       	swap	r24
    2a7e:	88 0f       	add	r24, r24
    2a80:	88 0f       	add	r24, r24
    2a82:	80 7c       	andi	r24, 0xC0	; 192
    2a84:	9f 73       	andi	r25, 0x3F	; 63
    2a86:	98 2b       	or	r25, r24
    2a88:	90 83       	st	Z, r25
}
    2a8a:	08 95       	ret

00002a8c <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
    2a8c:	ec e7       	ldi	r30, 0x7C	; 124
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	90 81       	ld	r25, Z
    2a92:	8f 71       	andi	r24, 0x1F	; 31
    2a94:	90 7e       	andi	r25, 0xE0	; 224
    2a96:	89 2b       	or	r24, r25
    2a98:	80 83       	st	Z, r24
}
    2a9a:	08 95       	ret

00002a9c <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
    2a9c:	ea e7       	ldi	r30, 0x7A	; 122
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	80 61       	ori	r24, 0x10	; 16
    2aa4:	80 83       	st	Z, r24
	sbi(ADCSR, ADSC);	// start conversion
    2aa6:	80 81       	ld	r24, Z
    2aa8:	80 64       	ori	r24, 0x40	; 64
    2aaa:	80 83       	st	Z, r24
}
    2aac:	08 95       	ret

00002aae <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
    2aae:	80 91 7a 00 	lds	r24, 0x007A
}
    2ab2:	80 74       	andi	r24, 0x40	; 64
    2ab4:	08 95       	ret

00002ab6 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
    2ab6:	98 2f       	mov	r25, r24
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
    2ab8:	10 92 b2 08 	sts	0x08B2, r1

if (ch >= 8)
    2abc:	88 30       	cpi	r24, 0x08	; 8
    2abe:	20 f0       	brcs	.+8      	; 0x2ac8 <a2dConvert10bit+0x12>
    ADCSRB |= _BV(MUX5);
    2ac0:	80 91 7b 00 	lds	r24, 0x007B
    2ac4:	88 60       	ori	r24, 0x08	; 8
    2ac6:	03 c0       	rjmp	.+6      	; 0x2ace <a2dConvert10bit+0x18>
else
    ADCSRB &= ~_BV(MUX5);
    2ac8:	80 91 7b 00 	lds	r24, 0x007B
    2acc:	87 7f       	andi	r24, 0xF7	; 247
    2ace:	80 93 7b 00 	sts	0x007B, r24

   outb(ADMUX, (inb(ADMUX) & ~7) | (ch & 7));   // set channel
    2ad2:	80 91 7c 00 	lds	r24, 0x007C
    2ad6:	97 70       	andi	r25, 0x07	; 7
    2ad8:	88 7f       	andi	r24, 0xF8	; 248
    2ada:	89 2b       	or	r24, r25
    2adc:	80 93 7c 00 	sts	0x007C, r24

	//outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
    2ae0:	80 91 7a 00 	lds	r24, 0x007A
    2ae4:	80 61       	ori	r24, 0x10	; 16
    2ae6:	80 93 7a 00 	sts	0x007A, r24
	sbi(ADCSR, ADSC);						// start conversion
    2aea:	80 91 7a 00 	lds	r24, 0x007A
    2aee:	80 64       	ori	r24, 0x40	; 64
    2af0:	80 93 7a 00 	sts	0x007A, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
    2af4:	80 91 7a 00 	lds	r24, 0x007A
    2af8:	86 fd       	sbrc	r24, 6
    2afa:	fc cf       	rjmp	.-8      	; 0x2af4 <a2dConvert10bit+0x3e>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	//return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits) //old version
	return ADC;//new version code
    2afc:	20 91 78 00 	lds	r18, 0x0078
    2b00:	30 91 79 00 	lds	r19, 0x0079
}
    2b04:	c9 01       	movw	r24, r18
    2b06:	08 95       	ret

00002b08 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
    2b08:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <a2dConvert10bit>
    2b0c:	96 95       	lsr	r25
    2b0e:	87 95       	ror	r24
    2b10:	96 95       	lsr	r25
    2b12:	87 95       	ror	r24
}
    2b14:	08 95       	ret

00002b16 <__vector_29>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
    2b16:	1f 92       	push	r1
    2b18:	0f 92       	push	r0
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	0f 92       	push	r0
    2b1e:	11 24       	eor	r1, r1
    2b20:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
    2b22:	8f ef       	ldi	r24, 0xFF	; 255
    2b24:	80 93 b2 08 	sts	0x08B2, r24
}
    2b28:	8f 91       	pop	r24
    2b2a:	0f 90       	pop	r0
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	0f 90       	pop	r0
    2b30:	1f 90       	pop	r1
    2b32:	18 95       	reti

00002b34 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    2b34:	90 93 1b 05 	sts	0x051B, r25
    2b38:	80 93 1a 05 	sts	0x051A, r24
}
    2b3c:	08 95       	ret

00002b3e <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    2b3e:	1f 93       	push	r17
    2b40:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
    2b42:	8a 30       	cpi	r24, 0x0A	; 10
    2b44:	31 f4       	brne	.+12     	; 0x2b52 <rprintfChar+0x14>
		rputchar('\r');
    2b46:	e0 91 1a 05 	lds	r30, 0x051A
    2b4a:	f0 91 1b 05 	lds	r31, 0x051B
    2b4e:	8d e0       	ldi	r24, 0x0D	; 13
    2b50:	09 95       	icall
	// send character
	rputchar(c);
    2b52:	e0 91 1a 05 	lds	r30, 0x051A
    2b56:	f0 91 1b 05 	lds	r31, 0x051B
    2b5a:	81 2f       	mov	r24, r17
    2b5c:	09 95       	icall
}
    2b5e:	1f 91       	pop	r17
    2b60:	08 95       	ret

00002b62 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	21 f4       	brne	.+8      	; 0x2b74 <rprintfStr+0x12>
    2b6c:	06 c0       	rjmp	.+12     	; 0x2b7a <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    2b6e:	21 96       	adiw	r28, 0x01	; 1
    2b70:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    2b74:	88 81       	ld	r24, Y
    2b76:	88 23       	and	r24, r24
    2b78:	d1 f7       	brne	.-12     	; 0x2b6e <rprintfStr+0xc>
		rprintfChar(*str++);
}
    2b7a:	df 91       	pop	r29
    2b7c:	cf 91       	pop	r28
    2b7e:	08 95       	ret

00002b80 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	8c 01       	movw	r16, r24
    2b8e:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	e9 f0       	breq	.+58     	; 0x2bce <rprintfStrLen+0x4e>
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    2b98:	26 17       	cp	r18, r22
    2b9a:	37 07       	cpc	r19, r23
    2b9c:	38 f4       	brcc	.+14     	; 0x2bac <rprintfStrLen+0x2c>
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	81 91       	ld	r24, Z+
    2ba2:	8f 01       	movw	r16, r30
    2ba4:	2f 5f       	subi	r18, 0xFF	; 255
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	88 23       	and	r24, r24
    2baa:	b1 f7       	brne	.-20     	; 0x2b98 <rprintfStrLen+0x18>
    2bac:	c0 e0       	ldi	r28, 0x00	; 0
    2bae:	d0 e0       	ldi	r29, 0x00	; 0
    2bb0:	0b c0       	rjmp	.+22     	; 0x2bc8 <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    2bb2:	f8 01       	movw	r30, r16
    2bb4:	80 81       	ld	r24, Z
    2bb6:	88 23       	and	r24, r24
    2bb8:	19 f0       	breq	.+6      	; 0x2bc0 <rprintfStrLen+0x40>
			rprintfChar(*str++);
    2bba:	0f 5f       	subi	r16, 0xFF	; 255
    2bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bbe:	01 c0       	rjmp	.+2      	; 0x2bc2 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
    2bc0:	80 e2       	ldi	r24, 0x20	; 32
    2bc2:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    2bc6:	21 96       	adiw	r28, 0x01	; 1
    2bc8:	ce 15       	cp	r28, r14
    2bca:	df 05       	cpc	r29, r15
    2bcc:	90 f3       	brcs	.-28     	; 0x2bb2 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	ff 90       	pop	r15
    2bd8:	ef 90       	pop	r14
    2bda:	08 95       	ret

00002bdc <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	19 f4       	brne	.+6      	; 0x2bec <rprintfProgStr+0x10>
    2be6:	07 c0       	rjmp	.+14     	; 0x2bf6 <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    2be8:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
    2bec:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    2bee:	21 96       	adiw	r28, 0x01	; 1
    2bf0:	84 91       	lpm	r24, Z+
    2bf2:	88 23       	and	r24, r24
    2bf4:	c9 f7       	brne	.-14     	; 0x2be8 <rprintfProgStr+0xc>
		rprintfChar(c);
}
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	08 95       	ret

00002bfc <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    2bfc:	8a e0       	ldi	r24, 0x0A	; 10
    2bfe:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
}
    2c02:	08 95       	ret

00002c04 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    2c04:	e8 2f       	mov	r30, r24
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	ef 70       	andi	r30, 0x0F	; 15
    2c0a:	f0 70       	andi	r31, 0x00	; 0
    2c0c:	e9 5d       	subi	r30, 0xD9	; 217
    2c0e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c10:	e4 91       	lpm	r30, Z+
    2c12:	8e 2f       	mov	r24, r30
    2c14:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
}
    2c18:	08 95       	ret

00002c1a <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    2c1a:	1f 93       	push	r17
    2c1c:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
    2c1e:	82 95       	swap	r24
    2c20:	8f 70       	andi	r24, 0x0F	; 15
    2c22:	0e 94 02 16 	call	0x2c04	; 0x2c04 <rprintfu04>
	rprintfu04(data);
    2c26:	81 2f       	mov	r24, r17
    2c28:	0e 94 02 16 	call	0x2c04	; 0x2c04 <rprintfu04>
}
    2c2c:	1f 91       	pop	r17
    2c2e:	08 95       	ret

00002c30 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    2c30:	1f 93       	push	r17
    2c32:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
    2c34:	89 2f       	mov	r24, r25
    2c36:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <rprintfu08>
	rprintfu08(data);
    2c3a:	81 2f       	mov	r24, r17
    2c3c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <rprintfu08>
}
    2c40:	1f 91       	pop	r17
    2c42:	08 95       	ret

00002c44 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    2c44:	ef 92       	push	r14
    2c46:	ff 92       	push	r15
    2c48:	0f 93       	push	r16
    2c4a:	1f 93       	push	r17
    2c4c:	7b 01       	movw	r14, r22
    2c4e:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
    2c50:	c8 01       	movw	r24, r16
    2c52:	aa 27       	eor	r26, r26
    2c54:	bb 27       	eor	r27, r27
    2c56:	0e 94 18 16 	call	0x2c30	; 0x2c30 <rprintfu16>
	rprintfu16(data);
    2c5a:	c7 01       	movw	r24, r14
    2c5c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <rprintfu16>
}
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	ff 90       	pop	r15
    2c66:	ef 90       	pop	r14
    2c68:	08 95       	ret

00002c6a <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    2c6a:	2f 92       	push	r2
    2c6c:	3f 92       	push	r3
    2c6e:	4f 92       	push	r4
    2c70:	5f 92       	push	r5
    2c72:	6f 92       	push	r6
    2c74:	7f 92       	push	r7
    2c76:	8f 92       	push	r8
    2c78:	9f 92       	push	r9
    2c7a:	af 92       	push	r10
    2c7c:	bf 92       	push	r11
    2c7e:	cf 92       	push	r12
    2c80:	df 92       	push	r13
    2c82:	ef 92       	push	r14
    2c84:	ff 92       	push	r15
    2c86:	0f 93       	push	r16
    2c88:	1f 93       	push	r17
    2c8a:	df 93       	push	r29
    2c8c:	cf 93       	push	r28
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
    2c92:	a3 97       	sbiw	r28, 0x23	; 35
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	f8 94       	cli
    2c98:	de bf       	out	0x3e, r29	; 62
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	cd bf       	out	0x3d, r28	; 61
    2c9e:	6a a3       	std	Y+34, r22	; 0x22
    2ca0:	24 2e       	mov	r2, r20
    2ca2:	2b a3       	std	Y+35, r18	; 0x23
    2ca4:	37 01       	movw	r6, r14
    2ca6:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    2ca8:	44 23       	and	r20, r20
    2caa:	51 f0       	breq	.+20     	; 0x2cc0 <rprintfNum+0x56>
    2cac:	17 ff       	sbrs	r17, 7
    2cae:	08 c0       	rjmp	.+16     	; 0x2cc0 <rprintfNum+0x56>
	{
		x = -n;
    2cb0:	ee 24       	eor	r14, r14
    2cb2:	ff 24       	eor	r15, r15
    2cb4:	87 01       	movw	r16, r14
    2cb6:	e6 18       	sub	r14, r6
    2cb8:	f7 08       	sbc	r15, r7
    2cba:	08 09       	sbc	r16, r8
    2cbc:	19 09       	sbc	r17, r9
    2cbe:	02 c0       	rjmp	.+4      	; 0x2cc4 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
    2cc0:	84 01       	movw	r16, r8
    2cc2:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    2cc4:	2a a1       	ldd	r18, Y+34	; 0x22
    2cc6:	21 50       	subi	r18, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	21 10       	cpse	r2, r1
    2ccc:	91 e0       	ldi	r25, 0x01	; 1
    2cce:	29 1b       	sub	r18, r25
    2cd0:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
    2cd2:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    2cd4:	a8 2e       	mov	r10, r24
    2cd6:	bb 24       	eor	r11, r11
    2cd8:	cc 24       	eor	r12, r12
    2cda:	dd 24       	eor	r13, r13
    2cdc:	c8 01       	movw	r24, r16
    2cde:	b7 01       	movw	r22, r14
    2ce0:	a6 01       	movw	r20, r12
    2ce2:	95 01       	movw	r18, r10
    2ce4:	0e 94 32 22 	call	0x4464	; 0x4464 <__udivmodsi4>
    2ce8:	fb 01       	movw	r30, r22
    2cea:	ef 70       	andi	r30, 0x0F	; 15
    2cec:	f0 70       	andi	r31, 0x00	; 0
    2cee:	e9 5d       	subi	r30, 0xD9	; 217
    2cf0:	fd 4f       	sbci	r31, 0xFD	; 253
    2cf2:	64 91       	lpm	r22, Z+
    2cf4:	6f 8f       	std	Y+31, r22	; 0x1f
    2cf6:	c8 01       	movw	r24, r16
    2cf8:	b7 01       	movw	r22, r14
    2cfa:	a6 01       	movw	r20, r12
    2cfc:	95 01       	movw	r18, r10
    2cfe:	0e 94 32 22 	call	0x4464	; 0x4464 <__udivmodsi4>
    2d02:	c9 01       	movw	r24, r18
    2d04:	da 01       	movw	r26, r20
    2d06:	7c 01       	movw	r14, r24
    2d08:	8d 01       	movw	r16, r26
    2d0a:	9e e1       	ldi	r25, 0x1E	; 30
    2d0c:	49 2e       	mov	r4, r25
    2d0e:	51 2c       	mov	r5, r1
    2d10:	4c 0e       	add	r4, r28
    2d12:	5d 1e       	adc	r5, r29
    2d14:	39 a0       	ldd	r3, Y+33	; 0x21
    2d16:	25 c0       	rjmp	.+74     	; 0x2d62 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    2d18:	e1 14       	cp	r14, r1
    2d1a:	f1 04       	cpc	r15, r1
    2d1c:	01 05       	cpc	r16, r1
    2d1e:	11 05       	cpc	r17, r1
    2d20:	c9 f0       	breq	.+50     	; 0x2d54 <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    2d22:	c8 01       	movw	r24, r16
    2d24:	b7 01       	movw	r22, r14
    2d26:	a6 01       	movw	r20, r12
    2d28:	95 01       	movw	r18, r10
    2d2a:	0e 94 32 22 	call	0x4464	; 0x4464 <__udivmodsi4>
    2d2e:	fb 01       	movw	r30, r22
    2d30:	ef 70       	andi	r30, 0x0F	; 15
    2d32:	f0 70       	andi	r31, 0x00	; 0
    2d34:	e9 5d       	subi	r30, 0xD9	; 217
    2d36:	fd 4f       	sbci	r31, 0xFD	; 253
    2d38:	64 91       	lpm	r22, Z+
    2d3a:	f2 01       	movw	r30, r4
    2d3c:	60 83       	st	Z, r22
    2d3e:	c8 01       	movw	r24, r16
    2d40:	b7 01       	movw	r22, r14
    2d42:	a6 01       	movw	r20, r12
    2d44:	95 01       	movw	r18, r10
    2d46:	0e 94 32 22 	call	0x4464	; 0x4464 <__udivmodsi4>
    2d4a:	c9 01       	movw	r24, r18
    2d4c:	da 01       	movw	r26, r20
    2d4e:	7c 01       	movw	r14, r24
    2d50:	8d 01       	movw	r16, r26
    2d52:	03 c0       	rjmp	.+6      	; 0x2d5a <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    2d54:	2b a1       	ldd	r18, Y+35	; 0x23
    2d56:	f2 01       	movw	r30, r4
    2d58:	20 83       	st	Z, r18
    2d5a:	3a 94       	dec	r3
    2d5c:	08 94       	sec
    2d5e:	41 08       	sbc	r4, r1
    2d60:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    2d62:	33 20       	and	r3, r3
    2d64:	c9 f6       	brne	.-78     	; 0x2d18 <rprintfNum+0xae>
    2d66:	ce 01       	movw	r24, r28
    2d68:	4f 96       	adiw	r24, 0x1f	; 31
    2d6a:	8c 01       	movw	r16, r24
    2d6c:	e9 a1       	ldd	r30, Y+33	; 0x21
    2d6e:	0e 1b       	sub	r16, r30
    2d70:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    2d72:	22 20       	and	r2, r2
    2d74:	f1 f0       	breq	.+60     	; 0x2db2 <rprintfNum+0x148>
	{
		if(n < 0)
    2d76:	97 fe       	sbrs	r9, 7
    2d78:	05 c0       	rjmp	.+10     	; 0x2d84 <rprintfNum+0x11a>
		{
   			*--p = '-';
    2d7a:	8d e2       	ldi	r24, 0x2D	; 45
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	82 93       	st	-Z, r24
    2d80:	8f 01       	movw	r16, r30
    2d82:	17 c0       	rjmp	.+46     	; 0x2db2 <rprintfNum+0x148>
    2d84:	c8 01       	movw	r24, r16
    2d86:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    2d88:	61 14       	cp	r6, r1
    2d8a:	71 04       	cpc	r7, r1
    2d8c:	81 04       	cpc	r8, r1
    2d8e:	91 04       	cpc	r9, r1
    2d90:	19 f0       	breq	.+6      	; 0x2d98 <rprintfNum+0x12e>
		{
	   		*--p = '+';
    2d92:	8c 01       	movw	r16, r24
    2d94:	8b e2       	ldi	r24, 0x2B	; 43
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    2d98:	8c 01       	movw	r16, r24
    2d9a:	80 e2       	ldi	r24, 0x20	; 32
    2d9c:	f8 01       	movw	r30, r16
    2d9e:	80 83       	st	Z, r24
    2da0:	08 c0       	rjmp	.+16     	; 0x2db2 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    2da2:	f8 01       	movw	r30, r16
    2da4:	81 91       	ld	r24, Z+
    2da6:	8f 01       	movw	r16, r30
    2da8:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
    2dac:	fa a1       	ldd	r31, Y+34	; 0x22
    2dae:	f1 50       	subi	r31, 0x01	; 1
    2db0:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    2db2:	2a a1       	ldd	r18, Y+34	; 0x22
    2db4:	22 23       	and	r18, r18
    2db6:	a9 f7       	brne	.-22     	; 0x2da2 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    2db8:	a3 96       	adiw	r28, 0x23	; 35
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	ff 90       	pop	r15
    2dce:	ef 90       	pop	r14
    2dd0:	df 90       	pop	r13
    2dd2:	cf 90       	pop	r12
    2dd4:	bf 90       	pop	r11
    2dd6:	af 90       	pop	r10
    2dd8:	9f 90       	pop	r9
    2dda:	8f 90       	pop	r8
    2ddc:	7f 90       	pop	r7
    2dde:	6f 90       	pop	r6
    2de0:	5f 90       	pop	r5
    2de2:	4f 90       	pop	r4
    2de4:	3f 90       	pop	r3
    2de6:	2f 90       	pop	r2
    2de8:	08 95       	ret

00002dea <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    2dea:	4f 92       	push	r4
    2dec:	5f 92       	push	r5
    2dee:	6f 92       	push	r6
    2df0:	7f 92       	push	r7
    2df2:	8f 92       	push	r8
    2df4:	9f 92       	push	r9
    2df6:	af 92       	push	r10
    2df8:	bf 92       	push	r11
    2dfa:	cf 92       	push	r12
    2dfc:	df 92       	push	r13
    2dfe:	ef 92       	push	r14
    2e00:	ff 92       	push	r15
    2e02:	0f 93       	push	r16
    2e04:	1f 93       	push	r17
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	48 2e       	mov	r4, r24
    2e0c:	5a 01       	movw	r10, r20
    2e0e:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
    2e10:	cb 01       	movw	r24, r22
    2e12:	ba 01       	movw	r22, r20
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e0       	ldi	r20, 0x00	; 0
    2e1a:	50 e0       	ldi	r21, 0x00	; 0
    2e1c:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__gesf2>
    2e20:	18 16       	cp	r1, r24
    2e22:	1c f4       	brge	.+6      	; 0x2e2a <rprintfFloat+0x40>
    2e24:	35 01       	movw	r6, r10
    2e26:	46 01       	movw	r8, r12
    2e28:	06 c0       	rjmp	.+12     	; 0x2e36 <rprintfFloat+0x4c>
    2e2a:	35 01       	movw	r6, r10
    2e2c:	46 01       	movw	r8, r12
    2e2e:	97 fa       	bst	r9, 7
    2e30:	90 94       	com	r9
    2e32:	97 f8       	bld	r9, 7
    2e34:	90 94       	com	r9
    2e36:	0f 2e       	mov	r0, r31
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	ef 2e       	mov	r14, r31
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	ff 2e       	mov	r15, r31
    2e40:	f0 e8       	ldi	r31, 0x80	; 128
    2e42:	0f 2f       	mov	r16, r31
    2e44:	ff e3       	ldi	r31, 0x3F	; 63
    2e46:	1f 2f       	mov	r17, r31
    2e48:	f0 2d       	mov	r31, r0
    2e4a:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
    2e4c:	c4 01       	movw	r24, r8
    2e4e:	b3 01       	movw	r22, r6
    2e50:	a8 01       	movw	r20, r16
    2e52:	97 01       	movw	r18, r14
    2e54:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e2       	ldi	r20, 0x20	; 32
    2e5e:	51 e4       	ldi	r21, 0x41	; 65
    2e60:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__cmpsf2>
    2e64:	87 fd       	sbrc	r24, 7
    2e66:	0e c0       	rjmp	.+28     	; 0x2e84 <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
    2e68:	c8 01       	movw	r24, r16
    2e6a:	b7 01       	movw	r22, r14
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e2       	ldi	r20, 0x20	; 32
    2e72:	51 e4       	ldi	r21, 0x41	; 65
    2e74:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
    2e78:	7b 01       	movw	r14, r22
    2e7a:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    2e7c:	53 94       	inc	r5
    2e7e:	8f e0       	ldi	r24, 0x0F	; 15
    2e80:	58 16       	cp	r5, r24
    2e82:	21 f7       	brne	.-56     	; 0x2e4c <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    2e84:	c6 01       	movw	r24, r12
    2e86:	b5 01       	movw	r22, r10
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__cmpsf2>
    2e94:	88 23       	and	r24, r24
    2e96:	14 f4       	brge	.+4      	; 0x2e9c <rprintfFloat+0xb2>
		rprintfChar('-');
    2e98:	8d e2       	ldi	r24, 0x2D	; 45
    2e9a:	01 c0       	rjmp	.+2      	; 0x2e9e <rprintfFloat+0xb4>
	else
		rprintfChar('+');
    2e9c:	8b e2       	ldi	r24, 0x2B	; 43
    2e9e:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
    2ea2:	dd 24       	eor	r13, r13
    2ea4:	aa 24       	eor	r10, r10
    2ea6:	56 c0       	rjmp	.+172    	; 0x2f54 <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
    2ea8:	c4 01       	movw	r24, r8
    2eaa:	b3 01       	movw	r22, r6
    2eac:	a8 01       	movw	r20, r16
    2eae:	97 01       	movw	r18, r14
    2eb0:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
    2eb4:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__fixunssfsi>
    2eb8:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
    2eba:	d6 2a       	or	r13, r22
    2ebc:	cd 2d       	mov	r28, r13
    2ebe:	d0 e0       	ldi	r29, 0x00	; 0
    2ec0:	cc 24       	eor	r12, r12
    2ec2:	dd 24       	eor	r13, r13
    2ec4:	c8 01       	movw	r24, r16
    2ec6:	b7 01       	movw	r22, r14
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e8       	ldi	r20, 0x80	; 128
    2ece:	5f e3       	ldi	r21, 0x3F	; 63
    2ed0:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__cmpsf2>
    2ed4:	88 23       	and	r24, r24
    2ed6:	19 f4       	brne	.+6      	; 0x2ede <rprintfFloat+0xf4>
    2ed8:	21 e0       	ldi	r18, 0x01	; 1
    2eda:	c2 2e       	mov	r12, r18
    2edc:	d1 2c       	mov	r13, r1
    2ede:	cc 29       	or	r28, r12
    2ee0:	dd 29       	or	r29, r13
    2ee2:	cd 2b       	or	r28, r29
    2ee4:	39 f0       	breq	.+14     	; 0x2ef4 <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
    2ee6:	8b 2d       	mov	r24, r11
    2ee8:	80 5d       	subi	r24, 0xD0	; 208
    2eea:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
    2eee:	dd 24       	eor	r13, r13
    2ef0:	da 94       	dec	r13
    2ef2:	04 c0       	rjmp	.+8      	; 0x2efc <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
    2ef4:	80 e2       	ldi	r24, 0x20	; 32
    2ef6:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
    2efa:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
    2efc:	c8 01       	movw	r24, r16
    2efe:	b7 01       	movw	r22, r14
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	40 e8       	ldi	r20, 0x80	; 128
    2f06:	5f e3       	ldi	r21, 0x3F	; 63
    2f08:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__cmpsf2>
    2f0c:	88 23       	and	r24, r24
    2f0e:	19 f4       	brne	.+6      	; 0x2f16 <rprintfFloat+0x12c>
		{
			rprintfChar('.');
    2f10:	8e e2       	ldi	r24, 0x2E	; 46
    2f12:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
		}
		
		x -= (digit*place);
    2f16:	6b 2d       	mov	r22, r11
    2f18:	70 e0       	ldi	r23, 0x00	; 0
    2f1a:	88 27       	eor	r24, r24
    2f1c:	77 fd       	sbrc	r23, 7
    2f1e:	80 95       	com	r24
    2f20:	98 2f       	mov	r25, r24
    2f22:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__floatsisf>
    2f26:	a8 01       	movw	r20, r16
    2f28:	97 01       	movw	r18, r14
    2f2a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
    2f2e:	9b 01       	movw	r18, r22
    2f30:	ac 01       	movw	r20, r24
    2f32:	c4 01       	movw	r24, r8
    2f34:	b3 01       	movw	r22, r6
    2f36:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__subsf3>
    2f3a:	3b 01       	movw	r6, r22
    2f3c:	4c 01       	movw	r8, r24
		place /= 10.0;
    2f3e:	c8 01       	movw	r24, r16
    2f40:	b7 01       	movw	r22, r14
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e2       	ldi	r20, 0x20	; 32
    2f48:	51 e4       	ldi	r21, 0x41	; 65
    2f4a:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divsf3>
    2f4e:	7b 01       	movw	r14, r22
    2f50:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    2f52:	a3 94       	inc	r10
    2f54:	a4 14       	cp	r10, r4
    2f56:	08 f4       	brcc	.+2      	; 0x2f5a <rprintfFloat+0x170>
    2f58:	a7 cf       	rjmp	.-178    	; 0x2ea8 <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	1f 91       	pop	r17
    2f60:	0f 91       	pop	r16
    2f62:	ff 90       	pop	r15
    2f64:	ef 90       	pop	r14
    2f66:	df 90       	pop	r13
    2f68:	cf 90       	pop	r12
    2f6a:	bf 90       	pop	r11
    2f6c:	af 90       	pop	r10
    2f6e:	9f 90       	pop	r9
    2f70:	8f 90       	pop	r8
    2f72:	7f 90       	pop	r7
    2f74:	6f 90       	pop	r6
    2f76:	5f 90       	pop	r5
    2f78:	4f 90       	pop	r4
    2f7a:	08 95       	ret

00002f7c <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    2f7c:	7f 92       	push	r7
    2f7e:	8f 92       	push	r8
    2f80:	9f 92       	push	r9
    2f82:	af 92       	push	r10
    2f84:	bf 92       	push	r11
    2f86:	cf 92       	push	r12
    2f88:	df 92       	push	r13
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	78 88       	ldd	r7, Y+16	; 0x10
    2f9c:	c9 88       	ldd	r12, Y+17	; 0x11
    2f9e:	da 88       	ldd	r13, Y+18	; 0x12
    2fa0:	63 e1       	ldi	r22, 0x13	; 19
    2fa2:	e6 2e       	mov	r14, r22
    2fa4:	f1 2c       	mov	r15, r1
    2fa6:	ec 0e       	add	r14, r28
    2fa8:	fd 1e       	adc	r15, r29
    2faa:	14 c0       	rjmp	.+40     	; 0x2fd4 <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    2fac:	88 23       	and	r24, r24
    2fae:	81 f4       	brne	.+32     	; 0x2fd0 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	1f 91       	pop	r17
    2fba:	0f 91       	pop	r16
    2fbc:	ff 90       	pop	r15
    2fbe:	ef 90       	pop	r14
    2fc0:	df 90       	pop	r13
    2fc2:	cf 90       	pop	r12
    2fc4:	bf 90       	pop	r11
    2fc6:	af 90       	pop	r10
    2fc8:	9f 90       	pop	r9
    2fca:	8f 90       	pop	r8
    2fcc:	7f 90       	pop	r7
    2fce:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    2fd0:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
    2fd4:	96 01       	movw	r18, r12
    2fd6:	2f 5f       	subi	r18, 0xFF	; 255
    2fd8:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    2fda:	77 20       	and	r7, r7
    2fdc:	21 f0       	breq	.+8      	; 0x2fe6 <rprintf1RamRom+0x6a>
    2fde:	f6 01       	movw	r30, r12
    2fe0:	69 01       	movw	r12, r18
    2fe2:	84 91       	lpm	r24, Z+
    2fe4:	03 c0       	rjmp	.+6      	; 0x2fec <rprintf1RamRom+0x70>
    2fe6:	f6 01       	movw	r30, r12
    2fe8:	80 81       	ld	r24, Z
    2fea:	69 01       	movw	r12, r18
    2fec:	85 32       	cpi	r24, 0x25	; 37
    2fee:	f1 f6       	brne	.-68     	; 0x2fac <rprintf1RamRom+0x30>
    2ff0:	2f 5f       	subi	r18, 0xFF	; 255
    2ff2:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    2ff4:	77 20       	and	r7, r7
    2ff6:	21 f0       	breq	.+8      	; 0x3000 <rprintf1RamRom+0x84>
    2ff8:	f6 01       	movw	r30, r12
    2ffa:	69 01       	movw	r12, r18
    2ffc:	84 91       	lpm	r24, Z+
    2ffe:	03 c0       	rjmp	.+6      	; 0x3006 <rprintf1RamRom+0x8a>
    3000:	f6 01       	movw	r30, r12
    3002:	80 81       	ld	r24, Z
    3004:	69 01       	movw	r12, r18
    3006:	84 36       	cpi	r24, 0x64	; 100
    3008:	29 f0       	breq	.+10     	; 0x3014 <rprintf1RamRom+0x98>
    300a:	88 37       	cpi	r24, 0x78	; 120
    300c:	81 f0       	breq	.+32     	; 0x302e <rprintf1RamRom+0xb2>
    300e:	83 36       	cpi	r24, 0x63	; 99
    3010:	f9 f6       	brne	.-66     	; 0x2fd0 <rprintf1RamRom+0x54>
    3012:	06 c0       	rjmp	.+12     	; 0x3020 <rprintf1RamRom+0xa4>
    3014:	00 e1       	ldi	r16, 0x10	; 16
    3016:	17 e2       	ldi	r17, 0x27	; 39
    3018:	5a e0       	ldi	r21, 0x0A	; 10
    301a:	a5 2e       	mov	r10, r21
    301c:	b1 2c       	mov	r11, r1
    301e:	0c c0       	rjmp	.+24     	; 0x3038 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    3020:	f7 01       	movw	r30, r14
    3022:	80 81       	ld	r24, Z
    3024:	22 e0       	ldi	r18, 0x02	; 2
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	e2 0e       	add	r14, r18
    302a:	f3 1e       	adc	r15, r19
    302c:	d1 cf       	rjmp	.-94     	; 0x2fd0 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    302e:	00 e0       	ldi	r16, 0x00	; 0
    3030:	10 e1       	ldi	r17, 0x10	; 16
    3032:	40 e1       	ldi	r20, 0x10	; 16
    3034:	a4 2e       	mov	r10, r20
    3036:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    3038:	32 e0       	ldi	r19, 0x02	; 2
    303a:	83 2e       	mov	r8, r19
    303c:	91 2c       	mov	r9, r1
    303e:	8e 0c       	add	r8, r14
    3040:	9f 1c       	adc	r9, r15
    3042:	f7 01       	movw	r30, r14
    3044:	e0 80       	ld	r14, Z
    3046:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    3048:	84 36       	cpi	r24, 0x64	; 100
    304a:	b1 f4       	brne	.+44     	; 0x3078 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    304c:	f7 fe       	sbrs	r15, 7
    304e:	11 c0       	rjmp	.+34     	; 0x3072 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    3050:	f0 94       	com	r15
    3052:	e1 94       	neg	r14
    3054:	f1 08       	sbc	r15, r1
    3056:	f3 94       	inc	r15
					rprintfChar('-');
    3058:	8d e2       	ldi	r24, 0x2D	; 45
    305a:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <rprintfChar>
    305e:	09 c0       	rjmp	.+18     	; 0x3072 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    3060:	c8 01       	movw	r24, r16
    3062:	6a e0       	ldi	r22, 0x0A	; 10
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	0e 94 0b 22 	call	0x4416	; 0x4416 <__udivmodhi4>
    306a:	8b 01       	movw	r16, r22
    306c:	62 30       	cpi	r22, 0x02	; 2
    306e:	71 05       	cpc	r23, r1
    3070:	18 f0       	brcs	.+6      	; 0x3078 <rprintf1RamRom+0xfc>
    3072:	e0 16       	cp	r14, r16
    3074:	f1 06       	cpc	r15, r17
    3076:	a0 f3       	brcs	.-24     	; 0x3060 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    3078:	c7 01       	movw	r24, r14
    307a:	b8 01       	movw	r22, r16
    307c:	0e 94 0b 22 	call	0x4416	; 0x4416 <__udivmodhi4>
    3080:	86 2f       	mov	r24, r22
    3082:	0e 94 02 16 	call	0x2c04	; 0x2c04 <rprintfu04>
				u_val %= div_val;
    3086:	c7 01       	movw	r24, r14
    3088:	b8 01       	movw	r22, r16
    308a:	0e 94 0b 22 	call	0x4416	; 0x4416 <__udivmodhi4>
    308e:	7c 01       	movw	r14, r24
				div_val /= base;
    3090:	c8 01       	movw	r24, r16
    3092:	b5 01       	movw	r22, r10
    3094:	0e 94 0b 22 	call	0x4416	; 0x4416 <__udivmodhi4>
    3098:	8b 01       	movw	r16, r22
			} while (div_val);
    309a:	61 15       	cp	r22, r1
    309c:	71 05       	cpc	r23, r1
    309e:	61 f7       	brne	.-40     	; 0x3078 <rprintf1RamRom+0xfc>
    30a0:	74 01       	movw	r14, r8
    30a2:	98 cf       	rjmp	.-208    	; 0x2fd4 <rprintf1RamRom+0x58>

000030a4 <i2cSetBitrate>:
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		cbi(TWSR, TWPS0);
    30a4:	20 91 b9 00 	lds	r18, 0x00B9
    30a8:	2e 7f       	andi	r18, 0xFE	; 254
    30aa:	20 93 b9 00 	sts	0x00B9, r18
		cbi(TWSR, TWPS1);
    30ae:	20 91 b9 00 	lds	r18, 0x00B9
    30b2:	2d 7f       	andi	r18, 0xFD	; 253
    30b4:	20 93 b9 00 	sts	0x00B9, r18
	#endif
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
    30b8:	9c 01       	movw	r18, r24
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	60 e8       	ldi	r22, 0x80	; 128
    30c0:	7e e3       	ldi	r23, 0x3E	; 62
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__divmodsi4>
	if(bitrate_div >= 16)
    30ca:	20 31       	cpi	r18, 0x10	; 16
    30cc:	30 f0       	brcs	.+12     	; 0x30da <i2cSetBitrate+0x36>
		bitrate_div = (bitrate_div-16)/2;
    30ce:	82 2f       	mov	r24, r18
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	40 97       	sbiw	r24, 0x10	; 16
    30d4:	95 95       	asr	r25
    30d6:	87 95       	ror	r24
    30d8:	28 2f       	mov	r18, r24
	outb(TWBR, bitrate_div);
    30da:	20 93 b8 00 	sts	0x00B8, r18
}
    30de:	08 95       	ret

000030e0 <i2cInit>:

// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	sbi(PORTD, 0);	// i2c SCL on 640
    30e0:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, 1);	// i2c SDA on 640
    30e2:	59 9a       	sbi	0x0b, 1	; 11

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
    30e4:	10 92 63 05 	sts	0x0563, r1
    30e8:	10 92 62 05 	sts	0x0562, r1
	i2cSlaveTransmit = 0;
    30ec:	10 92 65 05 	sts	0x0565, r1
    30f0:	10 92 64 05 	sts	0x0564, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
    30f4:	84 e6       	ldi	r24, 0x64	; 100
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 52 18 	call	0x30a4	; 0x30a4 <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
    30fc:	ec eb       	ldi	r30, 0xBC	; 188
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	84 60       	ori	r24, 0x04	; 4
    3104:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    3106:	10 92 1c 05 	sts	0x051C, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
    310a:	80 81       	ld	r24, Z
    310c:	81 60       	ori	r24, 0x01	; 1
    310e:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
    3110:	80 81       	ld	r24, Z
    3112:	80 64       	ori	r24, 0x40	; 64
    3114:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    3116:	78 94       	sei
}
    3118:	08 95       	ret

0000311a <i2cSetLocalDeviceAddr>:
}

void i2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	// set local device address (used in slave mode only)
	outb(TWAR, ((deviceAddr&0xFE) | (genCallEn?1:0)) );
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	61 11       	cpse	r22, r1
    311e:	91 e0       	ldi	r25, 0x01	; 1
    3120:	8e 7f       	andi	r24, 0xFE	; 254
    3122:	98 2b       	or	r25, r24
    3124:	90 93 ba 00 	sts	0x00BA, r25
}
    3128:	08 95       	ret

0000312a <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* recieveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
    312a:	90 93 63 05 	sts	0x0563, r25
    312e:	80 93 62 05 	sts	0x0562, r24
}
    3132:	08 95       	ret

00003134 <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
    3134:	90 93 65 05 	sts	0x0565, r25
    3138:	80 93 64 05 	sts	0x0564, r24
}
    313c:	08 95       	ret

0000313e <i2cSendStart>:

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    313e:	ec eb       	ldi	r30, 0xBC	; 188
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	8f 70       	andi	r24, 0x0F	; 15
    3146:	80 6a       	ori	r24, 0xA0	; 160
    3148:	80 83       	st	Z, r24
}
    314a:	08 95       	ret

0000314c <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    314c:	ec eb       	ldi	r30, 0xBC	; 188
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	8f 70       	andi	r24, 0x0F	; 15
    3154:	80 6d       	ori	r24, 0xD0	; 208
    3156:	80 83       	st	Z, r24
}
    3158:	08 95       	ret

0000315a <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    315a:	80 91 bc 00 	lds	r24, 0x00BC
    315e:	87 ff       	sbrs	r24, 7
    3160:	fc cf       	rjmp	.-8      	; 0x315a <i2cWaitForComplete>
}
    3162:	08 95       	ret

00003164 <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    3164:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    3168:	ec eb       	ldi	r30, 0xBC	; 188
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	8f 70       	andi	r24, 0x0F	; 15
    3170:	80 68       	ori	r24, 0x80	; 128
    3172:	80 83       	st	Z, r24
}
    3174:	08 95       	ret

00003176 <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    3176:	88 23       	and	r24, r24
    3178:	29 f0       	breq	.+10     	; 0x3184 <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    317a:	80 91 bc 00 	lds	r24, 0x00BC
    317e:	8f 70       	andi	r24, 0x0F	; 15
    3180:	80 6c       	ori	r24, 0xC0	; 192
    3182:	04 c0       	rjmp	.+8      	; 0x318c <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    3184:	80 91 bc 00 	lds	r24, 0x00BC
    3188:	8f 70       	andi	r24, 0x0F	; 15
    318a:	80 68       	ori	r24, 0x80	; 128
    318c:	80 93 bc 00 	sts	0x00BC, r24
    3190:	08 95       	ret

00003192 <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    3192:	80 91 bb 00 	lds	r24, 0x00BB
}
    3196:	08 95       	ret

00003198 <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
    3198:	80 91 b9 00 	lds	r24, 0x00B9
}
    319c:	08 95       	ret

0000319e <i2cMasterSend>:

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
{
    319e:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    31a0:	80 91 1c 05 	lds	r24, 0x051C
    31a4:	88 23       	and	r24, r24
    31a6:	e1 f7       	brne	.-8      	; 0x31a0 <i2cMasterSend+0x2>
	// set state
	I2cState = I2C_MASTER_TX;
    31a8:	82 e0       	ldi	r24, 0x02	; 2
    31aa:	80 93 1c 05 	sts	0x051C, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
    31ae:	9e 7f       	andi	r25, 0xFE	; 254
    31b0:	90 93 1d 05 	sts	0x051D, r25
    31b4:	ae e1       	ldi	r26, 0x1E	; 30
    31b6:	b5 e0       	ldi	r27, 0x05	; 5
    31b8:	fa 01       	movw	r30, r20
    31ba:	02 c0       	rjmp	.+4      	; 0x31c0 <i2cMasterSend+0x22>
	for(i=0; i<length; i++)
		I2cSendData[i] = *data++;
    31bc:	81 91       	ld	r24, Z+
    31be:	8d 93       	st	X+, r24
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
    31c0:	8e 2f       	mov	r24, r30
    31c2:	84 1b       	sub	r24, r20
    31c4:	86 17       	cp	r24, r22
    31c6:	d0 f3       	brcs	.-12     	; 0x31bc <i2cMasterSend+0x1e>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
    31c8:	10 92 3e 05 	sts	0x053E, r1
	I2cSendDataLength = length;
    31cc:	60 93 3f 05 	sts	0x053F, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    31d0:	80 91 bc 00 	lds	r24, 0x00BC
    31d4:	8f 70       	andi	r24, 0x0F	; 15
    31d6:	80 6a       	ori	r24, 0xA0	; 160
    31d8:	80 93 bc 00 	sts	0x00BC, r24
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}
    31dc:	08 95       	ret

000031de <i2cMasterReceive>:

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
{
    31de:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    31e0:	80 91 1c 05 	lds	r24, 0x051C
    31e4:	88 23       	and	r24, r24
    31e6:	e1 f7       	brne	.-8      	; 0x31e0 <i2cMasterReceive+0x2>
	// set state
	I2cState = I2C_MASTER_RX;
    31e8:	83 e0       	ldi	r24, 0x03	; 3
    31ea:	80 93 1c 05 	sts	0x051C, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr|0x01);	// RW set: read operation
    31ee:	91 60       	ori	r25, 0x01	; 1
    31f0:	90 93 1d 05 	sts	0x051D, r25
	I2cReceiveDataIndex = 0;
    31f4:	10 92 60 05 	sts	0x0560, r1
	I2cReceiveDataLength = length;
    31f8:	60 93 61 05 	sts	0x0561, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    31fc:	80 91 bc 00 	lds	r24, 0x00BC
    3200:	8f 70       	andi	r24, 0x0F	; 15
    3202:	80 6a       	ori	r24, 0xA0	; 160
    3204:	80 93 bc 00 	sts	0x00BC, r24
	I2cReceiveDataIndex = 0;
	I2cReceiveDataLength = length;
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
    3208:	80 91 1c 05 	lds	r24, 0x051C
    320c:	88 23       	and	r24, r24
    320e:	e1 f7       	brne	.-8      	; 0x3208 <i2cMasterReceive+0x2a>
    3210:	a0 e4       	ldi	r26, 0x40	; 64
    3212:	b5 e0       	ldi	r27, 0x05	; 5
    3214:	fa 01       	movw	r30, r20
    3216:	02 c0       	rjmp	.+4      	; 0x321c <i2cMasterReceive+0x3e>
	// return data
	for(i=0; i<length; i++)
		*data++ = I2cReceiveData[i];
    3218:	8d 91       	ld	r24, X+
    321a:	81 93       	st	Z+, r24
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
    321c:	8e 2f       	mov	r24, r30
    321e:	84 1b       	sub	r24, r20
    3220:	86 17       	cp	r24, r22
    3222:	d0 f3       	brcs	.-12     	; 0x3218 <i2cMasterReceive+0x3a>
		*data++ = I2cReceiveData[i];
}
    3224:	08 95       	ret

00003226 <i2cMasterSendNI>:

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
    3226:	98 2f       	mov	r25, r24
    3228:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    322a:	80 91 bc 00 	lds	r24, 0x00BC
    322e:	8e 7f       	andi	r24, 0xFE	; 254
    3230:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    3234:	80 91 bc 00 	lds	r24, 0x00BC
    3238:	8f 70       	andi	r24, 0x0F	; 15
    323a:	80 6a       	ori	r24, 0xA0	; 160
    323c:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    3240:	80 91 bc 00 	lds	r24, 0x00BC
    3244:	87 ff       	sbrs	r24, 7
    3246:	fc cf       	rjmp	.-8      	; 0x3240 <i2cMasterSendNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
    3248:	9e 7f       	andi	r25, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    324a:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    324e:	80 91 bc 00 	lds	r24, 0x00BC
    3252:	8f 70       	andi	r24, 0x0F	; 15
    3254:	80 68       	ori	r24, 0x80	; 128
    3256:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    325a:	80 91 bc 00 	lds	r24, 0x00BC
    325e:	87 ff       	sbrs	r24, 7
    3260:	fc cf       	rjmp	.-8      	; 0x325a <i2cMasterSendNI+0x34>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
    3262:	80 91 b9 00 	lds	r24, 0x00B9
    3266:	88 31       	cpi	r24, 0x18	; 24
    3268:	89 f0       	breq	.+34     	; 0x328c <i2cMasterSendNI+0x66>
    326a:	91 e0       	ldi	r25, 0x01	; 1
    326c:	12 c0       	rjmp	.+36     	; 0x3292 <i2cMasterSendNI+0x6c>
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    326e:	80 81       	ld	r24, Z
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    3270:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    3274:	80 91 bc 00 	lds	r24, 0x00BC
    3278:	8f 70       	andi	r24, 0x0F	; 15
    327a:	80 68       	ori	r24, 0x80	; 128
    327c:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    3280:	80 91 bc 00 	lds	r24, 0x00BC
    3284:	87 ff       	sbrs	r24, 7
    3286:	fc cf       	rjmp	.-8      	; 0x3280 <i2cMasterSendNI+0x5a>
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    3288:	31 96       	adiw	r30, 0x01	; 1
			i2cWaitForComplete();
			length--;
    328a:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
    328c:	66 23       	and	r22, r22
    328e:	79 f7       	brne	.-34     	; 0x326e <i2cMasterSendNI+0x48>
    3290:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    3292:	80 91 bc 00 	lds	r24, 0x00BC
    3296:	8f 70       	andi	r24, 0x0F	; 15
    3298:	80 6d       	ori	r24, 0xD0	; 208
    329a:	80 93 bc 00 	sts	0x00BC, r24
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
    329e:	80 91 bc 00 	lds	r24, 0x00BC
    32a2:	84 ff       	sbrs	r24, 4
    32a4:	fc cf       	rjmp	.-8      	; 0x329e <i2cMasterSendNI+0x78>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    32a6:	80 91 bc 00 	lds	r24, 0x00BC
    32aa:	81 60       	ori	r24, 0x01	; 1
    32ac:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    32b0:	89 2f       	mov	r24, r25
    32b2:	08 95       	ret

000032b4 <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
    32b4:	98 2f       	mov	r25, r24
    32b6:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    32b8:	80 91 bc 00 	lds	r24, 0x00BC
    32bc:	8e 7f       	andi	r24, 0xFE	; 254
    32be:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    32c2:	80 91 bc 00 	lds	r24, 0x00BC
    32c6:	8f 70       	andi	r24, 0x0F	; 15
    32c8:	80 6a       	ori	r24, 0xA0	; 160
    32ca:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    32ce:	80 91 bc 00 	lds	r24, 0x00BC
    32d2:	87 ff       	sbrs	r24, 7
    32d4:	fc cf       	rjmp	.-8      	; 0x32ce <i2cMasterReceiveNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
    32d6:	91 60       	ori	r25, 0x01	; 1
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    32d8:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    32dc:	80 91 bc 00 	lds	r24, 0x00BC
    32e0:	8f 70       	andi	r24, 0x0F	; 15
    32e2:	80 68       	ori	r24, 0x80	; 128
    32e4:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    32e8:	80 91 bc 00 	lds	r24, 0x00BC
    32ec:	87 ff       	sbrs	r24, 7
    32ee:	fc cf       	rjmp	.-8      	; 0x32e8 <i2cMasterReceiveNI+0x34>
	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
    32f0:	80 91 b9 00 	lds	r24, 0x00B9
    32f4:	80 34       	cpi	r24, 0x40	; 64
    32f6:	81 f0       	breq	.+32     	; 0x3318 <i2cMasterReceiveNI+0x64>
    32f8:	91 e0       	ldi	r25, 0x01	; 1
    32fa:	1e c0       	rjmp	.+60     	; 0x3338 <i2cMasterReceiveNI+0x84>
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    32fc:	80 91 bc 00 	lds	r24, 0x00BC
    3300:	8f 70       	andi	r24, 0x0F	; 15
    3302:	80 6c       	ori	r24, 0xC0	; 192
    3304:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    3308:	80 91 bc 00 	lds	r24, 0x00BC
    330c:	87 ff       	sbrs	r24, 7
    330e:	fc cf       	rjmp	.-8      	; 0x3308 <i2cMasterReceiveNI+0x54>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    3310:	80 91 bb 00 	lds	r24, 0x00BB
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
    3314:	81 93       	st	Z+, r24
			// decrement length
			length--;
    3316:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
    3318:	62 30       	cpi	r22, 0x02	; 2
    331a:	80 f7       	brcc	.-32     	; 0x32fc <i2cMasterReceiveNI+0x48>
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    331c:	80 91 bc 00 	lds	r24, 0x00BC
    3320:	8f 70       	andi	r24, 0x0F	; 15
    3322:	80 68       	ori	r24, 0x80	; 128
    3324:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    3328:	80 91 bc 00 	lds	r24, 0x00BC
    332c:	87 ff       	sbrs	r24, 7
    332e:	fc cf       	rjmp	.-8      	; 0x3328 <i2cMasterReceiveNI+0x74>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    3330:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
    3334:	80 83       	st	Z, r24
    3336:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    3338:	80 91 bc 00 	lds	r24, 0x00BC
    333c:	8f 70       	andi	r24, 0x0F	; 15
    333e:	80 6d       	ori	r24, 0xD0	; 208
    3340:	80 93 bc 00 	sts	0x00BC, r24
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    3344:	80 91 bc 00 	lds	r24, 0x00BC
    3348:	81 60       	ori	r24, 0x01	; 1
    334a:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    334e:	89 2f       	mov	r24, r25
    3350:	08 95       	ret

00003352 <__vector_39>:
}
*/

//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
{
    3352:	1f 92       	push	r1
    3354:	0f 92       	push	r0
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	0f 92       	push	r0
    335a:	11 24       	eor	r1, r1
    335c:	2f 93       	push	r18
    335e:	3f 93       	push	r19
    3360:	4f 93       	push	r20
    3362:	5f 93       	push	r21
    3364:	6f 93       	push	r22
    3366:	7f 93       	push	r23
    3368:	8f 93       	push	r24
    336a:	9f 93       	push	r25
    336c:	af 93       	push	r26
    336e:	bf 93       	push	r27
    3370:	ef 93       	push	r30
    3372:	ff 93       	push	r31
	// read status bits
	u08 status = inb(TWSR) & TWSR_STATUS_MASK;
    3374:	80 91 b9 00 	lds	r24, 0x00B9

	switch(status)
    3378:	88 7f       	andi	r24, 0xF8	; 248
    337a:	80 36       	cpi	r24, 0x60	; 96
    337c:	09 f4       	brne	.+2      	; 0x3380 <__vector_39+0x2e>
    337e:	a0 c0       	rjmp	.+320    	; 0x34c0 <__vector_39+0x16e>
    3380:	81 36       	cpi	r24, 0x61	; 97
    3382:	70 f5       	brcc	.+92     	; 0x33e0 <__vector_39+0x8e>
    3384:	88 32       	cpi	r24, 0x28	; 40
    3386:	09 f4       	brne	.+2      	; 0x338a <__vector_39+0x38>
    3388:	5f c0       	rjmp	.+190    	; 0x3448 <__vector_39+0xf6>
    338a:	89 32       	cpi	r24, 0x29	; 41
    338c:	98 f4       	brcc	.+38     	; 0x33b4 <__vector_39+0x62>
    338e:	80 31       	cpi	r24, 0x10	; 16
    3390:	09 f4       	brne	.+2      	; 0x3394 <__vector_39+0x42>
    3392:	57 c0       	rjmp	.+174    	; 0x3442 <__vector_39+0xf0>
    3394:	81 31       	cpi	r24, 0x11	; 17
    3396:	38 f4       	brcc	.+14     	; 0x33a6 <__vector_39+0x54>
    3398:	88 23       	and	r24, r24
    339a:	09 f4       	brne	.+2      	; 0x339e <__vector_39+0x4c>
    339c:	ea c0       	rjmp	.+468    	; 0x3572 <__vector_39+0x220>
    339e:	88 30       	cpi	r24, 0x08	; 8
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <__vector_39+0x52>
    33a2:	ef c0       	rjmp	.+478    	; 0x3582 <__vector_39+0x230>
    33a4:	4e c0       	rjmp	.+156    	; 0x3442 <__vector_39+0xf0>
    33a6:	88 31       	cpi	r24, 0x18	; 24
    33a8:	09 f4       	brne	.+2      	; 0x33ac <__vector_39+0x5a>
    33aa:	4e c0       	rjmp	.+156    	; 0x3448 <__vector_39+0xf6>
    33ac:	80 32       	cpi	r24, 0x20	; 32
    33ae:	09 f0       	breq	.+2      	; 0x33b2 <__vector_39+0x60>
    33b0:	e8 c0       	rjmp	.+464    	; 0x3582 <__vector_39+0x230>
    33b2:	df c0       	rjmp	.+446    	; 0x3572 <__vector_39+0x220>
    33b4:	80 34       	cpi	r24, 0x40	; 64
    33b6:	09 f4       	brne	.+2      	; 0x33ba <__vector_39+0x68>
    33b8:	77 c0       	rjmp	.+238    	; 0x34a8 <__vector_39+0x156>
    33ba:	81 34       	cpi	r24, 0x41	; 65
    33bc:	38 f4       	brcc	.+14     	; 0x33cc <__vector_39+0x7a>
    33be:	80 33       	cpi	r24, 0x30	; 48
    33c0:	09 f4       	brne	.+2      	; 0x33c4 <__vector_39+0x72>
    33c2:	d7 c0       	rjmp	.+430    	; 0x3572 <__vector_39+0x220>
    33c4:	88 33       	cpi	r24, 0x38	; 56
    33c6:	09 f0       	breq	.+2      	; 0x33ca <__vector_39+0x78>
    33c8:	dc c0       	rjmp	.+440    	; 0x3582 <__vector_39+0x230>
    33ca:	5d c0       	rjmp	.+186    	; 0x3486 <__vector_39+0x134>
    33cc:	80 35       	cpi	r24, 0x50	; 80
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <__vector_39+0x80>
    33d0:	5f c0       	rjmp	.+190    	; 0x3490 <__vector_39+0x13e>
    33d2:	88 35       	cpi	r24, 0x58	; 88
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <__vector_39+0x86>
    33d6:	4a c0       	rjmp	.+148    	; 0x346c <__vector_39+0x11a>
    33d8:	88 34       	cpi	r24, 0x48	; 72
    33da:	09 f0       	breq	.+2      	; 0x33de <__vector_39+0x8c>
    33dc:	d2 c0       	rjmp	.+420    	; 0x3582 <__vector_39+0x230>
    33de:	c9 c0       	rjmp	.+402    	; 0x3572 <__vector_39+0x220>
    33e0:	88 39       	cpi	r24, 0x98	; 152
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <__vector_39+0x94>
    33e4:	ba c0       	rjmp	.+372    	; 0x355a <__vector_39+0x208>
    33e6:	89 39       	cpi	r24, 0x99	; 153
    33e8:	b0 f4       	brcc	.+44     	; 0x3416 <__vector_39+0xc4>
    33ea:	88 37       	cpi	r24, 0x78	; 120
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <__vector_39+0x9e>
    33ee:	68 c0       	rjmp	.+208    	; 0x34c0 <__vector_39+0x16e>
    33f0:	89 37       	cpi	r24, 0x79	; 121
    33f2:	38 f4       	brcc	.+14     	; 0x3402 <__vector_39+0xb0>
    33f4:	88 36       	cpi	r24, 0x68	; 104
    33f6:	09 f4       	brne	.+2      	; 0x33fa <__vector_39+0xa8>
    33f8:	63 c0       	rjmp	.+198    	; 0x34c0 <__vector_39+0x16e>
    33fa:	80 37       	cpi	r24, 0x70	; 112
    33fc:	09 f0       	breq	.+2      	; 0x3400 <__vector_39+0xae>
    33fe:	c1 c0       	rjmp	.+386    	; 0x3582 <__vector_39+0x230>
    3400:	5f c0       	rjmp	.+190    	; 0x34c0 <__vector_39+0x16e>
    3402:	88 38       	cpi	r24, 0x88	; 136
    3404:	09 f4       	brne	.+2      	; 0x3408 <__vector_39+0xb6>
    3406:	a9 c0       	rjmp	.+338    	; 0x355a <__vector_39+0x208>
    3408:	80 39       	cpi	r24, 0x90	; 144
    340a:	09 f4       	brne	.+2      	; 0x340e <__vector_39+0xbc>
    340c:	5f c0       	rjmp	.+190    	; 0x34cc <__vector_39+0x17a>
    340e:	80 38       	cpi	r24, 0x80	; 128
    3410:	09 f0       	breq	.+2      	; 0x3414 <__vector_39+0xc2>
    3412:	b7 c0       	rjmp	.+366    	; 0x3582 <__vector_39+0x230>
    3414:	5b c0       	rjmp	.+182    	; 0x34cc <__vector_39+0x17a>
    3416:	80 3b       	cpi	r24, 0xB0	; 176
    3418:	09 f4       	brne	.+2      	; 0x341c <__vector_39+0xca>
    341a:	79 c0       	rjmp	.+242    	; 0x350e <__vector_39+0x1bc>
    341c:	81 3b       	cpi	r24, 0xB1	; 177
    341e:	38 f4       	brcc	.+14     	; 0x342e <__vector_39+0xdc>
    3420:	80 3a       	cpi	r24, 0xA0	; 160
    3422:	09 f4       	brne	.+2      	; 0x3426 <__vector_39+0xd4>
    3424:	62 c0       	rjmp	.+196    	; 0x34ea <__vector_39+0x198>
    3426:	88 3a       	cpi	r24, 0xA8	; 168
    3428:	09 f0       	breq	.+2      	; 0x342c <__vector_39+0xda>
    342a:	ab c0       	rjmp	.+342    	; 0x3582 <__vector_39+0x230>
    342c:	70 c0       	rjmp	.+224    	; 0x350e <__vector_39+0x1bc>
    342e:	80 3c       	cpi	r24, 0xC0	; 192
    3430:	09 f4       	brne	.+2      	; 0x3434 <__vector_39+0xe2>
    3432:	9a c0       	rjmp	.+308    	; 0x3568 <__vector_39+0x216>
    3434:	88 3c       	cpi	r24, 0xC8	; 200
    3436:	09 f4       	brne	.+2      	; 0x343a <__vector_39+0xe8>
    3438:	97 c0       	rjmp	.+302    	; 0x3568 <__vector_39+0x216>
    343a:	88 3b       	cpi	r24, 0xB8	; 184
    343c:	09 f0       	breq	.+2      	; 0x3440 <__vector_39+0xee>
    343e:	a1 c0       	rjmp	.+322    	; 0x3582 <__vector_39+0x230>
    3440:	77 c0       	rjmp	.+238    	; 0x3530 <__vector_39+0x1de>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: M->START\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
    3442:	80 91 1d 05 	lds	r24, 0x051D
    3446:	0f c0       	rjmp	.+30     	; 0x3466 <__vector_39+0x114>
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
    3448:	90 91 3e 05 	lds	r25, 0x053E
    344c:	80 91 3f 05 	lds	r24, 0x053F
    3450:	98 17       	cp	r25, r24
    3452:	08 f0       	brcs	.+2      	; 0x3456 <__vector_39+0x104>
    3454:	8e c0       	rjmp	.+284    	; 0x3572 <__vector_39+0x220>
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
    3456:	e9 2f       	mov	r30, r25
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	e2 5e       	subi	r30, 0xE2	; 226
    345c:	fa 4f       	sbci	r31, 0xFA	; 250
    345e:	80 81       	ld	r24, Z
    3460:	9f 5f       	subi	r25, 0xFF	; 255
    3462:	90 93 3e 05 	sts	0x053E, r25
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    3466:	80 93 bb 00 	sts	0x00BB, r24
    346a:	77 c0       	rjmp	.+238    	; 0x355a <__vector_39+0x208>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    346c:	80 91 60 05 	lds	r24, 0x0560
    3470:	90 91 bb 00 	lds	r25, 0x00BB
    3474:	e8 2f       	mov	r30, r24
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	e0 5c       	subi	r30, 0xC0	; 192
    347a:	fa 4f       	sbci	r31, 0xFA	; 250
    347c:	90 83       	st	Z, r25
    347e:	8f 5f       	subi	r24, 0xFF	; 255
    3480:	80 93 60 05 	sts	0x0560, r24
    3484:	76 c0       	rjmp	.+236    	; 0x3572 <__vector_39+0x220>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->ARB_LOST\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    3486:	80 91 bc 00 	lds	r24, 0x00BC
    348a:	8f 70       	andi	r24, 0x0F	; 15
    348c:	80 68       	ori	r24, 0x80	; 128
    348e:	75 c0       	rjmp	.+234    	; 0x357a <__vector_39+0x228>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    3490:	80 91 60 05 	lds	r24, 0x0560
    3494:	90 91 bb 00 	lds	r25, 0x00BB
    3498:	e8 2f       	mov	r30, r24
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	e0 5c       	subi	r30, 0xC0	; 192
    349e:	fa 4f       	sbci	r31, 0xFA	; 250
    34a0:	90 83       	st	Z, r25
    34a2:	8f 5f       	subi	r24, 0xFF	; 255
    34a4:	80 93 60 05 	sts	0x0560, r24
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    34a8:	20 91 60 05 	lds	r18, 0x0560
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	80 91 61 05 	lds	r24, 0x0561
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	28 17       	cp	r18, r24
    34b8:	39 07       	cpc	r19, r25
    34ba:	0c f0       	brlt	.+2      	; 0x34be <__vector_39+0x16c>
    34bc:	4e c0       	rjmp	.+156    	; 0x355a <__vector_39+0x208>
    34be:	48 c0       	rjmp	.+144    	; 0x3550 <__vector_39+0x1fe>
		rprintf("I2C: SR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		I2cState = I2C_SLAVE_RX;
    34c0:	85 e0       	ldi	r24, 0x05	; 5
    34c2:	80 93 1c 05 	sts	0x051C, r24
		// prepare buffer
		I2cReceiveDataIndex = 0;
    34c6:	10 92 60 05 	sts	0x0560, r1
    34ca:	42 c0       	rjmp	.+132    	; 0x3550 <__vector_39+0x1fe>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    34cc:	80 91 60 05 	lds	r24, 0x0560
    34d0:	90 91 bb 00 	lds	r25, 0x00BB
    34d4:	e8 2f       	mov	r30, r24
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	e0 5c       	subi	r30, 0xC0	; 192
    34da:	fa 4f       	sbci	r31, 0xFA	; 250
    34dc:	90 83       	st	Z, r25
    34de:	8f 5f       	subi	r24, 0xFF	; 255
    34e0:	80 93 60 05 	sts	0x0560, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
    34e4:	80 32       	cpi	r24, 0x20	; 32
    34e6:	c8 f5       	brcc	.+114    	; 0x355a <__vector_39+0x208>
    34e8:	33 c0       	rjmp	.+102    	; 0x3550 <__vector_39+0x1fe>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->SR_STOP\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// switch to SR mode with SLA ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    34ea:	80 91 bc 00 	lds	r24, 0x00BC
    34ee:	8f 70       	andi	r24, 0x0F	; 15
    34f0:	80 6c       	ori	r24, 0xC0	; 192
    34f2:	80 93 bc 00 	sts	0x00BC, r24
		// i2c receive is complete, call i2cSlaveReceive
		if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
    34f6:	e0 91 62 05 	lds	r30, 0x0562
    34fa:	f0 91 63 05 	lds	r31, 0x0563
    34fe:	30 97       	sbiw	r30, 0x00	; 0
    3500:	f1 f1       	breq	.+124    	; 0x357e <__vector_39+0x22c>
    3502:	80 91 60 05 	lds	r24, 0x0560
    3506:	60 e4       	ldi	r22, 0x40	; 64
    3508:	75 e0       	ldi	r23, 0x05	; 5
    350a:	09 95       	icall
    350c:	38 c0       	rjmp	.+112    	; 0x357e <__vector_39+0x22c>
		rprintf("I2C: ST->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for reading (data must be transmitted back to master)
		// set state
		I2cState = I2C_SLAVE_TX;
    350e:	84 e0       	ldi	r24, 0x04	; 4
    3510:	80 93 1c 05 	sts	0x051C, r24
		// request data from application
		if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
    3514:	e0 91 64 05 	lds	r30, 0x0564
    3518:	f0 91 65 05 	lds	r31, 0x0565
    351c:	30 97       	sbiw	r30, 0x00	; 0
    351e:	31 f0       	breq	.+12     	; 0x352c <__vector_39+0x1da>
    3520:	80 e2       	ldi	r24, 0x20	; 32
    3522:	6e e1       	ldi	r22, 0x1E	; 30
    3524:	75 e0       	ldi	r23, 0x05	; 5
    3526:	09 95       	icall
    3528:	80 93 3f 05 	sts	0x053F, r24
		// reset data index
		I2cSendDataIndex = 0;
    352c:	10 92 3e 05 	sts	0x053E, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: ST->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit data byte
		outb(TWDR, I2cSendData[I2cSendDataIndex++]);
    3530:	90 91 3e 05 	lds	r25, 0x053E
    3534:	e9 2f       	mov	r30, r25
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	e2 5e       	subi	r30, 0xE2	; 226
    353a:	fa 4f       	sbci	r31, 0xFA	; 250
    353c:	80 81       	ld	r24, Z
    353e:	80 93 bb 00 	sts	0x00BB, r24
    3542:	9f 5f       	subi	r25, 0xFF	; 255
    3544:	90 93 3e 05 	sts	0x053E, r25
		if(I2cSendDataIndex < I2cSendDataLength)
    3548:	80 91 3f 05 	lds	r24, 0x053F
    354c:	98 17       	cp	r25, r24
    354e:	28 f4       	brcc	.+10     	; 0x355a <__vector_39+0x208>
			// expect ACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    3550:	80 91 bc 00 	lds	r24, 0x00BC
    3554:	8f 70       	andi	r24, 0x0F	; 15
    3556:	80 6c       	ori	r24, 0xC0	; 192
    3558:	04 c0       	rjmp	.+8      	; 0x3562 <__vector_39+0x210>
		else
			// expect NACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    355a:	80 91 bc 00 	lds	r24, 0x00BC
    355e:	8f 70       	andi	r24, 0x0F	; 15
    3560:	80 68       	ori	r24, 0x80	; 128
    3562:	80 93 bc 00 	sts	0x00BC, r24
    3566:	0d c0       	rjmp	.+26     	; 0x3582 <__vector_39+0x230>
		rprintf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// all done
		// switch to open slave
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    3568:	80 91 bc 00 	lds	r24, 0x00BC
    356c:	8f 70       	andi	r24, 0x0F	; 15
    356e:	80 6c       	ori	r24, 0xC0	; 192
    3570:	04 c0       	rjmp	.+8      	; 0x357a <__vector_39+0x228>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: BUS_ERROR\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// reset internal hardware and release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
    3572:	80 91 bc 00 	lds	r24, 0x00BC
    3576:	8f 70       	andi	r24, 0x0F	; 15
    3578:	80 6d       	ori	r24, 0xD0	; 208
    357a:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
    357e:	10 92 1c 05 	sts	0x051C, r1
		break;
	}
}
    3582:	ff 91       	pop	r31
    3584:	ef 91       	pop	r30
    3586:	bf 91       	pop	r27
    3588:	af 91       	pop	r26
    358a:	9f 91       	pop	r25
    358c:	8f 91       	pop	r24
    358e:	7f 91       	pop	r23
    3590:	6f 91       	pop	r22
    3592:	5f 91       	pop	r21
    3594:	4f 91       	pop	r20
    3596:	3f 91       	pop	r19
    3598:	2f 91       	pop	r18
    359a:	0f 90       	pop	r0
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	0f 90       	pop	r0
    35a0:	1f 90       	pop	r1
    35a2:	18 95       	reti

000035a4 <i2cGetState>:

eI2cStateType i2cGetState(void)
{
	return I2cState;
    35a4:	80 91 1c 05 	lds	r24, 0x051C
}
    35a8:	08 95       	ret

000035aa <init_LDS_buffer>:
uint8_t lds_buffer[BUFFER_SIZE];
uint8_t *lds_buffer_write_ndx = NULL;
uint8_t *lds_buffer_read_ndx = NULL;

void init_LDS_buffer(){
	lds_buffer_write_ndx = lds_buffer_read_ndx = lds_buffer;
    35aa:	83 eb       	ldi	r24, 0xB3	; 179
    35ac:	98 e0       	ldi	r25, 0x08	; 8
    35ae:	90 93 69 05 	sts	0x0569, r25
    35b2:	80 93 68 05 	sts	0x0568, r24
    35b6:	90 93 67 05 	sts	0x0567, r25
    35ba:	80 93 66 05 	sts	0x0566, r24
}
    35be:	08 95       	ret

000035c0 <LDSRcv>:

void LDSRcv(unsigned char c){
	if(c != 0xff){
    35c0:	8f 3f       	cpi	r24, 0xFF	; 255
    35c2:	b9 f0       	breq	.+46     	; 0x35f2 <LDSRcv+0x32>
		*lds_buffer_write_ndx = c;
    35c4:	e0 91 66 05 	lds	r30, 0x0566
    35c8:	f0 91 67 05 	lds	r31, 0x0567
    35cc:	80 83       	st	Z, r24
		lds_buffer_write_ndx++;		
    35ce:	80 91 66 05 	lds	r24, 0x0566
    35d2:	90 91 67 05 	lds	r25, 0x0567
    35d6:	01 96       	adiw	r24, 0x01	; 1
    35d8:	90 93 67 05 	sts	0x0567, r25
    35dc:	80 93 66 05 	sts	0x0566, r24
		if(lds_buffer_write_ndx >= (lds_buffer + BUFFER_SIZE)){ 
    35e0:	83 5b       	subi	r24, 0xB3	; 179
    35e2:	99 40       	sbci	r25, 0x09	; 9
    35e4:	30 f0       	brcs	.+12     	; 0x35f2 <LDSRcv+0x32>
			lds_buffer_write_ndx = lds_buffer;
    35e6:	83 eb       	ldi	r24, 0xB3	; 179
    35e8:	98 e0       	ldi	r25, 0x08	; 8
    35ea:	90 93 67 05 	sts	0x0567, r25
    35ee:	80 93 66 05 	sts	0x0566, r24
    35f2:	08 95       	ret

000035f4 <error_checker>:
		lds_buffer_read_ndx = lds_buffer;
	}
	return data;
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    35f4:	0f 93       	push	r16
    35f6:	1f 93       	push	r17
    35f8:	cf 93       	push	r28
    35fa:	df 93       	push	r29
    35fc:	ec 01       	movw	r28, r24
    35fe:	8b 01       	movw	r16, r22
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e0       	ldi	r20, 0x00	; 0
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	60 e0       	ldi	r22, 0x00	; 0
    360a:	70 e0       	ldi	r23, 0x00	; 0
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
      chk32 = (chk32 << 1) + chk_data[ndx];
    360c:	22 0f       	add	r18, r18
    360e:	33 1f       	adc	r19, r19
    3610:	44 1f       	adc	r20, r20
    3612:	55 1f       	adc	r21, r21
    3614:	fe 01       	movw	r30, r28
    3616:	e6 0f       	add	r30, r22
    3618:	f7 1f       	adc	r31, r23
    361a:	80 81       	ld	r24, Z
    361c:	91 81       	ldd	r25, Z+1	; 0x01
    361e:	a0 e0       	ldi	r26, 0x00	; 0
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	28 0f       	add	r18, r24
    3624:	39 1f       	adc	r19, r25
    3626:	4a 1f       	adc	r20, r26
    3628:	5b 1f       	adc	r21, r27
    362a:	6e 5f       	subi	r22, 0xFE	; 254
    362c:	7f 4f       	sbci	r23, 0xFF	; 255
	return data;
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
    362e:	64 31       	cpi	r22, 0x14	; 20
    3630:	71 05       	cpc	r23, r1
    3632:	61 f7       	brne	.-40     	; 0x360c <error_checker+0x18>
      chk32 = (chk32 << 1) + chk_data[ndx];
    }
    uint16_t chk16 = (chk32 & 0x7FFF) + (chk32 >> 15);
    3634:	c9 01       	movw	r24, r18
    3636:	9f 77       	andi	r25, 0x7F	; 127
    3638:	6f e0       	ldi	r22, 0x0F	; 15
    363a:	56 95       	lsr	r21
    363c:	47 95       	ror	r20
    363e:	37 95       	ror	r19
    3640:	27 95       	ror	r18
    3642:	6a 95       	dec	r22
    3644:	d1 f7       	brne	.-12     	; 0x363a <error_checker+0x46>
    3646:	82 0f       	add	r24, r18
    3648:	93 1f       	adc	r25, r19
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	9f 77       	andi	r25, 0x7F	; 127
    364e:	80 17       	cp	r24, r16
    3650:	91 07       	cpc	r25, r17
    3652:	09 f4       	brne	.+2      	; 0x3656 <error_checker+0x62>
    3654:	21 e0       	ldi	r18, 0x01	; 1
    chk16 = chk16 & 0x7FFF;
    return (chk16 == checksum);
  }
    3656:	82 2f       	mov	r24, r18
    3658:	df 91       	pop	r29
    365a:	cf 91       	pop	r28
    365c:	1f 91       	pop	r17
    365e:	0f 91       	pop	r16
    3660:	08 95       	ret

00003662 <conv_FrametoDist>:
			f_ndx++;
		}
	}
}

void conv_FrametoDist(const LDS_FRAME ldsf[], uint16_t ranges[]){
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
    3666:	ec 01       	movw	r28, r24
    3668:	20 e0       	ldi	r18, 0x00	; 0
	// ldsf must be of length 90
	// ranges must be of length 360
	uint16_t r_ndx;
	for(uint8_t f_ndx = 0; f_ndx < 90; f_ndx++){
		// Maps frame indicies to range indices
		r_ndx = 4*ldsf[f_ndx].index - 640;
    366a:	e8 81       	ld	r30, Y
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	e0 5a       	subi	r30, 0xA0	; 160
    3670:	f0 40       	sbci	r31, 0x00	; 0
    3672:	ee 0f       	add	r30, r30
    3674:	ff 1f       	adc	r31, r31
    3676:	ee 0f       	add	r30, r30
    3678:	ff 1f       	adc	r31, r31
		ranges[r_ndx]     = (ldsf[f_ndx].distance[0]);
    367a:	df 01       	movw	r26, r30
    367c:	aa 0f       	add	r26, r26
    367e:	bb 1f       	adc	r27, r27
    3680:	a6 0f       	add	r26, r22
    3682:	b7 1f       	adc	r27, r23
    3684:	8b 85       	ldd	r24, Y+11	; 0x0b
    3686:	9c 85       	ldd	r25, Y+12	; 0x0c
    3688:	8d 93       	st	X+, r24
    368a:	9c 93       	st	X, r25
		ranges[r_ndx + 1] = (ldsf[f_ndx].distance[1]);
    368c:	df 01       	movw	r26, r30
    368e:	11 96       	adiw	r26, 0x01	; 1
    3690:	aa 0f       	add	r26, r26
    3692:	bb 1f       	adc	r27, r27
    3694:	a6 0f       	add	r26, r22
    3696:	b7 1f       	adc	r27, r23
    3698:	8d 85       	ldd	r24, Y+13	; 0x0d
    369a:	9e 85       	ldd	r25, Y+14	; 0x0e
    369c:	8d 93       	st	X+, r24
    369e:	9c 93       	st	X, r25
		ranges[r_ndx + 2] = (ldsf[f_ndx].distance[2]);
    36a0:	32 96       	adiw	r30, 0x02	; 2
    36a2:	df 01       	movw	r26, r30
    36a4:	aa 0f       	add	r26, r26
    36a6:	bb 1f       	adc	r27, r27
    36a8:	a6 0f       	add	r26, r22
    36aa:	b7 1f       	adc	r27, r23
    36ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ae:	98 89       	ldd	r25, Y+16	; 0x10
    36b0:	8d 93       	st	X+, r24
    36b2:	9c 93       	st	X, r25
		ranges[r_ndx + 3] = (ldsf[f_ndx].distance[3]);
    36b4:	31 96       	adiw	r30, 0x01	; 1
    36b6:	ee 0f       	add	r30, r30
    36b8:	ff 1f       	adc	r31, r31
    36ba:	e6 0f       	add	r30, r22
    36bc:	f7 1f       	adc	r31, r23
    36be:	89 89       	ldd	r24, Y+17	; 0x11
    36c0:	9a 89       	ldd	r25, Y+18	; 0x12
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	80 83       	st	Z, r24

void conv_FrametoDist(const LDS_FRAME ldsf[], uint16_t ranges[]){
	// ldsf must be of length 90
	// ranges must be of length 360
	uint16_t r_ndx;
	for(uint8_t f_ndx = 0; f_ndx < 90; f_ndx++){
    36c6:	2f 5f       	subi	r18, 0xFF	; 255
    36c8:	6d 96       	adiw	r28, 0x1d	; 29
    36ca:	2a 35       	cpi	r18, 0x5A	; 90
    36cc:	71 f6       	brne	.-100    	; 0x366a <conv_FrametoDist+0x8>
		ranges[r_ndx]     = (ldsf[f_ndx].distance[0]);
		ranges[r_ndx + 1] = (ldsf[f_ndx].distance[1]);
		ranges[r_ndx + 2] = (ldsf[f_ndx].distance[2]);
		ranges[r_ndx + 3] = (ldsf[f_ndx].distance[3]);
	}
}
    36ce:	df 91       	pop	r29
    36d0:	cf 91       	pop	r28
    36d2:	08 95       	ret

000036d4 <print_frame>:
	frame->checksum = (((uint16_t)read_LDS())) + (((uint16_t)read_LDS())<<8);
    
    return error_checker(chk_data, frame->checksum);
}  

void print_frame(LDS_FRAME frame){
    36d4:	ef 92       	push	r14
    36d6:	ff 92       	push	r15
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	df 93       	push	r29
    36de:	cf 93       	push	r28
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	e9 84       	ldd	r14, Y+9	; 0x09
    36e6:	0a 85       	ldd	r16, Y+10	; 0x0a
    36e8:	1b 85       	ldd	r17, Y+11	; 0x0b
	rprintf("Index: ");
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <print_frame+0x18>
    36ec:	0f 92       	push	r0
    36ee:	ff 24       	eor	r15, r15
    36f0:	f3 94       	inc	r15
    36f2:	ad b7       	in	r26, 0x3d	; 61
    36f4:	be b7       	in	r27, 0x3e	; 62
    36f6:	11 96       	adiw	r26, 0x01	; 1
    36f8:	fc 92       	st	X, r15
    36fa:	11 97       	sbiw	r26, 0x01	; 1
    36fc:	88 e5       	ldi	r24, 0x58	; 88
    36fe:	92 e0       	ldi	r25, 0x02	; 2
    3700:	13 96       	adiw	r26, 0x03	; 3
    3702:	9c 93       	st	X, r25
    3704:	8e 93       	st	-X, r24
    3706:	12 97       	sbiw	r26, 0x02	; 2
    3708:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
	rprintfu08(frame.index);
    370c:	0f 90       	pop	r0
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	8e 2d       	mov	r24, r14
    3714:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <rprintfu08>
	rprintf(" Motor Speed: ");
    3718:	00 d0       	rcall	.+0      	; 0x371a <print_frame+0x46>
    371a:	0f 92       	push	r0
    371c:	ed b7       	in	r30, 0x3d	; 61
    371e:	fe b7       	in	r31, 0x3e	; 62
    3720:	f1 82       	std	Z+1, r15	; 0x01
    3722:	89 e4       	ldi	r24, 0x49	; 73
    3724:	92 e0       	ldi	r25, 0x02	; 2
    3726:	93 83       	std	Z+3, r25	; 0x03
    3728:	82 83       	std	Z+2, r24	; 0x02
    372a:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
	rprintfu16(frame.motor_speed);
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	c8 01       	movw	r24, r16
    3736:	0e 94 18 16 	call	0x2c30	; 0x2c30 <rprintfu16>
	rprintf(" Distances: ");
    373a:	00 d0       	rcall	.+0      	; 0x373c <print_frame+0x68>
    373c:	0f 92       	push	r0
    373e:	ad b7       	in	r26, 0x3d	; 61
    3740:	be b7       	in	r27, 0x3e	; 62
    3742:	11 96       	adiw	r26, 0x01	; 1
    3744:	fc 92       	st	X, r15
    3746:	11 97       	sbiw	r26, 0x01	; 1
    3748:	8c e3       	ldi	r24, 0x3C	; 60
    374a:	92 e0       	ldi	r25, 0x02	; 2
    374c:	13 96       	adiw	r26, 0x03	; 3
    374e:	9c 93       	st	X, r25
    3750:	8e 93       	st	-X, r24
    3752:	12 97       	sbiw	r26, 0x02	; 2
    3754:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
	for(uint8_t ndx = 0; ndx < 4; ndx++){
		rprintf("%d ",frame.distance[ndx]);
    3758:	00 d0       	rcall	.+0      	; 0x375a <print_frame+0x86>
    375a:	ed b7       	in	r30, 0x3d	; 61
    375c:	fe b7       	in	r31, 0x3e	; 62
    375e:	31 96       	adiw	r30, 0x01	; 1
    3760:	ad b7       	in	r26, 0x3d	; 61
    3762:	be b7       	in	r27, 0x3e	; 62
    3764:	11 96       	adiw	r26, 0x01	; 1
    3766:	fc 92       	st	X, r15
    3768:	08 e3       	ldi	r16, 0x38	; 56
    376a:	12 e0       	ldi	r17, 0x02	; 2
    376c:	12 83       	std	Z+2, r17	; 0x02
    376e:	01 83       	std	Z+1, r16	; 0x01
    3770:	8c 89       	ldd	r24, Y+20	; 0x14
    3772:	9d 89       	ldd	r25, Y+21	; 0x15
    3774:	94 83       	std	Z+4, r25	; 0x04
    3776:	83 83       	std	Z+3, r24	; 0x03
    3778:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
    377c:	ed b7       	in	r30, 0x3d	; 61
    377e:	fe b7       	in	r31, 0x3e	; 62
    3780:	31 96       	adiw	r30, 0x01	; 1
    3782:	ad b7       	in	r26, 0x3d	; 61
    3784:	be b7       	in	r27, 0x3e	; 62
    3786:	11 96       	adiw	r26, 0x01	; 1
    3788:	fc 92       	st	X, r15
    378a:	12 83       	std	Z+2, r17	; 0x02
    378c:	01 83       	std	Z+1, r16	; 0x01
    378e:	8e 89       	ldd	r24, Y+22	; 0x16
    3790:	9f 89       	ldd	r25, Y+23	; 0x17
    3792:	94 83       	std	Z+4, r25	; 0x04
    3794:	83 83       	std	Z+3, r24	; 0x03
    3796:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
    379a:	ed b7       	in	r30, 0x3d	; 61
    379c:	fe b7       	in	r31, 0x3e	; 62
    379e:	31 96       	adiw	r30, 0x01	; 1
    37a0:	ad b7       	in	r26, 0x3d	; 61
    37a2:	be b7       	in	r27, 0x3e	; 62
    37a4:	11 96       	adiw	r26, 0x01	; 1
    37a6:	fc 92       	st	X, r15
    37a8:	12 83       	std	Z+2, r17	; 0x02
    37aa:	01 83       	std	Z+1, r16	; 0x01
    37ac:	88 8d       	ldd	r24, Y+24	; 0x18
    37ae:	99 8d       	ldd	r25, Y+25	; 0x19
    37b0:	94 83       	std	Z+4, r25	; 0x04
    37b2:	83 83       	std	Z+3, r24	; 0x03
    37b4:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
    37b8:	ed b7       	in	r30, 0x3d	; 61
    37ba:	fe b7       	in	r31, 0x3e	; 62
    37bc:	31 96       	adiw	r30, 0x01	; 1
    37be:	ad b7       	in	r26, 0x3d	; 61
    37c0:	be b7       	in	r27, 0x3e	; 62
    37c2:	11 96       	adiw	r26, 0x01	; 1
    37c4:	fc 92       	st	X, r15
    37c6:	12 83       	std	Z+2, r17	; 0x02
    37c8:	01 83       	std	Z+1, r16	; 0x01
    37ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37ce:	94 83       	std	Z+4, r25	; 0x04
    37d0:	83 83       	std	Z+3, r24	; 0x03
    37d2:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rprintf1RamRom>
	}
	rprintfCRLF();
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <rprintfCRLF>
}
    37e4:	cf 91       	pop	r28
    37e6:	df 91       	pop	r29
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	ff 90       	pop	r15
    37ee:	ef 90       	pop	r14
    37f0:	08 95       	ret

000037f2 <read_LDS>:
			lds_buffer_write_ndx = lds_buffer;
		}
	}
}

uint8_t read_LDS(){
    37f2:	04 c0       	rjmp	.+8      	; 0x37fc <read_LDS+0xa>
	while(lds_buffer_read_ndx == lds_buffer_write_ndx){ delay_us(10); };
    37f4:	8a e0       	ldi	r24, 0x0A	; 10
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <delay_us>
    37fc:	e0 91 68 05 	lds	r30, 0x0568
    3800:	f0 91 69 05 	lds	r31, 0x0569
    3804:	80 91 66 05 	lds	r24, 0x0566
    3808:	90 91 67 05 	lds	r25, 0x0567
    380c:	e8 17       	cp	r30, r24
    380e:	f9 07       	cpc	r31, r25
    3810:	89 f3       	breq	.-30     	; 0x37f4 <read_LDS+0x2>
	uint8_t data = *lds_buffer_read_ndx;
    3812:	21 91       	ld	r18, Z+
	lds_buffer_read_ndx++;
    3814:	f0 93 69 05 	sts	0x0569, r31
    3818:	e0 93 68 05 	sts	0x0568, r30
	if(lds_buffer_read_ndx >= (lds_buffer + BUFFER_SIZE)){ 
    381c:	e3 5b       	subi	r30, 0xB3	; 179
    381e:	f9 40       	sbci	r31, 0x09	; 9
    3820:	30 f0       	brcs	.+12     	; 0x382e <read_LDS+0x3c>
		lds_buffer_read_ndx = lds_buffer;
    3822:	83 eb       	ldi	r24, 0xB3	; 179
    3824:	98 e0       	ldi	r25, 0x08	; 8
    3826:	90 93 69 05 	sts	0x0569, r25
    382a:	80 93 68 05 	sts	0x0568, r24
	}
	return data;
}
    382e:	82 2f       	mov	r24, r18
    3830:	08 95       	ret

00003832 <parse_frame>:
    uint16_t chk16 = (chk32 & 0x7FFF) + (chk32 >> 15);
    chk16 = chk16 & 0x7FFF;
    return (chk16 == checksum);
  }

uint8_t parse_frame(LDS_FRAME *frame){
    3832:	2f 92       	push	r2
    3834:	3f 92       	push	r3
    3836:	4f 92       	push	r4
    3838:	5f 92       	push	r5
    383a:	6f 92       	push	r6
    383c:	7f 92       	push	r7
    383e:	8f 92       	push	r8
    3840:	9f 92       	push	r9
    3842:	af 92       	push	r10
    3844:	bf 92       	push	r11
    3846:	cf 92       	push	r12
    3848:	df 92       	push	r13
    384a:	ef 92       	push	r14
    384c:	ff 92       	push	r15
    384e:	0f 93       	push	r16
    3850:	1f 93       	push	r17
    3852:	df 93       	push	r29
    3854:	cf 93       	push	r28
    3856:	cd b7       	in	r28, 0x3d	; 61
    3858:	de b7       	in	r29, 0x3e	; 62
    385a:	6a 97       	sbiw	r28, 0x1a	; 26
    385c:	0f b6       	in	r0, 0x3f	; 63
    385e:	f8 94       	cli
    3860:	de bf       	out	0x3e, r29	; 62
    3862:	0f be       	out	0x3f, r0	; 63
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	2c 01       	movw	r4, r24
    // Array for use by the error checker
    uint16_t chk_data[10];

    // Read start byte
    uint8_t start_byte = read_LDS();
    3868:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <read_LDS>
    // If the byte read in is not the start byte (0xFA), then this is not the beginning of a frame
    if(start_byte != 0xFA) return FALSE; 
    386c:	8a 3f       	cpi	r24, 0xFA	; 250
    386e:	09 f0       	breq	.+2      	; 0x3872 <parse_frame+0x40>
    3870:	ac c0       	rjmp	.+344    	; 0x39ca <parse_frame+0x198>

    // Read index
	frame->index = read_LDS();
    3872:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <read_LDS>
    3876:	28 2f       	mov	r18, r24
    3878:	f2 01       	movw	r30, r4
    387a:	80 83       	st	Z, r24
    // If the byte proceeding the start byte does not look like an index, then is is not the beginning of a frame
    if((frame->index < 0xA0)||(frame->index > 0xF9)) return FALSE;
    387c:	80 5a       	subi	r24, 0xA0	; 160
    387e:	8a 35       	cpi	r24, 0x5A	; 90
    3880:	08 f0       	brcs	.+2      	; 0x3884 <parse_frame+0x52>
    3882:	a3 c0       	rjmp	.+326    	; 0x39ca <parse_frame+0x198>

    // Add these bytes for the error checker
    chk_data[0] = (frame->index << 8) + start_byte;
    3884:	92 2f       	mov	r25, r18
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	86 50       	subi	r24, 0x06	; 6
    388a:	9f 4f       	sbci	r25, 0xFF	; 255
    388c:	9e 83       	std	Y+6, r25	; 0x06
    388e:	8d 83       	std	Y+5, r24	; 0x05
    //   MSB                                                               LSB
    //   15  14  13  12  11  10  9   8   7   6    5    4    3    2    1    0
    //   512 256 128 64  32  16  8   4   2   1 .  1/2  1/4  1/8  1/16 1/32 1/64
    //
	
	frame->motor_speed = ((uint16_t)read_LDS()) + ((uint16_t)read_LDS()<<8);
    3890:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <read_LDS>
    3894:	18 2f       	mov	r17, r24
    3896:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <read_LDS>
    389a:	38 2f       	mov	r19, r24
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	21 0f       	add	r18, r17
    38a0:	31 1d       	adc	r19, r1
    38a2:	f2 01       	movw	r30, r4
    38a4:	32 83       	std	Z+2, r19	; 0x02
    38a6:	21 83       	std	Z+1, r18	; 0x01
    // Add these bytes for the error checker
    chk_data[1] = frame->motor_speed;
    38a8:	38 87       	std	Y+8, r19	; 0x08
    38aa:	2f 83       	std	Y+7, r18	; 0x07
    38ac:	32 01       	movw	r6, r4
    38ae:	09 e0       	ldi	r16, 0x09	; 9
    38b0:	80 2e       	mov	r8, r16
    38b2:	91 2c       	mov	r9, r1
    38b4:	8c 0e       	add	r8, r28
    38b6:	9d 1e       	adc	r9, r29
    38b8:	62 01       	movw	r12, r4
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
      // Read in the four distance and intensity bytes
      uint8_t di_bytes[4];
	  for(uint8_t d_ndx = 0; d_ndx < 4; d_ndx++){
    38ba:	15 e0       	ldi	r17, 0x05	; 5
    38bc:	21 2e       	mov	r2, r17
    38be:	31 2c       	mov	r3, r1
    38c0:	2c 0e       	add	r2, r28
    38c2:	3d 1e       	adc	r3, r29
    // Add these bytes for the error checker
    chk_data[1] = frame->motor_speed;
	
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
    38c4:	ae 01       	movw	r20, r28
    38c6:	47 5e       	subi	r20, 0xE7	; 231
    38c8:	5f 4f       	sbci	r21, 0xFF	; 255
    38ca:	5a 8f       	std	Y+26, r21	; 0x1a
    38cc:	49 8f       	std	Y+25, r20	; 0x19
    38ce:	46 c0       	rjmp	.+140    	; 0x395c <parse_frame+0x12a>
      // Read in the four distance and intensity bytes
      uint8_t di_bytes[4];
	  for(uint8_t d_ndx = 0; d_ndx < 4; d_ndx++){
	  	di_bytes[d_ndx] = read_LDS();
    38d0:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <read_LDS>
    38d4:	f8 01       	movw	r30, r16
    38d6:	81 93       	st	Z+, r24
    38d8:	8f 01       	movw	r16, r30
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
      // Read in the four distance and intensity bytes
      uint8_t di_bytes[4];
	  for(uint8_t d_ndx = 0; d_ndx < 4; d_ndx++){
    38da:	e2 15       	cp	r30, r2
    38dc:	f3 05       	cpc	r31, r3
    38de:	c1 f7       	brne	.-16     	; 0x38d0 <parse_frame+0x9e>
	  	di_bytes[d_ndx] = read_LDS();
      }
      // The invalid and strength flags are the MSB and adjacent bit of the second (indexwise) distance byte
      frame->invalid[itr] = (uint8_t)(di_bytes[1] & 0x80);
    38e0:	4a 81       	ldd	r20, Y+2	; 0x02
    38e2:	94 2f       	mov	r25, r20
    38e4:	90 78       	andi	r25, 0x80	; 128
    38e6:	f3 01       	movw	r30, r6
    38e8:	93 83       	std	Z+3, r25	; 0x03
      frame->strength_warning[itr] = (uint8_t)(di_bytes[1] & 0x40);
    38ea:	84 2f       	mov	r24, r20
    38ec:	80 74       	andi	r24, 0x40	; 64
    38ee:	87 83       	std	Z+7, r24	; 0x07

      // Distance and intensity bytes are read in little endian, and therefore need to be switched and concatenated
      // The second distance byte (indexwise) is masked to eliminate the invalid and strength flags from the measurement
      if(frame->invalid[itr]){ // If this measurement is invalid, set it to zero
    38f0:	99 23       	and	r25, r25
    38f2:	21 f0       	breq	.+8      	; 0x38fc <parse_frame+0xca>
		frame->distance[itr]  = 0;
    38f4:	f6 01       	movw	r30, r12
    38f6:	14 86       	std	Z+12, r1	; 0x0c
    38f8:	13 86       	std	Z+11, r1	; 0x0b
    38fa:	0c c0       	rjmp	.+24     	; 0x3914 <parse_frame+0xe2>
      }
      else{
		frame->distance[itr]  = ((di_bytes[1] & 0x3F) << 8) + di_bytes[0];
    38fc:	84 2f       	mov	r24, r20
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	8f 73       	andi	r24, 0x3F	; 63
    3902:	90 70       	andi	r25, 0x00	; 0
    3904:	98 2f       	mov	r25, r24
    3906:	88 27       	eor	r24, r24
    3908:	29 81       	ldd	r18, Y+1	; 0x01
    390a:	82 0f       	add	r24, r18
    390c:	91 1d       	adc	r25, r1
    390e:	f6 01       	movw	r30, r12
    3910:	94 87       	std	Z+12, r25	; 0x0c
    3912:	83 87       	std	Z+11, r24	; 0x0b
      }

      frame->intensity[itr] = (di_bytes[3] << 8) + di_bytes[2];
    3914:	bc 80       	ldd	r11, Y+4	; 0x04
    3916:	aa 24       	eor	r10, r10
    3918:	8b 81       	ldd	r24, Y+3	; 0x03
    391a:	95 01       	movw	r18, r10
    391c:	28 0f       	add	r18, r24
    391e:	31 1d       	adc	r19, r1
    3920:	f6 01       	movw	r30, r12
    3922:	34 8b       	std	Z+20, r19	; 0x14
    3924:	23 8b       	std	Z+19, r18	; 0x13
      
      // Add these bytes for the error checker
      chk_data[2*itr + 2] = (di_bytes[1] << 8) + di_bytes[0];
    3926:	f4 2e       	mov	r15, r20
    3928:	ee 24       	eor	r14, r14
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	a7 01       	movw	r20, r14
    392e:	48 0f       	add	r20, r24
    3930:	51 1d       	adc	r21, r1
    3932:	f4 01       	movw	r30, r8
    3934:	51 83       	std	Z+1, r21	; 0x01
    3936:	40 83       	st	Z, r20
      chk_data[2*itr + 3] = (di_bytes[3] << 8) + di_bytes[2];
    3938:	33 83       	std	Z+3, r19	; 0x03
    393a:	22 83       	std	Z+2, r18	; 0x02
    393c:	42 e0       	ldi	r20, 0x02	; 2
    393e:	50 e0       	ldi	r21, 0x00	; 0
    3940:	c4 0e       	add	r12, r20
    3942:	d5 1e       	adc	r13, r21
    3944:	84 e0       	ldi	r24, 0x04	; 4
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	88 0e       	add	r8, r24
    394a:	99 1e       	adc	r9, r25
    394c:	08 94       	sec
    394e:	61 1c       	adc	r6, r1
    3950:	71 1c       	adc	r7, r1
    // Add these bytes for the error checker
    chk_data[1] = frame->motor_speed;
	
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
    3952:	e9 8d       	ldd	r30, Y+25	; 0x19
    3954:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3956:	8e 16       	cp	r8, r30
    3958:	9f 06       	cpc	r9, r31
    395a:	21 f0       	breq	.+8      	; 0x3964 <parse_frame+0x132>
    395c:	8e 01       	movw	r16, r28
    395e:	0f 5f       	subi	r16, 0xFF	; 255
    3960:	1f 4f       	sbci	r17, 0xFF	; 255
    3962:	b6 cf       	rjmp	.-148    	; 0x38d0 <parse_frame+0x9e>
      chk_data[2*itr + 3] = (di_bytes[3] << 8) + di_bytes[2];
    }

    // Read checksum
    // Checksum is given in little endian, but because it is read into a uint16_t, it is ordered correctly
	frame->checksum = (((uint16_t)read_LDS())) + (((uint16_t)read_LDS())<<8);
    3964:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <read_LDS>
    3968:	18 2f       	mov	r17, r24
    396a:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <read_LDS>
    396e:	38 2f       	mov	r19, r24
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	b9 01       	movw	r22, r18
    3974:	61 0f       	add	r22, r17
    3976:	71 1d       	adc	r23, r1
    3978:	f2 01       	movw	r30, r4
    397a:	74 8f       	std	Z+28, r23	; 0x1c
    397c:	63 8f       	std	Z+27, r22	; 0x1b
    397e:	f1 01       	movw	r30, r2
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
      chk32 = (chk32 << 1) + chk_data[ndx];
    3988:	22 0f       	add	r18, r18
    398a:	33 1f       	adc	r19, r19
    398c:	44 1f       	adc	r20, r20
    398e:	55 1f       	adc	r21, r21
    3990:	81 91       	ld	r24, Z+
    3992:	91 91       	ld	r25, Z+
    3994:	a0 e0       	ldi	r26, 0x00	; 0
    3996:	b0 e0       	ldi	r27, 0x00	; 0
    3998:	28 0f       	add	r18, r24
    399a:	39 1f       	adc	r19, r25
    399c:	4a 1f       	adc	r20, r26
    399e:	5b 1f       	adc	r21, r27
	return data;
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
    39a0:	e8 15       	cp	r30, r8
    39a2:	f9 05       	cpc	r31, r9
    39a4:	89 f7       	brne	.-30     	; 0x3988 <parse_frame+0x156>
      chk32 = (chk32 << 1) + chk_data[ndx];
    }
    uint16_t chk16 = (chk32 & 0x7FFF) + (chk32 >> 15);
    39a6:	c9 01       	movw	r24, r18
    39a8:	9f 77       	andi	r25, 0x7F	; 127
    39aa:	ef e0       	ldi	r30, 0x0F	; 15
    39ac:	56 95       	lsr	r21
    39ae:	47 95       	ror	r20
    39b0:	37 95       	ror	r19
    39b2:	27 95       	ror	r18
    39b4:	ea 95       	dec	r30
    39b6:	d1 f7       	brne	.-12     	; 0x39ac <parse_frame+0x17a>
    39b8:	82 0f       	add	r24, r18
    39ba:	93 1f       	adc	r25, r19
    chk16 = chk16 & 0x7FFF;
    return (chk16 == checksum);
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	9f 77       	andi	r25, 0x7F	; 127
    39c0:	86 17       	cp	r24, r22
    39c2:	97 07       	cpc	r25, r23
    39c4:	19 f4       	brne	.+6      	; 0x39cc <parse_frame+0x19a>
    39c6:	21 e0       	ldi	r18, 0x01	; 1
    39c8:	01 c0       	rjmp	.+2      	; 0x39cc <parse_frame+0x19a>

    // Read checksum
    // Checksum is given in little endian, but because it is read into a uint16_t, it is ordered correctly
	frame->checksum = (((uint16_t)read_LDS())) + (((uint16_t)read_LDS())<<8);
    
    return error_checker(chk_data, frame->checksum);
    39ca:	20 e0       	ldi	r18, 0x00	; 0
}  
    39cc:	82 2f       	mov	r24, r18
    39ce:	6a 96       	adiw	r28, 0x1a	; 26
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	ff 90       	pop	r15
    39e4:	ef 90       	pop	r14
    39e6:	df 90       	pop	r13
    39e8:	cf 90       	pop	r12
    39ea:	bf 90       	pop	r11
    39ec:	af 90       	pop	r10
    39ee:	9f 90       	pop	r9
    39f0:	8f 90       	pop	r8
    39f2:	7f 90       	pop	r7
    39f4:	6f 90       	pop	r6
    39f6:	5f 90       	pop	r5
    39f8:	4f 90       	pop	r4
    39fa:	3f 90       	pop	r3
    39fc:	2f 90       	pop	r2
    39fe:	08 95       	ret

00003a00 <grab_frames>:
		rprintf("%d ",frame.distance[ndx]);
	}
	rprintfCRLF();
}

void grab_frames(const LDS_FRAME *frame, LDS_FRAME ldsf[]){
    3a00:	af 92       	push	r10
    3a02:	bf 92       	push	r11
    3a04:	cf 92       	push	r12
    3a06:	df 92       	push	r13
    3a08:	ef 92       	push	r14
    3a0a:	ff 92       	push	r15
    3a0c:	1f 93       	push	r17
    3a0e:	df 93       	push	r29
    3a10:	cf 93       	push	r28
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	6d 97       	sbiw	r28, 0x1d	; 29
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	7b 01       	movw	r14, r22
	LDS_FRAME t_frame;
	uint8_t f_ndx = 1;
	ldsf[0] = *frame;
    3a24:	db 01       	movw	r26, r22
    3a26:	fc 01       	movw	r30, r24
    3a28:	8d e1       	ldi	r24, 0x1D	; 29
    3a2a:	01 90       	ld	r0, Z+
    3a2c:	0d 92       	st	X+, r0
    3a2e:	81 50       	subi	r24, 0x01	; 1
    3a30:	e1 f7       	brne	.-8      	; 0x3a2a <grab_frames+0x2a>
    3a32:	11 e0       	ldi	r17, 0x01	; 1

	while(f_ndx < 90){
		if(parse_frame(&t_frame)){
    3a34:	6e 01       	movw	r12, r28
    3a36:	08 94       	sec
    3a38:	c1 1c       	adc	r12, r1
    3a3a:	d1 1c       	adc	r13, r1
			ldsf[f_ndx] = t_frame;
    3a3c:	8d e1       	ldi	r24, 0x1D	; 29
    3a3e:	a8 2e       	mov	r10, r24
    3a40:	b1 2c       	mov	r11, r1
	LDS_FRAME t_frame;
	uint8_t f_ndx = 1;
	ldsf[0] = *frame;

	while(f_ndx < 90){
		if(parse_frame(&t_frame)){
    3a42:	c6 01       	movw	r24, r12
    3a44:	0e 94 19 1c 	call	0x3832	; 0x3832 <parse_frame>
    3a48:	88 23       	and	r24, r24
    3a4a:	d9 f3       	breq	.-10     	; 0x3a42 <grab_frames+0x42>
			ldsf[f_ndx] = t_frame;
    3a4c:	81 2f       	mov	r24, r17
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	8a 9d       	mul	r24, r10
    3a52:	f0 01       	movw	r30, r0
    3a54:	8b 9d       	mul	r24, r11
    3a56:	f0 0d       	add	r31, r0
    3a58:	9a 9d       	mul	r25, r10
    3a5a:	f0 0d       	add	r31, r0
    3a5c:	11 24       	eor	r1, r1
    3a5e:	ee 0d       	add	r30, r14
    3a60:	ff 1d       	adc	r31, r15
    3a62:	d6 01       	movw	r26, r12
    3a64:	8d e1       	ldi	r24, 0x1D	; 29
    3a66:	0d 90       	ld	r0, X+
    3a68:	01 92       	st	Z+, r0
    3a6a:	81 50       	subi	r24, 0x01	; 1
    3a6c:	e1 f7       	brne	.-8      	; 0x3a66 <grab_frames+0x66>
			f_ndx++;
    3a6e:	1f 5f       	subi	r17, 0xFF	; 255
void grab_frames(const LDS_FRAME *frame, LDS_FRAME ldsf[]){
	LDS_FRAME t_frame;
	uint8_t f_ndx = 1;
	ldsf[0] = *frame;

	while(f_ndx < 90){
    3a70:	1a 35       	cpi	r17, 0x5A	; 90
    3a72:	38 f3       	brcs	.-50     	; 0x3a42 <grab_frames+0x42>
		if(parse_frame(&t_frame)){
			ldsf[f_ndx] = t_frame;
			f_ndx++;
		}
	}
}
    3a74:	6d 96       	adiw	r28, 0x1d	; 29
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	f8 94       	cli
    3a7a:	de bf       	out	0x3e, r29	; 62
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	cd bf       	out	0x3d, r28	; 61
    3a80:	cf 91       	pop	r28
    3a82:	df 91       	pop	r29
    3a84:	1f 91       	pop	r17
    3a86:	ff 90       	pop	r15
    3a88:	ef 90       	pop	r14
    3a8a:	df 90       	pop	r13
    3a8c:	cf 90       	pop	r12
    3a8e:	bf 90       	pop	r11
    3a90:	af 90       	pop	r10
    3a92:	08 95       	ret

00003a94 <get_range_scan>:
		ranges[r_ndx + 2] = (ldsf[f_ndx].distance[2]);
		ranges[r_ndx + 3] = (ldsf[f_ndx].distance[3]);
	}
}

void get_range_scan(uint16_t ranges[]){
    3a94:	cf 92       	push	r12
    3a96:	df 92       	push	r13
    3a98:	ef 92       	push	r14
    3a9a:	ff 92       	push	r15
    3a9c:	0f 93       	push	r16
    3a9e:	1f 93       	push	r17
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	cf 54       	subi	r28, 0x4F	; 79
    3aaa:	da 40       	sbci	r29, 0x0A	; 10
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	f8 94       	cli
    3ab0:	de bf       	out	0x3e, r29	; 62
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	cd bf       	out	0x3d, r28	; 61
    3ab6:	6c 01       	movw	r12, r24
	uint8_t first_frame = UNSET;
	LDS_FRAME frame;
	LDS_FRAME ldsf[90];
	// Grab frames
	while(!first_frame){
		if(parse_frame(&frame)){
    3ab8:	7e 01       	movw	r14, r28
    3aba:	08 94       	sec
    3abc:	e1 1c       	adc	r14, r1
    3abe:	f1 1c       	adc	r15, r1
    3ac0:	c7 01       	movw	r24, r14
    3ac2:	0e 94 19 1c 	call	0x3832	; 0x3832 <parse_frame>
    3ac6:	88 23       	and	r24, r24
    3ac8:	d9 f3       	breq	.-10     	; 0x3ac0 <get_range_scan+0x2c>
			//rprintf("Got frame.\n");
			// If you get the first frame, start reading into the frame buffer
			if(frame.index == 0xA0){
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	80 3a       	cpi	r24, 0xA0	; 160
    3ace:	c1 f7       	brne	.-16     	; 0x3ac0 <get_range_scan+0x2c>
				first_frame = SET;
				grab_frames(&frame,ldsf);
    3ad0:	8e 01       	movw	r16, r28
    3ad2:	02 5e       	subi	r16, 0xE2	; 226
    3ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad6:	c7 01       	movw	r24, r14
    3ad8:	b8 01       	movw	r22, r16
    3ada:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <grab_frames>
				//rprintf("Frames grabbed.\n");
				// Convert frames into distances
				conv_FrametoDist(ldsf,ranges);
    3ade:	c8 01       	movw	r24, r16
    3ae0:	b6 01       	movw	r22, r12
    3ae2:	0e 94 31 1b 	call	0x3662	; 0x3662 <conv_FrametoDist>
				rprintf("\nScan end\n\n");
				*/
			}
		}
	}
}
    3ae6:	c1 5b       	subi	r28, 0xB1	; 177
    3ae8:	d5 4f       	sbci	r29, 0xF5	; 245
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	0f be       	out	0x3f, r0	; 63
    3af2:	cd bf       	out	0x3d, r28	; 61
    3af4:	cf 91       	pop	r28
    3af6:	df 91       	pop	r29
    3af8:	1f 91       	pop	r17
    3afa:	0f 91       	pop	r16
    3afc:	ff 90       	pop	r15
    3afe:	ef 90       	pop	r14
    3b00:	df 90       	pop	r13
    3b02:	cf 90       	pop	r12
    3b04:	08 95       	ret

00003b06 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    3b06:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    3b08:	8f b7       	in	r24, 0x3f	; 63
    3b0a:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    3b0c:	71 83       	std	Z+1, r23	; 0x01
    3b0e:	60 83       	st	Z, r22
	buffer->size = size;
    3b10:	53 83       	std	Z+3, r21	; 0x03
    3b12:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    3b14:	17 82       	std	Z+7, r1	; 0x07
    3b16:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    3b18:	15 82       	std	Z+5, r1	; 0x05
    3b1a:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    3b1c:	8f bf       	out	0x3f, r24	; 63
}
    3b1e:	08 95       	ret

00003b20 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    3b20:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    3b22:	4f b7       	in	r20, 0x3f	; 63
    3b24:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    3b26:	14 96       	adiw	r26, 0x04	; 4
    3b28:	8d 91       	ld	r24, X+
    3b2a:	9c 91       	ld	r25, X
    3b2c:	15 97       	sbiw	r26, 0x05	; 5
    3b2e:	89 2b       	or	r24, r25
    3b30:	11 f4       	brne	.+4      	; 0x3b36 <bufferGetFromFront+0x16>
    3b32:	e0 e0       	ldi	r30, 0x00	; 0
    3b34:	25 c0       	rjmp	.+74     	; 0x3b80 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    3b36:	16 96       	adiw	r26, 0x06	; 6
    3b38:	8d 91       	ld	r24, X+
    3b3a:	9c 91       	ld	r25, X
    3b3c:	17 97       	sbiw	r26, 0x07	; 7
    3b3e:	ed 91       	ld	r30, X+
    3b40:	fc 91       	ld	r31, X
    3b42:	11 97       	sbiw	r26, 0x01	; 1
    3b44:	e8 0f       	add	r30, r24
    3b46:	f9 1f       	adc	r31, r25
    3b48:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    3b4a:	01 96       	adiw	r24, 0x01	; 1
    3b4c:	17 96       	adiw	r26, 0x07	; 7
    3b4e:	9c 93       	st	X, r25
    3b50:	8e 93       	st	-X, r24
    3b52:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    3b54:	12 96       	adiw	r26, 0x02	; 2
    3b56:	2d 91       	ld	r18, X+
    3b58:	3c 91       	ld	r19, X
    3b5a:	13 97       	sbiw	r26, 0x03	; 3
    3b5c:	82 17       	cp	r24, r18
    3b5e:	93 07       	cpc	r25, r19
    3b60:	30 f0       	brcs	.+12     	; 0x3b6e <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    3b62:	82 1b       	sub	r24, r18
    3b64:	93 0b       	sbc	r25, r19
    3b66:	17 96       	adiw	r26, 0x07	; 7
    3b68:	9c 93       	st	X, r25
    3b6a:	8e 93       	st	-X, r24
    3b6c:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    3b6e:	14 96       	adiw	r26, 0x04	; 4
    3b70:	8d 91       	ld	r24, X+
    3b72:	9c 91       	ld	r25, X
    3b74:	15 97       	sbiw	r26, 0x05	; 5
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	15 96       	adiw	r26, 0x05	; 5
    3b7a:	9c 93       	st	X, r25
    3b7c:	8e 93       	st	-X, r24
    3b7e:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    3b80:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    3b82:	8e 2f       	mov	r24, r30
    3b84:	08 95       	ret

00003b86 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    3b86:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    3b88:	4f b7       	in	r20, 0x3f	; 63
    3b8a:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    3b8c:	84 81       	ldd	r24, Z+4	; 0x04
    3b8e:	95 81       	ldd	r25, Z+5	; 0x05
    3b90:	68 17       	cp	r22, r24
    3b92:	79 07       	cpc	r23, r25
    3b94:	b0 f4       	brcc	.+44     	; 0x3bc2 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    3b96:	86 81       	ldd	r24, Z+6	; 0x06
    3b98:	97 81       	ldd	r25, Z+7	; 0x07
    3b9a:	86 0f       	add	r24, r22
    3b9c:	97 1f       	adc	r25, r23
    3b9e:	97 83       	std	Z+7, r25	; 0x07
    3ba0:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    3ba2:	22 81       	ldd	r18, Z+2	; 0x02
    3ba4:	33 81       	ldd	r19, Z+3	; 0x03
    3ba6:	82 17       	cp	r24, r18
    3ba8:	93 07       	cpc	r25, r19
    3baa:	20 f0       	brcs	.+8      	; 0x3bb4 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    3bac:	82 1b       	sub	r24, r18
    3bae:	93 0b       	sbc	r25, r19
    3bb0:	97 83       	std	Z+7, r25	; 0x07
    3bb2:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    3bb4:	84 81       	ldd	r24, Z+4	; 0x04
    3bb6:	95 81       	ldd	r25, Z+5	; 0x05
    3bb8:	86 1b       	sub	r24, r22
    3bba:	97 0b       	sbc	r25, r23
    3bbc:	95 83       	std	Z+5, r25	; 0x05
    3bbe:	84 83       	std	Z+4, r24	; 0x04
    3bc0:	02 c0       	rjmp	.+4      	; 0x3bc6 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    3bc2:	15 82       	std	Z+5, r1	; 0x05
    3bc4:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    3bc6:	4f bf       	out	0x3f, r20	; 63
}
    3bc8:	08 95       	ret

00003bca <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    3bca:	fc 01       	movw	r30, r24
    3bcc:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    3bce:	2f b7       	in	r18, 0x3f	; 63
    3bd0:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    3bd2:	2f bf       	out	0x3f, r18	; 63
    3bd4:	26 81       	ldd	r18, Z+6	; 0x06
    3bd6:	37 81       	ldd	r19, Z+7	; 0x07
    3bd8:	62 81       	ldd	r22, Z+2	; 0x02
    3bda:	73 81       	ldd	r23, Z+3	; 0x03
    3bdc:	82 0f       	add	r24, r18
    3bde:	93 1f       	adc	r25, r19
    3be0:	0e 94 0b 22 	call	0x4416	; 0x4416 <__udivmodhi4>
    3be4:	01 90       	ld	r0, Z+
    3be6:	f0 81       	ld	r31, Z
    3be8:	e0 2d       	mov	r30, r0
    3bea:	e8 0f       	add	r30, r24
    3bec:	f9 1f       	adc	r31, r25
	return data;
}
    3bee:	80 81       	ld	r24, Z
    3bf0:	08 95       	ret

00003bf2 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    3bf2:	1f 93       	push	r17
    3bf4:	cf 93       	push	r28
    3bf6:	df 93       	push	r29
    3bf8:	ec 01       	movw	r28, r24
    3bfa:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    3bfc:	4f b7       	in	r20, 0x3f	; 63
    3bfe:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    3c00:	2c 81       	ldd	r18, Y+4	; 0x04
    3c02:	3d 81       	ldd	r19, Y+5	; 0x05
    3c04:	6a 81       	ldd	r22, Y+2	; 0x02
    3c06:	7b 81       	ldd	r23, Y+3	; 0x03
    3c08:	26 17       	cp	r18, r22
    3c0a:	37 07       	cpc	r19, r23
    3c0c:	98 f4       	brcc	.+38     	; 0x3c34 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    3c0e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c10:	9f 81       	ldd	r25, Y+7	; 0x07
    3c12:	82 0f       	add	r24, r18
    3c14:	93 1f       	adc	r25, r19
    3c16:	0e 94 0b 22 	call	0x4416	; 0x4416 <__udivmodhi4>
    3c1a:	e8 81       	ld	r30, Y
    3c1c:	f9 81       	ldd	r31, Y+1	; 0x01
    3c1e:	e8 0f       	add	r30, r24
    3c20:	f9 1f       	adc	r31, r25
    3c22:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    3c24:	8c 81       	ldd	r24, Y+4	; 0x04
    3c26:	9d 81       	ldd	r25, Y+5	; 0x05
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	9d 83       	std	Y+5, r25	; 0x05
    3c2c:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    3c2e:	4f bf       	out	0x3f, r20	; 63
    3c30:	8f ef       	ldi	r24, 0xFF	; 255
    3c32:	02 c0       	rjmp	.+4      	; 0x3c38 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    3c34:	4f bf       	out	0x3f, r20	; 63
    3c36:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    3c38:	df 91       	pop	r29
    3c3a:	cf 91       	pop	r28
    3c3c:	1f 91       	pop	r17
    3c3e:	08 95       	ret

00003c40 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    3c40:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    3c42:	8f b7       	in	r24, 0x3f	; 63
    3c44:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    3c46:	8f bf       	out	0x3f, r24	; 63
    3c48:	22 81       	ldd	r18, Z+2	; 0x02
    3c4a:	33 81       	ldd	r19, Z+3	; 0x03
    3c4c:	84 81       	ldd	r24, Z+4	; 0x04
    3c4e:	95 81       	ldd	r25, Z+5	; 0x05
    3c50:	28 1b       	sub	r18, r24
    3c52:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    3c54:	c9 01       	movw	r24, r18
    3c56:	08 95       	ret

00003c58 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    3c58:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    3c5a:	8f b7       	in	r24, 0x3f	; 63
    3c5c:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    3c5e:	15 82       	std	Z+5, r1	; 0x05
    3c60:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    3c62:	8f bf       	out	0x3f, r24	; 63
}
    3c64:	08 95       	ret

00003c66 <exit>:
    3c66:	f8 94       	cli
    3c68:	0c 94 6f 22 	jmp	0x44de	; 0x44de <_exit>

00003c6c <__subsf3>:
    3c6c:	50 58       	subi	r21, 0x80	; 128

00003c6e <__addsf3>:
    3c6e:	bb 27       	eor	r27, r27
    3c70:	aa 27       	eor	r26, r26
    3c72:	0e d0       	rcall	.+28     	; 0x3c90 <__addsf3x>
    3c74:	70 c1       	rjmp	.+736    	; 0x3f56 <__fp_round>
    3c76:	61 d1       	rcall	.+706    	; 0x3f3a <__fp_pscA>
    3c78:	30 f0       	brcs	.+12     	; 0x3c86 <__addsf3+0x18>
    3c7a:	66 d1       	rcall	.+716    	; 0x3f48 <__fp_pscB>
    3c7c:	20 f0       	brcs	.+8      	; 0x3c86 <__addsf3+0x18>
    3c7e:	31 f4       	brne	.+12     	; 0x3c8c <__addsf3+0x1e>
    3c80:	9f 3f       	cpi	r25, 0xFF	; 255
    3c82:	11 f4       	brne	.+4      	; 0x3c88 <__addsf3+0x1a>
    3c84:	1e f4       	brtc	.+6      	; 0x3c8c <__addsf3+0x1e>
    3c86:	56 c1       	rjmp	.+684    	; 0x3f34 <__fp_nan>
    3c88:	0e f4       	brtc	.+2      	; 0x3c8c <__addsf3+0x1e>
    3c8a:	e0 95       	com	r30
    3c8c:	e7 fb       	bst	r30, 7
    3c8e:	4c c1       	rjmp	.+664    	; 0x3f28 <__fp_inf>

00003c90 <__addsf3x>:
    3c90:	e9 2f       	mov	r30, r25
    3c92:	72 d1       	rcall	.+740    	; 0x3f78 <__fp_split3>
    3c94:	80 f3       	brcs	.-32     	; 0x3c76 <__addsf3+0x8>
    3c96:	ba 17       	cp	r27, r26
    3c98:	62 07       	cpc	r22, r18
    3c9a:	73 07       	cpc	r23, r19
    3c9c:	84 07       	cpc	r24, r20
    3c9e:	95 07       	cpc	r25, r21
    3ca0:	18 f0       	brcs	.+6      	; 0x3ca8 <__addsf3x+0x18>
    3ca2:	71 f4       	brne	.+28     	; 0x3cc0 <__addsf3x+0x30>
    3ca4:	9e f5       	brtc	.+102    	; 0x3d0c <__addsf3x+0x7c>
    3ca6:	8a c1       	rjmp	.+788    	; 0x3fbc <__fp_zero>
    3ca8:	0e f4       	brtc	.+2      	; 0x3cac <__addsf3x+0x1c>
    3caa:	e0 95       	com	r30
    3cac:	0b 2e       	mov	r0, r27
    3cae:	ba 2f       	mov	r27, r26
    3cb0:	a0 2d       	mov	r26, r0
    3cb2:	0b 01       	movw	r0, r22
    3cb4:	b9 01       	movw	r22, r18
    3cb6:	90 01       	movw	r18, r0
    3cb8:	0c 01       	movw	r0, r24
    3cba:	ca 01       	movw	r24, r20
    3cbc:	a0 01       	movw	r20, r0
    3cbe:	11 24       	eor	r1, r1
    3cc0:	ff 27       	eor	r31, r31
    3cc2:	59 1b       	sub	r21, r25
    3cc4:	99 f0       	breq	.+38     	; 0x3cec <__addsf3x+0x5c>
    3cc6:	59 3f       	cpi	r21, 0xF9	; 249
    3cc8:	50 f4       	brcc	.+20     	; 0x3cde <__addsf3x+0x4e>
    3cca:	50 3e       	cpi	r21, 0xE0	; 224
    3ccc:	68 f1       	brcs	.+90     	; 0x3d28 <__addsf3x+0x98>
    3cce:	1a 16       	cp	r1, r26
    3cd0:	f0 40       	sbci	r31, 0x00	; 0
    3cd2:	a2 2f       	mov	r26, r18
    3cd4:	23 2f       	mov	r18, r19
    3cd6:	34 2f       	mov	r19, r20
    3cd8:	44 27       	eor	r20, r20
    3cda:	58 5f       	subi	r21, 0xF8	; 248
    3cdc:	f3 cf       	rjmp	.-26     	; 0x3cc4 <__addsf3x+0x34>
    3cde:	46 95       	lsr	r20
    3ce0:	37 95       	ror	r19
    3ce2:	27 95       	ror	r18
    3ce4:	a7 95       	ror	r26
    3ce6:	f0 40       	sbci	r31, 0x00	; 0
    3ce8:	53 95       	inc	r21
    3cea:	c9 f7       	brne	.-14     	; 0x3cde <__addsf3x+0x4e>
    3cec:	7e f4       	brtc	.+30     	; 0x3d0c <__addsf3x+0x7c>
    3cee:	1f 16       	cp	r1, r31
    3cf0:	ba 0b       	sbc	r27, r26
    3cf2:	62 0b       	sbc	r22, r18
    3cf4:	73 0b       	sbc	r23, r19
    3cf6:	84 0b       	sbc	r24, r20
    3cf8:	ba f0       	brmi	.+46     	; 0x3d28 <__addsf3x+0x98>
    3cfa:	91 50       	subi	r25, 0x01	; 1
    3cfc:	a1 f0       	breq	.+40     	; 0x3d26 <__addsf3x+0x96>
    3cfe:	ff 0f       	add	r31, r31
    3d00:	bb 1f       	adc	r27, r27
    3d02:	66 1f       	adc	r22, r22
    3d04:	77 1f       	adc	r23, r23
    3d06:	88 1f       	adc	r24, r24
    3d08:	c2 f7       	brpl	.-16     	; 0x3cfa <__addsf3x+0x6a>
    3d0a:	0e c0       	rjmp	.+28     	; 0x3d28 <__addsf3x+0x98>
    3d0c:	ba 0f       	add	r27, r26
    3d0e:	62 1f       	adc	r22, r18
    3d10:	73 1f       	adc	r23, r19
    3d12:	84 1f       	adc	r24, r20
    3d14:	48 f4       	brcc	.+18     	; 0x3d28 <__addsf3x+0x98>
    3d16:	87 95       	ror	r24
    3d18:	77 95       	ror	r23
    3d1a:	67 95       	ror	r22
    3d1c:	b7 95       	ror	r27
    3d1e:	f7 95       	ror	r31
    3d20:	9e 3f       	cpi	r25, 0xFE	; 254
    3d22:	08 f0       	brcs	.+2      	; 0x3d26 <__addsf3x+0x96>
    3d24:	b3 cf       	rjmp	.-154    	; 0x3c8c <__addsf3+0x1e>
    3d26:	93 95       	inc	r25
    3d28:	88 0f       	add	r24, r24
    3d2a:	08 f0       	brcs	.+2      	; 0x3d2e <__addsf3x+0x9e>
    3d2c:	99 27       	eor	r25, r25
    3d2e:	ee 0f       	add	r30, r30
    3d30:	97 95       	ror	r25
    3d32:	87 95       	ror	r24
    3d34:	08 95       	ret

00003d36 <__cmpsf2>:
    3d36:	d4 d0       	rcall	.+424    	; 0x3ee0 <__fp_cmp>
    3d38:	08 f4       	brcc	.+2      	; 0x3d3c <__cmpsf2+0x6>
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	08 95       	ret

00003d3e <__divsf3>:
    3d3e:	0c d0       	rcall	.+24     	; 0x3d58 <__divsf3x>
    3d40:	0a c1       	rjmp	.+532    	; 0x3f56 <__fp_round>
    3d42:	02 d1       	rcall	.+516    	; 0x3f48 <__fp_pscB>
    3d44:	40 f0       	brcs	.+16     	; 0x3d56 <__divsf3+0x18>
    3d46:	f9 d0       	rcall	.+498    	; 0x3f3a <__fp_pscA>
    3d48:	30 f0       	brcs	.+12     	; 0x3d56 <__divsf3+0x18>
    3d4a:	21 f4       	brne	.+8      	; 0x3d54 <__divsf3+0x16>
    3d4c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d4e:	19 f0       	breq	.+6      	; 0x3d56 <__divsf3+0x18>
    3d50:	eb c0       	rjmp	.+470    	; 0x3f28 <__fp_inf>
    3d52:	51 11       	cpse	r21, r1
    3d54:	34 c1       	rjmp	.+616    	; 0x3fbe <__fp_szero>
    3d56:	ee c0       	rjmp	.+476    	; 0x3f34 <__fp_nan>

00003d58 <__divsf3x>:
    3d58:	0f d1       	rcall	.+542    	; 0x3f78 <__fp_split3>
    3d5a:	98 f3       	brcs	.-26     	; 0x3d42 <__divsf3+0x4>

00003d5c <__divsf3_pse>:
    3d5c:	99 23       	and	r25, r25
    3d5e:	c9 f3       	breq	.-14     	; 0x3d52 <__divsf3+0x14>
    3d60:	55 23       	and	r21, r21
    3d62:	b1 f3       	breq	.-20     	; 0x3d50 <__divsf3+0x12>
    3d64:	95 1b       	sub	r25, r21
    3d66:	55 0b       	sbc	r21, r21
    3d68:	bb 27       	eor	r27, r27
    3d6a:	aa 27       	eor	r26, r26
    3d6c:	62 17       	cp	r22, r18
    3d6e:	73 07       	cpc	r23, r19
    3d70:	84 07       	cpc	r24, r20
    3d72:	38 f0       	brcs	.+14     	; 0x3d82 <__divsf3_pse+0x26>
    3d74:	9f 5f       	subi	r25, 0xFF	; 255
    3d76:	5f 4f       	sbci	r21, 0xFF	; 255
    3d78:	22 0f       	add	r18, r18
    3d7a:	33 1f       	adc	r19, r19
    3d7c:	44 1f       	adc	r20, r20
    3d7e:	aa 1f       	adc	r26, r26
    3d80:	a9 f3       	breq	.-22     	; 0x3d6c <__divsf3_pse+0x10>
    3d82:	33 d0       	rcall	.+102    	; 0x3dea <__divsf3_pse+0x8e>
    3d84:	0e 2e       	mov	r0, r30
    3d86:	3a f0       	brmi	.+14     	; 0x3d96 <__divsf3_pse+0x3a>
    3d88:	e0 e8       	ldi	r30, 0x80	; 128
    3d8a:	30 d0       	rcall	.+96     	; 0x3dec <__divsf3_pse+0x90>
    3d8c:	91 50       	subi	r25, 0x01	; 1
    3d8e:	50 40       	sbci	r21, 0x00	; 0
    3d90:	e6 95       	lsr	r30
    3d92:	00 1c       	adc	r0, r0
    3d94:	ca f7       	brpl	.-14     	; 0x3d88 <__divsf3_pse+0x2c>
    3d96:	29 d0       	rcall	.+82     	; 0x3dea <__divsf3_pse+0x8e>
    3d98:	fe 2f       	mov	r31, r30
    3d9a:	27 d0       	rcall	.+78     	; 0x3dea <__divsf3_pse+0x8e>
    3d9c:	66 0f       	add	r22, r22
    3d9e:	77 1f       	adc	r23, r23
    3da0:	88 1f       	adc	r24, r24
    3da2:	bb 1f       	adc	r27, r27
    3da4:	26 17       	cp	r18, r22
    3da6:	37 07       	cpc	r19, r23
    3da8:	48 07       	cpc	r20, r24
    3daa:	ab 07       	cpc	r26, r27
    3dac:	b0 e8       	ldi	r27, 0x80	; 128
    3dae:	09 f0       	breq	.+2      	; 0x3db2 <__divsf3_pse+0x56>
    3db0:	bb 0b       	sbc	r27, r27
    3db2:	80 2d       	mov	r24, r0
    3db4:	bf 01       	movw	r22, r30
    3db6:	ff 27       	eor	r31, r31
    3db8:	93 58       	subi	r25, 0x83	; 131
    3dba:	5f 4f       	sbci	r21, 0xFF	; 255
    3dbc:	2a f0       	brmi	.+10     	; 0x3dc8 <__divsf3_pse+0x6c>
    3dbe:	9e 3f       	cpi	r25, 0xFE	; 254
    3dc0:	51 05       	cpc	r21, r1
    3dc2:	68 f0       	brcs	.+26     	; 0x3dde <__divsf3_pse+0x82>
    3dc4:	b1 c0       	rjmp	.+354    	; 0x3f28 <__fp_inf>
    3dc6:	fb c0       	rjmp	.+502    	; 0x3fbe <__fp_szero>
    3dc8:	5f 3f       	cpi	r21, 0xFF	; 255
    3dca:	ec f3       	brlt	.-6      	; 0x3dc6 <__divsf3_pse+0x6a>
    3dcc:	98 3e       	cpi	r25, 0xE8	; 232
    3dce:	dc f3       	brlt	.-10     	; 0x3dc6 <__divsf3_pse+0x6a>
    3dd0:	86 95       	lsr	r24
    3dd2:	77 95       	ror	r23
    3dd4:	67 95       	ror	r22
    3dd6:	b7 95       	ror	r27
    3dd8:	f7 95       	ror	r31
    3dda:	9f 5f       	subi	r25, 0xFF	; 255
    3ddc:	c9 f7       	brne	.-14     	; 0x3dd0 <__divsf3_pse+0x74>
    3dde:	88 0f       	add	r24, r24
    3de0:	91 1d       	adc	r25, r1
    3de2:	96 95       	lsr	r25
    3de4:	87 95       	ror	r24
    3de6:	97 f9       	bld	r25, 7
    3de8:	08 95       	ret
    3dea:	e1 e0       	ldi	r30, 0x01	; 1
    3dec:	66 0f       	add	r22, r22
    3dee:	77 1f       	adc	r23, r23
    3df0:	88 1f       	adc	r24, r24
    3df2:	bb 1f       	adc	r27, r27
    3df4:	62 17       	cp	r22, r18
    3df6:	73 07       	cpc	r23, r19
    3df8:	84 07       	cpc	r24, r20
    3dfa:	ba 07       	cpc	r27, r26
    3dfc:	20 f0       	brcs	.+8      	; 0x3e06 <__divsf3_pse+0xaa>
    3dfe:	62 1b       	sub	r22, r18
    3e00:	73 0b       	sbc	r23, r19
    3e02:	84 0b       	sbc	r24, r20
    3e04:	ba 0b       	sbc	r27, r26
    3e06:	ee 1f       	adc	r30, r30
    3e08:	88 f7       	brcc	.-30     	; 0x3dec <__divsf3_pse+0x90>
    3e0a:	e0 95       	com	r30
    3e0c:	08 95       	ret

00003e0e <__fixunssfsi>:
    3e0e:	bc d0       	rcall	.+376    	; 0x3f88 <__fp_splitA>
    3e10:	88 f0       	brcs	.+34     	; 0x3e34 <__fixunssfsi+0x26>
    3e12:	9f 57       	subi	r25, 0x7F	; 127
    3e14:	90 f0       	brcs	.+36     	; 0x3e3a <__fixunssfsi+0x2c>
    3e16:	b9 2f       	mov	r27, r25
    3e18:	99 27       	eor	r25, r25
    3e1a:	b7 51       	subi	r27, 0x17	; 23
    3e1c:	a0 f0       	brcs	.+40     	; 0x3e46 <__fixunssfsi+0x38>
    3e1e:	d1 f0       	breq	.+52     	; 0x3e54 <__fixunssfsi+0x46>
    3e20:	66 0f       	add	r22, r22
    3e22:	77 1f       	adc	r23, r23
    3e24:	88 1f       	adc	r24, r24
    3e26:	99 1f       	adc	r25, r25
    3e28:	1a f0       	brmi	.+6      	; 0x3e30 <__fixunssfsi+0x22>
    3e2a:	ba 95       	dec	r27
    3e2c:	c9 f7       	brne	.-14     	; 0x3e20 <__fixunssfsi+0x12>
    3e2e:	12 c0       	rjmp	.+36     	; 0x3e54 <__fixunssfsi+0x46>
    3e30:	b1 30       	cpi	r27, 0x01	; 1
    3e32:	81 f0       	breq	.+32     	; 0x3e54 <__fixunssfsi+0x46>
    3e34:	c3 d0       	rcall	.+390    	; 0x3fbc <__fp_zero>
    3e36:	b1 e0       	ldi	r27, 0x01	; 1
    3e38:	08 95       	ret
    3e3a:	c0 c0       	rjmp	.+384    	; 0x3fbc <__fp_zero>
    3e3c:	67 2f       	mov	r22, r23
    3e3e:	78 2f       	mov	r23, r24
    3e40:	88 27       	eor	r24, r24
    3e42:	b8 5f       	subi	r27, 0xF8	; 248
    3e44:	39 f0       	breq	.+14     	; 0x3e54 <__fixunssfsi+0x46>
    3e46:	b9 3f       	cpi	r27, 0xF9	; 249
    3e48:	cc f3       	brlt	.-14     	; 0x3e3c <__fixunssfsi+0x2e>
    3e4a:	86 95       	lsr	r24
    3e4c:	77 95       	ror	r23
    3e4e:	67 95       	ror	r22
    3e50:	b3 95       	inc	r27
    3e52:	d9 f7       	brne	.-10     	; 0x3e4a <__fixunssfsi+0x3c>
    3e54:	3e f4       	brtc	.+14     	; 0x3e64 <__fixunssfsi+0x56>
    3e56:	90 95       	com	r25
    3e58:	80 95       	com	r24
    3e5a:	70 95       	com	r23
    3e5c:	61 95       	neg	r22
    3e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e60:	8f 4f       	sbci	r24, 0xFF	; 255
    3e62:	9f 4f       	sbci	r25, 0xFF	; 255
    3e64:	08 95       	ret

00003e66 <__floatunsisf>:
    3e66:	e8 94       	clt
    3e68:	09 c0       	rjmp	.+18     	; 0x3e7c <__floatsisf+0x12>

00003e6a <__floatsisf>:
    3e6a:	97 fb       	bst	r25, 7
    3e6c:	3e f4       	brtc	.+14     	; 0x3e7c <__floatsisf+0x12>
    3e6e:	90 95       	com	r25
    3e70:	80 95       	com	r24
    3e72:	70 95       	com	r23
    3e74:	61 95       	neg	r22
    3e76:	7f 4f       	sbci	r23, 0xFF	; 255
    3e78:	8f 4f       	sbci	r24, 0xFF	; 255
    3e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e7c:	99 23       	and	r25, r25
    3e7e:	a9 f0       	breq	.+42     	; 0x3eaa <__floatsisf+0x40>
    3e80:	f9 2f       	mov	r31, r25
    3e82:	96 e9       	ldi	r25, 0x96	; 150
    3e84:	bb 27       	eor	r27, r27
    3e86:	93 95       	inc	r25
    3e88:	f6 95       	lsr	r31
    3e8a:	87 95       	ror	r24
    3e8c:	77 95       	ror	r23
    3e8e:	67 95       	ror	r22
    3e90:	b7 95       	ror	r27
    3e92:	f1 11       	cpse	r31, r1
    3e94:	f8 cf       	rjmp	.-16     	; 0x3e86 <__floatsisf+0x1c>
    3e96:	fa f4       	brpl	.+62     	; 0x3ed6 <__floatsisf+0x6c>
    3e98:	bb 0f       	add	r27, r27
    3e9a:	11 f4       	brne	.+4      	; 0x3ea0 <__floatsisf+0x36>
    3e9c:	60 ff       	sbrs	r22, 0
    3e9e:	1b c0       	rjmp	.+54     	; 0x3ed6 <__floatsisf+0x6c>
    3ea0:	6f 5f       	subi	r22, 0xFF	; 255
    3ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea8:	16 c0       	rjmp	.+44     	; 0x3ed6 <__floatsisf+0x6c>
    3eaa:	88 23       	and	r24, r24
    3eac:	11 f0       	breq	.+4      	; 0x3eb2 <__floatsisf+0x48>
    3eae:	96 e9       	ldi	r25, 0x96	; 150
    3eb0:	11 c0       	rjmp	.+34     	; 0x3ed4 <__floatsisf+0x6a>
    3eb2:	77 23       	and	r23, r23
    3eb4:	21 f0       	breq	.+8      	; 0x3ebe <__floatsisf+0x54>
    3eb6:	9e e8       	ldi	r25, 0x8E	; 142
    3eb8:	87 2f       	mov	r24, r23
    3eba:	76 2f       	mov	r23, r22
    3ebc:	05 c0       	rjmp	.+10     	; 0x3ec8 <__floatsisf+0x5e>
    3ebe:	66 23       	and	r22, r22
    3ec0:	71 f0       	breq	.+28     	; 0x3ede <__floatsisf+0x74>
    3ec2:	96 e8       	ldi	r25, 0x86	; 134
    3ec4:	86 2f       	mov	r24, r22
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	60 e0       	ldi	r22, 0x00	; 0
    3eca:	2a f0       	brmi	.+10     	; 0x3ed6 <__floatsisf+0x6c>
    3ecc:	9a 95       	dec	r25
    3ece:	66 0f       	add	r22, r22
    3ed0:	77 1f       	adc	r23, r23
    3ed2:	88 1f       	adc	r24, r24
    3ed4:	da f7       	brpl	.-10     	; 0x3ecc <__floatsisf+0x62>
    3ed6:	88 0f       	add	r24, r24
    3ed8:	96 95       	lsr	r25
    3eda:	87 95       	ror	r24
    3edc:	97 f9       	bld	r25, 7
    3ede:	08 95       	ret

00003ee0 <__fp_cmp>:
    3ee0:	99 0f       	add	r25, r25
    3ee2:	00 08       	sbc	r0, r0
    3ee4:	55 0f       	add	r21, r21
    3ee6:	aa 0b       	sbc	r26, r26
    3ee8:	e0 e8       	ldi	r30, 0x80	; 128
    3eea:	fe ef       	ldi	r31, 0xFE	; 254
    3eec:	16 16       	cp	r1, r22
    3eee:	17 06       	cpc	r1, r23
    3ef0:	e8 07       	cpc	r30, r24
    3ef2:	f9 07       	cpc	r31, r25
    3ef4:	c0 f0       	brcs	.+48     	; 0x3f26 <__fp_cmp+0x46>
    3ef6:	12 16       	cp	r1, r18
    3ef8:	13 06       	cpc	r1, r19
    3efa:	e4 07       	cpc	r30, r20
    3efc:	f5 07       	cpc	r31, r21
    3efe:	98 f0       	brcs	.+38     	; 0x3f26 <__fp_cmp+0x46>
    3f00:	62 1b       	sub	r22, r18
    3f02:	73 0b       	sbc	r23, r19
    3f04:	84 0b       	sbc	r24, r20
    3f06:	95 0b       	sbc	r25, r21
    3f08:	39 f4       	brne	.+14     	; 0x3f18 <__fp_cmp+0x38>
    3f0a:	0a 26       	eor	r0, r26
    3f0c:	61 f0       	breq	.+24     	; 0x3f26 <__fp_cmp+0x46>
    3f0e:	23 2b       	or	r18, r19
    3f10:	24 2b       	or	r18, r20
    3f12:	25 2b       	or	r18, r21
    3f14:	21 f4       	brne	.+8      	; 0x3f1e <__fp_cmp+0x3e>
    3f16:	08 95       	ret
    3f18:	0a 26       	eor	r0, r26
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <__fp_cmp+0x3e>
    3f1c:	a1 40       	sbci	r26, 0x01	; 1
    3f1e:	a6 95       	lsr	r26
    3f20:	8f ef       	ldi	r24, 0xFF	; 255
    3f22:	81 1d       	adc	r24, r1
    3f24:	81 1d       	adc	r24, r1
    3f26:	08 95       	ret

00003f28 <__fp_inf>:
    3f28:	97 f9       	bld	r25, 7
    3f2a:	9f 67       	ori	r25, 0x7F	; 127
    3f2c:	80 e8       	ldi	r24, 0x80	; 128
    3f2e:	70 e0       	ldi	r23, 0x00	; 0
    3f30:	60 e0       	ldi	r22, 0x00	; 0
    3f32:	08 95       	ret

00003f34 <__fp_nan>:
    3f34:	9f ef       	ldi	r25, 0xFF	; 255
    3f36:	80 ec       	ldi	r24, 0xC0	; 192
    3f38:	08 95       	ret

00003f3a <__fp_pscA>:
    3f3a:	00 24       	eor	r0, r0
    3f3c:	0a 94       	dec	r0
    3f3e:	16 16       	cp	r1, r22
    3f40:	17 06       	cpc	r1, r23
    3f42:	18 06       	cpc	r1, r24
    3f44:	09 06       	cpc	r0, r25
    3f46:	08 95       	ret

00003f48 <__fp_pscB>:
    3f48:	00 24       	eor	r0, r0
    3f4a:	0a 94       	dec	r0
    3f4c:	12 16       	cp	r1, r18
    3f4e:	13 06       	cpc	r1, r19
    3f50:	14 06       	cpc	r1, r20
    3f52:	05 06       	cpc	r0, r21
    3f54:	08 95       	ret

00003f56 <__fp_round>:
    3f56:	09 2e       	mov	r0, r25
    3f58:	03 94       	inc	r0
    3f5a:	00 0c       	add	r0, r0
    3f5c:	11 f4       	brne	.+4      	; 0x3f62 <__fp_round+0xc>
    3f5e:	88 23       	and	r24, r24
    3f60:	52 f0       	brmi	.+20     	; 0x3f76 <__fp_round+0x20>
    3f62:	bb 0f       	add	r27, r27
    3f64:	40 f4       	brcc	.+16     	; 0x3f76 <__fp_round+0x20>
    3f66:	bf 2b       	or	r27, r31
    3f68:	11 f4       	brne	.+4      	; 0x3f6e <__fp_round+0x18>
    3f6a:	60 ff       	sbrs	r22, 0
    3f6c:	04 c0       	rjmp	.+8      	; 0x3f76 <__fp_round+0x20>
    3f6e:	6f 5f       	subi	r22, 0xFF	; 255
    3f70:	7f 4f       	sbci	r23, 0xFF	; 255
    3f72:	8f 4f       	sbci	r24, 0xFF	; 255
    3f74:	9f 4f       	sbci	r25, 0xFF	; 255
    3f76:	08 95       	ret

00003f78 <__fp_split3>:
    3f78:	57 fd       	sbrc	r21, 7
    3f7a:	90 58       	subi	r25, 0x80	; 128
    3f7c:	44 0f       	add	r20, r20
    3f7e:	55 1f       	adc	r21, r21
    3f80:	59 f0       	breq	.+22     	; 0x3f98 <__fp_splitA+0x10>
    3f82:	5f 3f       	cpi	r21, 0xFF	; 255
    3f84:	71 f0       	breq	.+28     	; 0x3fa2 <__fp_splitA+0x1a>
    3f86:	47 95       	ror	r20

00003f88 <__fp_splitA>:
    3f88:	88 0f       	add	r24, r24
    3f8a:	97 fb       	bst	r25, 7
    3f8c:	99 1f       	adc	r25, r25
    3f8e:	61 f0       	breq	.+24     	; 0x3fa8 <__fp_splitA+0x20>
    3f90:	9f 3f       	cpi	r25, 0xFF	; 255
    3f92:	79 f0       	breq	.+30     	; 0x3fb2 <__fp_splitA+0x2a>
    3f94:	87 95       	ror	r24
    3f96:	08 95       	ret
    3f98:	12 16       	cp	r1, r18
    3f9a:	13 06       	cpc	r1, r19
    3f9c:	14 06       	cpc	r1, r20
    3f9e:	55 1f       	adc	r21, r21
    3fa0:	f2 cf       	rjmp	.-28     	; 0x3f86 <__fp_split3+0xe>
    3fa2:	46 95       	lsr	r20
    3fa4:	f1 df       	rcall	.-30     	; 0x3f88 <__fp_splitA>
    3fa6:	08 c0       	rjmp	.+16     	; 0x3fb8 <__fp_splitA+0x30>
    3fa8:	16 16       	cp	r1, r22
    3faa:	17 06       	cpc	r1, r23
    3fac:	18 06       	cpc	r1, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	f1 cf       	rjmp	.-30     	; 0x3f94 <__fp_splitA+0xc>
    3fb2:	86 95       	lsr	r24
    3fb4:	71 05       	cpc	r23, r1
    3fb6:	61 05       	cpc	r22, r1
    3fb8:	08 94       	sec
    3fba:	08 95       	ret

00003fbc <__fp_zero>:
    3fbc:	e8 94       	clt

00003fbe <__fp_szero>:
    3fbe:	bb 27       	eor	r27, r27
    3fc0:	66 27       	eor	r22, r22
    3fc2:	77 27       	eor	r23, r23
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	97 f9       	bld	r25, 7
    3fc8:	08 95       	ret

00003fca <__gesf2>:
    3fca:	8a df       	rcall	.-236    	; 0x3ee0 <__fp_cmp>
    3fcc:	08 f4       	brcc	.+2      	; 0x3fd0 <__gesf2+0x6>
    3fce:	8f ef       	ldi	r24, 0xFF	; 255
    3fd0:	08 95       	ret

00003fd2 <__mulsf3>:
    3fd2:	0b d0       	rcall	.+22     	; 0x3fea <__mulsf3x>
    3fd4:	c0 cf       	rjmp	.-128    	; 0x3f56 <__fp_round>
    3fd6:	b1 df       	rcall	.-158    	; 0x3f3a <__fp_pscA>
    3fd8:	28 f0       	brcs	.+10     	; 0x3fe4 <__mulsf3+0x12>
    3fda:	b6 df       	rcall	.-148    	; 0x3f48 <__fp_pscB>
    3fdc:	18 f0       	brcs	.+6      	; 0x3fe4 <__mulsf3+0x12>
    3fde:	95 23       	and	r25, r21
    3fe0:	09 f0       	breq	.+2      	; 0x3fe4 <__mulsf3+0x12>
    3fe2:	a2 cf       	rjmp	.-188    	; 0x3f28 <__fp_inf>
    3fe4:	a7 cf       	rjmp	.-178    	; 0x3f34 <__fp_nan>
    3fe6:	11 24       	eor	r1, r1
    3fe8:	ea cf       	rjmp	.-44     	; 0x3fbe <__fp_szero>

00003fea <__mulsf3x>:
    3fea:	c6 df       	rcall	.-116    	; 0x3f78 <__fp_split3>
    3fec:	a0 f3       	brcs	.-24     	; 0x3fd6 <__mulsf3+0x4>

00003fee <__mulsf3_pse>:
    3fee:	95 9f       	mul	r25, r21
    3ff0:	d1 f3       	breq	.-12     	; 0x3fe6 <__mulsf3+0x14>
    3ff2:	95 0f       	add	r25, r21
    3ff4:	50 e0       	ldi	r21, 0x00	; 0
    3ff6:	55 1f       	adc	r21, r21
    3ff8:	62 9f       	mul	r22, r18
    3ffa:	f0 01       	movw	r30, r0
    3ffc:	72 9f       	mul	r23, r18
    3ffe:	bb 27       	eor	r27, r27
    4000:	f0 0d       	add	r31, r0
    4002:	b1 1d       	adc	r27, r1
    4004:	63 9f       	mul	r22, r19
    4006:	aa 27       	eor	r26, r26
    4008:	f0 0d       	add	r31, r0
    400a:	b1 1d       	adc	r27, r1
    400c:	aa 1f       	adc	r26, r26
    400e:	64 9f       	mul	r22, r20
    4010:	66 27       	eor	r22, r22
    4012:	b0 0d       	add	r27, r0
    4014:	a1 1d       	adc	r26, r1
    4016:	66 1f       	adc	r22, r22
    4018:	82 9f       	mul	r24, r18
    401a:	22 27       	eor	r18, r18
    401c:	b0 0d       	add	r27, r0
    401e:	a1 1d       	adc	r26, r1
    4020:	62 1f       	adc	r22, r18
    4022:	73 9f       	mul	r23, r19
    4024:	b0 0d       	add	r27, r0
    4026:	a1 1d       	adc	r26, r1
    4028:	62 1f       	adc	r22, r18
    402a:	83 9f       	mul	r24, r19
    402c:	a0 0d       	add	r26, r0
    402e:	61 1d       	adc	r22, r1
    4030:	22 1f       	adc	r18, r18
    4032:	74 9f       	mul	r23, r20
    4034:	33 27       	eor	r19, r19
    4036:	a0 0d       	add	r26, r0
    4038:	61 1d       	adc	r22, r1
    403a:	23 1f       	adc	r18, r19
    403c:	84 9f       	mul	r24, r20
    403e:	60 0d       	add	r22, r0
    4040:	21 1d       	adc	r18, r1
    4042:	82 2f       	mov	r24, r18
    4044:	76 2f       	mov	r23, r22
    4046:	6a 2f       	mov	r22, r26
    4048:	11 24       	eor	r1, r1
    404a:	9f 57       	subi	r25, 0x7F	; 127
    404c:	50 40       	sbci	r21, 0x00	; 0
    404e:	8a f0       	brmi	.+34     	; 0x4072 <__mulsf3_pse+0x84>
    4050:	e1 f0       	breq	.+56     	; 0x408a <__mulsf3_pse+0x9c>
    4052:	88 23       	and	r24, r24
    4054:	4a f0       	brmi	.+18     	; 0x4068 <__mulsf3_pse+0x7a>
    4056:	ee 0f       	add	r30, r30
    4058:	ff 1f       	adc	r31, r31
    405a:	bb 1f       	adc	r27, r27
    405c:	66 1f       	adc	r22, r22
    405e:	77 1f       	adc	r23, r23
    4060:	88 1f       	adc	r24, r24
    4062:	91 50       	subi	r25, 0x01	; 1
    4064:	50 40       	sbci	r21, 0x00	; 0
    4066:	a9 f7       	brne	.-22     	; 0x4052 <__mulsf3_pse+0x64>
    4068:	9e 3f       	cpi	r25, 0xFE	; 254
    406a:	51 05       	cpc	r21, r1
    406c:	70 f0       	brcs	.+28     	; 0x408a <__mulsf3_pse+0x9c>
    406e:	5c cf       	rjmp	.-328    	; 0x3f28 <__fp_inf>
    4070:	a6 cf       	rjmp	.-180    	; 0x3fbe <__fp_szero>
    4072:	5f 3f       	cpi	r21, 0xFF	; 255
    4074:	ec f3       	brlt	.-6      	; 0x4070 <__mulsf3_pse+0x82>
    4076:	98 3e       	cpi	r25, 0xE8	; 232
    4078:	dc f3       	brlt	.-10     	; 0x4070 <__mulsf3_pse+0x82>
    407a:	86 95       	lsr	r24
    407c:	77 95       	ror	r23
    407e:	67 95       	ror	r22
    4080:	b7 95       	ror	r27
    4082:	f7 95       	ror	r31
    4084:	e7 95       	ror	r30
    4086:	9f 5f       	subi	r25, 0xFF	; 255
    4088:	c1 f7       	brne	.-16     	; 0x407a <__mulsf3_pse+0x8c>
    408a:	fe 2b       	or	r31, r30
    408c:	88 0f       	add	r24, r24
    408e:	91 1d       	adc	r25, r1
    4090:	96 95       	lsr	r25
    4092:	87 95       	ror	r24
    4094:	97 f9       	bld	r25, 7
    4096:	08 95       	ret

00004098 <pow>:
    4098:	fa 01       	movw	r30, r20
    409a:	ee 0f       	add	r30, r30
    409c:	ff 1f       	adc	r31, r31
    409e:	30 96       	adiw	r30, 0x00	; 0
    40a0:	21 05       	cpc	r18, r1
    40a2:	31 05       	cpc	r19, r1
    40a4:	99 f1       	breq	.+102    	; 0x410c <pow+0x74>
    40a6:	61 15       	cp	r22, r1
    40a8:	71 05       	cpc	r23, r1
    40aa:	61 f4       	brne	.+24     	; 0x40c4 <pow+0x2c>
    40ac:	80 38       	cpi	r24, 0x80	; 128
    40ae:	bf e3       	ldi	r27, 0x3F	; 63
    40b0:	9b 07       	cpc	r25, r27
    40b2:	49 f1       	breq	.+82     	; 0x4106 <pow+0x6e>
    40b4:	68 94       	set
    40b6:	90 38       	cpi	r25, 0x80	; 128
    40b8:	81 05       	cpc	r24, r1
    40ba:	61 f0       	breq	.+24     	; 0x40d4 <pow+0x3c>
    40bc:	80 38       	cpi	r24, 0x80	; 128
    40be:	bf ef       	ldi	r27, 0xFF	; 255
    40c0:	9b 07       	cpc	r25, r27
    40c2:	41 f0       	breq	.+16     	; 0x40d4 <pow+0x3c>
    40c4:	99 23       	and	r25, r25
    40c6:	42 f5       	brpl	.+80     	; 0x4118 <pow+0x80>
    40c8:	ff 3f       	cpi	r31, 0xFF	; 255
    40ca:	e1 05       	cpc	r30, r1
    40cc:	31 05       	cpc	r19, r1
    40ce:	21 05       	cpc	r18, r1
    40d0:	11 f1       	breq	.+68     	; 0x4116 <pow+0x7e>
    40d2:	e8 94       	clt
    40d4:	08 94       	sec
    40d6:	e7 95       	ror	r30
    40d8:	d9 01       	movw	r26, r18
    40da:	aa 23       	and	r26, r26
    40dc:	29 f4       	brne	.+10     	; 0x40e8 <pow+0x50>
    40de:	ab 2f       	mov	r26, r27
    40e0:	be 2f       	mov	r27, r30
    40e2:	f8 5f       	subi	r31, 0xF8	; 248
    40e4:	d0 f3       	brcs	.-12     	; 0x40da <pow+0x42>
    40e6:	10 c0       	rjmp	.+32     	; 0x4108 <pow+0x70>
    40e8:	ff 5f       	subi	r31, 0xFF	; 255
    40ea:	70 f4       	brcc	.+28     	; 0x4108 <pow+0x70>
    40ec:	a6 95       	lsr	r26
    40ee:	e0 f7       	brcc	.-8      	; 0x40e8 <pow+0x50>
    40f0:	f7 39       	cpi	r31, 0x97	; 151
    40f2:	50 f0       	brcs	.+20     	; 0x4108 <pow+0x70>
    40f4:	19 f0       	breq	.+6      	; 0x40fc <pow+0x64>
    40f6:	ff 3a       	cpi	r31, 0xAF	; 175
    40f8:	38 f4       	brcc	.+14     	; 0x4108 <pow+0x70>
    40fa:	9f 77       	andi	r25, 0x7F	; 127
    40fc:	9f 93       	push	r25
    40fe:	0c d0       	rcall	.+24     	; 0x4118 <pow+0x80>
    4100:	0f 90       	pop	r0
    4102:	07 fc       	sbrc	r0, 7
    4104:	90 58       	subi	r25, 0x80	; 128
    4106:	08 95       	ret
    4108:	3e f0       	brts	.+14     	; 0x4118 <pow+0x80>
    410a:	14 cf       	rjmp	.-472    	; 0x3f34 <__fp_nan>
    410c:	60 e0       	ldi	r22, 0x00	; 0
    410e:	70 e0       	ldi	r23, 0x00	; 0
    4110:	80 e8       	ldi	r24, 0x80	; 128
    4112:	9f e3       	ldi	r25, 0x3F	; 63
    4114:	08 95       	ret
    4116:	4f e7       	ldi	r20, 0x7F	; 127
    4118:	9f 77       	andi	r25, 0x7F	; 127
    411a:	5f 93       	push	r21
    411c:	4f 93       	push	r20
    411e:	3f 93       	push	r19
    4120:	2f 93       	push	r18
    4122:	06 d1       	rcall	.+524    	; 0x4330 <log>
    4124:	2f 91       	pop	r18
    4126:	3f 91       	pop	r19
    4128:	4f 91       	pop	r20
    412a:	5f 91       	pop	r21
    412c:	52 df       	rcall	.-348    	; 0x3fd2 <__mulsf3>
    412e:	56 c0       	rjmp	.+172    	; 0x41dc <exp>
    4130:	11 f4       	brne	.+4      	; 0x4136 <pow+0x9e>
    4132:	0e f4       	brtc	.+2      	; 0x4136 <pow+0x9e>
    4134:	ff ce       	rjmp	.-514    	; 0x3f34 <__fp_nan>
    4136:	7e c0       	rjmp	.+252    	; 0x4234 <__fp_mpack>

00004138 <sqrt>:
    4138:	27 df       	rcall	.-434    	; 0x3f88 <__fp_splitA>
    413a:	d0 f3       	brcs	.-12     	; 0x4130 <pow+0x98>
    413c:	99 23       	and	r25, r25
    413e:	d9 f3       	breq	.-10     	; 0x4136 <pow+0x9e>
    4140:	ce f3       	brts	.-14     	; 0x4134 <pow+0x9c>
    4142:	9f 57       	subi	r25, 0x7F	; 127
    4144:	55 0b       	sbc	r21, r21
    4146:	87 ff       	sbrs	r24, 7
    4148:	85 d0       	rcall	.+266    	; 0x4254 <__fp_norm2>
    414a:	56 95       	lsr	r21
    414c:	97 95       	ror	r25
    414e:	b0 e0       	ldi	r27, 0x00	; 0
    4150:	20 f4       	brcc	.+8      	; 0x415a <sqrt+0x22>
    4152:	66 0f       	add	r22, r22
    4154:	77 1f       	adc	r23, r23
    4156:	88 1f       	adc	r24, r24
    4158:	bb 1f       	adc	r27, r27
    415a:	1f 93       	push	r17
    415c:	0f 93       	push	r16
    415e:	00 24       	eor	r0, r0
    4160:	90 01       	movw	r18, r0
    4162:	a0 01       	movw	r20, r0
    4164:	80 01       	movw	r16, r0
    4166:	f0 01       	movw	r30, r0
    4168:	a0 e8       	ldi	r26, 0x80	; 128
    416a:	0e 0f       	add	r16, r30
    416c:	1f 1f       	adc	r17, r31
    416e:	0a 1e       	adc	r0, r26
    4170:	51 1d       	adc	r21, r1
    4172:	60 1b       	sub	r22, r16
    4174:	71 0b       	sbc	r23, r17
    4176:	80 09       	sbc	r24, r0
    4178:	b5 0b       	sbc	r27, r21
    417a:	48 f4       	brcc	.+18     	; 0x418e <sqrt+0x56>
    417c:	60 0f       	add	r22, r16
    417e:	71 1f       	adc	r23, r17
    4180:	80 1d       	adc	r24, r0
    4182:	b5 1f       	adc	r27, r21
    4184:	0e 1b       	sub	r16, r30
    4186:	1f 0b       	sbc	r17, r31
    4188:	0a 0a       	sbc	r0, r26
    418a:	51 09       	sbc	r21, r1
    418c:	07 c0       	rjmp	.+14     	; 0x419c <sqrt+0x64>
    418e:	2e 0f       	add	r18, r30
    4190:	3f 1f       	adc	r19, r31
    4192:	4a 1f       	adc	r20, r26
    4194:	0e 0f       	add	r16, r30
    4196:	1f 1f       	adc	r17, r31
    4198:	0a 1e       	adc	r0, r26
    419a:	51 1d       	adc	r21, r1
    419c:	66 0f       	add	r22, r22
    419e:	77 1f       	adc	r23, r23
    41a0:	88 1f       	adc	r24, r24
    41a2:	bb 1f       	adc	r27, r27
    41a4:	a6 95       	lsr	r26
    41a6:	f7 95       	ror	r31
    41a8:	e7 95       	ror	r30
    41aa:	f8 f6       	brcc	.-66     	; 0x416a <sqrt+0x32>
    41ac:	06 17       	cp	r16, r22
    41ae:	17 07       	cpc	r17, r23
    41b0:	08 06       	cpc	r0, r24
    41b2:	5b 07       	cpc	r21, r27
    41b4:	21 1d       	adc	r18, r1
    41b6:	31 1d       	adc	r19, r1
    41b8:	41 1d       	adc	r20, r1
    41ba:	0f 91       	pop	r16
    41bc:	1f 91       	pop	r17
    41be:	b9 01       	movw	r22, r18
    41c0:	84 2f       	mov	r24, r20
    41c2:	91 58       	subi	r25, 0x81	; 129
    41c4:	88 0f       	add	r24, r24
    41c6:	96 95       	lsr	r25
    41c8:	87 95       	ror	r24
    41ca:	08 95       	ret

000041cc <square>:
    41cc:	9b 01       	movw	r18, r22
    41ce:	ac 01       	movw	r20, r24
    41d0:	00 cf       	rjmp	.-512    	; 0x3fd2 <__mulsf3>
    41d2:	19 f4       	brne	.+6      	; 0x41da <square+0xe>
    41d4:	0e f0       	brts	.+2      	; 0x41d8 <square+0xc>
    41d6:	a8 ce       	rjmp	.-688    	; 0x3f28 <__fp_inf>
    41d8:	f1 ce       	rjmp	.-542    	; 0x3fbc <__fp_zero>
    41da:	ac ce       	rjmp	.-680    	; 0x3f34 <__fp_nan>

000041dc <exp>:
    41dc:	d5 de       	rcall	.-598    	; 0x3f88 <__fp_splitA>
    41de:	c8 f3       	brcs	.-14     	; 0x41d2 <square+0x6>
    41e0:	96 38       	cpi	r25, 0x86	; 134
    41e2:	c0 f7       	brcc	.-16     	; 0x41d4 <square+0x8>
    41e4:	07 f8       	bld	r0, 7
    41e6:	0f 92       	push	r0
    41e8:	e8 94       	clt
    41ea:	2b e3       	ldi	r18, 0x3B	; 59
    41ec:	3a ea       	ldi	r19, 0xAA	; 170
    41ee:	48 eb       	ldi	r20, 0xB8	; 184
    41f0:	5f e7       	ldi	r21, 0x7F	; 127
    41f2:	fd de       	rcall	.-518    	; 0x3fee <__mulsf3_pse>
    41f4:	0f 92       	push	r0
    41f6:	0f 92       	push	r0
    41f8:	0f 92       	push	r0
    41fa:	4d b7       	in	r20, 0x3d	; 61
    41fc:	5e b7       	in	r21, 0x3e	; 62
    41fe:	0f 92       	push	r0
    4200:	d7 d0       	rcall	.+430    	; 0x43b0 <modf>
    4202:	e4 ee       	ldi	r30, 0xE4	; 228
    4204:	f0 e0       	ldi	r31, 0x00	; 0
    4206:	2d d0       	rcall	.+90     	; 0x4262 <__fp_powser>
    4208:	4f 91       	pop	r20
    420a:	5f 91       	pop	r21
    420c:	ef 91       	pop	r30
    420e:	ff 91       	pop	r31
    4210:	e5 95       	asr	r30
    4212:	ee 1f       	adc	r30, r30
    4214:	ff 1f       	adc	r31, r31
    4216:	49 f0       	breq	.+18     	; 0x422a <exp+0x4e>
    4218:	fe 57       	subi	r31, 0x7E	; 126
    421a:	e0 68       	ori	r30, 0x80	; 128
    421c:	44 27       	eor	r20, r20
    421e:	ee 0f       	add	r30, r30
    4220:	44 1f       	adc	r20, r20
    4222:	fa 95       	dec	r31
    4224:	e1 f7       	brne	.-8      	; 0x421e <exp+0x42>
    4226:	41 95       	neg	r20
    4228:	55 0b       	sbc	r21, r21
    422a:	49 d0       	rcall	.+146    	; 0x42be <ldexp>
    422c:	0f 90       	pop	r0
    422e:	07 fe       	sbrs	r0, 7
    4230:	3d c0       	rjmp	.+122    	; 0x42ac <inverse>
    4232:	08 95       	ret

00004234 <__fp_mpack>:
    4234:	9f 3f       	cpi	r25, 0xFF	; 255
    4236:	49 f0       	breq	.+18     	; 0x424a <__fp_mpack+0x16>
    4238:	91 50       	subi	r25, 0x01	; 1
    423a:	28 f4       	brcc	.+10     	; 0x4246 <__fp_mpack+0x12>
    423c:	86 95       	lsr	r24
    423e:	77 95       	ror	r23
    4240:	67 95       	ror	r22
    4242:	b7 95       	ror	r27
    4244:	9f 5f       	subi	r25, 0xFF	; 255
    4246:	80 38       	cpi	r24, 0x80	; 128
    4248:	9f 4f       	sbci	r25, 0xFF	; 255
    424a:	88 0f       	add	r24, r24
    424c:	96 95       	lsr	r25
    424e:	87 95       	ror	r24
    4250:	97 f9       	bld	r25, 7
    4252:	08 95       	ret

00004254 <__fp_norm2>:
    4254:	91 50       	subi	r25, 0x01	; 1
    4256:	50 40       	sbci	r21, 0x00	; 0
    4258:	66 0f       	add	r22, r22
    425a:	77 1f       	adc	r23, r23
    425c:	88 1f       	adc	r24, r24
    425e:	d2 f7       	brpl	.-12     	; 0x4254 <__fp_norm2>
    4260:	08 95       	ret

00004262 <__fp_powser>:
    4262:	df 93       	push	r29
    4264:	cf 93       	push	r28
    4266:	1f 93       	push	r17
    4268:	0f 93       	push	r16
    426a:	ff 92       	push	r15
    426c:	ef 92       	push	r14
    426e:	df 92       	push	r13
    4270:	7b 01       	movw	r14, r22
    4272:	8c 01       	movw	r16, r24
    4274:	68 94       	set
    4276:	05 c0       	rjmp	.+10     	; 0x4282 <__fp_powser+0x20>
    4278:	da 2e       	mov	r13, r26
    427a:	ef 01       	movw	r28, r30
    427c:	b6 de       	rcall	.-660    	; 0x3fea <__mulsf3x>
    427e:	fe 01       	movw	r30, r28
    4280:	e8 94       	clt
    4282:	a5 91       	lpm	r26, Z+
    4284:	25 91       	lpm	r18, Z+
    4286:	35 91       	lpm	r19, Z+
    4288:	45 91       	lpm	r20, Z+
    428a:	55 91       	lpm	r21, Z+
    428c:	ae f3       	brts	.-22     	; 0x4278 <__fp_powser+0x16>
    428e:	ef 01       	movw	r28, r30
    4290:	ff dc       	rcall	.-1538   	; 0x3c90 <__addsf3x>
    4292:	fe 01       	movw	r30, r28
    4294:	97 01       	movw	r18, r14
    4296:	a8 01       	movw	r20, r16
    4298:	da 94       	dec	r13
    429a:	79 f7       	brne	.-34     	; 0x427a <__fp_powser+0x18>
    429c:	df 90       	pop	r13
    429e:	ef 90       	pop	r14
    42a0:	ff 90       	pop	r15
    42a2:	0f 91       	pop	r16
    42a4:	1f 91       	pop	r17
    42a6:	cf 91       	pop	r28
    42a8:	df 91       	pop	r29
    42aa:	08 95       	ret

000042ac <inverse>:
    42ac:	9b 01       	movw	r18, r22
    42ae:	ac 01       	movw	r20, r24
    42b0:	60 e0       	ldi	r22, 0x00	; 0
    42b2:	70 e0       	ldi	r23, 0x00	; 0
    42b4:	80 e8       	ldi	r24, 0x80	; 128
    42b6:	9f e3       	ldi	r25, 0x3F	; 63
    42b8:	42 cd       	rjmp	.-1404   	; 0x3d3e <__divsf3>
    42ba:	36 ce       	rjmp	.-916    	; 0x3f28 <__fp_inf>
    42bc:	bb cf       	rjmp	.-138    	; 0x4234 <__fp_mpack>

000042be <ldexp>:
    42be:	64 de       	rcall	.-824    	; 0x3f88 <__fp_splitA>
    42c0:	e8 f3       	brcs	.-6      	; 0x42bc <inverse+0x10>
    42c2:	99 23       	and	r25, r25
    42c4:	d9 f3       	breq	.-10     	; 0x42bc <inverse+0x10>
    42c6:	94 0f       	add	r25, r20
    42c8:	51 1d       	adc	r21, r1
    42ca:	bb f3       	brvs	.-18     	; 0x42ba <inverse+0xe>
    42cc:	91 50       	subi	r25, 0x01	; 1
    42ce:	50 40       	sbci	r21, 0x00	; 0
    42d0:	94 f0       	brlt	.+36     	; 0x42f6 <ldexp+0x38>
    42d2:	59 f0       	breq	.+22     	; 0x42ea <ldexp+0x2c>
    42d4:	88 23       	and	r24, r24
    42d6:	32 f0       	brmi	.+12     	; 0x42e4 <ldexp+0x26>
    42d8:	66 0f       	add	r22, r22
    42da:	77 1f       	adc	r23, r23
    42dc:	88 1f       	adc	r24, r24
    42de:	91 50       	subi	r25, 0x01	; 1
    42e0:	50 40       	sbci	r21, 0x00	; 0
    42e2:	c1 f7       	brne	.-16     	; 0x42d4 <ldexp+0x16>
    42e4:	9e 3f       	cpi	r25, 0xFE	; 254
    42e6:	51 05       	cpc	r21, r1
    42e8:	44 f7       	brge	.-48     	; 0x42ba <inverse+0xe>
    42ea:	88 0f       	add	r24, r24
    42ec:	91 1d       	adc	r25, r1
    42ee:	96 95       	lsr	r25
    42f0:	87 95       	ror	r24
    42f2:	97 f9       	bld	r25, 7
    42f4:	08 95       	ret
    42f6:	5f 3f       	cpi	r21, 0xFF	; 255
    42f8:	ac f0       	brlt	.+42     	; 0x4324 <ldexp+0x66>
    42fa:	98 3e       	cpi	r25, 0xE8	; 232
    42fc:	9c f0       	brlt	.+38     	; 0x4324 <ldexp+0x66>
    42fe:	bb 27       	eor	r27, r27
    4300:	86 95       	lsr	r24
    4302:	77 95       	ror	r23
    4304:	67 95       	ror	r22
    4306:	b7 95       	ror	r27
    4308:	08 f4       	brcc	.+2      	; 0x430c <ldexp+0x4e>
    430a:	b1 60       	ori	r27, 0x01	; 1
    430c:	93 95       	inc	r25
    430e:	c1 f7       	brne	.-16     	; 0x4300 <ldexp+0x42>
    4310:	bb 0f       	add	r27, r27
    4312:	58 f7       	brcc	.-42     	; 0x42ea <ldexp+0x2c>
    4314:	11 f4       	brne	.+4      	; 0x431a <ldexp+0x5c>
    4316:	60 ff       	sbrs	r22, 0
    4318:	e8 cf       	rjmp	.-48     	; 0x42ea <ldexp+0x2c>
    431a:	6f 5f       	subi	r22, 0xFF	; 255
    431c:	7f 4f       	sbci	r23, 0xFF	; 255
    431e:	8f 4f       	sbci	r24, 0xFF	; 255
    4320:	9f 4f       	sbci	r25, 0xFF	; 255
    4322:	e3 cf       	rjmp	.-58     	; 0x42ea <ldexp+0x2c>
    4324:	4c ce       	rjmp	.-872    	; 0x3fbe <__fp_szero>
    4326:	0e f0       	brts	.+2      	; 0x432a <ldexp+0x6c>
    4328:	85 cf       	rjmp	.-246    	; 0x4234 <__fp_mpack>
    432a:	04 ce       	rjmp	.-1016   	; 0x3f34 <__fp_nan>
    432c:	68 94       	set
    432e:	fc cd       	rjmp	.-1032   	; 0x3f28 <__fp_inf>

00004330 <log>:
    4330:	2b de       	rcall	.-938    	; 0x3f88 <__fp_splitA>
    4332:	c8 f3       	brcs	.-14     	; 0x4326 <ldexp+0x68>
    4334:	99 23       	and	r25, r25
    4336:	d1 f3       	breq	.-12     	; 0x432c <ldexp+0x6e>
    4338:	c6 f3       	brts	.-16     	; 0x432a <ldexp+0x6c>
    433a:	df 93       	push	r29
    433c:	cf 93       	push	r28
    433e:	1f 93       	push	r17
    4340:	0f 93       	push	r16
    4342:	ff 92       	push	r15
    4344:	c9 2f       	mov	r28, r25
    4346:	dd 27       	eor	r29, r29
    4348:	88 23       	and	r24, r24
    434a:	2a f0       	brmi	.+10     	; 0x4356 <log+0x26>
    434c:	21 97       	sbiw	r28, 0x01	; 1
    434e:	66 0f       	add	r22, r22
    4350:	77 1f       	adc	r23, r23
    4352:	88 1f       	adc	r24, r24
    4354:	da f7       	brpl	.-10     	; 0x434c <log+0x1c>
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	40 e8       	ldi	r20, 0x80	; 128
    435c:	5f eb       	ldi	r21, 0xBF	; 191
    435e:	9f e3       	ldi	r25, 0x3F	; 63
    4360:	88 39       	cpi	r24, 0x98	; 152
    4362:	20 f0       	brcs	.+8      	; 0x436c <log+0x3c>
    4364:	80 3e       	cpi	r24, 0xE0	; 224
    4366:	30 f0       	brcs	.+12     	; 0x4374 <log+0x44>
    4368:	21 96       	adiw	r28, 0x01	; 1
    436a:	8f 77       	andi	r24, 0x7F	; 127
    436c:	80 dc       	rcall	.-1792   	; 0x3c6e <__addsf3>
    436e:	ec e0       	ldi	r30, 0x0C	; 12
    4370:	f1 e0       	ldi	r31, 0x01	; 1
    4372:	03 c0       	rjmp	.+6      	; 0x437a <log+0x4a>
    4374:	7c dc       	rcall	.-1800   	; 0x3c6e <__addsf3>
    4376:	e9 e3       	ldi	r30, 0x39	; 57
    4378:	f1 e0       	ldi	r31, 0x01	; 1
    437a:	73 df       	rcall	.-282    	; 0x4262 <__fp_powser>
    437c:	8b 01       	movw	r16, r22
    437e:	be 01       	movw	r22, r28
    4380:	ec 01       	movw	r28, r24
    4382:	fb 2e       	mov	r15, r27
    4384:	6f 57       	subi	r22, 0x7F	; 127
    4386:	71 09       	sbc	r23, r1
    4388:	75 95       	asr	r23
    438a:	77 1f       	adc	r23, r23
    438c:	88 0b       	sbc	r24, r24
    438e:	99 0b       	sbc	r25, r25
    4390:	6c dd       	rcall	.-1320   	; 0x3e6a <__floatsisf>
    4392:	28 e1       	ldi	r18, 0x18	; 24
    4394:	32 e7       	ldi	r19, 0x72	; 114
    4396:	41 e3       	ldi	r20, 0x31	; 49
    4398:	5f e3       	ldi	r21, 0x3F	; 63
    439a:	27 de       	rcall	.-946    	; 0x3fea <__mulsf3x>
    439c:	af 2d       	mov	r26, r15
    439e:	98 01       	movw	r18, r16
    43a0:	ae 01       	movw	r20, r28
    43a2:	ff 90       	pop	r15
    43a4:	0f 91       	pop	r16
    43a6:	1f 91       	pop	r17
    43a8:	cf 91       	pop	r28
    43aa:	df 91       	pop	r29
    43ac:	71 dc       	rcall	.-1822   	; 0x3c90 <__addsf3x>
    43ae:	d3 cd       	rjmp	.-1114   	; 0x3f56 <__fp_round>

000043b0 <modf>:
    43b0:	fa 01       	movw	r30, r20
    43b2:	dc 01       	movw	r26, r24
    43b4:	aa 0f       	add	r26, r26
    43b6:	bb 1f       	adc	r27, r27
    43b8:	9b 01       	movw	r18, r22
    43ba:	ac 01       	movw	r20, r24
    43bc:	bf 57       	subi	r27, 0x7F	; 127
    43be:	28 f4       	brcc	.+10     	; 0x43ca <modf+0x1a>
    43c0:	22 27       	eor	r18, r18
    43c2:	33 27       	eor	r19, r19
    43c4:	44 27       	eor	r20, r20
    43c6:	50 78       	andi	r21, 0x80	; 128
    43c8:	1f c0       	rjmp	.+62     	; 0x4408 <modf+0x58>
    43ca:	b7 51       	subi	r27, 0x17	; 23
    43cc:	88 f4       	brcc	.+34     	; 0x43f0 <modf+0x40>
    43ce:	ab 2f       	mov	r26, r27
    43d0:	00 24       	eor	r0, r0
    43d2:	46 95       	lsr	r20
    43d4:	37 95       	ror	r19
    43d6:	27 95       	ror	r18
    43d8:	01 1c       	adc	r0, r1
    43da:	a3 95       	inc	r26
    43dc:	d2 f3       	brmi	.-12     	; 0x43d2 <modf+0x22>
    43de:	00 20       	and	r0, r0
    43e0:	69 f0       	breq	.+26     	; 0x43fc <modf+0x4c>
    43e2:	22 0f       	add	r18, r18
    43e4:	33 1f       	adc	r19, r19
    43e6:	44 1f       	adc	r20, r20
    43e8:	b3 95       	inc	r27
    43ea:	da f3       	brmi	.-10     	; 0x43e2 <modf+0x32>
    43ec:	0d d0       	rcall	.+26     	; 0x4408 <modf+0x58>
    43ee:	3e cc       	rjmp	.-1924   	; 0x3c6c <__subsf3>
    43f0:	61 30       	cpi	r22, 0x01	; 1
    43f2:	71 05       	cpc	r23, r1
    43f4:	a0 e8       	ldi	r26, 0x80	; 128
    43f6:	8a 07       	cpc	r24, r26
    43f8:	b9 46       	sbci	r27, 0x69	; 105
    43fa:	30 f4       	brcc	.+12     	; 0x4408 <modf+0x58>
    43fc:	9b 01       	movw	r18, r22
    43fe:	ac 01       	movw	r20, r24
    4400:	66 27       	eor	r22, r22
    4402:	77 27       	eor	r23, r23
    4404:	88 27       	eor	r24, r24
    4406:	90 78       	andi	r25, 0x80	; 128
    4408:	30 96       	adiw	r30, 0x00	; 0
    440a:	21 f0       	breq	.+8      	; 0x4414 <modf+0x64>
    440c:	20 83       	st	Z, r18
    440e:	31 83       	std	Z+1, r19	; 0x01
    4410:	42 83       	std	Z+2, r20	; 0x02
    4412:	53 83       	std	Z+3, r21	; 0x03
    4414:	08 95       	ret

00004416 <__udivmodhi4>:
    4416:	aa 1b       	sub	r26, r26
    4418:	bb 1b       	sub	r27, r27
    441a:	51 e1       	ldi	r21, 0x11	; 17
    441c:	07 c0       	rjmp	.+14     	; 0x442c <__udivmodhi4_ep>

0000441e <__udivmodhi4_loop>:
    441e:	aa 1f       	adc	r26, r26
    4420:	bb 1f       	adc	r27, r27
    4422:	a6 17       	cp	r26, r22
    4424:	b7 07       	cpc	r27, r23
    4426:	10 f0       	brcs	.+4      	; 0x442c <__udivmodhi4_ep>
    4428:	a6 1b       	sub	r26, r22
    442a:	b7 0b       	sbc	r27, r23

0000442c <__udivmodhi4_ep>:
    442c:	88 1f       	adc	r24, r24
    442e:	99 1f       	adc	r25, r25
    4430:	5a 95       	dec	r21
    4432:	a9 f7       	brne	.-22     	; 0x441e <__udivmodhi4_loop>
    4434:	80 95       	com	r24
    4436:	90 95       	com	r25
    4438:	bc 01       	movw	r22, r24
    443a:	cd 01       	movw	r24, r26
    443c:	08 95       	ret

0000443e <__divmodhi4>:
    443e:	97 fb       	bst	r25, 7
    4440:	09 2e       	mov	r0, r25
    4442:	07 26       	eor	r0, r23
    4444:	0a d0       	rcall	.+20     	; 0x445a <__divmodhi4_neg1>
    4446:	77 fd       	sbrc	r23, 7
    4448:	04 d0       	rcall	.+8      	; 0x4452 <__divmodhi4_neg2>
    444a:	e5 df       	rcall	.-54     	; 0x4416 <__udivmodhi4>
    444c:	06 d0       	rcall	.+12     	; 0x445a <__divmodhi4_neg1>
    444e:	00 20       	and	r0, r0
    4450:	1a f4       	brpl	.+6      	; 0x4458 <__divmodhi4_exit>

00004452 <__divmodhi4_neg2>:
    4452:	70 95       	com	r23
    4454:	61 95       	neg	r22
    4456:	7f 4f       	sbci	r23, 0xFF	; 255

00004458 <__divmodhi4_exit>:
    4458:	08 95       	ret

0000445a <__divmodhi4_neg1>:
    445a:	f6 f7       	brtc	.-4      	; 0x4458 <__divmodhi4_exit>
    445c:	90 95       	com	r25
    445e:	81 95       	neg	r24
    4460:	9f 4f       	sbci	r25, 0xFF	; 255
    4462:	08 95       	ret

00004464 <__udivmodsi4>:
    4464:	a1 e2       	ldi	r26, 0x21	; 33
    4466:	1a 2e       	mov	r1, r26
    4468:	aa 1b       	sub	r26, r26
    446a:	bb 1b       	sub	r27, r27
    446c:	fd 01       	movw	r30, r26
    446e:	0d c0       	rjmp	.+26     	; 0x448a <__udivmodsi4_ep>

00004470 <__udivmodsi4_loop>:
    4470:	aa 1f       	adc	r26, r26
    4472:	bb 1f       	adc	r27, r27
    4474:	ee 1f       	adc	r30, r30
    4476:	ff 1f       	adc	r31, r31
    4478:	a2 17       	cp	r26, r18
    447a:	b3 07       	cpc	r27, r19
    447c:	e4 07       	cpc	r30, r20
    447e:	f5 07       	cpc	r31, r21
    4480:	20 f0       	brcs	.+8      	; 0x448a <__udivmodsi4_ep>
    4482:	a2 1b       	sub	r26, r18
    4484:	b3 0b       	sbc	r27, r19
    4486:	e4 0b       	sbc	r30, r20
    4488:	f5 0b       	sbc	r31, r21

0000448a <__udivmodsi4_ep>:
    448a:	66 1f       	adc	r22, r22
    448c:	77 1f       	adc	r23, r23
    448e:	88 1f       	adc	r24, r24
    4490:	99 1f       	adc	r25, r25
    4492:	1a 94       	dec	r1
    4494:	69 f7       	brne	.-38     	; 0x4470 <__udivmodsi4_loop>
    4496:	60 95       	com	r22
    4498:	70 95       	com	r23
    449a:	80 95       	com	r24
    449c:	90 95       	com	r25
    449e:	9b 01       	movw	r18, r22
    44a0:	ac 01       	movw	r20, r24
    44a2:	bd 01       	movw	r22, r26
    44a4:	cf 01       	movw	r24, r30
    44a6:	08 95       	ret

000044a8 <__divmodsi4>:
    44a8:	97 fb       	bst	r25, 7
    44aa:	09 2e       	mov	r0, r25
    44ac:	05 26       	eor	r0, r21
    44ae:	0e d0       	rcall	.+28     	; 0x44cc <__divmodsi4_neg1>
    44b0:	57 fd       	sbrc	r21, 7
    44b2:	04 d0       	rcall	.+8      	; 0x44bc <__divmodsi4_neg2>
    44b4:	d7 df       	rcall	.-82     	; 0x4464 <__udivmodsi4>
    44b6:	0a d0       	rcall	.+20     	; 0x44cc <__divmodsi4_neg1>
    44b8:	00 1c       	adc	r0, r0
    44ba:	38 f4       	brcc	.+14     	; 0x44ca <__divmodsi4_exit>

000044bc <__divmodsi4_neg2>:
    44bc:	50 95       	com	r21
    44be:	40 95       	com	r20
    44c0:	30 95       	com	r19
    44c2:	21 95       	neg	r18
    44c4:	3f 4f       	sbci	r19, 0xFF	; 255
    44c6:	4f 4f       	sbci	r20, 0xFF	; 255
    44c8:	5f 4f       	sbci	r21, 0xFF	; 255

000044ca <__divmodsi4_exit>:
    44ca:	08 95       	ret

000044cc <__divmodsi4_neg1>:
    44cc:	f6 f7       	brtc	.-4      	; 0x44ca <__divmodsi4_exit>
    44ce:	90 95       	com	r25
    44d0:	80 95       	com	r24
    44d2:	70 95       	com	r23
    44d4:	61 95       	neg	r22
    44d6:	7f 4f       	sbci	r23, 0xFF	; 255
    44d8:	8f 4f       	sbci	r24, 0xFF	; 255
    44da:	9f 4f       	sbci	r25, 0xFF	; 255
    44dc:	08 95       	ret

000044de <_exit>:
    44de:	f8 94       	cli

000044e0 <__stop_program>:
    44e0:	ff cf       	rjmp	.-2      	; 0x44e0 <__stop_program>
