/*
		This file has been auto-generated by WebbotLib tools V1.1
				** DO NOT MODIFY BY HAND **
*/
#ifndef _HARDWARE_H_
#define _HARDWARE_H_
#include "xhardware.h"

// ------------------- uart1 -------------------

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
	return uartSendByte(uart1,byte);
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(uart1);
}

// Create hardware UART uart1
HW_UART _uart1 = MAKE_UART_BUFFERED(null,null,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
	uartTransmitService(uart1);
}
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
	uartReceiveService(uart1);
}
#endif

// ------------------- lbComm -------------------

// Create a routine to write bytes to lbComm
// You can set rprintf to use it by calling rprintfInit(&lbCommSendByte)
MAKE_WRITER(lbCommSendByte){
	return uartSendByte(lbComm,byte);
}

// Create a routine to read a byte from lbComm
// Returns -1 if there was no data
MAKE_READER( lbCommGetByte){
	return uartGetByte(lbComm);
}

// Create hardware UART lbComm
HW_UART _lbComm = MAKE_UART_BUFFERED(null,null,UCSR3A,UCSR3B,UBRR3L,UBRR3H,UDR3,null,BV(U2X3),J0,J1,&lbCommGetByte,&lbCommSendByte);

#ifndef USART3_TX_vect
# error Uart3 Tx complete vector undefined
#else
ISR(USART3_TX_vect){
	uartTransmitService(lbComm);
}
#endif

#ifndef USART3_RX_vect
# error Uart3 Rx complete vector undefined
#else
ISR(USART3_RX_vect){
	uartReceiveService(lbComm);
}
#endif

// ------------------- uart0 -------------------

// Create a routine to write bytes to uart0
// You can set rprintf to use it by calling rprintfInit(&uart0SendByte)
MAKE_WRITER(uart0SendByte){
	return uartSendByte(uart0,byte);
}

// Create a routine to read a byte from uart0
// Returns -1 if there was no data
MAKE_READER( uart0GetByte){
	return uartGetByte(uart0);
}

// Create hardware UART uart0
HW_UART _uart0 = MAKE_UART_BUFFERED(null,null,UCSR0A,UCSR0B,UBRR0L,UBRR0H,UDR0,null,BV(U2X0),E0,E1,&uart0GetByte,&uart0SendByte);

#ifndef USART0_TX_vect
# error Uart0 Tx complete vector undefined
#else
ISR(USART0_TX_vect){
	uartTransmitService(uart0);
}
#endif

#ifndef USART0_RX_vect
# error Uart0 Rx complete vector undefined
#else
ISR(USART0_RX_vect){
	uartReceiveService(uart0);
}
#endif

// ----------- Define the ADC channels ----------
const uint8_t NUM_ADC_CHANNELS = 16;
const uint16_t PROGMEM AVcc_MV = 5000;

// ----------- My devices -----------------------
SWITCH button = MAKE_SWITCH(D5);
SEGLED led_display = MAKE_SEGLED(C3,C2,C0,D6,D7,C4,C5,null,false);
static SEGLED_LIST marquee_list[] = {
	&led_display
};
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE marquee = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
	return marqueeSendByte(&marquee,byte);
}
Sharp_GP2Y0A21YK ir_0 = MAKE_Sharp_GP2Y0A21YK(ADC0);
Sharp_GP2D12 ir_1 = MAKE_Sharp_GP2D12(ADC1);
Sharp_GP2D12 ir_2 = MAKE_Sharp_GP2D12(ADC2);
Sharp_GP2Y0A21YK ir_3 = MAKE_Sharp_GP2Y0A21YK(ADC3);
Sharp_GP2Y0A21YK ir_4 = MAKE_Sharp_GP2Y0A21YK(ADC4);

// ----------- Initialise built in devices ------
void sysInitHardware(void){
	SWITCH_init(&button);
	uartInit(uart1,115200);
	segled_init(&led_display);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	distanceInit(ir_0);
	distanceInit(ir_1);
	distanceInit(ir_2);
	distanceInit(ir_3);
	uartInit(lbComm,38400);
	distanceInit(ir_4);
	setErrorLog(&uart0SendByte);
	rprintfInit(&uart0SendByte);
	uartInit(uart0,38400);
}
// ----------- Register the statusLED -----------
void registerLED(void){
	statusLEDregister(C1,false);
}

// ----------- Ports are configured on the fly --
void configure_ports(void){
}

#endif
