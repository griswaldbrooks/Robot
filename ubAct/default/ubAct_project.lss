
ubAct_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800200  00007072  00007106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007072  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000093a  008002ea  008002ea  000071f0  2**0
                  ALLOC
  3 .debug_aranges 000002a0  00000000  00000000  000071f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000129d  00000000  00000000  00007490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ade6  00000000  00000000  0000872d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000024ee  00000000  00000000  00013513  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004e2a  00000000  00000000  00015a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e00  00000000  00000000  0001a82c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002314  00000000  00000000  0001b62c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000047d9  00000000  00000000  0001d940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00022119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 02 	jmp	0x578	; 0x578 <__ctors_end>
       4:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
       8:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
       c:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      10:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      14:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      18:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      1c:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      20:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      24:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      28:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      2c:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      30:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      34:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__vector_13>
      38:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__vector_14>
      3c:	0c 94 46 04 	jmp	0x88c	; 0x88c <__vector_15>
      40:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_16>
      44:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_17>
      48:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__vector_18>
      4c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_19>
      50:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_20>
      54:	0c 94 12 03 	jmp	0x624	; 0x624 <__vector_21>
      58:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__vector_22>
      5c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_23>
      60:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      64:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_25>
      68:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      6c:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__vector_27>
      70:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      74:	0c 94 13 30 	jmp	0x6026	; 0x6026 <__vector_29>
      78:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      7c:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_31>
      80:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_32>
      84:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_33>
      88:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__vector_34>
      8c:	0c 94 ca 04 	jmp	0x994	; 0x994 <__vector_35>
      90:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__vector_36>
      94:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      98:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__vector_38>
      9c:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      a0:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      a4:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__vector_41>
      a8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_42>
      ac:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_43>
      b0:	0c 94 56 06 	jmp	0xcac	; 0xcac <__vector_44>
      b4:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_45>
      b8:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__vector_46>
      bc:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__vector_47>
      c0:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__vector_48>
      c4:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_49>
      c8:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__vector_50>
      cc:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      d0:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      d4:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      d8:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_54>
      dc:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__bad_interrupt>
      e0:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__vector_56>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 07       	cpc	r19, r31
     130:	63 42       	sbci	r22, 0x23	; 35
     132:	36 b7       	in	r19, 0x36	; 54
     134:	9b d8       	rcall	.-3786   	; 0xfffff26c <__eeprom_end+0xff7ef26c>
     136:	a7 1a       	sub	r10, r23
     138:	39 68       	ori	r19, 0x89	; 137
     13a:	56 18       	sub	r5, r6
     13c:	ae ba       	out	0x1e, r10	; 30
     13e:	ab 55       	subi	r26, 0x5B	; 91
     140:	8c 1d       	adc	r24, r12
     142:	3c b7       	in	r19, 0x3c	; 60
     144:	cc 57       	subi	r28, 0x7C	; 124
     146:	63 bd       	out	0x23, r22	; 35
     148:	6d ed       	ldi	r22, 0xDD	; 221
     14a:	fd 75       	andi	r31, 0x5D	; 93
     14c:	3e f6       	brtc	.-114    	; 0xdc <__SREG__+0x9d>
     14e:	17 72       	andi	r17, 0x27	; 39
     150:	31 bf       	out	0x31, r19	; 49
     152:	00 00       	nop
     154:	00 80       	ld	r0, Z
     156:	3f 08       	sbc	r3, r15
     158:	00 00       	nop
     15a:	00 be       	out	0x30, r0	; 48
     15c:	92 24       	eor	r9, r2
     15e:	49 12       	cpse	r4, r25
     160:	3e ab       	std	Y+54, r19	; 0x36
     162:	aa aa       	std	Y+50, r10	; 0x32
     164:	2a be       	out	0x3a, r2	; 58
     166:	cd cc       	rjmp	.-1638   	; 0xfffffb02 <__eeprom_end+0xff7efb02>
     168:	cc 4c       	sbci	r28, 0xCC	; 204
     16a:	3e 00       	.word	0x003e	; ????
     16c:	00 00       	nop
     16e:	80 be       	out	0x30, r8	; 48
     170:	ab aa       	std	Y+51, r10	; 0x33
     172:	aa aa       	std	Y+50, r10	; 0x32
     174:	3e 00       	.word	0x003e	; ????
     176:	00 00       	nop
     178:	00 bf       	out	0x30, r16	; 48
     17a:	00 00       	nop
     17c:	00 80       	ld	r0, Z
     17e:	3f 00       	.word	0x003f	; ????
     180:	00 00       	nop
     182:	00 00       	nop
     184:	08 41       	sbci	r16, 0x18	; 24
     186:	78 d3       	rcall	.+1776   	; 0x878 <__vector_19+0x44>
     188:	bb 43       	sbci	r27, 0x3B	; 59
     18a:	87 d1       	rcall	.+782    	; 0x49a <__c.3390>
     18c:	13 3d       	cpi	r17, 0xD3	; 211
     18e:	19 0e       	add	r1, r25
     190:	3c c3       	rjmp	.+1656   	; 0x80a <__vector_18+0x2e>
     192:	bd 42       	sbci	r27, 0x2D	; 45
     194:	82 ad       	ldd	r24, Z+58	; 0x3a
     196:	2b 3e       	cpi	r18, 0xEB	; 235
     198:	68 ec       	ldi	r22, 0xC8	; 200
     19a:	82 76       	andi	r24, 0x62	; 98
     19c:	be d9       	rcall	.-3204   	; 0xfffff51a <__eeprom_end+0xff7ef51a>
     19e:	8f e1       	ldi	r24, 0x1F	; 31
     1a0:	a9 3e       	cpi	r26, 0xE9	; 233
     1a2:	4c 80       	ldd	r4, Y+4	; 0x04
     1a4:	ef ff       	.word	0xffef	; ????
     1a6:	be 01       	movw	r22, r28
     1a8:	c4 ff       	sbrs	r28, 4
     1aa:	7f 3f       	cpi	r23, 0xFF	; 255
     1ac:	00 00       	nop
     1ae:	00 00       	nop
	...

000001b1 <_PORTB>:
     1b1:	25 00 24 00 23 00                                   %.$.#.

000001b7 <_PORTC>:
     1b7:	28 00 27 00 26 00                                   (.'.&.

000001bd <_PORTD>:
     1bd:	2b 00 2a 00 29 00                                   +.*.).

000001c3 <_PORTE>:
     1c3:	2e 00 2d 00 2c 00                                   ..-.,.

000001c9 <_PORTG>:
     1c9:	34 00 33 00 32 00                                   4.3.2.

000001cf <_PORTH>:
     1cf:	02 01 01 01 00 01                                   ......

000001d5 <_PORTJ>:
     1d5:	05 01 04 01 03 01                                   ......

000001db <_PORTL>:
     1db:	0b 01 0a 01 09 01                                   ......

000001e1 <_B4>:
     1e1:	b1 01 10                                            ...

000001e4 <_B5>:
     1e4:	b1 01 20                                            .. 

000001e7 <_B6>:
     1e7:	b1 01 40                                            ..@

000001ea <_B7>:
     1ea:	b1 01 80                                            ...

000001ed <_C0>:
     1ed:	b7 01 01                                            ...

000001f0 <_C1>:
     1f0:	b7 01 02                                            ...

000001f3 <_C2>:
     1f3:	b7 01 04                                            ...

000001f6 <_C3>:
     1f6:	b7 01 08                                            ...

000001f9 <_C4>:
     1f9:	b7 01 10                                            ...

000001fc <_C5>:
     1fc:	b7 01 20                                            .. 

000001ff <_D2>:
     1ff:	bd 01 04                                            ...

00000202 <_D3>:
     202:	bd 01 08                                            ...

00000205 <_D5>:
     205:	bd 01 20                                            .. 

00000208 <_D6>:
     208:	bd 01 40                                            ..@

0000020b <_D7>:
     20b:	bd 01 80                                            ...

0000020e <_E0>:
     20e:	c3 01 01                                            ...

00000211 <_E1>:
     211:	c3 01 02                                            ...

00000214 <_E3>:
     214:	c3 01 08                                            ...

00000217 <_E4>:
     217:	c3 01 10                                            ...

0000021a <_E5>:
     21a:	c3 01 20                                            .. 

0000021d <_E7>:
     21d:	c3 01 80                                            ...

00000220 <_G5>:
     220:	c9 01 20                                            .. 

00000223 <_H3>:
     223:	cf 01 08                                            ...

00000226 <_H4>:
     226:	cf 01 10                                            ...

00000229 <_H5>:
     229:	cf 01 20                                            .. 

0000022c <_H6>:
     22c:	cf 01 40                                            ..@

0000022f <_J0>:
     22f:	d5 01 01                                            ...

00000232 <_J1>:
     232:	d5 01 02                                            ...

00000235 <_L0>:
     235:	db 01 01                                            ...

00000238 <_L1>:
     238:	db 01 02                                            ...

0000023b <_L3>:
     23b:	db 01 08                                            ...

0000023e <_L4>:
     23e:	db 01 10                                            ...

00000241 <_L5>:
     241:	db 01 20                                            .. 

00000244 <PCINT_PINS>:
	...
     24c:	e1 01 e4 01 e7 01 ea 01 0e 02 2f 02 32 02           ........../.2.

0000025a <__timer0Compare>:
     25a:	fb 02 00 6e 00 02 47 00 35 00 02 44 00 06 ea 01     ...n..G.5..D....
     26a:	ff 02 00 6e 00 04 48 00 35 00 04 44 00 04 20 02     ...n..H.5..D.. .

0000027a <__timer1Compare>:
     27a:	0e 03 01 6f 00 02 88 00 36 00 02 80 00 06 e4 01     ...o....6.......
     28a:	12 03 01 6f 00 04 8a 00 36 00 04 80 00 04 e7 01     ...o....6.......
     29a:	16 03 01 6f 00 08 8c 00 36 00 08 80 00 02 ea 01     ...o....6.......

000002aa <__timer2Compare>:
     2aa:	25 03 02 70 00 02 b3 00 37 00 02 b0 00 06 e1 01     %..p....7.......
     2ba:	29 03 02 70 00 04 b4 00 37 00 04 b0 00 04 2c 02     )..p....7.....,.

000002ca <__timer3Compare>:
     2ca:	38 03 03 71 00 02 98 00 38 00 02 90 00 06 14 02     8..q....8.......
     2da:	3c 03 03 71 00 04 9a 00 38 00 04 90 00 04 17 02     <..q....8.......
     2ea:	40 03 03 71 00 08 9c 00 38 00 08 90 00 02 1a 02     @..q....8.......

000002fa <__timer4Compare>:
     2fa:	4f 03 04 72 00 02 a8 00 39 00 02 a0 00 06 23 02     O..r....9.....#.
     30a:	53 03 04 72 00 04 aa 00 39 00 04 a0 00 04 26 02     S..r....9.....&.
     31a:	57 03 04 72 00 08 ac 00 39 00 08 a0 00 02 29 02     W..r....9.....).

0000032a <__timer5Compare>:
     32a:	66 03 05 73 00 02 28 01 3a 00 02 20 01 06 3b 02     f..s..(.:.. ..;.
     33a:	6a 03 05 73 00 04 2a 01 3a 00 04 20 01 04 3e 02     j..s..*.:.. ..>.
     34a:	6e 03 05 73 00 08 2c 01 3a 00 08 20 01 02 41 02     n..s..,.:.. ..A.

0000035a <pgm_Timers>:
     35a:	f0 02 46 00 45 00 00 00 02 33 88 44 00 01 44 00     ..F.E....3.D..D.
     36a:	02 45 00 08 00 00 01 5a 02 6e 00 01 35 00 01 00     .E.....Z.n..5...
     37a:	00 00 00 01 00 00 01 00 00 01 00 00 03 03 84 00     ................
     38a:	81 00 ff 00 03 ff df 80 00 01 80 00 02 81 00 08     ................
     39a:	81 00 10 7a 02 6f 00 01 36 00 01 86 00 6f 00 20     ...z.o..6....o. 
     3aa:	36 00 20 81 00 40 00 00 1a 03 b2 00 b1 00 00 ff     6. ..@..........
     3ba:	02 33 88 b0 00 01 b0 00 02 b1 00 08 00 00 01 aa     .3..............
     3ca:	02 70 00 01 37 00 01 00 00 00 00 01 00 00 01 00     .p..7...........
     3da:	00 01 00 00 2d 03 94 00 91 00 ff 00 03 ff df 90     ....-...........
     3ea:	00 01 90 00 02 91 00 08 91 00 10 ca 02 71 00 01     .............q..
     3fa:	38 00 01 96 00 71 00 20 38 00 20 91 00 40 1d 02     8....q. 8. ..@..
     40a:	44 03 a4 00 a1 00 ff 00 03 ff df a0 00 01 a0 00     D...............
     41a:	02 a1 00 08 a1 00 10 fa 02 72 00 01 39 00 01 a6     .........r..9...
     42a:	00 72 00 20 39 00 20 a1 00 40 35 02 5b 03 24 01     .r. 9. ..@5.[.$.
     43a:	21 01 ff 00 03 ff df 20 01 01 20 01 02 21 01 08     !...... .. ..!..
     44a:	21 01 10 2a 03 73 00 01 3a 00 01 26 01 73 00 20     !..*.s..:..&.s. 
     45a:	3a 00 20 21 01 40 38 02                             :. !.@8.

00000462 <AVcc_MV>:
     462:	88 13                                               ..

00000464 <marquee_list>:
     464:	7d 02                                               }.

00000466 <__c.3114>:
     466:	4e 55 4c 4c 00                                      NULL.

0000046b <__c.3153>:
     46b:	20 7c 50 52 4f 42 4c 45 4d 20 59 3a 20 25 64 7c      |PROBLEM Y: %d|
     47b:	20 00                                                .

0000047d <__c.3151>:
     47d:	20 7c 50 52 4f 42 4c 45 4d 20 58 3a 20 25 64 7c      |PROBLEM X: %d|
     48d:	20 00                                                .

0000048f <__c.3410>:
     48f:	0b 00                                               ..

00000491 <__c.3405>:
     491:	5f 00                                               _.

00000493 <__c.3399>:
     493:	7c 0a 00                                            |..

00000496 <__c.3394>:
     496:	2e 00                                               ..

00000498 <__c.3392>:
     498:	23 00                                               #.

0000049a <__c.3390>:
     49a:	40 00                                               @.

0000049c <__c.3388>:
     49c:	4f 00                                               O.

0000049e <__c.3386>:
     49e:	6f 00                                               o.

000004a0 <__c.3384>:
     4a0:	52 00                                               R.

000004a2 <__c.3380>:
     4a2:	0a 00                                               ..

000004a4 <__c.3375>:
     4a4:	5f 00                                               _.

000004a6 <__c.3863>:
     4a6:	25 64 0a 00                                         %d..

000004aa <__c.3894>:
     4aa:	4c 6f 6f 70 3d 25 75 0a 00                          Loop=%u..

000004b3 <__c.3892>:
     4b3:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     4c3:	51 52 53 54 55 56 57 58 59 5a 0a 00                 QRSTUVWXYZ..

000004cf <c_Sharp_GP2D12>:
     4cf:	00 00 7d 1d 00 00 00 00                             ..}.....

000004d7 <c_Sharp_GP2Y0A21YK>:
     4d7:	00 00 a2 1d 00 00 00 00                             ........

000004df <HexChars>:
     4df:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

000004f0 <atoz>:
     4f0:	ee 3e 9c 7a 9e 8e f6 2e 0c 78 ae 1c aa 2a 3a ce     .>.z.....x...*:.
     500:	e6 0a b6 1e 38 7c b8 6e 76 da                       ....8|.nv.

0000050a <digits>:
     50a:	fc 60 da f2 66 b6 3e e0 fe e6                       .`..f.>...

00000514 <TimerPrescaleFactor>:
     514:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000520 <TimerRTCPrescaleFactor>:
     520:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

00000530 <__3bit_modes>:
     530:	00 01 ff ff 02 03 ff ff ff ff ff 05 ff ff ff 07     ................

00000540 <__2bit_modes>:
     540:	00 01 ff ff 02 03                                   ......

00000546 <__c.2501>:
     546:	55 73 65 72 20 45 72 72 6f 72 3a 25 64 0a 00        User Error:%d..

00000555 <__c.2499>:
     555:	57 65 62 62 6f 74 4c 69 62 20 45 72 72 6f 72 3a     WebbotLib Error:
     565:	25 64 0a 00                                         %d..

00000569 <c_hw_uart>:
     569:	c2 2e 78 2f b6 2f 4d 2f 7f 2f 63 2f 00              ..x/./M/./c/.

00000576 <__ctors_start>:
     576:	22 30       	cpi	r18, 0x02	; 2

00000578 <__ctors_end>:
     578:	11 24       	eor	r1, r1
     57a:	1f be       	out	0x3f, r1	; 63
     57c:	cf ef       	ldi	r28, 0xFF	; 255
     57e:	d1 e2       	ldi	r29, 0x21	; 33
     580:	de bf       	out	0x3e, r29	; 62
     582:	cd bf       	out	0x3d, r28	; 61

00000584 <__do_copy_data>:
     584:	12 e0       	ldi	r17, 0x02	; 2
     586:	a0 e0       	ldi	r26, 0x00	; 0
     588:	b2 e0       	ldi	r27, 0x02	; 2
     58a:	e2 e7       	ldi	r30, 0x72	; 114
     58c:	f0 e7       	ldi	r31, 0x70	; 112
     58e:	02 c0       	rjmp	.+4      	; 0x594 <.do_copy_data_start>

00000590 <.do_copy_data_loop>:
     590:	05 90       	lpm	r0, Z+
     592:	0d 92       	st	X+, r0

00000594 <.do_copy_data_start>:
     594:	aa 3e       	cpi	r26, 0xEA	; 234
     596:	b1 07       	cpc	r27, r17
     598:	d9 f7       	brne	.-10     	; 0x590 <.do_copy_data_loop>

0000059a <__do_clear_bss>:
     59a:	1c e0       	ldi	r17, 0x0C	; 12
     59c:	aa ee       	ldi	r26, 0xEA	; 234
     59e:	b2 e0       	ldi	r27, 0x02	; 2
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <.do_clear_bss_start>

000005a2 <.do_clear_bss_loop>:
     5a2:	1d 92       	st	X+, r1

000005a4 <.do_clear_bss_start>:
     5a4:	a4 32       	cpi	r26, 0x24	; 36
     5a6:	b1 07       	cpc	r27, r17
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <.do_clear_bss_loop>

000005aa <__do_global_ctors>:
     5aa:	15 e0       	ldi	r17, 0x05	; 5
     5ac:	c8 e7       	ldi	r28, 0x78	; 120
     5ae:	d5 e0       	ldi	r29, 0x05	; 5
     5b0:	04 c0       	rjmp	.+8      	; 0x5ba <.do_global_ctors_start>

000005b2 <.do_global_ctors_loop>:
     5b2:	22 97       	sbiw	r28, 0x02	; 2
     5b4:	fe 01       	movw	r30, r28
     5b6:	0e 94 33 38 	call	0x7066	; 0x7066 <__tablejump__>

000005ba <.do_global_ctors_start>:
     5ba:	c6 37       	cpi	r28, 0x76	; 118
     5bc:	d1 07       	cpc	r29, r17
     5be:	c9 f7       	brne	.-14     	; 0x5b2 <.do_global_ctors_loop>
     5c0:	0e 94 da 20 	call	0x41b4	; 0x41b4 <main>
     5c4:	0c 94 26 33 	jmp	0x664c	; 0x664c <exit>

000005c8 <__bad_interrupt>:
     5c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005cc <__vector_23>:
		__timer5Compare,TIMSK5,TOIE5,TIFR5,TOV5,ICR5,TIMSK5,ICIE5,TIFR5,ICF5,TCCR5B,ICES5,L1)
};
const uint8_t NUMBER_OF_TIMERS =  (sizeof(pgm_Timers)/sizeof(Timer));

#ifdef TIMER0_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect){
     5cc:	1f 92       	push	r1
     5ce:	0f 92       	push	r0
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	0f 92       	push	r0
     5d4:	11 24       	eor	r1, r1
     5d6:	2f 93       	push	r18
     5d8:	3f 93       	push	r19
     5da:	4f 93       	push	r20
     5dc:	5f 93       	push	r21
     5de:	6f 93       	push	r22
     5e0:	7f 93       	push	r23
     5e2:	8f 93       	push	r24
     5e4:	9f 93       	push	r25
     5e6:	af 93       	push	r26
     5e8:	bf 93       	push	r27
     5ea:	ef 93       	push	r30
     5ec:	ff 93       	push	r31
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
	__timer_overflowService(TIMER0);
     5f6:	8a e5       	ldi	r24, 0x5A	; 90
     5f8:	93 e0       	ldi	r25, 0x03	; 3
     5fa:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__timer_overflowService>
}
     5fe:	cf 91       	pop	r28
     600:	df 91       	pop	r29
     602:	ff 91       	pop	r31
     604:	ef 91       	pop	r30
     606:	bf 91       	pop	r27
     608:	af 91       	pop	r26
     60a:	9f 91       	pop	r25
     60c:	8f 91       	pop	r24
     60e:	7f 91       	pop	r23
     610:	6f 91       	pop	r22
     612:	5f 91       	pop	r21
     614:	4f 91       	pop	r20
     616:	3f 91       	pop	r19
     618:	2f 91       	pop	r18
     61a:	0f 90       	pop	r0
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	0f 90       	pop	r0
     620:	1f 90       	pop	r1
     622:	18 95       	reti

00000624 <__vector_21>:
#else
# error Missing vector definition
#endif

#ifdef TIMER0_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER0_COMPA_vect){
     624:	1f 92       	push	r1
     626:	0f 92       	push	r0
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	0f 92       	push	r0
     62c:	11 24       	eor	r1, r1
     62e:	2f 93       	push	r18
     630:	3f 93       	push	r19
     632:	4f 93       	push	r20
     634:	5f 93       	push	r21
     636:	6f 93       	push	r22
     638:	7f 93       	push	r23
     63a:	8f 93       	push	r24
     63c:	9f 93       	push	r25
     63e:	af 93       	push	r26
     640:	bf 93       	push	r27
     642:	ef 93       	push	r30
     644:	ff 93       	push	r31
     646:	df 93       	push	r29
     648:	cf 93       	push	r28
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER0_COMPAREA);
     64e:	8a e5       	ldi	r24, 0x5A	; 90
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     656:	cf 91       	pop	r28
     658:	df 91       	pop	r29
     65a:	ff 91       	pop	r31
     65c:	ef 91       	pop	r30
     65e:	bf 91       	pop	r27
     660:	af 91       	pop	r26
     662:	9f 91       	pop	r25
     664:	8f 91       	pop	r24
     666:	7f 91       	pop	r23
     668:	6f 91       	pop	r22
     66a:	5f 91       	pop	r21
     66c:	4f 91       	pop	r20
     66e:	3f 91       	pop	r19
     670:	2f 91       	pop	r18
     672:	0f 90       	pop	r0
     674:	0f be       	out	0x3f, r0	; 63
     676:	0f 90       	pop	r0
     678:	1f 90       	pop	r1
     67a:	18 95       	reti

0000067c <__vector_22>:
#else
# error Missing vector definition
#endif

#ifdef TIMER0_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER0_COMPB_vect){
     67c:	1f 92       	push	r1
     67e:	0f 92       	push	r0
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	0f 92       	push	r0
     684:	11 24       	eor	r1, r1
     686:	2f 93       	push	r18
     688:	3f 93       	push	r19
     68a:	4f 93       	push	r20
     68c:	5f 93       	push	r21
     68e:	6f 93       	push	r22
     690:	7f 93       	push	r23
     692:	8f 93       	push	r24
     694:	9f 93       	push	r25
     696:	af 93       	push	r26
     698:	bf 93       	push	r27
     69a:	ef 93       	push	r30
     69c:	ff 93       	push	r31
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER0_COMPAREB);
     6a6:	8a e6       	ldi	r24, 0x6A	; 106
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     6ae:	cf 91       	pop	r28
     6b0:	df 91       	pop	r29
     6b2:	ff 91       	pop	r31
     6b4:	ef 91       	pop	r30
     6b6:	bf 91       	pop	r27
     6b8:	af 91       	pop	r26
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	7f 91       	pop	r23
     6c0:	6f 91       	pop	r22
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <__vector_20>:
#else
# error Missing vector definition
#endif

#ifdef TIMER1_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect){
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	2f 93       	push	r18
     6e0:	3f 93       	push	r19
     6e2:	4f 93       	push	r20
     6e4:	5f 93       	push	r21
     6e6:	6f 93       	push	r22
     6e8:	7f 93       	push	r23
     6ea:	8f 93       	push	r24
     6ec:	9f 93       	push	r25
     6ee:	af 93       	push	r26
     6f0:	bf 93       	push	r27
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
	__timer_overflowService(TIMER1);
     6fe:	86 e8       	ldi	r24, 0x86	; 134
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__timer_overflowService>
}
     706:	cf 91       	pop	r28
     708:	df 91       	pop	r29
     70a:	ff 91       	pop	r31
     70c:	ef 91       	pop	r30
     70e:	bf 91       	pop	r27
     710:	af 91       	pop	r26
     712:	9f 91       	pop	r25
     714:	8f 91       	pop	r24
     716:	7f 91       	pop	r23
     718:	6f 91       	pop	r22
     71a:	5f 91       	pop	r21
     71c:	4f 91       	pop	r20
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <__vector_16>:
#else
# error Missing vector definition
#endif

#ifdef TIMER1_CAPT_vect
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect){
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
     74e:	df 93       	push	r29
     750:	cf 93       	push	r28
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
	__timer_captureService(TIMER1);
     756:	86 e8       	ldi	r24, 0x86	; 134
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__timer_captureService>
}
     75e:	cf 91       	pop	r28
     760:	df 91       	pop	r29
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <__vector_17>:
#else
# error Missing vector definition
#endif

#ifdef TIMER1_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect){
     784:	1f 92       	push	r1
     786:	0f 92       	push	r0
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	0f 92       	push	r0
     78c:	11 24       	eor	r1, r1
     78e:	2f 93       	push	r18
     790:	3f 93       	push	r19
     792:	4f 93       	push	r20
     794:	5f 93       	push	r21
     796:	6f 93       	push	r22
     798:	7f 93       	push	r23
     79a:	8f 93       	push	r24
     79c:	9f 93       	push	r25
     79e:	af 93       	push	r26
     7a0:	bf 93       	push	r27
     7a2:	ef 93       	push	r30
     7a4:	ff 93       	push	r31
     7a6:	df 93       	push	r29
     7a8:	cf 93       	push	r28
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER1_COMPAREA);
     7ae:	8a e7       	ldi	r24, 0x7A	; 122
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     7b6:	cf 91       	pop	r28
     7b8:	df 91       	pop	r29
     7ba:	ff 91       	pop	r31
     7bc:	ef 91       	pop	r30
     7be:	bf 91       	pop	r27
     7c0:	af 91       	pop	r26
     7c2:	9f 91       	pop	r25
     7c4:	8f 91       	pop	r24
     7c6:	7f 91       	pop	r23
     7c8:	6f 91       	pop	r22
     7ca:	5f 91       	pop	r21
     7cc:	4f 91       	pop	r20
     7ce:	3f 91       	pop	r19
     7d0:	2f 91       	pop	r18
     7d2:	0f 90       	pop	r0
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	0f 90       	pop	r0
     7d8:	1f 90       	pop	r1
     7da:	18 95       	reti

000007dc <__vector_18>:
#else
# error Missing vector definition
#endif

#ifdef TIMER1_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect){
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	2f 93       	push	r18
     7e8:	3f 93       	push	r19
     7ea:	4f 93       	push	r20
     7ec:	5f 93       	push	r21
     7ee:	6f 93       	push	r22
     7f0:	7f 93       	push	r23
     7f2:	8f 93       	push	r24
     7f4:	9f 93       	push	r25
     7f6:	af 93       	push	r26
     7f8:	bf 93       	push	r27
     7fa:	ef 93       	push	r30
     7fc:	ff 93       	push	r31
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER1_COMPAREB);
     806:	8a e8       	ldi	r24, 0x8A	; 138
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     80e:	cf 91       	pop	r28
     810:	df 91       	pop	r29
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <__vector_19>:
#else
# error Missing vector definition
#endif

#ifdef TIMER1_COMPC_vect
TIMER_INTERRUPT_HANDLER(TIMER1_COMPC_vect){
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	2f 93       	push	r18
     840:	3f 93       	push	r19
     842:	4f 93       	push	r20
     844:	5f 93       	push	r21
     846:	6f 93       	push	r22
     848:	7f 93       	push	r23
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	ef 93       	push	r30
     854:	ff 93       	push	r31
     856:	df 93       	push	r29
     858:	cf 93       	push	r28
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER1_COMPAREC);
     85e:	8a e9       	ldi	r24, 0x9A	; 154
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     866:	cf 91       	pop	r28
     868:	df 91       	pop	r29
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	bf 91       	pop	r27
     870:	af 91       	pop	r26
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	7f 91       	pop	r23
     878:	6f 91       	pop	r22
     87a:	5f 91       	pop	r21
     87c:	4f 91       	pop	r20
     87e:	3f 91       	pop	r19
     880:	2f 91       	pop	r18
     882:	0f 90       	pop	r0
     884:	0f be       	out	0x3f, r0	; 63
     886:	0f 90       	pop	r0
     888:	1f 90       	pop	r1
     88a:	18 95       	reti

0000088c <__vector_15>:
#else
# error Missing vector definition
#endif

#ifdef TIMER2_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect){
     88c:	1f 92       	push	r1
     88e:	0f 92       	push	r0
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	0f 92       	push	r0
     894:	11 24       	eor	r1, r1
     896:	2f 93       	push	r18
     898:	3f 93       	push	r19
     89a:	4f 93       	push	r20
     89c:	5f 93       	push	r21
     89e:	6f 93       	push	r22
     8a0:	7f 93       	push	r23
     8a2:	8f 93       	push	r24
     8a4:	9f 93       	push	r25
     8a6:	af 93       	push	r26
     8a8:	bf 93       	push	r27
     8aa:	ef 93       	push	r30
     8ac:	ff 93       	push	r31
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
	__timer_overflowService(TIMER2);
     8b6:	82 eb       	ldi	r24, 0xB2	; 178
     8b8:	93 e0       	ldi	r25, 0x03	; 3
     8ba:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__timer_overflowService>
}
     8be:	cf 91       	pop	r28
     8c0:	df 91       	pop	r29
     8c2:	ff 91       	pop	r31
     8c4:	ef 91       	pop	r30
     8c6:	bf 91       	pop	r27
     8c8:	af 91       	pop	r26
     8ca:	9f 91       	pop	r25
     8cc:	8f 91       	pop	r24
     8ce:	7f 91       	pop	r23
     8d0:	6f 91       	pop	r22
     8d2:	5f 91       	pop	r21
     8d4:	4f 91       	pop	r20
     8d6:	3f 91       	pop	r19
     8d8:	2f 91       	pop	r18
     8da:	0f 90       	pop	r0
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	0f 90       	pop	r0
     8e0:	1f 90       	pop	r1
     8e2:	18 95       	reti

000008e4 <__vector_13>:
#else
# error Missing vector definition
#endif

#ifdef TIMER2_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect){
     8e4:	1f 92       	push	r1
     8e6:	0f 92       	push	r0
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	0f 92       	push	r0
     8ec:	11 24       	eor	r1, r1
     8ee:	2f 93       	push	r18
     8f0:	3f 93       	push	r19
     8f2:	4f 93       	push	r20
     8f4:	5f 93       	push	r21
     8f6:	6f 93       	push	r22
     8f8:	7f 93       	push	r23
     8fa:	8f 93       	push	r24
     8fc:	9f 93       	push	r25
     8fe:	af 93       	push	r26
     900:	bf 93       	push	r27
     902:	ef 93       	push	r30
     904:	ff 93       	push	r31
     906:	df 93       	push	r29
     908:	cf 93       	push	r28
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER2_COMPAREA);
     90e:	8a ea       	ldi	r24, 0xAA	; 170
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     916:	cf 91       	pop	r28
     918:	df 91       	pop	r29
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	bf 91       	pop	r27
     920:	af 91       	pop	r26
     922:	9f 91       	pop	r25
     924:	8f 91       	pop	r24
     926:	7f 91       	pop	r23
     928:	6f 91       	pop	r22
     92a:	5f 91       	pop	r21
     92c:	4f 91       	pop	r20
     92e:	3f 91       	pop	r19
     930:	2f 91       	pop	r18
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <__vector_14>:
#else
# error Missing vector definition
#endif

#ifdef TIMER2_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect){
     93c:	1f 92       	push	r1
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	4f 93       	push	r20
     94c:	5f 93       	push	r21
     94e:	6f 93       	push	r22
     950:	7f 93       	push	r23
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
     95e:	df 93       	push	r29
     960:	cf 93       	push	r28
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER2_COMPAREB);
     966:	8a eb       	ldi	r24, 0xBA	; 186
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     96e:	cf 91       	pop	r28
     970:	df 91       	pop	r29
     972:	ff 91       	pop	r31
     974:	ef 91       	pop	r30
     976:	bf 91       	pop	r27
     978:	af 91       	pop	r26
     97a:	9f 91       	pop	r25
     97c:	8f 91       	pop	r24
     97e:	7f 91       	pop	r23
     980:	6f 91       	pop	r22
     982:	5f 91       	pop	r21
     984:	4f 91       	pop	r20
     986:	3f 91       	pop	r19
     988:	2f 91       	pop	r18
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	0f 90       	pop	r0
     990:	1f 90       	pop	r1
     992:	18 95       	reti

00000994 <__vector_35>:
#else
# error Missing vector definition
#endif

#ifdef TIMER3_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER3_OVF_vect){
     994:	1f 92       	push	r1
     996:	0f 92       	push	r0
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	0f 92       	push	r0
     99c:	11 24       	eor	r1, r1
     99e:	2f 93       	push	r18
     9a0:	3f 93       	push	r19
     9a2:	4f 93       	push	r20
     9a4:	5f 93       	push	r21
     9a6:	6f 93       	push	r22
     9a8:	7f 93       	push	r23
     9aa:	8f 93       	push	r24
     9ac:	9f 93       	push	r25
     9ae:	af 93       	push	r26
     9b0:	bf 93       	push	r27
     9b2:	ef 93       	push	r30
     9b4:	ff 93       	push	r31
     9b6:	df 93       	push	r29
     9b8:	cf 93       	push	r28
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
	__timer_overflowService(TIMER3);
     9be:	8e ed       	ldi	r24, 0xDE	; 222
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__timer_overflowService>
}
     9c6:	cf 91       	pop	r28
     9c8:	df 91       	pop	r29
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	bf 91       	pop	r27
     9d0:	af 91       	pop	r26
     9d2:	9f 91       	pop	r25
     9d4:	8f 91       	pop	r24
     9d6:	7f 91       	pop	r23
     9d8:	6f 91       	pop	r22
     9da:	5f 91       	pop	r21
     9dc:	4f 91       	pop	r20
     9de:	3f 91       	pop	r19
     9e0:	2f 91       	pop	r18
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <__vector_31>:
#else
# error Missing vector definition
#endif

#ifdef TIMER3_CAPT_vect
TIMER_INTERRUPT_HANDLER(TIMER3_CAPT_vect){
     9ec:	1f 92       	push	r1
     9ee:	0f 92       	push	r0
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	0f 92       	push	r0
     9f4:	11 24       	eor	r1, r1
     9f6:	2f 93       	push	r18
     9f8:	3f 93       	push	r19
     9fa:	4f 93       	push	r20
     9fc:	5f 93       	push	r21
     9fe:	6f 93       	push	r22
     a00:	7f 93       	push	r23
     a02:	8f 93       	push	r24
     a04:	9f 93       	push	r25
     a06:	af 93       	push	r26
     a08:	bf 93       	push	r27
     a0a:	ef 93       	push	r30
     a0c:	ff 93       	push	r31
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
	__timer_captureService(TIMER3);
     a16:	8e ed       	ldi	r24, 0xDE	; 222
     a18:	93 e0       	ldi	r25, 0x03	; 3
     a1a:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__timer_captureService>
}
     a1e:	cf 91       	pop	r28
     a20:	df 91       	pop	r29
     a22:	ff 91       	pop	r31
     a24:	ef 91       	pop	r30
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	7f 91       	pop	r23
     a30:	6f 91       	pop	r22
     a32:	5f 91       	pop	r21
     a34:	4f 91       	pop	r20
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <__vector_32>:
#else
# error Missing vector definition
#endif

#ifdef TIMER3_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER3_COMPA_vect){
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	2f 93       	push	r18
     a50:	3f 93       	push	r19
     a52:	4f 93       	push	r20
     a54:	5f 93       	push	r21
     a56:	6f 93       	push	r22
     a58:	7f 93       	push	r23
     a5a:	8f 93       	push	r24
     a5c:	9f 93       	push	r25
     a5e:	af 93       	push	r26
     a60:	bf 93       	push	r27
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
     a66:	df 93       	push	r29
     a68:	cf 93       	push	r28
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER3_COMPAREA);
     a6e:	8a ec       	ldi	r24, 0xCA	; 202
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     a76:	cf 91       	pop	r28
     a78:	df 91       	pop	r29
     a7a:	ff 91       	pop	r31
     a7c:	ef 91       	pop	r30
     a7e:	bf 91       	pop	r27
     a80:	af 91       	pop	r26
     a82:	9f 91       	pop	r25
     a84:	8f 91       	pop	r24
     a86:	7f 91       	pop	r23
     a88:	6f 91       	pop	r22
     a8a:	5f 91       	pop	r21
     a8c:	4f 91       	pop	r20
     a8e:	3f 91       	pop	r19
     a90:	2f 91       	pop	r18
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	0f 90       	pop	r0
     a98:	1f 90       	pop	r1
     a9a:	18 95       	reti

00000a9c <__vector_33>:
#else
# error Missing vector definition
#endif

#ifdef TIMER3_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER3_COMPB_vect){
     a9c:	1f 92       	push	r1
     a9e:	0f 92       	push	r0
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	0f 92       	push	r0
     aa4:	11 24       	eor	r1, r1
     aa6:	2f 93       	push	r18
     aa8:	3f 93       	push	r19
     aaa:	4f 93       	push	r20
     aac:	5f 93       	push	r21
     aae:	6f 93       	push	r22
     ab0:	7f 93       	push	r23
     ab2:	8f 93       	push	r24
     ab4:	9f 93       	push	r25
     ab6:	af 93       	push	r26
     ab8:	bf 93       	push	r27
     aba:	ef 93       	push	r30
     abc:	ff 93       	push	r31
     abe:	df 93       	push	r29
     ac0:	cf 93       	push	r28
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER3_COMPAREB);
     ac6:	8a ed       	ldi	r24, 0xDA	; 218
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     ace:	cf 91       	pop	r28
     ad0:	df 91       	pop	r29
     ad2:	ff 91       	pop	r31
     ad4:	ef 91       	pop	r30
     ad6:	bf 91       	pop	r27
     ad8:	af 91       	pop	r26
     ada:	9f 91       	pop	r25
     adc:	8f 91       	pop	r24
     ade:	7f 91       	pop	r23
     ae0:	6f 91       	pop	r22
     ae2:	5f 91       	pop	r21
     ae4:	4f 91       	pop	r20
     ae6:	3f 91       	pop	r19
     ae8:	2f 91       	pop	r18
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <__vector_34>:
#else
# error Missing vector definition
#endif

#ifdef TIMER3_COMPC_vect
TIMER_INTERRUPT_HANDLER(TIMER3_COMPC_vect){
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	2f 93       	push	r18
     b00:	3f 93       	push	r19
     b02:	4f 93       	push	r20
     b04:	5f 93       	push	r21
     b06:	6f 93       	push	r22
     b08:	7f 93       	push	r23
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	af 93       	push	r26
     b10:	bf 93       	push	r27
     b12:	ef 93       	push	r30
     b14:	ff 93       	push	r31
     b16:	df 93       	push	r29
     b18:	cf 93       	push	r28
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER3_COMPAREC);
     b1e:	8a ee       	ldi	r24, 0xEA	; 234
     b20:	92 e0       	ldi	r25, 0x02	; 2
     b22:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     b26:	cf 91       	pop	r28
     b28:	df 91       	pop	r29
     b2a:	ff 91       	pop	r31
     b2c:	ef 91       	pop	r30
     b2e:	bf 91       	pop	r27
     b30:	af 91       	pop	r26
     b32:	9f 91       	pop	r25
     b34:	8f 91       	pop	r24
     b36:	7f 91       	pop	r23
     b38:	6f 91       	pop	r22
     b3a:	5f 91       	pop	r21
     b3c:	4f 91       	pop	r20
     b3e:	3f 91       	pop	r19
     b40:	2f 91       	pop	r18
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <__vector_45>:
#else
# error Missing vector definition
#endif

#ifdef TIMER4_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER4_OVF_vect){
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
	__timer_overflowService(TIMER4);
     b76:	8a e0       	ldi	r24, 0x0A	; 10
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__timer_overflowService>
}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <__vector_41>:
#else
# error Missing vector definition
#endif

#ifdef TIMER4_CAPT_vect
TIMER_INTERRUPT_HANDLER(TIMER4_CAPT_vect){
     ba4:	1f 92       	push	r1
     ba6:	0f 92       	push	r0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
	__timer_captureService(TIMER4);
     bce:	8a e0       	ldi	r24, 0x0A	; 10
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__timer_captureService>
}
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <__vector_42>:
#else
# error Missing vector definition
#endif

#ifdef TIMER4_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER4_COMPA_vect){
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	2f 93       	push	r18
     c08:	3f 93       	push	r19
     c0a:	4f 93       	push	r20
     c0c:	5f 93       	push	r21
     c0e:	6f 93       	push	r22
     c10:	7f 93       	push	r23
     c12:	8f 93       	push	r24
     c14:	9f 93       	push	r25
     c16:	af 93       	push	r26
     c18:	bf 93       	push	r27
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER4_COMPAREA);
     c26:	8a ef       	ldi	r24, 0xFA	; 250
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_43>:
#else
# error Missing vector definition
#endif

#ifdef TIMER4_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER4_COMPB_vect){
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER4_COMPAREB);
     c7e:	8a e0       	ldi	r24, 0x0A	; 10
     c80:	93 e0       	ldi	r25, 0x03	; 3
     c82:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	ff 91       	pop	r31
     c8c:	ef 91       	pop	r30
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <__vector_44>:
#else
# error Missing vector definition
#endif

#ifdef TIMER4_COMPC_vect
TIMER_INTERRUPT_HANDLER(TIMER4_COMPC_vect){
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER4_COMPAREC);
     cd6:	8a e1       	ldi	r24, 0x1A	; 26
     cd8:	93 e0       	ldi	r25, 0x03	; 3
     cda:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <__vector_50>:
#else
# error Missing vector definition
#endif

#ifdef TIMER5_OVF_vect
TIMER_INTERRUPT_HANDLER(TIMER5_OVF_vect){
     d04:	1f 92       	push	r1
     d06:	0f 92       	push	r0
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	0f 92       	push	r0
     d0c:	11 24       	eor	r1, r1
     d0e:	2f 93       	push	r18
     d10:	3f 93       	push	r19
     d12:	4f 93       	push	r20
     d14:	5f 93       	push	r21
     d16:	6f 93       	push	r22
     d18:	7f 93       	push	r23
     d1a:	8f 93       	push	r24
     d1c:	9f 93       	push	r25
     d1e:	af 93       	push	r26
     d20:	bf 93       	push	r27
     d22:	ef 93       	push	r30
     d24:	ff 93       	push	r31
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	__timer_overflowService(TIMER5);
     d2e:	86 e3       	ldi	r24, 0x36	; 54
     d30:	94 e0       	ldi	r25, 0x04	; 4
     d32:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__timer_overflowService>
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	ff 91       	pop	r31
     d3c:	ef 91       	pop	r30
     d3e:	bf 91       	pop	r27
     d40:	af 91       	pop	r26
     d42:	9f 91       	pop	r25
     d44:	8f 91       	pop	r24
     d46:	7f 91       	pop	r23
     d48:	6f 91       	pop	r22
     d4a:	5f 91       	pop	r21
     d4c:	4f 91       	pop	r20
     d4e:	3f 91       	pop	r19
     d50:	2f 91       	pop	r18
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	0f 90       	pop	r0
     d58:	1f 90       	pop	r1
     d5a:	18 95       	reti

00000d5c <__vector_46>:
#else
# error Missing vector definition
#endif

#ifdef TIMER5_CAPT_vect
TIMER_INTERRUPT_HANDLER(TIMER5_CAPT_vect){
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	ef 93       	push	r30
     d7c:	ff 93       	push	r31
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	__timer_captureService(TIMER5);
     d86:	86 e3       	ldi	r24, 0x36	; 54
     d88:	94 e0       	ldi	r25, 0x04	; 4
     d8a:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__timer_captureService>
}
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	0f 90       	pop	r0
     db0:	1f 90       	pop	r1
     db2:	18 95       	reti

00000db4 <__vector_47>:
#else
# error Missing vector definition
#endif

#ifdef TIMER5_COMPA_vect
TIMER_INTERRUPT_HANDLER(TIMER5_COMPA_vect){
     db4:	1f 92       	push	r1
     db6:	0f 92       	push	r0
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	0f 92       	push	r0
     dbc:	11 24       	eor	r1, r1
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER5_COMPAREA);
     dde:	8a e2       	ldi	r24, 0x2A	; 42
     de0:	93 e0       	ldi	r25, 0x03	; 3
     de2:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	7f 91       	pop	r23
     df8:	6f 91       	pop	r22
     dfa:	5f 91       	pop	r21
     dfc:	4f 91       	pop	r20
     dfe:	3f 91       	pop	r19
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__vector_48>:
#else
# error Missing vector definition
#endif

#ifdef TIMER5_COMPB_vect
TIMER_INTERRUPT_HANDLER(TIMER5_COMPB_vect){
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	2f 93       	push	r18
     e18:	3f 93       	push	r19
     e1a:	4f 93       	push	r20
     e1c:	5f 93       	push	r21
     e1e:	6f 93       	push	r22
     e20:	7f 93       	push	r23
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
     e26:	af 93       	push	r26
     e28:	bf 93       	push	r27
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER5_COMPAREB);
     e36:	8a e3       	ldi	r24, 0x3A	; 58
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <__vector_49>:
#else
# error Missing vector definition
#endif

#ifdef TIMER5_COMPC_vect
TIMER_INTERRUPT_HANDLER(TIMER5_COMPC_vect){
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
	__timer_compareService(TIMER5_COMPAREC);
     e8e:	8a e4       	ldi	r24, 0x4A	; 74
     e90:	93 e0       	ldi	r25, 0x03	; 3
     e92:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__timer_compareService>
}
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	ff 91       	pop	r31
     e9c:	ef 91       	pop	r30
     e9e:	bf 91       	pop	r27
     ea0:	af 91       	pop	r26
     ea2:	9f 91       	pop	r25
     ea4:	8f 91       	pop	r24
     ea6:	7f 91       	pop	r23
     ea8:	6f 91       	pop	r22
     eaa:	5f 91       	pop	r21
     eac:	4f 91       	pop	r20
     eae:	3f 91       	pop	r19
     eb0:	2f 91       	pop	r18
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <uart1SendByte>:

// ------------------- uart1 -------------------

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	0f 92       	push	r0
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	89 83       	std	Y+1, r24	; 0x01
	return uartSendByte(uart1,byte);
     ec8:	8b e0       	ldi	r24, 0x0B	; 11
     eca:	92 e0       	ldi	r25, 0x02	; 2
     ecc:	69 81       	ldd	r22, Y+1	; 0x01
     ece:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_uartSendByte>
}
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <uart1GetByte>:

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	return uartGetByte(uart1);
     ee2:	8b e0       	ldi	r24, 0x0B	; 11
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__uartGetByte>
}
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <__vector_38>:
HW_UART _uart1 = MAKE_UART_BUFFERED(null,null,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
     ef0:	1f 92       	push	r1
     ef2:	0f 92       	push	r0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	2f 93       	push	r18
     efc:	3f 93       	push	r19
     efe:	4f 93       	push	r20
     f00:	5f 93       	push	r21
     f02:	6f 93       	push	r22
     f04:	7f 93       	push	r23
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
     f0a:	af 93       	push	r26
     f0c:	bf 93       	push	r27
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(uart1);
     f1a:	8b e0       	ldi	r24, 0x0B	; 11
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__uartTransmitService>
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
     f48:	1f 92       	push	r1
     f4a:	0f 92       	push	r0
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	0f 92       	push	r0
     f50:	11 24       	eor	r1, r1
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(uart1);
     f72:	80 91 2b 02 	lds	r24, 0x022B
     f76:	90 91 2c 02 	lds	r25, 0x022C
     f7a:	fc 01       	movw	r30, r24
     f7c:	20 81       	ld	r18, Z
     f7e:	8b e0       	ldi	r24, 0x0B	; 11
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	62 2f       	mov	r22, r18
     f84:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <__uartReceiveService>
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	7f 91       	pop	r23
     f9a:	6f 91       	pop	r22
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <lbCommSendByte>:

// ------------------- lbComm -------------------

// Create a routine to write bytes to lbComm
// You can set rprintf to use it by calling rprintfInit(&lbCommSendByte)
MAKE_WRITER(lbCommSendByte){
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	89 83       	std	Y+1, r24	; 0x01
	return uartSendByte(lbComm,byte);
     fba:	80 e3       	ldi	r24, 0x30	; 48
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	69 81       	ldd	r22, Y+1	; 0x01
     fc0:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_uartSendByte>
}
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <lbCommGetByte>:

// Create a routine to read a byte from lbComm
// Returns -1 if there was no data
MAKE_READER( lbCommGetByte){
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
	return uartGetByte(lbComm);
     fd4:	80 e3       	ldi	r24, 0x30	; 48
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__uartGetByte>
}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <__vector_56>:
HW_UART _lbComm = MAKE_UART_BUFFERED(null,null,UCSR3A,UCSR3B,UBRR3L,UBRR3H,UDR3,null,BV(U2X3),J0,J1,&lbCommGetByte,&lbCommSendByte);

#ifndef USART3_TX_vect
# error Uart3 Tx complete vector undefined
#else
ISR(USART3_TX_vect){
     fe2:	1f 92       	push	r1
     fe4:	0f 92       	push	r0
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	0f 92       	push	r0
     fea:	11 24       	eor	r1, r1
     fec:	2f 93       	push	r18
     fee:	3f 93       	push	r19
     ff0:	4f 93       	push	r20
     ff2:	5f 93       	push	r21
     ff4:	6f 93       	push	r22
     ff6:	7f 93       	push	r23
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(lbComm);
    100c:	80 e3       	ldi	r24, 0x30	; 48
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__uartTransmitService>
}
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	bf 91       	pop	r27
    101e:	af 91       	pop	r26
    1020:	9f 91       	pop	r25
    1022:	8f 91       	pop	r24
    1024:	7f 91       	pop	r23
    1026:	6f 91       	pop	r22
    1028:	5f 91       	pop	r21
    102a:	4f 91       	pop	r20
    102c:	3f 91       	pop	r19
    102e:	2f 91       	pop	r18
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_54>:
#endif

#ifndef USART3_RX_vect
# error Uart3 Rx complete vector undefined
#else
ISR(USART3_RX_vect){
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	2f 93       	push	r18
    1046:	3f 93       	push	r19
    1048:	4f 93       	push	r20
    104a:	5f 93       	push	r21
    104c:	6f 93       	push	r22
    104e:	7f 93       	push	r23
    1050:	8f 93       	push	r24
    1052:	9f 93       	push	r25
    1054:	af 93       	push	r26
    1056:	bf 93       	push	r27
    1058:	ef 93       	push	r30
    105a:	ff 93       	push	r31
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(lbComm);
    1064:	80 91 50 02 	lds	r24, 0x0250
    1068:	90 91 51 02 	lds	r25, 0x0251
    106c:	fc 01       	movw	r30, r24
    106e:	20 81       	ld	r18, Z
    1070:	80 e3       	ldi	r24, 0x30	; 48
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	62 2f       	mov	r22, r18
    1076:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <__uartReceiveService>
}
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	ff 91       	pop	r31
    1080:	ef 91       	pop	r30
    1082:	bf 91       	pop	r27
    1084:	af 91       	pop	r26
    1086:	9f 91       	pop	r25
    1088:	8f 91       	pop	r24
    108a:	7f 91       	pop	r23
    108c:	6f 91       	pop	r22
    108e:	5f 91       	pop	r21
    1090:	4f 91       	pop	r20
    1092:	3f 91       	pop	r19
    1094:	2f 91       	pop	r18
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	0f 90       	pop	r0
    109c:	1f 90       	pop	r1
    109e:	18 95       	reti

000010a0 <uart0SendByte>:

// ------------------- uart0 -------------------

// Create a routine to write bytes to uart0
// You can set rprintf to use it by calling rprintfInit(&uart0SendByte)
MAKE_WRITER(uart0SendByte){
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	89 83       	std	Y+1, r24	; 0x01
	return uartSendByte(uart0,byte);
    10ac:	85 e5       	ldi	r24, 0x55	; 85
    10ae:	92 e0       	ldi	r25, 0x02	; 2
    10b0:	69 81       	ldd	r22, Y+1	; 0x01
    10b2:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_uartSendByte>
}
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <uart0GetByte>:

// Create a routine to read a byte from uart0
// Returns -1 if there was no data
MAKE_READER( uart0GetByte){
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	return uartGetByte(uart0);
    10c6:	85 e5       	ldi	r24, 0x55	; 85
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__uartGetByte>
}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <__vector_27>:
HW_UART _uart0 = MAKE_UART_BUFFERED(null,null,UCSR0A,UCSR0B,UBRR0L,UBRR0H,UDR0,null,BV(U2X0),E0,E1,&uart0GetByte,&uart0SendByte);

#ifndef USART0_TX_vect
# error Uart0 Tx complete vector undefined
#else
ISR(USART0_TX_vect){
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	2f 93       	push	r18
    10e0:	3f 93       	push	r19
    10e2:	4f 93       	push	r20
    10e4:	5f 93       	push	r21
    10e6:	6f 93       	push	r22
    10e8:	7f 93       	push	r23
    10ea:	8f 93       	push	r24
    10ec:	9f 93       	push	r25
    10ee:	af 93       	push	r26
    10f0:	bf 93       	push	r27
    10f2:	ef 93       	push	r30
    10f4:	ff 93       	push	r31
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(uart0);
    10fe:	85 e5       	ldi	r24, 0x55	; 85
    1100:	92 e0       	ldi	r25, 0x02	; 2
    1102:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__uartTransmitService>
}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	ff 91       	pop	r31
    110c:	ef 91       	pop	r30
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <__vector_25>:
#endif

#ifndef USART0_RX_vect
# error Uart0 Rx complete vector undefined
#else
ISR(USART0_RX_vect){
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(uart0);
    1156:	80 91 75 02 	lds	r24, 0x0275
    115a:	90 91 76 02 	lds	r25, 0x0276
    115e:	fc 01       	movw	r30, r24
    1160:	20 81       	ld	r18, Z
    1162:	85 e5       	ldi	r24, 0x55	; 85
    1164:	92 e0       	ldi	r25, 0x02	; 2
    1166:	62 2f       	mov	r22, r18
    1168:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <__uartReceiveService>
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	ff 91       	pop	r31
    1172:	ef 91       	pop	r30
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	7f 91       	pop	r23
    117e:	6f 91       	pop	r22
    1180:	5f 91       	pop	r21
    1182:	4f 91       	pop	r20
    1184:	3f 91       	pop	r19
    1186:	2f 91       	pop	r18
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	0f 90       	pop	r0
    118e:	1f 90       	pop	r1
    1190:	18 95       	reti

00001192 <marquee_put_char>:
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE marquee = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	0f 92       	push	r0
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	89 83       	std	Y+1, r24	; 0x01
	return marqueeSendByte(&marquee,byte);
    119e:	8e e8       	ldi	r24, 0x8E	; 142
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	69 81       	ldd	r22, Y+1	; 0x01
    11a4:	0e 94 70 24 	call	0x48e0	; 0x48e0 <marqueeSendByte>
}
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <sysInitHardware>:
Sharp_GP2D12 ir_2 = MAKE_Sharp_GP2D12(ADC2);
Sharp_GP2Y0A21YK ir_3 = MAKE_Sharp_GP2Y0A21YK(ADC3);
Sharp_GP2Y0A21YK ir_4 = MAKE_Sharp_GP2Y0A21YK(ADC4);

// ----------- Initialise built in devices ------
void sysInitHardware(void){
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	SWITCH_init(&button);
    11b8:	8b e7       	ldi	r24, 0x7B	; 123
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	0e 94 ef 08 	call	0x11de	; 0x11de <SWITCH_init>
	uartInit(uart1,115200);
    11c0:	8b e0       	ldi	r24, 0x0B	; 11
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	52 ec       	ldi	r21, 0xC2	; 194
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_uartInit>
	segled_init(&led_display);
    11d0:	8d e7       	ldi	r24, 0x7D	; 125
    11d2:	92 e0       	ldi	r25, 0x02	; 2
    11d4:	0e 94 02 09 	call	0x1204	; 0x1204 <segled_init>
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <SWITCH_init>:

static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <SWITCH_init+0x6>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
	pin_make_input(sw->pin,TRUE);
    11ec:	e9 81       	ldd	r30, Y+1	; 0x01
    11ee:	fa 81       	ldd	r31, Y+2	; 0x02
    11f0:	80 81       	ld	r24, Z
    11f2:	91 81       	ldd	r25, Z+1	; 0x01
    11f4:	6f ef       	ldi	r22, 0xFF	; 255
    11f6:	0e 94 77 21 	call	0x42ee	; 0x42ee <pin_make_input>
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <segled_init>:


// Write a character to the display
uint8_t segled_put_char(SEGLED* led, uint8_t ch);

static __inline__ void segled_init(SEGLED* led){
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <segled_init+0x6>
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	89 83       	std	Y+1, r24	; 0x01
	segled_put_char(led,' ');
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	60 e2       	ldi	r22, 0x20	; 32
    1218:	0e 94 84 23 	call	0x4708	; 0x4708 <segled_put_char>
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <initHardware>:

// ----------- Initialise my added devices ------
void initHardware(void){
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	distanceInit(ir_0);
    122e:	85 ea       	ldi	r24, 0xA5	; 165
    1230:	92 e0       	ldi	r25, 0x02	; 2
    1232:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <_sensorInit_>
	distanceInit(ir_1);
    1236:	8f ea       	ldi	r24, 0xAF	; 175
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <_sensorInit_>
	distanceInit(ir_2);
    123e:	89 eb       	ldi	r24, 0xB9	; 185
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <_sensorInit_>
	distanceInit(ir_3);
    1246:	83 ec       	ldi	r24, 0xC3	; 195
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <_sensorInit_>
	uartInit(lbComm,38400);
    124e:	80 e3       	ldi	r24, 0x30	; 48
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	56 e9       	ldi	r21, 0x96	; 150
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_uartInit>
	distanceInit(ir_4);
    125e:	8d ec       	ldi	r24, 0xCD	; 205
    1260:	92 e0       	ldi	r25, 0x02	; 2
    1262:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <_sensorInit_>
	setErrorLog(&uart0SendByte);
    1266:	80 e5       	ldi	r24, 0x50	; 80
    1268:	98 e0       	ldi	r25, 0x08	; 8
    126a:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <setErrorLog>
	rprintfInit(&uart0SendByte);
    126e:	80 e5       	ldi	r24, 0x50	; 80
    1270:	98 e0       	ldi	r25, 0x08	; 8
    1272:	0e 94 72 22 	call	0x44e4	; 0x44e4 <rprintfInit>
	uartInit(uart0,38400);
    1276:	85 e5       	ldi	r24, 0x55	; 85
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	56 e9       	ldi	r21, 0x96	; 150
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_uartInit>
}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <registerLED>:
// ----------- Register the statusLED -----------
void registerLED(void){
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
	statusLEDregister(C1,false);
    1294:	80 ef       	ldi	r24, 0xF0	; 240
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <statusLEDregister>
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <statusLEDregister>:

static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <statusLEDregister+0x6>
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6b 83       	std	Y+3, r22	; 0x03
	statusLED.pin = pin;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	90 93 12 0c 	sts	0x0C12, r25
    12be:	80 93 11 0c 	sts	0x0C11, r24
	statusLED.activeHigh = activeHigh;
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	98 2f       	mov	r25, r24
    12c8:	91 70       	andi	r25, 0x01	; 1
    12ca:	80 91 13 0c 	lds	r24, 0x0C13
    12ce:	8e 7f       	andi	r24, 0xFE	; 254
    12d0:	89 2b       	or	r24, r25
    12d2:	80 93 13 0c 	sts	0x0C13, r24
	statusLED.initialised=FALSE;
    12d6:	80 91 13 0c 	lds	r24, 0x0C13
    12da:	8d 7f       	andi	r24, 0xFD	; 253
    12dc:	80 93 13 0c 	sts	0x0C13, r24
	LED_on(&statusLED);
    12e0:	81 e1       	ldi	r24, 0x11	; 17
    12e2:	9c e0       	ldi	r25, 0x0C	; 12
    12e4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LED_on>
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <LED_on>:



void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <LED_on+0x6>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
	LED_set(led,TRUE);
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	6f ef       	ldi	r22, 0xFF	; 255
    1308:	0e 94 4f 22 	call	0x449e	; 0x449e <LED_set>
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <configure_ports>:

// ----------- Ports are configured on the fly --
void configure_ports(void){
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <deg_to_rad>:



//-----------------------------**&&**

float deg_to_rad(const int16_t deg){
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <deg_to_rad+0x6>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
	return (deg * M_PI)/180;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	aa 27       	eor	r26, r26
    1338:	97 fd       	sbrc	r25, 7
    133a:	a0 95       	com	r26
    133c:	ba 2f       	mov	r27, r26
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	2b ed       	ldi	r18, 0xDB	; 219
    1350:	3f e0       	ldi	r19, 0x0F	; 15
    1352:	49 e4       	ldi	r20, 0x49	; 73
    1354:	50 e4       	ldi	r21, 0x40	; 64
    1356:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	44 e3       	ldi	r20, 0x34	; 52
    1368:	53 e4       	ldi	r21, 0x43	; 67
    136a:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
}
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <rad_to_deg>:

float rad_to_deg(const int16_t rad){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	00 d0       	rcall	.+0      	; 0x1386 <rad_to_deg+0x6>
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	9a 83       	std	Y+2, r25	; 0x02
    138c:	89 83       	std	Y+1, r24	; 0x01
	return (rad * 180)/M_PI;
    138e:	29 81       	ldd	r18, Y+1	; 0x01
    1390:	3a 81       	ldd	r19, Y+2	; 0x02
    1392:	84 eb       	ldi	r24, 0xB4	; 180
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	ac 01       	movw	r20, r24
    1398:	24 9f       	mul	r18, r20
    139a:	c0 01       	movw	r24, r0
    139c:	25 9f       	mul	r18, r21
    139e:	90 0d       	add	r25, r0
    13a0:	34 9f       	mul	r19, r20
    13a2:	90 0d       	add	r25, r0
    13a4:	11 24       	eor	r1, r1
    13a6:	aa 27       	eor	r26, r26
    13a8:	97 fd       	sbrc	r25, 7
    13aa:	a0 95       	com	r26
    13ac:	ba 2f       	mov	r27, r26
    13ae:	bc 01       	movw	r22, r24
    13b0:	cd 01       	movw	r24, r26
    13b2:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	2b ed       	ldi	r18, 0xDB	; 219
    13c0:	3f e0       	ldi	r19, 0x0F	; 15
    13c2:	49 e4       	ldi	r20, 0x49	; 73
    13c4:	50 e4       	ldi	r21, 0x40	; 64
    13c6:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
}
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <init_occ_pt>:

struct OCC_PT* init_occ_pt(){
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <init_occ_pt+0x6>
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
	struct OCC_PT* pt = malloc(sizeof(struct OCC_PT));
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 1f 32 	call	0x643e	; 0x643e <malloc>
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01
	pt->k = 5; 	//start with a low initial confidence
    13f2:	e9 81       	ldd	r30, Y+1	; 0x01
    13f4:	fa 81       	ldd	r31, Y+2	; 0x02
    13f6:	85 e0       	ldi	r24, 0x05	; 5
    13f8:	80 83       	st	Z, r24
	//pt->next = NULL;
	//pt->prev = NULL;
	return pt;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
	//rprintf(" %d ", pt->k);
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <init_fre_pt>:

struct FRE_PT* init_fre_pt(){
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	00 d0       	rcall	.+0      	; 0x140e <init_fre_pt+0x6>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
	struct FRE_PT* pt = malloc(sizeof(struct FRE_PT));
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 1f 32 	call	0x643e	; 0x643e <malloc>
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
	pt->f = MAX_F;	//distance to start + distance to goal
    141e:	e9 81       	ldd	r30, Y+1	; 0x01
    1420:	fa 81       	ldd	r31, Y+2	; 0x02
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	80 83       	st	Z, r24
	pt->backptr = NULL;
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	12 82       	std	Z+2, r1	; 0x02
    142c:	11 82       	std	Z+1, r1	; 0x01
	return pt;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <init_err_vect>:


struct ERROR_VECT* init_err_vect(uint8_t dx, uint8_t dy, RCT_PT* rct_pt,
								 struct ERROR_VECT* next, struct ERROR_VECT* prev){
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	2a 97       	sbiw	r28, 0x0a	; 10
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	8b 83       	std	Y+3, r24	; 0x03
    1456:	6c 83       	std	Y+4, r22	; 0x04
    1458:	5e 83       	std	Y+6, r21	; 0x06
    145a:	4d 83       	std	Y+5, r20	; 0x05
    145c:	38 87       	std	Y+8, r19	; 0x08
    145e:	2f 83       	std	Y+7, r18	; 0x07
    1460:	1a 87       	std	Y+10, r17	; 0x0a
    1462:	09 87       	std	Y+9, r16	; 0x09
	struct ERROR_VECT* evct = malloc(sizeof(struct ERROR_VECT));
    1464:	8e e0       	ldi	r24, 0x0E	; 14
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 1f 32 	call	0x643e	; 0x643e <malloc>
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
	if(evct == NULL){rprintf("NULL");}
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	81 f4       	brne	.+32     	; 0x1498 <init_err_vect+0x5c>
    1478:	86 e6       	ldi	r24, 0x66	; 102
    147a:	94 e0       	ldi	r25, 0x04	; 4
    147c:	00 d0       	rcall	.+0      	; 0x147e <init_err_vect+0x42>
    147e:	0f 92       	push	r0
    1480:	ed b7       	in	r30, 0x3d	; 61
    1482:	fe b7       	in	r31, 0x3e	; 62
    1484:	31 96       	adiw	r30, 0x01	; 1
    1486:	21 e0       	ldi	r18, 0x01	; 1
    1488:	20 83       	st	Z, r18
    148a:	92 83       	std	Z+2, r25	; 0x02
    148c:	81 83       	std	Z+1, r24	; 0x01
    148e:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
//	else{rprintf("NOT NULL");}
	evct->dx = dx;
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a0 e0       	ldi	r26, 0x00	; 0
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	bc 01       	movw	r22, r24
    14a4:	cd 01       	movw	r24, r26
    14a6:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	e9 81       	ldd	r30, Y+1	; 0x01
    14b0:	fa 81       	ldd	r31, Y+2	; 0x02
    14b2:	80 83       	st	Z, r24
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	a2 83       	std	Z+2, r26	; 0x02
    14b8:	b3 83       	std	Z+3, r27	; 0x03
	evct->dy = dy;
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a0 e0       	ldi	r26, 0x00	; 0
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	e9 81       	ldd	r30, Y+1	; 0x01
    14d2:	fa 81       	ldd	r31, Y+2	; 0x02
    14d4:	84 83       	std	Z+4, r24	; 0x04
    14d6:	95 83       	std	Z+5, r25	; 0x05
    14d8:	a6 83       	std	Z+6, r26	; 0x06
    14da:	b7 83       	std	Z+7, r27	; 0x07
	evct->next = next;
    14dc:	e9 81       	ldd	r30, Y+1	; 0x01
    14de:	fa 81       	ldd	r31, Y+2	; 0x02
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	93 87       	std	Z+11, r25	; 0x0b
    14e6:	82 87       	std	Z+10, r24	; 0x0a
	evct->prev = prev;
    14e8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ea:	fa 81       	ldd	r31, Y+2	; 0x02
    14ec:	89 85       	ldd	r24, Y+9	; 0x09
    14ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f0:	95 87       	std	Z+13, r25	; 0x0d
    14f2:	84 87       	std	Z+12, r24	; 0x0c
	evct->rct_pt = rct_pt;
    14f4:	e9 81       	ldd	r30, Y+1	; 0x01
    14f6:	fa 81       	ldd	r31, Y+2	; 0x02
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	91 87       	std	Z+9, r25	; 0x09
    14fe:	80 87       	std	Z+8, r24	; 0x08
	return evct;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1504:	2a 96       	adiw	r28, 0x0a	; 10
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <delete_err_vect>:

void delete_err_vect(struct ERROR_VECT* evct){
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <delete_err_vect+0x6>
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
	evct->prev->next = evct->next;
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	a4 85       	ldd	r26, Z+12	; 0x0c
    152e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	82 85       	ldd	r24, Z+10	; 0x0a
    1536:	93 85       	ldd	r25, Z+11	; 0x0b
    1538:	1b 96       	adiw	r26, 0x0b	; 11
    153a:	9c 93       	st	X, r25
    153c:	8e 93       	st	-X, r24
    153e:	1a 97       	sbiw	r26, 0x0a	; 10
	evct->next->prev = evct->prev;
    1540:	e9 81       	ldd	r30, Y+1	; 0x01
    1542:	fa 81       	ldd	r31, Y+2	; 0x02
    1544:	a2 85       	ldd	r26, Z+10	; 0x0a
    1546:	b3 85       	ldd	r27, Z+11	; 0x0b
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	84 85       	ldd	r24, Z+12	; 0x0c
    154e:	95 85       	ldd	r25, Z+13	; 0x0d
    1550:	1d 96       	adiw	r26, 0x0d	; 13
    1552:	9c 93       	st	X, r25
    1554:	8e 93       	st	-X, r24
    1556:	1c 97       	sbiw	r26, 0x0c	; 12
	free(evct);
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	0e 94 c9 32 	call	0x6592	; 0x6592 <free>
}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <delete_occ_pt>:

void delete_occ_pt(struct OCC_PT* pt){
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <delete_occ_pt+0x6>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
	//pt->prev->next = pt->next;
	//pt->next->prev = pt->prev;
	free(pt);
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	0e 94 c9 32 	call	0x6592	; 0x6592 <free>

}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <delete_fre_pt>:

void delete_fre_pt(struct FRE_PT* pt){
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <delete_fre_pt+0x6>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
	//free(pt->backptr);
	free(pt);
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	0e 94 c9 32 	call	0x6592	; 0x6592 <free>

}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <init_map_pt>:

void init_map_pt(struct MAP_PT* mpt, uint8_t occ_flag){
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <init_map_pt+0x6>
    15b0:	0f 92       	push	r0
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	6b 83       	std	Y+3, r22	; 0x03
		if(occ_flag){	//occlusion
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	88 23       	and	r24, r24
    15c0:	59 f0       	breq	.+22     	; 0x15d8 <init_map_pt+0x2e>
			mpt->point = (void*)init_occ_pt();
    15c2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <init_occ_pt>
    15c6:	e9 81       	ldd	r30, Y+1	; 0x01
    15c8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ca:	92 83       	std	Z+2, r25	; 0x02
    15cc:	81 83       	std	Z+1, r24	; 0x01
			mpt->occ_flag = SET;
    15ce:	e9 81       	ldd	r30, Y+1	; 0x01
    15d0:	fa 81       	ldd	r31, Y+2	; 0x02
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 83       	st	Z, r24
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <init_map_pt+0x40>
		}	
		else{			//free point
			mpt->point = (void*)init_fre_pt();
    15d8:	0e 94 04 0a 	call	0x1408	; 0x1408 <init_fre_pt>
    15dc:	e9 81       	ldd	r30, Y+1	; 0x01
    15de:	fa 81       	ldd	r31, Y+2	; 0x02
    15e0:	92 83       	std	Z+2, r25	; 0x02
    15e2:	81 83       	std	Z+1, r24	; 0x01
			mpt->occ_flag = UNSET;
    15e4:	e9 81       	ldd	r30, Y+1	; 0x01
    15e6:	fa 81       	ldd	r31, Y+2	; 0x02
    15e8:	10 82       	st	Z, r1
		}
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <insert_map_pt>:

void insert_map_pt(uint8_t x, uint8_t y, uint8_t occ_flag){
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <insert_map_pt+0x6>
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	6a 83       	std	Y+2, r22	; 0x02
    1606:	4b 83       	std	Y+3, r20	; 0x03
	
	if((x > N) || (x < 0)){rprintf(" |PROBLEM X: %d| ",x);}
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	8b 31       	cpi	r24, 0x1B	; 27
    160c:	c0 f0       	brcs	.+48     	; 0x163e <insert_map_pt+0x48>
    160e:	4d e7       	ldi	r20, 0x7D	; 125
    1610:	54 e0       	ldi	r21, 0x04	; 4
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	00 d0       	rcall	.+0      	; 0x161a <insert_map_pt+0x24>
    161a:	00 d0       	rcall	.+0      	; 0x161c <insert_map_pt+0x26>
    161c:	0f 92       	push	r0
    161e:	ed b7       	in	r30, 0x3d	; 61
    1620:	fe b7       	in	r31, 0x3e	; 62
    1622:	31 96       	adiw	r30, 0x01	; 1
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 83       	st	Z, r24
    1628:	52 83       	std	Z+2, r21	; 0x02
    162a:	41 83       	std	Z+1, r20	; 0x01
    162c:	34 83       	std	Z+4, r19	; 0x04
    162e:	23 83       	std	Z+3, r18	; 0x03
    1630:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
	assert(!(x > N));
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	8b 31       	cpi	r24, 0x1B	; 27
    1642:	10 f0       	brcs	.+4      	; 0x1648 <insert_map_pt+0x52>
    1644:	0e 94 21 33 	call	0x6642	; 0x6642 <abort>
	assert(!(x < 0));
	if((y > N) || (y < 0)){rprintf(" |PROBLEM Y: %d| ",y);}
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	8b 31       	cpi	r24, 0x1B	; 27
    164c:	c0 f0       	brcs	.+48     	; 0x167e <insert_map_pt+0x88>
    164e:	4b e6       	ldi	r20, 0x6B	; 107
    1650:	54 e0       	ldi	r21, 0x04	; 4
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	00 d0       	rcall	.+0      	; 0x165a <insert_map_pt+0x64>
    165a:	00 d0       	rcall	.+0      	; 0x165c <insert_map_pt+0x66>
    165c:	0f 92       	push	r0
    165e:	ed b7       	in	r30, 0x3d	; 61
    1660:	fe b7       	in	r31, 0x3e	; 62
    1662:	31 96       	adiw	r30, 0x01	; 1
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	80 83       	st	Z, r24
    1668:	52 83       	std	Z+2, r21	; 0x02
    166a:	41 83       	std	Z+1, r20	; 0x01
    166c:	34 83       	std	Z+4, r19	; 0x04
    166e:	23 83       	std	Z+3, r18	; 0x03
    1670:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
	assert(!(y > N));
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	8b 31       	cpi	r24, 0x1B	; 27
    1682:	10 f0       	brcs	.+4      	; 0x1688 <insert_map_pt+0x92>
    1684:	0e 94 21 33 	call	0x6642	; 0x6642 <abort>
	assert(!(y < 0));
	
	if(g_map[x][y].occ_flag && occ_flag){ 	//there is an occlusion at this point and another occlusion was detected there
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	48 2f       	mov	r20, r24
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	c9 01       	movw	r24, r18
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	82 0f       	add	r24, r18
    169c:	93 1f       	adc	r25, r19
    169e:	2e e4       	ldi	r18, 0x4E	; 78
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	b9 01       	movw	r22, r18
    16a4:	46 9f       	mul	r20, r22
    16a6:	90 01       	movw	r18, r0
    16a8:	47 9f       	mul	r20, r23
    16aa:	30 0d       	add	r19, r0
    16ac:	56 9f       	mul	r21, r22
    16ae:	30 0d       	add	r19, r0
    16b0:	11 24       	eor	r1, r1
    16b2:	82 0f       	add	r24, r18
    16b4:	93 1f       	adc	r25, r19
    16b6:	fc 01       	movw	r30, r24
    16b8:	ef 5d       	subi	r30, 0xDF	; 223
    16ba:	fb 4f       	sbci	r31, 0xFB	; 251
    16bc:	80 81       	ld	r24, Z
    16be:	88 23       	and	r24, r24
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <insert_map_pt+0xce>
    16c2:	82 c0       	rjmp	.+260    	; 0x17c8 <insert_map_pt+0x1d2>
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	88 23       	and	r24, r24
    16c8:	09 f4       	brne	.+2      	; 0x16cc <insert_map_pt+0xd6>
    16ca:	7e c0       	rjmp	.+252    	; 0x17c8 <insert_map_pt+0x1d2>
		((struct OCC_PT*)g_map[x][y].point)->k += 5;
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	48 2f       	mov	r20, r24
    16d0:	50 e0       	ldi	r21, 0x00	; 0
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	c9 01       	movw	r24, r18
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
    16e2:	2e e4       	ldi	r18, 0x4E	; 78
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	b9 01       	movw	r22, r18
    16e8:	46 9f       	mul	r20, r22
    16ea:	90 01       	movw	r18, r0
    16ec:	47 9f       	mul	r20, r23
    16ee:	30 0d       	add	r19, r0
    16f0:	56 9f       	mul	r21, r22
    16f2:	30 0d       	add	r19, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	82 0f       	add	r24, r18
    16f8:	93 1f       	adc	r25, r19
    16fa:	fc 01       	movw	r30, r24
    16fc:	ee 5d       	subi	r30, 0xDE	; 222
    16fe:	fb 4f       	sbci	r31, 0xFB	; 251
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	dc 01       	movw	r26, r24
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	48 2f       	mov	r20, r24
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	c9 01       	movw	r24, r18
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	82 0f       	add	r24, r18
    171a:	93 1f       	adc	r25, r19
    171c:	2e e4       	ldi	r18, 0x4E	; 78
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	b9 01       	movw	r22, r18
    1722:	46 9f       	mul	r20, r22
    1724:	90 01       	movw	r18, r0
    1726:	47 9f       	mul	r20, r23
    1728:	30 0d       	add	r19, r0
    172a:	56 9f       	mul	r21, r22
    172c:	30 0d       	add	r19, r0
    172e:	11 24       	eor	r1, r1
    1730:	82 0f       	add	r24, r18
    1732:	93 1f       	adc	r25, r19
    1734:	fc 01       	movw	r30, r24
    1736:	ee 5d       	subi	r30, 0xDE	; 222
    1738:	fb 4f       	sbci	r31, 0xFB	; 251
    173a:	80 81       	ld	r24, Z
    173c:	91 81       	ldd	r25, Z+1	; 0x01
    173e:	fc 01       	movw	r30, r24
    1740:	80 81       	ld	r24, Z
    1742:	8b 5f       	subi	r24, 0xFB	; 251
    1744:	8c 93       	st	X, r24
		if(((struct OCC_PT*)g_map[x][y].point)->k > 100){
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	48 2f       	mov	r20, r24
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	c9 01       	movw	r24, r18
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	82 0f       	add	r24, r18
    175a:	93 1f       	adc	r25, r19
    175c:	2e e4       	ldi	r18, 0x4E	; 78
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	b9 01       	movw	r22, r18
    1762:	46 9f       	mul	r20, r22
    1764:	90 01       	movw	r18, r0
    1766:	47 9f       	mul	r20, r23
    1768:	30 0d       	add	r19, r0
    176a:	56 9f       	mul	r21, r22
    176c:	30 0d       	add	r19, r0
    176e:	11 24       	eor	r1, r1
    1770:	82 0f       	add	r24, r18
    1772:	93 1f       	adc	r25, r19
    1774:	fc 01       	movw	r30, r24
    1776:	ee 5d       	subi	r30, 0xDE	; 222
    1778:	fb 4f       	sbci	r31, 0xFB	; 251
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	fc 01       	movw	r30, r24
    1780:	80 81       	ld	r24, Z
    1782:	85 36       	cpi	r24, 0x65	; 101
    1784:	0c f4       	brge	.+2      	; 0x1788 <insert_map_pt+0x192>
    1786:	97 c0       	rjmp	.+302    	; 0x18b6 <insert_map_pt+0x2c0>
			((struct OCC_PT*)g_map[x][y].point)->k = 100;
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	48 2f       	mov	r20, r24
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	c9 01       	movw	r24, r18
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	82 0f       	add	r24, r18
    179c:	93 1f       	adc	r25, r19
    179e:	2e e4       	ldi	r18, 0x4E	; 78
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	b9 01       	movw	r22, r18
    17a4:	46 9f       	mul	r20, r22
    17a6:	90 01       	movw	r18, r0
    17a8:	47 9f       	mul	r20, r23
    17aa:	30 0d       	add	r19, r0
    17ac:	56 9f       	mul	r21, r22
    17ae:	30 0d       	add	r19, r0
    17b0:	11 24       	eor	r1, r1
    17b2:	82 0f       	add	r24, r18
    17b4:	93 1f       	adc	r25, r19
    17b6:	fc 01       	movw	r30, r24
    17b8:	ee 5d       	subi	r30, 0xDE	; 222
    17ba:	fb 4f       	sbci	r31, 0xFB	; 251
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	fc 01       	movw	r30, r24
    17c2:	84 e6       	ldi	r24, 0x64	; 100
    17c4:	80 83       	st	Z, r24
    17c6:	77 c0       	rjmp	.+238    	; 0x18b6 <insert_map_pt+0x2c0>
		}
		return;
	}
	else if(g_map[x][y].occ_flag){ 	//there is an occlusion at this point
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	48 2f       	mov	r20, r24
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	c9 01       	movw	r24, r18
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	82 0f       	add	r24, r18
    17dc:	93 1f       	adc	r25, r19
    17de:	2e e4       	ldi	r18, 0x4E	; 78
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	b9 01       	movw	r22, r18
    17e4:	46 9f       	mul	r20, r22
    17e6:	90 01       	movw	r18, r0
    17e8:	47 9f       	mul	r20, r23
    17ea:	30 0d       	add	r19, r0
    17ec:	56 9f       	mul	r21, r22
    17ee:	30 0d       	add	r19, r0
    17f0:	11 24       	eor	r1, r1
    17f2:	82 0f       	add	r24, r18
    17f4:	93 1f       	adc	r25, r19
    17f6:	fc 01       	movw	r30, r24
    17f8:	ef 5d       	subi	r30, 0xDF	; 223
    17fa:	fb 4f       	sbci	r31, 0xFB	; 251
    17fc:	80 81       	ld	r24, Z
    17fe:	88 23       	and	r24, r24
    1800:	f9 f0       	breq	.+62     	; 0x1840 <insert_map_pt+0x24a>
		delete_occ_pt((struct OCC_PT*)g_map[x][y].point);
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	48 2f       	mov	r20, r24
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	c9 01       	movw	r24, r18
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	82 0f       	add	r24, r18
    1816:	93 1f       	adc	r25, r19
    1818:	2e e4       	ldi	r18, 0x4E	; 78
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	b9 01       	movw	r22, r18
    181e:	46 9f       	mul	r20, r22
    1820:	90 01       	movw	r18, r0
    1822:	47 9f       	mul	r20, r23
    1824:	30 0d       	add	r19, r0
    1826:	56 9f       	mul	r21, r22
    1828:	30 0d       	add	r19, r0
    182a:	11 24       	eor	r1, r1
    182c:	82 0f       	add	r24, r18
    182e:	93 1f       	adc	r25, r19
    1830:	fc 01       	movw	r30, r24
    1832:	ee 5d       	subi	r30, 0xDE	; 222
    1834:	fb 4f       	sbci	r31, 0xFB	; 251
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	0e 94 b5 0a 	call	0x156a	; 0x156a <delete_occ_pt>
    183e:	1e c0       	rjmp	.+60     	; 0x187c <insert_map_pt+0x286>
	}
	else{				//this point is free
		delete_fre_pt((struct FRE_PT*)g_map[x][y].point);
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	48 2f       	mov	r20, r24
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	c9 01       	movw	r24, r18
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	82 0f       	add	r24, r18
    1854:	93 1f       	adc	r25, r19
    1856:	2e e4       	ldi	r18, 0x4E	; 78
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	b9 01       	movw	r22, r18
    185c:	46 9f       	mul	r20, r22
    185e:	90 01       	movw	r18, r0
    1860:	47 9f       	mul	r20, r23
    1862:	30 0d       	add	r19, r0
    1864:	56 9f       	mul	r21, r22
    1866:	30 0d       	add	r19, r0
    1868:	11 24       	eor	r1, r1
    186a:	82 0f       	add	r24, r18
    186c:	93 1f       	adc	r25, r19
    186e:	fc 01       	movw	r30, r24
    1870:	ee 5d       	subi	r30, 0xDE	; 222
    1872:	fb 4f       	sbci	r31, 0xFB	; 251
    1874:	80 81       	ld	r24, Z
    1876:	91 81       	ldd	r25, Z+1	; 0x01
    1878:	0e 94 c5 0a 	call	0x158a	; 0x158a <delete_fre_pt>
	}
	init_map_pt(&(g_map[x][y]), occ_flag);
    187c:	61 e2       	ldi	r22, 0x21	; 33
    187e:	74 e0       	ldi	r23, 0x04	; 4
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	8e e4       	ldi	r24, 0x4E	; 78
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	28 9f       	mul	r18, r24
    188c:	a0 01       	movw	r20, r0
    188e:	29 9f       	mul	r18, r25
    1890:	50 0d       	add	r21, r0
    1892:	38 9f       	mul	r19, r24
    1894:	50 0d       	add	r21, r0
    1896:	11 24       	eor	r1, r1
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	c9 01       	movw	r24, r18
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	82 0f       	add	r24, r18
    18a6:	93 1f       	adc	r25, r19
    18a8:	84 0f       	add	r24, r20
    18aa:	95 1f       	adc	r25, r21
    18ac:	86 0f       	add	r24, r22
    18ae:	97 1f       	adc	r25, r23
    18b0:	6b 81       	ldd	r22, Y+3	; 0x03
    18b2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <init_map_pt>
}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <init_map>:

void init_map(){
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <init_map+0x6>
    18c8:	0f 92       	push	r0
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
	uint8_t unset = UNSET;
    18ce:	1b 82       	std	Y+3, r1	; 0x03
	for(uint8_t i=0; i<N; i++){
    18d0:	1a 82       	std	Y+2, r1	; 0x02
    18d2:	28 c0       	rjmp	.+80     	; 0x1924 <init_map+0x62>
		for(uint8_t j=0; j<N; j++){
    18d4:	19 82       	std	Y+1, r1	; 0x01
    18d6:	20 c0       	rjmp	.+64     	; 0x1918 <init_map+0x56>
			init_map_pt(&g_map[i][j], unset); //create default freespace points
    18d8:	61 e2       	ldi	r22, 0x21	; 33
    18da:	74 e0       	ldi	r23, 0x04	; 4
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8e e4       	ldi	r24, 0x4E	; 78
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	28 9f       	mul	r18, r24
    18e8:	a0 01       	movw	r20, r0
    18ea:	29 9f       	mul	r18, r25
    18ec:	50 0d       	add	r21, r0
    18ee:	38 9f       	mul	r19, r24
    18f0:	50 0d       	add	r21, r0
    18f2:	11 24       	eor	r1, r1
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	c9 01       	movw	r24, r18
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	82 0f       	add	r24, r18
    1902:	93 1f       	adc	r25, r19
    1904:	84 0f       	add	r24, r20
    1906:	95 1f       	adc	r25, r21
    1908:	86 0f       	add	r24, r22
    190a:	97 1f       	adc	r25, r23
    190c:	6b 81       	ldd	r22, Y+3	; 0x03
    190e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <init_map_pt>
}

void init_map(){
	uint8_t unset = UNSET;
	for(uint8_t i=0; i<N; i++){
		for(uint8_t j=0; j<N; j++){
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	8a 31       	cpi	r24, 0x1A	; 26
    191c:	e8 f2       	brcs	.-70     	; 0x18d8 <init_map+0x16>
	init_map_pt(&(g_map[x][y]), occ_flag);
}

void init_map(){
	uint8_t unset = UNSET;
	for(uint8_t i=0; i<N; i++){
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	8a 31       	cpi	r24, 0x1A	; 26
    1928:	a8 f2       	brcs	.-86     	; 0x18d4 <init_map+0x12>
		for(uint8_t j=0; j<N; j++){
			init_map_pt(&g_map[i][j], unset); //create default freespace points
		}
	}
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <init_rct_set>:

void init_rct_set(){
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	0f 92       	push	r0
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t itr = 0; itr < 5; itr++){
    1940:	19 82       	std	Y+1, r1	; 0x01
    1942:	30 c0       	rjmp	.+96     	; 0x19a4 <init_rct_set+0x6e>
		recent_ptset[itr].magnitude = 0;
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	c9 01       	movw	r24, r18
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	82 0f       	add	r24, r18
    1952:	93 1f       	adc	r25, r19
    1954:	9c 01       	movw	r18, r24
    1956:	22 0f       	add	r18, r18
    1958:	33 1f       	adc	r19, r19
    195a:	22 0f       	add	r18, r18
    195c:	33 1f       	adc	r19, r19
    195e:	82 0f       	add	r24, r18
    1960:	93 1f       	adc	r25, r19
    1962:	fc 01       	movw	r30, r24
    1964:	e5 54       	subi	r30, 0x45	; 69
    1966:	fc 4f       	sbci	r31, 0xFC	; 252
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	80 83       	st	Z, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	a2 83       	std	Z+2, r26	; 0x02
    1976:	b3 83       	std	Z+3, r27	; 0x03
		recent_ptset[itr].valid = UNSET;
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	c9 01       	movw	r24, r18
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	82 0f       	add	r24, r18
    1986:	93 1f       	adc	r25, r19
    1988:	9c 01       	movw	r18, r24
    198a:	22 0f       	add	r18, r18
    198c:	33 1f       	adc	r19, r19
    198e:	22 0f       	add	r18, r18
    1990:	33 1f       	adc	r19, r19
    1992:	82 0f       	add	r24, r18
    1994:	93 1f       	adc	r25, r19
    1996:	fc 01       	movw	r30, r24
    1998:	e7 53       	subi	r30, 0x37	; 55
    199a:	fc 4f       	sbci	r31, 0xFC	; 252
    199c:	10 82       	st	Z, r1
		}
	}
}

void init_rct_set(){
	for(uint8_t itr = 0; itr < 5; itr++){
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	85 30       	cpi	r24, 0x05	; 5
    19a8:	68 f2       	brcs	.-102    	; 0x1944 <init_rct_set+0xe>
		recent_ptset[itr].magnitude = 0;
		recent_ptset[itr].valid = UNSET;
	}
}
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <init_robot>:

void init_robot(){
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
	robot.heading = 0;
    19ba:	10 92 0c 04 	sts	0x040C, r1
    19be:	10 92 0b 04 	sts	0x040B, r1
	robot.sen_heading = 0;
    19c2:	10 92 0e 04 	sts	0x040E, r1
    19c6:	10 92 0d 04 	sts	0x040D, r1
	robot.sen_vel = 0;
    19ca:	10 92 10 04 	sts	0x0410, r1
    19ce:	10 92 0f 04 	sts	0x040F, r1
	robot.dDis = 0;
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e0       	ldi	r26, 0x00	; 0
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	80 93 11 04 	sts	0x0411, r24
    19de:	90 93 12 04 	sts	0x0412, r25
    19e2:	a0 93 13 04 	sts	0x0413, r26
    19e6:	b0 93 14 04 	sts	0x0414, r27
	robot.x = HALF_N;
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a0 e5       	ldi	r26, 0x50	; 80
    19f0:	b1 e4       	ldi	r27, 0x41	; 65
    19f2:	80 93 15 04 	sts	0x0415, r24
    19f6:	90 93 16 04 	sts	0x0416, r25
    19fa:	a0 93 17 04 	sts	0x0417, r26
    19fe:	b0 93 18 04 	sts	0x0418, r27
	robot.y = HALF_N;
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a0 e5       	ldi	r26, 0x50	; 80
    1a08:	b1 e4       	ldi	r27, 0x41	; 65
    1a0a:	80 93 19 04 	sts	0x0419, r24
    1a0e:	90 93 1a 04 	sts	0x041A, r25
    1a12:	a0 93 1b 04 	sts	0x041B, r26
    1a16:	b0 93 1c 04 	sts	0x041C, r27

}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <init_error_list>:

void init_error_list(){
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
	err_list.head = init_err_vect(0, 0, NULL, NULL, NULL);
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	00 e0       	ldi	r16, 0x00	; 0
    1a3a:	10 e0       	ldi	r17, 0x00	; 0
    1a3c:	0e 94 1e 0a 	call	0x143c	; 0x143c <init_err_vect>
    1a40:	90 93 07 04 	sts	0x0407, r25
    1a44:	80 93 06 04 	sts	0x0406, r24
	err_list.tail = init_err_vect(0, 0, NULL, NULL, err_list.head);
    1a48:	e0 91 06 04 	lds	r30, 0x0406
    1a4c:	f0 91 07 04 	lds	r31, 0x0407
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	8f 01       	movw	r16, r30
    1a5e:	0e 94 1e 0a 	call	0x143c	; 0x143c <init_err_vect>
    1a62:	90 93 09 04 	sts	0x0409, r25
    1a66:	80 93 08 04 	sts	0x0408, r24
	err_list.head->next = err_list.tail;
    1a6a:	e0 91 06 04 	lds	r30, 0x0406
    1a6e:	f0 91 07 04 	lds	r31, 0x0407
    1a72:	80 91 08 04 	lds	r24, 0x0408
    1a76:	90 91 09 04 	lds	r25, 0x0409
    1a7a:	93 87       	std	Z+11, r25	; 0x0b
    1a7c:	82 87       	std	Z+10, r24	; 0x0a
	err_list.size = 0;
    1a7e:	10 92 0a 04 	sts	0x040A, r1
}
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	08 95       	ret

00001a8c <insert_after_err>:

void insert_after_err(struct ERROR_VECT* ins_pt, uint8_t dx, uint8_t dy, RCT_PT* rct_pt){
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	28 97       	sbiw	r28, 0x08	; 8
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	9c 83       	std	Y+4, r25	; 0x04
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
    1aa8:	6d 83       	std	Y+5, r22	; 0x05
    1aaa:	4e 83       	std	Y+6, r20	; 0x06
    1aac:	38 87       	std	Y+8, r19	; 0x08
    1aae:	2f 83       	std	Y+7, r18	; 0x07
	struct ERROR_VECT* temp = ins_pt->next;
    1ab0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ab2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ab4:	82 85       	ldd	r24, Z+10	; 0x0a
    1ab6:	93 85       	ldd	r25, Z+11	; 0x0b
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
	ins_pt->next = init_err_vect(dx, dy, rct_pt, temp, ins_pt);
    1abc:	2f 81       	ldd	r18, Y+7	; 0x07
    1abe:	38 85       	ldd	r19, Y+8	; 0x08
    1ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ac6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	6e 81       	ldd	r22, Y+6	; 0x06
    1acc:	a9 01       	movw	r20, r18
    1ace:	9f 01       	movw	r18, r30
    1ad0:	8d 01       	movw	r16, r26
    1ad2:	0e 94 1e 0a 	call	0x143c	; 0x143c <init_err_vect>
    1ad6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ad8:	fc 81       	ldd	r31, Y+4	; 0x04
    1ada:	93 87       	std	Z+11, r25	; 0x0b
    1adc:	82 87       	std	Z+10, r24	; 0x0a
	//ins_pt->next->prev = ins_pt;
	//ins_pt->next->next = temp;
	temp->prev = ins_pt->next;
    1ade:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae2:	82 85       	ldd	r24, Z+10	; 0x0a
    1ae4:	93 85       	ldd	r25, Z+11	; 0x0b
    1ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aea:	95 87       	std	Z+13, r25	; 0x0d
    1aec:	84 87       	std	Z+12, r24	; 0x0c
	err_list.size++;
    1aee:	80 91 0a 04 	lds	r24, 0x040A
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	80 93 0a 04 	sts	0x040A, r24
}
    1af8:	28 96       	adiw	r28, 0x08	; 8
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	08 95       	ret

00001b0e <push_back_err>:

void push_back_err(uint8_t dx, uint8_t dy, RCT_PT* rct_pt){
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <push_back_err+0x6>
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <push_back_err+0x8>
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	6a 83       	std	Y+2, r22	; 0x02
    1b1e:	5c 83       	std	Y+4, r21	; 0x04
    1b20:	4b 83       	std	Y+3, r20	; 0x03
//		rprintf("PUSH START:.");
		insert_after_err(err_list.tail->prev, dx, dy, rct_pt);
    1b22:	e0 91 08 04 	lds	r30, 0x0408
    1b26:	f0 91 09 04 	lds	r31, 0x0409
    1b2a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b2c:	95 85       	ldd	r25, Z+13	; 0x0d
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	69 81       	ldd	r22, Y+1	; 0x01
    1b34:	4a 81       	ldd	r20, Y+2	; 0x02
    1b36:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <insert_after_err>
//		rprintf(".:PUSH DONE\n");
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <ret_bad_err_vect>:

struct ERROR_VECT ret_bad_err_vect(){
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	65 97       	sbiw	r28, 0x15	; 21
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	98 8b       	std	Y+16, r25	; 0x10
    1b5e:	8f 87       	std	Y+15, r24	; 0x0f
	struct ERROR_VECT bad_err_vect;
	bad_err_vect.dx = 0xFFFFFFFF;
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e8       	ldi	r26, 0x80	; 128
    1b66:	bf e4       	ldi	r27, 0x4F	; 79
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	ab 83       	std	Y+3, r26	; 0x03
    1b6e:	bc 83       	std	Y+4, r27	; 0x04
	bad_err_vect.dy = 0xFFFFFFFF;
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e8       	ldi	r26, 0x80	; 128
    1b76:	bf e4       	ldi	r27, 0x4F	; 79
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	af 83       	std	Y+7, r26	; 0x07
    1b7e:	b8 87       	std	Y+8, r27	; 0x08
	bad_err_vect.next = NULL;
    1b80:	1c 86       	std	Y+12, r1	; 0x0c
    1b82:	1b 86       	std	Y+11, r1	; 0x0b
	bad_err_vect.prev = NULL;
    1b84:	1e 86       	std	Y+14, r1	; 0x0e
    1b86:	1d 86       	std	Y+13, r1	; 0x0d
	bad_err_vect.rct_pt = NULL;
    1b88:	1a 86       	std	Y+10, r1	; 0x0a
    1b8a:	19 86       	std	Y+9, r1	; 0x09
	return bad_err_vect;
    1b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8e:	98 89       	ldd	r25, Y+16	; 0x10
    1b90:	9a 8b       	std	Y+18, r25	; 0x12
    1b92:	89 8b       	std	Y+17, r24	; 0x11
    1b94:	fe 01       	movw	r30, r28
    1b96:	31 96       	adiw	r30, 0x01	; 1
    1b98:	fc 8b       	std	Y+20, r31	; 0x14
    1b9a:	eb 8b       	std	Y+19, r30	; 0x13
    1b9c:	fe e0       	ldi	r31, 0x0E	; 14
    1b9e:	fd 8b       	std	Y+21, r31	; 0x15
    1ba0:	eb 89       	ldd	r30, Y+19	; 0x13
    1ba2:	fc 89       	ldd	r31, Y+20	; 0x14
    1ba4:	00 80       	ld	r0, Z
    1ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
    1bb0:	e9 89       	ldd	r30, Y+17	; 0x11
    1bb2:	fa 89       	ldd	r31, Y+18	; 0x12
    1bb4:	00 82       	st	Z, r0
    1bb6:	89 89       	ldd	r24, Y+17	; 0x11
    1bb8:	9a 89       	ldd	r25, Y+18	; 0x12
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	9a 8b       	std	Y+18, r25	; 0x12
    1bbe:	89 8b       	std	Y+17, r24	; 0x11
    1bc0:	9d 89       	ldd	r25, Y+21	; 0x15
    1bc2:	91 50       	subi	r25, 0x01	; 1
    1bc4:	9d 8b       	std	Y+21, r25	; 0x15
    1bc6:	ed 89       	ldd	r30, Y+21	; 0x15
    1bc8:	ee 23       	and	r30, r30
    1bca:	51 f7       	brne	.-44     	; 0x1ba0 <ret_bad_err_vect+0x58>
}
    1bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bce:	98 89       	ldd	r25, Y+16	; 0x10
    1bd0:	65 96       	adiw	r28, 0x15	; 21
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <pop_back_err>:

struct ERROR_VECT pop_back_err(){
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	6a 97       	sbiw	r28, 0x1a	; 26
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	98 8b       	std	Y+16, r25	; 0x10
    1bf8:	8f 87       	std	Y+15, r24	; 0x0f
	if(err_list.size == 0){return ret_bad_err_vect();} //list is empty
    1bfa:	80 91 0a 04 	lds	r24, 0x040A
    1bfe:	88 23       	and	r24, r24
    1c00:	29 f4       	brne	.+10     	; 0x1c0c <pop_back_err+0x2a>
    1c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c04:	98 89       	ldd	r25, Y+16	; 0x10
    1c06:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <ret_bad_err_vect>
    1c0a:	57 c0       	rjmp	.+174    	; 0x1cba <pop_back_err+0xd8>
	struct ERROR_VECT retval = *(err_list.tail->prev);
    1c0c:	e0 91 08 04 	lds	r30, 0x0408
    1c10:	f0 91 09 04 	lds	r31, 0x0409
    1c14:	84 85       	ldd	r24, Z+12	; 0x0c
    1c16:	95 85       	ldd	r25, Z+13	; 0x0d
    1c18:	9e 01       	movw	r18, r28
    1c1a:	2f 5f       	subi	r18, 0xFF	; 255
    1c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1e:	3a 8b       	std	Y+18, r19	; 0x12
    1c20:	29 8b       	std	Y+17, r18	; 0x11
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
    1c26:	3e e0       	ldi	r19, 0x0E	; 14
    1c28:	3d 8b       	std	Y+21, r19	; 0x15
    1c2a:	eb 89       	ldd	r30, Y+19	; 0x13
    1c2c:	fc 89       	ldd	r31, Y+20	; 0x14
    1c2e:	00 80       	ld	r0, Z
    1c30:	2b 89       	ldd	r18, Y+19	; 0x13
    1c32:	3c 89       	ldd	r19, Y+20	; 0x14
    1c34:	2f 5f       	subi	r18, 0xFF	; 255
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	3c 8b       	std	Y+20, r19	; 0x14
    1c3a:	2b 8b       	std	Y+19, r18	; 0x13
    1c3c:	e9 89       	ldd	r30, Y+17	; 0x11
    1c3e:	fa 89       	ldd	r31, Y+18	; 0x12
    1c40:	00 82       	st	Z, r0
    1c42:	29 89       	ldd	r18, Y+17	; 0x11
    1c44:	3a 89       	ldd	r19, Y+18	; 0x12
    1c46:	2f 5f       	subi	r18, 0xFF	; 255
    1c48:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4a:	3a 8b       	std	Y+18, r19	; 0x12
    1c4c:	29 8b       	std	Y+17, r18	; 0x11
    1c4e:	3d 89       	ldd	r19, Y+21	; 0x15
    1c50:	31 50       	subi	r19, 0x01	; 1
    1c52:	3d 8b       	std	Y+21, r19	; 0x15
    1c54:	8d 89       	ldd	r24, Y+21	; 0x15
    1c56:	88 23       	and	r24, r24
    1c58:	41 f7       	brne	.-48     	; 0x1c2a <pop_back_err+0x48>
	delete_err_vect(err_list.tail->prev);
    1c5a:	e0 91 08 04 	lds	r30, 0x0408
    1c5e:	f0 91 09 04 	lds	r31, 0x0409
    1c62:	84 85       	ldd	r24, Z+12	; 0x0c
    1c64:	95 85       	ldd	r25, Z+13	; 0x0d
    1c66:	0e 94 8d 0a 	call	0x151a	; 0x151a <delete_err_vect>
	err_list.size--;
    1c6a:	80 91 0a 04 	lds	r24, 0x040A
    1c6e:	81 50       	subi	r24, 0x01	; 1
    1c70:	80 93 0a 04 	sts	0x040A, r24
	return retval;
    1c74:	ef 85       	ldd	r30, Y+15	; 0x0f
    1c76:	f8 89       	ldd	r31, Y+16	; 0x10
    1c78:	ff 8b       	std	Y+23, r31	; 0x17
    1c7a:	ee 8b       	std	Y+22, r30	; 0x16
    1c7c:	9e 01       	movw	r18, r28
    1c7e:	2f 5f       	subi	r18, 0xFF	; 255
    1c80:	3f 4f       	sbci	r19, 0xFF	; 255
    1c82:	39 8f       	std	Y+25, r19	; 0x19
    1c84:	28 8f       	std	Y+24, r18	; 0x18
    1c86:	3e e0       	ldi	r19, 0x0E	; 14
    1c88:	3a 8f       	std	Y+26, r19	; 0x1a
    1c8a:	e8 8d       	ldd	r30, Y+24	; 0x18
    1c8c:	f9 8d       	ldd	r31, Y+25	; 0x19
    1c8e:	00 80       	ld	r0, Z
    1c90:	28 8d       	ldd	r18, Y+24	; 0x18
    1c92:	39 8d       	ldd	r19, Y+25	; 0x19
    1c94:	2f 5f       	subi	r18, 0xFF	; 255
    1c96:	3f 4f       	sbci	r19, 0xFF	; 255
    1c98:	39 8f       	std	Y+25, r19	; 0x19
    1c9a:	28 8f       	std	Y+24, r18	; 0x18
    1c9c:	ee 89       	ldd	r30, Y+22	; 0x16
    1c9e:	ff 89       	ldd	r31, Y+23	; 0x17
    1ca0:	00 82       	st	Z, r0
    1ca2:	2e 89       	ldd	r18, Y+22	; 0x16
    1ca4:	3f 89       	ldd	r19, Y+23	; 0x17
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	3f 8b       	std	Y+23, r19	; 0x17
    1cac:	2e 8b       	std	Y+22, r18	; 0x16
    1cae:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1cb0:	31 50       	subi	r19, 0x01	; 1
    1cb2:	3a 8f       	std	Y+26, r19	; 0x1a
    1cb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cb6:	88 23       	and	r24, r24
    1cb8:	41 f7       	brne	.-48     	; 0x1c8a <pop_back_err+0xa8>
	
}
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	98 89       	ldd	r25, Y+16	; 0x10
    1cbe:	6a 96       	adiw	r28, 0x1a	; 26
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <clear_err_list>:

void clear_err_list(){
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	2e 97       	sbiw	r28, 0x0e	; 14
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <clear_err_list+0x1e>
	struct ERROR_VECT grab;
	while(err_list.size != 0){ //while list is not empty
		grab = pop_back_err();
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <pop_back_err>
	
}

void clear_err_list(){
	struct ERROR_VECT grab;
	while(err_list.size != 0){ //while list is not empty
    1cee:	80 91 0a 04 	lds	r24, 0x040A
    1cf2:	88 23       	and	r24, r24
    1cf4:	c1 f7       	brne	.-16     	; 0x1ce6 <clear_err_list+0x16>
	//	rprintf(" dy:");
	//	rprintfFloat(5, grab.dy);
	//	rprintf(" ");
	//	rprintf("size: %d | ",err_list.size);
	}
}
    1cf6:	2e 96       	adiw	r28, 0x0e	; 14
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <update_pts>:

void update_pts(){
    1d08:	af 92       	push	r10
    1d0a:	bf 92       	push	r11
    1d0c:	cf 92       	push	r12
    1d0e:	df 92       	push	r13
    1d10:	ef 92       	push	r14
    1d12:	ff 92       	push	r15
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <update_pts+0x16>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <update_pts+0x18>
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <update_pts+0x1a>
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
	for(int i=0; i<N; i++){
    1d26:	1e 82       	std	Y+6, r1	; 0x06
    1d28:	1d 82       	std	Y+5, r1	; 0x05
    1d2a:	5b c1       	rjmp	.+694    	; 0x1fe2 <update_pts+0x2da>
		for(int j=0; j<N; j++){
    1d2c:	1c 82       	std	Y+4, r1	; 0x04
    1d2e:	1b 82       	std	Y+3, r1	; 0x03
    1d30:	4d c1       	rjmp	.+666    	; 0x1fcc <update_pts+0x2c4>
			if(g_map[i][j].occ_flag){ 
    1d32:	4d 81       	ldd	r20, Y+5	; 0x05
    1d34:	5e 81       	ldd	r21, Y+6	; 0x06
    1d36:	2b 81       	ldd	r18, Y+3	; 0x03
    1d38:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3a:	c9 01       	movw	r24, r18
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	82 0f       	add	r24, r18
    1d42:	93 1f       	adc	r25, r19
    1d44:	2e e4       	ldi	r18, 0x4E	; 78
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	b9 01       	movw	r22, r18
    1d4a:	46 9f       	mul	r20, r22
    1d4c:	90 01       	movw	r18, r0
    1d4e:	47 9f       	mul	r20, r23
    1d50:	30 0d       	add	r19, r0
    1d52:	56 9f       	mul	r21, r22
    1d54:	30 0d       	add	r19, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	82 0f       	add	r24, r18
    1d5a:	93 1f       	adc	r25, r19
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	ef 5d       	subi	r30, 0xDF	; 223
    1d60:	fb 4f       	sbci	r31, 0xFB	; 251
    1d62:	80 81       	ld	r24, Z
    1d64:	88 23       	and	r24, r24
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <update_pts+0x62>
    1d68:	2c c1       	rjmp	.+600    	; 0x1fc2 <update_pts+0x2ba>
				
				((struct OCC_PT*)g_map[i][j].point)->k--; //decrement the confidence
    1d6a:	4d 81       	ldd	r20, Y+5	; 0x05
    1d6c:	5e 81       	ldd	r21, Y+6	; 0x06
    1d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d70:	3c 81       	ldd	r19, Y+4	; 0x04
    1d72:	c9 01       	movw	r24, r18
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	82 0f       	add	r24, r18
    1d7a:	93 1f       	adc	r25, r19
    1d7c:	2e e4       	ldi	r18, 0x4E	; 78
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	b9 01       	movw	r22, r18
    1d82:	46 9f       	mul	r20, r22
    1d84:	90 01       	movw	r18, r0
    1d86:	47 9f       	mul	r20, r23
    1d88:	30 0d       	add	r19, r0
    1d8a:	56 9f       	mul	r21, r22
    1d8c:	30 0d       	add	r19, r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	82 0f       	add	r24, r18
    1d92:	93 1f       	adc	r25, r19
    1d94:	fc 01       	movw	r30, r24
    1d96:	ee 5d       	subi	r30, 0xDE	; 222
    1d98:	fb 4f       	sbci	r31, 0xFB	; 251
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	fc 01       	movw	r30, r24
    1da0:	80 81       	ld	r24, Z
    1da2:	81 50       	subi	r24, 0x01	; 1
    1da4:	80 83       	st	Z, r24
				if(((struct OCC_PT*)g_map[i][j].point)->k < 0){	//replace with free point
    1da6:	4d 81       	ldd	r20, Y+5	; 0x05
    1da8:	5e 81       	ldd	r21, Y+6	; 0x06
    1daa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dac:	3c 81       	ldd	r19, Y+4	; 0x04
    1dae:	c9 01       	movw	r24, r18
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	82 0f       	add	r24, r18
    1db6:	93 1f       	adc	r25, r19
    1db8:	2e e4       	ldi	r18, 0x4E	; 78
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	b9 01       	movw	r22, r18
    1dbe:	46 9f       	mul	r20, r22
    1dc0:	90 01       	movw	r18, r0
    1dc2:	47 9f       	mul	r20, r23
    1dc4:	30 0d       	add	r19, r0
    1dc6:	56 9f       	mul	r21, r22
    1dc8:	30 0d       	add	r19, r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	82 0f       	add	r24, r18
    1dce:	93 1f       	adc	r25, r19
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	ee 5d       	subi	r30, 0xDE	; 222
    1dd4:	fb 4f       	sbci	r31, 0xFB	; 251
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	fc 01       	movw	r30, r24
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 23       	and	r24, r24
    1de0:	34 f4       	brge	.+12     	; 0x1dee <update_pts+0xe6>
					insert_map_pt(i, j, UNSET);
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9b 81       	ldd	r25, Y+3	; 0x03
    1de6:	69 2f       	mov	r22, r25
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <insert_map_pt>
				}
				if(g_map[i][j].occ_flag){	//if there's still a point here
    1dee:	4d 81       	ldd	r20, Y+5	; 0x05
    1df0:	5e 81       	ldd	r21, Y+6	; 0x06
    1df2:	2b 81       	ldd	r18, Y+3	; 0x03
    1df4:	3c 81       	ldd	r19, Y+4	; 0x04
    1df6:	c9 01       	movw	r24, r18
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	82 0f       	add	r24, r18
    1dfe:	93 1f       	adc	r25, r19
    1e00:	2e e4       	ldi	r18, 0x4E	; 78
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	b9 01       	movw	r22, r18
    1e06:	46 9f       	mul	r20, r22
    1e08:	90 01       	movw	r18, r0
    1e0a:	47 9f       	mul	r20, r23
    1e0c:	30 0d       	add	r19, r0
    1e0e:	56 9f       	mul	r21, r22
    1e10:	30 0d       	add	r19, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	82 0f       	add	r24, r18
    1e16:	93 1f       	adc	r25, r19
    1e18:	fc 01       	movw	r30, r24
    1e1a:	ef 5d       	subi	r30, 0xDF	; 223
    1e1c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e1e:	80 81       	ld	r24, Z
    1e20:	88 23       	and	r24, r24
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <update_pts+0x11e>
    1e24:	ce c0       	rjmp	.+412    	; 0x1fc2 <update_pts+0x2ba>
					if(robot.dDis > GRID_UNIT_RES){	//if the robot has moved enough to make a map point shift
    1e26:	80 91 11 04 	lds	r24, 0x0411
    1e2a:	90 91 12 04 	lds	r25, 0x0412
    1e2e:	a0 91 13 04 	lds	r26, 0x0413
    1e32:	b0 91 14 04 	lds	r27, 0x0414
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <__gesf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	0c f0       	brlt	.+2      	; 0x1e4c <update_pts+0x144>
    1e4a:	bb c0       	rjmp	.+374    	; 0x1fc2 <update_pts+0x2ba>
						uint8_t i_new = -(robot.dDis * cos(deg_to_rad(robot.heading))) + i;
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	aa 27       	eor	r26, r26
    1e52:	97 fd       	sbrc	r25, 7
    1e54:	a0 95       	com	r26
    1e56:	ba 2f       	mov	r27, r26
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    1e60:	5b 01       	movw	r10, r22
    1e62:	6c 01       	movw	r12, r24
    1e64:	e0 90 11 04 	lds	r14, 0x0411
    1e68:	f0 90 12 04 	lds	r15, 0x0412
    1e6c:	00 91 13 04 	lds	r16, 0x0413
    1e70:	10 91 14 04 	lds	r17, 0x0414
    1e74:	80 91 0b 04 	lds	r24, 0x040B
    1e78:	90 91 0c 04 	lds	r25, 0x040C
    1e7c:	0e 94 92 09 	call	0x1324	; 0x1324 <deg_to_rad>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <cos>
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	ac 01       	movw	r20, r24
    1e90:	c8 01       	movw	r24, r16
    1e92:	b7 01       	movw	r22, r14
    1e94:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	ad 01       	movw	r20, r26
    1ea0:	c6 01       	movw	r24, r12
    1ea2:	b5 01       	movw	r22, r10
    1ea4:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8a 83       	std	Y+2, r24	; 0x02
						uint8_t j_new = -(robot.dDis * sin(deg_to_rad(robot.heading))) + j;
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	aa 27       	eor	r26, r26
    1ec0:	97 fd       	sbrc	r25, 7
    1ec2:	a0 95       	com	r26
    1ec4:	ba 2f       	mov	r27, r26
    1ec6:	bc 01       	movw	r22, r24
    1ec8:	cd 01       	movw	r24, r26
    1eca:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    1ece:	5b 01       	movw	r10, r22
    1ed0:	6c 01       	movw	r12, r24
    1ed2:	e0 90 11 04 	lds	r14, 0x0411
    1ed6:	f0 90 12 04 	lds	r15, 0x0412
    1eda:	00 91 13 04 	lds	r16, 0x0413
    1ede:	10 91 14 04 	lds	r17, 0x0414
    1ee2:	80 91 0b 04 	lds	r24, 0x040B
    1ee6:	90 91 0c 04 	lds	r25, 0x040C
    1eea:	0e 94 92 09 	call	0x1324	; 0x1324 <deg_to_rad>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <sin>
    1efa:	9b 01       	movw	r18, r22
    1efc:	ac 01       	movw	r20, r24
    1efe:	c8 01       	movw	r24, r16
    1f00:	b7 01       	movw	r22, r14
    1f02:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	ad 01       	movw	r20, r26
    1f0e:	c6 01       	movw	r24, r12
    1f10:	b5 01       	movw	r22, r10
    1f12:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	89 83       	std	Y+1, r24	; 0x01

						if((i_new <= N) && (j_new <= N)){	//if the new position is within the map
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	8b 31       	cpi	r24, 0x1B	; 27
    1f2c:	08 f0       	brcs	.+2      	; 0x1f30 <update_pts+0x228>
    1f2e:	43 c0       	rjmp	.+134    	; 0x1fb6 <update_pts+0x2ae>
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	8b 31       	cpi	r24, 0x1B	; 27
    1f34:	08 f0       	brcs	.+2      	; 0x1f38 <update_pts+0x230>
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <update_pts+0x2ae>
							insert_map_pt(i_new, j_new, SET);
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	69 81       	ldd	r22, Y+1	; 0x01
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <insert_map_pt>
							//update confidence
							((struct OCC_PT*)g_map[i_new][j_new].point)->k = ((struct OCC_PT*)g_map[i][j].point)->k;
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	48 2f       	mov	r20, r24
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	c9 01       	movw	r24, r18
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	82 0f       	add	r24, r18
    1f56:	93 1f       	adc	r25, r19
    1f58:	2e e4       	ldi	r18, 0x4E	; 78
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	46 9f       	mul	r20, r22
    1f60:	90 01       	movw	r18, r0
    1f62:	47 9f       	mul	r20, r23
    1f64:	30 0d       	add	r19, r0
    1f66:	56 9f       	mul	r21, r22
    1f68:	30 0d       	add	r19, r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	82 0f       	add	r24, r18
    1f6e:	93 1f       	adc	r25, r19
    1f70:	fc 01       	movw	r30, r24
    1f72:	ee 5d       	subi	r30, 0xDE	; 222
    1f74:	fb 4f       	sbci	r31, 0xFB	; 251
    1f76:	80 81       	ld	r24, Z
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	4d 81       	ldd	r20, Y+5	; 0x05
    1f7e:	5e 81       	ldd	r21, Y+6	; 0x06
    1f80:	2b 81       	ldd	r18, Y+3	; 0x03
    1f82:	3c 81       	ldd	r19, Y+4	; 0x04
    1f84:	c9 01       	movw	r24, r18
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	82 0f       	add	r24, r18
    1f8c:	93 1f       	adc	r25, r19
    1f8e:	2e e4       	ldi	r18, 0x4E	; 78
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	b9 01       	movw	r22, r18
    1f94:	46 9f       	mul	r20, r22
    1f96:	90 01       	movw	r18, r0
    1f98:	47 9f       	mul	r20, r23
    1f9a:	30 0d       	add	r19, r0
    1f9c:	56 9f       	mul	r21, r22
    1f9e:	30 0d       	add	r19, r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	82 0f       	add	r24, r18
    1fa4:	93 1f       	adc	r25, r19
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	ee 5d       	subi	r30, 0xDE	; 222
    1faa:	fb 4f       	sbci	r31, 0xFB	; 251
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8c 93       	st	X, r24
						}
						insert_map_pt(i, j, UNSET);	//get rid of old map point
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fba:	69 2f       	mov	r22, r25
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <insert_map_pt>
	}
}

void update_pts(){
	for(int i=0; i<N; i++){
		for(int j=0; j<N; j++){
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	01 96       	adiw	r24, 0x01	; 1
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	8a 31       	cpi	r24, 0x1A	; 26
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	0c f4       	brge	.+2      	; 0x1fd8 <update_pts+0x2d0>
    1fd6:	ad ce       	rjmp	.-678    	; 0x1d32 <update_pts+0x2a>
	//	rprintf("size: %d | ",err_list.size);
	}
}

void update_pts(){
	for(int i=0; i<N; i++){
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	8a 31       	cpi	r24, 0x1A	; 26
    1fe8:	91 05       	cpc	r25, r1
    1fea:	0c f4       	brge	.+2      	; 0x1fee <update_pts+0x2e6>
    1fec:	9f ce       	rjmp	.-706    	; 0x1d2c <update_pts+0x24>
				}
	
			}
		}
	}
}
    1fee:	26 96       	adiw	r28, 0x06	; 6
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	ff 90       	pop	r15
    2004:	ef 90       	pop	r14
    2006:	df 90       	pop	r13
    2008:	cf 90       	pop	r12
    200a:	bf 90       	pop	r11
    200c:	af 90       	pop	r10
    200e:	08 95       	ret

00002010 <print_map>:


void print_map(){
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	2a 97       	sbiw	r28, 0x0a	; 10
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
	for(int n=0; n<N; n++){
    2024:	18 86       	std	Y+8, r1	; 0x08
    2026:	1f 82       	std	Y+7, r1	; 0x07
    2028:	15 c0       	rjmp	.+42     	; 0x2054 <print_map+0x44>
		rprintf("_");
    202a:	24 ea       	ldi	r18, 0xA4	; 164
    202c:	34 e0       	ldi	r19, 0x04	; 4
    202e:	00 d0       	rcall	.+0      	; 0x2030 <print_map+0x20>
    2030:	0f 92       	push	r0
    2032:	ed b7       	in	r30, 0x3d	; 61
    2034:	fe b7       	in	r31, 0x3e	; 62
    2036:	31 96       	adiw	r30, 0x01	; 1
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	80 83       	st	Z, r24
    203c:	32 83       	std	Z+2, r19	; 0x02
    203e:	21 83       	std	Z+1, r18	; 0x01
    2040:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
	}
}


void print_map(){
	for(int n=0; n<N; n++){
    204a:	8f 81       	ldd	r24, Y+7	; 0x07
    204c:	98 85       	ldd	r25, Y+8	; 0x08
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	98 87       	std	Y+8, r25	; 0x08
    2052:	8f 83       	std	Y+7, r24	; 0x07
    2054:	8f 81       	ldd	r24, Y+7	; 0x07
    2056:	98 85       	ldd	r25, Y+8	; 0x08
    2058:	8a 31       	cpi	r24, 0x1A	; 26
    205a:	91 05       	cpc	r25, r1
    205c:	34 f3       	brlt	.-52     	; 0x202a <print_map+0x1a>
		rprintf("_");
		}
	rprintf("\n");
    205e:	82 ea       	ldi	r24, 0xA2	; 162
    2060:	94 e0       	ldi	r25, 0x04	; 4
    2062:	00 d0       	rcall	.+0      	; 0x2064 <print_map+0x54>
    2064:	0f 92       	push	r0
    2066:	ed b7       	in	r30, 0x3d	; 61
    2068:	fe b7       	in	r31, 0x3e	; 62
    206a:	31 96       	adiw	r30, 0x01	; 1
    206c:	21 e0       	ldi	r18, 0x01	; 1
    206e:	20 83       	st	Z, r18
    2070:	92 83       	std	Z+2, r25	; 0x02
    2072:	81 83       	std	Z+1, r24	; 0x01
    2074:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
	for(int i=0; i<N; i++){
    207e:	1e 82       	std	Y+6, r1	; 0x06
    2080:	1d 82       	std	Y+5, r1	; 0x05
    2082:	42 c1       	rjmp	.+644    	; 0x2308 <__stack+0x109>
		for(int j=0; j<N; j++){
    2084:	1c 82       	std	Y+4, r1	; 0x04
    2086:	1b 82       	std	Y+3, r1	; 0x03
    2088:	24 c1       	rjmp	.+584    	; 0x22d2 <__stack+0xd3>
			if((i == robot.x)&&(j == robot.y)){ rprintf("R");}
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	aa 27       	eor	r26, r26
    2090:	97 fd       	sbrc	r25, 7
    2092:	a0 95       	com	r26
    2094:	ba 2f       	mov	r27, r26
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	20 91 15 04 	lds	r18, 0x0415
    20a6:	30 91 16 04 	lds	r19, 0x0416
    20aa:	40 91 17 04 	lds	r20, 0x0417
    20ae:	50 91 18 04 	lds	r21, 0x0418
    20b2:	1a 86       	std	Y+10, r1	; 0x0a
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__cmpsf2>
    20bc:	88 23       	and	r24, r24
    20be:	11 f4       	brne	.+4      	; 0x20c4 <print_map+0xb4>
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	6a 87       	std	Y+10, r22	; 0x0a
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    20c8:	87 27       	eor	r24, r23
    20ca:	88 23       	and	r24, r24
    20cc:	99 f5       	brne	.+102    	; 0x2134 <print_map+0x124>
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	aa 27       	eor	r26, r26
    20d4:	97 fd       	sbrc	r25, 7
    20d6:	a0 95       	com	r26
    20d8:	ba 2f       	mov	r27, r26
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	20 91 19 04 	lds	r18, 0x0419
    20ea:	30 91 1a 04 	lds	r19, 0x041A
    20ee:	40 91 1b 04 	lds	r20, 0x041B
    20f2:	50 91 1c 04 	lds	r21, 0x041C
    20f6:	19 86       	std	Y+9, r1	; 0x09
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__cmpsf2>
    2100:	88 23       	and	r24, r24
    2102:	11 f4       	brne	.+4      	; 0x2108 <print_map+0xf8>
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	89 87       	std	Y+9, r24	; 0x09
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	99 85       	ldd	r25, Y+9	; 0x09
    210c:	89 27       	eor	r24, r25
    210e:	88 23       	and	r24, r24
    2110:	89 f4       	brne	.+34     	; 0x2134 <print_map+0x124>
    2112:	80 ea       	ldi	r24, 0xA0	; 160
    2114:	94 e0       	ldi	r25, 0x04	; 4
    2116:	00 d0       	rcall	.+0      	; 0x2118 <print_map+0x108>
    2118:	0f 92       	push	r0
    211a:	ed b7       	in	r30, 0x3d	; 61
    211c:	fe b7       	in	r31, 0x3e	; 62
    211e:	31 96       	adiw	r30, 0x01	; 1
    2120:	21 e0       	ldi	r18, 0x01	; 1
    2122:	20 83       	st	Z, r18
    2124:	92 83       	std	Z+2, r25	; 0x02
    2126:	81 83       	std	Z+1, r24	; 0x01
    2128:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	ca c0       	rjmp	.+404    	; 0x22c8 <__stack+0xc9>
			else if(g_map[i][j].occ_flag){
    2134:	4d 81       	ldd	r20, Y+5	; 0x05
    2136:	5e 81       	ldd	r21, Y+6	; 0x06
    2138:	2b 81       	ldd	r18, Y+3	; 0x03
    213a:	3c 81       	ldd	r19, Y+4	; 0x04
    213c:	c9 01       	movw	r24, r18
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	82 0f       	add	r24, r18
    2144:	93 1f       	adc	r25, r19
    2146:	2e e4       	ldi	r18, 0x4E	; 78
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	b9 01       	movw	r22, r18
    214c:	46 9f       	mul	r20, r22
    214e:	90 01       	movw	r18, r0
    2150:	47 9f       	mul	r20, r23
    2152:	30 0d       	add	r19, r0
    2154:	56 9f       	mul	r21, r22
    2156:	30 0d       	add	r19, r0
    2158:	11 24       	eor	r1, r1
    215a:	82 0f       	add	r24, r18
    215c:	93 1f       	adc	r25, r19
    215e:	fc 01       	movw	r30, r24
    2160:	ef 5d       	subi	r30, 0xDF	; 223
    2162:	fb 4f       	sbci	r31, 0xFB	; 251
    2164:	80 81       	ld	r24, Z
    2166:	88 23       	and	r24, r24
    2168:	09 f4       	brne	.+2      	; 0x216c <print_map+0x15c>
    216a:	9e c0       	rjmp	.+316    	; 0x22a8 <__stack+0xa9>
				if(((struct OCC_PT*)g_map[i][j].point)->k < 25){rprintf("o");}
    216c:	4d 81       	ldd	r20, Y+5	; 0x05
    216e:	5e 81       	ldd	r21, Y+6	; 0x06
    2170:	2b 81       	ldd	r18, Y+3	; 0x03
    2172:	3c 81       	ldd	r19, Y+4	; 0x04
    2174:	c9 01       	movw	r24, r18
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	82 0f       	add	r24, r18
    217c:	93 1f       	adc	r25, r19
    217e:	2e e4       	ldi	r18, 0x4E	; 78
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	b9 01       	movw	r22, r18
    2184:	46 9f       	mul	r20, r22
    2186:	90 01       	movw	r18, r0
    2188:	47 9f       	mul	r20, r23
    218a:	30 0d       	add	r19, r0
    218c:	56 9f       	mul	r21, r22
    218e:	30 0d       	add	r19, r0
    2190:	11 24       	eor	r1, r1
    2192:	82 0f       	add	r24, r18
    2194:	93 1f       	adc	r25, r19
    2196:	fc 01       	movw	r30, r24
    2198:	ee 5d       	subi	r30, 0xDE	; 222
    219a:	fb 4f       	sbci	r31, 0xFB	; 251
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	fc 01       	movw	r30, r24
    21a2:	80 81       	ld	r24, Z
    21a4:	89 31       	cpi	r24, 0x19	; 25
    21a6:	8c f4       	brge	.+34     	; 0x21ca <print_map+0x1ba>
    21a8:	8e e9       	ldi	r24, 0x9E	; 158
    21aa:	94 e0       	ldi	r25, 0x04	; 4
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <print_map+0x19e>
    21ae:	0f 92       	push	r0
    21b0:	ed b7       	in	r30, 0x3d	; 61
    21b2:	fe b7       	in	r31, 0x3e	; 62
    21b4:	31 96       	adiw	r30, 0x01	; 1
    21b6:	21 e0       	ldi	r18, 0x01	; 1
    21b8:	20 83       	st	Z, r18
    21ba:	92 83       	std	Z+2, r25	; 0x02
    21bc:	81 83       	std	Z+1, r24	; 0x01
    21be:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	7f c0       	rjmp	.+254    	; 0x22c8 <__stack+0xc9>
				else if(((struct OCC_PT*)g_map[i][j].point)->k < 50){rprintf("O");}
    21ca:	4d 81       	ldd	r20, Y+5	; 0x05
    21cc:	5e 81       	ldd	r21, Y+6	; 0x06
    21ce:	2b 81       	ldd	r18, Y+3	; 0x03
    21d0:	3c 81       	ldd	r19, Y+4	; 0x04
    21d2:	c9 01       	movw	r24, r18
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	82 0f       	add	r24, r18
    21da:	93 1f       	adc	r25, r19
    21dc:	2e e4       	ldi	r18, 0x4E	; 78
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	b9 01       	movw	r22, r18
    21e2:	46 9f       	mul	r20, r22
    21e4:	90 01       	movw	r18, r0
    21e6:	47 9f       	mul	r20, r23
    21e8:	30 0d       	add	r19, r0
    21ea:	56 9f       	mul	r21, r22
    21ec:	30 0d       	add	r19, r0
    21ee:	11 24       	eor	r1, r1
    21f0:	82 0f       	add	r24, r18
    21f2:	93 1f       	adc	r25, r19
    21f4:	fc 01       	movw	r30, r24
    21f6:	ee 5d       	subi	r30, 0xDE	; 222
    21f8:	fb 4f       	sbci	r31, 0xFB	; 251
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	fc 01       	movw	r30, r24
    2200:	80 81       	ld	r24, Z
    2202:	82 33       	cpi	r24, 0x32	; 50
    2204:	8c f4       	brge	.+34     	; 0x2228 <__stack+0x29>
    2206:	8c e9       	ldi	r24, 0x9C	; 156
    2208:	94 e0       	ldi	r25, 0x04	; 4
    220a:	00 d0       	rcall	.+0      	; 0x220c <__stack+0xd>
    220c:	0f 92       	push	r0
    220e:	ed b7       	in	r30, 0x3d	; 61
    2210:	fe b7       	in	r31, 0x3e	; 62
    2212:	31 96       	adiw	r30, 0x01	; 1
    2214:	21 e0       	ldi	r18, 0x01	; 1
    2216:	20 83       	st	Z, r18
    2218:	92 83       	std	Z+2, r25	; 0x02
    221a:	81 83       	std	Z+1, r24	; 0x01
    221c:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	50 c0       	rjmp	.+160    	; 0x22c8 <__stack+0xc9>
				else if(((struct OCC_PT*)g_map[i][j].point)->k < 75){rprintf("@");}
    2228:	4d 81       	ldd	r20, Y+5	; 0x05
    222a:	5e 81       	ldd	r21, Y+6	; 0x06
    222c:	2b 81       	ldd	r18, Y+3	; 0x03
    222e:	3c 81       	ldd	r19, Y+4	; 0x04
    2230:	c9 01       	movw	r24, r18
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	82 0f       	add	r24, r18
    2238:	93 1f       	adc	r25, r19
    223a:	2e e4       	ldi	r18, 0x4E	; 78
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	b9 01       	movw	r22, r18
    2240:	46 9f       	mul	r20, r22
    2242:	90 01       	movw	r18, r0
    2244:	47 9f       	mul	r20, r23
    2246:	30 0d       	add	r19, r0
    2248:	56 9f       	mul	r21, r22
    224a:	30 0d       	add	r19, r0
    224c:	11 24       	eor	r1, r1
    224e:	82 0f       	add	r24, r18
    2250:	93 1f       	adc	r25, r19
    2252:	fc 01       	movw	r30, r24
    2254:	ee 5d       	subi	r30, 0xDE	; 222
    2256:	fb 4f       	sbci	r31, 0xFB	; 251
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	fc 01       	movw	r30, r24
    225e:	80 81       	ld	r24, Z
    2260:	8b 34       	cpi	r24, 0x4B	; 75
    2262:	8c f4       	brge	.+34     	; 0x2286 <__stack+0x87>
    2264:	8a e9       	ldi	r24, 0x9A	; 154
    2266:	94 e0       	ldi	r25, 0x04	; 4
    2268:	00 d0       	rcall	.+0      	; 0x226a <__stack+0x6b>
    226a:	0f 92       	push	r0
    226c:	ed b7       	in	r30, 0x3d	; 61
    226e:	fe b7       	in	r31, 0x3e	; 62
    2270:	31 96       	adiw	r30, 0x01	; 1
    2272:	21 e0       	ldi	r18, 0x01	; 1
    2274:	20 83       	st	Z, r18
    2276:	92 83       	std	Z+2, r25	; 0x02
    2278:	81 83       	std	Z+1, r24	; 0x01
    227a:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	21 c0       	rjmp	.+66     	; 0x22c8 <__stack+0xc9>
				else{rprintf("#");}
    2286:	88 e9       	ldi	r24, 0x98	; 152
    2288:	94 e0       	ldi	r25, 0x04	; 4
    228a:	00 d0       	rcall	.+0      	; 0x228c <__stack+0x8d>
    228c:	0f 92       	push	r0
    228e:	ed b7       	in	r30, 0x3d	; 61
    2290:	fe b7       	in	r31, 0x3e	; 62
    2292:	31 96       	adiw	r30, 0x01	; 1
    2294:	21 e0       	ldi	r18, 0x01	; 1
    2296:	20 83       	st	Z, r18
    2298:	92 83       	std	Z+2, r25	; 0x02
    229a:	81 83       	std	Z+1, r24	; 0x01
    229c:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	10 c0       	rjmp	.+32     	; 0x22c8 <__stack+0xc9>
			 }
			else{rprintf(".");}
    22a8:	86 e9       	ldi	r24, 0x96	; 150
    22aa:	94 e0       	ldi	r25, 0x04	; 4
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <__stack+0xaf>
    22ae:	0f 92       	push	r0
    22b0:	ed b7       	in	r30, 0x3d	; 61
    22b2:	fe b7       	in	r31, 0x3e	; 62
    22b4:	31 96       	adiw	r30, 0x01	; 1
    22b6:	21 e0       	ldi	r18, 0x01	; 1
    22b8:	20 83       	st	Z, r18
    22ba:	92 83       	std	Z+2, r25	; 0x02
    22bc:	81 83       	std	Z+1, r24	; 0x01
    22be:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
	for(int n=0; n<N; n++){
		rprintf("_");
		}
	rprintf("\n");
	for(int i=0; i<N; i++){
		for(int j=0; j<N; j++){
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	9c 83       	std	Y+4, r25	; 0x04
    22d0:	8b 83       	std	Y+3, r24	; 0x03
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	8a 31       	cpi	r24, 0x1A	; 26
    22d8:	91 05       	cpc	r25, r1
    22da:	0c f4       	brge	.+2      	; 0x22de <__stack+0xdf>
    22dc:	d6 ce       	rjmp	.-596    	; 0x208a <print_map+0x7a>
				else if(((struct OCC_PT*)g_map[i][j].point)->k < 75){rprintf("@");}
				else{rprintf("#");}
			 }
			else{rprintf(".");}
		}
		rprintf("|\n");
    22de:	23 e9       	ldi	r18, 0x93	; 147
    22e0:	34 e0       	ldi	r19, 0x04	; 4
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <__stack+0xe5>
    22e4:	0f 92       	push	r0
    22e6:	ed b7       	in	r30, 0x3d	; 61
    22e8:	fe b7       	in	r31, 0x3e	; 62
    22ea:	31 96       	adiw	r30, 0x01	; 1
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	80 83       	st	Z, r24
    22f0:	32 83       	std	Z+2, r19	; 0x02
    22f2:	21 83       	std	Z+1, r18	; 0x01
    22f4:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
void print_map(){
	for(int n=0; n<N; n++){
		rprintf("_");
		}
	rprintf("\n");
	for(int i=0; i<N; i++){
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	8a 31       	cpi	r24, 0x1A	; 26
    230e:	91 05       	cpc	r25, r1
    2310:	0c f4       	brge	.+2      	; 0x2314 <__stack+0x115>
    2312:	b8 ce       	rjmp	.-656    	; 0x2084 <print_map+0x74>
			 }
			else{rprintf(".");}
		}
		rprintf("|\n");
	}
	for(int n=0; n<N; n++){
    2314:	1a 82       	std	Y+2, r1	; 0x02
    2316:	19 82       	std	Y+1, r1	; 0x01
    2318:	15 c0       	rjmp	.+42     	; 0x2344 <__stack+0x145>
		rprintf("_");
    231a:	21 e9       	ldi	r18, 0x91	; 145
    231c:	34 e0       	ldi	r19, 0x04	; 4
    231e:	00 d0       	rcall	.+0      	; 0x2320 <__stack+0x121>
    2320:	0f 92       	push	r0
    2322:	ed b7       	in	r30, 0x3d	; 61
    2324:	fe b7       	in	r31, 0x3e	; 62
    2326:	31 96       	adiw	r30, 0x01	; 1
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	80 83       	st	Z, r24
    232c:	32 83       	std	Z+2, r19	; 0x02
    232e:	21 83       	std	Z+1, r18	; 0x01
    2330:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
			 }
			else{rprintf(".");}
		}
		rprintf("|\n");
	}
	for(int n=0; n<N; n++){
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	01 96       	adiw	r24, 0x01	; 1
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
    2348:	8a 31       	cpi	r24, 0x1A	; 26
    234a:	91 05       	cpc	r25, r1
    234c:	34 f3       	brlt	.-52     	; 0x231a <__stack+0x11b>
		rprintf("_");
	}
	rprintf("\v");
    234e:	8f e8       	ldi	r24, 0x8F	; 143
    2350:	94 e0       	ldi	r25, 0x04	; 4
    2352:	00 d0       	rcall	.+0      	; 0x2354 <__stack+0x155>
    2354:	0f 92       	push	r0
    2356:	ed b7       	in	r30, 0x3d	; 61
    2358:	fe b7       	in	r31, 0x3e	; 62
    235a:	31 96       	adiw	r30, 0x01	; 1
    235c:	21 e0       	ldi	r18, 0x01	; 1
    235e:	20 83       	st	Z, r18
    2360:	92 83       	std	Z+2, r25	; 0x02
    2362:	81 83       	std	Z+1, r24	; 0x01
    2364:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
}
    236e:	2a 96       	adiw	r28, 0x0a	; 10
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <num2char>:


char num2char(char c){
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	0f 92       	push	r0
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	89 83       	std	Y+1, r24	; 0x01
	
	if(c <10){
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	8a 30       	cpi	r24, 0x0A	; 10
    2390:	20 f4       	brcc	.+8      	; 0x239a <num2char+0x1a>
		c += 48;
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	80 5d       	subi	r24, 0xD0	; 208
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	09 c0       	rjmp	.+18     	; 0x23ac <num2char+0x2c>
	}
	else if((c >= 10) && (c <= 16)){
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	8a 30       	cpi	r24, 0x0A	; 10
    239e:	30 f0       	brcs	.+12     	; 0x23ac <num2char+0x2c>
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	81 31       	cpi	r24, 0x11	; 17
    23a4:	18 f4       	brcc	.+6      	; 0x23ac <num2char+0x2c>
		c += 55;
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	89 5c       	subi	r24, 0xC9	; 201
    23aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return c;
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <char2hex>:

char char2hex(char c){
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	0f 92       	push	r0
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	89 83       	std	Y+1, r24	; 0x01
	
	if((c > 47) && (c <58)){
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	80 33       	cpi	r24, 0x30	; 48
    23c6:	38 f0       	brcs	.+14     	; 0x23d6 <char2hex+0x20>
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	8a 33       	cpi	r24, 0x3A	; 58
    23cc:	20 f4       	brcc	.+8      	; 0x23d6 <char2hex+0x20>
		c -= 48;
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	80 53       	subi	r24, 0x30	; 48
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	09 c0       	rjmp	.+18     	; 0x23e8 <char2hex+0x32>
	}
	else if((c > 64) && (c <71)){
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	81 34       	cpi	r24, 0x41	; 65
    23da:	30 f0       	brcs	.+12     	; 0x23e8 <char2hex+0x32>
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	87 34       	cpi	r24, 0x47	; 71
    23e0:	18 f4       	brcc	.+6      	; 0x23e8 <char2hex+0x32>
		c -= 55;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	87 53       	subi	r24, 0x37	; 55
    23e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return c;
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ea:	0f 90       	pop	r0
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <lbRcv>:

void lbRcv(unsigned char c){
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	0f 92       	push	r0
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	89 83       	std	Y+1, r24	; 0x01
		//rprintf("%c",c);
		if(1){//c != -1
		//if the data isn't whitespace (0xff), post it
			//rprintf("%c",c);

			if(c == 0x0A){lf_flag = SET;} //line feed detected, the character will be a 'H','V', or 'S'
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	8a 30       	cpi	r24, 0x0A	; 10
    240a:	21 f4       	brne	.+8      	; 0x2414 <lbRcv+0x22>
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	80 93 7e 03 	sts	0x037E, r24
    2412:	89 c0       	rjmp	.+274    	; 0x2526 <lbRcv+0x134>
	
			else if((lf_flag) && (c == 'H')){ //set heading flag
    2414:	80 91 7e 03 	lds	r24, 0x037E
    2418:	88 23       	and	r24, r24
    241a:	59 f0       	breq	.+22     	; 0x2432 <lbRcv+0x40>
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	88 34       	cpi	r24, 0x48	; 72
    2420:	41 f4       	brne	.+16     	; 0x2432 <lbRcv+0x40>
				h_flag = SET;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	80 93 7a 03 	sts	0x037A, r24
				h_iter = 0;
    2428:	10 92 7d 03 	sts	0x037D, r1
				lf_flag = UNSET;
    242c:	10 92 7e 03 	sts	0x037E, r1
    2430:	e0 c0       	rjmp	.+448    	; 0x25f2 <lbRcv+0x200>
				return;
			} 
			else if((lf_flag) && (c == 'V')){ //set velocity flag
    2432:	80 91 7e 03 	lds	r24, 0x037E
    2436:	88 23       	and	r24, r24
    2438:	59 f0       	breq	.+22     	; 0x2450 <lbRcv+0x5e>
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	86 35       	cpi	r24, 0x56	; 86
    243e:	41 f4       	brne	.+16     	; 0x2450 <lbRcv+0x5e>
				v_flag = SET;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 93 79 03 	sts	0x0379, r24
				v_iter = 0;
    2446:	10 92 7c 03 	sts	0x037C, r1
				lf_flag = UNSET;
    244a:	10 92 7e 03 	sts	0x037E, r1
    244e:	d1 c0       	rjmp	.+418    	; 0x25f2 <lbRcv+0x200>
			//	rprintf("%c",c);
				return;
			}
			else if((lf_flag) && (c == 'S')){ //set differential distance  flag
    2450:	80 91 7e 03 	lds	r24, 0x037E
    2454:	88 23       	and	r24, r24
    2456:	59 f0       	breq	.+22     	; 0x246e <lbRcv+0x7c>
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	83 35       	cpi	r24, 0x53	; 83
    245c:	41 f4       	brne	.+16     	; 0x246e <lbRcv+0x7c>
				d_flag = SET;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	80 93 78 03 	sts	0x0378, r24
				d_iter = 0;
    2464:	10 92 7b 03 	sts	0x037B, r1
				lf_flag = UNSET;
    2468:	10 92 7e 03 	sts	0x037E, r1
    246c:	c2 c0       	rjmp	.+388    	; 0x25f2 <lbRcv+0x200>
				return;
			}
			else if(h_flag){
    246e:	80 91 7a 03 	lds	r24, 0x037A
    2472:	88 23       	and	r24, r24
    2474:	d9 f0       	breq	.+54     	; 0x24ac <lbRcv+0xba>
				h_rough = (char2hex(c) | (h_rough << 4));	//store then increment	
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	0e 94 db 11 	call	0x23b6	; 0x23b6 <char2hex>
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	80 91 76 03 	lds	r24, 0x0376
    2484:	90 91 77 03 	lds	r25, 0x0377
    2488:	82 95       	swap	r24
    248a:	92 95       	swap	r25
    248c:	90 7f       	andi	r25, 0xF0	; 240
    248e:	98 27       	eor	r25, r24
    2490:	80 7f       	andi	r24, 0xF0	; 240
    2492:	98 27       	eor	r25, r24
    2494:	82 2b       	or	r24, r18
    2496:	93 2b       	or	r25, r19
    2498:	90 93 77 03 	sts	0x0377, r25
    249c:	80 93 76 03 	sts	0x0376, r24
				h_iter++;
    24a0:	80 91 7d 03 	lds	r24, 0x037D
    24a4:	8f 5f       	subi	r24, 0xFF	; 255
    24a6:	80 93 7d 03 	sts	0x037D, r24
    24aa:	3d c0       	rjmp	.+122    	; 0x2526 <lbRcv+0x134>
		//		rprintf(" ITER:%d|",h_iter);
		//		rprintfu16(h_rough);
		//		rprintf("\t");
		//		rprintf("%c",c);
			}	
			else if(v_flag){
    24ac:	80 91 79 03 	lds	r24, 0x0379
    24b0:	88 23       	and	r24, r24
    24b2:	d9 f0       	breq	.+54     	; 0x24ea <lbRcv+0xf8>
				v_rough = (char2hex(c) | (v_rough << 4));	//store then increment	
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	0e 94 db 11 	call	0x23b6	; 0x23b6 <char2hex>
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	80 91 74 03 	lds	r24, 0x0374
    24c2:	90 91 75 03 	lds	r25, 0x0375
    24c6:	82 95       	swap	r24
    24c8:	92 95       	swap	r25
    24ca:	90 7f       	andi	r25, 0xF0	; 240
    24cc:	98 27       	eor	r25, r24
    24ce:	80 7f       	andi	r24, 0xF0	; 240
    24d0:	98 27       	eor	r25, r24
    24d2:	82 2b       	or	r24, r18
    24d4:	93 2b       	or	r25, r19
    24d6:	90 93 75 03 	sts	0x0375, r25
    24da:	80 93 74 03 	sts	0x0374, r24
				v_iter++;
    24de:	80 91 7c 03 	lds	r24, 0x037C
    24e2:	8f 5f       	subi	r24, 0xFF	; 255
    24e4:	80 93 7c 03 	sts	0x037C, r24
    24e8:	1e c0       	rjmp	.+60     	; 0x2526 <lbRcv+0x134>
			//	rprintf("%c",c);
			}
			else if(d_flag){
    24ea:	80 91 78 03 	lds	r24, 0x0378
    24ee:	88 23       	and	r24, r24
    24f0:	d1 f0       	breq	.+52     	; 0x2526 <lbRcv+0x134>
				d_rough = (char2hex(c) | (d_rough << 4));	//store then increment	
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <char2hex>
    24f8:	28 2f       	mov	r18, r24
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	80 91 72 03 	lds	r24, 0x0372
    2500:	90 91 73 03 	lds	r25, 0x0373
    2504:	82 95       	swap	r24
    2506:	92 95       	swap	r25
    2508:	90 7f       	andi	r25, 0xF0	; 240
    250a:	98 27       	eor	r25, r24
    250c:	80 7f       	andi	r24, 0xF0	; 240
    250e:	98 27       	eor	r25, r24
    2510:	82 2b       	or	r24, r18
    2512:	93 2b       	or	r25, r19
    2514:	90 93 73 03 	sts	0x0373, r25
    2518:	80 93 72 03 	sts	0x0372, r24
				d_iter++;
    251c:	80 91 7b 03 	lds	r24, 0x037B
    2520:	8f 5f       	subi	r24, 0xFF	; 255
    2522:	80 93 7b 03 	sts	0x037B, r24
			//	rprintf("%c",c);
			}

			if(h_iter == 4){
    2526:	80 91 7d 03 	lds	r24, 0x037D
    252a:	84 30       	cpi	r24, 0x04	; 4
    252c:	89 f4       	brne	.+34     	; 0x2550 <lbRcv+0x15e>
				robot.sen_heading = h_rough;
    252e:	80 91 76 03 	lds	r24, 0x0376
    2532:	90 91 77 03 	lds	r25, 0x0377
    2536:	90 93 0e 04 	sts	0x040E, r25
    253a:	80 93 0d 04 	sts	0x040D, r24
				h_flag = UNSET;
    253e:	10 92 7a 03 	sts	0x037A, r1
				h_iter = 0;
    2542:	10 92 7d 03 	sts	0x037D, r1
		//		rprintf("H: %d",h_rough);
		//		rprintfNum(2, 16, 1, ' ', h_rough);
		//		rprintfu16(h_rough);
		//		rprintf("\n");
				h_rough = 0;
    2546:	10 92 77 03 	sts	0x0377, r1
    254a:	10 92 76 03 	sts	0x0376, r1
    254e:	51 c0       	rjmp	.+162    	; 0x25f2 <lbRcv+0x200>
			}
			else if(v_iter == 4){
    2550:	80 91 7c 03 	lds	r24, 0x037C
    2554:	84 30       	cpi	r24, 0x04	; 4
    2556:	89 f4       	brne	.+34     	; 0x257a <lbRcv+0x188>
				robot.sen_vel = v_rough;
    2558:	80 91 74 03 	lds	r24, 0x0374
    255c:	90 91 75 03 	lds	r25, 0x0375
    2560:	90 93 10 04 	sts	0x0410, r25
    2564:	80 93 0f 04 	sts	0x040F, r24
				v_flag = UNSET;
    2568:	10 92 79 03 	sts	0x0379, r1
				v_iter = 0;
    256c:	10 92 7c 03 	sts	0x037C, r1
		//		rprintf("V: ");
		//		rprintfu16(v_rough);
		//		rprintf("\n");
				v_rough = 0;
    2570:	10 92 75 03 	sts	0x0375, r1
    2574:	10 92 74 03 	sts	0x0374, r1
    2578:	3c c0       	rjmp	.+120    	; 0x25f2 <lbRcv+0x200>
			}
			else if(d_iter == 4){
    257a:	80 91 7b 03 	lds	r24, 0x037B
    257e:	84 30       	cpi	r24, 0x04	; 4
    2580:	c1 f5       	brne	.+112    	; 0x25f2 <lbRcv+0x200>
				robot.dDis += (float)d_rough/10;	//differential distance is added to current differential, retrieving function will reset to zero
    2582:	e0 90 11 04 	lds	r14, 0x0411
    2586:	f0 90 12 04 	lds	r15, 0x0412
    258a:	00 91 13 04 	lds	r16, 0x0413
    258e:	10 91 14 04 	lds	r17, 0x0414
    2592:	80 91 72 03 	lds	r24, 0x0372
    2596:	90 91 73 03 	lds	r25, 0x0373
    259a:	aa 27       	eor	r26, r26
    259c:	97 fd       	sbrc	r25, 7
    259e:	a0 95       	com	r26
    25a0:	ba 2f       	mov	r27, r26
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	51 e4       	ldi	r21, 0x41	; 65
    25ba:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9c 01       	movw	r18, r24
    25c4:	ad 01       	movw	r20, r26
    25c6:	c8 01       	movw	r24, r16
    25c8:	b7 01       	movw	r22, r14
    25ca:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	80 93 11 04 	sts	0x0411, r24
    25d6:	90 93 12 04 	sts	0x0412, r25
    25da:	a0 93 13 04 	sts	0x0413, r26
    25de:	b0 93 14 04 	sts	0x0414, r27
				d_flag = UNSET;			//divided by 10 to reintroduce the decimals
    25e2:	10 92 78 03 	sts	0x0378, r1
				d_iter = 0;
    25e6:	10 92 7b 03 	sts	0x037B, r1
		//		rprintf("D: ");
		//		rprintfu16(d_rough);
		//		rprintf("\n");
				d_rough = 0;
    25ea:	10 92 73 03 	sts	0x0373, r1
    25ee:	10 92 72 03 	sts	0x0372, r1
		
		}

		else{rprintf("WR\n");}

}
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	08 95       	ret

00002602 <appInitHardware>:

// Initialise the hardware
void appInitHardware(void) {
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
	initHardware();
    260a:	0e 94 13 09 	call	0x1226	; 0x1226 <initHardware>


}
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <appInitSoftware>:
// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart){
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	00 d0       	rcall	.+0      	; 0x261a <appInitSoftware+0x6>
    261a:	00 d0       	rcall	.+0      	; 0x261c <appInitSoftware+0x8>
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	69 83       	std	Y+1, r22	; 0x01
    2622:	7a 83       	std	Y+2, r23	; 0x02
    2624:	8b 83       	std	Y+3, r24	; 0x03
    2626:	9c 83       	std	Y+4, r25	; 0x04
	init_robot();
    2628:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <init_robot>
	init_error_list();
    262c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <init_error_list>
	init_map();
    2630:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <init_map>
	init_rct_set();
    2634:	0e 94 9b 0c 	call	0x1936	; 0x1936 <init_rct_set>
	uartAttach(UART3, &lbRcv);
    2638:	80 e3       	ldi	r24, 0x30	; 48
    263a:	92 e0       	ldi	r25, 0x02	; 2
    263c:	29 ef       	ldi	r18, 0xF9	; 249
    263e:	31 e1       	ldi	r19, 0x11	; 17
    2640:	b9 01       	movw	r22, r18
    2642:	0e 94 30 13 	call	0x2660	; 0x2660 <__uartAttach>
	return 0;
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e0       	ldi	r26, 0x00	; 0
    264c:	b0 e0       	ldi	r27, 0x00	; 0
}
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <__uartAttach>:
	return (uart->rxOverflow) ? TRUE : FALSE;
}

// Redirects received data to a user function.
#define uartAttach(uart,fn) __uartAttach(&((uart)->_uart_),fn)
static __inline__ void __uartAttach(UART* uart, void (*rx_func)(unsigned char c)){
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <__uartAttach+0x6>
    2666:	00 d0       	rcall	.+0      	; 0x2668 <__uartAttach+0x8>
    2668:	0f 92       	push	r0
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	9b 83       	std	Y+3, r25	; 0x03
    2670:	8a 83       	std	Y+2, r24	; 0x02
    2672:	7d 83       	std	Y+5, r23	; 0x05
    2674:	6c 83       	std	Y+4, r22	; 0x04
	CRITICAL_SECTION_START;
    2676:	ef e5       	ldi	r30, 0x5F	; 95
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	f8 94       	cli
	uart->rxFunc = rx_func;
    2680:	ea 81       	ldd	r30, Y+2	; 0x02
    2682:	fb 81       	ldd	r31, Y+3	; 0x03
    2684:	8c 81       	ldd	r24, Y+4	; 0x04
    2686:	9d 81       	ldd	r25, Y+5	; 0x05
    2688:	95 83       	std	Z+5, r25	; 0x05
    268a:	84 83       	std	Z+4, r24	; 0x04
	CRITICAL_SECTION_END;
    268c:	ef e5       	ldi	r30, 0x5F	; 95
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	80 83       	st	Z, r24
}
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <send_angle>:

void send_angle(int16_t angle){
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <send_angle+0x6>
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <send_angle+0x8>
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <send_angle+0xa>
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
//send commanded angle
	uint8_t r1 = 0;
    26b6:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t r2 = 0;
    26b8:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t r3 = 0;
    26ba:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t r4 = 0;
    26bc:	19 82       	std	Y+1, r1	; 0x01

	uartSendByte(UART3, 'R');
    26be:	80 e3       	ldi	r24, 0x30	; 48
    26c0:	92 e0       	ldi	r25, 0x02	; 2
    26c2:	62 e5       	ldi	r22, 0x52	; 82
    26c4:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_uartSendByte>

	r1 = num2char(0x0F & (uint8_t)angle);
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	8f 70       	andi	r24, 0x0F	; 15
    26cc:	0e 94 c0 11 	call	0x2380	; 0x2380 <num2char>
    26d0:	8c 83       	std	Y+4, r24	; 0x04
	r2 = num2char(0x0F & ((uint8_t)(angle >> 4)) );
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	95 95       	asr	r25
    26d8:	87 95       	ror	r24
    26da:	95 95       	asr	r25
    26dc:	87 95       	ror	r24
    26de:	95 95       	asr	r25
    26e0:	87 95       	ror	r24
    26e2:	95 95       	asr	r25
    26e4:	87 95       	ror	r24
    26e6:	8f 70       	andi	r24, 0x0F	; 15
    26e8:	0e 94 c0 11 	call	0x2380	; 0x2380 <num2char>
    26ec:	8b 83       	std	Y+3, r24	; 0x03
	r3 = num2char(0x0F & ((uint8_t)(angle >> 8)) );
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	89 2f       	mov	r24, r25
    26f4:	99 0f       	add	r25, r25
    26f6:	99 0b       	sbc	r25, r25
    26f8:	8f 70       	andi	r24, 0x0F	; 15
    26fa:	0e 94 c0 11 	call	0x2380	; 0x2380 <num2char>
    26fe:	8a 83       	std	Y+2, r24	; 0x02
	r4 = num2char(0x0F & ((uint8_t)(angle >> 12)) );
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	80 e1       	ldi	r24, 0x10	; 16
    2706:	98 02       	muls	r25, r24
    2708:	81 2d       	mov	r24, r1
    270a:	99 0b       	sbc	r25, r25
    270c:	11 24       	eor	r1, r1
    270e:	8f 70       	andi	r24, 0x0F	; 15
    2710:	0e 94 c0 11 	call	0x2380	; 0x2380 <num2char>
    2714:	89 83       	std	Y+1, r24	; 0x01
	uartSendByte(UART1, r2);
	uartSendByte(UART1, r1);
	uartSendByte(UART1, '\r');
	uartSendByte(UART1, '\n'); //line feed
	*/
	uartSendByte(UART3, r4);
    2716:	80 e3       	ldi	r24, 0x30	; 48
    2718:	92 e0       	ldi	r25, 0x02	; 2
    271a:	69 81       	ldd	r22, Y+1	; 0x01
    271c:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_uartSendByte>
	uartSendByte(UART3, r3);
    2720:	80 e3       	ldi	r24, 0x30	; 48
    2722:	92 e0       	ldi	r25, 0x02	; 2
    2724:	6a 81       	ldd	r22, Y+2	; 0x02
    2726:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_uartSendByte>
	uartSendByte(UART3, r2);
    272a:	80 e3       	ldi	r24, 0x30	; 48
    272c:	92 e0       	ldi	r25, 0x02	; 2
    272e:	6b 81       	ldd	r22, Y+3	; 0x03
    2730:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_uartSendByte>
	uartSendByte(UART3, r1);
    2734:	80 e3       	ldi	r24, 0x30	; 48
    2736:	92 e0       	ldi	r25, 0x02	; 2
    2738:	6c 81       	ldd	r22, Y+4	; 0x04
    273a:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_uartSendByte>
	uartSendByte(UART3, '\n'); //line feed
    273e:	80 e3       	ldi	r24, 0x30	; 48
    2740:	92 e0       	ldi	r25, 0x02	; 2
    2742:	6a e0       	ldi	r22, 0x0A	; 10
    2744:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_uartSendByte>
}
    2748:	26 96       	adiw	r28, 0x06	; 6
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <push_adj_open>:


void push_adj_open(struct FRE_PT* current_ptr){
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	00 d0       	rcall	.+0      	; 0x2760 <push_adj_open+0x6>
    2760:	0f 92       	push	r0
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	9b 83       	std	Y+3, r25	; 0x03
    2768:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t itr = 0; itr < 4; itr++){
    276a:	19 82       	std	Y+1, r1	; 0x01
    276c:	03 c0       	rjmp	.+6      	; 0x2774 <push_adj_open+0x1a>
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	8f 5f       	subi	r24, 0xFF	; 255
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	84 30       	cpi	r24, 0x04	; 4
    2778:	d0 f3       	brcs	.-12     	; 0x276e <push_adj_open+0x14>
		//set_back_ptr(
		//set_f_score(
		
	}
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <A_star>:

struct FRE_PT* A_star(){	//Searches from the goal to the robot and returns the FRE_PT in front of the robot.
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	00 d0       	rcall	.+0      	; 0x278c <A_star+0x6>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
							//The robot will then have to trace the back pointers to the goal
	//initialize the first node on the open list
	open_list = (struct FRE_PT*)g_map[start.x][start.y].point;
    2790:	80 91 0d 0c 	lds	r24, 0x0C0D
    2794:	48 2f       	mov	r20, r24
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	80 91 0e 0c 	lds	r24, 0x0C0E
    279c:	28 2f       	mov	r18, r24
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	c9 01       	movw	r24, r18
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	82 0f       	add	r24, r18
    27a8:	93 1f       	adc	r25, r19
    27aa:	2e e4       	ldi	r18, 0x4E	; 78
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	b9 01       	movw	r22, r18
    27b0:	46 9f       	mul	r20, r22
    27b2:	90 01       	movw	r18, r0
    27b4:	47 9f       	mul	r20, r23
    27b6:	30 0d       	add	r19, r0
    27b8:	56 9f       	mul	r21, r22
    27ba:	30 0d       	add	r19, r0
    27bc:	11 24       	eor	r1, r1
    27be:	82 0f       	add	r24, r18
    27c0:	93 1f       	adc	r25, r19
    27c2:	fc 01       	movw	r30, r24
    27c4:	ee 5d       	subi	r30, 0xDE	; 222
    27c6:	fb 4f       	sbci	r31, 0xFB	; 251
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	90 93 1e 04 	sts	0x041E, r25
    27d0:	80 93 1d 04 	sts	0x041D, r24

	//pop current node onto open list (goal)
	push_adj_open(open_list);
    27d4:	80 91 1d 04 	lds	r24, 0x041D
    27d8:	90 91 1e 04 	lds	r25, 0x041E
    27dc:	0e 94 ad 13 	call	0x275a	; 0x275a <push_adj_open>
		//assign their f scores
	//pop current node off of open list and onto closed list
	//evaluate the node with the lowest f score on the list
	//end when the current node is if front of the robot

}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <update_rpt_xyang>:

void update_rpt_xyang(){
    27ea:	cf 92       	push	r12
    27ec:	df 92       	push	r13
    27ee:	ef 92       	push	r14
    27f0:	ff 92       	push	r15
    27f2:	0f 93       	push	r16
    27f4:	1f 93       	push	r17
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <update_rpt_xyang+0x12>
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
	recent_ptset[0].angle = -90 + robot.heading;
    2800:	80 91 0b 04 	lds	r24, 0x040B
    2804:	90 91 0c 04 	lds	r25, 0x040C
    2808:	8a 55       	subi	r24, 0x5A	; 90
    280a:	90 40       	sbci	r25, 0x00	; 0
    280c:	90 93 c0 03 	sts	0x03C0, r25
    2810:	80 93 bf 03 	sts	0x03BF, r24
	recent_ptset[1].angle = robot.heading;
    2814:	80 91 0b 04 	lds	r24, 0x040B
    2818:	90 91 0c 04 	lds	r25, 0x040C
    281c:	90 93 cf 03 	sts	0x03CF, r25
    2820:	80 93 ce 03 	sts	0x03CE, r24
	recent_ptset[2].angle = 90 + robot.heading;
    2824:	80 91 0b 04 	lds	r24, 0x040B
    2828:	90 91 0c 04 	lds	r25, 0x040C
    282c:	86 5a       	subi	r24, 0xA6	; 166
    282e:	9f 4f       	sbci	r25, 0xFF	; 255
    2830:	90 93 de 03 	sts	0x03DE, r25
    2834:	80 93 dd 03 	sts	0x03DD, r24
	recent_ptset[3].angle = 45 + robot.heading;
    2838:	80 91 0b 04 	lds	r24, 0x040B
    283c:	90 91 0c 04 	lds	r25, 0x040C
    2840:	8d 96       	adiw	r24, 0x2d	; 45
    2842:	90 93 ed 03 	sts	0x03ED, r25
    2846:	80 93 ec 03 	sts	0x03EC, r24
	recent_ptset[4].angle = -45 + robot.heading;
    284a:	80 91 0b 04 	lds	r24, 0x040B
    284e:	90 91 0c 04 	lds	r25, 0x040C
    2852:	8d 97       	sbiw	r24, 0x2d	; 45
    2854:	90 93 fc 03 	sts	0x03FC, r25
    2858:	80 93 fb 03 	sts	0x03FB, r24

	for(uint8_t itr = 0; itr < 5; itr++){
    285c:	1a 82       	std	Y+2, r1	; 0x02
    285e:	63 c0       	rjmp	.+198    	; 0x2926 <update_rpt_xyang+0x13c>
		recent_ptset[itr].x = recent_ptset[itr].magnitude * cos(deg_to_rad(recent_ptset[itr].angle)) + robot.x;
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	c8 2e       	mov	r12, r24
    2864:	dd 24       	eor	r13, r13
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	c9 01       	movw	r24, r18
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	82 0f       	add	r24, r18
    2874:	93 1f       	adc	r25, r19
    2876:	9c 01       	movw	r18, r24
    2878:	22 0f       	add	r18, r18
    287a:	33 1f       	adc	r19, r19
    287c:	22 0f       	add	r18, r18
    287e:	33 1f       	adc	r19, r19
    2880:	82 0f       	add	r24, r18
    2882:	93 1f       	adc	r25, r19
    2884:	fc 01       	movw	r30, r24
    2886:	e5 54       	subi	r30, 0x45	; 69
    2888:	fc 4f       	sbci	r31, 0xFC	; 252
    288a:	e0 80       	ld	r14, Z
    288c:	f1 80       	ldd	r15, Z+1	; 0x01
    288e:	02 81       	ldd	r16, Z+2	; 0x02
    2890:	13 81       	ldd	r17, Z+3	; 0x03
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	28 2f       	mov	r18, r24
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	c9 01       	movw	r24, r18
    289a:	88 0f       	add	r24, r24
    289c:	99 1f       	adc	r25, r25
    289e:	82 0f       	add	r24, r18
    28a0:	93 1f       	adc	r25, r19
    28a2:	9c 01       	movw	r18, r24
    28a4:	22 0f       	add	r18, r18
    28a6:	33 1f       	adc	r19, r19
    28a8:	22 0f       	add	r18, r18
    28aa:	33 1f       	adc	r19, r19
    28ac:	82 0f       	add	r24, r18
    28ae:	93 1f       	adc	r25, r19
    28b0:	fc 01       	movw	r30, r24
    28b2:	e1 54       	subi	r30, 0x41	; 65
    28b4:	fc 4f       	sbci	r31, 0xFC	; 252
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	0e 94 92 09 	call	0x1324	; 0x1324 <deg_to_rad>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <cos>
    28ca:	9b 01       	movw	r18, r22
    28cc:	ac 01       	movw	r20, r24
    28ce:	c8 01       	movw	r24, r16
    28d0:	b7 01       	movw	r22, r14
    28d2:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	20 91 15 04 	lds	r18, 0x0415
    28de:	30 91 16 04 	lds	r19, 0x0416
    28e2:	40 91 17 04 	lds	r20, 0x0417
    28e6:	50 91 18 04 	lds	r21, 0x0418
    28ea:	bc 01       	movw	r22, r24
    28ec:	cd 01       	movw	r24, r26
    28ee:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	ac 01       	movw	r20, r24
    28f8:	bd 01       	movw	r22, r26
    28fa:	c6 01       	movw	r24, r12
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	8c 0d       	add	r24, r12
    2902:	9d 1d       	adc	r25, r13
    2904:	9c 01       	movw	r18, r24
    2906:	22 0f       	add	r18, r18
    2908:	33 1f       	adc	r19, r19
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	82 0f       	add	r24, r18
    2910:	93 1f       	adc	r25, r19
    2912:	fc 01       	movw	r30, r24
    2914:	ef 53       	subi	r30, 0x3F	; 63
    2916:	fc 4f       	sbci	r31, 0xFC	; 252
    2918:	40 83       	st	Z, r20
    291a:	51 83       	std	Z+1, r21	; 0x01
    291c:	62 83       	std	Z+2, r22	; 0x02
    291e:	73 83       	std	Z+3, r23	; 0x03
	recent_ptset[1].angle = robot.heading;
	recent_ptset[2].angle = 90 + robot.heading;
	recent_ptset[3].angle = 45 + robot.heading;
	recent_ptset[4].angle = -45 + robot.heading;

	for(uint8_t itr = 0; itr < 5; itr++){
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	8f 5f       	subi	r24, 0xFF	; 255
    2924:	8a 83       	std	Y+2, r24	; 0x02
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	85 30       	cpi	r24, 0x05	; 5
    292a:	08 f4       	brcc	.+2      	; 0x292e <update_rpt_xyang+0x144>
    292c:	99 cf       	rjmp	.-206    	; 0x2860 <update_rpt_xyang+0x76>
		recent_ptset[itr].x = recent_ptset[itr].magnitude * cos(deg_to_rad(recent_ptset[itr].angle)) + robot.x;
	//	rprintf("rxu ");
	}

	for(uint8_t itr = 0; itr < 5; itr++){
    292e:	19 82       	std	Y+1, r1	; 0x01
    2930:	63 c0       	rjmp	.+198    	; 0x29f8 <update_rpt_xyang+0x20e>
		recent_ptset[itr].y = recent_ptset[itr].magnitude * sin(deg_to_rad(recent_ptset[itr].angle)) + robot.y;
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	c8 2e       	mov	r12, r24
    2936:	dd 24       	eor	r13, r13
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	c9 01       	movw	r24, r18
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	82 0f       	add	r24, r18
    2946:	93 1f       	adc	r25, r19
    2948:	9c 01       	movw	r18, r24
    294a:	22 0f       	add	r18, r18
    294c:	33 1f       	adc	r19, r19
    294e:	22 0f       	add	r18, r18
    2950:	33 1f       	adc	r19, r19
    2952:	82 0f       	add	r24, r18
    2954:	93 1f       	adc	r25, r19
    2956:	fc 01       	movw	r30, r24
    2958:	e5 54       	subi	r30, 0x45	; 69
    295a:	fc 4f       	sbci	r31, 0xFC	; 252
    295c:	e0 80       	ld	r14, Z
    295e:	f1 80       	ldd	r15, Z+1	; 0x01
    2960:	02 81       	ldd	r16, Z+2	; 0x02
    2962:	13 81       	ldd	r17, Z+3	; 0x03
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	c9 01       	movw	r24, r18
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	82 0f       	add	r24, r18
    2972:	93 1f       	adc	r25, r19
    2974:	9c 01       	movw	r18, r24
    2976:	22 0f       	add	r18, r18
    2978:	33 1f       	adc	r19, r19
    297a:	22 0f       	add	r18, r18
    297c:	33 1f       	adc	r19, r19
    297e:	82 0f       	add	r24, r18
    2980:	93 1f       	adc	r25, r19
    2982:	fc 01       	movw	r30, r24
    2984:	e1 54       	subi	r30, 0x41	; 65
    2986:	fc 4f       	sbci	r31, 0xFC	; 252
    2988:	80 81       	ld	r24, Z
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	0e 94 92 09 	call	0x1324	; 0x1324 <deg_to_rad>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <sin>
    299c:	9b 01       	movw	r18, r22
    299e:	ac 01       	movw	r20, r24
    29a0:	c8 01       	movw	r24, r16
    29a2:	b7 01       	movw	r22, r14
    29a4:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	20 91 19 04 	lds	r18, 0x0419
    29b0:	30 91 1a 04 	lds	r19, 0x041A
    29b4:	40 91 1b 04 	lds	r20, 0x041B
    29b8:	50 91 1c 04 	lds	r21, 0x041C
    29bc:	bc 01       	movw	r22, r24
    29be:	cd 01       	movw	r24, r26
    29c0:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	ac 01       	movw	r20, r24
    29ca:	bd 01       	movw	r22, r26
    29cc:	c6 01       	movw	r24, r12
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	8c 0d       	add	r24, r12
    29d4:	9d 1d       	adc	r25, r13
    29d6:	9c 01       	movw	r18, r24
    29d8:	22 0f       	add	r18, r18
    29da:	33 1f       	adc	r19, r19
    29dc:	22 0f       	add	r18, r18
    29de:	33 1f       	adc	r19, r19
    29e0:	82 0f       	add	r24, r18
    29e2:	93 1f       	adc	r25, r19
    29e4:	fc 01       	movw	r30, r24
    29e6:	eb 53       	subi	r30, 0x3B	; 59
    29e8:	fc 4f       	sbci	r31, 0xFC	; 252
    29ea:	40 83       	st	Z, r20
    29ec:	51 83       	std	Z+1, r21	; 0x01
    29ee:	62 83       	std	Z+2, r22	; 0x02
    29f0:	73 83       	std	Z+3, r23	; 0x03
	for(uint8_t itr = 0; itr < 5; itr++){
		recent_ptset[itr].x = recent_ptset[itr].magnitude * cos(deg_to_rad(recent_ptset[itr].angle)) + robot.x;
	//	rprintf("rxu ");
	}

	for(uint8_t itr = 0; itr < 5; itr++){
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	8f 5f       	subi	r24, 0xFF	; 255
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	85 30       	cpi	r24, 0x05	; 5
    29fc:	08 f4       	brcc	.+2      	; 0x2a00 <update_rpt_xyang+0x216>
    29fe:	99 cf       	rjmp	.-206    	; 0x2932 <update_rpt_xyang+0x148>
		recent_ptset[itr].y = recent_ptset[itr].magnitude * sin(deg_to_rad(recent_ptset[itr].angle)) + robot.y;
	//	rprintf("ryu ");
	}
	//rprintfCRLF();
}
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	df 90       	pop	r13
    2a12:	cf 90       	pop	r12
    2a14:	08 95       	ret

00002a16 <read_dis_arr>:

void read_dis_arr(){
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	62 97       	sbiw	r28, 0x12	; 18
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
	float var = 50;
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	a8 e4       	ldi	r26, 0x48	; 72
    2a38:	b2 e4       	ldi	r27, 0x42	; 66
    2a3a:	8f 87       	std	Y+15, r24	; 0x0f
    2a3c:	98 8b       	std	Y+16, r25	; 0x10
    2a3e:	a9 8b       	std	Y+17, r26	; 0x11
    2a40:	ba 8b       	std	Y+18, r27	; 0x12
	float weight;
	float sig = 50;
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a8 e4       	ldi	r26, 0x48	; 72
    2a48:	b2 e4       	ldi	r27, 0x42	; 66
    2a4a:	8f 83       	std	Y+7, r24	; 0x07
    2a4c:	98 87       	std	Y+8, r25	; 0x08
    2a4e:	a9 87       	std	Y+9, r26	; 0x09
    2a50:	ba 87       	std	Y+10, r27	; 0x0a

	init_rct_set();
    2a52:	0e 94 9b 0c 	call	0x1936	; 0x1936 <init_rct_set>

	distanceRead(ir_0);
    2a56:	85 ea       	ldi	r24, 0xA5	; 165
    2a58:	92 e0       	ldi	r25, 0x02	; 2
    2a5a:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_sensorRead_>
	distanceRead(ir_1);
    2a5e:	8f ea       	ldi	r24, 0xAF	; 175
    2a60:	92 e0       	ldi	r25, 0x02	; 2
    2a62:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_sensorRead_>
	distanceRead(ir_2);
    2a66:	89 eb       	ldi	r24, 0xB9	; 185
    2a68:	92 e0       	ldi	r25, 0x02	; 2
    2a6a:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_sensorRead_>
	distanceRead(ir_3);
    2a6e:	83 ec       	ldi	r24, 0xC3	; 195
    2a70:	92 e0       	ldi	r25, 0x02	; 2
    2a72:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_sensorRead_>
	distanceRead(ir_4);
    2a76:	8d ec       	ldi	r24, 0xCD	; 205
    2a78:	92 e0       	ldi	r25, 0x02	; 2
    2a7a:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_sensorRead_>

	recent_ptset[0].magnitude = (float)ir_0.distance.cm;
    2a7e:	80 91 ac 02 	lds	r24, 0x02AC
    2a82:	90 91 ad 02 	lds	r25, 0x02AD
    2a86:	cc 01       	movw	r24, r24
    2a88:	a0 e0       	ldi	r26, 0x00	; 0
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	bc 01       	movw	r22, r24
    2a8e:	cd 01       	movw	r24, r26
    2a90:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	80 93 bb 03 	sts	0x03BB, r24
    2a9c:	90 93 bc 03 	sts	0x03BC, r25
    2aa0:	a0 93 bd 03 	sts	0x03BD, r26
    2aa4:	b0 93 be 03 	sts	0x03BE, r27
	recent_ptset[1].magnitude = (float)ir_1.distance.cm;
    2aa8:	80 91 b6 02 	lds	r24, 0x02B6
    2aac:	90 91 b7 02 	lds	r25, 0x02B7
    2ab0:	cc 01       	movw	r24, r24
    2ab2:	a0 e0       	ldi	r26, 0x00	; 0
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	80 93 ca 03 	sts	0x03CA, r24
    2ac6:	90 93 cb 03 	sts	0x03CB, r25
    2aca:	a0 93 cc 03 	sts	0x03CC, r26
    2ace:	b0 93 cd 03 	sts	0x03CD, r27
	recent_ptset[2].magnitude = (float)ir_2.distance.cm;
    2ad2:	80 91 c0 02 	lds	r24, 0x02C0
    2ad6:	90 91 c1 02 	lds	r25, 0x02C1
    2ada:	cc 01       	movw	r24, r24
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	80 93 d9 03 	sts	0x03D9, r24
    2af0:	90 93 da 03 	sts	0x03DA, r25
    2af4:	a0 93 db 03 	sts	0x03DB, r26
    2af8:	b0 93 dc 03 	sts	0x03DC, r27
	recent_ptset[3].magnitude = (float)ir_3.distance.cm;
    2afc:	80 91 ca 02 	lds	r24, 0x02CA
    2b00:	90 91 cb 02 	lds	r25, 0x02CB
    2b04:	cc 01       	movw	r24, r24
    2b06:	a0 e0       	ldi	r26, 0x00	; 0
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	80 93 e8 03 	sts	0x03E8, r24
    2b1a:	90 93 e9 03 	sts	0x03E9, r25
    2b1e:	a0 93 ea 03 	sts	0x03EA, r26
    2b22:	b0 93 eb 03 	sts	0x03EB, r27
	recent_ptset[4].magnitude = (float)ir_4.distance.cm;
    2b26:	80 91 d4 02 	lds	r24, 0x02D4
    2b2a:	90 91 d5 02 	lds	r25, 0x02D5
    2b2e:	cc 01       	movw	r24, r24
    2b30:	a0 e0       	ldi	r26, 0x00	; 0
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	80 93 f7 03 	sts	0x03F7, r24
    2b44:	90 93 f8 03 	sts	0x03F8, r25
    2b48:	a0 93 f9 03 	sts	0x03F9, r26
    2b4c:	b0 93 fa 03 	sts	0x03FA, r27
	
	//Kalman Filter
	for(float iter = 0; iter < 5; iter++){
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e0       	ldi	r26, 0x00	; 0
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	8b 83       	std	Y+3, r24	; 0x03
    2b5a:	9c 83       	std	Y+4, r25	; 0x04
    2b5c:	ad 83       	std	Y+5, r26	; 0x05
    2b5e:	be 83       	std	Y+6, r27	; 0x06
    2b60:	95 c1       	rjmp	.+810    	; 0x2e8c <read_dis_arr+0x476>
		distanceRead(ir_0);
    2b62:	85 ea       	ldi	r24, 0xA5	; 165
    2b64:	92 e0       	ldi	r25, 0x02	; 2
    2b66:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_sensorRead_>
		distanceRead(ir_1);
    2b6a:	8f ea       	ldi	r24, 0xAF	; 175
    2b6c:	92 e0       	ldi	r25, 0x02	; 2
    2b6e:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_sensorRead_>
		distanceRead(ir_2);
    2b72:	89 eb       	ldi	r24, 0xB9	; 185
    2b74:	92 e0       	ldi	r25, 0x02	; 2
    2b76:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_sensorRead_>
		distanceRead(ir_3);
    2b7a:	83 ec       	ldi	r24, 0xC3	; 195
    2b7c:	92 e0       	ldi	r25, 0x02	; 2
    2b7e:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_sensorRead_>
		distanceRead(ir_4);
    2b82:	8d ec       	ldi	r24, 0xCD	; 205
    2b84:	92 e0       	ldi	r25, 0x02	; 2
    2b86:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_sensorRead_>
		
		weight = sig/(sig + var);
    2b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8c:	78 85       	ldd	r23, Y+8	; 0x08
    2b8e:	89 85       	ldd	r24, Y+9	; 0x09
    2b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b92:	2f 85       	ldd	r18, Y+15	; 0x0f
    2b94:	38 89       	ldd	r19, Y+16	; 0x10
    2b96:	49 89       	ldd	r20, Y+17	; 0x11
    2b98:	5a 89       	ldd	r21, Y+18	; 0x12
    2b9a:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	9c 01       	movw	r18, r24
    2ba4:	ad 01       	movw	r20, r26
    2ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba8:	78 85       	ldd	r23, Y+8	; 0x08
    2baa:	89 85       	ldd	r24, Y+9	; 0x09
    2bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bae:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	8b 87       	std	Y+11, r24	; 0x0b
    2bb8:	9c 87       	std	Y+12, r25	; 0x0c
    2bba:	ad 87       	std	Y+13, r26	; 0x0d
    2bbc:	be 87       	std	Y+14, r27	; 0x0e

		recent_ptset[0].magnitude += weight*((float)ir_0.distance.cm - recent_ptset[0].magnitude);
    2bbe:	e0 90 bb 03 	lds	r14, 0x03BB
    2bc2:	f0 90 bc 03 	lds	r15, 0x03BC
    2bc6:	00 91 bd 03 	lds	r16, 0x03BD
    2bca:	10 91 be 03 	lds	r17, 0x03BE
    2bce:	80 91 ac 02 	lds	r24, 0x02AC
    2bd2:	90 91 ad 02 	lds	r25, 0x02AD
    2bd6:	cc 01       	movw	r24, r24
    2bd8:	a0 e0       	ldi	r26, 0x00	; 0
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	20 91 bb 03 	lds	r18, 0x03BB
    2bec:	30 91 bc 03 	lds	r19, 0x03BC
    2bf0:	40 91 bd 03 	lds	r20, 0x03BD
    2bf4:	50 91 be 03 	lds	r21, 0x03BE
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c0a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c0c:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c0e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c10:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9c 01       	movw	r18, r24
    2c1a:	ad 01       	movw	r20, r26
    2c1c:	c8 01       	movw	r24, r16
    2c1e:	b7 01       	movw	r22, r14
    2c20:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	80 93 bb 03 	sts	0x03BB, r24
    2c2c:	90 93 bc 03 	sts	0x03BC, r25
    2c30:	a0 93 bd 03 	sts	0x03BD, r26
    2c34:	b0 93 be 03 	sts	0x03BE, r27
		recent_ptset[1].magnitude += weight*((float)ir_1.distance.cm - recent_ptset[1].magnitude);
    2c38:	e0 90 ca 03 	lds	r14, 0x03CA
    2c3c:	f0 90 cb 03 	lds	r15, 0x03CB
    2c40:	00 91 cc 03 	lds	r16, 0x03CC
    2c44:	10 91 cd 03 	lds	r17, 0x03CD
    2c48:	80 91 b6 02 	lds	r24, 0x02B6
    2c4c:	90 91 b7 02 	lds	r25, 0x02B7
    2c50:	cc 01       	movw	r24, r24
    2c52:	a0 e0       	ldi	r26, 0x00	; 0
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	20 91 ca 03 	lds	r18, 0x03CA
    2c66:	30 91 cb 03 	lds	r19, 0x03CB
    2c6a:	40 91 cc 03 	lds	r20, 0x03CC
    2c6e:	50 91 cd 03 	lds	r21, 0x03CD
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c84:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c86:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c88:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c8a:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9c 01       	movw	r18, r24
    2c94:	ad 01       	movw	r20, r26
    2c96:	c8 01       	movw	r24, r16
    2c98:	b7 01       	movw	r22, r14
    2c9a:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	80 93 ca 03 	sts	0x03CA, r24
    2ca6:	90 93 cb 03 	sts	0x03CB, r25
    2caa:	a0 93 cc 03 	sts	0x03CC, r26
    2cae:	b0 93 cd 03 	sts	0x03CD, r27
		recent_ptset[2].magnitude += weight*((float)ir_2.distance.cm - recent_ptset[2].magnitude);
    2cb2:	e0 90 d9 03 	lds	r14, 0x03D9
    2cb6:	f0 90 da 03 	lds	r15, 0x03DA
    2cba:	00 91 db 03 	lds	r16, 0x03DB
    2cbe:	10 91 dc 03 	lds	r17, 0x03DC
    2cc2:	80 91 c0 02 	lds	r24, 0x02C0
    2cc6:	90 91 c1 02 	lds	r25, 0x02C1
    2cca:	cc 01       	movw	r24, r24
    2ccc:	a0 e0       	ldi	r26, 0x00	; 0
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	20 91 d9 03 	lds	r18, 0x03D9
    2ce0:	30 91 da 03 	lds	r19, 0x03DA
    2ce4:	40 91 db 03 	lds	r20, 0x03DB
    2ce8:	50 91 dc 03 	lds	r21, 0x03DC
    2cec:	bc 01       	movw	r22, r24
    2cee:	cd 01       	movw	r24, r26
    2cf0:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cfe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d00:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d02:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d04:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	9c 01       	movw	r18, r24
    2d0e:	ad 01       	movw	r20, r26
    2d10:	c8 01       	movw	r24, r16
    2d12:	b7 01       	movw	r22, r14
    2d14:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	80 93 d9 03 	sts	0x03D9, r24
    2d20:	90 93 da 03 	sts	0x03DA, r25
    2d24:	a0 93 db 03 	sts	0x03DB, r26
    2d28:	b0 93 dc 03 	sts	0x03DC, r27
		recent_ptset[3].magnitude += weight*((float)ir_3.distance.cm - recent_ptset[3].magnitude);
    2d2c:	e0 90 e8 03 	lds	r14, 0x03E8
    2d30:	f0 90 e9 03 	lds	r15, 0x03E9
    2d34:	00 91 ea 03 	lds	r16, 0x03EA
    2d38:	10 91 eb 03 	lds	r17, 0x03EB
    2d3c:	80 91 ca 02 	lds	r24, 0x02CA
    2d40:	90 91 cb 02 	lds	r25, 0x02CB
    2d44:	cc 01       	movw	r24, r24
    2d46:	a0 e0       	ldi	r26, 0x00	; 0
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	20 91 e8 03 	lds	r18, 0x03E8
    2d5a:	30 91 e9 03 	lds	r19, 0x03E9
    2d5e:	40 91 ea 03 	lds	r20, 0x03EA
    2d62:	50 91 eb 03 	lds	r21, 0x03EB
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d78:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d7a:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d7c:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d7e:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9c 01       	movw	r18, r24
    2d88:	ad 01       	movw	r20, r26
    2d8a:	c8 01       	movw	r24, r16
    2d8c:	b7 01       	movw	r22, r14
    2d8e:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	80 93 e8 03 	sts	0x03E8, r24
    2d9a:	90 93 e9 03 	sts	0x03E9, r25
    2d9e:	a0 93 ea 03 	sts	0x03EA, r26
    2da2:	b0 93 eb 03 	sts	0x03EB, r27
		recent_ptset[4].magnitude += weight*((float)ir_4.distance.cm - recent_ptset[4].magnitude);
    2da6:	e0 90 f7 03 	lds	r14, 0x03F7
    2daa:	f0 90 f8 03 	lds	r15, 0x03F8
    2dae:	00 91 f9 03 	lds	r16, 0x03F9
    2db2:	10 91 fa 03 	lds	r17, 0x03FA
    2db6:	80 91 d4 02 	lds	r24, 0x02D4
    2dba:	90 91 d5 02 	lds	r25, 0x02D5
    2dbe:	cc 01       	movw	r24, r24
    2dc0:	a0 e0       	ldi	r26, 0x00	; 0
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	bc 01       	movw	r22, r24
    2dc6:	cd 01       	movw	r24, r26
    2dc8:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	20 91 f7 03 	lds	r18, 0x03F7
    2dd4:	30 91 f8 03 	lds	r19, 0x03F8
    2dd8:	40 91 f9 03 	lds	r20, 0x03F9
    2ddc:	50 91 fa 03 	lds	r21, 0x03FA
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2df2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2df4:	4d 85       	ldd	r20, Y+13	; 0x0d
    2df6:	5e 85       	ldd	r21, Y+14	; 0x0e
    2df8:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	9c 01       	movw	r18, r24
    2e02:	ad 01       	movw	r20, r26
    2e04:	c8 01       	movw	r24, r16
    2e06:	b7 01       	movw	r22, r14
    2e08:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	80 93 f7 03 	sts	0x03F7, r24
    2e14:	90 93 f8 03 	sts	0x03F8, r25
    2e18:	a0 93 f9 03 	sts	0x03F9, r26
    2e1c:	b0 93 fa 03 	sts	0x03FA, r27

		sig = (1 - weight)*(sig + 0.0001);
    2e20:	60 e0       	ldi	r22, 0x00	; 0
    2e22:	70 e0       	ldi	r23, 0x00	; 0
    2e24:	80 e8       	ldi	r24, 0x80	; 128
    2e26:	9f e3       	ldi	r25, 0x3F	; 63
    2e28:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e2c:	4d 85       	ldd	r20, Y+13	; 0x0d
    2e2e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2e30:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	7c 01       	movw	r14, r24
    2e3a:	8d 01       	movw	r16, r26
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	27 e1       	ldi	r18, 0x17	; 23
    2e46:	37 eb       	ldi	r19, 0xB7	; 183
    2e48:	41 ed       	ldi	r20, 0xD1	; 209
    2e4a:	58 e3       	ldi	r21, 0x38	; 56
    2e4c:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	9c 01       	movw	r18, r24
    2e56:	ad 01       	movw	r20, r26
    2e58:	c8 01       	movw	r24, r16
    2e5a:	b7 01       	movw	r22, r14
    2e5c:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	8f 83       	std	Y+7, r24	; 0x07
    2e66:	98 87       	std	Y+8, r25	; 0x08
    2e68:	a9 87       	std	Y+9, r26	; 0x09
    2e6a:	ba 87       	std	Y+10, r27	; 0x0a
	recent_ptset[2].magnitude = (float)ir_2.distance.cm;
	recent_ptset[3].magnitude = (float)ir_3.distance.cm;
	recent_ptset[4].magnitude = (float)ir_4.distance.cm;
	
	//Kalman Filter
	for(float iter = 0; iter < 5; iter++){
    2e6c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e6e:	7c 81       	ldd	r23, Y+4	; 0x04
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	8b 83       	std	Y+3, r24	; 0x03
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	ad 83       	std	Y+5, r26	; 0x05
    2e8a:	be 83       	std	Y+6, r27	; 0x06
    2e8c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e8e:	7c 81       	ldd	r23, Y+4	; 0x04
    2e90:	8d 81       	ldd	r24, Y+5	; 0x05
    2e92:	9e 81       	ldd	r25, Y+6	; 0x06
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 ea       	ldi	r20, 0xA0	; 160
    2e9a:	50 e4       	ldi	r21, 0x40	; 64
    2e9c:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__cmpsf2>
    2ea0:	88 23       	and	r24, r24
    2ea2:	0c f4       	brge	.+2      	; 0x2ea6 <read_dis_arr+0x490>
    2ea4:	5e ce       	rjmp	.-836    	; 0x2b62 <read_dis_arr+0x14c>
		recent_ptset[4].magnitude += weight*((float)ir_4.distance.cm - recent_ptset[4].magnitude);

		sig = (1 - weight)*(sig + 0.0001);
	}
	//scale to proper grid resolution
	for(uint8_t iter = 0; iter < 5; iter++){
    2ea6:	1a 82       	std	Y+2, r1	; 0x02
    2ea8:	3b c0       	rjmp	.+118    	; 0x2f20 <read_dis_arr+0x50a>
		recent_ptset[iter].magnitude = recent_ptset[iter].magnitude/GRID_UNIT_RES;
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	08 2f       	mov	r16, r24
    2eae:	10 e0       	ldi	r17, 0x00	; 0
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	28 2f       	mov	r18, r24
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	c9 01       	movw	r24, r18
    2eb8:	88 0f       	add	r24, r24
    2eba:	99 1f       	adc	r25, r25
    2ebc:	82 0f       	add	r24, r18
    2ebe:	93 1f       	adc	r25, r19
    2ec0:	9c 01       	movw	r18, r24
    2ec2:	22 0f       	add	r18, r18
    2ec4:	33 1f       	adc	r19, r19
    2ec6:	22 0f       	add	r18, r18
    2ec8:	33 1f       	adc	r19, r19
    2eca:	82 0f       	add	r24, r18
    2ecc:	93 1f       	adc	r25, r19
    2ece:	fc 01       	movw	r30, r24
    2ed0:	e5 54       	subi	r30, 0x45	; 69
    2ed2:	fc 4f       	sbci	r31, 0xFC	; 252
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	a2 81       	ldd	r26, Z+2	; 0x02
    2eda:	b3 81       	ldd	r27, Z+3	; 0x03
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e2       	ldi	r20, 0x20	; 32
    2ee6:	51 e4       	ldi	r21, 0x41	; 65
    2ee8:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	ac 01       	movw	r20, r24
    2ef2:	bd 01       	movw	r22, r26
    2ef4:	c8 01       	movw	r24, r16
    2ef6:	88 0f       	add	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	80 0f       	add	r24, r16
    2efc:	91 1f       	adc	r25, r17
    2efe:	9c 01       	movw	r18, r24
    2f00:	22 0f       	add	r18, r18
    2f02:	33 1f       	adc	r19, r19
    2f04:	22 0f       	add	r18, r18
    2f06:	33 1f       	adc	r19, r19
    2f08:	82 0f       	add	r24, r18
    2f0a:	93 1f       	adc	r25, r19
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	e5 54       	subi	r30, 0x45	; 69
    2f10:	fc 4f       	sbci	r31, 0xFC	; 252
    2f12:	40 83       	st	Z, r20
    2f14:	51 83       	std	Z+1, r21	; 0x01
    2f16:	62 83       	std	Z+2, r22	; 0x02
    2f18:	73 83       	std	Z+3, r23	; 0x03
		recent_ptset[4].magnitude += weight*((float)ir_4.distance.cm - recent_ptset[4].magnitude);

		sig = (1 - weight)*(sig + 0.0001);
	}
	//scale to proper grid resolution
	for(uint8_t iter = 0; iter < 5; iter++){
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	8f 5f       	subi	r24, 0xFF	; 255
    2f1e:	8a 83       	std	Y+2, r24	; 0x02
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	85 30       	cpi	r24, 0x05	; 5
    2f24:	10 f2       	brcs	.-124    	; 0x2eaa <read_dis_arr+0x494>
		recent_ptset[iter].magnitude = recent_ptset[iter].magnitude/GRID_UNIT_RES;
	}
	
	for(uint8_t itr = 0; itr < 5; itr++){
    2f26:	19 82       	std	Y+1, r1	; 0x01
    2f28:	4b c0       	rjmp	.+150    	; 0x2fc0 <read_dis_arr+0x5aa>
		if(recent_ptset[itr].magnitude < HALF_N){ recent_ptset[itr].valid = SET;
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	28 2f       	mov	r18, r24
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	c9 01       	movw	r24, r18
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	82 0f       	add	r24, r18
    2f38:	93 1f       	adc	r25, r19
    2f3a:	9c 01       	movw	r18, r24
    2f3c:	22 0f       	add	r18, r18
    2f3e:	33 1f       	adc	r19, r19
    2f40:	22 0f       	add	r18, r18
    2f42:	33 1f       	adc	r19, r19
    2f44:	82 0f       	add	r24, r18
    2f46:	93 1f       	adc	r25, r19
    2f48:	fc 01       	movw	r30, r24
    2f4a:	e5 54       	subi	r30, 0x45	; 69
    2f4c:	fc 4f       	sbci	r31, 0xFC	; 252
    2f4e:	80 81       	ld	r24, Z
    2f50:	91 81       	ldd	r25, Z+1	; 0x01
    2f52:	a2 81       	ldd	r26, Z+2	; 0x02
    2f54:	b3 81       	ldd	r27, Z+3	; 0x03
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e5       	ldi	r20, 0x50	; 80
    2f60:	51 e4       	ldi	r21, 0x41	; 65
    2f62:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__cmpsf2>
    2f66:	88 23       	and	r24, r24
    2f68:	ac f4       	brge	.+42     	; 0x2f94 <read_dis_arr+0x57e>
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	c9 01       	movw	r24, r18
    2f72:	88 0f       	add	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	82 0f       	add	r24, r18
    2f78:	93 1f       	adc	r25, r19
    2f7a:	9c 01       	movw	r18, r24
    2f7c:	22 0f       	add	r18, r18
    2f7e:	33 1f       	adc	r19, r19
    2f80:	22 0f       	add	r18, r18
    2f82:	33 1f       	adc	r19, r19
    2f84:	82 0f       	add	r24, r18
    2f86:	93 1f       	adc	r25, r19
    2f88:	fc 01       	movw	r30, r24
    2f8a:	e7 53       	subi	r30, 0x37	; 55
    2f8c:	fc 4f       	sbci	r31, 0xFC	; 252
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	80 83       	st	Z, r24
    2f92:	13 c0       	rjmp	.+38     	; 0x2fba <read_dis_arr+0x5a4>
	//		rprintf(" IR%d: ",itr);
	//		rprintfFloat(5, recent_ptset[itr].magnitude);
		}
		else{ recent_ptset[itr].valid = UNSET;}
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	c9 01       	movw	r24, r18
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	82 0f       	add	r24, r18
    2fa2:	93 1f       	adc	r25, r19
    2fa4:	9c 01       	movw	r18, r24
    2fa6:	22 0f       	add	r18, r18
    2fa8:	33 1f       	adc	r19, r19
    2faa:	22 0f       	add	r18, r18
    2fac:	33 1f       	adc	r19, r19
    2fae:	82 0f       	add	r24, r18
    2fb0:	93 1f       	adc	r25, r19
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	e7 53       	subi	r30, 0x37	; 55
    2fb6:	fc 4f       	sbci	r31, 0xFC	; 252
    2fb8:	10 82       	st	Z, r1
	//scale to proper grid resolution
	for(uint8_t iter = 0; iter < 5; iter++){
		recent_ptset[iter].magnitude = recent_ptset[iter].magnitude/GRID_UNIT_RES;
	}
	
	for(uint8_t itr = 0; itr < 5; itr++){
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	85 30       	cpi	r24, 0x05	; 5
    2fc4:	08 f4       	brcc	.+2      	; 0x2fc8 <read_dis_arr+0x5b2>
    2fc6:	b1 cf       	rjmp	.-158    	; 0x2f2a <read_dis_arr+0x514>
	//		rprintfFloat(5, recent_ptset[itr].magnitude);
		}
		else{ recent_ptset[itr].valid = UNSET;}
	}

	update_rpt_xyang();
    2fc8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <update_rpt_xyang>


}
    2fcc:	62 96       	adiw	r28, 0x12	; 18
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	ff 90       	pop	r15
    2fe2:	ef 90       	pop	r14
    2fe4:	08 95       	ret

00002fe6 <update_transl>:

void update_transl(){
    2fe6:	af 92       	push	r10
    2fe8:	bf 92       	push	r11
    2fea:	cf 92       	push	r12
    2fec:	df 92       	push	r13
    2fee:	ef 92       	push	r14
    2ff0:	ff 92       	push	r15
    2ff2:	0f 93       	push	r16
    2ff4:	1f 93       	push	r17
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
	robot.x += robot.dDis * cos(deg_to_rad(robot.heading));
    2ffe:	a0 90 15 04 	lds	r10, 0x0415
    3002:	b0 90 16 04 	lds	r11, 0x0416
    3006:	c0 90 17 04 	lds	r12, 0x0417
    300a:	d0 90 18 04 	lds	r13, 0x0418
    300e:	e0 90 11 04 	lds	r14, 0x0411
    3012:	f0 90 12 04 	lds	r15, 0x0412
    3016:	00 91 13 04 	lds	r16, 0x0413
    301a:	10 91 14 04 	lds	r17, 0x0414
    301e:	80 91 0b 04 	lds	r24, 0x040B
    3022:	90 91 0c 04 	lds	r25, 0x040C
    3026:	0e 94 92 09 	call	0x1324	; 0x1324 <deg_to_rad>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	bc 01       	movw	r22, r24
    3030:	cd 01       	movw	r24, r26
    3032:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <cos>
    3036:	9b 01       	movw	r18, r22
    3038:	ac 01       	movw	r20, r24
    303a:	c8 01       	movw	r24, r16
    303c:	b7 01       	movw	r22, r14
    303e:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	9c 01       	movw	r18, r24
    3048:	ad 01       	movw	r20, r26
    304a:	c6 01       	movw	r24, r12
    304c:	b5 01       	movw	r22, r10
    304e:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	80 93 15 04 	sts	0x0415, r24
    305a:	90 93 16 04 	sts	0x0416, r25
    305e:	a0 93 17 04 	sts	0x0417, r26
    3062:	b0 93 18 04 	sts	0x0418, r27
	robot.y += robot.dDis * sin(deg_to_rad(robot.heading));
    3066:	a0 90 19 04 	lds	r10, 0x0419
    306a:	b0 90 1a 04 	lds	r11, 0x041A
    306e:	c0 90 1b 04 	lds	r12, 0x041B
    3072:	d0 90 1c 04 	lds	r13, 0x041C
    3076:	e0 90 11 04 	lds	r14, 0x0411
    307a:	f0 90 12 04 	lds	r15, 0x0412
    307e:	00 91 13 04 	lds	r16, 0x0413
    3082:	10 91 14 04 	lds	r17, 0x0414
    3086:	80 91 0b 04 	lds	r24, 0x040B
    308a:	90 91 0c 04 	lds	r25, 0x040C
    308e:	0e 94 92 09 	call	0x1324	; 0x1324 <deg_to_rad>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	bc 01       	movw	r22, r24
    3098:	cd 01       	movw	r24, r26
    309a:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <sin>
    309e:	9b 01       	movw	r18, r22
    30a0:	ac 01       	movw	r20, r24
    30a2:	c8 01       	movw	r24, r16
    30a4:	b7 01       	movw	r22, r14
    30a6:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	9c 01       	movw	r18, r24
    30b0:	ad 01       	movw	r20, r26
    30b2:	c6 01       	movw	r24, r12
    30b4:	b5 01       	movw	r22, r10
    30b6:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	80 93 19 04 	sts	0x0419, r24
    30c2:	90 93 1a 04 	sts	0x041A, r25
    30c6:	a0 93 1b 04 	sts	0x041B, r26
    30ca:	b0 93 1c 04 	sts	0x041C, r27
}
    30ce:	cf 91       	pop	r28
    30d0:	df 91       	pop	r29
    30d2:	1f 91       	pop	r17
    30d4:	0f 91       	pop	r16
    30d6:	ff 90       	pop	r15
    30d8:	ef 90       	pop	r14
    30da:	df 90       	pop	r13
    30dc:	cf 90       	pop	r12
    30de:	bf 90       	pop	r11
    30e0:	af 90       	pop	r10
    30e2:	08 95       	ret

000030e4 <update_heading>:
void update_heading(){
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
	robot.heading = robot.sen_heading;
    30ec:	80 91 0d 04 	lds	r24, 0x040D
    30f0:	90 91 0e 04 	lds	r25, 0x040E
    30f4:	90 93 0c 04 	sts	0x040C, r25
    30f8:	80 93 0b 04 	sts	0x040B, r24
}
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	08 95       	ret

00003102 <chk_srndng>:



void chk_srndng(uint8_t rpt_ndx){
    3102:	df 92       	push	r13
    3104:	ef 92       	push	r14
    3106:	ff 92       	push	r15
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	00 d0       	rcall	.+0      	; 0x3112 <chk_srndng+0x10>
    3112:	0f 92       	push	r0
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	8b 83       	std	Y+3, r24	; 0x03
	//check the 3x3 box around the recent point
	for(uint8_t i = recent_ptset[rpt_ndx].x - 1; i < recent_ptset[rpt_ndx].x + 2; i++){
    311a:	8b 81       	ldd	r24, Y+3	; 0x03
    311c:	28 2f       	mov	r18, r24
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	c9 01       	movw	r24, r18
    3122:	88 0f       	add	r24, r24
    3124:	99 1f       	adc	r25, r25
    3126:	82 0f       	add	r24, r18
    3128:	93 1f       	adc	r25, r19
    312a:	9c 01       	movw	r18, r24
    312c:	22 0f       	add	r18, r18
    312e:	33 1f       	adc	r19, r19
    3130:	22 0f       	add	r18, r18
    3132:	33 1f       	adc	r19, r19
    3134:	82 0f       	add	r24, r18
    3136:	93 1f       	adc	r25, r19
    3138:	fc 01       	movw	r30, r24
    313a:	ef 53       	subi	r30, 0x3F	; 63
    313c:	fc 4f       	sbci	r31, 0xFC	; 252
    313e:	80 81       	ld	r24, Z
    3140:	91 81       	ldd	r25, Z+1	; 0x01
    3142:	a2 81       	ldd	r26, Z+2	; 0x02
    3144:	b3 81       	ldd	r27, Z+3	; 0x03
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e8       	ldi	r20, 0x80	; 128
    3150:	5f e3       	ldi	r21, 0x3F	; 63
    3152:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	8a 83       	std	Y+2, r24	; 0x02
    3168:	01 c1       	rjmp	.+514    	; 0x336c <chk_srndng+0x26a>
		for(uint8_t j = recent_ptset[rpt_ndx].y - 1; j < recent_ptset[rpt_ndx].y + 2; j++){
    316a:	8b 81       	ldd	r24, Y+3	; 0x03
    316c:	28 2f       	mov	r18, r24
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	c9 01       	movw	r24, r18
    3172:	88 0f       	add	r24, r24
    3174:	99 1f       	adc	r25, r25
    3176:	82 0f       	add	r24, r18
    3178:	93 1f       	adc	r25, r19
    317a:	9c 01       	movw	r18, r24
    317c:	22 0f       	add	r18, r18
    317e:	33 1f       	adc	r19, r19
    3180:	22 0f       	add	r18, r18
    3182:	33 1f       	adc	r19, r19
    3184:	82 0f       	add	r24, r18
    3186:	93 1f       	adc	r25, r19
    3188:	fc 01       	movw	r30, r24
    318a:	eb 53       	subi	r30, 0x3B	; 59
    318c:	fc 4f       	sbci	r31, 0xFC	; 252
    318e:	80 81       	ld	r24, Z
    3190:	91 81       	ldd	r25, Z+1	; 0x01
    3192:	a2 81       	ldd	r26, Z+2	; 0x02
    3194:	b3 81       	ldd	r27, Z+3	; 0x03
    3196:	bc 01       	movw	r22, r24
    3198:	cd 01       	movw	r24, r26
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	89 83       	std	Y+1, r24	; 0x01
    31b8:	a0 c0       	rjmp	.+320    	; 0x32fa <chk_srndng+0x1f8>
			if((i>= 0 && i <= N) && (j>=0 && j <= N)){
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	8b 31       	cpi	r24, 0x1B	; 27
    31be:	08 f0       	brcs	.+2      	; 0x31c2 <chk_srndng+0xc0>
    31c0:	99 c0       	rjmp	.+306    	; 0x32f4 <chk_srndng+0x1f2>
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	8b 31       	cpi	r24, 0x1B	; 27
    31c6:	08 f0       	brcs	.+2      	; 0x31ca <chk_srndng+0xc8>
    31c8:	95 c0       	rjmp	.+298    	; 0x32f4 <chk_srndng+0x1f2>
				if(g_map[i][j].occ_flag == SET){
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	48 2f       	mov	r20, r24
    31ce:	50 e0       	ldi	r21, 0x00	; 0
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	c9 01       	movw	r24, r18
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	82 0f       	add	r24, r18
    31de:	93 1f       	adc	r25, r19
    31e0:	2e e4       	ldi	r18, 0x4E	; 78
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	b9 01       	movw	r22, r18
    31e6:	46 9f       	mul	r20, r22
    31e8:	90 01       	movw	r18, r0
    31ea:	47 9f       	mul	r20, r23
    31ec:	30 0d       	add	r19, r0
    31ee:	56 9f       	mul	r21, r22
    31f0:	30 0d       	add	r19, r0
    31f2:	11 24       	eor	r1, r1
    31f4:	82 0f       	add	r24, r18
    31f6:	93 1f       	adc	r25, r19
    31f8:	fc 01       	movw	r30, r24
    31fa:	ef 5d       	subi	r30, 0xDF	; 223
    31fc:	fb 4f       	sbci	r31, 0xFB	; 251
    31fe:	80 81       	ld	r24, Z
    3200:	81 30       	cpi	r24, 0x01	; 1
    3202:	09 f0       	breq	.+2      	; 0x3206 <chk_srndng+0x104>
    3204:	77 c0       	rjmp	.+238    	; 0x32f4 <chk_srndng+0x1f2>
					//rprintf("i: %d\tj: %d\n",i,j);
					push_back_err(recent_ptset[rpt_ndx].x - i, recent_ptset[rpt_ndx].y - j, &recent_ptset[rpt_ndx]);
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	c9 01       	movw	r24, r18
    320e:	88 0f       	add	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	82 0f       	add	r24, r18
    3214:	93 1f       	adc	r25, r19
    3216:	9c 01       	movw	r18, r24
    3218:	22 0f       	add	r18, r18
    321a:	33 1f       	adc	r19, r19
    321c:	22 0f       	add	r18, r18
    321e:	33 1f       	adc	r19, r19
    3220:	82 0f       	add	r24, r18
    3222:	93 1f       	adc	r25, r19
    3224:	fc 01       	movw	r30, r24
    3226:	ef 53       	subi	r30, 0x3F	; 63
    3228:	fc 4f       	sbci	r31, 0xFC	; 252
    322a:	e0 80       	ld	r14, Z
    322c:	f1 80       	ldd	r15, Z+1	; 0x01
    322e:	02 81       	ldd	r16, Z+2	; 0x02
    3230:	13 81       	ldd	r17, Z+3	; 0x03
    3232:	8a 81       	ldd	r24, Y+2	; 0x02
    3234:	88 2f       	mov	r24, r24
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	aa 27       	eor	r26, r26
    323a:	97 fd       	sbrc	r25, 7
    323c:	a0 95       	com	r26
    323e:	ba 2f       	mov	r27, r26
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    3248:	9b 01       	movw	r18, r22
    324a:	ac 01       	movw	r20, r24
    324c:	c8 01       	movw	r24, r16
    324e:	b7 01       	movw	r22, r14
    3250:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	bc 01       	movw	r22, r24
    325a:	cd 01       	movw	r24, r26
    325c:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__fixunssfsi>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	d8 2e       	mov	r13, r24
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	28 2f       	mov	r18, r24
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	c9 01       	movw	r24, r18
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	82 0f       	add	r24, r18
    3274:	93 1f       	adc	r25, r19
    3276:	9c 01       	movw	r18, r24
    3278:	22 0f       	add	r18, r18
    327a:	33 1f       	adc	r19, r19
    327c:	22 0f       	add	r18, r18
    327e:	33 1f       	adc	r19, r19
    3280:	82 0f       	add	r24, r18
    3282:	93 1f       	adc	r25, r19
    3284:	fc 01       	movw	r30, r24
    3286:	eb 53       	subi	r30, 0x3B	; 59
    3288:	fc 4f       	sbci	r31, 0xFC	; 252
    328a:	e0 80       	ld	r14, Z
    328c:	f1 80       	ldd	r15, Z+1	; 0x01
    328e:	02 81       	ldd	r16, Z+2	; 0x02
    3290:	13 81       	ldd	r17, Z+3	; 0x03
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	88 2f       	mov	r24, r24
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	aa 27       	eor	r26, r26
    329a:	97 fd       	sbrc	r25, 7
    329c:	a0 95       	com	r26
    329e:	ba 2f       	mov	r27, r26
    32a0:	bc 01       	movw	r22, r24
    32a2:	cd 01       	movw	r24, r26
    32a4:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    32a8:	9b 01       	movw	r18, r22
    32aa:	ac 01       	movw	r20, r24
    32ac:	c8 01       	movw	r24, r16
    32ae:	b7 01       	movw	r22, r14
    32b0:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	48 2f       	mov	r20, r24
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	28 2f       	mov	r18, r24
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	c9 01       	movw	r24, r18
    32ce:	88 0f       	add	r24, r24
    32d0:	99 1f       	adc	r25, r25
    32d2:	82 0f       	add	r24, r18
    32d4:	93 1f       	adc	r25, r19
    32d6:	9c 01       	movw	r18, r24
    32d8:	22 0f       	add	r18, r18
    32da:	33 1f       	adc	r19, r19
    32dc:	22 0f       	add	r18, r18
    32de:	33 1f       	adc	r19, r19
    32e0:	82 0f       	add	r24, r18
    32e2:	93 1f       	adc	r25, r19
    32e4:	9c 01       	movw	r18, r24
    32e6:	25 54       	subi	r18, 0x45	; 69
    32e8:	3c 4f       	sbci	r19, 0xFC	; 252
    32ea:	8d 2d       	mov	r24, r13
    32ec:	64 2f       	mov	r22, r20
    32ee:	a9 01       	movw	r20, r18
    32f0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <push_back_err>


void chk_srndng(uint8_t rpt_ndx){
	//check the 3x3 box around the recent point
	for(uint8_t i = recent_ptset[rpt_ndx].x - 1; i < recent_ptset[rpt_ndx].x + 2; i++){
		for(uint8_t j = recent_ptset[rpt_ndx].y - 1; j < recent_ptset[rpt_ndx].y + 2; j++){
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	8f 5f       	subi	r24, 0xFF	; 255
    32f8:	89 83       	std	Y+1, r24	; 0x01
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	88 2f       	mov	r24, r24
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	aa 27       	eor	r26, r26
    3302:	97 fd       	sbrc	r25, 7
    3304:	a0 95       	com	r26
    3306:	ba 2f       	mov	r27, r26
    3308:	bc 01       	movw	r22, r24
    330a:	cd 01       	movw	r24, r26
    330c:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    3310:	7b 01       	movw	r14, r22
    3312:	8c 01       	movw	r16, r24
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
    3316:	28 2f       	mov	r18, r24
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	c9 01       	movw	r24, r18
    331c:	88 0f       	add	r24, r24
    331e:	99 1f       	adc	r25, r25
    3320:	82 0f       	add	r24, r18
    3322:	93 1f       	adc	r25, r19
    3324:	9c 01       	movw	r18, r24
    3326:	22 0f       	add	r18, r18
    3328:	33 1f       	adc	r19, r19
    332a:	22 0f       	add	r18, r18
    332c:	33 1f       	adc	r19, r19
    332e:	82 0f       	add	r24, r18
    3330:	93 1f       	adc	r25, r19
    3332:	fc 01       	movw	r30, r24
    3334:	eb 53       	subi	r30, 0x3B	; 59
    3336:	fc 4f       	sbci	r31, 0xFC	; 252
    3338:	80 81       	ld	r24, Z
    333a:	91 81       	ldd	r25, Z+1	; 0x01
    333c:	a2 81       	ldd	r26, Z+2	; 0x02
    333e:	b3 81       	ldd	r27, Z+3	; 0x03
    3340:	bc 01       	movw	r22, r24
    3342:	cd 01       	movw	r24, r26
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	50 e4       	ldi	r21, 0x40	; 64
    334c:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	9c 01       	movw	r18, r24
    3356:	ad 01       	movw	r20, r26
    3358:	c8 01       	movw	r24, r16
    335a:	b7 01       	movw	r22, r14
    335c:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__cmpsf2>
    3360:	88 23       	and	r24, r24
    3362:	0c f4       	brge	.+2      	; 0x3366 <chk_srndng+0x264>
    3364:	2a cf       	rjmp	.-428    	; 0x31ba <chk_srndng+0xb8>



void chk_srndng(uint8_t rpt_ndx){
	//check the 3x3 box around the recent point
	for(uint8_t i = recent_ptset[rpt_ndx].x - 1; i < recent_ptset[rpt_ndx].x + 2; i++){
    3366:	8a 81       	ldd	r24, Y+2	; 0x02
    3368:	8f 5f       	subi	r24, 0xFF	; 255
    336a:	8a 83       	std	Y+2, r24	; 0x02
    336c:	8a 81       	ldd	r24, Y+2	; 0x02
    336e:	88 2f       	mov	r24, r24
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	aa 27       	eor	r26, r26
    3374:	97 fd       	sbrc	r25, 7
    3376:	a0 95       	com	r26
    3378:	ba 2f       	mov	r27, r26
    337a:	bc 01       	movw	r22, r24
    337c:	cd 01       	movw	r24, r26
    337e:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    3382:	7b 01       	movw	r14, r22
    3384:	8c 01       	movw	r16, r24
    3386:	8b 81       	ldd	r24, Y+3	; 0x03
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	c9 01       	movw	r24, r18
    338e:	88 0f       	add	r24, r24
    3390:	99 1f       	adc	r25, r25
    3392:	82 0f       	add	r24, r18
    3394:	93 1f       	adc	r25, r19
    3396:	9c 01       	movw	r18, r24
    3398:	22 0f       	add	r18, r18
    339a:	33 1f       	adc	r19, r19
    339c:	22 0f       	add	r18, r18
    339e:	33 1f       	adc	r19, r19
    33a0:	82 0f       	add	r24, r18
    33a2:	93 1f       	adc	r25, r19
    33a4:	fc 01       	movw	r30, r24
    33a6:	ef 53       	subi	r30, 0x3F	; 63
    33a8:	fc 4f       	sbci	r31, 0xFC	; 252
    33aa:	80 81       	ld	r24, Z
    33ac:	91 81       	ldd	r25, Z+1	; 0x01
    33ae:	a2 81       	ldd	r26, Z+2	; 0x02
    33b0:	b3 81       	ldd	r27, Z+3	; 0x03
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	50 e4       	ldi	r21, 0x40	; 64
    33be:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	9c 01       	movw	r18, r24
    33c8:	ad 01       	movw	r20, r26
    33ca:	c8 01       	movw	r24, r16
    33cc:	b7 01       	movw	r22, r14
    33ce:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__cmpsf2>
    33d2:	88 23       	and	r24, r24
    33d4:	0c f4       	brge	.+2      	; 0x33d8 <chk_srndng+0x2d6>
    33d6:	c9 ce       	rjmp	.-622    	; 0x316a <chk_srndng+0x68>
				}
			}
		}
	}
	//rprintf("END CHK S\n");
}
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	cf 91       	pop	r28
    33e0:	df 91       	pop	r29
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	ef 90       	pop	r14
    33ea:	df 90       	pop	r13
    33ec:	08 95       	ret

000033ee <calc_heading>:

float calc_heading(){
    33ee:	ef 92       	push	r14
    33f0:	ff 92       	push	r15
    33f2:	0f 93       	push	r16
    33f4:	1f 93       	push	r17
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	aa 97       	sbiw	r28, 0x2a	; 42
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
	float sum_weight = 0;
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a0 e0       	ldi	r26, 0x00	; 0
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	8f a3       	std	Y+39, r24	; 0x27
    3414:	98 a7       	std	Y+40, r25	; 0x28
    3416:	a9 a7       	std	Y+41, r26	; 0x29
    3418:	ba a7       	std	Y+42, r27	; 0x2a
	float sum_dE_theta_w = 0;
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	a0 e0       	ldi	r26, 0x00	; 0
    3420:	b0 e0       	ldi	r27, 0x00	; 0
    3422:	8b a3       	std	Y+35, r24	; 0x23
    3424:	9c a3       	std	Y+36, r25	; 0x24
    3426:	ad a3       	std	Y+37, r26	; 0x25
    3428:	be a3       	std	Y+38, r27	; 0x26
	float dE_theta;	//in degrees
	
	float weight;
	float dE_theta_w;

	for(struct ERROR_VECT* itr = err_list.head->next; itr != err_list.tail; itr = itr->next){
    342a:	e0 91 06 04 	lds	r30, 0x0406
    342e:	f0 91 07 04 	lds	r31, 0x0407
    3432:	82 85       	ldd	r24, Z+10	; 0x0a
    3434:	93 85       	ldd	r25, Z+11	; 0x0b
    3436:	9a 83       	std	Y+2, r25	; 0x02
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	f1 c0       	rjmp	.+482    	; 0x361e <calc_heading+0x230>

		e_x = itr->rct_pt->x + itr->dx;
    343c:	e9 81       	ldd	r30, Y+1	; 0x01
    343e:	fa 81       	ldd	r31, Y+2	; 0x02
    3440:	00 84       	ldd	r0, Z+8	; 0x08
    3442:	f1 85       	ldd	r31, Z+9	; 0x09
    3444:	e0 2d       	mov	r30, r0
    3446:	86 81       	ldd	r24, Z+6	; 0x06
    3448:	97 81       	ldd	r25, Z+7	; 0x07
    344a:	a0 85       	ldd	r26, Z+8	; 0x08
    344c:	b1 85       	ldd	r27, Z+9	; 0x09
    344e:	e9 81       	ldd	r30, Y+1	; 0x01
    3450:	fa 81       	ldd	r31, Y+2	; 0x02
    3452:	20 81       	ld	r18, Z
    3454:	31 81       	ldd	r19, Z+1	; 0x01
    3456:	42 81       	ldd	r20, Z+2	; 0x02
    3458:	53 81       	ldd	r21, Z+3	; 0x03
    345a:	bc 01       	movw	r22, r24
    345c:	cd 01       	movw	r24, r26
    345e:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	8f 8f       	std	Y+31, r24	; 0x1f
    3468:	98 a3       	std	Y+32, r25	; 0x20
    346a:	a9 a3       	std	Y+33, r26	; 0x21
    346c:	ba a3       	std	Y+34, r27	; 0x22
		e_y = itr->rct_pt->y + itr->dy;
    346e:	e9 81       	ldd	r30, Y+1	; 0x01
    3470:	fa 81       	ldd	r31, Y+2	; 0x02
    3472:	00 84       	ldd	r0, Z+8	; 0x08
    3474:	f1 85       	ldd	r31, Z+9	; 0x09
    3476:	e0 2d       	mov	r30, r0
    3478:	82 85       	ldd	r24, Z+10	; 0x0a
    347a:	93 85       	ldd	r25, Z+11	; 0x0b
    347c:	a4 85       	ldd	r26, Z+12	; 0x0c
    347e:	b5 85       	ldd	r27, Z+13	; 0x0d
    3480:	e9 81       	ldd	r30, Y+1	; 0x01
    3482:	fa 81       	ldd	r31, Y+2	; 0x02
    3484:	24 81       	ldd	r18, Z+4	; 0x04
    3486:	35 81       	ldd	r19, Z+5	; 0x05
    3488:	46 81       	ldd	r20, Z+6	; 0x06
    348a:	57 81       	ldd	r21, Z+7	; 0x07
    348c:	bc 01       	movw	r22, r24
    348e:	cd 01       	movw	r24, r26
    3490:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	8b 8f       	std	Y+27, r24	; 0x1b
    349a:	9c 8f       	std	Y+28, r25	; 0x1c
    349c:	ad 8f       	std	Y+29, r26	; 0x1d
    349e:	be 8f       	std	Y+30, r27	; 0x1e
	
		e_r = sqrt(square(e_x) + square(e_y));
    34a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34a2:	98 a1       	ldd	r25, Y+32	; 0x20
    34a4:	a9 a1       	ldd	r26, Y+33	; 0x21
    34a6:	ba a1       	ldd	r27, Y+34	; 0x22
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 b7 36 	call	0x6d6e	; 0x6d6e <square>
    34b0:	7b 01       	movw	r14, r22
    34b2:	8c 01       	movw	r16, r24
    34b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    34ba:	be 8d       	ldd	r27, Y+30	; 0x1e
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	0e 94 b7 36 	call	0x6d6e	; 0x6d6e <square>
    34c4:	9b 01       	movw	r18, r22
    34c6:	ac 01       	movw	r20, r24
    34c8:	c8 01       	movw	r24, r16
    34ca:	b7 01       	movw	r22, r14
    34cc:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	bc 01       	movw	r22, r24
    34d6:	cd 01       	movw	r24, r26
    34d8:	0e 94 6d 36 	call	0x6cda	; 0x6cda <sqrt>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	8f 8b       	std	Y+23, r24	; 0x17
    34e2:	98 8f       	std	Y+24, r25	; 0x18
    34e4:	a9 8f       	std	Y+25, r26	; 0x19
    34e6:	ba 8f       	std	Y+26, r27	; 0x1a
		e_theta = rad_to_deg(atan2(e_x, e_y));
    34e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34ea:	98 a1       	ldd	r25, Y+32	; 0x20
    34ec:	a9 a1       	ldd	r26, Y+33	; 0x21
    34ee:	ba a1       	ldd	r27, Y+34	; 0x22
    34f0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    34f2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    34f4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    34f6:	5e 8d       	ldd	r21, Y+30	; 0x1e
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	0e 94 9d 33 	call	0x673a	; 0x673a <atan2>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	bc 01       	movw	r22, r24
    3506:	cd 01       	movw	r24, r26
    3508:	0e 94 5f 34 	call	0x68be	; 0x68be <__fixsfsi>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	0e 94 c0 09 	call	0x1380	; 0x1380 <rad_to_deg>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	8b 8b       	std	Y+19, r24	; 0x13
    351a:	9c 8b       	std	Y+20, r25	; 0x14
    351c:	ad 8b       	std	Y+21, r26	; 0x15
    351e:	be 8b       	std	Y+22, r27	; 0x16
	
		dE_r = itr->rct_pt->magnitude - e_r;
    3520:	e9 81       	ldd	r30, Y+1	; 0x01
    3522:	fa 81       	ldd	r31, Y+2	; 0x02
    3524:	00 84       	ldd	r0, Z+8	; 0x08
    3526:	f1 85       	ldd	r31, Z+9	; 0x09
    3528:	e0 2d       	mov	r30, r0
    352a:	80 81       	ld	r24, Z
    352c:	91 81       	ldd	r25, Z+1	; 0x01
    352e:	a2 81       	ldd	r26, Z+2	; 0x02
    3530:	b3 81       	ldd	r27, Z+3	; 0x03
    3532:	bc 01       	movw	r22, r24
    3534:	cd 01       	movw	r24, r26
    3536:	2f 89       	ldd	r18, Y+23	; 0x17
    3538:	38 8d       	ldd	r19, Y+24	; 0x18
    353a:	49 8d       	ldd	r20, Y+25	; 0x19
    353c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    353e:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	8f 87       	std	Y+15, r24	; 0x0f
    3548:	98 8b       	std	Y+16, r25	; 0x10
    354a:	a9 8b       	std	Y+17, r26	; 0x11
    354c:	ba 8b       	std	Y+18, r27	; 0x12
		dE_theta = itr->rct_pt->angle - e_theta;
    354e:	e9 81       	ldd	r30, Y+1	; 0x01
    3550:	fa 81       	ldd	r31, Y+2	; 0x02
    3552:	00 84       	ldd	r0, Z+8	; 0x08
    3554:	f1 85       	ldd	r31, Z+9	; 0x09
    3556:	e0 2d       	mov	r30, r0
    3558:	84 81       	ldd	r24, Z+4	; 0x04
    355a:	95 81       	ldd	r25, Z+5	; 0x05
    355c:	aa 27       	eor	r26, r26
    355e:	97 fd       	sbrc	r25, 7
    3560:	a0 95       	com	r26
    3562:	ba 2f       	mov	r27, r26
    3564:	bc 01       	movw	r22, r24
    3566:	cd 01       	movw	r24, r26
    3568:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	bc 01       	movw	r22, r24
    3572:	cd 01       	movw	r24, r26
    3574:	2b 89       	ldd	r18, Y+19	; 0x13
    3576:	3c 89       	ldd	r19, Y+20	; 0x14
    3578:	4d 89       	ldd	r20, Y+21	; 0x15
    357a:	5e 89       	ldd	r21, Y+22	; 0x16
    357c:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	8b 87       	std	Y+11, r24	; 0x0b
    3586:	9c 87       	std	Y+12, r25	; 0x0c
    3588:	ad 87       	std	Y+13, r26	; 0x0d
    358a:	be 87       	std	Y+14, r27	; 0x0e
	
		weight = 1/(fabs(dE_r));
    358c:	8f 85       	ldd	r24, Y+15	; 0x0f
    358e:	98 89       	ldd	r25, Y+16	; 0x10
    3590:	a9 89       	ldd	r26, Y+17	; 0x11
    3592:	ba 89       	ldd	r27, Y+18	; 0x12
    3594:	9c 01       	movw	r18, r24
    3596:	ad 01       	movw	r20, r26
    3598:	5f 77       	andi	r21, 0x7F	; 127
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	70 e0       	ldi	r23, 0x00	; 0
    359e:	80 e8       	ldi	r24, 0x80	; 128
    35a0:	9f e3       	ldi	r25, 0x3F	; 63
    35a2:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divsf3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	8f 83       	std	Y+7, r24	; 0x07
    35ac:	98 87       	std	Y+8, r25	; 0x08
    35ae:	a9 87       	std	Y+9, r26	; 0x09
    35b0:	ba 87       	std	Y+10, r27	; 0x0a
		dE_theta_w = (dE_theta)*(weight);
    35b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ba:	2f 81       	ldd	r18, Y+7	; 0x07
    35bc:	38 85       	ldd	r19, Y+8	; 0x08
    35be:	49 85       	ldd	r20, Y+9	; 0x09
    35c0:	5a 85       	ldd	r21, Y+10	; 0x0a
    35c2:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	8b 83       	std	Y+3, r24	; 0x03
    35cc:	9c 83       	std	Y+4, r25	; 0x04
    35ce:	ad 83       	std	Y+5, r26	; 0x05
    35d0:	be 83       	std	Y+6, r27	; 0x06

		sum_weight += weight;
    35d2:	6f a1       	ldd	r22, Y+39	; 0x27
    35d4:	78 a5       	ldd	r23, Y+40	; 0x28
    35d6:	89 a5       	ldd	r24, Y+41	; 0x29
    35d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    35da:	2f 81       	ldd	r18, Y+7	; 0x07
    35dc:	38 85       	ldd	r19, Y+8	; 0x08
    35de:	49 85       	ldd	r20, Y+9	; 0x09
    35e0:	5a 85       	ldd	r21, Y+10	; 0x0a
    35e2:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	8f a3       	std	Y+39, r24	; 0x27
    35ec:	98 a7       	std	Y+40, r25	; 0x28
    35ee:	a9 a7       	std	Y+41, r26	; 0x29
    35f0:	ba a7       	std	Y+42, r27	; 0x2a
		sum_dE_theta_w += dE_theta_w;
    35f2:	6b a1       	ldd	r22, Y+35	; 0x23
    35f4:	7c a1       	ldd	r23, Y+36	; 0x24
    35f6:	8d a1       	ldd	r24, Y+37	; 0x25
    35f8:	9e a1       	ldd	r25, Y+38	; 0x26
    35fa:	2b 81       	ldd	r18, Y+3	; 0x03
    35fc:	3c 81       	ldd	r19, Y+4	; 0x04
    35fe:	4d 81       	ldd	r20, Y+5	; 0x05
    3600:	5e 81       	ldd	r21, Y+6	; 0x06
    3602:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	8b a3       	std	Y+35, r24	; 0x23
    360c:	9c a3       	std	Y+36, r25	; 0x24
    360e:	ad a3       	std	Y+37, r26	; 0x25
    3610:	be a3       	std	Y+38, r27	; 0x26
	float dE_theta;	//in degrees
	
	float weight;
	float dE_theta_w;

	for(struct ERROR_VECT* itr = err_list.head->next; itr != err_list.tail; itr = itr->next){
    3612:	e9 81       	ldd	r30, Y+1	; 0x01
    3614:	fa 81       	ldd	r31, Y+2	; 0x02
    3616:	82 85       	ldd	r24, Z+10	; 0x0a
    3618:	93 85       	ldd	r25, Z+11	; 0x0b
    361a:	9a 83       	std	Y+2, r25	; 0x02
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	20 91 08 04 	lds	r18, 0x0408
    3622:	30 91 09 04 	lds	r19, 0x0409
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	9a 81       	ldd	r25, Y+2	; 0x02
    362a:	28 17       	cp	r18, r24
    362c:	39 07       	cpc	r19, r25
    362e:	09 f0       	breq	.+2      	; 0x3632 <calc_heading+0x244>
    3630:	05 cf       	rjmp	.-502    	; 0x343c <calc_heading+0x4e>
		dE_theta_w = (dE_theta)*(weight);

		sum_weight += weight;
		sum_dE_theta_w += dE_theta_w;
	}
	return sum_dE_theta_w/sum_weight;
    3632:	6b a1       	ldd	r22, Y+35	; 0x23
    3634:	7c a1       	ldd	r23, Y+36	; 0x24
    3636:	8d a1       	ldd	r24, Y+37	; 0x25
    3638:	9e a1       	ldd	r25, Y+38	; 0x26
    363a:	2f a1       	ldd	r18, Y+39	; 0x27
    363c:	38 a5       	ldd	r19, Y+40	; 0x28
    363e:	49 a5       	ldd	r20, Y+41	; 0x29
    3640:	5a a5       	ldd	r21, Y+42	; 0x2a
    3642:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divsf3>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22

}
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	aa 96       	adiw	r28, 0x2a	; 42
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
    365a:	cf 91       	pop	r28
    365c:	df 91       	pop	r29
    365e:	1f 91       	pop	r17
    3660:	0f 91       	pop	r16
    3662:	ff 90       	pop	r15
    3664:	ef 90       	pop	r14
    3666:	08 95       	ret

00003668 <plot_rpts>:

void plot_rpts(){
    3668:	1f 93       	push	r17
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	0f 92       	push	r0
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t rpt_ndx = 0; rpt_ndx < 5; rpt_ndx++){
    3674:	19 82       	std	Y+1, r1	; 0x01
    3676:	58 c0       	rjmp	.+176    	; 0x3728 <plot_rpts+0xc0>
		if(recent_ptset[rpt_ndx].valid){
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	28 2f       	mov	r18, r24
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	c9 01       	movw	r24, r18
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	82 0f       	add	r24, r18
    3686:	93 1f       	adc	r25, r19
    3688:	9c 01       	movw	r18, r24
    368a:	22 0f       	add	r18, r18
    368c:	33 1f       	adc	r19, r19
    368e:	22 0f       	add	r18, r18
    3690:	33 1f       	adc	r19, r19
    3692:	82 0f       	add	r24, r18
    3694:	93 1f       	adc	r25, r19
    3696:	fc 01       	movw	r30, r24
    3698:	e7 53       	subi	r30, 0x37	; 55
    369a:	fc 4f       	sbci	r31, 0xFC	; 252
    369c:	80 81       	ld	r24, Z
    369e:	88 23       	and	r24, r24
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <plot_rpts+0x3c>
    36a2:	3f c0       	rjmp	.+126    	; 0x3722 <plot_rpts+0xba>
	//		rprintf(" rpt.x: %d rpt.y: %d rpt.m: %d rpt.a: %d|",
	//				(uint8_t)recent_ptset[rpt_ndx].x,(uint8_t)recent_ptset[rpt_ndx].y,
	//				(int16_t)recent_ptset[rpt_ndx].magnitude, recent_ptset[rpt_ndx].angle);
			insert_map_pt(((uint8_t)(recent_ptset[rpt_ndx].x)), ((uint8_t)(recent_ptset[rpt_ndx].y)), SET);
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
    36a6:	28 2f       	mov	r18, r24
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	c9 01       	movw	r24, r18
    36ac:	88 0f       	add	r24, r24
    36ae:	99 1f       	adc	r25, r25
    36b0:	82 0f       	add	r24, r18
    36b2:	93 1f       	adc	r25, r19
    36b4:	9c 01       	movw	r18, r24
    36b6:	22 0f       	add	r18, r18
    36b8:	33 1f       	adc	r19, r19
    36ba:	22 0f       	add	r18, r18
    36bc:	33 1f       	adc	r19, r19
    36be:	82 0f       	add	r24, r18
    36c0:	93 1f       	adc	r25, r19
    36c2:	fc 01       	movw	r30, r24
    36c4:	ef 53       	subi	r30, 0x3F	; 63
    36c6:	fc 4f       	sbci	r31, 0xFC	; 252
    36c8:	80 81       	ld	r24, Z
    36ca:	91 81       	ldd	r25, Z+1	; 0x01
    36cc:	a2 81       	ldd	r26, Z+2	; 0x02
    36ce:	b3 81       	ldd	r27, Z+3	; 0x03
    36d0:	bc 01       	movw	r22, r24
    36d2:	cd 01       	movw	r24, r26
    36d4:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__fixunssfsi>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	18 2f       	mov	r17, r24
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	28 2f       	mov	r18, r24
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	c9 01       	movw	r24, r18
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	82 0f       	add	r24, r18
    36ec:	93 1f       	adc	r25, r19
    36ee:	9c 01       	movw	r18, r24
    36f0:	22 0f       	add	r18, r18
    36f2:	33 1f       	adc	r19, r19
    36f4:	22 0f       	add	r18, r18
    36f6:	33 1f       	adc	r19, r19
    36f8:	82 0f       	add	r24, r18
    36fa:	93 1f       	adc	r25, r19
    36fc:	fc 01       	movw	r30, r24
    36fe:	eb 53       	subi	r30, 0x3B	; 59
    3700:	fc 4f       	sbci	r31, 0xFC	; 252
    3702:	80 81       	ld	r24, Z
    3704:	91 81       	ldd	r25, Z+1	; 0x01
    3706:	a2 81       	ldd	r26, Z+2	; 0x02
    3708:	b3 81       	ldd	r27, Z+3	; 0x03
    370a:	bc 01       	movw	r22, r24
    370c:	cd 01       	movw	r24, r26
    370e:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__fixunssfsi>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	98 2f       	mov	r25, r24
    3718:	81 2f       	mov	r24, r17
    371a:	69 2f       	mov	r22, r25
    371c:	41 e0       	ldi	r20, 0x01	; 1
    371e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <insert_map_pt>
	return sum_dE_theta_w/sum_weight;

}

void plot_rpts(){
	for(uint8_t rpt_ndx = 0; rpt_ndx < 5; rpt_ndx++){
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	8f 5f       	subi	r24, 0xFF	; 255
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	85 30       	cpi	r24, 0x05	; 5
    372c:	08 f4       	brcc	.+2      	; 0x3730 <plot_rpts+0xc8>
    372e:	a4 cf       	rjmp	.-184    	; 0x3678 <plot_rpts+0x10>
			insert_map_pt(((uint8_t)(recent_ptset[rpt_ndx].x)), ((uint8_t)(recent_ptset[rpt_ndx].y)), SET);
			//insert_map_pt(5, 6, SET);
		}
	}
//	rprintf("\nPLOT END\n");
}
    3730:	0f 90       	pop	r0
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	1f 91       	pop	r17
    3738:	08 95       	ret

0000373a <lclz_plot>:


void lclz_plot(){
    373a:	ef 92       	push	r14
    373c:	ff 92       	push	r15
    373e:	0f 93       	push	r16
    3740:	1f 93       	push	r17
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
    374a:	60 97       	sbiw	r28, 0x10	; 16
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	f8 94       	cli
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	cd bf       	out	0x3d, r28	; 61
	int16_t lclzd_heading = 0;
    3756:	18 8a       	std	Y+16, r1	; 0x10
    3758:	1f 86       	std	Y+15, r1	; 0x0f
	float calc_var = 18;
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	a0 e9       	ldi	r26, 0x90	; 144
    3760:	b1 e4       	ldi	r27, 0x41	; 65
    3762:	8b 87       	std	Y+11, r24	; 0x0b
    3764:	9c 87       	std	Y+12, r25	; 0x0c
    3766:	ad 87       	std	Y+13, r26	; 0x0d
    3768:	be 87       	std	Y+14, r27	; 0x0e
	float process_var = 10;
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	a0 e2       	ldi	r26, 0x20	; 32
    3770:	b1 e4       	ldi	r27, 0x41	; 65
    3772:	8f 83       	std	Y+7, r24	; 0x07
    3774:	98 87       	std	Y+8, r25	; 0x08
    3776:	a9 87       	std	Y+9, r26	; 0x09
    3778:	ba 87       	std	Y+10, r27	; 0x0a
	float gain;
	read_dis_arr();
    377a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <read_dis_arr>
	
	robot.heading = robot.sen_heading;
    377e:	80 91 0d 04 	lds	r24, 0x040D
    3782:	90 91 0e 04 	lds	r25, 0x040E
    3786:	90 93 0c 04 	sts	0x040C, r25
    378a:	80 93 0b 04 	sts	0x040B, r24

	for(uint8_t iter = 0; iter < 10; iter++){
    378e:	1a 82       	std	Y+2, r1	; 0x02
    3790:	b3 c0       	rjmp	.+358    	; 0x38f8 <lclz_plot+0x1be>
		
		process_var += 0.001;
    3792:	6f 81       	ldd	r22, Y+7	; 0x07
    3794:	78 85       	ldd	r23, Y+8	; 0x08
    3796:	89 85       	ldd	r24, Y+9	; 0x09
    3798:	9a 85       	ldd	r25, Y+10	; 0x0a
    379a:	2f e6       	ldi	r18, 0x6F	; 111
    379c:	32 e1       	ldi	r19, 0x12	; 18
    379e:	43 e8       	ldi	r20, 0x83	; 131
    37a0:	5a e3       	ldi	r21, 0x3A	; 58
    37a2:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	8f 83       	std	Y+7, r24	; 0x07
    37ac:	98 87       	std	Y+8, r25	; 0x08
    37ae:	a9 87       	std	Y+9, r26	; 0x09
    37b0:	ba 87       	std	Y+10, r27	; 0x0a

		for(uint8_t rpt_ndx = 0; rpt_ndx < 5; rpt_ndx++){
    37b2:	19 82       	std	Y+1, r1	; 0x01
    37b4:	1b c0       	rjmp	.+54     	; 0x37ec <lclz_plot+0xb2>
			if(recent_ptset[rpt_ndx].valid){chk_srndng(rpt_ndx);}
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	28 2f       	mov	r18, r24
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	c9 01       	movw	r24, r18
    37be:	88 0f       	add	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	82 0f       	add	r24, r18
    37c4:	93 1f       	adc	r25, r19
    37c6:	9c 01       	movw	r18, r24
    37c8:	22 0f       	add	r18, r18
    37ca:	33 1f       	adc	r19, r19
    37cc:	22 0f       	add	r18, r18
    37ce:	33 1f       	adc	r19, r19
    37d0:	82 0f       	add	r24, r18
    37d2:	93 1f       	adc	r25, r19
    37d4:	fc 01       	movw	r30, r24
    37d6:	e7 53       	subi	r30, 0x37	; 55
    37d8:	fc 4f       	sbci	r31, 0xFC	; 252
    37da:	80 81       	ld	r24, Z
    37dc:	88 23       	and	r24, r24
    37de:	19 f0       	breq	.+6      	; 0x37e6 <lclz_plot+0xac>
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	0e 94 81 18 	call	0x3102	; 0x3102 <chk_srndng>

	for(uint8_t iter = 0; iter < 10; iter++){
		
		process_var += 0.001;

		for(uint8_t rpt_ndx = 0; rpt_ndx < 5; rpt_ndx++){
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	8f 5f       	subi	r24, 0xFF	; 255
    37ea:	89 83       	std	Y+1, r24	; 0x01
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	85 30       	cpi	r24, 0x05	; 5
    37f0:	10 f3       	brcs	.-60     	; 0x37b6 <lclz_plot+0x7c>
			if(recent_ptset[rpt_ndx].valid){chk_srndng(rpt_ndx);}
		}
		lclzd_heading = calc_heading();
    37f2:	0e 94 f7 19 	call	0x33ee	; 0x33ee <calc_heading>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	bc 01       	movw	r22, r24
    37fc:	cd 01       	movw	r24, r26
    37fe:	0e 94 5f 34 	call	0x68be	; 0x68be <__fixsfsi>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	98 8b       	std	Y+16, r25	; 0x10
    3808:	8f 87       	std	Y+15, r24	; 0x0f

		gain = process_var/(process_var + calc_var);
    380a:	6f 81       	ldd	r22, Y+7	; 0x07
    380c:	78 85       	ldd	r23, Y+8	; 0x08
    380e:	89 85       	ldd	r24, Y+9	; 0x09
    3810:	9a 85       	ldd	r25, Y+10	; 0x0a
    3812:	2b 85       	ldd	r18, Y+11	; 0x0b
    3814:	3c 85       	ldd	r19, Y+12	; 0x0c
    3816:	4d 85       	ldd	r20, Y+13	; 0x0d
    3818:	5e 85       	ldd	r21, Y+14	; 0x0e
    381a:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	9c 01       	movw	r18, r24
    3824:	ad 01       	movw	r20, r26
    3826:	6f 81       	ldd	r22, Y+7	; 0x07
    3828:	78 85       	ldd	r23, Y+8	; 0x08
    382a:	89 85       	ldd	r24, Y+9	; 0x09
    382c:	9a 85       	ldd	r25, Y+10	; 0x0a
    382e:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divsf3>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	8b 83       	std	Y+3, r24	; 0x03
    3838:	9c 83       	std	Y+4, r25	; 0x04
    383a:	ad 83       	std	Y+5, r26	; 0x05
    383c:	be 83       	std	Y+6, r27	; 0x06
		robot.heading += gain*(lclzd_heading - robot.heading);
    383e:	80 91 0b 04 	lds	r24, 0x040B
    3842:	90 91 0c 04 	lds	r25, 0x040C
    3846:	aa 27       	eor	r26, r26
    3848:	97 fd       	sbrc	r25, 7
    384a:	a0 95       	com	r26
    384c:	ba 2f       	mov	r27, r26
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    3856:	7b 01       	movw	r14, r22
    3858:	8c 01       	movw	r16, r24
    385a:	20 91 0b 04 	lds	r18, 0x040B
    385e:	30 91 0c 04 	lds	r19, 0x040C
    3862:	8f 85       	ldd	r24, Y+15	; 0x0f
    3864:	98 89       	ldd	r25, Y+16	; 0x10
    3866:	82 1b       	sub	r24, r18
    3868:	93 0b       	sbc	r25, r19
    386a:	aa 27       	eor	r26, r26
    386c:	97 fd       	sbrc	r25, 7
    386e:	a0 95       	com	r26
    3870:	ba 2f       	mov	r27, r26
    3872:	bc 01       	movw	r22, r24
    3874:	cd 01       	movw	r24, r26
    3876:	0e 94 92 34 	call	0x6924	; 0x6924 <__floatsisf>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	bc 01       	movw	r22, r24
    3880:	cd 01       	movw	r24, r26
    3882:	2b 81       	ldd	r18, Y+3	; 0x03
    3884:	3c 81       	ldd	r19, Y+4	; 0x04
    3886:	4d 81       	ldd	r20, Y+5	; 0x05
    3888:	5e 81       	ldd	r21, Y+6	; 0x06
    388a:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9c 01       	movw	r18, r24
    3894:	ad 01       	movw	r20, r26
    3896:	c8 01       	movw	r24, r16
    3898:	b7 01       	movw	r22, r14
    389a:	0e 94 2a 33 	call	0x6654	; 0x6654 <__addsf3>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	bc 01       	movw	r22, r24
    38a4:	cd 01       	movw	r24, r26
    38a6:	0e 94 5f 34 	call	0x68be	; 0x68be <__fixsfsi>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	90 93 0c 04 	sts	0x040C, r25
    38b2:	80 93 0b 04 	sts	0x040B, r24
		process_var = (1 - gain)*process_var;
    38b6:	60 e0       	ldi	r22, 0x00	; 0
    38b8:	70 e0       	ldi	r23, 0x00	; 0
    38ba:	80 e8       	ldi	r24, 0x80	; 128
    38bc:	9f e3       	ldi	r25, 0x3F	; 63
    38be:	2b 81       	ldd	r18, Y+3	; 0x03
    38c0:	3c 81       	ldd	r19, Y+4	; 0x04
    38c2:	4d 81       	ldd	r20, Y+5	; 0x05
    38c4:	5e 81       	ldd	r21, Y+6	; 0x06
    38c6:	0e 94 29 33 	call	0x6652	; 0x6652 <__subsf3>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	9c 01       	movw	r18, r24
    38d0:	ad 01       	movw	r20, r26
    38d2:	6f 81       	ldd	r22, Y+7	; 0x07
    38d4:	78 85       	ldd	r23, Y+8	; 0x08
    38d6:	89 85       	ldd	r24, Y+9	; 0x09
    38d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38da:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	8f 83       	std	Y+7, r24	; 0x07
    38e4:	98 87       	std	Y+8, r25	; 0x08
    38e6:	a9 87       	std	Y+9, r26	; 0x09
    38e8:	ba 87       	std	Y+10, r27	; 0x0a
		
		clear_err_list();	
    38ea:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <clear_err_list>
		update_rpt_xyang();
    38ee:	0e 94 f5 13 	call	0x27ea	; 0x27ea <update_rpt_xyang>
	float gain;
	read_dis_arr();
	
	robot.heading = robot.sen_heading;

	for(uint8_t iter = 0; iter < 10; iter++){
    38f2:	8a 81       	ldd	r24, Y+2	; 0x02
    38f4:	8f 5f       	subi	r24, 0xFF	; 255
    38f6:	8a 83       	std	Y+2, r24	; 0x02
    38f8:	8a 81       	ldd	r24, Y+2	; 0x02
    38fa:	8a 30       	cpi	r24, 0x0A	; 10
    38fc:	08 f4       	brcc	.+2      	; 0x3900 <lclz_plot+0x1c6>
    38fe:	49 cf       	rjmp	.-366    	; 0x3792 <lclz_plot+0x58>
		process_var = (1 - gain)*process_var;
		
		clear_err_list();	
		update_rpt_xyang();
	}
	plot_rpts();
    3900:	0e 94 34 1b 	call	0x3668	; 0x3668 <plot_rpts>
	update_pts();
    3904:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <update_pts>
	
	rprintf("%d\n", robot.heading);
    3908:	26 ea       	ldi	r18, 0xA6	; 166
    390a:	34 e0       	ldi	r19, 0x04	; 4
    390c:	40 91 0b 04 	lds	r20, 0x040B
    3910:	50 91 0c 04 	lds	r21, 0x040C
    3914:	00 d0       	rcall	.+0      	; 0x3916 <lclz_plot+0x1dc>
    3916:	00 d0       	rcall	.+0      	; 0x3918 <lclz_plot+0x1de>
    3918:	0f 92       	push	r0
    391a:	ed b7       	in	r30, 0x3d	; 61
    391c:	fe b7       	in	r31, 0x3e	; 62
    391e:	31 96       	adiw	r30, 0x01	; 1
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	80 83       	st	Z, r24
    3924:	32 83       	std	Z+2, r19	; 0x02
    3926:	21 83       	std	Z+1, r18	; 0x01
    3928:	54 83       	std	Z+4, r21	; 0x04
    392a:	43 83       	std	Z+3, r20	; 0x03
    392c:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
	//print_map();
	if(robot.dDis != 0){
	//	rprintf("dDis: ");
	//	rprintfFloat(5,robot.dDis);
	}
	robot.dDis = 0;
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	a0 e0       	ldi	r26, 0x00	; 0
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	80 93 11 04 	sts	0x0411, r24
    3946:	90 93 12 04 	sts	0x0412, r25
    394a:	a0 93 13 04 	sts	0x0413, r26
    394e:	b0 93 14 04 	sts	0x0414, r27

	

}
    3952:	60 96       	adiw	r28, 0x10	; 16
    3954:	0f b6       	in	r0, 0x3f	; 63
    3956:	f8 94       	cli
    3958:	de bf       	out	0x3e, r29	; 62
    395a:	0f be       	out	0x3f, r0	; 63
    395c:	cd bf       	out	0x3d, r28	; 61
    395e:	cf 91       	pop	r28
    3960:	df 91       	pop	r29
    3962:	1f 91       	pop	r17
    3964:	0f 91       	pop	r16
    3966:	ff 90       	pop	r15
    3968:	ef 90       	pop	r14
    396a:	08 95       	ret

0000396c <appControl>:
int16_t cmd_r = 0;



// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {
    396c:	df 93       	push	r29
    396e:	cf 93       	push	r28
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
    3974:	2a 97       	sbiw	r28, 0x0a	; 10
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	6b 83       	std	Y+3, r22	; 0x03
    3982:	7c 83       	std	Y+4, r23	; 0x04
    3984:	8d 83       	std	Y+5, r24	; 0x05
    3986:	9e 83       	std	Y+6, r25	; 0x06
    3988:	2f 83       	std	Y+7, r18	; 0x07
    398a:	38 87       	std	Y+8, r19	; 0x08
    398c:	49 87       	std	Y+9, r20	; 0x09
    398e:	5a 87       	std	Y+10, r21	; 0x0a
	//rprintf("\t\t---------------------COUNTER: %d\n", counter);
	// -------- Start Switch/Button-------
	// Switch/Button - see switch.h
	
	// To test if it is pressed then
	if(SWITCH_pressed(&button)){
    3990:	8b e7       	ldi	r24, 0x7B	; 123
    3992:	92 e0       	ldi	r25, 0x02	; 2
    3994:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <SWITCH_pressed>
		// pressed
	}
	
	// To test if it is released then
	if(SWITCH_released(&button)){
    3998:	8b e7       	ldi	r24, 0x7B	; 123
    399a:	92 e0       	ldi	r25, 0x02	; 2
    399c:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <SWITCH_released>

	// -------- Start Marquee-------
	// Marquee - see 'segled.h'
	// Before using the Marquee you need to redirect rprintf to write to it
	// This can be done using
	Writer old = rprintfInit(marqueeGetWriter(&marquee));
    39a0:	8e e8       	ldi	r24, 0x8E	; 142
    39a2:	92 e0       	ldi	r25, 0x02	; 2
    39a4:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <marqueeGetWriter>
    39a8:	0e 94 72 22 	call	0x44e4	; 0x44e4 <rprintfInit>
    39ac:	9a 83       	std	Y+2, r25	; 0x02
    39ae:	89 83       	std	Y+1, r24	; 0x01
	// the entire line has been shown ('one-shot' mode)
	
	// In 'one-shot' mode then you may want to make sure that
	// a previous line has finished before you display a second line.
	// This can be done as follows:-
	marqueeSetEndDelay(&marquee,0); // Make sure we are in one-shot mode
    39b0:	8e e8       	ldi	r24, 0x8E	; 142
    39b2:	92 e0       	ldi	r25, 0x02	; 2
    39b4:	40 e0       	ldi	r20, 0x00	; 0
    39b6:	50 e0       	ldi	r21, 0x00	; 0
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	0e 94 67 24 	call	0x48ce	; 0x48ce <marqueeSetEndDelay>
	if(marqueeIsActive(&marquee)==FALSE){
    39c0:	8e e8       	ldi	r24, 0x8E	; 142
    39c2:	92 e0       	ldi	r25, 0x02	; 2
    39c4:	0e 94 56 24 	call	0x48ac	; 0x48ac <marqueeIsActive>
    39c8:	88 23       	and	r24, r24
    39ca:	89 f5       	brne	.+98     	; 0x3a2e <appControl+0xc2>
	     if(loopCount==1){
    39cc:	8b 81       	ldd	r24, Y+3	; 0x03
    39ce:	9c 81       	ldd	r25, Y+4	; 0x04
    39d0:	ad 81       	ldd	r26, Y+5	; 0x05
    39d2:	be 81       	ldd	r27, Y+6	; 0x06
    39d4:	81 30       	cpi	r24, 0x01	; 1
    39d6:	91 05       	cpc	r25, r1
    39d8:	a1 05       	cpc	r26, r1
    39da:	b1 05       	cpc	r27, r1
    39dc:	89 f4       	brne	.+34     	; 0x3a00 <appControl+0x94>
	     	rprintf("ABCDEFGHIJKLMNOPQRSTUVWXYZ\n");
    39de:	83 eb       	ldi	r24, 0xB3	; 179
    39e0:	94 e0       	ldi	r25, 0x04	; 4
    39e2:	00 d0       	rcall	.+0      	; 0x39e4 <appControl+0x78>
    39e4:	0f 92       	push	r0
    39e6:	ed b7       	in	r30, 0x3d	; 61
    39e8:	fe b7       	in	r31, 0x3e	; 62
    39ea:	31 96       	adiw	r30, 0x01	; 1
    39ec:	21 e0       	ldi	r18, 0x01	; 1
    39ee:	20 83       	st	Z, r18
    39f0:	92 83       	std	Z+2, r25	; 0x02
    39f2:	81 83       	std	Z+1, r24	; 0x01
    39f4:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	17 c0       	rjmp	.+46     	; 0x3a2e <appControl+0xc2>
	     }else{
			rprintf("Loop=%u\n",(unsigned)loopCount); // Put the loop count
    3a00:	2a ea       	ldi	r18, 0xAA	; 170
    3a02:	34 e0       	ldi	r19, 0x04	; 4
    3a04:	4b 81       	ldd	r20, Y+3	; 0x03
    3a06:	5c 81       	ldd	r21, Y+4	; 0x04
    3a08:	00 d0       	rcall	.+0      	; 0x3a0a <appControl+0x9e>
    3a0a:	00 d0       	rcall	.+0      	; 0x3a0c <appControl+0xa0>
    3a0c:	0f 92       	push	r0
    3a0e:	ed b7       	in	r30, 0x3d	; 61
    3a10:	fe b7       	in	r31, 0x3e	; 62
    3a12:	31 96       	adiw	r30, 0x01	; 1
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	80 83       	st	Z, r24
    3a18:	32 83       	std	Z+2, r19	; 0x02
    3a1a:	21 83       	std	Z+1, r18	; 0x01
    3a1c:	54 83       	std	Z+4, r21	; 0x04
    3a1e:	43 83       	std	Z+3, r20	; 0x03
    3a20:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
	     }
	}
	
	// Restore rprintf back to its previous location
	rprintfInit(old);
    3a2e:	89 81       	ldd	r24, Y+1	; 0x01
    3a30:	9a 81       	ldd	r25, Y+2	; 0x02
    3a32:	0e 94 72 22 	call	0x44e4	; 0x44e4 <rprintfInit>
*/
//	rprintf("lb vel: %d\n",robot.sen_vel);
	//rprintf("MAIN LOOP\n");
//	lclz_plot();
	//ir_filter();
	send_angle(5);
    3a36:	85 e0       	ldi	r24, 0x05	; 5
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <send_angle>
	//rprintf("\tir_4: ");
	//distanceDump(ir_4);

	//iter += 0.02;
	//print_map();
	counter++;
    3a3e:	80 91 ea 02 	lds	r24, 0x02EA
    3a42:	90 91 eb 02 	lds	r25, 0x02EB
    3a46:	a0 91 ec 02 	lds	r26, 0x02EC
    3a4a:	b0 91 ed 02 	lds	r27, 0x02ED
    3a4e:	01 96       	adiw	r24, 0x01	; 1
    3a50:	a1 1d       	adc	r26, r1
    3a52:	b1 1d       	adc	r27, r1
    3a54:	80 93 ea 02 	sts	0x02EA, r24
    3a58:	90 93 eb 02 	sts	0x02EB, r25
    3a5c:	a0 93 ec 02 	sts	0x02EC, r26
    3a60:	b0 93 ed 02 	sts	0x02ED, r27
	return 0;
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	a0 e0       	ldi	r26, 0x00	; 0
    3a6a:	b0 e0       	ldi	r27, 0x00	; 0
}
    3a6c:	bc 01       	movw	r22, r24
    3a6e:	cd 01       	movw	r24, r26
    3a70:	2a 96       	adiw	r28, 0x0a	; 10
    3a72:	0f b6       	in	r0, 0x3f	; 63
    3a74:	f8 94       	cli
    3a76:	de bf       	out	0x3e, r29	; 62
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	cd bf       	out	0x3d, r28	; 61
    3a7c:	cf 91       	pop	r28
    3a7e:	df 91       	pop	r29
    3a80:	08 95       	ret

00003a82 <SWITCH_pressed>:
	const IOPin* pin;
} SWITCH;

#define MAKE_SWITCH(pin) {pin}

static __inline__ boolean SWITCH_pressed(SWITCH* sw){
    3a82:	df 93       	push	r29
    3a84:	cf 93       	push	r28
    3a86:	00 d0       	rcall	.+0      	; 0x3a88 <SWITCH_pressed+0x6>
    3a88:	0f 92       	push	r0
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	9a 83       	std	Y+2, r25	; 0x02
    3a90:	89 83       	std	Y+1, r24	; 0x01
	return pin_is_low(sw->pin);
    3a92:	e9 81       	ldd	r30, Y+1	; 0x01
    3a94:	fa 81       	ldd	r31, Y+2	; 0x02
    3a96:	80 81       	ld	r24, Z
    3a98:	91 81       	ldd	r25, Z+1	; 0x01
    3a9a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <pin_is_high>
    3a9e:	1b 82       	std	Y+3, r1	; 0x03
    3aa0:	88 23       	and	r24, r24
    3aa2:	11 f4       	brne	.+4      	; 0x3aa8 <SWITCH_pressed+0x26>
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	8b 83       	std	Y+3, r24	; 0x03
    3aa8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	08 95       	ret

00003ab6 <SWITCH_released>:

static __inline__ boolean SWITCH_released(SWITCH* sw){
    3ab6:	df 93       	push	r29
    3ab8:	cf 93       	push	r28
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <SWITCH_released+0x6>
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	9a 83       	std	Y+2, r25	; 0x02
    3ac2:	89 83       	std	Y+1, r24	; 0x01
	return pin_is_high(sw->pin);
    3ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ac8:	80 81       	ld	r24, Z
    3aca:	91 81       	ldd	r25, Z+1	; 0x01
    3acc:	0e 94 62 21 	call	0x42c4	; 0x42c4 <pin_is_high>
}
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	cf 91       	pop	r28
    3ad6:	df 91       	pop	r29
    3ad8:	08 95       	ret

00003ada <marqueeGetWriter>:
	(size_t)(sizeof(ledlst)/sizeof(SEGLED*)), \
	null, 0, 0, MARQUEE_SIZE, delayChar, delayEnd, FALSE, FALSE,writer \
}

// Return a Writer that can be used to write to the device
static __inline__ Writer marqueeGetWriter(const MARQUEE* marquee){
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <marqueeGetWriter+0x6>
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	9a 83       	std	Y+2, r25	; 0x02
    3ae6:	89 83       	std	Y+1, r24	; 0x01
	return marquee->writer;
    3ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    3aea:	fa 81       	ldd	r31, Y+2	; 0x02
    3aec:	85 89       	ldd	r24, Z+21	; 0x15
    3aee:	96 89       	ldd	r25, Z+22	; 0x16
}
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	cf 91       	pop	r28
    3af6:	df 91       	pop	r29
    3af8:	08 95       	ret

00003afa <__GP2D12_read>:
    3afa:	0f 93       	push	r16
    3afc:	1f 93       	push	r17
    3afe:	8c 01       	movw	r16, r24
    3b00:	fc 01       	movw	r30, r24
    3b02:	81 85       	ldd	r24, Z+9	; 0x09
    3b04:	0e 94 07 20 	call	0x400e	; 0x400e <a2dReadMv>
    3b08:	a0 e0       	ldi	r26, 0x00	; 0
    3b0a:	b0 e0       	ldi	r27, 0x00	; 0
    3b0c:	bc 01       	movw	r22, r24
    3b0e:	cd 01       	movw	r24, r26
    3b10:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    3b14:	2b e5       	ldi	r18, 0x5B	; 91
    3b16:	31 eb       	ldi	r19, 0xB1	; 177
    3b18:	4f e7       	ldi	r20, 0x7F	; 127
    3b1a:	5f eb       	ldi	r21, 0xBF	; 191
    3b1c:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <pow>
    3b20:	9b 01       	movw	r18, r22
    3b22:	ac 01       	movw	r20, r24
    3b24:	ca 01       	movw	r24, r20
    3b26:	b9 01       	movw	r22, r18
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e5       	ldi	r19, 0x50	; 80
    3b2c:	43 ed       	ldi	r20, 0xD3	; 211
    3b2e:	56 e4       	ldi	r21, 0x46	; 70
    3b30:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    3b34:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__fixunssfsi>
    3b38:	f8 01       	movw	r30, r16
    3b3a:	70 87       	std	Z+8, r23	; 0x08
    3b3c:	67 83       	std	Z+7, r22	; 0x07
    3b3e:	1f 91       	pop	r17
    3b40:	0f 91       	pop	r16
    3b42:	08 95       	ret

00003b44 <__GP2Y0A21YK_read>:
    3b44:	0f 93       	push	r16
    3b46:	1f 93       	push	r17
    3b48:	8c 01       	movw	r16, r24
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	81 85       	ldd	r24, Z+9	; 0x09
    3b4e:	0e 94 07 20 	call	0x400e	; 0x400e <a2dReadMv>
    3b52:	a0 e0       	ldi	r26, 0x00	; 0
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	bc 01       	movw	r22, r24
    3b58:	cd 01       	movw	r24, r26
    3b5a:	0e 94 90 34 	call	0x6920	; 0x6920 <__floatunsisf>
    3b5e:	2e ee       	ldi	r18, 0xEE	; 238
    3b60:	3c e7       	ldi	r19, 0x7C	; 124
    3b62:	4f e4       	ldi	r20, 0x4F	; 79
    3b64:	5f eb       	ldi	r21, 0xBF	; 191
    3b66:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <pow>
    3b6a:	9b 01       	movw	r18, r22
    3b6c:	ac 01       	movw	r20, r24
    3b6e:	ca 01       	movw	r24, r20
    3b70:	b9 01       	movw	r22, r18
    3b72:	26 e6       	ldi	r18, 0x66	; 102
    3b74:	32 ee       	ldi	r19, 0xE2	; 226
    3b76:	40 e0       	ldi	r20, 0x00	; 0
    3b78:	56 e4       	ldi	r21, 0x46	; 70
    3b7a:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <__mulsf3>
    3b7e:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__fixunssfsi>
    3b82:	f8 01       	movw	r30, r16
    3b84:	70 87       	std	Z+8, r23	; 0x08
    3b86:	67 83       	std	Z+7, r22	; 0x07
    3b88:	1f 91       	pop	r17
    3b8a:	0f 91       	pop	r16
    3b8c:	08 95       	ret

00003b8e <_sensorRead_>:
    3b8e:	cf 92       	push	r12
    3b90:	df 92       	push	r13
    3b92:	ef 92       	push	r14
    3b94:	ff 92       	push	r15
    3b96:	0f 93       	push	r16
    3b98:	1f 93       	push	r17
    3b9a:	cf 93       	push	r28
    3b9c:	df 93       	push	r29
    3b9e:	ec 01       	movw	r28, r24
    3ba0:	08 81       	ld	r16, Y
    3ba2:	19 81       	ldd	r17, Y+1	; 0x01
    3ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ba6:	88 23       	and	r24, r24
    3ba8:	51 f4       	brne	.+20     	; 0x3bbe <_sensorRead_+0x30>
    3baa:	f8 01       	movw	r30, r16
    3bac:	85 91       	lpm	r24, Z+
    3bae:	94 91       	lpm	r25, Z+
    3bb0:	89 2b       	or	r24, r25
    3bb2:	29 f0       	breq	.+10     	; 0x3bbe <_sensorRead_+0x30>
    3bb4:	84 ee       	ldi	r24, 0xE4	; 228
    3bb6:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	35 c0       	rjmp	.+106    	; 0x3c28 <_sensorRead_+0x9a>
    3bbe:	0e 94 6f 28 	call	0x50de	; 0x50de <clockGetus>
    3bc2:	6b 01       	movw	r12, r22
    3bc4:	7c 01       	movw	r14, r24
    3bc6:	f8 01       	movw	r30, r16
    3bc8:	36 96       	adiw	r30, 0x06	; 6
    3bca:	65 91       	lpm	r22, Z+
    3bcc:	74 91       	lpm	r23, Z+
    3bce:	61 15       	cp	r22, r1
    3bd0:	71 05       	cpc	r23, r1
    3bd2:	e9 f0       	breq	.+58     	; 0x3c0e <_sensorRead_+0x80>
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	28 ee       	ldi	r18, 0xE8	; 232
    3bda:	33 e0       	ldi	r19, 0x03	; 3
    3bdc:	40 e0       	ldi	r20, 0x00	; 0
    3bde:	50 e0       	ldi	r21, 0x00	; 0
    3be0:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__mulsi3>
    3be4:	9b 01       	movw	r18, r22
    3be6:	ac 01       	movw	r20, r24
    3be8:	80 91 19 0c 	lds	r24, 0x0C19
    3bec:	90 91 1a 0c 	lds	r25, 0x0C1A
    3bf0:	89 2b       	or	r24, r25
    3bf2:	29 f4       	brne	.+10     	; 0x3bfe <_sensorRead_+0x70>
    3bf4:	ca 01       	movw	r24, r20
    3bf6:	b9 01       	movw	r22, r18
    3bf8:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <delay_us>
    3bfc:	08 c0       	rjmp	.+16     	; 0x3c0e <_sensorRead_+0x80>
    3bfe:	6a 81       	ldd	r22, Y+2	; 0x02
    3c00:	7b 81       	ldd	r23, Y+3	; 0x03
    3c02:	8c 81       	ldd	r24, Y+4	; 0x04
    3c04:	9d 81       	ldd	r25, Y+5	; 0x05
    3c06:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <clockHasElapsed>
    3c0a:	88 23       	and	r24, r24
    3c0c:	69 f0       	breq	.+26     	; 0x3c28 <_sensorRead_+0x9a>
    3c0e:	c8 01       	movw	r24, r16
    3c10:	02 96       	adiw	r24, 0x02	; 2
    3c12:	fc 01       	movw	r30, r24
    3c14:	25 91       	lpm	r18, Z+
    3c16:	34 91       	lpm	r19, Z+
    3c18:	ce 01       	movw	r24, r28
    3c1a:	f9 01       	movw	r30, r18
    3c1c:	09 95       	icall
    3c1e:	ca 82       	std	Y+2, r12	; 0x02
    3c20:	db 82       	std	Y+3, r13	; 0x03
    3c22:	ec 82       	std	Y+4, r14	; 0x04
    3c24:	fd 82       	std	Y+5, r15	; 0x05
    3c26:	8f ef       	ldi	r24, 0xFF	; 255
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	1f 91       	pop	r17
    3c2e:	0f 91       	pop	r16
    3c30:	ff 90       	pop	r15
    3c32:	ef 90       	pop	r14
    3c34:	df 90       	pop	r13
    3c36:	cf 90       	pop	r12
    3c38:	08 95       	ret

00003c3a <_sensorInit_>:
    3c3a:	cf 92       	push	r12
    3c3c:	df 92       	push	r13
    3c3e:	ef 92       	push	r14
    3c40:	ff 92       	push	r15
    3c42:	0f 93       	push	r16
    3c44:	1f 93       	push	r17
    3c46:	cf 93       	push	r28
    3c48:	df 93       	push	r29
    3c4a:	ec 01       	movw	r28, r24
    3c4c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c4e:	88 23       	and	r24, r24
    3c50:	b1 f5       	brne	.+108    	; 0x3cbe <_sensorInit_+0x84>
    3c52:	88 81       	ld	r24, Y
    3c54:	99 81       	ldd	r25, Y+1	; 0x01
    3c56:	fc 01       	movw	r30, r24
    3c58:	c5 90       	lpm	r12, Z+
    3c5a:	d4 90       	lpm	r13, Z+
    3c5c:	c1 14       	cp	r12, r1
    3c5e:	d1 04       	cpc	r13, r1
    3c60:	61 f1       	breq	.+88     	; 0x3cba <_sensorInit_+0x80>
    3c62:	fc 01       	movw	r30, r24
    3c64:	34 96       	adiw	r30, 0x04	; 4
    3c66:	65 91       	lpm	r22, Z+
    3c68:	74 91       	lpm	r23, Z+
    3c6a:	61 15       	cp	r22, r1
    3c6c:	71 05       	cpc	r23, r1
    3c6e:	11 f1       	breq	.+68     	; 0x3cb4 <_sensorInit_+0x7a>
    3c70:	80 91 19 0c 	lds	r24, 0x0C19
    3c74:	90 91 1a 0c 	lds	r25, 0x0C1A
    3c78:	9b 01       	movw	r18, r22
    3c7a:	40 e0       	ldi	r20, 0x00	; 0
    3c7c:	50 e0       	ldi	r21, 0x00	; 0
    3c7e:	89 2b       	or	r24, r25
    3c80:	29 f4       	brne	.+10     	; 0x3c8c <_sensorInit_+0x52>
    3c82:	ca 01       	movw	r24, r20
    3c84:	b9 01       	movw	r22, r18
    3c86:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <delay_ms>
    3c8a:	14 c0       	rjmp	.+40     	; 0x3cb4 <_sensorInit_+0x7a>
    3c8c:	ca 01       	movw	r24, r20
    3c8e:	b9 01       	movw	r22, r18
    3c90:	28 ee       	ldi	r18, 0xE8	; 232
    3c92:	33 e0       	ldi	r19, 0x03	; 3
    3c94:	40 e0       	ldi	r20, 0x00	; 0
    3c96:	50 e0       	ldi	r21, 0x00	; 0
    3c98:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__mulsi3>
    3c9c:	7b 01       	movw	r14, r22
    3c9e:	8c 01       	movw	r16, r24
    3ca0:	60 e0       	ldi	r22, 0x00	; 0
    3ca2:	70 e0       	ldi	r23, 0x00	; 0
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	a8 01       	movw	r20, r16
    3caa:	97 01       	movw	r18, r14
    3cac:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <clockHasElapsed>
    3cb0:	88 23       	and	r24, r24
    3cb2:	b1 f3       	breq	.-20     	; 0x3ca0 <_sensorInit_+0x66>
    3cb4:	ce 01       	movw	r24, r28
    3cb6:	f6 01       	movw	r30, r12
    3cb8:	09 95       	icall
    3cba:	8f ef       	ldi	r24, 0xFF	; 255
    3cbc:	8e 83       	std	Y+6, r24	; 0x06
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	ff 90       	pop	r15
    3cc8:	ef 90       	pop	r14
    3cca:	df 90       	pop	r13
    3ccc:	cf 90       	pop	r12
    3cce:	08 95       	ret

00003cd0 <_uartStartXmit>:
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	17 96       	adiw	r26, 0x07	; 7
    3cd4:	8d 91       	ld	r24, X+
    3cd6:	9c 91       	ld	r25, X
    3cd8:	18 97       	sbiw	r26, 0x08	; 8
    3cda:	02 96       	adiw	r24, 0x02	; 2
    3cdc:	fc 01       	movw	r30, r24
    3cde:	25 91       	lpm	r18, Z+
    3ce0:	34 91       	lpm	r19, Z+
    3ce2:	cd 01       	movw	r24, r26
    3ce4:	f9 01       	movw	r30, r18
    3ce6:	09 95       	icall
    3ce8:	08 95       	ret

00003cea <_uartTransmitBlockStart>:
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	ec 01       	movw	r28, r24
    3cf0:	8e 81       	ldd	r24, Y+6	; 0x06
    3cf2:	8e 7f       	andi	r24, 0xFE	; 254
    3cf4:	8e 83       	std	Y+6, r24	; 0x06
    3cf6:	ec 89       	ldd	r30, Y+20	; 0x14
    3cf8:	fd 89       	ldd	r31, Y+21	; 0x15
    3cfa:	30 97       	sbiw	r30, 0x00	; 0
    3cfc:	21 f0       	breq	.+8      	; 0x3d06 <_uartTransmitBlockStart+0x1c>
    3cfe:	8e 89       	ldd	r24, Y+22	; 0x16
    3d00:	9f 89       	ldd	r25, Y+23	; 0x17
    3d02:	6f ef       	ldi	r22, 0xFF	; 255
    3d04:	09 95       	icall
    3d06:	ef 81       	ldd	r30, Y+7	; 0x07
    3d08:	f8 85       	ldd	r31, Y+8	; 0x08
    3d0a:	38 96       	adiw	r30, 0x08	; 8
    3d0c:	25 91       	lpm	r18, Z+
    3d0e:	34 91       	lpm	r19, Z+
    3d10:	21 15       	cp	r18, r1
    3d12:	31 05       	cpc	r19, r1
    3d14:	19 f0       	breq	.+6      	; 0x3d1c <_uartTransmitBlockStart+0x32>
    3d16:	ce 01       	movw	r24, r28
    3d18:	f9 01       	movw	r30, r18
    3d1a:	09 95       	icall
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	08 95       	ret

00003d22 <_uartTransmitBlockEnd>:
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	ec 01       	movw	r28, r24
    3d28:	8e 81       	ldd	r24, Y+6	; 0x06
    3d2a:	81 60       	ori	r24, 0x01	; 1
    3d2c:	8e 83       	std	Y+6, r24	; 0x06
    3d2e:	ef 81       	ldd	r30, Y+7	; 0x07
    3d30:	f8 85       	ldd	r31, Y+8	; 0x08
    3d32:	3a 96       	adiw	r30, 0x0a	; 10
    3d34:	25 91       	lpm	r18, Z+
    3d36:	34 91       	lpm	r19, Z+
    3d38:	21 15       	cp	r18, r1
    3d3a:	31 05       	cpc	r19, r1
    3d3c:	19 f0       	breq	.+6      	; 0x3d44 <_uartTransmitBlockEnd+0x22>
    3d3e:	ce 01       	movw	r24, r28
    3d40:	f9 01       	movw	r30, r18
    3d42:	09 95       	icall
    3d44:	ec 89       	ldd	r30, Y+20	; 0x14
    3d46:	fd 89       	ldd	r31, Y+21	; 0x15
    3d48:	30 97       	sbiw	r30, 0x00	; 0
    3d4a:	21 f0       	breq	.+8      	; 0x3d54 <_uartTransmitBlockEnd+0x32>
    3d4c:	8e 89       	ldd	r24, Y+22	; 0x16
    3d4e:	9f 89       	ldd	r25, Y+23	; 0x17
    3d50:	60 e0       	ldi	r22, 0x00	; 0
    3d52:	09 95       	icall
    3d54:	df 91       	pop	r29
    3d56:	cf 91       	pop	r28
    3d58:	08 95       	ret

00003d5a <_uartSetBaudRate>:
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	17 96       	adiw	r26, 0x07	; 7
    3d5e:	8d 91       	ld	r24, X+
    3d60:	9c 91       	ld	r25, X
    3d62:	18 97       	sbiw	r26, 0x08	; 8
    3d64:	fc 01       	movw	r30, r24
    3d66:	25 91       	lpm	r18, Z+
    3d68:	34 91       	lpm	r19, Z+
    3d6a:	cd 01       	movw	r24, r26
    3d6c:	f9 01       	movw	r30, r18
    3d6e:	09 95       	icall
    3d70:	08 95       	ret

00003d72 <_uartOff>:
    3d72:	dc 01       	movw	r26, r24
    3d74:	17 96       	adiw	r26, 0x07	; 7
    3d76:	ed 91       	ld	r30, X+
    3d78:	fc 91       	ld	r31, X
    3d7a:	18 97       	sbiw	r26, 0x08	; 8
    3d7c:	36 96       	adiw	r30, 0x06	; 6
    3d7e:	25 91       	lpm	r18, Z+
    3d80:	34 91       	lpm	r19, Z+
    3d82:	9f b7       	in	r25, 0x3f	; 63
    3d84:	78 94       	sei
    3d86:	16 96       	adiw	r26, 0x06	; 6
    3d88:	8c 91       	ld	r24, X
    3d8a:	16 97       	sbiw	r26, 0x06	; 6
    3d8c:	80 ff       	sbrs	r24, 0
    3d8e:	fb cf       	rjmp	.-10     	; 0x3d86 <_uartOff+0x14>
    3d90:	9f bf       	out	0x3f, r25	; 63
    3d92:	cd 01       	movw	r24, r26
    3d94:	f9 01       	movw	r30, r18
    3d96:	09 95       	icall
    3d98:	08 95       	ret

00003d9a <__uartReceiveBufferIsEmpty>:
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	ed 91       	ld	r30, X+
    3d9e:	fc 91       	ld	r31, X
    3da0:	11 97       	sbiw	r26, 0x01	; 1
    3da2:	30 97       	sbiw	r30, 0x00	; 0
    3da4:	59 f0       	breq	.+22     	; 0x3dbc <__uartReceiveBufferIsEmpty+0x22>
    3da6:	2f b7       	in	r18, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	84 81       	ldd	r24, Z+4	; 0x04
    3dac:	95 81       	ldd	r25, Z+5	; 0x05
    3dae:	89 2b       	or	r24, r25
    3db0:	11 f0       	breq	.+4      	; 0x3db6 <__uartReceiveBufferIsEmpty+0x1c>
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	01 c0       	rjmp	.+2      	; 0x3db8 <__uartReceiveBufferIsEmpty+0x1e>
    3db6:	8f ef       	ldi	r24, 0xFF	; 255
    3db8:	2f bf       	out	0x3f, r18	; 63
    3dba:	08 95       	ret
    3dbc:	2f b7       	in	r18, 0x3f	; 63
    3dbe:	f8 94       	cli
    3dc0:	19 96       	adiw	r26, 0x09	; 9
    3dc2:	8d 91       	ld	r24, X+
    3dc4:	9c 91       	ld	r25, X
    3dc6:	1a 97       	sbiw	r26, 0x0a	; 10
    3dc8:	8f 5f       	subi	r24, 0xFF	; 255
    3dca:	9f 4f       	sbci	r25, 0xFF	; 255
    3dcc:	11 f0       	breq	.+4      	; 0x3dd2 <__uartReceiveBufferIsEmpty+0x38>
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	01 c0       	rjmp	.+2      	; 0x3dd4 <__uartReceiveBufferIsEmpty+0x3a>
    3dd2:	8f ef       	ldi	r24, 0xFF	; 255
    3dd4:	2f bf       	out	0x3f, r18	; 63
    3dd6:	08 95       	ret

00003dd8 <__uartFlushReceiveBuffer>:
    3dd8:	fc 01       	movw	r30, r24
    3dda:	80 81       	ld	r24, Z
    3ddc:	91 81       	ldd	r25, Z+1	; 0x01
    3dde:	00 97       	sbiw	r24, 0x00	; 0
    3de0:	19 f0       	breq	.+6      	; 0x3de8 <__uartFlushReceiveBuffer+0x10>
    3de2:	0e 94 a0 20 	call	0x4140	; 0x4140 <bufferFlush>
    3de6:	08 95       	ret
    3de8:	2f b7       	in	r18, 0x3f	; 63
    3dea:	f8 94       	cli
    3dec:	8f ef       	ldi	r24, 0xFF	; 255
    3dee:	9f ef       	ldi	r25, 0xFF	; 255
    3df0:	92 87       	std	Z+10, r25	; 0x0a
    3df2:	81 87       	std	Z+9, r24	; 0x09
    3df4:	2f bf       	out	0x3f, r18	; 63
    3df6:	08 95       	ret

00003df8 <_uartInit>:
    3df8:	ef 92       	push	r14
    3dfa:	ff 92       	push	r15
    3dfc:	0f 93       	push	r16
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	ec 01       	movw	r28, r24
    3e06:	7a 01       	movw	r14, r20
    3e08:	8b 01       	movw	r16, r22
    3e0a:	f8 94       	cli
    3e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e0e:	88 23       	and	r24, r24
    3e10:	81 f0       	breq	.+32     	; 0x3e32 <_uartInit+0x3a>
    3e12:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e14:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1a:	28 17       	cp	r18, r24
    3e1c:	39 07       	cpc	r19, r25
    3e1e:	21 f0       	breq	.+8      	; 0x3e28 <_uartInit+0x30>
    3e20:	c9 01       	movw	r24, r18
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	0e 94 77 21 	call	0x42ee	; 0x42ee <pin_make_input>
    3e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e2c:	6f ef       	ldi	r22, 0xFF	; 255
    3e2e:	0e 94 77 21 	call	0x42ee	; 0x42ee <pin_make_input>
    3e32:	8e 81       	ldd	r24, Y+6	; 0x06
    3e34:	81 60       	ori	r24, 0x01	; 1
    3e36:	8e 83       	std	Y+6, r24	; 0x06
    3e38:	8e 81       	ldd	r24, Y+6	; 0x06
    3e3a:	8b 7f       	andi	r24, 0xFB	; 251
    3e3c:	8e 83       	std	Y+6, r24	; 0x06
    3e3e:	8e 81       	ldd	r24, Y+6	; 0x06
    3e40:	8d 7f       	andi	r24, 0xFD	; 253
    3e42:	8e 83       	std	Y+6, r24	; 0x06
    3e44:	8f 81       	ldd	r24, Y+7	; 0x07
    3e46:	98 85       	ldd	r25, Y+8	; 0x08
    3e48:	04 96       	adiw	r24, 0x04	; 4
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	25 91       	lpm	r18, Z+
    3e4e:	34 91       	lpm	r19, Z+
    3e50:	ce 01       	movw	r24, r28
    3e52:	b8 01       	movw	r22, r16
    3e54:	a7 01       	movw	r20, r14
    3e56:	f9 01       	movw	r30, r18
    3e58:	09 95       	icall
    3e5a:	78 94       	sei
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	1f 91       	pop	r17
    3e62:	0f 91       	pop	r16
    3e64:	ff 90       	pop	r15
    3e66:	ef 90       	pop	r14
    3e68:	08 95       	ret

00003e6a <_uartSendByte>:
    3e6a:	0f 93       	push	r16
    3e6c:	1f 93       	push	r17
    3e6e:	cf 93       	push	r28
    3e70:	df 93       	push	r29
    3e72:	ec 01       	movw	r28, r24
    3e74:	06 2f       	mov	r16, r22
    3e76:	8a 81       	ldd	r24, Y+2	; 0x02
    3e78:	9b 81       	ldd	r25, Y+3	; 0x03
    3e7a:	89 2b       	or	r24, r25
    3e7c:	19 f4       	brne	.+6      	; 0x3e84 <_uartSendByte+0x1a>
    3e7e:	19 c0       	rjmp	.+50     	; 0x3eb2 <_uartSendByte+0x48>
    3e80:	0e 94 a9 20 	call	0x4152	; 0x4152 <breathe>
    3e84:	8a 81       	ldd	r24, Y+2	; 0x02
    3e86:	9b 81       	ldd	r25, Y+3	; 0x03
    3e88:	0e 94 98 20 	call	0x4130	; 0x4130 <bufferIsFull>
    3e8c:	88 23       	and	r24, r24
    3e8e:	c1 f7       	brne	.-16     	; 0x3e80 <_uartSendByte+0x16>
    3e90:	1f b7       	in	r17, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	8e 81       	ldd	r24, Y+6	; 0x06
    3e96:	81 fd       	sbrc	r24, 1
    3e98:	04 c0       	rjmp	.+8      	; 0x3ea2 <_uartSendByte+0x38>
    3e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    3e9c:	82 60       	ori	r24, 0x02	; 2
    3e9e:	8e 83       	std	Y+6, r24	; 0x06
    3ea0:	0d c0       	rjmp	.+26     	; 0x3ebc <_uartSendByte+0x52>
    3ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea6:	60 2f       	mov	r22, r16
    3ea8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bufferPut>
    3eac:	0e c0       	rjmp	.+28     	; 0x3eca <_uartSendByte+0x60>
    3eae:	0e 94 a9 20 	call	0x4152	; 0x4152 <breathe>
    3eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    3eb4:	80 ff       	sbrs	r24, 0
    3eb6:	fb cf       	rjmp	.-10     	; 0x3eae <_uartSendByte+0x44>
    3eb8:	1f b7       	in	r17, 0x3f	; 63
    3eba:	f8 94       	cli
    3ebc:	ce 01       	movw	r24, r28
    3ebe:	0e 94 75 1e 	call	0x3cea	; 0x3cea <_uartTransmitBlockStart>
    3ec2:	ce 01       	movw	r24, r28
    3ec4:	60 2f       	mov	r22, r16
    3ec6:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_uartStartXmit>
    3eca:	1f bf       	out	0x3f, r17	; 63
    3ecc:	80 2f       	mov	r24, r16
    3ece:	df 91       	pop	r29
    3ed0:	cf 91       	pop	r28
    3ed2:	1f 91       	pop	r17
    3ed4:	0f 91       	pop	r16
    3ed6:	08 95       	ret

00003ed8 <_uartSendBuffer>:
    3ed8:	ef 92       	push	r14
    3eda:	ff 92       	push	r15
    3edc:	0f 93       	push	r16
    3ede:	1f 93       	push	r17
    3ee0:	cf 93       	push	r28
    3ee2:	df 93       	push	r29
    3ee4:	7c 01       	movw	r14, r24
    3ee6:	8b 01       	movw	r16, r22
    3ee8:	ea 01       	movw	r28, r20
    3eea:	07 c0       	rjmp	.+14     	; 0x3efa <_uartSendBuffer+0x22>
    3eec:	f8 01       	movw	r30, r16
    3eee:	61 91       	ld	r22, Z+
    3ef0:	8f 01       	movw	r16, r30
    3ef2:	c7 01       	movw	r24, r14
    3ef4:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_uartSendByte>
    3ef8:	21 97       	sbiw	r28, 0x01	; 1
    3efa:	20 97       	sbiw	r28, 0x00	; 0
    3efc:	b9 f7       	brne	.-18     	; 0x3eec <_uartSendBuffer+0x14>
    3efe:	df 91       	pop	r29
    3f00:	cf 91       	pop	r28
    3f02:	1f 91       	pop	r17
    3f04:	0f 91       	pop	r16
    3f06:	ff 90       	pop	r15
    3f08:	ef 90       	pop	r14
    3f0a:	08 95       	ret

00003f0c <__uartGetByte>:
    3f0c:	df 93       	push	r29
    3f0e:	cf 93       	push	r28
    3f10:	0f 92       	push	r0
    3f12:	cd b7       	in	r28, 0x3d	; 61
    3f14:	de b7       	in	r29, 0x3e	; 62
    3f16:	fc 01       	movw	r30, r24
    3f18:	80 81       	ld	r24, Z
    3f1a:	91 81       	ldd	r25, Z+1	; 0x01
    3f1c:	00 97       	sbiw	r24, 0x00	; 0
    3f1e:	71 f0       	breq	.+28     	; 0x3f3c <__uartGetByte+0x30>
    3f20:	be 01       	movw	r22, r28
    3f22:	6f 5f       	subi	r22, 0xFF	; 255
    3f24:	7f 4f       	sbci	r23, 0xFF	; 255
    3f26:	0e 94 27 20 	call	0x404e	; 0x404e <bufferGet>
    3f2a:	88 23       	and	r24, r24
    3f2c:	19 f4       	brne	.+6      	; 0x3f34 <__uartGetByte+0x28>
    3f2e:	4f ef       	ldi	r20, 0xFF	; 255
    3f30:	5f ef       	ldi	r21, 0xFF	; 255
    3f32:	0d c0       	rjmp	.+26     	; 0x3f4e <__uartGetByte+0x42>
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	48 2f       	mov	r20, r24
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	09 c0       	rjmp	.+18     	; 0x3f4e <__uartGetByte+0x42>
    3f3c:	2f b7       	in	r18, 0x3f	; 63
    3f3e:	f8 94       	cli
    3f40:	41 85       	ldd	r20, Z+9	; 0x09
    3f42:	52 85       	ldd	r21, Z+10	; 0x0a
    3f44:	8f ef       	ldi	r24, 0xFF	; 255
    3f46:	9f ef       	ldi	r25, 0xFF	; 255
    3f48:	92 87       	std	Z+10, r25	; 0x0a
    3f4a:	81 87       	std	Z+9, r24	; 0x09
    3f4c:	2f bf       	out	0x3f, r18	; 63
    3f4e:	ca 01       	movw	r24, r20
    3f50:	0f 90       	pop	r0
    3f52:	cf 91       	pop	r28
    3f54:	df 91       	pop	r29
    3f56:	08 95       	ret

00003f58 <__uartTransmitService>:
    3f58:	ef 92       	push	r14
    3f5a:	ff 92       	push	r15
    3f5c:	1f 93       	push	r17
    3f5e:	df 93       	push	r29
    3f60:	cf 93       	push	r28
    3f62:	0f 92       	push	r0
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	7c 01       	movw	r14, r24
    3f6a:	fc 01       	movw	r30, r24
    3f6c:	86 81       	ldd	r24, Z+6	; 0x06
    3f6e:	81 ff       	sbrs	r24, 1
    3f70:	19 c0       	rjmp	.+50     	; 0x3fa4 <__uartTransmitService+0x4c>
    3f72:	1f b7       	in	r17, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	f7 01       	movw	r30, r14
    3f78:	82 81       	ldd	r24, Z+2	; 0x02
    3f7a:	93 81       	ldd	r25, Z+3	; 0x03
    3f7c:	be 01       	movw	r22, r28
    3f7e:	6f 5f       	subi	r22, 0xFF	; 255
    3f80:	7f 4f       	sbci	r23, 0xFF	; 255
    3f82:	0e 94 27 20 	call	0x404e	; 0x404e <bufferGet>
    3f86:	88 23       	and	r24, r24
    3f88:	29 f0       	breq	.+10     	; 0x3f94 <__uartTransmitService+0x3c>
    3f8a:	c7 01       	movw	r24, r14
    3f8c:	69 81       	ldd	r22, Y+1	; 0x01
    3f8e:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_uartStartXmit>
    3f92:	0d c0       	rjmp	.+26     	; 0x3fae <__uartTransmitService+0x56>
    3f94:	c7 01       	movw	r24, r14
    3f96:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_uartTransmitBlockEnd>
    3f9a:	f7 01       	movw	r30, r14
    3f9c:	86 81       	ldd	r24, Z+6	; 0x06
    3f9e:	8d 7f       	andi	r24, 0xFD	; 253
    3fa0:	86 83       	std	Z+6, r24	; 0x06
    3fa2:	05 c0       	rjmp	.+10     	; 0x3fae <__uartTransmitService+0x56>
    3fa4:	1f b7       	in	r17, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	c7 01       	movw	r24, r14
    3faa:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_uartTransmitBlockEnd>
    3fae:	1f bf       	out	0x3f, r17	; 63
    3fb0:	0f 90       	pop	r0
    3fb2:	cf 91       	pop	r28
    3fb4:	df 91       	pop	r29
    3fb6:	1f 91       	pop	r17
    3fb8:	ff 90       	pop	r15
    3fba:	ef 90       	pop	r14
    3fbc:	08 95       	ret

00003fbe <__uartReceiveService>:
    3fbe:	cf 93       	push	r28
    3fc0:	df 93       	push	r29
    3fc2:	ec 01       	movw	r28, r24
    3fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3fc6:	9d 81       	ldd	r25, Y+5	; 0x05
    3fc8:	89 2b       	or	r24, r25
    3fca:	29 f0       	breq	.+10     	; 0x3fd6 <__uartReceiveService+0x18>
    3fcc:	ec 81       	ldd	r30, Y+4	; 0x04
    3fce:	fd 81       	ldd	r31, Y+5	; 0x05
    3fd0:	86 2f       	mov	r24, r22
    3fd2:	09 95       	icall
    3fd4:	19 c0       	rjmp	.+50     	; 0x4008 <__uartReceiveService+0x4a>
    3fd6:	88 81       	ld	r24, Y
    3fd8:	99 81       	ldd	r25, Y+1	; 0x01
    3fda:	00 97       	sbiw	r24, 0x00	; 0
    3fdc:	29 f0       	breq	.+10     	; 0x3fe8 <__uartReceiveService+0x2a>
    3fde:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bufferPut>
    3fe2:	88 23       	and	r24, r24
    3fe4:	89 f4       	brne	.+34     	; 0x4008 <__uartReceiveService+0x4a>
    3fe6:	0a c0       	rjmp	.+20     	; 0x3ffc <__uartReceiveService+0x3e>
    3fe8:	89 85       	ldd	r24, Y+9	; 0x09
    3fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fec:	8f 5f       	subi	r24, 0xFF	; 255
    3fee:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff0:	29 f4       	brne	.+10     	; 0x3ffc <__uartReceiveService+0x3e>
    3ff2:	86 2f       	mov	r24, r22
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	9a 87       	std	Y+10, r25	; 0x0a
    3ff8:	89 87       	std	Y+9, r24	; 0x09
    3ffa:	06 c0       	rjmp	.+12     	; 0x4008 <__uartReceiveService+0x4a>
    3ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ffe:	84 60       	ori	r24, 0x04	; 4
    4000:	8e 83       	std	Y+6, r24	; 0x06
    4002:	85 ef       	ldi	r24, 0xF5	; 245
    4004:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    4008:	df 91       	pop	r29
    400a:	cf 91       	pop	r28
    400c:	08 95       	ret

0000400e <a2dReadMv>:
    400e:	0f 93       	push	r16
    4010:	1f 93       	push	r17
    4012:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <a2dConvert10bit>
    4016:	e2 e6       	ldi	r30, 0x62	; 98
    4018:	f4 e0       	ldi	r31, 0x04	; 4
    401a:	05 91       	lpm	r16, Z+
    401c:	14 91       	lpm	r17, Z+
    401e:	60 e0       	ldi	r22, 0x00	; 0
    4020:	70 e0       	ldi	r23, 0x00	; 0
    4022:	4f ef       	ldi	r20, 0xFF	; 255
    4024:	53 e0       	ldi	r21, 0x03	; 3
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	0e 94 21 21 	call	0x4242	; 0x4242 <interpolateU>
    402e:	1f 91       	pop	r17
    4030:	0f 91       	pop	r16
    4032:	08 95       	ret

00004034 <bufferInit>:
    4034:	fc 01       	movw	r30, r24
    4036:	8f b7       	in	r24, 0x3f	; 63
    4038:	f8 94       	cli
    403a:	71 83       	std	Z+1, r23	; 0x01
    403c:	60 83       	st	Z, r22
    403e:	53 83       	std	Z+3, r21	; 0x03
    4040:	42 83       	std	Z+2, r20	; 0x02
    4042:	15 82       	std	Z+5, r1	; 0x05
    4044:	14 82       	std	Z+4, r1	; 0x04
    4046:	17 82       	std	Z+7, r1	; 0x07
    4048:	16 82       	std	Z+6, r1	; 0x06
    404a:	8f bf       	out	0x3f, r24	; 63
    404c:	08 95       	ret

0000404e <bufferGet>:
    404e:	cf 93       	push	r28
    4050:	df 93       	push	r29
    4052:	ec 01       	movw	r28, r24
    4054:	db 01       	movw	r26, r22
    4056:	2f b7       	in	r18, 0x3f	; 63
    4058:	f8 94       	cli
    405a:	00 97       	sbiw	r24, 0x00	; 0
    405c:	01 f1       	breq	.+64     	; 0x409e <bufferGet+0x50>
    405e:	8a 81       	ldd	r24, Y+2	; 0x02
    4060:	9b 81       	ldd	r25, Y+3	; 0x03
    4062:	89 2b       	or	r24, r25
    4064:	e1 f0       	breq	.+56     	; 0x409e <bufferGet+0x50>
    4066:	8c 81       	ldd	r24, Y+4	; 0x04
    4068:	9d 81       	ldd	r25, Y+5	; 0x05
    406a:	89 2b       	or	r24, r25
    406c:	c1 f0       	breq	.+48     	; 0x409e <bufferGet+0x50>
    406e:	e8 81       	ld	r30, Y
    4070:	f9 81       	ldd	r31, Y+1	; 0x01
    4072:	8e 81       	ldd	r24, Y+6	; 0x06
    4074:	9f 81       	ldd	r25, Y+7	; 0x07
    4076:	e8 0f       	add	r30, r24
    4078:	f9 1f       	adc	r31, r25
    407a:	80 81       	ld	r24, Z
    407c:	8c 93       	st	X, r24
    407e:	8e 81       	ldd	r24, Y+6	; 0x06
    4080:	9f 81       	ldd	r25, Y+7	; 0x07
    4082:	6a 81       	ldd	r22, Y+2	; 0x02
    4084:	7b 81       	ldd	r23, Y+3	; 0x03
    4086:	01 96       	adiw	r24, 0x01	; 1
    4088:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <__udivmodhi4>
    408c:	9f 83       	std	Y+7, r25	; 0x07
    408e:	8e 83       	std	Y+6, r24	; 0x06
    4090:	8c 81       	ldd	r24, Y+4	; 0x04
    4092:	9d 81       	ldd	r25, Y+5	; 0x05
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	9d 83       	std	Y+5, r25	; 0x05
    4098:	8c 83       	std	Y+4, r24	; 0x04
    409a:	8f ef       	ldi	r24, 0xFF	; 255
    409c:	01 c0       	rjmp	.+2      	; 0x40a0 <bufferGet+0x52>
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	2f bf       	out	0x3f, r18	; 63
    40a2:	df 91       	pop	r29
    40a4:	cf 91       	pop	r28
    40a6:	08 95       	ret

000040a8 <bufferPut>:
    40a8:	1f 93       	push	r17
    40aa:	cf 93       	push	r28
    40ac:	df 93       	push	r29
    40ae:	ec 01       	movw	r28, r24
    40b0:	46 2f       	mov	r20, r22
    40b2:	1f b7       	in	r17, 0x3f	; 63
    40b4:	f8 94       	cli
    40b6:	2c 81       	ldd	r18, Y+4	; 0x04
    40b8:	3d 81       	ldd	r19, Y+5	; 0x05
    40ba:	6a 81       	ldd	r22, Y+2	; 0x02
    40bc:	7b 81       	ldd	r23, Y+3	; 0x03
    40be:	26 17       	cp	r18, r22
    40c0:	37 07       	cpc	r19, r23
    40c2:	10 f0       	brcs	.+4      	; 0x40c8 <bufferPut+0x20>
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	11 c0       	rjmp	.+34     	; 0x40ea <bufferPut+0x42>
    40c8:	8e 81       	ldd	r24, Y+6	; 0x06
    40ca:	9f 81       	ldd	r25, Y+7	; 0x07
    40cc:	82 0f       	add	r24, r18
    40ce:	93 1f       	adc	r25, r19
    40d0:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <__udivmodhi4>
    40d4:	e8 81       	ld	r30, Y
    40d6:	f9 81       	ldd	r31, Y+1	; 0x01
    40d8:	e8 0f       	add	r30, r24
    40da:	f9 1f       	adc	r31, r25
    40dc:	40 83       	st	Z, r20
    40de:	8c 81       	ldd	r24, Y+4	; 0x04
    40e0:	9d 81       	ldd	r25, Y+5	; 0x05
    40e2:	01 96       	adiw	r24, 0x01	; 1
    40e4:	9d 83       	std	Y+5, r25	; 0x05
    40e6:	8c 83       	std	Y+4, r24	; 0x04
    40e8:	8f ef       	ldi	r24, 0xFF	; 255
    40ea:	1f bf       	out	0x3f, r17	; 63
    40ec:	df 91       	pop	r29
    40ee:	cf 91       	pop	r28
    40f0:	1f 91       	pop	r17
    40f2:	08 95       	ret

000040f4 <bufferFreeSpace>:
    40f4:	fc 01       	movw	r30, r24
    40f6:	4f b7       	in	r20, 0x3f	; 63
    40f8:	f8 94       	cli
    40fa:	00 97       	sbiw	r24, 0x00	; 0
    40fc:	19 f4       	brne	.+6      	; 0x4104 <bufferFreeSpace+0x10>
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	06 c0       	rjmp	.+12     	; 0x4110 <bufferFreeSpace+0x1c>
    4104:	22 81       	ldd	r18, Z+2	; 0x02
    4106:	33 81       	ldd	r19, Z+3	; 0x03
    4108:	84 81       	ldd	r24, Z+4	; 0x04
    410a:	95 81       	ldd	r25, Z+5	; 0x05
    410c:	28 1b       	sub	r18, r24
    410e:	39 0b       	sbc	r19, r25
    4110:	4f bf       	out	0x3f, r20	; 63
    4112:	c9 01       	movw	r24, r18
    4114:	08 95       	ret

00004116 <bufferBytesUsed>:
    4116:	fc 01       	movw	r30, r24
    4118:	8f b7       	in	r24, 0x3f	; 63
    411a:	f8 94       	cli
    411c:	30 97       	sbiw	r30, 0x00	; 0
    411e:	19 f4       	brne	.+6      	; 0x4126 <bufferBytesUsed+0x10>
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	02 c0       	rjmp	.+4      	; 0x412a <bufferBytesUsed+0x14>
    4126:	24 81       	ldd	r18, Z+4	; 0x04
    4128:	35 81       	ldd	r19, Z+5	; 0x05
    412a:	8f bf       	out	0x3f, r24	; 63
    412c:	c9 01       	movw	r24, r18
    412e:	08 95       	ret

00004130 <bufferIsFull>:
    4130:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <bufferFreeSpace>
    4134:	89 2b       	or	r24, r25
    4136:	11 f0       	breq	.+4      	; 0x413c <bufferIsFull+0xc>
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	08 95       	ret
    413c:	8f ef       	ldi	r24, 0xFF	; 255
    413e:	08 95       	ret

00004140 <bufferFlush>:
    4140:	fc 01       	movw	r30, r24
    4142:	00 97       	sbiw	r24, 0x00	; 0
    4144:	29 f0       	breq	.+10     	; 0x4150 <bufferFlush+0x10>
    4146:	8f b7       	in	r24, 0x3f	; 63
    4148:	f8 94       	cli
    414a:	15 82       	std	Z+5, r1	; 0x05
    414c:	14 82       	std	Z+4, r1	; 0x04
    414e:	8f bf       	out	0x3f, r24	; 63
    4150:	08 95       	ret

00004152 <breathe>:
    4152:	8f b7       	in	r24, 0x3f	; 63
    4154:	78 94       	sei
	...
    4162:	00 00       	nop
    4164:	8f bf       	out	0x3f, r24	; 63
    4166:	08 95       	ret

00004168 <__portMaskSet>:
    4168:	9c 01       	movw	r18, r24
    416a:	fc 01       	movw	r30, r24
    416c:	a5 91       	lpm	r26, Z+
    416e:	b4 91       	lpm	r27, Z+
    4170:	2e 5f       	subi	r18, 0xFE	; 254
    4172:	3f 4f       	sbci	r19, 0xFF	; 255
    4174:	f9 01       	movw	r30, r18
    4176:	94 91       	lpm	r25, Z+
    4178:	8c 91       	ld	r24, X
    417a:	89 2b       	or	r24, r25
    417c:	8c 93       	st	X, r24
    417e:	08 95       	ret

00004180 <__portMaskGet>:
    4180:	9c 01       	movw	r18, r24
    4182:	fc 01       	movw	r30, r24
    4184:	a5 91       	lpm	r26, Z+
    4186:	b4 91       	lpm	r27, Z+
    4188:	2e 5f       	subi	r18, 0xFE	; 254
    418a:	3f 4f       	sbci	r19, 0xFF	; 255
    418c:	f9 01       	movw	r30, r18
    418e:	94 91       	lpm	r25, Z+
    4190:	8c 91       	ld	r24, X
    4192:	89 23       	and	r24, r25
    4194:	09 f0       	breq	.+2      	; 0x4198 <__portMaskGet+0x18>
    4196:	8f ef       	ldi	r24, 0xFF	; 255
    4198:	08 95       	ret

0000419a <__portMaskClear>:
    419a:	9c 01       	movw	r18, r24
    419c:	fc 01       	movw	r30, r24
    419e:	a5 91       	lpm	r26, Z+
    41a0:	b4 91       	lpm	r27, Z+
    41a2:	2e 5f       	subi	r18, 0xFE	; 254
    41a4:	3f 4f       	sbci	r19, 0xFF	; 255
    41a6:	f9 01       	movw	r30, r18
    41a8:	94 91       	lpm	r25, Z+
    41aa:	8c 91       	ld	r24, X
    41ac:	90 95       	com	r25
    41ae:	89 23       	and	r24, r25
    41b0:	8c 93       	st	X, r24
    41b2:	08 95       	ret

000041b4 <main>:
    41b4:	6f 92       	push	r6
    41b6:	7f 92       	push	r7
    41b8:	8f 92       	push	r8
    41ba:	9f 92       	push	r9
    41bc:	af 92       	push	r10
    41be:	bf 92       	push	r11
    41c0:	cf 92       	push	r12
    41c2:	df 92       	push	r13
    41c4:	ef 92       	push	r14
    41c6:	ff 92       	push	r15
    41c8:	0f 93       	push	r16
    41ca:	1f 93       	push	r17
    41cc:	0e 94 8b 09 	call	0x1316	; 0x1316 <configure_ports>
    41d0:	0e 94 46 09 	call	0x128c	; 0x128c <registerLED>
    41d4:	0e 94 b2 2b 	call	0x5764	; 0x5764 <initTimers>
    41d8:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <sysInitHardware>
    41dc:	0e 94 01 13 	call	0x2602	; 0x2602 <appInitHardware>
    41e0:	0e 94 49 2c 	call	0x5892	; 0x5892 <__clockInit>
    41e4:	0e 94 6f 28 	call	0x50de	; 0x50de <clockGetus>
    41e8:	5b 01       	movw	r10, r22
    41ea:	6c 01       	movw	r12, r24
    41ec:	0e 94 0a 13 	call	0x2614	; 0x2614 <appInitSoftware>
    41f0:	7b 01       	movw	r14, r22
    41f2:	8c 01       	movw	r16, r24
    41f4:	66 24       	eor	r6, r6
    41f6:	77 24       	eor	r7, r7
    41f8:	43 01       	movw	r8, r6
    41fa:	0e 94 a9 20 	call	0x4152	; 0x4152 <breathe>
    41fe:	e1 14       	cp	r14, r1
    4200:	f1 04       	cpc	r15, r1
    4202:	01 05       	cpc	r16, r1
    4204:	11 05       	cpc	r17, r1
    4206:	19 f4       	brne	.+6      	; 0x420e <main+0x5a>
    4208:	0a c0       	rjmp	.+20     	; 0x421e <main+0x6a>
    420a:	0e 94 a9 20 	call	0x4152	; 0x4152 <breathe>
    420e:	c6 01       	movw	r24, r12
    4210:	b5 01       	movw	r22, r10
    4212:	a8 01       	movw	r20, r16
    4214:	97 01       	movw	r18, r14
    4216:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <clockHasElapsed>
    421a:	88 23       	and	r24, r24
    421c:	b1 f3       	breq	.-20     	; 0x420a <main+0x56>
    421e:	0e 94 6f 28 	call	0x50de	; 0x50de <clockGetus>
    4222:	5b 01       	movw	r10, r22
    4224:	6c 01       	movw	r12, r24
    4226:	08 94       	sec
    4228:	61 1c       	adc	r6, r1
    422a:	71 1c       	adc	r7, r1
    422c:	81 1c       	adc	r8, r1
    422e:	91 1c       	adc	r9, r1
    4230:	c4 01       	movw	r24, r8
    4232:	b3 01       	movw	r22, r6
    4234:	a6 01       	movw	r20, r12
    4236:	95 01       	movw	r18, r10
    4238:	0e 94 b6 1c 	call	0x396c	; 0x396c <appControl>
    423c:	7b 01       	movw	r14, r22
    423e:	8c 01       	movw	r16, r24
    4240:	dc cf       	rjmp	.-72     	; 0x41fa <main+0x46>

00004242 <interpolateU>:
    4242:	4f 92       	push	r4
    4244:	5f 92       	push	r5
    4246:	6f 92       	push	r6
    4248:	7f 92       	push	r7
    424a:	8f 92       	push	r8
    424c:	9f 92       	push	r9
    424e:	af 92       	push	r10
    4250:	bf 92       	push	r11
    4252:	cf 92       	push	r12
    4254:	df 92       	push	r13
    4256:	ef 92       	push	r14
    4258:	ff 92       	push	r15
    425a:	0f 93       	push	r16
    425c:	1f 93       	push	r17
    425e:	2b 01       	movw	r4, r22
    4260:	5a 01       	movw	r10, r20
    4262:	39 01       	movw	r6, r18
    4264:	78 01       	movw	r14, r16
    4266:	e2 1a       	sub	r14, r18
    4268:	f3 0a       	sbc	r15, r19
    426a:	00 e0       	ldi	r16, 0x00	; 0
    426c:	10 e0       	ldi	r17, 0x00	; 0
    426e:	9c 01       	movw	r18, r24
    4270:	26 1b       	sub	r18, r22
    4272:	37 0b       	sbc	r19, r23
    4274:	44 27       	eor	r20, r20
    4276:	37 fd       	sbrc	r19, 7
    4278:	40 95       	com	r20
    427a:	54 2f       	mov	r21, r20
    427c:	c8 01       	movw	r24, r16
    427e:	b7 01       	movw	r22, r14
    4280:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__mulsi3>
    4284:	a4 18       	sub	r10, r4
    4286:	b5 08       	sbc	r11, r5
    4288:	cc 24       	eor	r12, r12
    428a:	b7 fc       	sbrc	r11, 7
    428c:	c0 94       	com	r12
    428e:	dc 2c       	mov	r13, r12
    4290:	a6 01       	movw	r20, r12
    4292:	95 01       	movw	r18, r10
    4294:	0e 94 16 38 	call	0x702c	; 0x702c <__divmodsi4>
    4298:	88 24       	eor	r8, r8
    429a:	99 24       	eor	r9, r9
    429c:	26 0d       	add	r18, r6
    429e:	37 1d       	adc	r19, r7
    42a0:	48 1d       	adc	r20, r8
    42a2:	59 1d       	adc	r21, r9
    42a4:	c9 01       	movw	r24, r18
    42a6:	1f 91       	pop	r17
    42a8:	0f 91       	pop	r16
    42aa:	ff 90       	pop	r15
    42ac:	ef 90       	pop	r14
    42ae:	df 90       	pop	r13
    42b0:	cf 90       	pop	r12
    42b2:	bf 90       	pop	r11
    42b4:	af 90       	pop	r10
    42b6:	9f 90       	pop	r9
    42b8:	8f 90       	pop	r8
    42ba:	7f 90       	pop	r7
    42bc:	6f 90       	pop	r6
    42be:	5f 90       	pop	r5
    42c0:	4f 90       	pop	r4
    42c2:	08 95       	ret

000042c4 <pin_is_high>:
    42c4:	9c 01       	movw	r18, r24
    42c6:	00 97       	sbiw	r24, 0x00	; 0
    42c8:	81 f0       	breq	.+32     	; 0x42ea <pin_is_high+0x26>
    42ca:	fc 01       	movw	r30, r24
    42cc:	85 91       	lpm	r24, Z+
    42ce:	94 91       	lpm	r25, Z+
    42d0:	04 96       	adiw	r24, 0x04	; 4
    42d2:	fc 01       	movw	r30, r24
    42d4:	a5 91       	lpm	r26, Z+
    42d6:	b4 91       	lpm	r27, Z+
    42d8:	2e 5f       	subi	r18, 0xFE	; 254
    42da:	3f 4f       	sbci	r19, 0xFF	; 255
    42dc:	f9 01       	movw	r30, r18
    42de:	94 91       	lpm	r25, Z+
    42e0:	8c 91       	ld	r24, X
    42e2:	89 23       	and	r24, r25
    42e4:	11 f0       	breq	.+4      	; 0x42ea <pin_is_high+0x26>
    42e6:	8f ef       	ldi	r24, 0xFF	; 255
    42e8:	08 95       	ret
    42ea:	80 e0       	ldi	r24, 0x00	; 0
    42ec:	08 95       	ret

000042ee <pin_make_input>:
    42ee:	cf 93       	push	r28
    42f0:	df 93       	push	r29
    42f2:	9c 01       	movw	r18, r24
    42f4:	00 97       	sbiw	r24, 0x00	; 0
    42f6:	f9 f0       	breq	.+62     	; 0x4336 <pin_make_input+0x48>
    42f8:	fc 01       	movw	r30, r24
    42fa:	45 91       	lpm	r20, Z+
    42fc:	54 91       	lpm	r21, Z+
    42fe:	ca 01       	movw	r24, r20
    4300:	02 96       	adiw	r24, 0x02	; 2
    4302:	fc 01       	movw	r30, r24
    4304:	a5 91       	lpm	r26, Z+
    4306:	b4 91       	lpm	r27, Z+
    4308:	fa 01       	movw	r30, r20
    430a:	c5 91       	lpm	r28, Z+
    430c:	d4 91       	lpm	r29, Z+
    430e:	2e 5f       	subi	r18, 0xFE	; 254
    4310:	3f 4f       	sbci	r19, 0xFF	; 255
    4312:	f9 01       	movw	r30, r18
    4314:	94 91       	lpm	r25, Z+
    4316:	3f b7       	in	r19, 0x3f	; 63
    4318:	f8 94       	cli
    431a:	8c 91       	ld	r24, X
    431c:	29 2f       	mov	r18, r25
    431e:	20 95       	com	r18
    4320:	82 23       	and	r24, r18
    4322:	8c 93       	st	X, r24
    4324:	66 23       	and	r22, r22
    4326:	19 f0       	breq	.+6      	; 0x432e <pin_make_input+0x40>
    4328:	88 81       	ld	r24, Y
    432a:	89 2b       	or	r24, r25
    432c:	02 c0       	rjmp	.+4      	; 0x4332 <pin_make_input+0x44>
    432e:	88 81       	ld	r24, Y
    4330:	82 23       	and	r24, r18
    4332:	88 83       	st	Y, r24
    4334:	3f bf       	out	0x3f, r19	; 63
    4336:	df 91       	pop	r29
    4338:	cf 91       	pop	r28
    433a:	08 95       	ret

0000433c <pin_make_output>:
    433c:	cf 93       	push	r28
    433e:	df 93       	push	r29
    4340:	9c 01       	movw	r18, r24
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	f9 f0       	breq	.+62     	; 0x4384 <pin_make_output+0x48>
    4346:	fc 01       	movw	r30, r24
    4348:	45 91       	lpm	r20, Z+
    434a:	54 91       	lpm	r21, Z+
    434c:	ca 01       	movw	r24, r20
    434e:	02 96       	adiw	r24, 0x02	; 2
    4350:	fc 01       	movw	r30, r24
    4352:	c5 91       	lpm	r28, Z+
    4354:	d4 91       	lpm	r29, Z+
    4356:	fa 01       	movw	r30, r20
    4358:	a5 91       	lpm	r26, Z+
    435a:	b4 91       	lpm	r27, Z+
    435c:	2e 5f       	subi	r18, 0xFE	; 254
    435e:	3f 4f       	sbci	r19, 0xFF	; 255
    4360:	f9 01       	movw	r30, r18
    4362:	24 91       	lpm	r18, Z+
    4364:	3f b7       	in	r19, 0x3f	; 63
    4366:	f8 94       	cli
    4368:	66 23       	and	r22, r22
    436a:	19 f0       	breq	.+6      	; 0x4372 <pin_make_output+0x36>
    436c:	8c 91       	ld	r24, X
    436e:	82 2b       	or	r24, r18
    4370:	04 c0       	rjmp	.+8      	; 0x437a <pin_make_output+0x3e>
    4372:	8c 91       	ld	r24, X
    4374:	92 2f       	mov	r25, r18
    4376:	90 95       	com	r25
    4378:	89 23       	and	r24, r25
    437a:	8c 93       	st	X, r24
    437c:	88 81       	ld	r24, Y
    437e:	82 2b       	or	r24, r18
    4380:	88 83       	st	Y, r24
    4382:	3f bf       	out	0x3f, r19	; 63
    4384:	df 91       	pop	r29
    4386:	cf 91       	pop	r28
    4388:	08 95       	ret

0000438a <pin_is_output>:
    438a:	9c 01       	movw	r18, r24
    438c:	00 97       	sbiw	r24, 0x00	; 0
    438e:	81 f0       	breq	.+32     	; 0x43b0 <pin_is_output+0x26>
    4390:	fc 01       	movw	r30, r24
    4392:	85 91       	lpm	r24, Z+
    4394:	94 91       	lpm	r25, Z+
    4396:	02 96       	adiw	r24, 0x02	; 2
    4398:	fc 01       	movw	r30, r24
    439a:	a5 91       	lpm	r26, Z+
    439c:	b4 91       	lpm	r27, Z+
    439e:	2e 5f       	subi	r18, 0xFE	; 254
    43a0:	3f 4f       	sbci	r19, 0xFF	; 255
    43a2:	f9 01       	movw	r30, r18
    43a4:	94 91       	lpm	r25, Z+
    43a6:	8c 91       	ld	r24, X
    43a8:	89 23       	and	r24, r25
    43aa:	11 f0       	breq	.+4      	; 0x43b0 <pin_is_output+0x26>
    43ac:	8f ef       	ldi	r24, 0xFF	; 255
    43ae:	08 95       	ret
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	08 95       	ret

000043b4 <pin_toggle>:
    43b4:	cf 93       	push	r28
    43b6:	df 93       	push	r29
    43b8:	9c 01       	movw	r18, r24
    43ba:	00 97       	sbiw	r24, 0x00	; 0
    43bc:	e1 f0       	breq	.+56     	; 0x43f6 <pin_toggle+0x42>
    43be:	fc 01       	movw	r30, r24
    43c0:	85 91       	lpm	r24, Z+
    43c2:	94 91       	lpm	r25, Z+
    43c4:	fc 01       	movw	r30, r24
    43c6:	a5 91       	lpm	r26, Z+
    43c8:	b4 91       	lpm	r27, Z+
    43ca:	02 96       	adiw	r24, 0x02	; 2
    43cc:	fc 01       	movw	r30, r24
    43ce:	c5 91       	lpm	r28, Z+
    43d0:	d4 91       	lpm	r29, Z+
    43d2:	2e 5f       	subi	r18, 0xFE	; 254
    43d4:	3f 4f       	sbci	r19, 0xFF	; 255
    43d6:	f9 01       	movw	r30, r18
    43d8:	24 91       	lpm	r18, Z+
    43da:	88 81       	ld	r24, Y
    43dc:	82 23       	and	r24, r18
    43de:	41 f0       	breq	.+16     	; 0x43f0 <pin_toggle+0x3c>
    43e0:	9f b7       	in	r25, 0x3f	; 63
    43e2:	f8 94       	cli
    43e4:	8c 91       	ld	r24, X
    43e6:	82 27       	eor	r24, r18
    43e8:	8c 93       	st	X, r24
    43ea:	9f bf       	out	0x3f, r25	; 63
    43ec:	00 00       	nop
    43ee:	03 c0       	rjmp	.+6      	; 0x43f6 <pin_toggle+0x42>
    43f0:	87 ef       	ldi	r24, 0xF7	; 247
    43f2:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    43f6:	df 91       	pop	r29
    43f8:	cf 91       	pop	r28
    43fa:	08 95       	ret

000043fc <pin_low>:
    43fc:	cf 93       	push	r28
    43fe:	df 93       	push	r29
    4400:	9c 01       	movw	r18, r24
    4402:	00 97       	sbiw	r24, 0x00	; 0
    4404:	e9 f0       	breq	.+58     	; 0x4440 <pin_low+0x44>
    4406:	fc 01       	movw	r30, r24
    4408:	85 91       	lpm	r24, Z+
    440a:	94 91       	lpm	r25, Z+
    440c:	fc 01       	movw	r30, r24
    440e:	a5 91       	lpm	r26, Z+
    4410:	b4 91       	lpm	r27, Z+
    4412:	02 96       	adiw	r24, 0x02	; 2
    4414:	fc 01       	movw	r30, r24
    4416:	c5 91       	lpm	r28, Z+
    4418:	d4 91       	lpm	r29, Z+
    441a:	2e 5f       	subi	r18, 0xFE	; 254
    441c:	3f 4f       	sbci	r19, 0xFF	; 255
    441e:	f9 01       	movw	r30, r18
    4420:	24 91       	lpm	r18, Z+
    4422:	88 81       	ld	r24, Y
    4424:	82 23       	and	r24, r18
    4426:	49 f0       	breq	.+18     	; 0x443a <pin_low+0x3e>
    4428:	9f b7       	in	r25, 0x3f	; 63
    442a:	f8 94       	cli
    442c:	8c 91       	ld	r24, X
    442e:	20 95       	com	r18
    4430:	82 23       	and	r24, r18
    4432:	8c 93       	st	X, r24
    4434:	9f bf       	out	0x3f, r25	; 63
    4436:	00 00       	nop
    4438:	03 c0       	rjmp	.+6      	; 0x4440 <pin_low+0x44>
    443a:	87 ef       	ldi	r24, 0xF7	; 247
    443c:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    4440:	df 91       	pop	r29
    4442:	cf 91       	pop	r28
    4444:	08 95       	ret

00004446 <pin_high>:
    4446:	cf 93       	push	r28
    4448:	df 93       	push	r29
    444a:	9c 01       	movw	r18, r24
    444c:	00 97       	sbiw	r24, 0x00	; 0
    444e:	e1 f0       	breq	.+56     	; 0x4488 <pin_high+0x42>
    4450:	fc 01       	movw	r30, r24
    4452:	85 91       	lpm	r24, Z+
    4454:	94 91       	lpm	r25, Z+
    4456:	fc 01       	movw	r30, r24
    4458:	a5 91       	lpm	r26, Z+
    445a:	b4 91       	lpm	r27, Z+
    445c:	02 96       	adiw	r24, 0x02	; 2
    445e:	fc 01       	movw	r30, r24
    4460:	c5 91       	lpm	r28, Z+
    4462:	d4 91       	lpm	r29, Z+
    4464:	2e 5f       	subi	r18, 0xFE	; 254
    4466:	3f 4f       	sbci	r19, 0xFF	; 255
    4468:	f9 01       	movw	r30, r18
    446a:	24 91       	lpm	r18, Z+
    446c:	88 81       	ld	r24, Y
    446e:	82 23       	and	r24, r18
    4470:	41 f0       	breq	.+16     	; 0x4482 <pin_high+0x3c>
    4472:	9f b7       	in	r25, 0x3f	; 63
    4474:	f8 94       	cli
    4476:	8c 91       	ld	r24, X
    4478:	82 2b       	or	r24, r18
    447a:	8c 93       	st	X, r24
    447c:	9f bf       	out	0x3f, r25	; 63
    447e:	00 00       	nop
    4480:	03 c0       	rjmp	.+6      	; 0x4488 <pin_high+0x42>
    4482:	87 ef       	ldi	r24, 0xF7	; 247
    4484:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    4488:	df 91       	pop	r29
    448a:	cf 91       	pop	r28
    448c:	08 95       	ret

0000448e <pin_set>:
    448e:	66 23       	and	r22, r22
    4490:	19 f0       	breq	.+6      	; 0x4498 <pin_set+0xa>
    4492:	0e 94 23 22 	call	0x4446	; 0x4446 <pin_high>
    4496:	08 95       	ret
    4498:	0e 94 fe 21 	call	0x43fc	; 0x43fc <pin_low>
    449c:	08 95       	ret

0000449e <LED_set>:
    449e:	1f 93       	push	r17
    44a0:	cf 93       	push	r28
    44a2:	df 93       	push	r29
    44a4:	ec 01       	movw	r28, r24
    44a6:	16 2f       	mov	r17, r22
    44a8:	88 81       	ld	r24, Y
    44aa:	99 81       	ldd	r25, Y+1	; 0x01
    44ac:	00 97       	sbiw	r24, 0x00	; 0
    44ae:	a9 f0       	breq	.+42     	; 0x44da <LED_set+0x3c>
    44b0:	3a 81       	ldd	r19, Y+2	; 0x02
    44b2:	30 fd       	sbrc	r19, 0
    44b4:	05 c0       	rjmp	.+10     	; 0x44c0 <LED_set+0x22>
    44b6:	20 e0       	ldi	r18, 0x00	; 0
    44b8:	66 23       	and	r22, r22
    44ba:	09 f4       	brne	.+2      	; 0x44be <LED_set+0x20>
    44bc:	21 e0       	ldi	r18, 0x01	; 1
    44be:	12 2f       	mov	r17, r18
    44c0:	31 fd       	sbrc	r19, 1
    44c2:	06 c0       	rjmp	.+12     	; 0x44d0 <LED_set+0x32>
    44c4:	61 2f       	mov	r22, r17
    44c6:	0e 94 9e 21 	call	0x433c	; 0x433c <pin_make_output>
    44ca:	8a 81       	ldd	r24, Y+2	; 0x02
    44cc:	82 60       	ori	r24, 0x02	; 2
    44ce:	8a 83       	std	Y+2, r24	; 0x02
    44d0:	88 81       	ld	r24, Y
    44d2:	99 81       	ldd	r25, Y+1	; 0x01
    44d4:	61 2f       	mov	r22, r17
    44d6:	0e 94 47 22 	call	0x448e	; 0x448e <pin_set>
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	1f 91       	pop	r17
    44e0:	08 95       	ret

000044e2 <rprintfIgnore>:
    44e2:	08 95       	ret

000044e4 <rprintfInit>:
    44e4:	20 91 e1 02 	lds	r18, 0x02E1
    44e8:	30 91 e2 02 	lds	r19, 0x02E2
    44ec:	90 93 e2 02 	sts	0x02E2, r25
    44f0:	80 93 e1 02 	sts	0x02E1, r24
    44f4:	c9 01       	movw	r24, r18
    44f6:	08 95       	ret

000044f8 <rprintfChar>:
    44f8:	1f 93       	push	r17
    44fa:	18 2f       	mov	r17, r24
    44fc:	8a 30       	cpi	r24, 0x0A	; 10
    44fe:	31 f4       	brne	.+12     	; 0x450c <rprintfChar+0x14>
    4500:	e0 91 e1 02 	lds	r30, 0x02E1
    4504:	f0 91 e2 02 	lds	r31, 0x02E2
    4508:	8d e0       	ldi	r24, 0x0D	; 13
    450a:	09 95       	icall
    450c:	e0 91 e1 02 	lds	r30, 0x02E1
    4510:	f0 91 e2 02 	lds	r31, 0x02E2
    4514:	81 2f       	mov	r24, r17
    4516:	09 95       	icall
    4518:	1f 91       	pop	r17
    451a:	08 95       	ret

0000451c <rprintfCharN>:
    451c:	1f 93       	push	r17
    451e:	cf 93       	push	r28
    4520:	df 93       	push	r29
    4522:	18 2f       	mov	r17, r24
    4524:	eb 01       	movw	r28, r22
    4526:	04 c0       	rjmp	.+8      	; 0x4530 <rprintfCharN+0x14>
    4528:	81 2f       	mov	r24, r17
    452a:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <rprintfChar>
    452e:	21 97       	sbiw	r28, 0x01	; 1
    4530:	20 97       	sbiw	r28, 0x00	; 0
    4532:	d1 f7       	brne	.-12     	; 0x4528 <rprintfCharN+0xc>
    4534:	df 91       	pop	r29
    4536:	cf 91       	pop	r28
    4538:	1f 91       	pop	r17
    453a:	08 95       	ret

0000453c <rprintfStr>:
    453c:	cf 93       	push	r28
    453e:	df 93       	push	r29
    4540:	ec 01       	movw	r28, r24
    4542:	00 97       	sbiw	r24, 0x00	; 0
    4544:	21 f4       	brne	.+8      	; 0x454e <rprintfStr+0x12>
    4546:	06 c0       	rjmp	.+12     	; 0x4554 <rprintfStr+0x18>
    4548:	21 96       	adiw	r28, 0x01	; 1
    454a:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <rprintfChar>
    454e:	88 81       	ld	r24, Y
    4550:	88 23       	and	r24, r24
    4552:	d1 f7       	brne	.-12     	; 0x4548 <rprintfStr+0xc>
    4554:	df 91       	pop	r29
    4556:	cf 91       	pop	r28
    4558:	08 95       	ret

0000455a <rprintfProgStr>:
    455a:	cf 93       	push	r28
    455c:	df 93       	push	r29
    455e:	ec 01       	movw	r28, r24
    4560:	00 97       	sbiw	r24, 0x00	; 0
    4562:	19 f4       	brne	.+6      	; 0x456a <rprintfProgStr+0x10>
    4564:	07 c0       	rjmp	.+14     	; 0x4574 <rprintfProgStr+0x1a>
    4566:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <rprintfChar>
    456a:	fe 01       	movw	r30, r28
    456c:	21 96       	adiw	r28, 0x01	; 1
    456e:	84 91       	lpm	r24, Z+
    4570:	88 23       	and	r24, r24
    4572:	c9 f7       	brne	.-14     	; 0x4566 <rprintfProgStr+0xc>
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	08 95       	ret

0000457a <rprintfCRLF>:
    457a:	8a e0       	ldi	r24, 0x0A	; 10
    457c:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <rprintfChar>
    4580:	08 95       	ret

00004582 <rprintfu04>:
    4582:	e8 2f       	mov	r30, r24
    4584:	f0 e0       	ldi	r31, 0x00	; 0
    4586:	ef 70       	andi	r30, 0x0F	; 15
    4588:	f0 70       	andi	r31, 0x00	; 0
    458a:	e1 52       	subi	r30, 0x21	; 33
    458c:	fb 4f       	sbci	r31, 0xFB	; 251
    458e:	e4 91       	lpm	r30, Z+
    4590:	8e 2f       	mov	r24, r30
    4592:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <rprintfChar>
    4596:	08 95       	ret

00004598 <rprintf1RamRom>:
    4598:	7f 92       	push	r7
    459a:	8f 92       	push	r8
    459c:	9f 92       	push	r9
    459e:	af 92       	push	r10
    45a0:	bf 92       	push	r11
    45a2:	cf 92       	push	r12
    45a4:	df 92       	push	r13
    45a6:	ef 92       	push	r14
    45a8:	ff 92       	push	r15
    45aa:	0f 93       	push	r16
    45ac:	1f 93       	push	r17
    45ae:	df 93       	push	r29
    45b0:	cf 93       	push	r28
    45b2:	0f 92       	push	r0
    45b4:	cd b7       	in	r28, 0x3d	; 61
    45b6:	de b7       	in	r29, 0x3e	; 62
    45b8:	79 88       	ldd	r7, Y+17	; 0x11
    45ba:	ca 88       	ldd	r12, Y+18	; 0x12
    45bc:	db 88       	ldd	r13, Y+19	; 0x13
    45be:	64 e1       	ldi	r22, 0x14	; 20
    45c0:	e6 2e       	mov	r14, r22
    45c2:	f1 2c       	mov	r15, r1
    45c4:	ec 0e       	add	r14, r28
    45c6:	fd 1e       	adc	r15, r29
    45c8:	17 c0       	rjmp	.+46     	; 0x45f8 <rprintf1RamRom+0x60>
    45ca:	88 23       	and	r24, r24
    45cc:	89 f4       	brne	.+34     	; 0x45f0 <rprintf1RamRom+0x58>
    45ce:	80 e0       	ldi	r24, 0x00	; 0
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	0f 90       	pop	r0
    45d4:	cf 91       	pop	r28
    45d6:	df 91       	pop	r29
    45d8:	1f 91       	pop	r17
    45da:	0f 91       	pop	r16
    45dc:	ff 90       	pop	r15
    45de:	ef 90       	pop	r14
    45e0:	df 90       	pop	r13
    45e2:	cf 90       	pop	r12
    45e4:	bf 90       	pop	r11
    45e6:	af 90       	pop	r10
    45e8:	9f 90       	pop	r9
    45ea:	8f 90       	pop	r8
    45ec:	7f 90       	pop	r7
    45ee:	08 95       	ret
    45f0:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <rprintfChar>
    45f4:	57 01       	movw	r10, r14
    45f6:	75 01       	movw	r14, r10
    45f8:	96 01       	movw	r18, r12
    45fa:	2f 5f       	subi	r18, 0xFF	; 255
    45fc:	3f 4f       	sbci	r19, 0xFF	; 255
    45fe:	77 20       	and	r7, r7
    4600:	21 f0       	breq	.+8      	; 0x460a <rprintf1RamRom+0x72>
    4602:	f6 01       	movw	r30, r12
    4604:	69 01       	movw	r12, r18
    4606:	84 91       	lpm	r24, Z+
    4608:	03 c0       	rjmp	.+6      	; 0x4610 <rprintf1RamRom+0x78>
    460a:	f6 01       	movw	r30, r12
    460c:	80 81       	ld	r24, Z
    460e:	69 01       	movw	r12, r18
    4610:	85 32       	cpi	r24, 0x25	; 37
    4612:	d9 f6       	brne	.-74     	; 0x45ca <rprintf1RamRom+0x32>
    4614:	2f 5f       	subi	r18, 0xFF	; 255
    4616:	3f 4f       	sbci	r19, 0xFF	; 255
    4618:	77 20       	and	r7, r7
    461a:	21 f0       	breq	.+8      	; 0x4624 <rprintf1RamRom+0x8c>
    461c:	f6 01       	movw	r30, r12
    461e:	69 01       	movw	r12, r18
    4620:	94 91       	lpm	r25, Z+
    4622:	03 c0       	rjmp	.+6      	; 0x462a <rprintf1RamRom+0x92>
    4624:	f6 01       	movw	r30, r12
    4626:	90 81       	ld	r25, Z
    4628:	69 01       	movw	r12, r18
    462a:	93 37       	cpi	r25, 0x73	; 115
    462c:	a1 f0       	breq	.+40     	; 0x4656 <rprintf1RamRom+0xbe>
    462e:	94 37       	cpi	r25, 0x74	; 116
    4630:	38 f4       	brcc	.+14     	; 0x4640 <rprintf1RamRom+0xa8>
    4632:	93 36       	cpi	r25, 0x63	; 99
    4634:	d9 f0       	breq	.+54     	; 0x466c <rprintf1RamRom+0xd4>
    4636:	94 36       	cpi	r25, 0x64	; 100
    4638:	41 f0       	breq	.+16     	; 0x464a <rprintf1RamRom+0xb2>
    463a:	95 32       	cpi	r25, 0x25	; 37
    463c:	09 f5       	brne	.+66     	; 0x4680 <rprintf1RamRom+0xe8>
    463e:	25 c0       	rjmp	.+74     	; 0x468a <rprintf1RamRom+0xf2>
    4640:	95 37       	cpi	r25, 0x75	; 117
    4642:	19 f0       	breq	.+6      	; 0x464a <rprintf1RamRom+0xb2>
    4644:	98 37       	cpi	r25, 0x78	; 120
    4646:	e1 f4       	brne	.+56     	; 0x4680 <rprintf1RamRom+0xe8>
    4648:	22 c0       	rjmp	.+68     	; 0x468e <rprintf1RamRom+0xf6>
    464a:	00 e1       	ldi	r16, 0x10	; 16
    464c:	17 e2       	ldi	r17, 0x27	; 39
    464e:	5a e0       	ldi	r21, 0x0A	; 10
    4650:	85 2e       	mov	r8, r21
    4652:	91 2c       	mov	r9, r1
    4654:	21 c0       	rjmp	.+66     	; 0x4698 <rprintf1RamRom+0x100>
    4656:	42 e0       	ldi	r20, 0x02	; 2
    4658:	a4 2e       	mov	r10, r20
    465a:	b1 2c       	mov	r11, r1
    465c:	ae 0c       	add	r10, r14
    465e:	bf 1c       	adc	r11, r15
    4660:	f7 01       	movw	r30, r14
    4662:	80 81       	ld	r24, Z
    4664:	91 81       	ldd	r25, Z+1	; 0x01
    4666:	0e 94 9e 22 	call	0x453c	; 0x453c <rprintfStr>
    466a:	c5 cf       	rjmp	.-118    	; 0x45f6 <rprintf1RamRom+0x5e>
    466c:	32 e0       	ldi	r19, 0x02	; 2
    466e:	a3 2e       	mov	r10, r19
    4670:	b1 2c       	mov	r11, r1
    4672:	ae 0c       	add	r10, r14
    4674:	bf 1c       	adc	r11, r15
    4676:	f7 01       	movw	r30, r14
    4678:	80 81       	ld	r24, Z
    467a:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <rprintfChar>
    467e:	bb cf       	rjmp	.-138    	; 0x45f6 <rprintf1RamRom+0x5e>
    4680:	85 e2       	ldi	r24, 0x25	; 37
    4682:	99 83       	std	Y+1, r25	; 0x01
    4684:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <rprintfChar>
    4688:	99 81       	ldd	r25, Y+1	; 0x01
    468a:	89 2f       	mov	r24, r25
    468c:	b1 cf       	rjmp	.-158    	; 0x45f0 <rprintf1RamRom+0x58>
    468e:	00 e0       	ldi	r16, 0x00	; 0
    4690:	10 e1       	ldi	r17, 0x10	; 16
    4692:	20 e1       	ldi	r18, 0x10	; 16
    4694:	82 2e       	mov	r8, r18
    4696:	91 2c       	mov	r9, r1
    4698:	82 e0       	ldi	r24, 0x02	; 2
    469a:	a8 2e       	mov	r10, r24
    469c:	b1 2c       	mov	r11, r1
    469e:	ae 0c       	add	r10, r14
    46a0:	bf 1c       	adc	r11, r15
    46a2:	f7 01       	movw	r30, r14
    46a4:	e0 80       	ld	r14, Z
    46a6:	f1 80       	ldd	r15, Z+1	; 0x01
    46a8:	94 36       	cpi	r25, 0x64	; 100
    46aa:	51 f4       	brne	.+20     	; 0x46c0 <rprintf1RamRom+0x128>
    46ac:	f7 fe       	sbrs	r15, 7
    46ae:	14 c0       	rjmp	.+40     	; 0x46d8 <rprintf1RamRom+0x140>
    46b0:	f0 94       	com	r15
    46b2:	e1 94       	neg	r14
    46b4:	f1 08       	sbc	r15, r1
    46b6:	f3 94       	inc	r15
    46b8:	8d e2       	ldi	r24, 0x2D	; 45
    46ba:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <rprintfChar>
    46be:	0c c0       	rjmp	.+24     	; 0x46d8 <rprintf1RamRom+0x140>
    46c0:	95 37       	cpi	r25, 0x75	; 117
    46c2:	69 f4       	brne	.+26     	; 0x46de <rprintf1RamRom+0x146>
    46c4:	09 c0       	rjmp	.+18     	; 0x46d8 <rprintf1RamRom+0x140>
    46c6:	c8 01       	movw	r24, r16
    46c8:	6a e0       	ldi	r22, 0x0A	; 10
    46ca:	70 e0       	ldi	r23, 0x00	; 0
    46cc:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <__udivmodhi4>
    46d0:	8b 01       	movw	r16, r22
    46d2:	62 30       	cpi	r22, 0x02	; 2
    46d4:	71 05       	cpc	r23, r1
    46d6:	18 f0       	brcs	.+6      	; 0x46de <rprintf1RamRom+0x146>
    46d8:	e0 16       	cp	r14, r16
    46da:	f1 06       	cpc	r15, r17
    46dc:	a0 f3       	brcs	.-24     	; 0x46c6 <rprintf1RamRom+0x12e>
    46de:	c7 01       	movw	r24, r14
    46e0:	b8 01       	movw	r22, r16
    46e2:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <__udivmodhi4>
    46e6:	86 2f       	mov	r24, r22
    46e8:	0e 94 c1 22 	call	0x4582	; 0x4582 <rprintfu04>
    46ec:	c7 01       	movw	r24, r14
    46ee:	b8 01       	movw	r22, r16
    46f0:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <__udivmodhi4>
    46f4:	7c 01       	movw	r14, r24
    46f6:	c8 01       	movw	r24, r16
    46f8:	b4 01       	movw	r22, r8
    46fa:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <__udivmodhi4>
    46fe:	8b 01       	movw	r16, r22
    4700:	61 15       	cp	r22, r1
    4702:	71 05       	cpc	r23, r1
    4704:	61 f7       	brne	.-40     	; 0x46de <rprintf1RamRom+0x146>
    4706:	77 cf       	rjmp	.-274    	; 0x45f6 <rprintf1RamRom+0x5e>

00004708 <segled_put_char>:
    4708:	ef 92       	push	r14
    470a:	ff 92       	push	r15
    470c:	0f 93       	push	r16
    470e:	1f 93       	push	r17
    4710:	cf 93       	push	r28
    4712:	df 93       	push	r29
    4714:	7c 01       	movw	r14, r24
    4716:	06 2f       	mov	r16, r22
    4718:	fc 01       	movw	r30, r24
    471a:	80 89       	ldd	r24, Z+16	; 0x10
    471c:	81 fd       	sbrc	r24, 1
    471e:	12 c0       	rjmp	.+36     	; 0x4744 <segled_put_char+0x3c>
    4720:	c0 e0       	ldi	r28, 0x00	; 0
    4722:	d0 e0       	ldi	r29, 0x00	; 0
    4724:	f7 01       	movw	r30, r14
    4726:	ec 0f       	add	r30, r28
    4728:	fd 1f       	adc	r31, r29
    472a:	80 81       	ld	r24, Z
    472c:	91 81       	ldd	r25, Z+1	; 0x01
    472e:	60 e0       	ldi	r22, 0x00	; 0
    4730:	0e 94 9e 21 	call	0x433c	; 0x433c <pin_make_output>
    4734:	22 96       	adiw	r28, 0x02	; 2
    4736:	c0 31       	cpi	r28, 0x10	; 16
    4738:	d1 05       	cpc	r29, r1
    473a:	a1 f7       	brne	.-24     	; 0x4724 <segled_put_char+0x1c>
    473c:	f7 01       	movw	r30, r14
    473e:	80 89       	ldd	r24, Z+16	; 0x10
    4740:	82 60       	ori	r24, 0x02	; 2
    4742:	80 8b       	std	Z+16, r24	; 0x10
    4744:	80 2f       	mov	r24, r16
    4746:	81 54       	subi	r24, 0x41	; 65
    4748:	8a 31       	cpi	r24, 0x1A	; 26
    474a:	30 f4       	brcc	.+12     	; 0x4758 <segled_put_char+0x50>
    474c:	e0 2f       	mov	r30, r16
    474e:	f0 e0       	ldi	r31, 0x00	; 0
    4750:	e1 55       	subi	r30, 0x51	; 81
    4752:	fb 4f       	sbci	r31, 0xFB	; 251
    4754:	14 91       	lpm	r17, Z+
    4756:	3c c0       	rjmp	.+120    	; 0x47d0 <segled_put_char+0xc8>
    4758:	80 2f       	mov	r24, r16
    475a:	81 56       	subi	r24, 0x61	; 97
    475c:	8a 31       	cpi	r24, 0x1A	; 26
    475e:	30 f4       	brcc	.+12     	; 0x476c <segled_put_char+0x64>
    4760:	e0 2f       	mov	r30, r16
    4762:	f0 e0       	ldi	r31, 0x00	; 0
    4764:	e1 57       	subi	r30, 0x71	; 113
    4766:	fb 4f       	sbci	r31, 0xFB	; 251
    4768:	14 91       	lpm	r17, Z+
    476a:	32 c0       	rjmp	.+100    	; 0x47d0 <segled_put_char+0xc8>
    476c:	80 2f       	mov	r24, r16
    476e:	80 53       	subi	r24, 0x30	; 48
    4770:	8a 30       	cpi	r24, 0x0A	; 10
    4772:	30 f4       	brcc	.+12     	; 0x4780 <segled_put_char+0x78>
    4774:	e0 2f       	mov	r30, r16
    4776:	f0 e0       	ldi	r31, 0x00	; 0
    4778:	e6 52       	subi	r30, 0x26	; 38
    477a:	fb 4f       	sbci	r31, 0xFB	; 251
    477c:	14 91       	lpm	r17, Z+
    477e:	28 c0       	rjmp	.+80     	; 0x47d0 <segled_put_char+0xc8>
    4780:	0a 30       	cpi	r16, 0x0A	; 10
    4782:	30 f4       	brcc	.+12     	; 0x4790 <segled_put_char+0x88>
    4784:	e0 2f       	mov	r30, r16
    4786:	f0 e0       	ldi	r31, 0x00	; 0
    4788:	e6 5f       	subi	r30, 0xF6	; 246
    478a:	fa 4f       	sbci	r31, 0xFA	; 250
    478c:	14 91       	lpm	r17, Z+
    478e:	20 c0       	rjmp	.+64     	; 0x47d0 <segled_put_char+0xc8>
    4790:	0d 32       	cpi	r16, 0x2D	; 45
    4792:	11 f4       	brne	.+4      	; 0x4798 <segled_put_char+0x90>
    4794:	12 e0       	ldi	r17, 0x02	; 2
    4796:	1c c0       	rjmp	.+56     	; 0x47d0 <segled_put_char+0xc8>
    4798:	0b 35       	cpi	r16, 0x5B	; 91
    479a:	b9 f0       	breq	.+46     	; 0x47ca <segled_put_char+0xc2>
    479c:	0b 37       	cpi	r16, 0x7B	; 123
    479e:	a9 f0       	breq	.+42     	; 0x47ca <segled_put_char+0xc2>
    47a0:	08 32       	cpi	r16, 0x28	; 40
    47a2:	99 f0       	breq	.+38     	; 0x47ca <segled_put_char+0xc2>
    47a4:	0d 35       	cpi	r16, 0x5D	; 93
    47a6:	99 f0       	breq	.+38     	; 0x47ce <segled_put_char+0xc6>
    47a8:	0d 37       	cpi	r16, 0x7D	; 125
    47aa:	89 f0       	breq	.+34     	; 0x47ce <segled_put_char+0xc6>
    47ac:	09 32       	cpi	r16, 0x29	; 41
    47ae:	79 f0       	breq	.+30     	; 0x47ce <segled_put_char+0xc6>
    47b0:	0e 32       	cpi	r16, 0x2E	; 46
    47b2:	11 f0       	breq	.+4      	; 0x47b8 <segled_put_char+0xb0>
    47b4:	10 e0       	ldi	r17, 0x00	; 0
    47b6:	0c c0       	rjmp	.+24     	; 0x47d0 <segled_put_char+0xc8>
    47b8:	f7 01       	movw	r30, r14
    47ba:	86 85       	ldd	r24, Z+14	; 0x0e
    47bc:	97 85       	ldd	r25, Z+15	; 0x0f
    47be:	89 2b       	or	r24, r25
    47c0:	11 f4       	brne	.+4      	; 0x47c6 <segled_put_char+0xbe>
    47c2:	10 e1       	ldi	r17, 0x10	; 16
    47c4:	05 c0       	rjmp	.+10     	; 0x47d0 <segled_put_char+0xc8>
    47c6:	11 e0       	ldi	r17, 0x01	; 1
    47c8:	03 c0       	rjmp	.+6      	; 0x47d0 <segled_put_char+0xc8>
    47ca:	1c e9       	ldi	r17, 0x9C	; 156
    47cc:	01 c0       	rjmp	.+2      	; 0x47d0 <segled_put_char+0xc8>
    47ce:	10 ef       	ldi	r17, 0xF0	; 240
    47d0:	f7 01       	movw	r30, r14
    47d2:	80 89       	ldd	r24, Z+16	; 0x10
    47d4:	80 ff       	sbrs	r24, 0
    47d6:	10 95       	com	r17
    47d8:	c0 e0       	ldi	r28, 0x00	; 0
    47da:	d0 e0       	ldi	r29, 0x00	; 0
    47dc:	f7 01       	movw	r30, r14
    47de:	ec 0f       	add	r30, r28
    47e0:	fd 1f       	adc	r31, r29
    47e2:	80 81       	ld	r24, Z
    47e4:	91 81       	ldd	r25, Z+1	; 0x01
    47e6:	17 ff       	sbrs	r17, 7
    47e8:	03 c0       	rjmp	.+6      	; 0x47f0 <segled_put_char+0xe8>
    47ea:	0e 94 23 22 	call	0x4446	; 0x4446 <pin_high>
    47ee:	02 c0       	rjmp	.+4      	; 0x47f4 <segled_put_char+0xec>
    47f0:	0e 94 fe 21 	call	0x43fc	; 0x43fc <pin_low>
    47f4:	22 96       	adiw	r28, 0x02	; 2
    47f6:	c0 31       	cpi	r28, 0x10	; 16
    47f8:	d1 05       	cpc	r29, r1
    47fa:	11 f0       	breq	.+4      	; 0x4800 <segled_put_char+0xf8>
    47fc:	11 0f       	add	r17, r17
    47fe:	ee cf       	rjmp	.-36     	; 0x47dc <segled_put_char+0xd4>
    4800:	80 2f       	mov	r24, r16
    4802:	df 91       	pop	r29
    4804:	cf 91       	pop	r28
    4806:	1f 91       	pop	r17
    4808:	0f 91       	pop	r16
    480a:	ff 90       	pop	r15
    480c:	ef 90       	pop	r14
    480e:	08 95       	ret

00004810 <segled_set>:
    4810:	ef 92       	push	r14
    4812:	ff 92       	push	r15
    4814:	0f 93       	push	r16
    4816:	1f 93       	push	r17
    4818:	cf 93       	push	r28
    481a:	df 93       	push	r29
    481c:	8c 01       	movw	r16, r24
    481e:	e6 2e       	mov	r14, r22
    4820:	f4 2e       	mov	r15, r20
    4822:	fc 01       	movw	r30, r24
    4824:	80 89       	ldd	r24, Z+16	; 0x10
    4826:	81 fd       	sbrc	r24, 1
    4828:	12 c0       	rjmp	.+36     	; 0x484e <segled_set+0x3e>
    482a:	c0 e0       	ldi	r28, 0x00	; 0
    482c:	d0 e0       	ldi	r29, 0x00	; 0
    482e:	f8 01       	movw	r30, r16
    4830:	ec 0f       	add	r30, r28
    4832:	fd 1f       	adc	r31, r29
    4834:	80 81       	ld	r24, Z
    4836:	91 81       	ldd	r25, Z+1	; 0x01
    4838:	60 e0       	ldi	r22, 0x00	; 0
    483a:	0e 94 9e 21 	call	0x433c	; 0x433c <pin_make_output>
    483e:	22 96       	adiw	r28, 0x02	; 2
    4840:	c0 31       	cpi	r28, 0x10	; 16
    4842:	d1 05       	cpc	r29, r1
    4844:	a1 f7       	brne	.-24     	; 0x482e <segled_set+0x1e>
    4846:	f8 01       	movw	r30, r16
    4848:	80 89       	ldd	r24, Z+16	; 0x10
    484a:	82 60       	ori	r24, 0x02	; 2
    484c:	80 8b       	std	Z+16, r24	; 0x10
    484e:	f8 01       	movw	r30, r16
    4850:	80 89       	ldd	r24, Z+16	; 0x10
    4852:	80 fd       	sbrc	r24, 0
    4854:	06 c0       	rjmp	.+12     	; 0x4862 <segled_set+0x52>
    4856:	ff 20       	and	r15, r15
    4858:	19 f4       	brne	.+6      	; 0x4860 <segled_set+0x50>
    485a:	ff 24       	eor	r15, r15
    485c:	fa 94       	dec	r15
    485e:	01 c0       	rjmp	.+2      	; 0x4862 <segled_set+0x52>
    4860:	ff 24       	eor	r15, r15
    4862:	ee 2d       	mov	r30, r14
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	ee 0f       	add	r30, r30
    4868:	ff 1f       	adc	r31, r31
    486a:	e0 0f       	add	r30, r16
    486c:	f1 1f       	adc	r31, r17
    486e:	80 81       	ld	r24, Z
    4870:	91 81       	ldd	r25, Z+1	; 0x01
    4872:	6f 2d       	mov	r22, r15
    4874:	0e 94 47 22 	call	0x448e	; 0x448e <pin_set>
    4878:	df 91       	pop	r29
    487a:	cf 91       	pop	r28
    487c:	1f 91       	pop	r17
    487e:	0f 91       	pop	r16
    4880:	ff 90       	pop	r15
    4882:	ef 90       	pop	r14
    4884:	08 95       	ret

00004886 <marqueeStop>:
    4886:	fc 01       	movw	r30, r24
    4888:	00 97       	sbiw	r24, 0x00	; 0
    488a:	79 f0       	breq	.+30     	; 0x48aa <marqueeStop+0x24>
    488c:	84 81       	ldd	r24, Z+4	; 0x04
    488e:	95 81       	ldd	r25, Z+5	; 0x05
    4890:	89 2b       	or	r24, r25
    4892:	59 f0       	breq	.+22     	; 0x48aa <marqueeStop+0x24>
    4894:	8f b7       	in	r24, 0x3f	; 63
    4896:	f8 94       	cli
    4898:	11 86       	std	Z+9, r1	; 0x09
    489a:	10 86       	std	Z+8, r1	; 0x08
    489c:	17 82       	std	Z+7, r1	; 0x07
    489e:	16 82       	std	Z+6, r1	; 0x06
    48a0:	04 80       	ldd	r0, Z+4	; 0x04
    48a2:	f5 81       	ldd	r31, Z+5	; 0x05
    48a4:	e0 2d       	mov	r30, r0
    48a6:	10 82       	st	Z, r1
    48a8:	8f bf       	out	0x3f, r24	; 63
    48aa:	08 95       	ret

000048ac <marqueeIsActive>:
    48ac:	fc 01       	movw	r30, r24
    48ae:	84 89       	ldd	r24, Z+20	; 0x14
    48b0:	80 fd       	sbrc	r24, 0
    48b2:	02 c0       	rjmp	.+4      	; 0x48b8 <marqueeIsActive+0xc>
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	08 95       	ret
    48b8:	8f ef       	ldi	r24, 0xFF	; 255
    48ba:	08 95       	ret

000048bc <marqueeSetCharDelay>:
    48bc:	fc 01       	movw	r30, r24
    48be:	8f b7       	in	r24, 0x3f	; 63
    48c0:	f8 94       	cli
    48c2:	44 87       	std	Z+12, r20	; 0x0c
    48c4:	55 87       	std	Z+13, r21	; 0x0d
    48c6:	66 87       	std	Z+14, r22	; 0x0e
    48c8:	77 87       	std	Z+15, r23	; 0x0f
    48ca:	8f bf       	out	0x3f, r24	; 63
    48cc:	08 95       	ret

000048ce <marqueeSetEndDelay>:
    48ce:	fc 01       	movw	r30, r24
    48d0:	8f b7       	in	r24, 0x3f	; 63
    48d2:	f8 94       	cli
    48d4:	40 8b       	std	Z+16, r20	; 0x10
    48d6:	51 8b       	std	Z+17, r21	; 0x11
    48d8:	62 8b       	std	Z+18, r22	; 0x12
    48da:	73 8b       	std	Z+19, r23	; 0x13
    48dc:	8f bf       	out	0x3f, r24	; 63
    48de:	08 95       	ret

000048e0 <marqueeSendByte>:
    48e0:	cf 92       	push	r12
    48e2:	df 92       	push	r13
    48e4:	ef 92       	push	r14
    48e6:	ff 92       	push	r15
    48e8:	0f 93       	push	r16
    48ea:	1f 93       	push	r17
    48ec:	cf 93       	push	r28
    48ee:	df 93       	push	r29
    48f0:	ec 01       	movw	r28, r24
    48f2:	d6 2e       	mov	r13, r22
    48f4:	8c 81       	ldd	r24, Y+4	; 0x04
    48f6:	9d 81       	ldd	r25, Y+5	; 0x05
    48f8:	89 2b       	or	r24, r25
    48fa:	a9 f5       	brne	.+106    	; 0x4966 <marqueeSendByte+0x86>
    48fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    48fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4900:	01 96       	adiw	r24, 0x01	; 1
    4902:	0e 94 1f 32 	call	0x643e	; 0x643e <malloc>
    4906:	9d 83       	std	Y+5, r25	; 0x05
    4908:	8c 83       	std	Y+4, r24	; 0x04
    490a:	00 97       	sbiw	r24, 0x00	; 0
    490c:	61 f1       	breq	.+88     	; 0x4966 <marqueeSendByte+0x86>
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	07 c0       	rjmp	.+14     	; 0x4922 <marqueeSendByte+0x42>
    4914:	ec 81       	ldd	r30, Y+4	; 0x04
    4916:	fd 81       	ldd	r31, Y+5	; 0x05
    4918:	e2 0f       	add	r30, r18
    491a:	f3 1f       	adc	r31, r19
    491c:	10 82       	st	Z, r1
    491e:	2f 5f       	subi	r18, 0xFF	; 255
    4920:	3f 4f       	sbci	r19, 0xFF	; 255
    4922:	8a 85       	ldd	r24, Y+10	; 0x0a
    4924:	9b 85       	ldd	r25, Y+11	; 0x0b
    4926:	82 17       	cp	r24, r18
    4928:	93 07       	cpc	r25, r19
    492a:	a0 f7       	brcc	.-24     	; 0x4914 <marqueeSendByte+0x34>
    492c:	19 86       	std	Y+9, r1	; 0x09
    492e:	18 86       	std	Y+8, r1	; 0x08
    4930:	1f 82       	std	Y+7, r1	; 0x07
    4932:	1e 82       	std	Y+6, r1	; 0x06
    4934:	8c 89       	ldd	r24, Y+20	; 0x14
    4936:	8e 7f       	andi	r24, 0xFE	; 254
    4938:	8c 8b       	std	Y+20, r24	; 0x14
    493a:	00 e0       	ldi	r16, 0x00	; 0
    493c:	10 e0       	ldi	r17, 0x00	; 0
    493e:	0e c0       	rjmp	.+28     	; 0x495c <marqueeSendByte+0x7c>
    4940:	c8 01       	movw	r24, r16
    4942:	88 0f       	add	r24, r24
    4944:	99 1f       	adc	r25, r25
    4946:	e8 81       	ld	r30, Y
    4948:	f9 81       	ldd	r31, Y+1	; 0x01
    494a:	e8 0f       	add	r30, r24
    494c:	f9 1f       	adc	r31, r25
    494e:	85 91       	lpm	r24, Z+
    4950:	94 91       	lpm	r25, Z+
    4952:	60 e2       	ldi	r22, 0x20	; 32
    4954:	0e 94 84 23 	call	0x4708	; 0x4708 <segled_put_char>
    4958:	0f 5f       	subi	r16, 0xFF	; 255
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	8a 81       	ldd	r24, Y+2	; 0x02
    495e:	9b 81       	ldd	r25, Y+3	; 0x03
    4960:	08 17       	cp	r16, r24
    4962:	19 07       	cpc	r17, r25
    4964:	68 f3       	brcs	.-38     	; 0x4940 <marqueeSendByte+0x60>
    4966:	ec 81       	ldd	r30, Y+4	; 0x04
    4968:	fd 81       	ldd	r31, Y+5	; 0x05
    496a:	30 97       	sbiw	r30, 0x00	; 0
    496c:	09 f4       	brne	.+2      	; 0x4970 <marqueeSendByte+0x90>
    496e:	3e c0       	rjmp	.+124    	; 0x49ec <marqueeSendByte+0x10c>
    4970:	8a e0       	ldi	r24, 0x0A	; 10
    4972:	d8 16       	cp	r13, r24
    4974:	19 f5       	brne	.+70     	; 0x49bc <marqueeSendByte+0xdc>
    4976:	88 85       	ldd	r24, Y+8	; 0x08
    4978:	99 85       	ldd	r25, Y+9	; 0x09
    497a:	e8 0f       	add	r30, r24
    497c:	f9 1f       	adc	r31, r25
    497e:	10 82       	st	Z, r1
    4980:	19 86       	std	Y+9, r1	; 0x09
    4982:	18 86       	std	Y+8, r1	; 0x08
    4984:	cf b6       	in	r12, 0x3f	; 63
    4986:	f8 94       	cli
    4988:	8c 89       	ldd	r24, Y+20	; 0x14
    498a:	80 fd       	sbrc	r24, 0
    498c:	15 c0       	rjmp	.+42     	; 0x49b8 <marqueeSendByte+0xd8>
    498e:	8c 89       	ldd	r24, Y+20	; 0x14
    4990:	81 60       	ori	r24, 0x01	; 1
    4992:	8c 8b       	std	Y+20, r24	; 0x14
    4994:	8c 89       	ldd	r24, Y+20	; 0x14
    4996:	8d 7f       	andi	r24, 0xFD	; 253
    4998:	8c 8b       	std	Y+20, r24	; 0x14
    499a:	1f 82       	std	Y+7, r1	; 0x07
    499c:	1e 82       	std	Y+6, r1	; 0x06
    499e:	0e 94 6f 28 	call	0x50de	; 0x50de <clockGetus>
    49a2:	9b 01       	movw	r18, r22
    49a4:	ac 01       	movw	r20, r24
    49a6:	ec 84       	ldd	r14, Y+12	; 0x0c
    49a8:	fd 84       	ldd	r15, Y+13	; 0x0d
    49aa:	0e 85       	ldd	r16, Y+14	; 0x0e
    49ac:	1f 85       	ldd	r17, Y+15	; 0x0f
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	95 e2       	ldi	r25, 0x25	; 37
    49b2:	be 01       	movw	r22, r28
    49b4:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <scheduleJob>
    49b8:	cf be       	out	0x3f, r12	; 63
    49ba:	18 c0       	rjmp	.+48     	; 0x49ec <marqueeSendByte+0x10c>
    49bc:	8d e0       	ldi	r24, 0x0D	; 13
    49be:	d8 16       	cp	r13, r24
    49c0:	a9 f0       	breq	.+42     	; 0x49ec <marqueeSendByte+0x10c>
    49c2:	28 85       	ldd	r18, Y+8	; 0x08
    49c4:	39 85       	ldd	r19, Y+9	; 0x09
    49c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    49c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    49ca:	28 17       	cp	r18, r24
    49cc:	39 07       	cpc	r19, r25
    49ce:	70 f4       	brcc	.+28     	; 0x49ec <marqueeSendByte+0x10c>
    49d0:	e2 0f       	add	r30, r18
    49d2:	f3 1f       	adc	r31, r19
    49d4:	2f b7       	in	r18, 0x3f	; 63
    49d6:	f8 94       	cli
    49d8:	d0 82       	st	Z, r13
    49da:	11 82       	std	Z+1, r1	; 0x01
    49dc:	88 85       	ldd	r24, Y+8	; 0x08
    49de:	99 85       	ldd	r25, Y+9	; 0x09
    49e0:	01 96       	adiw	r24, 0x01	; 1
    49e2:	99 87       	std	Y+9, r25	; 0x09
    49e4:	88 87       	std	Y+8, r24	; 0x08
    49e6:	1f 82       	std	Y+7, r1	; 0x07
    49e8:	1e 82       	std	Y+6, r1	; 0x06
    49ea:	2f bf       	out	0x3f, r18	; 63
    49ec:	8d 2d       	mov	r24, r13
    49ee:	df 91       	pop	r29
    49f0:	cf 91       	pop	r28
    49f2:	1f 91       	pop	r17
    49f4:	0f 91       	pop	r16
    49f6:	ff 90       	pop	r15
    49f8:	ef 90       	pop	r14
    49fa:	df 90       	pop	r13
    49fc:	cf 90       	pop	r12
    49fe:	08 95       	ret

00004a00 <marqueeUpdate>:
    4a00:	2f 92       	push	r2
    4a02:	3f 92       	push	r3
    4a04:	4f 92       	push	r4
    4a06:	5f 92       	push	r5
    4a08:	6f 92       	push	r6
    4a0a:	7f 92       	push	r7
    4a0c:	8f 92       	push	r8
    4a0e:	9f 92       	push	r9
    4a10:	af 92       	push	r10
    4a12:	bf 92       	push	r11
    4a14:	cf 92       	push	r12
    4a16:	df 92       	push	r13
    4a18:	ef 92       	push	r14
    4a1a:	ff 92       	push	r15
    4a1c:	0f 93       	push	r16
    4a1e:	1f 93       	push	r17
    4a20:	cf 93       	push	r28
    4a22:	df 93       	push	r29
    4a24:	38 2e       	mov	r3, r24
    4a26:	29 2e       	mov	r2, r25
    4a28:	2a 01       	movw	r4, r20
    4a2a:	3b 01       	movw	r6, r22
    4a2c:	c8 2f       	mov	r28, r24
    4a2e:	d9 2f       	mov	r29, r25
    4a30:	0c 81       	ldd	r16, Y+4	; 0x04
    4a32:	1d 81       	ldd	r17, Y+5	; 0x05
    4a34:	8e 81       	ldd	r24, Y+6	; 0x06
    4a36:	9f 81       	ldd	r25, Y+7	; 0x07
    4a38:	08 0f       	add	r16, r24
    4a3a:	19 1f       	adc	r17, r25
    4a3c:	f8 01       	movw	r30, r16
    4a3e:	80 80       	ld	r8, Z
    4a40:	8c 89       	ldd	r24, Y+20	; 0x14
    4a42:	86 95       	lsr	r24
    4a44:	81 70       	andi	r24, 0x01	; 1
    4a46:	88 20       	and	r8, r8
    4a48:	29 f4       	brne	.+10     	; 0x4a54 <marqueeUpdate+0x54>
    4a4a:	a8 88       	ldd	r10, Y+16	; 0x10
    4a4c:	b9 88       	ldd	r11, Y+17	; 0x11
    4a4e:	ca 88       	ldd	r12, Y+18	; 0x12
    4a50:	db 88       	ldd	r13, Y+19	; 0x13
    4a52:	04 c0       	rjmp	.+8      	; 0x4a5c <marqueeUpdate+0x5c>
    4a54:	ac 84       	ldd	r10, Y+12	; 0x0c
    4a56:	bd 84       	ldd	r11, Y+13	; 0x0d
    4a58:	ce 84       	ldd	r12, Y+14	; 0x0e
    4a5a:	df 84       	ldd	r13, Y+15	; 0x0f
    4a5c:	88 23       	and	r24, r24
    4a5e:	d1 f4       	brne	.+52     	; 0x4a94 <marqueeUpdate+0x94>
    4a60:	88 20       	and	r8, r8
    4a62:	c1 f0       	breq	.+48     	; 0x4a94 <marqueeUpdate+0x94>
    4a64:	f8 01       	movw	r30, r16
    4a66:	32 91       	ld	r19, -Z
    4a68:	8f 01       	movw	r16, r30
    4a6a:	0f 5f       	subi	r16, 0xFF	; 255
    4a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6e:	4a 81       	ldd	r20, Y+2	; 0x02
    4a70:	5b 81       	ldd	r21, Y+3	; 0x03
    4a72:	f8 01       	movw	r30, r16
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	07 c0       	rjmp	.+14     	; 0x4a88 <marqueeUpdate+0x88>
    4a7a:	20 81       	ld	r18, Z
    4a7c:	22 23       	and	r18, r18
    4a7e:	51 f0       	breq	.+20     	; 0x4a94 <marqueeUpdate+0x94>
    4a80:	23 17       	cp	r18, r19
    4a82:	41 f4       	brne	.+16     	; 0x4a94 <marqueeUpdate+0x94>
    4a84:	31 96       	adiw	r30, 0x01	; 1
    4a86:	01 96       	adiw	r24, 0x01	; 1
    4a88:	84 17       	cp	r24, r20
    4a8a:	95 07       	cpc	r25, r21
    4a8c:	b0 f3       	brcs	.-20     	; 0x4a7a <marqueeUpdate+0x7a>
    4a8e:	99 24       	eor	r9, r9
    4a90:	9a 94       	dec	r9
    4a92:	01 c0       	rjmp	.+2      	; 0x4a96 <marqueeUpdate+0x96>
    4a94:	99 24       	eor	r9, r9
    4a96:	8c 89       	ldd	r24, Y+20	; 0x14
    4a98:	86 95       	lsr	r24
    4a9a:	81 70       	andi	r24, 0x01	; 1
    4a9c:	29 2d       	mov	r18, r9
    4a9e:	33 27       	eor	r19, r19
    4aa0:	27 fd       	sbrc	r18, 7
    4aa2:	30 95       	com	r19
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	28 17       	cp	r18, r24
    4aa8:	39 07       	cpc	r19, r25
    4aaa:	c1 f0       	breq	.+48     	; 0x4adc <marqueeUpdate+0xdc>
    4aac:	a6 01       	movw	r20, r12
    4aae:	95 01       	movw	r18, r10
    4ab0:	62 e0       	ldi	r22, 0x02	; 2
    4ab2:	56 95       	lsr	r21
    4ab4:	47 95       	ror	r20
    4ab6:	37 95       	ror	r19
    4ab8:	27 95       	ror	r18
    4aba:	6a 95       	dec	r22
    4abc:	d1 f7       	brne	.-12     	; 0x4ab2 <marqueeUpdate+0xb2>
    4abe:	99 2d       	mov	r25, r9
    4ac0:	92 70       	andi	r25, 0x02	; 2
    4ac2:	8c 89       	ldd	r24, Y+20	; 0x14
    4ac4:	8d 7f       	andi	r24, 0xFD	; 253
    4ac6:	89 2b       	or	r24, r25
    4ac8:	8c 8b       	std	Y+20, r24	; 0x14
    4aca:	99 20       	and	r9, r9
    4acc:	19 f0       	breq	.+6      	; 0x4ad4 <marqueeUpdate+0xd4>
    4ace:	59 01       	movw	r10, r18
    4ad0:	6a 01       	movw	r12, r20
    4ad2:	04 c0       	rjmp	.+8      	; 0x4adc <marqueeUpdate+0xdc>
    4ad4:	a2 1a       	sub	r10, r18
    4ad6:	b3 0a       	sbc	r11, r19
    4ad8:	c4 0a       	sbc	r12, r20
    4ada:	d5 0a       	sbc	r13, r21
    4adc:	ee 24       	eor	r14, r14
    4ade:	ff 24       	eor	r15, r15
    4ae0:	18 c0       	rjmp	.+48     	; 0x4b12 <marqueeUpdate+0x112>
    4ae2:	c7 01       	movw	r24, r14
    4ae4:	88 0f       	add	r24, r24
    4ae6:	99 1f       	adc	r25, r25
    4ae8:	e8 81       	ld	r30, Y
    4aea:	f9 81       	ldd	r31, Y+1	; 0x01
    4aec:	e8 0f       	add	r30, r24
    4aee:	f9 1f       	adc	r31, r25
    4af0:	85 91       	lpm	r24, Z+
    4af2:	94 91       	lpm	r25, Z+
    4af4:	99 20       	and	r9, r9
    4af6:	39 f4       	brne	.+14     	; 0x4b06 <marqueeUpdate+0x106>
    4af8:	f8 01       	movw	r30, r16
    4afa:	60 81       	ld	r22, Z
    4afc:	66 23       	and	r22, r22
    4afe:	19 f0       	breq	.+6      	; 0x4b06 <marqueeUpdate+0x106>
    4b00:	0f 5f       	subi	r16, 0xFF	; 255
    4b02:	1f 4f       	sbci	r17, 0xFF	; 255
    4b04:	01 c0       	rjmp	.+2      	; 0x4b08 <marqueeUpdate+0x108>
    4b06:	60 e2       	ldi	r22, 0x20	; 32
    4b08:	0e 94 84 23 	call	0x4708	; 0x4708 <segled_put_char>
    4b0c:	08 94       	sec
    4b0e:	e1 1c       	adc	r14, r1
    4b10:	f1 1c       	adc	r15, r1
    4b12:	8a 81       	ldd	r24, Y+2	; 0x02
    4b14:	9b 81       	ldd	r25, Y+3	; 0x03
    4b16:	e8 16       	cp	r14, r24
    4b18:	f9 06       	cpc	r15, r25
    4b1a:	18 f3       	brcs	.-58     	; 0x4ae2 <marqueeUpdate+0xe2>
    4b1c:	88 20       	and	r8, r8
    4b1e:	b1 f4       	brne	.+44     	; 0x4b4c <marqueeUpdate+0x14c>
    4b20:	1f 82       	std	Y+7, r1	; 0x07
    4b22:	1e 82       	std	Y+6, r1	; 0x06
    4b24:	88 89       	ldd	r24, Y+16	; 0x10
    4b26:	99 89       	ldd	r25, Y+17	; 0x11
    4b28:	aa 89       	ldd	r26, Y+18	; 0x12
    4b2a:	bb 89       	ldd	r27, Y+19	; 0x13
    4b2c:	00 97       	sbiw	r24, 0x00	; 0
    4b2e:	a1 05       	cpc	r26, r1
    4b30:	b1 05       	cpc	r27, r1
    4b32:	29 f0       	breq	.+10     	; 0x4b3e <marqueeUpdate+0x13e>
    4b34:	ec 81       	ldd	r30, Y+4	; 0x04
    4b36:	fd 81       	ldd	r31, Y+5	; 0x05
    4b38:	80 81       	ld	r24, Z
    4b3a:	88 23       	and	r24, r24
    4b3c:	19 f4       	brne	.+6      	; 0x4b44 <marqueeUpdate+0x144>
    4b3e:	8c 89       	ldd	r24, Y+20	; 0x14
    4b40:	8e 7f       	andi	r24, 0xFE	; 254
    4b42:	02 c0       	rjmp	.+4      	; 0x4b48 <marqueeUpdate+0x148>
    4b44:	8c 89       	ldd	r24, Y+20	; 0x14
    4b46:	8d 7f       	andi	r24, 0xFD	; 253
    4b48:	8c 8b       	std	Y+20, r24	; 0x14
    4b4a:	07 c0       	rjmp	.+14     	; 0x4b5a <marqueeUpdate+0x15a>
    4b4c:	99 20       	and	r9, r9
    4b4e:	29 f4       	brne	.+10     	; 0x4b5a <marqueeUpdate+0x15a>
    4b50:	8e 81       	ldd	r24, Y+6	; 0x06
    4b52:	9f 81       	ldd	r25, Y+7	; 0x07
    4b54:	01 96       	adiw	r24, 0x01	; 1
    4b56:	9f 83       	std	Y+7, r25	; 0x07
    4b58:	8e 83       	std	Y+6, r24	; 0x06
    4b5a:	8c 89       	ldd	r24, Y+20	; 0x14
    4b5c:	80 ff       	sbrs	r24, 0
    4b5e:	0a c0       	rjmp	.+20     	; 0x4b74 <marqueeUpdate+0x174>
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	95 e2       	ldi	r25, 0x25	; 37
    4b64:	63 2d       	mov	r22, r3
    4b66:	72 2d       	mov	r23, r2
    4b68:	a3 01       	movw	r20, r6
    4b6a:	92 01       	movw	r18, r4
    4b6c:	86 01       	movw	r16, r12
    4b6e:	75 01       	movw	r14, r10
    4b70:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <scheduleJob>
    4b74:	df 91       	pop	r29
    4b76:	cf 91       	pop	r28
    4b78:	1f 91       	pop	r17
    4b7a:	0f 91       	pop	r16
    4b7c:	ff 90       	pop	r15
    4b7e:	ef 90       	pop	r14
    4b80:	df 90       	pop	r13
    4b82:	cf 90       	pop	r12
    4b84:	bf 90       	pop	r11
    4b86:	af 90       	pop	r10
    4b88:	9f 90       	pop	r9
    4b8a:	8f 90       	pop	r8
    4b8c:	7f 90       	pop	r7
    4b8e:	6f 90       	pop	r6
    4b90:	5f 90       	pop	r5
    4b92:	4f 90       	pop	r4
    4b94:	3f 90       	pop	r3
    4b96:	2f 90       	pop	r2
    4b98:	08 95       	ret

00004b9a <ticks_per_ms>:
    4b9a:	ef 92       	push	r14
    4b9c:	ff 92       	push	r15
    4b9e:	0f 93       	push	r16
    4ba0:	1f 93       	push	r17
    4ba2:	7a 01       	movw	r14, r20
    4ba4:	20 91 04 02 	lds	r18, 0x0204
    4ba8:	30 91 05 02 	lds	r19, 0x0205
    4bac:	40 e0       	ldi	r20, 0x00	; 0
    4bae:	50 e0       	ldi	r21, 0x00	; 0
    4bb0:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__mulsi3>
    4bb4:	00 e0       	ldi	r16, 0x00	; 0
    4bb6:	10 e0       	ldi	r17, 0x00	; 0
    4bb8:	a8 01       	movw	r20, r16
    4bba:	97 01       	movw	r18, r14
    4bbc:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <__udivmodsi4>
    4bc0:	ca 01       	movw	r24, r20
    4bc2:	b9 01       	movw	r22, r18
    4bc4:	1f 91       	pop	r17
    4bc6:	0f 91       	pop	r16
    4bc8:	ff 90       	pop	r15
    4bca:	ef 90       	pop	r14
    4bcc:	08 95       	ret

00004bce <delay_cycles>:
    4bce:	61 30       	cpi	r22, 0x01	; 1
    4bd0:	23 e0       	ldi	r18, 0x03	; 3
    4bd2:	72 07       	cpc	r23, r18
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	82 07       	cpc	r24, r18
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	92 07       	cpc	r25, r18
    4bdc:	48 f4       	brcc	.+18     	; 0x4bf0 <delay_cycles+0x22>
    4bde:	23 e0       	ldi	r18, 0x03	; 3
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	40 e0       	ldi	r20, 0x00	; 0
    4be4:	50 e0       	ldi	r21, 0x00	; 0
    4be6:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <__udivmodsi4>
    4bea:	2a 95       	dec	r18
    4bec:	f1 f7       	brne	.-4      	; 0x4bea <delay_cycles+0x1c>
    4bee:	08 95       	ret
    4bf0:	9b 01       	movw	r18, r22
    4bf2:	ac 01       	movw	r20, r24
    4bf4:	82 e0       	ldi	r24, 0x02	; 2
    4bf6:	56 95       	lsr	r21
    4bf8:	47 95       	ror	r20
    4bfa:	37 95       	ror	r19
    4bfc:	27 95       	ror	r18
    4bfe:	8a 95       	dec	r24
    4c00:	d1 f7       	brne	.-12     	; 0x4bf6 <delay_cycles+0x28>
    4c02:	da 01       	movw	r26, r20
    4c04:	c9 01       	movw	r24, r18
    4c06:	20 30       	cpi	r18, 0x00	; 0
    4c08:	60 e0       	ldi	r22, 0x00	; 0
    4c0a:	36 07       	cpc	r19, r22
    4c0c:	61 e0       	ldi	r22, 0x01	; 1
    4c0e:	46 07       	cpc	r20, r22
    4c10:	60 e0       	ldi	r22, 0x00	; 0
    4c12:	56 07       	cpc	r21, r22
    4c14:	20 f0       	brcs	.+8      	; 0x4c1e <delay_cycles+0x50>
    4c16:	8f ef       	ldi	r24, 0xFF	; 255
    4c18:	9f ef       	ldi	r25, 0xFF	; 255
    4c1a:	a0 e0       	ldi	r26, 0x00	; 0
    4c1c:	b0 e0       	ldi	r27, 0x00	; 0
    4c1e:	fc 01       	movw	r30, r24
    4c20:	31 97       	sbiw	r30, 0x01	; 1
    4c22:	f1 f7       	brne	.-4      	; 0x4c20 <delay_cycles+0x52>
    4c24:	a0 e0       	ldi	r26, 0x00	; 0
    4c26:	b0 e0       	ldi	r27, 0x00	; 0
    4c28:	28 1b       	sub	r18, r24
    4c2a:	39 0b       	sbc	r19, r25
    4c2c:	4a 0b       	sbc	r20, r26
    4c2e:	5b 0b       	sbc	r21, r27
    4c30:	41 f7       	brne	.-48     	; 0x4c02 <delay_cycles+0x34>
    4c32:	08 95       	ret

00004c34 <nullTimerCompareCallback>:
    4c34:	08 95       	ret

00004c36 <clockCallback>:
    4c36:	80 91 83 03 	lds	r24, 0x0383
    4c3a:	90 91 84 03 	lds	r25, 0x0384
    4c3e:	a0 91 85 03 	lds	r26, 0x0385
    4c42:	b0 91 86 03 	lds	r27, 0x0386
    4c46:	01 96       	adiw	r24, 0x01	; 1
    4c48:	a1 1d       	adc	r26, r1
    4c4a:	b1 1d       	adc	r27, r1
    4c4c:	80 93 83 03 	sts	0x0383, r24
    4c50:	90 93 84 03 	sts	0x0384, r25
    4c54:	a0 93 85 03 	sts	0x0385, r26
    4c58:	b0 93 86 03 	sts	0x0386, r27
    4c5c:	08 95       	ret

00004c5e <__timerPrescalerIndex>:
    4c5e:	fc 01       	movw	r30, r24
    4c60:	37 96       	adiw	r30, 0x07	; 7
    4c62:	e4 91       	lpm	r30, Z+
    4c64:	ee 23       	and	r30, r30
    4c66:	21 f4       	brne	.+8      	; 0x4c70 <__timerPrescalerIndex+0x12>
    4c68:	26 e0       	ldi	r18, 0x06	; 6
    4c6a:	84 e1       	ldi	r24, 0x14	; 20
    4c6c:	95 e0       	ldi	r25, 0x05	; 5
    4c6e:	03 c0       	rjmp	.+6      	; 0x4c76 <__timerPrescalerIndex+0x18>
    4c70:	28 e0       	ldi	r18, 0x08	; 8
    4c72:	80 e2       	ldi	r24, 0x20	; 32
    4c74:	95 e0       	ldi	r25, 0x05	; 5
    4c76:	42 2f       	mov	r20, r18
    4c78:	41 50       	subi	r20, 0x01	; 1
    4c7a:	24 2f       	mov	r18, r20
    4c7c:	33 27       	eor	r19, r19
    4c7e:	27 fd       	sbrc	r18, 7
    4c80:	30 95       	com	r19
    4c82:	22 0f       	add	r18, r18
    4c84:	33 1f       	adc	r19, r19
    4c86:	28 0f       	add	r18, r24
    4c88:	39 1f       	adc	r19, r25
    4c8a:	0e c0       	rjmp	.+28     	; 0x4ca8 <__timerPrescalerIndex+0x4a>
    4c8c:	f9 01       	movw	r30, r18
    4c8e:	85 91       	lpm	r24, Z+
    4c90:	94 91       	lpm	r25, Z+
    4c92:	22 50       	subi	r18, 0x02	; 2
    4c94:	30 40       	sbci	r19, 0x00	; 0
    4c96:	86 17       	cp	r24, r22
    4c98:	97 07       	cpc	r25, r23
    4c9a:	29 f4       	brne	.+10     	; 0x4ca6 <__timerPrescalerIndex+0x48>
    4c9c:	24 2f       	mov	r18, r20
    4c9e:	33 27       	eor	r19, r19
    4ca0:	27 fd       	sbrc	r18, 7
    4ca2:	30 95       	com	r19
    4ca4:	05 c0       	rjmp	.+10     	; 0x4cb0 <__timerPrescalerIndex+0x52>
    4ca6:	41 50       	subi	r20, 0x01	; 1
    4ca8:	47 ff       	sbrs	r20, 7
    4caa:	f0 cf       	rjmp	.-32     	; 0x4c8c <__timerPrescalerIndex+0x2e>
    4cac:	2f ef       	ldi	r18, 0xFF	; 255
    4cae:	3f ef       	ldi	r19, 0xFF	; 255
    4cb0:	c9 01       	movw	r24, r18
    4cb2:	08 95       	ret

00004cb4 <timerGetClosestPrescale>:
    4cb4:	0f 93       	push	r16
    4cb6:	1f 93       	push	r17
    4cb8:	cf 93       	push	r28
    4cba:	df 93       	push	r29
    4cbc:	8c 01       	movw	r16, r24
    4cbe:	24 e0       	ldi	r18, 0x04	; 4
    4cc0:	61 30       	cpi	r22, 0x01	; 1
    4cc2:	72 07       	cpc	r23, r18
    4cc4:	10 f0       	brcs	.+4      	; 0x4cca <timerGetClosestPrescale+0x16>
    4cc6:	60 e0       	ldi	r22, 0x00	; 0
    4cc8:	74 e0       	ldi	r23, 0x04	; 4
    4cca:	eb 01       	movw	r28, r22
    4ccc:	61 15       	cp	r22, r1
    4cce:	71 05       	cpc	r23, r1
    4cd0:	21 f4       	brne	.+8      	; 0x4cda <timerGetClosestPrescale+0x26>
    4cd2:	c1 e0       	ldi	r28, 0x01	; 1
    4cd4:	d0 e0       	ldi	r29, 0x00	; 0
    4cd6:	01 c0       	rjmp	.+2      	; 0x4cda <timerGetClosestPrescale+0x26>
    4cd8:	21 96       	adiw	r28, 0x01	; 1
    4cda:	c8 01       	movw	r24, r16
    4cdc:	be 01       	movw	r22, r28
    4cde:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__timerPrescalerIndex>
    4ce2:	8f 5f       	subi	r24, 0xFF	; 255
    4ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ce6:	c1 f3       	breq	.-16     	; 0x4cd8 <timerGetClosestPrescale+0x24>
    4ce8:	ce 01       	movw	r24, r28
    4cea:	df 91       	pop	r29
    4cec:	cf 91       	pop	r28
    4cee:	1f 91       	pop	r17
    4cf0:	0f 91       	pop	r16
    4cf2:	08 95       	ret

00004cf4 <timerGetCounter>:
    4cf4:	9c 01       	movw	r18, r24
    4cf6:	02 96       	adiw	r24, 0x02	; 2
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	a5 91       	lpm	r26, Z+
    4cfc:	b4 91       	lpm	r27, Z+
    4cfe:	2a 5f       	subi	r18, 0xFA	; 250
    4d00:	3f 4f       	sbci	r19, 0xFF	; 255
    4d02:	f9 01       	movw	r30, r18
    4d04:	84 91       	lpm	r24, Z+
    4d06:	88 23       	and	r24, r24
    4d08:	19 f0       	breq	.+6      	; 0x4d10 <timerGetCounter+0x1c>
    4d0a:	2d 91       	ld	r18, X+
    4d0c:	3c 91       	ld	r19, X
    4d0e:	03 c0       	rjmp	.+6      	; 0x4d16 <timerGetCounter+0x22>
    4d10:	8c 91       	ld	r24, X
    4d12:	28 2f       	mov	r18, r24
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	c9 01       	movw	r24, r18
    4d18:	08 95       	ret

00004d1a <compareSetOutputMode>:
    4d1a:	9c 01       	movw	r18, r24
    4d1c:	0b 96       	adiw	r24, 0x0b	; 11
    4d1e:	fc 01       	movw	r30, r24
    4d20:	a5 91       	lpm	r26, Z+
    4d22:	b4 91       	lpm	r27, Z+
    4d24:	23 5f       	subi	r18, 0xF3	; 243
    4d26:	3f 4f       	sbci	r19, 0xFF	; 255
    4d28:	f9 01       	movw	r30, r18
    4d2a:	24 91       	lpm	r18, Z+
    4d2c:	70 e0       	ldi	r23, 0x00	; 0
    4d2e:	02 2e       	mov	r0, r18
    4d30:	02 c0       	rjmp	.+4      	; 0x4d36 <compareSetOutputMode+0x1c>
    4d32:	66 0f       	add	r22, r22
    4d34:	77 1f       	adc	r23, r23
    4d36:	0a 94       	dec	r0
    4d38:	e2 f7       	brpl	.-8      	; 0x4d32 <compareSetOutputMode+0x18>
    4d3a:	81 e0       	ldi	r24, 0x01	; 1
    4d3c:	90 e0       	ldi	r25, 0x00	; 0
    4d3e:	02 c0       	rjmp	.+4      	; 0x4d44 <compareSetOutputMode+0x2a>
    4d40:	88 0f       	add	r24, r24
    4d42:	99 1f       	adc	r25, r25
    4d44:	2a 95       	dec	r18
    4d46:	e2 f7       	brpl	.-8      	; 0x4d40 <compareSetOutputMode+0x26>
    4d48:	28 2f       	mov	r18, r24
    4d4a:	22 0f       	add	r18, r18
    4d4c:	28 2b       	or	r18, r24
    4d4e:	9c 91       	ld	r25, X
    4d50:	82 2f       	mov	r24, r18
    4d52:	86 23       	and	r24, r22
    4d54:	20 95       	com	r18
    4d56:	29 23       	and	r18, r25
    4d58:	82 2b       	or	r24, r18
    4d5a:	8c 93       	st	X, r24
    4d5c:	08 95       	ret

00004d5e <compareGetOutputMode>:
    4d5e:	9c 01       	movw	r18, r24
    4d60:	0b 96       	adiw	r24, 0x0b	; 11
    4d62:	fc 01       	movw	r30, r24
    4d64:	a5 91       	lpm	r26, Z+
    4d66:	b4 91       	lpm	r27, Z+
    4d68:	23 5f       	subi	r18, 0xF3	; 243
    4d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6c:	f9 01       	movw	r30, r18
    4d6e:	44 91       	lpm	r20, Z+
    4d70:	21 e0       	ldi	r18, 0x01	; 1
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	04 2e       	mov	r0, r20
    4d76:	02 c0       	rjmp	.+4      	; 0x4d7c <compareGetOutputMode+0x1e>
    4d78:	22 0f       	add	r18, r18
    4d7a:	33 1f       	adc	r19, r19
    4d7c:	0a 94       	dec	r0
    4d7e:	e2 f7       	brpl	.-8      	; 0x4d78 <compareGetOutputMode+0x1a>
    4d80:	82 2f       	mov	r24, r18
    4d82:	88 0f       	add	r24, r24
    4d84:	82 2b       	or	r24, r18
    4d86:	2c 91       	ld	r18, X
    4d88:	82 23       	and	r24, r18
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	02 c0       	rjmp	.+4      	; 0x4d92 <compareGetOutputMode+0x34>
    4d8e:	95 95       	asr	r25
    4d90:	87 95       	ror	r24
    4d92:	4a 95       	dec	r20
    4d94:	e2 f7       	brpl	.-8      	; 0x4d8e <compareGetOutputMode+0x30>
    4d96:	08 95       	ret

00004d98 <__timer_overflowService>:
    4d98:	fc 01       	movw	r30, r24
    4d9a:	a5 91       	lpm	r26, Z+
    4d9c:	b4 91       	lpm	r27, Z+
    4d9e:	12 96       	adiw	r26, 0x02	; 2
    4da0:	ed 91       	ld	r30, X+
    4da2:	fc 91       	ld	r31, X
    4da4:	13 97       	sbiw	r26, 0x03	; 3
    4da6:	30 97       	sbiw	r30, 0x00	; 0
    4da8:	29 f0       	breq	.+10     	; 0x4db4 <__timer_overflowService+0x1c>
    4daa:	14 96       	adiw	r26, 0x04	; 4
    4dac:	6d 91       	ld	r22, X+
    4dae:	7c 91       	ld	r23, X
    4db0:	15 97       	sbiw	r26, 0x05	; 5
    4db2:	09 95       	icall
    4db4:	08 95       	ret

00004db6 <__timer_captureService>:
    4db6:	fc 01       	movw	r30, r24
    4db8:	a5 91       	lpm	r26, Z+
    4dba:	b4 91       	lpm	r27, Z+
    4dbc:	16 96       	adiw	r26, 0x06	; 6
    4dbe:	ed 91       	ld	r30, X+
    4dc0:	fc 91       	ld	r31, X
    4dc2:	17 97       	sbiw	r26, 0x07	; 7
    4dc4:	30 97       	sbiw	r30, 0x00	; 0
    4dc6:	29 f0       	breq	.+10     	; 0x4dd2 <__timer_captureService+0x1c>
    4dc8:	18 96       	adiw	r26, 0x08	; 8
    4dca:	6d 91       	ld	r22, X+
    4dcc:	7c 91       	ld	r23, X
    4dce:	19 97       	sbiw	r26, 0x09	; 9
    4dd0:	09 95       	icall
    4dd2:	08 95       	ret

00004dd4 <__timer_compareService>:
    4dd4:	fc 01       	movw	r30, r24
    4dd6:	a5 91       	lpm	r26, Z+
    4dd8:	b4 91       	lpm	r27, Z+
    4dda:	ed 91       	ld	r30, X+
    4ddc:	fc 91       	ld	r31, X
    4dde:	11 97       	sbiw	r26, 0x01	; 1
    4de0:	30 97       	sbiw	r30, 0x00	; 0
    4de2:	29 f0       	breq	.+10     	; 0x4dee <__timer_compareService+0x1a>
    4de4:	12 96       	adiw	r26, 0x02	; 2
    4de6:	6d 91       	ld	r22, X+
    4de8:	7c 91       	ld	r23, X
    4dea:	13 97       	sbiw	r26, 0x03	; 3
    4dec:	09 95       	icall
    4dee:	08 95       	ret

00004df0 <getError>:
    4df0:	80 91 14 0c 	lds	r24, 0x0C14
    4df4:	08 95       	ret

00004df6 <setErrorLog>:
    4df6:	90 93 18 0c 	sts	0x0C18, r25
    4dfa:	80 93 17 0c 	sts	0x0C17, r24
    4dfe:	08 95       	ret

00004e00 <__error_flash>:
    4e00:	8f 92       	push	r8
    4e02:	9f 92       	push	r9
    4e04:	af 92       	push	r10
    4e06:	bf 92       	push	r11
    4e08:	cf 92       	push	r12
    4e0a:	df 92       	push	r13
    4e0c:	ef 92       	push	r14
    4e0e:	ff 92       	push	r15
    4e10:	0f 93       	push	r16
    4e12:	1f 93       	push	r17
    4e14:	cf 93       	push	r28
    4e16:	df 93       	push	r29
    4e18:	98 2e       	mov	r9, r24
    4e1a:	89 2e       	mov	r8, r25
    4e1c:	5a 01       	movw	r10, r20
    4e1e:	6b 01       	movw	r12, r22
    4e20:	c8 2f       	mov	r28, r24
    4e22:	d9 2f       	mov	r29, r25
    4e24:	89 81       	ldd	r24, Y+1	; 0x01
    4e26:	88 23       	and	r24, r24
    4e28:	41 f4       	brne	.+16     	; 0x4e3a <__error_flash+0x3a>
    4e2a:	88 81       	ld	r24, Y
    4e2c:	18 16       	cp	r1, r24
    4e2e:	14 f4       	brge	.+4      	; 0x4e34 <__error_flash+0x34>
    4e30:	88 81       	ld	r24, Y
    4e32:	02 c0       	rjmp	.+4      	; 0x4e38 <__error_flash+0x38>
    4e34:	88 81       	ld	r24, Y
    4e36:	81 95       	neg	r24
    4e38:	89 83       	std	Y+1, r24	; 0x01
    4e3a:	88 81       	ld	r24, Y
    4e3c:	87 fd       	sbrc	r24, 7
    4e3e:	08 c0       	rjmp	.+16     	; 0x4e50 <__error_flash+0x50>
    4e40:	e0 e2       	ldi	r30, 0x20	; 32
    4e42:	ee 2e       	mov	r14, r30
    4e44:	e1 ea       	ldi	r30, 0xA1	; 161
    4e46:	fe 2e       	mov	r15, r30
    4e48:	e7 e0       	ldi	r30, 0x07	; 7
    4e4a:	0e 2f       	mov	r16, r30
    4e4c:	11 2d       	mov	r17, r1
    4e4e:	07 c0       	rjmp	.+14     	; 0x4e5e <__error_flash+0x5e>
    4e50:	70 e9       	ldi	r23, 0x90	; 144
    4e52:	e7 2e       	mov	r14, r23
    4e54:	70 ed       	ldi	r23, 0xD0	; 208
    4e56:	f7 2e       	mov	r15, r23
    4e58:	73 e0       	ldi	r23, 0x03	; 3
    4e5a:	07 2f       	mov	r16, r23
    4e5c:	11 2d       	mov	r17, r1
    4e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e60:	80 ff       	sbrs	r24, 0
    4e62:	1d c0       	rjmp	.+58     	; 0x4e9e <__error_flash+0x9e>
    4e64:	80 91 11 0c 	lds	r24, 0x0C11
    4e68:	90 91 12 0c 	lds	r25, 0x0C12
    4e6c:	0e 94 c5 21 	call	0x438a	; 0x438a <pin_is_output>
    4e70:	88 23       	and	r24, r24
    4e72:	29 f0       	breq	.+10     	; 0x4e7e <__error_flash+0x7e>
    4e74:	81 e1       	ldi	r24, 0x11	; 17
    4e76:	9c e0       	ldi	r25, 0x0C	; 12
    4e78:	60 e0       	ldi	r22, 0x00	; 0
    4e7a:	0e 94 4f 22 	call	0x449e	; 0x449e <LED_set>
    4e7e:	89 81       	ldd	r24, Y+1	; 0x01
    4e80:	81 50       	subi	r24, 0x01	; 1
    4e82:	89 83       	std	Y+1, r24	; 0x01
    4e84:	89 81       	ldd	r24, Y+1	; 0x01
    4e86:	88 23       	and	r24, r24
    4e88:	39 f4       	brne	.+14     	; 0x4e98 <__error_flash+0x98>
    4e8a:	60 e8       	ldi	r22, 0x80	; 128
    4e8c:	e6 2e       	mov	r14, r22
    4e8e:	64 e8       	ldi	r22, 0x84	; 132
    4e90:	f6 2e       	mov	r15, r22
    4e92:	6e e1       	ldi	r22, 0x1E	; 30
    4e94:	06 2f       	mov	r16, r22
    4e96:	11 2d       	mov	r17, r1
    4e98:	8a 81       	ldd	r24, Y+2	; 0x02
    4e9a:	8e 7f       	andi	r24, 0xFE	; 254
    4e9c:	0f c0       	rjmp	.+30     	; 0x4ebc <__error_flash+0xbc>
    4e9e:	80 91 11 0c 	lds	r24, 0x0C11
    4ea2:	90 91 12 0c 	lds	r25, 0x0C12
    4ea6:	0e 94 c5 21 	call	0x438a	; 0x438a <pin_is_output>
    4eaa:	88 23       	and	r24, r24
    4eac:	29 f0       	breq	.+10     	; 0x4eb8 <__error_flash+0xb8>
    4eae:	81 e1       	ldi	r24, 0x11	; 17
    4eb0:	9c e0       	ldi	r25, 0x0C	; 12
    4eb2:	6f ef       	ldi	r22, 0xFF	; 255
    4eb4:	0e 94 4f 22 	call	0x449e	; 0x449e <LED_set>
    4eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eba:	81 60       	ori	r24, 0x01	; 1
    4ebc:	8a 83       	std	Y+2, r24	; 0x02
    4ebe:	80 e0       	ldi	r24, 0x00	; 0
    4ec0:	97 e2       	ldi	r25, 0x27	; 39
    4ec2:	69 2d       	mov	r22, r9
    4ec4:	78 2d       	mov	r23, r8
    4ec6:	a6 01       	movw	r20, r12
    4ec8:	95 01       	movw	r18, r10
    4eca:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <scheduleJob>
    4ece:	df 91       	pop	r29
    4ed0:	cf 91       	pop	r28
    4ed2:	1f 91       	pop	r17
    4ed4:	0f 91       	pop	r16
    4ed6:	ff 90       	pop	r15
    4ed8:	ef 90       	pop	r14
    4eda:	df 90       	pop	r13
    4edc:	cf 90       	pop	r12
    4ede:	bf 90       	pop	r11
    4ee0:	af 90       	pop	r10
    4ee2:	9f 90       	pop	r9
    4ee4:	8f 90       	pop	r8
    4ee6:	08 95       	ret

00004ee8 <__timerRead>:
    4ee8:	df 92       	push	r13
    4eea:	ef 92       	push	r14
    4eec:	ff 92       	push	r15
    4eee:	0f 93       	push	r16
    4ef0:	1f 93       	push	r17
    4ef2:	cf 93       	push	r28
    4ef4:	df 93       	push	r29
    4ef6:	9c 01       	movw	r18, r24
    4ef8:	eb 01       	movw	r28, r22
    4efa:	fc 01       	movw	r30, r24
    4efc:	a5 91       	lpm	r26, Z+
    4efe:	b4 91       	lpm	r27, Z+
    4f00:	1a 96       	adiw	r26, 0x0a	; 10
    4f02:	8c 91       	ld	r24, X
    4f04:	39 83       	std	Y+1, r19	; 0x01
    4f06:	28 83       	st	Y, r18
    4f08:	21 15       	cp	r18, r1
    4f0a:	31 05       	cpc	r19, r1
    4f0c:	39 f4       	brne	.+14     	; 0x4f1c <__timerRead+0x34>
    4f0e:	1a 82       	std	Y+2, r1	; 0x02
    4f10:	1b 82       	std	Y+3, r1	; 0x03
    4f12:	1c 82       	std	Y+4, r1	; 0x04
    4f14:	1d 82       	std	Y+5, r1	; 0x05
    4f16:	1f 82       	std	Y+7, r1	; 0x07
    4f18:	1e 82       	std	Y+6, r1	; 0x06
    4f1a:	b1 c0       	rjmp	.+354    	; 0x507e <__timerRead+0x196>
    4f1c:	84 30       	cpi	r24, 0x04	; 4
    4f1e:	39 f0       	breq	.+14     	; 0x4f2e <__timerRead+0x46>
    4f20:	89 30       	cpi	r24, 0x09	; 9
    4f22:	29 f0       	breq	.+10     	; 0x4f2e <__timerRead+0x46>
    4f24:	8b 30       	cpi	r24, 0x0B	; 11
    4f26:	19 f0       	breq	.+6      	; 0x4f2e <__timerRead+0x46>
    4f28:	8f 30       	cpi	r24, 0x0F	; 15
    4f2a:	09 f0       	breq	.+2      	; 0x4f2e <__timerRead+0x46>
    4f2c:	48 c0       	rjmp	.+144    	; 0x4fbe <__timerRead+0xd6>
    4f2e:	f9 01       	movw	r30, r18
    4f30:	77 96       	adiw	r30, 0x17	; 23
    4f32:	65 91       	lpm	r22, Z+
    4f34:	74 91       	lpm	r23, Z+
    4f36:	df b6       	in	r13, 0x3f	; 63
    4f38:	f8 94       	cli
    4f3a:	a2 e0       	ldi	r26, 0x02	; 2
    4f3c:	ea 2e       	mov	r14, r26
    4f3e:	f1 2c       	mov	r15, r1
    4f40:	e2 0e       	add	r14, r18
    4f42:	f3 1e       	adc	r15, r19
    4f44:	f7 01       	movw	r30, r14
    4f46:	a5 91       	lpm	r26, Z+
    4f48:	b4 91       	lpm	r27, Z+
    4f4a:	89 01       	movw	r16, r18
    4f4c:	0a 5f       	subi	r16, 0xFA	; 250
    4f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f50:	f8 01       	movw	r30, r16
    4f52:	84 91       	lpm	r24, Z+
    4f54:	88 23       	and	r24, r24
    4f56:	19 f0       	breq	.+6      	; 0x4f5e <__timerRead+0x76>
    4f58:	4d 91       	ld	r20, X+
    4f5a:	5c 91       	ld	r21, X
    4f5c:	03 c0       	rjmp	.+6      	; 0x4f64 <__timerRead+0x7c>
    4f5e:	8c 91       	ld	r24, X
    4f60:	48 2f       	mov	r20, r24
    4f62:	50 e0       	ldi	r21, 0x00	; 0
    4f64:	80 91 19 0c 	lds	r24, 0x0C19
    4f68:	90 91 1a 0c 	lds	r25, 0x0C1A
    4f6c:	28 17       	cp	r18, r24
    4f6e:	39 07       	cpc	r19, r25
    4f70:	29 f0       	breq	.+10     	; 0x4f7c <__timerRead+0x94>
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	a0 e0       	ldi	r26, 0x00	; 0
    4f78:	b0 e0       	ldi	r27, 0x00	; 0
    4f7a:	08 c0       	rjmp	.+16     	; 0x4f8c <__timerRead+0xa4>
    4f7c:	80 91 83 03 	lds	r24, 0x0383
    4f80:	90 91 84 03 	lds	r25, 0x0384
    4f84:	a0 91 85 03 	lds	r26, 0x0385
    4f88:	b0 91 86 03 	lds	r27, 0x0386
    4f8c:	8a 83       	std	Y+2, r24	; 0x02
    4f8e:	9b 83       	std	Y+3, r25	; 0x03
    4f90:	ac 83       	std	Y+4, r26	; 0x04
    4f92:	bd 83       	std	Y+5, r27	; 0x05
    4f94:	f7 01       	movw	r30, r14
    4f96:	a5 91       	lpm	r26, Z+
    4f98:	b4 91       	lpm	r27, Z+
    4f9a:	f8 01       	movw	r30, r16
    4f9c:	84 91       	lpm	r24, Z+
    4f9e:	88 23       	and	r24, r24
    4fa0:	19 f0       	breq	.+6      	; 0x4fa8 <__timerRead+0xc0>
    4fa2:	8d 91       	ld	r24, X+
    4fa4:	9c 91       	ld	r25, X
    4fa6:	02 c0       	rjmp	.+4      	; 0x4fac <__timerRead+0xc4>
    4fa8:	8c 91       	ld	r24, X
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	9f 83       	std	Y+7, r25	; 0x07
    4fae:	8e 83       	std	Y+6, r24	; 0x06
    4fb0:	84 17       	cp	r24, r20
    4fb2:	95 07       	cpc	r25, r21
    4fb4:	08 f4       	brcc	.+2      	; 0x4fb8 <__timerRead+0xd0>
    4fb6:	49 c0       	rjmp	.+146    	; 0x504a <__timerRead+0x162>
    4fb8:	cb 01       	movw	r24, r22
    4fba:	08 96       	adiw	r24, 0x08	; 8
    4fbc:	42 c0       	rjmp	.+132    	; 0x5042 <__timerRead+0x15a>
    4fbe:	df b6       	in	r13, 0x3f	; 63
    4fc0:	f8 94       	cli
    4fc2:	f2 e0       	ldi	r31, 0x02	; 2
    4fc4:	ef 2e       	mov	r14, r31
    4fc6:	f1 2c       	mov	r15, r1
    4fc8:	e2 0e       	add	r14, r18
    4fca:	f3 1e       	adc	r15, r19
    4fcc:	f7 01       	movw	r30, r14
    4fce:	a5 91       	lpm	r26, Z+
    4fd0:	b4 91       	lpm	r27, Z+
    4fd2:	89 01       	movw	r16, r18
    4fd4:	0a 5f       	subi	r16, 0xFA	; 250
    4fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd8:	f8 01       	movw	r30, r16
    4fda:	84 91       	lpm	r24, Z+
    4fdc:	88 23       	and	r24, r24
    4fde:	19 f0       	breq	.+6      	; 0x4fe6 <__timerRead+0xfe>
    4fe0:	4d 91       	ld	r20, X+
    4fe2:	5c 91       	ld	r21, X
    4fe4:	03 c0       	rjmp	.+6      	; 0x4fec <__timerRead+0x104>
    4fe6:	8c 91       	ld	r24, X
    4fe8:	48 2f       	mov	r20, r24
    4fea:	50 e0       	ldi	r21, 0x00	; 0
    4fec:	80 91 19 0c 	lds	r24, 0x0C19
    4ff0:	90 91 1a 0c 	lds	r25, 0x0C1A
    4ff4:	28 17       	cp	r18, r24
    4ff6:	39 07       	cpc	r19, r25
    4ff8:	29 f0       	breq	.+10     	; 0x5004 <__timerRead+0x11c>
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	a0 e0       	ldi	r26, 0x00	; 0
    5000:	b0 e0       	ldi	r27, 0x00	; 0
    5002:	08 c0       	rjmp	.+16     	; 0x5014 <__timerRead+0x12c>
    5004:	80 91 83 03 	lds	r24, 0x0383
    5008:	90 91 84 03 	lds	r25, 0x0384
    500c:	a0 91 85 03 	lds	r26, 0x0385
    5010:	b0 91 86 03 	lds	r27, 0x0386
    5014:	8a 83       	std	Y+2, r24	; 0x02
    5016:	9b 83       	std	Y+3, r25	; 0x03
    5018:	ac 83       	std	Y+4, r26	; 0x04
    501a:	bd 83       	std	Y+5, r27	; 0x05
    501c:	f7 01       	movw	r30, r14
    501e:	a5 91       	lpm	r26, Z+
    5020:	b4 91       	lpm	r27, Z+
    5022:	f8 01       	movw	r30, r16
    5024:	84 91       	lpm	r24, Z+
    5026:	88 23       	and	r24, r24
    5028:	19 f0       	breq	.+6      	; 0x5030 <__timerRead+0x148>
    502a:	8d 91       	ld	r24, X+
    502c:	9c 91       	ld	r25, X
    502e:	02 c0       	rjmp	.+4      	; 0x5034 <__timerRead+0x14c>
    5030:	8c 91       	ld	r24, X
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	9f 83       	std	Y+7, r25	; 0x07
    5036:	8e 83       	std	Y+6, r24	; 0x06
    5038:	84 17       	cp	r24, r20
    503a:	95 07       	cpc	r25, r21
    503c:	30 f0       	brcs	.+12     	; 0x504a <__timerRead+0x162>
    503e:	c9 01       	movw	r24, r18
    5040:	4c 96       	adiw	r24, 0x1c	; 28
    5042:	0e 94 c0 20 	call	0x4180	; 0x4180 <__portMaskGet>
    5046:	88 23       	and	r24, r24
    5048:	c9 f0       	breq	.+50     	; 0x507c <__timerRead+0x194>
    504a:	8a 81       	ldd	r24, Y+2	; 0x02
    504c:	9b 81       	ldd	r25, Y+3	; 0x03
    504e:	ac 81       	ldd	r26, Y+4	; 0x04
    5050:	bd 81       	ldd	r27, Y+5	; 0x05
    5052:	01 96       	adiw	r24, 0x01	; 1
    5054:	a1 1d       	adc	r26, r1
    5056:	b1 1d       	adc	r27, r1
    5058:	8a 83       	std	Y+2, r24	; 0x02
    505a:	9b 83       	std	Y+3, r25	; 0x03
    505c:	ac 83       	std	Y+4, r26	; 0x04
    505e:	bd 83       	std	Y+5, r27	; 0x05
    5060:	f7 01       	movw	r30, r14
    5062:	a5 91       	lpm	r26, Z+
    5064:	b4 91       	lpm	r27, Z+
    5066:	f8 01       	movw	r30, r16
    5068:	84 91       	lpm	r24, Z+
    506a:	88 23       	and	r24, r24
    506c:	19 f0       	breq	.+6      	; 0x5074 <__timerRead+0x18c>
    506e:	8d 91       	ld	r24, X+
    5070:	9c 91       	ld	r25, X
    5072:	02 c0       	rjmp	.+4      	; 0x5078 <__timerRead+0x190>
    5074:	8c 91       	ld	r24, X
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	9f 83       	std	Y+7, r25	; 0x07
    507a:	8e 83       	std	Y+6, r24	; 0x06
    507c:	df be       	out	0x3f, r13	; 63
    507e:	df 91       	pop	r29
    5080:	cf 91       	pop	r28
    5082:	1f 91       	pop	r17
    5084:	0f 91       	pop	r16
    5086:	ff 90       	pop	r15
    5088:	ef 90       	pop	r14
    508a:	df 90       	pop	r13
    508c:	08 95       	ret

0000508e <clockGetSnapshot>:
    508e:	bc 01       	movw	r22, r24
    5090:	80 91 19 0c 	lds	r24, 0x0C19
    5094:	90 91 1a 0c 	lds	r25, 0x0C1A
    5098:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__timerRead>
    509c:	08 95       	ret

0000509e <timerGetTicks>:
    509e:	0f 93       	push	r16
    50a0:	1f 93       	push	r17
    50a2:	df 93       	push	r29
    50a4:	cf 93       	push	r28
    50a6:	cd b7       	in	r28, 0x3d	; 61
    50a8:	de b7       	in	r29, 0x3e	; 62
    50aa:	28 97       	sbiw	r28, 0x08	; 8
    50ac:	0f b6       	in	r0, 0x3f	; 63
    50ae:	f8 94       	cli
    50b0:	de bf       	out	0x3e, r29	; 62
    50b2:	0f be       	out	0x3f, r0	; 63
    50b4:	cd bf       	out	0x3d, r28	; 61
    50b6:	8e 01       	movw	r16, r28
    50b8:	0f 5f       	subi	r16, 0xFF	; 255
    50ba:	1f 4f       	sbci	r17, 0xFF	; 255
    50bc:	b8 01       	movw	r22, r16
    50be:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__timerRead>
    50c2:	c8 01       	movw	r24, r16
    50c4:	0e 94 c3 29 	call	0x5386	; 0x5386 <timerSnapshotToTicks>
    50c8:	28 96       	adiw	r28, 0x08	; 8
    50ca:	0f b6       	in	r0, 0x3f	; 63
    50cc:	f8 94       	cli
    50ce:	de bf       	out	0x3e, r29	; 62
    50d0:	0f be       	out	0x3f, r0	; 63
    50d2:	cd bf       	out	0x3d, r28	; 61
    50d4:	cf 91       	pop	r28
    50d6:	df 91       	pop	r29
    50d8:	1f 91       	pop	r17
    50da:	0f 91       	pop	r16
    50dc:	08 95       	ret

000050de <clockGetus>:
    50de:	80 91 19 0c 	lds	r24, 0x0C19
    50e2:	90 91 1a 0c 	lds	r25, 0x0C1A
    50e6:	0e 94 4f 28 	call	0x509e	; 0x509e <timerGetTicks>
    50ea:	08 95       	ret

000050ec <setError>:
    50ec:	df 92       	push	r13
    50ee:	ef 92       	push	r14
    50f0:	ff 92       	push	r15
    50f2:	0f 93       	push	r16
    50f4:	1f 93       	push	r17
    50f6:	d8 2e       	mov	r13, r24
    50f8:	80 91 14 0c 	lds	r24, 0x0C14
    50fc:	88 23       	and	r24, r24
    50fe:	09 f0       	breq	.+2      	; 0x5102 <setError+0x16>
    5100:	5b c0       	rjmp	.+182    	; 0x51b8 <setError+0xcc>
    5102:	d0 92 14 0c 	sts	0x0C14, r13
    5106:	80 91 11 0c 	lds	r24, 0x0C11
    510a:	90 91 12 0c 	lds	r25, 0x0C12
    510e:	89 2b       	or	r24, r25
    5110:	99 f0       	breq	.+38     	; 0x5138 <setError+0x4c>
    5112:	80 91 19 0c 	lds	r24, 0x0C19
    5116:	90 91 1a 0c 	lds	r25, 0x0C1A
    511a:	89 2b       	or	r24, r25
    511c:	69 f0       	breq	.+26     	; 0x5138 <setError+0x4c>
    511e:	0e 94 6f 28 	call	0x50de	; 0x50de <clockGetus>
    5122:	9b 01       	movw	r18, r22
    5124:	ac 01       	movw	r20, r24
    5126:	80 e0       	ldi	r24, 0x00	; 0
    5128:	97 e2       	ldi	r25, 0x27	; 39
    512a:	64 e1       	ldi	r22, 0x14	; 20
    512c:	7c e0       	ldi	r23, 0x0C	; 12
    512e:	ee 24       	eor	r14, r14
    5130:	ff 24       	eor	r15, r15
    5132:	87 01       	movw	r16, r14
    5134:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <scheduleJob>
    5138:	80 91 17 0c 	lds	r24, 0x0C17
    513c:	90 91 18 0c 	lds	r25, 0x0C18
    5140:	00 97       	sbiw	r24, 0x00	; 0
    5142:	d1 f1       	breq	.+116    	; 0x51b8 <setError+0xcc>
    5144:	0e 94 72 22 	call	0x44e4	; 0x44e4 <rprintfInit>
    5148:	8c 01       	movw	r16, r24
    514a:	2d 2d       	mov	r18, r13
    514c:	33 27       	eor	r19, r19
    514e:	27 fd       	sbrc	r18, 7
    5150:	30 95       	com	r19
    5152:	d7 fe       	sbrs	r13, 7
    5154:	16 c0       	rjmp	.+44     	; 0x5182 <setError+0x96>
    5156:	00 d0       	rcall	.+0      	; 0x5158 <setError+0x6c>
    5158:	00 d0       	rcall	.+0      	; 0x515a <setError+0x6e>
    515a:	0f 92       	push	r0
    515c:	ed b7       	in	r30, 0x3d	; 61
    515e:	fe b7       	in	r31, 0x3e	; 62
    5160:	31 96       	adiw	r30, 0x01	; 1
    5162:	81 e0       	ldi	r24, 0x01	; 1
    5164:	ad b7       	in	r26, 0x3d	; 61
    5166:	be b7       	in	r27, 0x3e	; 62
    5168:	11 96       	adiw	r26, 0x01	; 1
    516a:	8c 93       	st	X, r24
    516c:	85 e5       	ldi	r24, 0x55	; 85
    516e:	95 e0       	ldi	r25, 0x05	; 5
    5170:	92 83       	std	Z+2, r25	; 0x02
    5172:	81 83       	std	Z+1, r24	; 0x01
    5174:	88 27       	eor	r24, r24
    5176:	99 27       	eor	r25, r25
    5178:	82 1b       	sub	r24, r18
    517a:	93 0b       	sbc	r25, r19
    517c:	94 83       	std	Z+4, r25	; 0x04
    517e:	83 83       	std	Z+3, r24	; 0x03
    5180:	11 c0       	rjmp	.+34     	; 0x51a4 <setError+0xb8>
    5182:	00 d0       	rcall	.+0      	; 0x5184 <setError+0x98>
    5184:	00 d0       	rcall	.+0      	; 0x5186 <setError+0x9a>
    5186:	0f 92       	push	r0
    5188:	ed b7       	in	r30, 0x3d	; 61
    518a:	fe b7       	in	r31, 0x3e	; 62
    518c:	31 96       	adiw	r30, 0x01	; 1
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	ad b7       	in	r26, 0x3d	; 61
    5192:	be b7       	in	r27, 0x3e	; 62
    5194:	11 96       	adiw	r26, 0x01	; 1
    5196:	8c 93       	st	X, r24
    5198:	86 e4       	ldi	r24, 0x46	; 70
    519a:	95 e0       	ldi	r25, 0x05	; 5
    519c:	92 83       	std	Z+2, r25	; 0x02
    519e:	81 83       	std	Z+1, r24	; 0x01
    51a0:	34 83       	std	Z+4, r19	; 0x04
    51a2:	23 83       	std	Z+3, r18	; 0x03
    51a4:	0e 94 cc 22 	call	0x4598	; 0x4598 <rprintf1RamRom>
    51a8:	0f 90       	pop	r0
    51aa:	0f 90       	pop	r0
    51ac:	0f 90       	pop	r0
    51ae:	0f 90       	pop	r0
    51b0:	0f 90       	pop	r0
    51b2:	c8 01       	movw	r24, r16
    51b4:	0e 94 72 22 	call	0x44e4	; 0x44e4 <rprintfInit>
    51b8:	1f 91       	pop	r17
    51ba:	0f 91       	pop	r16
    51bc:	ff 90       	pop	r15
    51be:	ef 90       	pop	r14
    51c0:	df 90       	pop	r13
    51c2:	08 95       	ret

000051c4 <compareDetach>:
    51c4:	cf 93       	push	r28
    51c6:	df 93       	push	r29
    51c8:	ec 01       	movw	r28, r24
    51ca:	22 96       	adiw	r28, 0x02	; 2
    51cc:	fe 01       	movw	r30, r28
    51ce:	94 91       	lpm	r25, Z+
    51d0:	22 97       	sbiw	r28, 0x02	; 2
    51d2:	8c e2       	ldi	r24, 0x2C	; 44
    51d4:	98 9f       	mul	r25, r24
    51d6:	f0 01       	movw	r30, r0
    51d8:	11 24       	eor	r1, r1
    51da:	ee 59       	subi	r30, 0x9E	; 158
    51dc:	fc 4f       	sbci	r31, 0xFC	; 252
    51de:	e4 91       	lpm	r30, Z+
    51e0:	ee 23       	and	r30, r30
    51e2:	71 f0       	breq	.+28     	; 0x5200 <compareDetach+0x3c>
    51e4:	ce 01       	movw	r24, r28
    51e6:	03 96       	adiw	r24, 0x03	; 3
    51e8:	0e 94 cd 20 	call	0x419a	; 0x419a <__portMaskClear>
    51ec:	ce 01       	movw	r24, r28
    51ee:	60 e0       	ldi	r22, 0x00	; 0
    51f0:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <compareSetOutputMode>
    51f4:	fe 01       	movw	r30, r28
    51f6:	a5 91       	lpm	r26, Z+
    51f8:	b4 91       	lpm	r27, Z+
    51fa:	1d 92       	st	X+, r1
    51fc:	1c 92       	st	X, r1
    51fe:	03 c0       	rjmp	.+6      	; 0x5206 <compareDetach+0x42>
    5200:	8d ef       	ldi	r24, 0xFD	; 253
    5202:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    5206:	df 91       	pop	r29
    5208:	cf 91       	pop	r28
    520a:	08 95       	ret

0000520c <compareSetThreshold>:
    520c:	cf 93       	push	r28
    520e:	df 93       	push	r29
    5210:	9c 01       	movw	r18, r24
    5212:	2e 5f       	subi	r18, 0xFE	; 254
    5214:	3f 4f       	sbci	r19, 0xFF	; 255
    5216:	f9 01       	movw	r30, r18
    5218:	84 91       	lpm	r24, Z+
    521a:	22 50       	subi	r18, 0x02	; 2
    521c:	30 40       	sbci	r19, 0x00	; 0
    521e:	9c e2       	ldi	r25, 0x2C	; 44
    5220:	89 9f       	mul	r24, r25
    5222:	a0 01       	movw	r20, r0
    5224:	11 24       	eor	r1, r1
    5226:	46 5a       	subi	r20, 0xA6	; 166
    5228:	5c 4f       	sbci	r21, 0xFC	; 252
    522a:	48 5f       	subi	r20, 0xF8	; 248
    522c:	5f 4f       	sbci	r21, 0xFF	; 255
    522e:	fa 01       	movw	r30, r20
    5230:	84 91       	lpm	r24, Z+
    5232:	48 50       	subi	r20, 0x08	; 8
    5234:	50 40       	sbci	r21, 0x00	; 0
    5236:	88 23       	and	r24, r24
    5238:	c1 f0       	breq	.+48     	; 0x526a <compareSetThreshold+0x5e>
    523a:	c9 01       	movw	r24, r18
    523c:	06 96       	adiw	r24, 0x06	; 6
    523e:	fc 01       	movw	r30, r24
    5240:	c5 91       	lpm	r28, Z+
    5242:	d4 91       	lpm	r29, Z+
    5244:	fa 01       	movw	r30, r20
    5246:	36 96       	adiw	r30, 0x06	; 6
    5248:	e4 91       	lpm	r30, Z+
    524a:	ee 23       	and	r30, r30
    524c:	19 f0       	breq	.+6      	; 0x5254 <compareSetThreshold+0x48>
    524e:	79 83       	std	Y+1, r23	; 0x01
    5250:	68 83       	st	Y, r22
    5252:	0e c0       	rjmp	.+28     	; 0x5270 <compareSetThreshold+0x64>
    5254:	6f 3f       	cpi	r22, 0xFF	; 255
    5256:	71 05       	cpc	r23, r1
    5258:	31 f0       	breq	.+12     	; 0x5266 <compareSetThreshold+0x5a>
    525a:	28 f0       	brcs	.+10     	; 0x5266 <compareSetThreshold+0x5a>
    525c:	8e ef       	ldi	r24, 0xFE	; 254
    525e:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    5262:	6f ef       	ldi	r22, 0xFF	; 255
    5264:	70 e0       	ldi	r23, 0x00	; 0
    5266:	68 83       	st	Y, r22
    5268:	03 c0       	rjmp	.+6      	; 0x5270 <compareSetThreshold+0x64>
    526a:	8d ef       	ldi	r24, 0xFD	; 253
    526c:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    5270:	df 91       	pop	r29
    5272:	cf 91       	pop	r28
    5274:	08 95       	ret

00005276 <compareGetThreshold>:
    5276:	9c 01       	movw	r18, r24
    5278:	2e 5f       	subi	r18, 0xFE	; 254
    527a:	3f 4f       	sbci	r19, 0xFF	; 255
    527c:	f9 01       	movw	r30, r18
    527e:	84 91       	lpm	r24, Z+
    5280:	22 50       	subi	r18, 0x02	; 2
    5282:	30 40       	sbci	r19, 0x00	; 0
    5284:	9c e2       	ldi	r25, 0x2C	; 44
    5286:	89 9f       	mul	r24, r25
    5288:	a0 01       	movw	r20, r0
    528a:	11 24       	eor	r1, r1
    528c:	46 5a       	subi	r20, 0xA6	; 166
    528e:	5c 4f       	sbci	r21, 0xFC	; 252
    5290:	48 5f       	subi	r20, 0xF8	; 248
    5292:	5f 4f       	sbci	r21, 0xFF	; 255
    5294:	fa 01       	movw	r30, r20
    5296:	84 91       	lpm	r24, Z+
    5298:	48 50       	subi	r20, 0x08	; 8
    529a:	50 40       	sbci	r21, 0x00	; 0
    529c:	88 23       	and	r24, r24
    529e:	89 f0       	breq	.+34     	; 0x52c2 <compareGetThreshold+0x4c>
    52a0:	c9 01       	movw	r24, r18
    52a2:	06 96       	adiw	r24, 0x06	; 6
    52a4:	fc 01       	movw	r30, r24
    52a6:	a5 91       	lpm	r26, Z+
    52a8:	b4 91       	lpm	r27, Z+
    52aa:	fa 01       	movw	r30, r20
    52ac:	36 96       	adiw	r30, 0x06	; 6
    52ae:	e4 91       	lpm	r30, Z+
    52b0:	ee 23       	and	r30, r30
    52b2:	19 f0       	breq	.+6      	; 0x52ba <compareGetThreshold+0x44>
    52b4:	2d 91       	ld	r18, X+
    52b6:	3c 91       	ld	r19, X
    52b8:	09 c0       	rjmp	.+18     	; 0x52cc <compareGetThreshold+0x56>
    52ba:	8c 91       	ld	r24, X
    52bc:	28 2f       	mov	r18, r24
    52be:	30 e0       	ldi	r19, 0x00	; 0
    52c0:	05 c0       	rjmp	.+10     	; 0x52cc <compareGetThreshold+0x56>
    52c2:	8d ef       	ldi	r24, 0xFD	; 253
    52c4:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    52c8:	2f ef       	ldi	r18, 0xFF	; 255
    52ca:	30 e0       	ldi	r19, 0x00	; 0
    52cc:	c9 01       	movw	r24, r18
    52ce:	08 95       	ret

000052d0 <timerGetTOP>:
    52d0:	cf 93       	push	r28
    52d2:	df 93       	push	r29
    52d4:	ec 01       	movw	r28, r24
    52d6:	04 96       	adiw	r24, 0x04	; 4
    52d8:	fc 01       	movw	r30, r24
    52da:	a5 91       	lpm	r26, Z+
    52dc:	b4 91       	lpm	r27, Z+
    52de:	8c 91       	ld	r24, X
    52e0:	90 e0       	ldi	r25, 0x00	; 0
    52e2:	87 70       	andi	r24, 0x07	; 7
    52e4:	90 70       	andi	r25, 0x00	; 0
    52e6:	89 2b       	or	r24, r25
    52e8:	09 f4       	brne	.+2      	; 0x52ec <timerGetTOP+0x1c>
    52ea:	41 c0       	rjmp	.+130    	; 0x536e <timerGetTOP+0x9e>
    52ec:	fe 01       	movw	r30, r28
    52ee:	a5 91       	lpm	r26, Z+
    52f0:	b4 91       	lpm	r27, Z+
    52f2:	1a 96       	adiw	r26, 0x0a	; 10
    52f4:	8c 91       	ld	r24, X
    52f6:	87 30       	cpi	r24, 0x07	; 7
    52f8:	39 f1       	breq	.+78     	; 0x5348 <timerGetTOP+0x78>
    52fa:	88 30       	cpi	r24, 0x08	; 8
    52fc:	70 f4       	brcc	.+28     	; 0x531a <timerGetTOP+0x4a>
    52fe:	83 30       	cpi	r24, 0x03	; 3
    5300:	19 f1       	breq	.+70     	; 0x5348 <timerGetTOP+0x78>
    5302:	84 30       	cpi	r24, 0x04	; 4
    5304:	28 f4       	brcc	.+10     	; 0x5310 <timerGetTOP+0x40>
    5306:	81 30       	cpi	r24, 0x01	; 1
    5308:	c9 f0       	breq	.+50     	; 0x533c <timerGetTOP+0x6c>
    530a:	82 30       	cpi	r24, 0x02	; 2
    530c:	d0 f4       	brcc	.+52     	; 0x5342 <timerGetTOP+0x72>
    530e:	13 c0       	rjmp	.+38     	; 0x5336 <timerGetTOP+0x66>
    5310:	85 30       	cpi	r24, 0x05	; 5
    5312:	a1 f0       	breq	.+40     	; 0x533c <timerGetTOP+0x6c>
    5314:	86 30       	cpi	r24, 0x06	; 6
    5316:	a8 f4       	brcc	.+42     	; 0x5342 <timerGetTOP+0x72>
    5318:	1a c0       	rjmp	.+52     	; 0x534e <timerGetTOP+0x7e>
    531a:	8b 30       	cpi	r24, 0x0B	; 11
    531c:	c1 f0       	breq	.+48     	; 0x534e <timerGetTOP+0x7e>
    531e:	8c 30       	cpi	r24, 0x0C	; 12
    5320:	18 f4       	brcc	.+6      	; 0x5328 <timerGetTOP+0x58>
    5322:	89 30       	cpi	r24, 0x09	; 9
    5324:	e1 f4       	brne	.+56     	; 0x535e <timerGetTOP+0x8e>
    5326:	13 c0       	rjmp	.+38     	; 0x534e <timerGetTOP+0x7e>
    5328:	8e 30       	cpi	r24, 0x0E	; 14
    532a:	c9 f0       	breq	.+50     	; 0x535e <timerGetTOP+0x8e>
    532c:	8f 30       	cpi	r24, 0x0F	; 15
    532e:	79 f0       	breq	.+30     	; 0x534e <timerGetTOP+0x7e>
    5330:	8c 30       	cpi	r24, 0x0C	; 12
    5332:	e9 f4       	brne	.+58     	; 0x536e <timerGetTOP+0x9e>
    5334:	14 c0       	rjmp	.+40     	; 0x535e <timerGetTOP+0x8e>
    5336:	2f ef       	ldi	r18, 0xFF	; 255
    5338:	3f ef       	ldi	r19, 0xFF	; 255
    533a:	1b c0       	rjmp	.+54     	; 0x5372 <timerGetTOP+0xa2>
    533c:	2f ef       	ldi	r18, 0xFF	; 255
    533e:	30 e0       	ldi	r19, 0x00	; 0
    5340:	18 c0       	rjmp	.+48     	; 0x5372 <timerGetTOP+0xa2>
    5342:	2f ef       	ldi	r18, 0xFF	; 255
    5344:	31 e0       	ldi	r19, 0x01	; 1
    5346:	15 c0       	rjmp	.+42     	; 0x5372 <timerGetTOP+0xa2>
    5348:	2f ef       	ldi	r18, 0xFF	; 255
    534a:	33 e0       	ldi	r19, 0x03	; 3
    534c:	12 c0       	rjmp	.+36     	; 0x5372 <timerGetTOP+0xa2>
    534e:	fe 01       	movw	r30, r28
    5350:	77 96       	adiw	r30, 0x17	; 23
    5352:	85 91       	lpm	r24, Z+
    5354:	94 91       	lpm	r25, Z+
    5356:	0e 94 3b 29 	call	0x5276	; 0x5276 <compareGetThreshold>
    535a:	9c 01       	movw	r18, r24
    535c:	0a c0       	rjmp	.+20     	; 0x5372 <timerGetTOP+0xa2>
    535e:	ce 01       	movw	r24, r28
    5360:	4f 96       	adiw	r24, 0x1f	; 31
    5362:	fc 01       	movw	r30, r24
    5364:	a5 91       	lpm	r26, Z+
    5366:	b4 91       	lpm	r27, Z+
    5368:	2d 91       	ld	r18, X+
    536a:	3c 91       	ld	r19, X
    536c:	02 c0       	rjmp	.+4      	; 0x5372 <timerGetTOP+0xa2>
    536e:	20 e0       	ldi	r18, 0x00	; 0
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	26 96       	adiw	r28, 0x06	; 6
    5374:	fe 01       	movw	r30, r28
    5376:	84 91       	lpm	r24, Z+
    5378:	88 23       	and	r24, r24
    537a:	09 f4       	brne	.+2      	; 0x537e <timerGetTOP+0xae>
    537c:	30 70       	andi	r19, 0x00	; 0
    537e:	c9 01       	movw	r24, r18
    5380:	df 91       	pop	r29
    5382:	cf 91       	pop	r28
    5384:	08 95       	ret

00005386 <timerSnapshotToTicks>:
    5386:	6f 92       	push	r6
    5388:	7f 92       	push	r7
    538a:	8f 92       	push	r8
    538c:	9f 92       	push	r9
    538e:	af 92       	push	r10
    5390:	bf 92       	push	r11
    5392:	cf 92       	push	r12
    5394:	df 92       	push	r13
    5396:	ef 92       	push	r14
    5398:	ff 92       	push	r15
    539a:	0f 93       	push	r16
    539c:	1f 93       	push	r17
    539e:	cf 93       	push	r28
    53a0:	df 93       	push	r29
    53a2:	8c 01       	movw	r16, r24
    53a4:	fc 01       	movw	r30, r24
    53a6:	80 81       	ld	r24, Z
    53a8:	91 81       	ldd	r25, Z+1	; 0x01
    53aa:	0e 94 68 29 	call	0x52d0	; 0x52d0 <timerGetTOP>
    53ae:	3c 01       	movw	r6, r24
    53b0:	88 24       	eor	r8, r8
    53b2:	99 24       	eor	r9, r9
    53b4:	f8 01       	movw	r30, r16
    53b6:	20 81       	ld	r18, Z
    53b8:	31 81       	ldd	r19, Z+1	; 0x01
    53ba:	80 91 19 0c 	lds	r24, 0x0C19
    53be:	90 91 1a 0c 	lds	r25, 0x0C1A
    53c2:	a2 80       	ldd	r10, Z+2	; 0x02
    53c4:	b3 80       	ldd	r11, Z+3	; 0x03
    53c6:	c4 80       	ldd	r12, Z+4	; 0x04
    53c8:	d5 80       	ldd	r13, Z+5	; 0x05
    53ca:	c6 81       	ldd	r28, Z+6	; 0x06
    53cc:	d7 81       	ldd	r29, Z+7	; 0x07
    53ce:	28 17       	cp	r18, r24
    53d0:	39 07       	cpc	r19, r25
    53d2:	01 f5       	brne	.+64     	; 0x5414 <timerSnapshotToTicks+0x8e>
    53d4:	e0 90 7f 03 	lds	r14, 0x037F
    53d8:	f0 90 80 03 	lds	r15, 0x0380
    53dc:	00 91 81 03 	lds	r16, 0x0381
    53e0:	10 91 82 03 	lds	r17, 0x0382
    53e4:	c8 01       	movw	r24, r16
    53e6:	b7 01       	movw	r22, r14
    53e8:	a6 01       	movw	r20, r12
    53ea:	95 01       	movw	r18, r10
    53ec:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__mulsi3>
    53f0:	5b 01       	movw	r10, r22
    53f2:	6c 01       	movw	r12, r24
    53f4:	be 01       	movw	r22, r28
    53f6:	80 e0       	ldi	r24, 0x00	; 0
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	a8 01       	movw	r20, r16
    53fc:	97 01       	movw	r18, r14
    53fe:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__mulsi3>
    5402:	a4 01       	movw	r20, r8
    5404:	93 01       	movw	r18, r6
    5406:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <__udivmodsi4>
    540a:	2a 0d       	add	r18, r10
    540c:	3b 1d       	adc	r19, r11
    540e:	4c 1d       	adc	r20, r12
    5410:	5d 1d       	adc	r21, r13
    5412:	14 c0       	rjmp	.+40     	; 0x543c <timerSnapshotToTicks+0xb6>
    5414:	08 94       	sec
    5416:	61 1c       	adc	r6, r1
    5418:	71 1c       	adc	r7, r1
    541a:	81 1c       	adc	r8, r1
    541c:	91 1c       	adc	r9, r1
    541e:	c4 01       	movw	r24, r8
    5420:	b3 01       	movw	r22, r6
    5422:	a6 01       	movw	r20, r12
    5424:	95 01       	movw	r18, r10
    5426:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__mulsi3>
    542a:	9b 01       	movw	r18, r22
    542c:	ac 01       	movw	r20, r24
    542e:	ce 01       	movw	r24, r28
    5430:	a0 e0       	ldi	r26, 0x00	; 0
    5432:	b0 e0       	ldi	r27, 0x00	; 0
    5434:	28 0f       	add	r18, r24
    5436:	39 1f       	adc	r19, r25
    5438:	4a 1f       	adc	r20, r26
    543a:	5b 1f       	adc	r21, r27
    543c:	b9 01       	movw	r22, r18
    543e:	ca 01       	movw	r24, r20
    5440:	df 91       	pop	r29
    5442:	cf 91       	pop	r28
    5444:	1f 91       	pop	r17
    5446:	0f 91       	pop	r16
    5448:	ff 90       	pop	r15
    544a:	ef 90       	pop	r14
    544c:	df 90       	pop	r13
    544e:	cf 90       	pop	r12
    5450:	bf 90       	pop	r11
    5452:	af 90       	pop	r10
    5454:	9f 90       	pop	r9
    5456:	8f 90       	pop	r8
    5458:	7f 90       	pop	r7
    545a:	6f 90       	pop	r6
    545c:	08 95       	ret

0000545e <timerGetBestPrescaler>:
    545e:	4f 92       	push	r4
    5460:	5f 92       	push	r5
    5462:	6f 92       	push	r6
    5464:	7f 92       	push	r7
    5466:	8f 92       	push	r8
    5468:	9f 92       	push	r9
    546a:	af 92       	push	r10
    546c:	bf 92       	push	r11
    546e:	cf 92       	push	r12
    5470:	df 92       	push	r13
    5472:	ef 92       	push	r14
    5474:	ff 92       	push	r15
    5476:	0f 93       	push	r16
    5478:	1f 93       	push	r17
    547a:	cf 93       	push	r28
    547c:	df 93       	push	r29
    547e:	8c 01       	movw	r16, r24
    5480:	0a 5f       	subi	r16, 0xFA	; 250
    5482:	1f 4f       	sbci	r17, 0xFF	; 255
    5484:	f8 01       	movw	r30, r16
    5486:	84 91       	lpm	r24, Z+
    5488:	06 50       	subi	r16, 0x06	; 6
    548a:	10 40       	sbci	r17, 0x00	; 0
    548c:	88 23       	and	r24, r24
    548e:	31 f4       	brne	.+12     	; 0x549c <timerGetBestPrescaler+0x3e>
    5490:	2f ef       	ldi	r18, 0xFF	; 255
    5492:	a2 2e       	mov	r10, r18
    5494:	b1 2c       	mov	r11, r1
    5496:	c1 2c       	mov	r12, r1
    5498:	d1 2c       	mov	r13, r1
    549a:	06 c0       	rjmp	.+12     	; 0x54a8 <timerGetBestPrescaler+0x4a>
    549c:	9f ef       	ldi	r25, 0xFF	; 255
    549e:	a9 2e       	mov	r10, r25
    54a0:	9f ef       	ldi	r25, 0xFF	; 255
    54a2:	b9 2e       	mov	r11, r25
    54a4:	c1 2c       	mov	r12, r1
    54a6:	d1 2c       	mov	r13, r1
    54a8:	c1 e0       	ldi	r28, 0x01	; 1
    54aa:	d0 e0       	ldi	r29, 0x00	; 0
    54ac:	81 e0       	ldi	r24, 0x01	; 1
    54ae:	48 2e       	mov	r4, r24
    54b0:	51 2c       	mov	r5, r1
    54b2:	ee 24       	eor	r14, r14
    54b4:	ff 24       	eor	r15, r15
    54b6:	3b 01       	movw	r6, r22
    54b8:	88 24       	eor	r8, r8
    54ba:	99 24       	eor	r9, r9
    54bc:	c8 01       	movw	r24, r16
    54be:	be 01       	movw	r22, r28
    54c0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__timerPrescalerIndex>
    54c4:	8f 5f       	subi	r24, 0xFF	; 255
    54c6:	9f 4f       	sbci	r25, 0xFF	; 255
    54c8:	59 f0       	breq	.+22     	; 0x54e0 <timerGetBestPrescaler+0x82>
    54ca:	c4 01       	movw	r24, r8
    54cc:	b3 01       	movw	r22, r6
    54ce:	ae 01       	movw	r20, r28
    54d0:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <ticks_per_ms>
    54d4:	a6 16       	cp	r10, r22
    54d6:	b7 06       	cpc	r11, r23
    54d8:	c8 06       	cpc	r12, r24
    54da:	d9 06       	cpc	r13, r25
    54dc:	70 f4       	brcc	.+28     	; 0x54fa <timerGetBestPrescaler+0x9c>
    54de:	2e 01       	movw	r4, r28
    54e0:	cc 0f       	add	r28, r28
    54e2:	dd 1f       	adc	r29, r29
    54e4:	08 94       	sec
    54e6:	e1 1c       	adc	r14, r1
    54e8:	f1 1c       	adc	r15, r1
    54ea:	2b e0       	ldi	r18, 0x0B	; 11
    54ec:	e2 16       	cp	r14, r18
    54ee:	f1 04       	cpc	r15, r1
    54f0:	29 f7       	brne	.-54     	; 0x54bc <timerGetBestPrescaler+0x5e>
    54f2:	88 ef       	ldi	r24, 0xF8	; 248
    54f4:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    54f8:	e2 01       	movw	r28, r4
    54fa:	ce 01       	movw	r24, r28
    54fc:	df 91       	pop	r29
    54fe:	cf 91       	pop	r28
    5500:	1f 91       	pop	r17
    5502:	0f 91       	pop	r16
    5504:	ff 90       	pop	r15
    5506:	ef 90       	pop	r14
    5508:	df 90       	pop	r13
    550a:	cf 90       	pop	r12
    550c:	bf 90       	pop	r11
    550e:	af 90       	pop	r10
    5510:	9f 90       	pop	r9
    5512:	8f 90       	pop	r8
    5514:	7f 90       	pop	r7
    5516:	6f 90       	pop	r6
    5518:	5f 90       	pop	r5
    551a:	4f 90       	pop	r4
    551c:	08 95       	ret

0000551e <timerSetPrescaler>:
    551e:	df 92       	push	r13
    5520:	ef 92       	push	r14
    5522:	ff 92       	push	r15
    5524:	0f 93       	push	r16
    5526:	1f 93       	push	r17
    5528:	cf 93       	push	r28
    552a:	df 93       	push	r29
    552c:	ec 01       	movw	r28, r24
    552e:	7b 01       	movw	r14, r22
    5530:	fc 01       	movw	r30, r24
    5532:	34 96       	adiw	r30, 0x04	; 4
    5534:	05 91       	lpm	r16, Z+
    5536:	14 91       	lpm	r17, Z+
    5538:	df b6       	in	r13, 0x3f	; 63
    553a:	f8 94       	cli
    553c:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__timerPrescalerIndex>
    5540:	ac 01       	movw	r20, r24
    5542:	8f ef       	ldi	r24, 0xFF	; 255
    5544:	4f 3f       	cpi	r20, 0xFF	; 255
    5546:	58 07       	cpc	r21, r24
    5548:	69 f0       	breq	.+26     	; 0x5564 <timerSetPrescaler+0x46>
    554a:	fe 01       	movw	r30, r28
    554c:	a5 91       	lpm	r26, Z+
    554e:	b4 91       	lpm	r27, Z+
    5550:	ed 92       	st	X+, r14
    5552:	fc 92       	st	X, r15
    5554:	f8 01       	movw	r30, r16
    5556:	80 81       	ld	r24, Z
    5558:	88 7f       	andi	r24, 0xF8	; 248
    555a:	80 83       	st	Z, r24
    555c:	80 81       	ld	r24, Z
    555e:	84 2b       	or	r24, r20
    5560:	80 83       	st	Z, r24
    5562:	03 c0       	rjmp	.+6      	; 0x556a <timerSetPrescaler+0x4c>
    5564:	8a ef       	ldi	r24, 0xFA	; 250
    5566:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    556a:	df be       	out	0x3f, r13	; 63
    556c:	df 91       	pop	r29
    556e:	cf 91       	pop	r28
    5570:	1f 91       	pop	r17
    5572:	0f 91       	pop	r16
    5574:	ff 90       	pop	r15
    5576:	ef 90       	pop	r14
    5578:	df 90       	pop	r13
    557a:	08 95       	ret

0000557c <timerInit>:
    557c:	7f 92       	push	r7
    557e:	8f 92       	push	r8
    5580:	9f 92       	push	r9
    5582:	af 92       	push	r10
    5584:	bf 92       	push	r11
    5586:	cf 92       	push	r12
    5588:	df 92       	push	r13
    558a:	ef 92       	push	r14
    558c:	ff 92       	push	r15
    558e:	0f 93       	push	r16
    5590:	1f 93       	push	r17
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	ec 01       	movw	r28, r24
    5598:	fc 01       	movw	r30, r24
    559a:	32 96       	adiw	r30, 0x02	; 2
    559c:	05 91       	lpm	r16, Z+
    559e:	14 91       	lpm	r17, Z+
    55a0:	fc 01       	movw	r30, r24
    55a2:	85 90       	lpm	r8, Z+
    55a4:	94 90       	lpm	r9, Z+
    55a6:	7f b6       	in	r7, 0x3f	; 63
    55a8:	f8 94       	cli
    55aa:	04 96       	adiw	r24, 0x04	; 4
    55ac:	fc 01       	movw	r30, r24
    55ae:	a5 91       	lpm	r26, Z+
    55b0:	b4 91       	lpm	r27, Z+
    55b2:	8c 91       	ld	r24, X
    55b4:	88 7f       	andi	r24, 0xF8	; 248
    55b6:	8c 93       	st	X, r24
    55b8:	39 e1       	ldi	r19, 0x19	; 25
    55ba:	a3 2e       	mov	r10, r19
    55bc:	b1 2c       	mov	r11, r1
    55be:	ac 0e       	add	r10, r28
    55c0:	bd 1e       	adc	r11, r29
    55c2:	c5 01       	movw	r24, r10
    55c4:	0e 94 cd 20 	call	0x419a	; 0x419a <__portMaskClear>
    55c8:	f8 01       	movw	r30, r16
    55ca:	10 82       	st	Z, r1
    55cc:	f4 01       	movw	r30, r8
    55ce:	60 81       	ld	r22, Z
    55d0:	71 81       	ldd	r23, Z+1	; 0x01
    55d2:	ce 01       	movw	r24, r28
    55d4:	0e 94 8f 2a 	call	0x551e	; 0x551e <timerSetPrescaler>
    55d8:	28 96       	adiw	r28, 0x08	; 8
    55da:	fe 01       	movw	r30, r28
    55dc:	e4 90       	lpm	r14, Z+
    55de:	2f 96       	adiw	r28, 0x0f	; 15
    55e0:	ff 24       	eor	r15, r15
    55e2:	00 e0       	ldi	r16, 0x00	; 0
    55e4:	10 e0       	ldi	r17, 0x00	; 0
    55e6:	fe 01       	movw	r30, r28
    55e8:	c5 90       	lpm	r12, Z+
    55ea:	d4 90       	lpm	r13, Z+
    55ec:	67 97       	sbiw	r28, 0x17	; 23
    55ee:	09 c0       	rjmp	.+18     	; 0x5602 <timerInit+0x86>
    55f0:	c6 01       	movw	r24, r12
    55f2:	80 0f       	add	r24, r16
    55f4:	91 1f       	adc	r25, r17
    55f6:	08 96       	adiw	r24, 0x08	; 8
    55f8:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    55fc:	f3 94       	inc	r15
    55fe:	00 5f       	subi	r16, 0xF0	; 240
    5600:	1f 4f       	sbci	r17, 0xFF	; 255
    5602:	fe 14       	cp	r15, r14
    5604:	a8 f3       	brcs	.-22     	; 0x55f0 <timerInit+0x74>
    5606:	ce 01       	movw	r24, r28
    5608:	4c 96       	adiw	r24, 0x1c	; 28
    560a:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    560e:	f4 01       	movw	r30, r8
    5610:	82 81       	ldd	r24, Z+2	; 0x02
    5612:	93 81       	ldd	r25, Z+3	; 0x03
    5614:	89 2b       	or	r24, r25
    5616:	19 f0       	breq	.+6      	; 0x561e <timerInit+0xa2>
    5618:	c5 01       	movw	r24, r10
    561a:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    561e:	7f be       	out	0x3f, r7	; 63
    5620:	df 91       	pop	r29
    5622:	cf 91       	pop	r28
    5624:	1f 91       	pop	r17
    5626:	0f 91       	pop	r16
    5628:	ff 90       	pop	r15
    562a:	ef 90       	pop	r14
    562c:	df 90       	pop	r13
    562e:	cf 90       	pop	r12
    5630:	bf 90       	pop	r11
    5632:	af 90       	pop	r10
    5634:	9f 90       	pop	r9
    5636:	8f 90       	pop	r8
    5638:	7f 90       	pop	r7
    563a:	08 95       	ret

0000563c <timerSetMode>:
    563c:	df 92       	push	r13
    563e:	ef 92       	push	r14
    5640:	ff 92       	push	r15
    5642:	0f 93       	push	r16
    5644:	1f 93       	push	r17
    5646:	cf 93       	push	r28
    5648:	df 93       	push	r29
    564a:	8c 01       	movw	r16, r24
    564c:	66 23       	and	r22, r22
    564e:	41 f0       	breq	.+16     	; 0x5660 <timerSetMode+0x24>
    5650:	fc 01       	movw	r30, r24
    5652:	a5 91       	lpm	r26, Z+
    5654:	b4 91       	lpm	r27, Z+
    5656:	1a 96       	adiw	r26, 0x0a	; 10
    5658:	8c 91       	ld	r24, X
    565a:	86 17       	cp	r24, r22
    565c:	09 f4       	brne	.+2      	; 0x5660 <timerSetMode+0x24>
    565e:	7a c0       	rjmp	.+244    	; 0x5754 <timerSetMode+0x118>
    5660:	f8 01       	movw	r30, r16
    5662:	39 96       	adiw	r30, 0x09	; 9
    5664:	25 91       	lpm	r18, Z+
    5666:	34 91       	lpm	r19, Z+
    5668:	81 e0       	ldi	r24, 0x01	; 1
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	06 2e       	mov	r0, r22
    566e:	02 c0       	rjmp	.+4      	; 0x5674 <timerSetMode+0x38>
    5670:	88 0f       	add	r24, r24
    5672:	99 1f       	adc	r25, r25
    5674:	0a 94       	dec	r0
    5676:	e2 f7       	brpl	.-8      	; 0x5670 <timerSetMode+0x34>
    5678:	82 23       	and	r24, r18
    567a:	93 23       	and	r25, r19
    567c:	89 2b       	or	r24, r25
    567e:	09 f4       	brne	.+2      	; 0x5682 <timerSetMode+0x46>
    5680:	66 c0       	rjmp	.+204    	; 0x574e <timerSetMode+0x112>
    5682:	f8 01       	movw	r30, r16
    5684:	a5 91       	lpm	r26, Z+
    5686:	b4 91       	lpm	r27, Z+
    5688:	1a 96       	adiw	r26, 0x0a	; 10
    568a:	6c 93       	st	X, r22
    568c:	ff ed       	ldi	r31, 0xDF	; 223
    568e:	2f 3f       	cpi	r18, 0xFF	; 255
    5690:	3f 07       	cpc	r19, r31
    5692:	11 f4       	brne	.+4      	; 0x5698 <timerSetMode+0x5c>
    5694:	d6 2e       	mov	r13, r22
    5696:	13 c0       	rjmp	.+38     	; 0x56be <timerSetMode+0x82>
    5698:	88 e8       	ldi	r24, 0x88	; 136
    569a:	23 33       	cpi	r18, 0x33	; 51
    569c:	38 07       	cpc	r19, r24
    569e:	31 f4       	brne	.+12     	; 0x56ac <timerSetMode+0x70>
    56a0:	e6 2f       	mov	r30, r22
    56a2:	f0 e0       	ldi	r31, 0x00	; 0
    56a4:	e0 5d       	subi	r30, 0xD0	; 208
    56a6:	fa 4f       	sbci	r31, 0xFA	; 250
    56a8:	d4 90       	lpm	r13, Z+
    56aa:	09 c0       	rjmp	.+18     	; 0x56be <timerSetMode+0x82>
    56ac:	23 33       	cpi	r18, 0x33	; 51
    56ae:	31 05       	cpc	r19, r1
    56b0:	09 f0       	breq	.+2      	; 0x56b4 <timerSetMode+0x78>
    56b2:	4d c0       	rjmp	.+154    	; 0x574e <timerSetMode+0x112>
    56b4:	e6 2f       	mov	r30, r22
    56b6:	f0 e0       	ldi	r31, 0x00	; 0
    56b8:	e0 5c       	subi	r30, 0xC0	; 192
    56ba:	fa 4f       	sbci	r31, 0xFA	; 250
    56bc:	d4 90       	lpm	r13, Z+
    56be:	ef ef       	ldi	r30, 0xFF	; 255
    56c0:	de 16       	cp	r13, r30
    56c2:	09 f4       	brne	.+2      	; 0x56c6 <timerSetMode+0x8a>
    56c4:	44 c0       	rjmp	.+136    	; 0x574e <timerSetMode+0x112>
    56c6:	c8 01       	movw	r24, r16
    56c8:	04 96       	adiw	r24, 0x04	; 4
    56ca:	fc 01       	movw	r30, r24
    56cc:	a5 91       	lpm	r26, Z+
    56ce:	b4 91       	lpm	r27, Z+
    56d0:	8c 91       	ld	r24, X
    56d2:	88 7f       	andi	r24, 0xF8	; 248
    56d4:	8c 93       	st	X, r24
    56d6:	e8 01       	movw	r28, r16
    56d8:	2b 96       	adiw	r28, 0x0b	; 11
    56da:	ee 24       	eor	r14, r14
    56dc:	ff 24       	eor	r15, r15
    56de:	e8 81       	ld	r30, Y
    56e0:	f9 81       	ldd	r31, Y+1	; 0x01
    56e2:	85 91       	lpm	r24, Z+
    56e4:	94 91       	lpm	r25, Z+
    56e6:	89 2b       	or	r24, r25
    56e8:	99 f0       	breq	.+38     	; 0x5710 <timerSetMode+0xd4>
    56ea:	d0 fe       	sbrs	r13, 0
    56ec:	04 c0       	rjmp	.+8      	; 0x56f6 <timerSetMode+0xba>
    56ee:	ce 01       	movw	r24, r28
    56f0:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    56f4:	03 c0       	rjmp	.+6      	; 0x56fc <timerSetMode+0xc0>
    56f6:	ce 01       	movw	r24, r28
    56f8:	0e 94 cd 20 	call	0x419a	; 0x419a <__portMaskClear>
    56fc:	08 94       	sec
    56fe:	e1 1c       	adc	r14, r1
    5700:	f1 1c       	adc	r15, r1
    5702:	f4 e0       	ldi	r31, 0x04	; 4
    5704:	ef 16       	cp	r14, r31
    5706:	f1 04       	cpc	r15, r1
    5708:	19 f0       	breq	.+6      	; 0x5710 <timerSetMode+0xd4>
    570a:	d6 94       	lsr	r13
    570c:	23 96       	adiw	r28, 0x03	; 3
    570e:	e7 cf       	rjmp	.-50     	; 0x56de <timerSetMode+0xa2>
    5710:	08 5f       	subi	r16, 0xF8	; 248
    5712:	1f 4f       	sbci	r17, 0xFF	; 255
    5714:	f8 01       	movw	r30, r16
    5716:	f4 90       	lpm	r15, Z+
    5718:	fa 94       	dec	r15
    571a:	01 5f       	subi	r16, 0xF1	; 241
    571c:	1f 4f       	sbci	r17, 0xFF	; 255
    571e:	f8 01       	movw	r30, r16
    5720:	c5 91       	lpm	r28, Z+
    5722:	d4 91       	lpm	r29, Z+
    5724:	07 51       	subi	r16, 0x17	; 23
    5726:	10 40       	sbci	r17, 0x00	; 0
    5728:	0c c0       	rjmp	.+24     	; 0x5742 <timerSetMode+0x106>
    572a:	8f 2d       	mov	r24, r15
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	44 e0       	ldi	r20, 0x04	; 4
    5730:	88 0f       	add	r24, r24
    5732:	99 1f       	adc	r25, r25
    5734:	4a 95       	dec	r20
    5736:	e1 f7       	brne	.-8      	; 0x5730 <timerSetMode+0xf4>
    5738:	8c 0f       	add	r24, r28
    573a:	9d 1f       	adc	r25, r29
    573c:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <compareDetach>
    5740:	fa 94       	dec	r15
    5742:	f7 fe       	sbrs	r15, 7
    5744:	f2 cf       	rjmp	.-28     	; 0x572a <timerSetMode+0xee>
    5746:	c8 01       	movw	r24, r16
    5748:	0e 94 be 2a 	call	0x557c	; 0x557c <timerInit>
    574c:	03 c0       	rjmp	.+6      	; 0x5754 <timerSetMode+0x118>
    574e:	86 ef       	ldi	r24, 0xF6	; 246
    5750:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    5754:	df 91       	pop	r29
    5756:	cf 91       	pop	r28
    5758:	1f 91       	pop	r17
    575a:	0f 91       	pop	r16
    575c:	ff 90       	pop	r15
    575e:	ef 90       	pop	r14
    5760:	df 90       	pop	r13
    5762:	08 95       	ret

00005764 <initTimers>:
    5764:	df 92       	push	r13
    5766:	ef 92       	push	r14
    5768:	ff 92       	push	r15
    576a:	0f 93       	push	r16
    576c:	1f 93       	push	r17
    576e:	f8 94       	cli
    5770:	ff 24       	eor	r15, r15
    5772:	e0 90 0a 02 	lds	r14, 0x020A
    5776:	5c e2       	ldi	r21, 0x2C	; 44
    5778:	d5 2e       	mov	r13, r21
    577a:	1c c0       	rjmp	.+56     	; 0x57b4 <initTimers+0x50>
    577c:	fd 9c       	mul	r15, r13
    577e:	80 01       	movw	r16, r0
    5780:	11 24       	eor	r1, r1
    5782:	06 5a       	subi	r16, 0xA6	; 166
    5784:	1c 4f       	sbci	r17, 0xFC	; 252
    5786:	c8 01       	movw	r24, r16
    5788:	60 e0       	ldi	r22, 0x00	; 0
    578a:	70 e0       	ldi	r23, 0x00	; 0
    578c:	40 e0       	ldi	r20, 0x00	; 0
    578e:	50 e0       	ldi	r21, 0x00	; 0
    5790:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <timerOverflowAttach>
    5794:	c8 01       	movw	r24, r16
    5796:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <timerCaptureDetach>
    579a:	c8 01       	movw	r24, r16
    579c:	60 e0       	ldi	r22, 0x00	; 0
    579e:	0e 94 1e 2b 	call	0x563c	; 0x563c <timerSetMode>
    57a2:	c8 01       	movw	r24, r16
    57a4:	04 96       	adiw	r24, 0x04	; 4
    57a6:	fc 01       	movw	r30, r24
    57a8:	a5 91       	lpm	r26, Z+
    57aa:	b4 91       	lpm	r27, Z+
    57ac:	8c 91       	ld	r24, X
    57ae:	88 7f       	andi	r24, 0xF8	; 248
    57b0:	8c 93       	st	X, r24
    57b2:	f3 94       	inc	r15
    57b4:	fe 14       	cp	r15, r14
    57b6:	10 f3       	brcs	.-60     	; 0x577c <initTimers+0x18>
    57b8:	78 94       	sei
    57ba:	1f 91       	pop	r17
    57bc:	0f 91       	pop	r16
    57be:	ff 90       	pop	r15
    57c0:	ef 90       	pop	r14
    57c2:	df 90       	pop	r13
    57c4:	08 95       	ret

000057c6 <compareAttach>:
    57c6:	8f 92       	push	r8
    57c8:	9f 92       	push	r9
    57ca:	af 92       	push	r10
    57cc:	bf 92       	push	r11
    57ce:	cf 92       	push	r12
    57d0:	df 92       	push	r13
    57d2:	ef 92       	push	r14
    57d4:	ff 92       	push	r15
    57d6:	0f 93       	push	r16
    57d8:	1f 93       	push	r17
    57da:	cf 93       	push	r28
    57dc:	df 93       	push	r29
    57de:	8c 01       	movw	r16, r24
    57e0:	6b 01       	movw	r12, r22
    57e2:	5a 01       	movw	r10, r20
    57e4:	49 01       	movw	r8, r18
    57e6:	0e 5f       	subi	r16, 0xFE	; 254
    57e8:	1f 4f       	sbci	r17, 0xFF	; 255
    57ea:	f8 01       	movw	r30, r16
    57ec:	84 91       	lpm	r24, Z+
    57ee:	02 50       	subi	r16, 0x02	; 2
    57f0:	10 40       	sbci	r17, 0x00	; 0
    57f2:	9c e2       	ldi	r25, 0x2C	; 44
    57f4:	89 9f       	mul	r24, r25
    57f6:	e0 01       	movw	r28, r0
    57f8:	11 24       	eor	r1, r1
    57fa:	c6 5a       	subi	r28, 0xA6	; 166
    57fc:	dc 4f       	sbci	r29, 0xFC	; 252
    57fe:	28 96       	adiw	r28, 0x08	; 8
    5800:	fe 01       	movw	r30, r28
    5802:	84 91       	lpm	r24, Z+
    5804:	28 97       	sbiw	r28, 0x08	; 8
    5806:	88 23       	and	r24, r24
    5808:	a1 f1       	breq	.+104    	; 0x5872 <compareAttach+0xac>
    580a:	f8 01       	movw	r30, r16
    580c:	e5 90       	lpm	r14, Z+
    580e:	f4 90       	lpm	r15, Z+
    5810:	61 15       	cp	r22, r1
    5812:	71 05       	cpc	r23, r1
    5814:	41 f0       	breq	.+16     	; 0x5826 <compareAttach+0x60>
    5816:	f7 01       	movw	r30, r14
    5818:	80 81       	ld	r24, Z
    581a:	91 81       	ldd	r25, Z+1	; 0x01
    581c:	89 2b       	or	r24, r25
    581e:	19 f0       	breq	.+6      	; 0x5826 <compareAttach+0x60>
    5820:	8b ef       	ldi	r24, 0xFB	; 251
    5822:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    5826:	ce 01       	movw	r24, r28
    5828:	fe 01       	movw	r30, r28
    582a:	a5 91       	lpm	r26, Z+
    582c:	b4 91       	lpm	r27, Z+
    582e:	6d 91       	ld	r22, X+
    5830:	7c 91       	ld	r23, X
    5832:	0e 94 8f 2a 	call	0x551e	; 0x551e <timerSetPrescaler>
    5836:	e8 01       	movw	r28, r16
    5838:	23 96       	adiw	r28, 0x03	; 3
    583a:	ce 01       	movw	r24, r28
    583c:	0e 94 cd 20 	call	0x419a	; 0x419a <__portMaskClear>
    5840:	c8 01       	movw	r24, r16
    5842:	b5 01       	movw	r22, r10
    5844:	0e 94 06 29 	call	0x520c	; 0x520c <compareSetThreshold>
    5848:	f7 01       	movw	r30, r14
    584a:	d1 82       	std	Z+1, r13	; 0x01
    584c:	c0 82       	st	Z, r12
    584e:	93 82       	std	Z+3, r9	; 0x03
    5850:	82 82       	std	Z+2, r8	; 0x02
    5852:	c8 01       	movw	r24, r16
    5854:	08 96       	adiw	r24, 0x08	; 8
    5856:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    585a:	c1 14       	cp	r12, r1
    585c:	d1 04       	cpc	r13, r1
    585e:	61 f0       	breq	.+24     	; 0x5878 <compareAttach+0xb2>
    5860:	fa e1       	ldi	r31, 0x1A	; 26
    5862:	cf 16       	cp	r12, r31
    5864:	f6 e2       	ldi	r31, 0x26	; 38
    5866:	df 06       	cpc	r13, r31
    5868:	39 f0       	breq	.+14     	; 0x5878 <compareAttach+0xb2>
    586a:	ce 01       	movw	r24, r28
    586c:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    5870:	03 c0       	rjmp	.+6      	; 0x5878 <compareAttach+0xb2>
    5872:	8d ef       	ldi	r24, 0xFD	; 253
    5874:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    5878:	df 91       	pop	r29
    587a:	cf 91       	pop	r28
    587c:	1f 91       	pop	r17
    587e:	0f 91       	pop	r16
    5880:	ff 90       	pop	r15
    5882:	ef 90       	pop	r14
    5884:	df 90       	pop	r13
    5886:	cf 90       	pop	r12
    5888:	bf 90       	pop	r11
    588a:	af 90       	pop	r10
    588c:	9f 90       	pop	r9
    588e:	8f 90       	pop	r8
    5890:	08 95       	ret

00005892 <__clockInit>:
    5892:	2f 92       	push	r2
    5894:	3f 92       	push	r3
    5896:	4f 92       	push	r4
    5898:	5f 92       	push	r5
    589a:	6f 92       	push	r6
    589c:	7f 92       	push	r7
    589e:	8f 92       	push	r8
    58a0:	9f 92       	push	r9
    58a2:	af 92       	push	r10
    58a4:	bf 92       	push	r11
    58a6:	cf 92       	push	r12
    58a8:	df 92       	push	r13
    58aa:	ef 92       	push	r14
    58ac:	ff 92       	push	r15
    58ae:	0f 93       	push	r16
    58b0:	1f 93       	push	r17
    58b2:	df 93       	push	r29
    58b4:	cf 93       	push	r28
    58b6:	00 d0       	rcall	.+0      	; 0x58b8 <__clockInit+0x26>
    58b8:	00 d0       	rcall	.+0      	; 0x58ba <__clockInit+0x28>
    58ba:	cd b7       	in	r28, 0x3d	; 61
    58bc:	de b7       	in	r29, 0x3e	; 62
    58be:	10 92 1a 0c 	sts	0x0C1A, r1
    58c2:	10 92 19 0c 	sts	0x0C19, r1
    58c6:	00 91 0a 02 	lds	r16, 0x020A
    58ca:	01 50       	subi	r16, 0x01	; 1
    58cc:	8c e2       	ldi	r24, 0x2C	; 44
    58ce:	08 02       	muls	r16, r24
    58d0:	60 01       	movw	r12, r0
    58d2:	11 24       	eor	r1, r1
    58d4:	2a e5       	ldi	r18, 0x5A	; 90
    58d6:	33 e0       	ldi	r19, 0x03	; 3
    58d8:	c2 0e       	add	r12, r18
    58da:	d3 1e       	adc	r13, r19
    58dc:	aa 24       	eor	r10, r10
    58de:	bb 24       	eor	r11, r11
    58e0:	22 24       	eor	r2, r2
    58e2:	33 24       	eor	r3, r3
    58e4:	1a 82       	std	Y+2, r1	; 0x02
    58e6:	19 82       	std	Y+1, r1	; 0x01
    58e8:	52 c0       	rjmp	.+164    	; 0x598e <__clockInit+0xfc>
    58ea:	c6 01       	movw	r24, r12
    58ec:	04 96       	adiw	r24, 0x04	; 4
    58ee:	fc 01       	movw	r30, r24
    58f0:	a5 91       	lpm	r26, Z+
    58f2:	b4 91       	lpm	r27, Z+
    58f4:	8c 91       	ld	r24, X
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	87 70       	andi	r24, 0x07	; 7
    58fa:	90 70       	andi	r25, 0x00	; 0
    58fc:	89 2b       	or	r24, r25
    58fe:	09 f0       	breq	.+2      	; 0x5902 <__clockInit+0x70>
    5900:	41 c0       	rjmp	.+130    	; 0x5984 <__clockInit+0xf2>
    5902:	db c0       	rjmp	.+438    	; 0x5aba <__clockInit+0x228>
    5904:	28 e0       	ldi	r18, 0x08	; 8
    5906:	30 e0       	ldi	r19, 0x00	; 0
    5908:	c2 0e       	add	r12, r18
    590a:	d3 1e       	adc	r13, r19
    590c:	f6 01       	movw	r30, r12
    590e:	84 91       	lpm	r24, Z+
    5910:	28 ef       	ldi	r18, 0xF8	; 248
    5912:	3f ef       	ldi	r19, 0xFF	; 255
    5914:	c2 0e       	add	r12, r18
    5916:	d3 1e       	adc	r13, r19
    5918:	82 30       	cpi	r24, 0x02	; 2
    591a:	a0 f1       	brcs	.+104    	; 0x5984 <__clockInit+0xf2>
    591c:	3f ef       	ldi	r19, 0xFF	; 255
    591e:	23 16       	cp	r2, r19
    5920:	31 04       	cpc	r3, r1
    5922:	69 f0       	breq	.+26     	; 0x593e <__clockInit+0xac>
    5924:	60 f0       	brcs	.+24     	; 0x593e <__clockInit+0xac>
    5926:	86 e0       	ldi	r24, 0x06	; 6
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	c8 0e       	add	r12, r24
    592c:	d9 1e       	adc	r13, r25
    592e:	f6 01       	movw	r30, r12
    5930:	84 91       	lpm	r24, Z+
    5932:	2a ef       	ldi	r18, 0xFA	; 250
    5934:	3f ef       	ldi	r19, 0xFF	; 255
    5936:	c2 0e       	add	r12, r18
    5938:	d3 1e       	adc	r13, r19
    593a:	88 23       	and	r24, r24
    593c:	19 f1       	breq	.+70     	; 0x5984 <__clockInit+0xf2>
    593e:	c6 01       	movw	r24, r12
    5940:	6c e0       	ldi	r22, 0x0C	; 12
    5942:	70 e0       	ldi	r23, 0x00	; 0
    5944:	0e 94 2f 2a 	call	0x545e	; 0x545e <timerGetBestPrescaler>
    5948:	f8 2e       	mov	r15, r24
    594a:	e9 2e       	mov	r14, r25
    594c:	6c e0       	ldi	r22, 0x0C	; 12
    594e:	70 e0       	ldi	r23, 0x00	; 0
    5950:	80 e0       	ldi	r24, 0x00	; 0
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	4f 2d       	mov	r20, r15
    5956:	5e 2d       	mov	r21, r14
    5958:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <ticks_per_ms>
    595c:	9b 01       	movw	r18, r22
    595e:	ac 01       	movw	r20, r24
    5960:	a1 14       	cp	r10, r1
    5962:	b1 04       	cpc	r11, r1
    5964:	41 f0       	breq	.+16     	; 0x5976 <__clockInit+0xe4>
    5966:	c1 01       	movw	r24, r2
    5968:	a0 e0       	ldi	r26, 0x00	; 0
    596a:	b0 e0       	ldi	r27, 0x00	; 0
    596c:	82 17       	cp	r24, r18
    596e:	93 07       	cpc	r25, r19
    5970:	a4 07       	cpc	r26, r20
    5972:	b5 07       	cpc	r27, r21
    5974:	38 f4       	brcc	.+14     	; 0x5984 <__clockInit+0xf2>
    5976:	19 01       	movw	r2, r18
    5978:	56 01       	movw	r10, r12
    597a:	8f 2d       	mov	r24, r15
    597c:	9e 2d       	mov	r25, r14
    597e:	9c 01       	movw	r18, r24
    5980:	3a 83       	std	Y+2, r19	; 0x02
    5982:	29 83       	std	Y+1, r18	; 0x01
    5984:	01 50       	subi	r16, 0x01	; 1
    5986:	84 ed       	ldi	r24, 0xD4	; 212
    5988:	9f ef       	ldi	r25, 0xFF	; 255
    598a:	c8 0e       	add	r12, r24
    598c:	d9 1e       	adc	r13, r25
    598e:	07 ff       	sbrs	r16, 7
    5990:	ac cf       	rjmp	.-168    	; 0x58ea <__clockInit+0x58>
    5992:	a1 14       	cp	r10, r1
    5994:	b1 04       	cpc	r11, r1
    5996:	09 f4       	brne	.+2      	; 0x599a <__clockInit+0x108>
    5998:	87 c0       	rjmp	.+270    	; 0x5aa8 <__clockInit+0x216>
    599a:	e6 e0       	ldi	r30, 0x06	; 6
    599c:	f0 e0       	ldi	r31, 0x00	; 0
    599e:	ae 0e       	add	r10, r30
    59a0:	bf 1e       	adc	r11, r31
    59a2:	f5 01       	movw	r30, r10
    59a4:	84 91       	lpm	r24, Z+
    59a6:	2a ef       	ldi	r18, 0xFA	; 250
    59a8:	3f ef       	ldi	r19, 0xFF	; 255
    59aa:	a2 0e       	add	r10, r18
    59ac:	b3 1e       	adc	r11, r19
    59ae:	88 23       	and	r24, r24
    59b0:	31 f4       	brne	.+12     	; 0x59be <__clockInit+0x12c>
    59b2:	ef ef       	ldi	r30, 0xFF	; 255
    59b4:	ce 2e       	mov	r12, r30
    59b6:	d1 2c       	mov	r13, r1
    59b8:	e1 2c       	mov	r14, r1
    59ba:	f1 2c       	mov	r15, r1
    59bc:	06 c0       	rjmp	.+12     	; 0x59ca <__clockInit+0x138>
    59be:	7f ef       	ldi	r23, 0xFF	; 255
    59c0:	c7 2e       	mov	r12, r23
    59c2:	7f ef       	ldi	r23, 0xFF	; 255
    59c4:	d7 2e       	mov	r13, r23
    59c6:	e1 2c       	mov	r14, r1
    59c8:	f1 2c       	mov	r15, r1
    59ca:	6c e0       	ldi	r22, 0x0C	; 12
    59cc:	86 2e       	mov	r8, r22
    59ce:	91 2c       	mov	r9, r1
    59d0:	21 01       	movw	r4, r2
    59d2:	66 24       	eor	r6, r6
    59d4:	77 24       	eor	r7, r7
    59d6:	61 e0       	ldi	r22, 0x01	; 1
    59d8:	70 e0       	ldi	r23, 0x00	; 0
    59da:	80 e0       	ldi	r24, 0x00	; 0
    59dc:	90 e0       	ldi	r25, 0x00	; 0
    59de:	49 81       	ldd	r20, Y+1	; 0x01
    59e0:	5a 81       	ldd	r21, Y+2	; 0x02
    59e2:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <ticks_per_ms>
    59e6:	6f 5f       	subi	r22, 0xFF	; 255
    59e8:	7f 4f       	sbci	r23, 0xFF	; 255
    59ea:	8f 4f       	sbci	r24, 0xFF	; 255
    59ec:	9f 4f       	sbci	r25, 0xFF	; 255
    59ee:	64 0d       	add	r22, r4
    59f0:	75 1d       	adc	r23, r5
    59f2:	86 1d       	adc	r24, r6
    59f4:	97 1d       	adc	r25, r7
    59f6:	6c 15       	cp	r22, r12
    59f8:	7d 05       	cpc	r23, r13
    59fa:	8e 05       	cpc	r24, r14
    59fc:	9f 05       	cpc	r25, r15
    59fe:	28 f5       	brcc	.+74     	; 0x5a4a <__clockInit+0x1b8>
    5a00:	c4 01       	movw	r24, r8
    5a02:	01 96       	adiw	r24, 0x01	; 1
    5a04:	9c 83       	std	Y+4, r25	; 0x04
    5a06:	8b 83       	std	Y+3, r24	; 0x03
    5a08:	c5 01       	movw	r24, r10
    5a0a:	6b 81       	ldd	r22, Y+3	; 0x03
    5a0c:	7c 81       	ldd	r23, Y+4	; 0x04
    5a0e:	0e 94 2f 2a 	call	0x545e	; 0x545e <timerGetBestPrescaler>
    5a12:	8c 01       	movw	r16, r24
    5a14:	eb 81       	ldd	r30, Y+3	; 0x03
    5a16:	fc 81       	ldd	r31, Y+4	; 0x04
    5a18:	bf 01       	movw	r22, r30
    5a1a:	80 e0       	ldi	r24, 0x00	; 0
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	a8 01       	movw	r20, r16
    5a20:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <ticks_per_ms>
    5a24:	29 81       	ldd	r18, Y+1	; 0x01
    5a26:	3a 81       	ldd	r19, Y+2	; 0x02
    5a28:	02 17       	cp	r16, r18
    5a2a:	13 07       	cpc	r17, r19
    5a2c:	71 f4       	brne	.+28     	; 0x5a4a <__clockInit+0x1b8>
    5a2e:	c6 16       	cp	r12, r22
    5a30:	d7 06       	cpc	r13, r23
    5a32:	e8 06       	cpc	r14, r24
    5a34:	f9 06       	cpc	r15, r25
    5a36:	48 f0       	brcs	.+18     	; 0x5a4a <__clockInit+0x1b8>
    5a38:	46 16       	cp	r4, r22
    5a3a:	57 06       	cpc	r5, r23
    5a3c:	68 06       	cpc	r6, r24
    5a3e:	79 06       	cpc	r7, r25
    5a40:	20 f4       	brcc	.+8      	; 0x5a4a <__clockInit+0x1b8>
    5a42:	1b 01       	movw	r2, r22
    5a44:	8b 80       	ldd	r8, Y+3	; 0x03
    5a46:	9c 80       	ldd	r9, Y+4	; 0x04
    5a48:	c3 cf       	rjmp	.-122    	; 0x59d0 <__clockInit+0x13e>
    5a4a:	b0 92 1a 0c 	sts	0x0C1A, r11
    5a4e:	a0 92 19 0c 	sts	0x0C19, r10
    5a52:	b4 01       	movw	r22, r8
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	28 ee       	ldi	r18, 0xE8	; 232
    5a5a:	33 e0       	ldi	r19, 0x03	; 3
    5a5c:	40 e0       	ldi	r20, 0x00	; 0
    5a5e:	50 e0       	ldi	r21, 0x00	; 0
    5a60:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__mulsi3>
    5a64:	60 93 7f 03 	sts	0x037F, r22
    5a68:	70 93 80 03 	sts	0x0380, r23
    5a6c:	80 93 81 03 	sts	0x0381, r24
    5a70:	90 93 82 03 	sts	0x0382, r25
    5a74:	c5 01       	movw	r24, r10
    5a76:	69 81       	ldd	r22, Y+1	; 0x01
    5a78:	7a 81       	ldd	r23, Y+2	; 0x02
    5a7a:	0e 94 8f 2a 	call	0x551e	; 0x551e <timerSetPrescaler>
    5a7e:	80 91 19 0c 	lds	r24, 0x0C19
    5a82:	90 91 1a 0c 	lds	r25, 0x0C1A
    5a86:	64 e0       	ldi	r22, 0x04	; 4
    5a88:	0e 94 1e 2b 	call	0x563c	; 0x563c <timerSetMode>
    5a8c:	e0 91 19 0c 	lds	r30, 0x0C19
    5a90:	f0 91 1a 0c 	lds	r31, 0x0C1A
    5a94:	77 96       	adiw	r30, 0x17	; 23
    5a96:	85 91       	lpm	r24, Z+
    5a98:	94 91       	lpm	r25, Z+
    5a9a:	6b e1       	ldi	r22, 0x1B	; 27
    5a9c:	76 e2       	ldi	r23, 0x26	; 38
    5a9e:	a1 01       	movw	r20, r2
    5aa0:	20 e0       	ldi	r18, 0x00	; 0
    5aa2:	30 e0       	ldi	r19, 0x00	; 0
    5aa4:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <compareAttach>
    5aa8:	80 91 14 0c 	lds	r24, 0x0C14
    5aac:	88 23       	and	r24, r24
    5aae:	61 f0       	breq	.+24     	; 0x5ac8 <__clockInit+0x236>
    5ab0:	10 92 14 0c 	sts	0x0C14, r1
    5ab4:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    5ab8:	07 c0       	rjmp	.+14     	; 0x5ac8 <__clockInit+0x236>
    5aba:	f6 01       	movw	r30, r12
    5abc:	39 96       	adiw	r30, 0x09	; 9
    5abe:	85 91       	lpm	r24, Z+
    5ac0:	94 91       	lpm	r25, Z+
    5ac2:	84 fd       	sbrc	r24, 4
    5ac4:	1f cf       	rjmp	.-450    	; 0x5904 <__clockInit+0x72>
    5ac6:	5e cf       	rjmp	.-324    	; 0x5984 <__clockInit+0xf2>
    5ac8:	0f 90       	pop	r0
    5aca:	0f 90       	pop	r0
    5acc:	0f 90       	pop	r0
    5ace:	0f 90       	pop	r0
    5ad0:	cf 91       	pop	r28
    5ad2:	df 91       	pop	r29
    5ad4:	1f 91       	pop	r17
    5ad6:	0f 91       	pop	r16
    5ad8:	ff 90       	pop	r15
    5ada:	ef 90       	pop	r14
    5adc:	df 90       	pop	r13
    5ade:	cf 90       	pop	r12
    5ae0:	bf 90       	pop	r11
    5ae2:	af 90       	pop	r10
    5ae4:	9f 90       	pop	r9
    5ae6:	8f 90       	pop	r8
    5ae8:	7f 90       	pop	r7
    5aea:	6f 90       	pop	r6
    5aec:	5f 90       	pop	r5
    5aee:	4f 90       	pop	r4
    5af0:	3f 90       	pop	r3
    5af2:	2f 90       	pop	r2
    5af4:	08 95       	ret

00005af6 <clockHasElapsedGetOverflow>:
    5af6:	8f 92       	push	r8
    5af8:	9f 92       	push	r9
    5afa:	af 92       	push	r10
    5afc:	bf 92       	push	r11
    5afe:	cf 92       	push	r12
    5b00:	df 92       	push	r13
    5b02:	ef 92       	push	r14
    5b04:	ff 92       	push	r15
    5b06:	0f 93       	push	r16
    5b08:	1f 93       	push	r17
    5b0a:	cf 93       	push	r28
    5b0c:	df 93       	push	r29
    5b0e:	6b 01       	movw	r12, r22
    5b10:	7c 01       	movw	r14, r24
    5b12:	49 01       	movw	r8, r18
    5b14:	5a 01       	movw	r10, r20
    5b16:	e8 01       	movw	r28, r16
    5b18:	0e 94 6f 28 	call	0x50de	; 0x50de <clockGetus>
    5b1c:	6c 19       	sub	r22, r12
    5b1e:	7d 09       	sbc	r23, r13
    5b20:	8e 09       	sbc	r24, r14
    5b22:	9f 09       	sbc	r25, r15
    5b24:	86 16       	cp	r8, r22
    5b26:	97 06       	cpc	r9, r23
    5b28:	a8 06       	cpc	r10, r24
    5b2a:	b9 06       	cpc	r11, r25
    5b2c:	50 f4       	brcc	.+20     	; 0x5b42 <clockHasElapsedGetOverflow+0x4c>
    5b2e:	68 19       	sub	r22, r8
    5b30:	79 09       	sbc	r23, r9
    5b32:	8a 09       	sbc	r24, r10
    5b34:	9b 09       	sbc	r25, r11
    5b36:	68 83       	st	Y, r22
    5b38:	79 83       	std	Y+1, r23	; 0x01
    5b3a:	8a 83       	std	Y+2, r24	; 0x02
    5b3c:	9b 83       	std	Y+3, r25	; 0x03
    5b3e:	8f ef       	ldi	r24, 0xFF	; 255
    5b40:	09 c0       	rjmp	.+18     	; 0x5b54 <clockHasElapsedGetOverflow+0x5e>
    5b42:	86 1a       	sub	r8, r22
    5b44:	97 0a       	sbc	r9, r23
    5b46:	a8 0a       	sbc	r10, r24
    5b48:	b9 0a       	sbc	r11, r25
    5b4a:	88 82       	st	Y, r8
    5b4c:	99 82       	std	Y+1, r9	; 0x01
    5b4e:	aa 82       	std	Y+2, r10	; 0x02
    5b50:	bb 82       	std	Y+3, r11	; 0x03
    5b52:	80 e0       	ldi	r24, 0x00	; 0
    5b54:	df 91       	pop	r29
    5b56:	cf 91       	pop	r28
    5b58:	1f 91       	pop	r17
    5b5a:	0f 91       	pop	r16
    5b5c:	ff 90       	pop	r15
    5b5e:	ef 90       	pop	r14
    5b60:	df 90       	pop	r13
    5b62:	cf 90       	pop	r12
    5b64:	bf 90       	pop	r11
    5b66:	af 90       	pop	r10
    5b68:	9f 90       	pop	r9
    5b6a:	8f 90       	pop	r8
    5b6c:	08 95       	ret

00005b6e <clockWaitus>:
    5b6e:	af 92       	push	r10
    5b70:	bf 92       	push	r11
    5b72:	cf 92       	push	r12
    5b74:	df 92       	push	r13
    5b76:	ef 92       	push	r14
    5b78:	ff 92       	push	r15
    5b7a:	0f 93       	push	r16
    5b7c:	1f 93       	push	r17
    5b7e:	5b 01       	movw	r10, r22
    5b80:	6c 01       	movw	r12, r24
    5b82:	0e 94 6f 28 	call	0x50de	; 0x50de <clockGetus>
    5b86:	7b 01       	movw	r14, r22
    5b88:	8c 01       	movw	r16, r24
    5b8a:	01 c0       	rjmp	.+2      	; 0x5b8e <clockWaitus+0x20>
    5b8c:	00 00       	nop
    5b8e:	0e 94 6f 28 	call	0x50de	; 0x50de <clockGetus>
    5b92:	6e 19       	sub	r22, r14
    5b94:	7f 09       	sbc	r23, r15
    5b96:	80 0b       	sbc	r24, r16
    5b98:	91 0b       	sbc	r25, r17
    5b9a:	6a 15       	cp	r22, r10
    5b9c:	7b 05       	cpc	r23, r11
    5b9e:	8c 05       	cpc	r24, r12
    5ba0:	9d 05       	cpc	r25, r13
    5ba2:	a0 f3       	brcs	.-24     	; 0x5b8c <clockWaitus+0x1e>
    5ba4:	1f 91       	pop	r17
    5ba6:	0f 91       	pop	r16
    5ba8:	ff 90       	pop	r15
    5baa:	ef 90       	pop	r14
    5bac:	df 90       	pop	r13
    5bae:	cf 90       	pop	r12
    5bb0:	bf 90       	pop	r11
    5bb2:	af 90       	pop	r10
    5bb4:	08 95       	ret

00005bb6 <clockWaitms>:
    5bb6:	28 ee       	ldi	r18, 0xE8	; 232
    5bb8:	33 e0       	ldi	r19, 0x03	; 3
    5bba:	40 e0       	ldi	r20, 0x00	; 0
    5bbc:	50 e0       	ldi	r21, 0x00	; 0
    5bbe:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__mulsi3>
    5bc2:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <clockWaitus>
    5bc6:	08 95       	ret

00005bc8 <delay_ms>:
    5bc8:	9b 01       	movw	r18, r22
    5bca:	ac 01       	movw	r20, r24
    5bcc:	80 91 19 0c 	lds	r24, 0x0C19
    5bd0:	90 91 1a 0c 	lds	r25, 0x0C1A
    5bd4:	89 2b       	or	r24, r25
    5bd6:	29 f0       	breq	.+10     	; 0x5be2 <delay_ms+0x1a>
    5bd8:	ca 01       	movw	r24, r20
    5bda:	b9 01       	movw	r22, r18
    5bdc:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <clockWaitms>
    5be0:	08 95       	ret
    5be2:	ca 01       	movw	r24, r20
    5be4:	b9 01       	movw	r22, r18
    5be6:	41 e0       	ldi	r20, 0x01	; 1
    5be8:	50 e0       	ldi	r21, 0x00	; 0
    5bea:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <ticks_per_ms>
    5bee:	0e 94 e7 25 	call	0x4bce	; 0x4bce <delay_cycles>
    5bf2:	08 95       	ret

00005bf4 <delay_us>:
    5bf4:	9b 01       	movw	r18, r22
    5bf6:	ac 01       	movw	r20, r24
    5bf8:	80 91 19 0c 	lds	r24, 0x0C19
    5bfc:	90 91 1a 0c 	lds	r25, 0x0C1A
    5c00:	89 2b       	or	r24, r25
    5c02:	51 f0       	breq	.+20     	; 0x5c18 <delay_us+0x24>
    5c04:	25 36       	cpi	r18, 0x65	; 101
    5c06:	31 05       	cpc	r19, r1
    5c08:	41 05       	cpc	r20, r1
    5c0a:	51 05       	cpc	r21, r1
    5c0c:	28 f0       	brcs	.+10     	; 0x5c18 <delay_us+0x24>
    5c0e:	ca 01       	movw	r24, r20
    5c10:	b9 01       	movw	r22, r18
    5c12:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <clockWaitus>
    5c16:	08 95       	ret
    5c18:	ca 01       	movw	r24, r20
    5c1a:	b9 01       	movw	r22, r18
    5c1c:	48 ee       	ldi	r20, 0xE8	; 232
    5c1e:	53 e0       	ldi	r21, 0x03	; 3
    5c20:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <ticks_per_ms>
    5c24:	0e 94 e7 25 	call	0x4bce	; 0x4bce <delay_cycles>
    5c28:	08 95       	ret

00005c2a <clockHasElapsed>:
    5c2a:	af 92       	push	r10
    5c2c:	bf 92       	push	r11
    5c2e:	cf 92       	push	r12
    5c30:	df 92       	push	r13
    5c32:	ef 92       	push	r14
    5c34:	ff 92       	push	r15
    5c36:	0f 93       	push	r16
    5c38:	1f 93       	push	r17
    5c3a:	7b 01       	movw	r14, r22
    5c3c:	8c 01       	movw	r16, r24
    5c3e:	59 01       	movw	r10, r18
    5c40:	6a 01       	movw	r12, r20
    5c42:	0e 94 6f 28 	call	0x50de	; 0x50de <clockGetus>
    5c46:	6e 19       	sub	r22, r14
    5c48:	7f 09       	sbc	r23, r15
    5c4a:	80 0b       	sbc	r24, r16
    5c4c:	91 0b       	sbc	r25, r17
    5c4e:	6a 15       	cp	r22, r10
    5c50:	7b 05       	cpc	r23, r11
    5c52:	8c 05       	cpc	r24, r12
    5c54:	9d 05       	cpc	r25, r13
    5c56:	10 f4       	brcc	.+4      	; 0x5c5c <clockHasElapsed+0x32>
    5c58:	80 e0       	ldi	r24, 0x00	; 0
    5c5a:	01 c0       	rjmp	.+2      	; 0x5c5e <clockHasElapsed+0x34>
    5c5c:	8f ef       	ldi	r24, 0xFF	; 255
    5c5e:	1f 91       	pop	r17
    5c60:	0f 91       	pop	r16
    5c62:	ff 90       	pop	r15
    5c64:	ef 90       	pop	r14
    5c66:	df 90       	pop	r13
    5c68:	cf 90       	pop	r12
    5c6a:	bf 90       	pop	r11
    5c6c:	af 90       	pop	r10
    5c6e:	08 95       	ret

00005c70 <timerCaptureDetach>:
    5c70:	ef 92       	push	r14
    5c72:	ff 92       	push	r15
    5c74:	0f 93       	push	r16
    5c76:	1f 93       	push	r17
    5c78:	8c 01       	movw	r16, r24
    5c7a:	fc 01       	movw	r30, r24
    5c7c:	e5 90       	lpm	r14, Z+
    5c7e:	f4 90       	lpm	r15, Z+
    5c80:	81 96       	adiw	r24, 0x21	; 33
    5c82:	0e 94 cd 20 	call	0x419a	; 0x419a <__portMaskClear>
    5c86:	c8 01       	movw	r24, r16
    5c88:	84 96       	adiw	r24, 0x24	; 36
    5c8a:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    5c8e:	f7 01       	movw	r30, r14
    5c90:	17 82       	std	Z+7, r1	; 0x07
    5c92:	16 82       	std	Z+6, r1	; 0x06
    5c94:	1f 91       	pop	r17
    5c96:	0f 91       	pop	r16
    5c98:	ff 90       	pop	r15
    5c9a:	ef 90       	pop	r14
    5c9c:	08 95       	ret

00005c9e <timerCaptureAttach>:
    5c9e:	af 92       	push	r10
    5ca0:	bf 92       	push	r11
    5ca2:	cf 92       	push	r12
    5ca4:	df 92       	push	r13
    5ca6:	ef 92       	push	r14
    5ca8:	ff 92       	push	r15
    5caa:	0f 93       	push	r16
    5cac:	1f 93       	push	r17
    5cae:	cf 93       	push	r28
    5cb0:	df 93       	push	r29
    5cb2:	8c 01       	movw	r16, r24
    5cb4:	7b 01       	movw	r14, r22
    5cb6:	6a 01       	movw	r12, r20
    5cb8:	b2 2e       	mov	r11, r18
    5cba:	fc 01       	movw	r30, r24
    5cbc:	c5 91       	lpm	r28, Z+
    5cbe:	d4 91       	lpm	r29, Z+
    5cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    5cc2:	9f 81       	ldd	r25, Y+7	; 0x07
    5cc4:	89 2b       	or	r24, r25
    5cc6:	19 f0       	breq	.+6      	; 0x5cce <timerCaptureAttach+0x30>
    5cc8:	8a ee       	ldi	r24, 0xEA	; 234
    5cca:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    5cce:	af b6       	in	r10, 0x3f	; 63
    5cd0:	f8 94       	cli
    5cd2:	ff 82       	std	Y+7, r15	; 0x07
    5cd4:	ee 82       	std	Y+6, r14	; 0x06
    5cd6:	d9 86       	std	Y+9, r13	; 0x09
    5cd8:	c8 86       	std	Y+8, r12	; 0x08
    5cda:	c8 01       	movw	r24, r16
    5cdc:	87 96       	adiw	r24, 0x27	; 39
    5cde:	bb 20       	and	r11, r11
    5ce0:	19 f0       	breq	.+6      	; 0x5ce8 <timerCaptureAttach+0x4a>
    5ce2:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    5ce6:	02 c0       	rjmp	.+4      	; 0x5cec <timerCaptureAttach+0x4e>
    5ce8:	0e 94 cd 20 	call	0x419a	; 0x419a <__portMaskClear>
    5cec:	c8 01       	movw	r24, r16
    5cee:	84 96       	adiw	r24, 0x24	; 36
    5cf0:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    5cf4:	c8 01       	movw	r24, r16
    5cf6:	81 96       	adiw	r24, 0x21	; 33
    5cf8:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    5cfc:	af be       	out	0x3f, r10	; 63
    5cfe:	df 91       	pop	r29
    5d00:	cf 91       	pop	r28
    5d02:	1f 91       	pop	r17
    5d04:	0f 91       	pop	r16
    5d06:	ff 90       	pop	r15
    5d08:	ef 90       	pop	r14
    5d0a:	df 90       	pop	r13
    5d0c:	cf 90       	pop	r12
    5d0e:	bf 90       	pop	r11
    5d10:	af 90       	pop	r10
    5d12:	08 95       	ret

00005d14 <timerOverflowAttach>:
    5d14:	df 92       	push	r13
    5d16:	ef 92       	push	r14
    5d18:	ff 92       	push	r15
    5d1a:	0f 93       	push	r16
    5d1c:	1f 93       	push	r17
    5d1e:	cf 93       	push	r28
    5d20:	df 93       	push	r29
    5d22:	ec 01       	movw	r28, r24
    5d24:	8b 01       	movw	r16, r22
    5d26:	7a 01       	movw	r14, r20
    5d28:	df b6       	in	r13, 0x3f	; 63
    5d2a:	f8 94       	cli
    5d2c:	61 15       	cp	r22, r1
    5d2e:	71 05       	cpc	r23, r1
    5d30:	61 f0       	breq	.+24     	; 0x5d4a <timerOverflowAttach+0x36>
    5d32:	fc 01       	movw	r30, r24
    5d34:	a5 91       	lpm	r26, Z+
    5d36:	b4 91       	lpm	r27, Z+
    5d38:	12 96       	adiw	r26, 0x02	; 2
    5d3a:	8d 91       	ld	r24, X+
    5d3c:	9c 91       	ld	r25, X
    5d3e:	13 97       	sbiw	r26, 0x03	; 3
    5d40:	89 2b       	or	r24, r25
    5d42:	19 f0       	breq	.+6      	; 0x5d4a <timerOverflowAttach+0x36>
    5d44:	8c ef       	ldi	r24, 0xFC	; 252
    5d46:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    5d4a:	ce 01       	movw	r24, r28
    5d4c:	fe 01       	movw	r30, r28
    5d4e:	a5 91       	lpm	r26, Z+
    5d50:	b4 91       	lpm	r27, Z+
    5d52:	13 96       	adiw	r26, 0x03	; 3
    5d54:	1c 93       	st	X, r17
    5d56:	0e 93       	st	-X, r16
    5d58:	12 97       	sbiw	r26, 0x02	; 2
    5d5a:	15 96       	adiw	r26, 0x05	; 5
    5d5c:	fc 92       	st	X, r15
    5d5e:	ee 92       	st	-X, r14
    5d60:	14 97       	sbiw	r26, 0x04	; 4
    5d62:	49 96       	adiw	r24, 0x19	; 25
    5d64:	01 2b       	or	r16, r17
    5d66:	19 f0       	breq	.+6      	; 0x5d6e <timerOverflowAttach+0x5a>
    5d68:	0e 94 b4 20 	call	0x4168	; 0x4168 <__portMaskSet>
    5d6c:	02 c0       	rjmp	.+4      	; 0x5d72 <timerOverflowAttach+0x5e>
    5d6e:	0e 94 cd 20 	call	0x419a	; 0x419a <__portMaskClear>
    5d72:	df be       	out	0x3f, r13	; 63
    5d74:	df 91       	pop	r29
    5d76:	cf 91       	pop	r28
    5d78:	1f 91       	pop	r17
    5d7a:	0f 91       	pop	r16
    5d7c:	ff 90       	pop	r15
    5d7e:	ef 90       	pop	r14
    5d80:	df 90       	pop	r13
    5d82:	08 95       	ret

00005d84 <__uartHWSetBaudRate>:
    5d84:	bf 92       	push	r11
    5d86:	cf 92       	push	r12
    5d88:	df 92       	push	r13
    5d8a:	ef 92       	push	r14
    5d8c:	ff 92       	push	r15
    5d8e:	0f 93       	push	r16
    5d90:	1f 93       	push	r17
    5d92:	cf 93       	push	r28
    5d94:	df 93       	push	r29
    5d96:	7a 01       	movw	r14, r20
    5d98:	8b 01       	movw	r16, r22
    5d9a:	ec 01       	movw	r28, r24
    5d9c:	bf b6       	in	r11, 0x3f	; 63
    5d9e:	f8 94       	cli
    5da0:	4f 3f       	cpi	r20, 0xFF	; 255
    5da2:	8f ef       	ldi	r24, 0xFF	; 255
    5da4:	58 07       	cpc	r21, r24
    5da6:	8f ef       	ldi	r24, 0xFF	; 255
    5da8:	68 07       	cpc	r22, r24
    5daa:	8f ef       	ldi	r24, 0xFF	; 255
    5dac:	78 07       	cpc	r23, r24
    5dae:	21 f4       	brne	.+8      	; 0x5db8 <__uartHWSetBaudRate+0x34>
    5db0:	a1 e0       	ldi	r26, 0x01	; 1
    5db2:	ca 2e       	mov	r12, r26
    5db4:	d1 2c       	mov	r13, r1
    5db6:	24 c0       	rjmp	.+72     	; 0x5e00 <__uartHWSetBaudRate+0x7c>
    5db8:	cb 01       	movw	r24, r22
    5dba:	ba 01       	movw	r22, r20
    5dbc:	f3 e0       	ldi	r31, 0x03	; 3
    5dbe:	66 0f       	add	r22, r22
    5dc0:	77 1f       	adc	r23, r23
    5dc2:	88 1f       	adc	r24, r24
    5dc4:	99 1f       	adc	r25, r25
    5dc6:	fa 95       	dec	r31
    5dc8:	d1 f7       	brne	.-12     	; 0x5dbe <__uartHWSetBaudRate+0x3a>
    5dca:	20 91 00 02 	lds	r18, 0x0200
    5dce:	30 91 01 02 	lds	r19, 0x0201
    5dd2:	40 91 02 02 	lds	r20, 0x0202
    5dd6:	50 91 03 02 	lds	r21, 0x0203
    5dda:	62 0f       	add	r22, r18
    5ddc:	73 1f       	adc	r23, r19
    5dde:	84 1f       	adc	r24, r20
    5de0:	95 1f       	adc	r25, r21
    5de2:	a8 01       	movw	r20, r16
    5de4:	97 01       	movw	r18, r14
    5de6:	e4 e0       	ldi	r30, 0x04	; 4
    5de8:	22 0f       	add	r18, r18
    5dea:	33 1f       	adc	r19, r19
    5dec:	44 1f       	adc	r20, r20
    5dee:	55 1f       	adc	r21, r21
    5df0:	ea 95       	dec	r30
    5df2:	d1 f7       	brne	.-12     	; 0x5de8 <__uartHWSetBaudRate+0x64>
    5df4:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <__udivmodsi4>
    5df8:	69 01       	movw	r12, r18
    5dfa:	08 94       	sec
    5dfc:	c1 08       	sbc	r12, r1
    5dfe:	d1 08       	sbc	r13, r1
    5e00:	9c a1       	ldd	r25, Y+36	; 0x24
    5e02:	99 23       	and	r25, r25
    5e04:	c9 f1       	breq	.+114    	; 0x5e78 <__uartHWSetBaudRate+0xf4>
    5e06:	e8 8d       	ldd	r30, Y+24	; 0x18
    5e08:	f9 8d       	ldd	r31, Y+25	; 0x19
    5e0a:	80 81       	ld	r24, Z
    5e0c:	90 95       	com	r25
    5e0e:	89 23       	and	r24, r25
    5e10:	80 83       	st	Z, r24
    5e12:	8f ef       	ldi	r24, 0xFF	; 255
    5e14:	e8 16       	cp	r14, r24
    5e16:	8f ef       	ldi	r24, 0xFF	; 255
    5e18:	f8 06       	cpc	r15, r24
    5e1a:	8f ef       	ldi	r24, 0xFF	; 255
    5e1c:	08 07       	cpc	r16, r24
    5e1e:	8f ef       	ldi	r24, 0xFF	; 255
    5e20:	18 07       	cpc	r17, r24
    5e22:	19 f4       	brne	.+6      	; 0x5e2a <__uartHWSetBaudRate+0xa6>
    5e24:	21 e0       	ldi	r18, 0x01	; 1
    5e26:	30 e0       	ldi	r19, 0x00	; 0
    5e28:	1d c0       	rjmp	.+58     	; 0x5e64 <__uartHWSetBaudRate+0xe0>
    5e2a:	32 e0       	ldi	r19, 0x02	; 2
    5e2c:	ee 0c       	add	r14, r14
    5e2e:	ff 1c       	adc	r15, r15
    5e30:	00 1f       	adc	r16, r16
    5e32:	11 1f       	adc	r17, r17
    5e34:	3a 95       	dec	r19
    5e36:	d1 f7       	brne	.-12     	; 0x5e2c <__uartHWSetBaudRate+0xa8>
    5e38:	60 91 00 02 	lds	r22, 0x0200
    5e3c:	70 91 01 02 	lds	r23, 0x0201
    5e40:	80 91 02 02 	lds	r24, 0x0202
    5e44:	90 91 03 02 	lds	r25, 0x0203
    5e48:	6e 0d       	add	r22, r14
    5e4a:	7f 1d       	adc	r23, r15
    5e4c:	80 1f       	adc	r24, r16
    5e4e:	91 1f       	adc	r25, r17
    5e50:	ee 0c       	add	r14, r14
    5e52:	ff 1c       	adc	r15, r15
    5e54:	00 1f       	adc	r16, r16
    5e56:	11 1f       	adc	r17, r17
    5e58:	a8 01       	movw	r20, r16
    5e5a:	97 01       	movw	r18, r14
    5e5c:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <__udivmodsi4>
    5e60:	21 50       	subi	r18, 0x01	; 1
    5e62:	30 40       	sbci	r19, 0x00	; 0
    5e64:	2c 15       	cp	r18, r12
    5e66:	3d 05       	cpc	r19, r13
    5e68:	38 f0       	brcs	.+14     	; 0x5e78 <__uartHWSetBaudRate+0xf4>
    5e6a:	e8 8d       	ldd	r30, Y+24	; 0x18
    5e6c:	f9 8d       	ldd	r31, Y+25	; 0x19
    5e6e:	80 81       	ld	r24, Z
    5e70:	9c a1       	ldd	r25, Y+36	; 0x24
    5e72:	89 2b       	or	r24, r25
    5e74:	80 83       	st	Z, r24
    5e76:	69 01       	movw	r12, r18
    5e78:	ec 8d       	ldd	r30, Y+28	; 0x1c
    5e7a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    5e7c:	c0 82       	st	Z, r12
    5e7e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5e80:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5e82:	d0 82       	st	Z, r13
    5e84:	bf be       	out	0x3f, r11	; 63
    5e86:	df 91       	pop	r29
    5e88:	cf 91       	pop	r28
    5e8a:	1f 91       	pop	r17
    5e8c:	0f 91       	pop	r16
    5e8e:	ff 90       	pop	r15
    5e90:	ef 90       	pop	r14
    5e92:	df 90       	pop	r13
    5e94:	cf 90       	pop	r12
    5e96:	bf 90       	pop	r11
    5e98:	08 95       	ret

00005e9a <__uartHWOff>:
    5e9a:	dc 01       	movw	r26, r24
    5e9c:	5a 96       	adiw	r26, 0x1a	; 26
    5e9e:	ed 91       	ld	r30, X+
    5ea0:	fc 91       	ld	r31, X
    5ea2:	5b 97       	sbiw	r26, 0x1b	; 27
    5ea4:	80 81       	ld	r24, Z
    5ea6:	87 72       	andi	r24, 0x27	; 39
    5ea8:	80 83       	st	Z, r24
    5eaa:	94 96       	adiw	r26, 0x24	; 36
    5eac:	9c 91       	ld	r25, X
    5eae:	94 97       	sbiw	r26, 0x24	; 36
    5eb0:	99 23       	and	r25, r25
    5eb2:	41 f0       	breq	.+16     	; 0x5ec4 <__uartHWOff+0x2a>
    5eb4:	58 96       	adiw	r26, 0x18	; 24
    5eb6:	ed 91       	ld	r30, X+
    5eb8:	fc 91       	ld	r31, X
    5eba:	59 97       	sbiw	r26, 0x19	; 25
    5ebc:	80 81       	ld	r24, Z
    5ebe:	90 95       	com	r25
    5ec0:	89 23       	and	r24, r25
    5ec2:	80 83       	st	Z, r24
    5ec4:	08 95       	ret

00005ec6 <oneWireReceiveMode>:
    5ec6:	dc 01       	movw	r26, r24
    5ec8:	53 96       	adiw	r26, 0x13	; 19
    5eca:	8c 91       	ld	r24, X
    5ecc:	53 97       	sbiw	r26, 0x13	; 19
    5ece:	88 23       	and	r24, r24
    5ed0:	71 f0       	breq	.+28     	; 0x5eee <oneWireReceiveMode+0x28>
    5ed2:	5a 96       	adiw	r26, 0x1a	; 26
    5ed4:	ed 91       	ld	r30, X+
    5ed6:	fc 91       	ld	r31, X
    5ed8:	5b 97       	sbiw	r26, 0x1b	; 27
    5eda:	80 81       	ld	r24, Z
    5edc:	87 7b       	andi	r24, 0xB7	; 183
    5ede:	80 83       	st	Z, r24
    5ee0:	5a 96       	adiw	r26, 0x1a	; 26
    5ee2:	ed 91       	ld	r30, X+
    5ee4:	fc 91       	ld	r31, X
    5ee6:	5b 97       	sbiw	r26, 0x1b	; 27
    5ee8:	80 81       	ld	r24, Z
    5eea:	80 69       	ori	r24, 0x90	; 144
    5eec:	80 83       	st	Z, r24
    5eee:	08 95       	ret

00005ef0 <__uartHWStartXmit>:
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	90 96       	adiw	r26, 0x20	; 32
    5ef4:	ed 91       	ld	r30, X+
    5ef6:	fc 91       	ld	r31, X
    5ef8:	91 97       	sbiw	r26, 0x21	; 33
    5efa:	60 83       	st	Z, r22
    5efc:	08 95       	ret

00005efe <startXmitMode>:
    5efe:	dc 01       	movw	r26, r24
    5f00:	53 96       	adiw	r26, 0x13	; 19
    5f02:	8c 91       	ld	r24, X
    5f04:	53 97       	sbiw	r26, 0x13	; 19
    5f06:	88 23       	and	r24, r24
    5f08:	71 f0       	breq	.+28     	; 0x5f26 <startXmitMode+0x28>
    5f0a:	5a 96       	adiw	r26, 0x1a	; 26
    5f0c:	ed 91       	ld	r30, X+
    5f0e:	fc 91       	ld	r31, X
    5f10:	5b 97       	sbiw	r26, 0x1b	; 27
    5f12:	80 81       	ld	r24, Z
    5f14:	8f 76       	andi	r24, 0x6F	; 111
    5f16:	80 83       	st	Z, r24
    5f18:	5a 96       	adiw	r26, 0x1a	; 26
    5f1a:	ed 91       	ld	r30, X+
    5f1c:	fc 91       	ld	r31, X
    5f1e:	5b 97       	sbiw	r26, 0x1b	; 27
    5f20:	80 81       	ld	r24, Z
    5f22:	88 64       	ori	r24, 0x48	; 72
    5f24:	80 83       	st	Z, r24
    5f26:	08 95       	ret

00005f28 <uartReceivePollingMode>:
    5f28:	dc 01       	movw	r26, r24
    5f2a:	5a 96       	adiw	r26, 0x1a	; 26
    5f2c:	ed 91       	ld	r30, X+
    5f2e:	fc 91       	ld	r31, X
    5f30:	5b 97       	sbiw	r26, 0x1b	; 27
    5f32:	66 23       	and	r22, r22
    5f34:	19 f0       	breq	.+6      	; 0x5f3c <uartReceivePollingMode+0x14>
    5f36:	80 81       	ld	r24, Z
    5f38:	8f 77       	andi	r24, 0x7F	; 127
    5f3a:	02 c0       	rjmp	.+4      	; 0x5f40 <uartReceivePollingMode+0x18>
    5f3c:	80 81       	ld	r24, Z
    5f3e:	80 68       	ori	r24, 0x80	; 128
    5f40:	80 83       	st	Z, r24
    5f42:	08 95       	ret

00005f44 <uartPollByte>:
    5f44:	dc 01       	movw	r26, r24
    5f46:	58 96       	adiw	r26, 0x18	; 24
    5f48:	ed 91       	ld	r30, X+
    5f4a:	fc 91       	ld	r31, X
    5f4c:	59 97       	sbiw	r26, 0x19	; 25
    5f4e:	80 81       	ld	r24, Z
    5f50:	87 fd       	sbrc	r24, 7
    5f52:	03 c0       	rjmp	.+6      	; 0x5f5a <uartPollByte+0x16>
    5f54:	2f ef       	ldi	r18, 0xFF	; 255
    5f56:	3f ef       	ldi	r19, 0xFF	; 255
    5f58:	07 c0       	rjmp	.+14     	; 0x5f68 <uartPollByte+0x24>
    5f5a:	90 96       	adiw	r26, 0x20	; 32
    5f5c:	ed 91       	ld	r30, X+
    5f5e:	fc 91       	ld	r31, X
    5f60:	91 97       	sbiw	r26, 0x21	; 33
    5f62:	80 81       	ld	r24, Z
    5f64:	28 2f       	mov	r18, r24
    5f66:	30 e0       	ldi	r19, 0x00	; 0
    5f68:	c9 01       	movw	r24, r18
    5f6a:	08 95       	ret

00005f6c <__uartHWInit>:
    5f6c:	cf 93       	push	r28
    5f6e:	df 93       	push	r29
    5f70:	ec 01       	movw	r28, r24
    5f72:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <_uartSetBaudRate>
    5f76:	8b 89       	ldd	r24, Y+19	; 0x13
    5f78:	88 23       	and	r24, r24
    5f7a:	11 f0       	breq	.+4      	; 0x5f80 <__uartHWInit+0x14>
    5f7c:	20 e9       	ldi	r18, 0x90	; 144
    5f7e:	0c c0       	rjmp	.+24     	; 0x5f98 <__uartHWInit+0x2c>
    5f80:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f82:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f84:	89 2b       	or	r24, r25
    5f86:	11 f0       	breq	.+4      	; 0x5f8c <__uartHWInit+0x20>
    5f88:	20 e9       	ldi	r18, 0x90	; 144
    5f8a:	01 c0       	rjmp	.+2      	; 0x5f8e <__uartHWInit+0x22>
    5f8c:	20 e0       	ldi	r18, 0x00	; 0
    5f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f92:	89 2b       	or	r24, r25
    5f94:	09 f0       	breq	.+2      	; 0x5f98 <__uartHWInit+0x2c>
    5f96:	28 64       	ori	r18, 0x48	; 72
    5f98:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5f9a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    5f9c:	20 83       	st	Z, r18
    5f9e:	df 91       	pop	r29
    5fa0:	cf 91       	pop	r28
    5fa2:	08 95       	ret

00005fa4 <a2dOff>:
    5fa4:	ea e7       	ldi	r30, 0x7A	; 122
    5fa6:	f0 e0       	ldi	r31, 0x00	; 0
    5fa8:	80 81       	ld	r24, Z
    5faa:	87 7f       	andi	r24, 0xF7	; 247
    5fac:	80 83       	st	Z, r24
    5fae:	80 81       	ld	r24, Z
    5fb0:	8f 77       	andi	r24, 0x7F	; 127
    5fb2:	80 83       	st	Z, r24
    5fb4:	08 95       	ret

00005fb6 <a2dSetPrescaler>:
    5fb6:	ea e7       	ldi	r30, 0x7A	; 122
    5fb8:	f0 e0       	ldi	r31, 0x00	; 0
    5fba:	90 81       	ld	r25, Z
    5fbc:	87 70       	andi	r24, 0x07	; 7
    5fbe:	98 7f       	andi	r25, 0xF8	; 248
    5fc0:	89 2b       	or	r24, r25
    5fc2:	80 83       	st	Z, r24
    5fc4:	08 95       	ret

00005fc6 <a2dConvert10bit>:
    5fc6:	98 2f       	mov	r25, r24
    5fc8:	85 ff       	sbrs	r24, 5
    5fca:	04 c0       	rjmp	.+8      	; 0x5fd4 <a2dConvert10bit+0xe>
    5fcc:	80 91 7b 00 	lds	r24, 0x007B
    5fd0:	88 60       	ori	r24, 0x08	; 8
    5fd2:	03 c0       	rjmp	.+6      	; 0x5fda <a2dConvert10bit+0x14>
    5fd4:	80 91 7b 00 	lds	r24, 0x007B
    5fd8:	87 7f       	andi	r24, 0xF7	; 247
    5fda:	80 93 7b 00 	sts	0x007B, r24
    5fde:	80 91 7c 00 	lds	r24, 0x007C
    5fe2:	9f 71       	andi	r25, 0x1F	; 31
    5fe4:	80 7e       	andi	r24, 0xE0	; 224
    5fe6:	89 2b       	or	r24, r25
    5fe8:	80 93 7c 00 	sts	0x007C, r24
    5fec:	10 92 1b 0c 	sts	0x0C1B, r1
    5ff0:	80 91 7a 00 	lds	r24, 0x007A
    5ff4:	80 61       	ori	r24, 0x10	; 16
    5ff6:	80 93 7a 00 	sts	0x007A, r24
    5ffa:	80 91 7a 00 	lds	r24, 0x007A
    5ffe:	80 64       	ori	r24, 0x40	; 64
    6000:	80 93 7a 00 	sts	0x007A, r24
    6004:	80 91 7a 00 	lds	r24, 0x007A
    6008:	86 fd       	sbrc	r24, 6
    600a:	fc cf       	rjmp	.-8      	; 0x6004 <a2dConvert10bit+0x3e>
    600c:	20 91 78 00 	lds	r18, 0x0078
    6010:	30 91 79 00 	lds	r19, 0x0079
    6014:	c9 01       	movw	r24, r18
    6016:	08 95       	ret

00006018 <a2dConvert8bit>:
    6018:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <a2dConvert10bit>
    601c:	96 95       	lsr	r25
    601e:	87 95       	ror	r24
    6020:	96 95       	lsr	r25
    6022:	87 95       	ror	r24
    6024:	08 95       	ret

00006026 <__vector_29>:
    6026:	1f 92       	push	r1
    6028:	0f 92       	push	r0
    602a:	0f b6       	in	r0, 0x3f	; 63
    602c:	0f 92       	push	r0
    602e:	11 24       	eor	r1, r1
    6030:	8f 93       	push	r24
    6032:	8f ef       	ldi	r24, 0xFF	; 255
    6034:	80 93 1b 0c 	sts	0x0C1B, r24
    6038:	8f 91       	pop	r24
    603a:	0f 90       	pop	r0
    603c:	0f be       	out	0x3f, r0	; 63
    603e:	0f 90       	pop	r0
    6040:	1f 90       	pop	r1
    6042:	18 95       	reti

00006044 <a2dInit>:
    6044:	ef 92       	push	r14
    6046:	ff 92       	push	r15
    6048:	0f 93       	push	r16
    604a:	1f 93       	push	r17
    604c:	cf 93       	push	r28
    604e:	df 93       	push	r29
    6050:	80 91 7a 00 	lds	r24, 0x007A
    6054:	80 68       	ori	r24, 0x80	; 128
    6056:	80 93 7a 00 	sts	0x007A, r24
    605a:	80 91 7a 00 	lds	r24, 0x007A
    605e:	8f 7d       	andi	r24, 0xDF	; 223
    6060:	80 93 7a 00 	sts	0x007A, r24
    6064:	80 91 7a 00 	lds	r24, 0x007A
    6068:	88 7f       	andi	r24, 0xF8	; 248
    606a:	86 60       	ori	r24, 0x06	; 6
    606c:	80 93 7a 00 	sts	0x007A, r24
    6070:	80 91 7c 00 	lds	r24, 0x007C
    6074:	8f 73       	andi	r24, 0x3F	; 63
    6076:	80 64       	ori	r24, 0x40	; 64
    6078:	80 93 7c 00 	sts	0x007C, r24
    607c:	80 91 7c 00 	lds	r24, 0x007C
    6080:	8f 7d       	andi	r24, 0xDF	; 223
    6082:	80 93 7c 00 	sts	0x007C, r24
    6086:	80 91 7a 00 	lds	r24, 0x007A
    608a:	88 60       	ori	r24, 0x08	; 8
    608c:	80 93 7a 00 	sts	0x007A, r24
    6090:	8f ef       	ldi	r24, 0xFF	; 255
    6092:	80 93 1b 0c 	sts	0x0C1B, r24
    6096:	78 94       	sei
    6098:	80 91 7a 02 	lds	r24, 0x027A
    609c:	c8 2f       	mov	r28, r24
    609e:	d0 e0       	ldi	r29, 0x00	; 0
    60a0:	21 97       	sbiw	r28, 0x01	; 1
    60a2:	00 e0       	ldi	r16, 0x00	; 0
    60a4:	10 e0       	ldi	r17, 0x00	; 0
    60a6:	7e 01       	movw	r14, r28
    60a8:	0f c0       	rjmp	.+30     	; 0x60c8 <a2dInit+0x84>
    60aa:	c7 01       	movw	r24, r14
    60ac:	80 1b       	sub	r24, r16
    60ae:	91 0b       	sbc	r25, r17
    60b0:	08 97       	sbiw	r24, 0x08	; 8
    60b2:	24 f0       	brlt	.+8      	; 0x60bc <a2dInit+0x78>
    60b4:	9e 01       	movw	r18, r28
    60b6:	28 5e       	subi	r18, 0xE8	; 232
    60b8:	82 2f       	mov	r24, r18
    60ba:	01 c0       	rjmp	.+2      	; 0x60be <a2dInit+0x7a>
    60bc:	8c 2f       	mov	r24, r28
    60be:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <a2dConvert10bit>
    60c2:	21 97       	sbiw	r28, 0x01	; 1
    60c4:	0f 5f       	subi	r16, 0xFF	; 255
    60c6:	1f 4f       	sbci	r17, 0xFF	; 255
    60c8:	3f ef       	ldi	r19, 0xFF	; 255
    60ca:	cf 3f       	cpi	r28, 0xFF	; 255
    60cc:	d3 07       	cpc	r29, r19
    60ce:	69 f7       	brne	.-38     	; 0x60aa <a2dInit+0x66>
    60d0:	df 91       	pop	r29
    60d2:	cf 91       	pop	r28
    60d4:	1f 91       	pop	r17
    60d6:	0f 91       	pop	r16
    60d8:	ff 90       	pop	r15
    60da:	ef 90       	pop	r14
    60dc:	08 95       	ret

000060de <__scheduleUpdate>:
    60de:	2f 92       	push	r2
    60e0:	3f 92       	push	r3
    60e2:	4f 92       	push	r4
    60e4:	5f 92       	push	r5
    60e6:	6f 92       	push	r6
    60e8:	7f 92       	push	r7
    60ea:	8f 92       	push	r8
    60ec:	9f 92       	push	r9
    60ee:	af 92       	push	r10
    60f0:	bf 92       	push	r11
    60f2:	cf 92       	push	r12
    60f4:	df 92       	push	r13
    60f6:	ef 92       	push	r14
    60f8:	ff 92       	push	r15
    60fa:	0f 93       	push	r16
    60fc:	1f 93       	push	r17
    60fe:	df 93       	push	r29
    6100:	cf 93       	push	r28
    6102:	cd b7       	in	r28, 0x3d	; 61
    6104:	de b7       	in	r29, 0x3e	; 62
    6106:	29 97       	sbiw	r28, 0x09	; 9
    6108:	0f b6       	in	r0, 0x3f	; 63
    610a:	f8 94       	cli
    610c:	de bf       	out	0x3e, r29	; 62
    610e:	0f be       	out	0x3f, r0	; 63
    6110:	cd bf       	out	0x3d, r28	; 61
    6112:	99 87       	std	Y+9, r25	; 0x09
    6114:	88 87       	std	Y+8, r24	; 0x08
    6116:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <compareDetach>
    611a:	2f b7       	in	r18, 0x3f	; 63
    611c:	2f 83       	std	Y+7, r18	; 0x07
    611e:	78 94       	sei
    6120:	8f ef       	ldi	r24, 0xFF	; 255
    6122:	80 93 1f 0c 	sts	0x0C1F, r24
    6126:	10 92 1e 0c 	sts	0x0C1E, r1
    612a:	80 91 08 02 	lds	r24, 0x0208
    612e:	a8 2f       	mov	r26, r24
    6130:	b0 e0       	ldi	r27, 0x00	; 0
    6132:	11 97       	sbiw	r26, 0x01	; 1
    6134:	be 83       	std	Y+6, r27	; 0x06
    6136:	ad 83       	std	Y+5, r26	; 0x05
    6138:	ed e0       	ldi	r30, 0x0D	; 13
    613a:	f0 e0       	ldi	r31, 0x00	; 0
    613c:	ae 9f       	mul	r26, r30
    613e:	50 01       	movw	r10, r0
    6140:	af 9f       	mul	r26, r31
    6142:	b0 0c       	add	r11, r0
    6144:	be 9f       	mul	r27, r30
    6146:	b0 0c       	add	r11, r0
    6148:	11 24       	eor	r1, r1
    614a:	27 e8       	ldi	r18, 0x87	; 135
    614c:	33 e0       	ldi	r19, 0x03	; 3
    614e:	a2 0e       	add	r10, r18
    6150:	b3 1e       	adc	r11, r19
    6152:	22 24       	eor	r2, r2
    6154:	33 24       	eor	r3, r3
    6156:	21 01       	movw	r4, r2
    6158:	5a c0       	rjmp	.+180    	; 0x620e <__scheduleUpdate+0x130>
    615a:	d5 01       	movw	r26, r10
    615c:	8c 91       	ld	r24, X
    615e:	88 23       	and	r24, r24
    6160:	09 f4       	brne	.+2      	; 0x6164 <__scheduleUpdate+0x86>
    6162:	4c c0       	rjmp	.+152    	; 0x61fc <__scheduleUpdate+0x11e>
    6164:	19 96       	adiw	r26, 0x09	; 9
    6166:	6d 90       	ld	r6, X+
    6168:	7d 90       	ld	r7, X+
    616a:	8d 90       	ld	r8, X+
    616c:	9c 90       	ld	r9, X
    616e:	1c 97       	sbiw	r26, 0x0c	; 12
    6170:	15 96       	adiw	r26, 0x05	; 5
    6172:	cd 90       	ld	r12, X+
    6174:	dd 90       	ld	r13, X+
    6176:	ed 90       	ld	r14, X+
    6178:	fc 90       	ld	r15, X
    617a:	18 97       	sbiw	r26, 0x08	; 8
    617c:	c4 01       	movw	r24, r8
    617e:	b3 01       	movw	r22, r6
    6180:	a7 01       	movw	r20, r14
    6182:	96 01       	movw	r18, r12
    6184:	8e 01       	movw	r16, r28
    6186:	0f 5f       	subi	r16, 0xFF	; 255
    6188:	1f 4f       	sbci	r17, 0xFF	; 255
    618a:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <clockHasElapsedGetOverflow>
    618e:	88 23       	and	r24, r24
    6190:	19 f1       	breq	.+70     	; 0x61d8 <__scheduleUpdate+0xfa>
    6192:	d5 01       	movw	r26, r10
    6194:	11 96       	adiw	r26, 0x01	; 1
    6196:	ed 91       	ld	r30, X+
    6198:	fc 91       	ld	r31, X
    619a:	12 97       	sbiw	r26, 0x02	; 2
    619c:	13 96       	adiw	r26, 0x03	; 3
    619e:	8d 91       	ld	r24, X+
    61a0:	9c 91       	ld	r25, X
    61a2:	14 97       	sbiw	r26, 0x04	; 4
    61a4:	1c 92       	st	X, r1
    61a6:	20 91 1c 0c 	lds	r18, 0x0C1C
    61aa:	30 91 1d 0c 	lds	r19, 0x0C1D
    61ae:	21 50       	subi	r18, 0x01	; 1
    61b0:	30 40       	sbci	r19, 0x00	; 0
    61b2:	30 93 1d 0c 	sts	0x0C1D, r19
    61b6:	20 93 1c 0c 	sts	0x0C1C, r18
    61ba:	c6 0c       	add	r12, r6
    61bc:	d7 1c       	adc	r13, r7
    61be:	e8 1c       	adc	r14, r8
    61c0:	f9 1c       	adc	r15, r9
    61c2:	09 81       	ldd	r16, Y+1	; 0x01
    61c4:	1a 81       	ldd	r17, Y+2	; 0x02
    61c6:	2b 81       	ldd	r18, Y+3	; 0x03
    61c8:	3c 81       	ldd	r19, Y+4	; 0x04
    61ca:	b7 01       	movw	r22, r14
    61cc:	a6 01       	movw	r20, r12
    61ce:	09 95       	icall
    61d0:	bf ef       	ldi	r27, 0xFF	; 255
    61d2:	b0 93 1e 0c 	sts	0x0C1E, r27
    61d6:	12 c0       	rjmp	.+36     	; 0x61fc <__scheduleUpdate+0x11e>
    61d8:	21 14       	cp	r2, r1
    61da:	31 04       	cpc	r3, r1
    61dc:	41 04       	cpc	r4, r1
    61de:	51 04       	cpc	r5, r1
    61e0:	49 f0       	breq	.+18     	; 0x61f4 <__scheduleUpdate+0x116>
    61e2:	89 81       	ldd	r24, Y+1	; 0x01
    61e4:	9a 81       	ldd	r25, Y+2	; 0x02
    61e6:	ab 81       	ldd	r26, Y+3	; 0x03
    61e8:	bc 81       	ldd	r27, Y+4	; 0x04
    61ea:	82 15       	cp	r24, r2
    61ec:	93 05       	cpc	r25, r3
    61ee:	a4 05       	cpc	r26, r4
    61f0:	b5 05       	cpc	r27, r5
    61f2:	20 f4       	brcc	.+8      	; 0x61fc <__scheduleUpdate+0x11e>
    61f4:	29 80       	ldd	r2, Y+1	; 0x01
    61f6:	3a 80       	ldd	r3, Y+2	; 0x02
    61f8:	4b 80       	ldd	r4, Y+3	; 0x03
    61fa:	5c 80       	ldd	r5, Y+4	; 0x04
    61fc:	ed 81       	ldd	r30, Y+5	; 0x05
    61fe:	fe 81       	ldd	r31, Y+6	; 0x06
    6200:	31 97       	sbiw	r30, 0x01	; 1
    6202:	fe 83       	std	Y+6, r31	; 0x06
    6204:	ed 83       	std	Y+5, r30	; 0x05
    6206:	23 ef       	ldi	r18, 0xF3	; 243
    6208:	3f ef       	ldi	r19, 0xFF	; 255
    620a:	a2 0e       	add	r10, r18
    620c:	b3 1e       	adc	r11, r19
    620e:	8d 81       	ldd	r24, Y+5	; 0x05
    6210:	9e 81       	ldd	r25, Y+6	; 0x06
    6212:	8f 5f       	subi	r24, 0xFF	; 255
    6214:	9f 4f       	sbci	r25, 0xFF	; 255
    6216:	09 f0       	breq	.+2      	; 0x621a <__scheduleUpdate+0x13c>
    6218:	a0 cf       	rjmp	.-192    	; 0x615a <__scheduleUpdate+0x7c>
    621a:	80 91 1e 0c 	lds	r24, 0x0C1E
    621e:	88 23       	and	r24, r24
    6220:	09 f0       	breq	.+2      	; 0x6224 <__scheduleUpdate+0x146>
    6222:	81 cf       	rjmp	.-254    	; 0x6126 <__scheduleUpdate+0x48>
    6224:	10 92 1f 0c 	sts	0x0C1F, r1
    6228:	80 91 1c 0c 	lds	r24, 0x0C1C
    622c:	90 91 1d 0c 	lds	r25, 0x0C1D
    6230:	18 16       	cp	r1, r24
    6232:	19 06       	cpc	r1, r25
    6234:	0c f0       	brlt	.+2      	; 0x6238 <__scheduleUpdate+0x15a>
    6236:	44 c0       	rjmp	.+136    	; 0x62c0 <__scheduleUpdate+0x1e2>
    6238:	f0 90 19 0c 	lds	r15, 0x0C19
    623c:	e0 90 1a 0c 	lds	r14, 0x0C1A
    6240:	ef 2d       	mov	r30, r15
    6242:	fe 2d       	mov	r31, r14
    6244:	05 91       	lpm	r16, Z+
    6246:	14 91       	lpm	r17, Z+
    6248:	20 91 06 02 	lds	r18, 0x0206
    624c:	30 91 07 02 	lds	r19, 0x0207
    6250:	40 e0       	ldi	r20, 0x00	; 0
    6252:	50 e0       	ldi	r21, 0x00	; 0
    6254:	c2 01       	movw	r24, r4
    6256:	b1 01       	movw	r22, r2
    6258:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__mulsi3>
    625c:	f8 01       	movw	r30, r16
    625e:	20 81       	ld	r18, Z
    6260:	31 81       	ldd	r19, Z+1	; 0x01
    6262:	40 e0       	ldi	r20, 0x00	; 0
    6264:	50 e0       	ldi	r21, 0x00	; 0
    6266:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <__udivmodsi4>
    626a:	59 01       	movw	r10, r18
    626c:	6a 01       	movw	r12, r20
    626e:	8f 2d       	mov	r24, r15
    6270:	9e 2d       	mov	r25, r14
    6272:	0e 94 68 29 	call	0x52d0	; 0x52d0 <timerGetTOP>
    6276:	7c 01       	movw	r14, r24
    6278:	00 e0       	ldi	r16, 0x00	; 0
    627a:	10 e0       	ldi	r17, 0x00	; 0
    627c:	ae 14       	cp	r10, r14
    627e:	bf 04       	cpc	r11, r15
    6280:	c0 06       	cpc	r12, r16
    6282:	d1 06       	cpc	r13, r17
    6284:	10 f4       	brcc	.+4      	; 0x628a <__scheduleUpdate+0x1ac>
    6286:	86 01       	movw	r16, r12
    6288:	75 01       	movw	r14, r10
    628a:	80 91 19 0c 	lds	r24, 0x0C19
    628e:	90 91 1a 0c 	lds	r25, 0x0C1A
    6292:	0e 94 68 29 	call	0x52d0	; 0x52d0 <timerGetTOP>
    6296:	8c 01       	movw	r16, r24
    6298:	80 91 19 0c 	lds	r24, 0x0C19
    629c:	90 91 1a 0c 	lds	r25, 0x0C1A
    62a0:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <timerGetCounter>
    62a4:	8e 0d       	add	r24, r14
    62a6:	9f 1d       	adc	r25, r15
    62a8:	b8 01       	movw	r22, r16
    62aa:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <__udivmodhi4>
    62ae:	ac 01       	movw	r20, r24
    62b0:	88 85       	ldd	r24, Y+8	; 0x08
    62b2:	99 85       	ldd	r25, Y+9	; 0x09
    62b4:	6f e6       	ldi	r22, 0x6F	; 111
    62b6:	70 e3       	ldi	r23, 0x30	; 48
    62b8:	20 e0       	ldi	r18, 0x00	; 0
    62ba:	30 e0       	ldi	r19, 0x00	; 0
    62bc:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <compareAttach>
    62c0:	ff 81       	ldd	r31, Y+7	; 0x07
    62c2:	ff bf       	out	0x3f, r31	; 63
    62c4:	29 96       	adiw	r28, 0x09	; 9
    62c6:	0f b6       	in	r0, 0x3f	; 63
    62c8:	f8 94       	cli
    62ca:	de bf       	out	0x3e, r29	; 62
    62cc:	0f be       	out	0x3f, r0	; 63
    62ce:	cd bf       	out	0x3d, r28	; 61
    62d0:	cf 91       	pop	r28
    62d2:	df 91       	pop	r29
    62d4:	1f 91       	pop	r17
    62d6:	0f 91       	pop	r16
    62d8:	ff 90       	pop	r15
    62da:	ef 90       	pop	r14
    62dc:	df 90       	pop	r13
    62de:	cf 90       	pop	r12
    62e0:	bf 90       	pop	r11
    62e2:	af 90       	pop	r10
    62e4:	9f 90       	pop	r9
    62e6:	8f 90       	pop	r8
    62e8:	7f 90       	pop	r7
    62ea:	6f 90       	pop	r6
    62ec:	5f 90       	pop	r5
    62ee:	4f 90       	pop	r4
    62f0:	3f 90       	pop	r3
    62f2:	2f 90       	pop	r2
    62f4:	08 95       	ret

000062f6 <scheduleJob>:
    62f6:	2f 92       	push	r2
    62f8:	3f 92       	push	r3
    62fa:	4f 92       	push	r4
    62fc:	5f 92       	push	r5
    62fe:	6f 92       	push	r6
    6300:	7f 92       	push	r7
    6302:	8f 92       	push	r8
    6304:	9f 92       	push	r9
    6306:	af 92       	push	r10
    6308:	bf 92       	push	r11
    630a:	cf 92       	push	r12
    630c:	df 92       	push	r13
    630e:	ef 92       	push	r14
    6310:	ff 92       	push	r15
    6312:	0f 93       	push	r16
    6314:	1f 93       	push	r17
    6316:	df 93       	push	r29
    6318:	cf 93       	push	r28
    631a:	00 d0       	rcall	.+0      	; 0x631c <scheduleJob+0x26>
    631c:	00 d0       	rcall	.+0      	; 0x631e <scheduleJob+0x28>
    631e:	cd b7       	in	r28, 0x3d	; 61
    6320:	de b7       	in	r29, 0x3e	; 62
    6322:	1c 01       	movw	r2, r24
    6324:	2b 01       	movw	r4, r22
    6326:	49 01       	movw	r8, r18
    6328:	5a 01       	movw	r10, r20
    632a:	67 01       	movw	r12, r14
    632c:	78 01       	movw	r14, r16
    632e:	88 ee       	ldi	r24, 0xE8	; 232
    6330:	c8 16       	cp	r12, r24
    6332:	83 e0       	ldi	r24, 0x03	; 3
    6334:	d8 06       	cpc	r13, r24
    6336:	80 e0       	ldi	r24, 0x00	; 0
    6338:	e8 06       	cpc	r14, r24
    633a:	80 e0       	ldi	r24, 0x00	; 0
    633c:	f8 06       	cpc	r15, r24
    633e:	38 f4       	brcc	.+14     	; 0x634e <scheduleJob+0x58>
    6340:	80 91 1f 0c 	lds	r24, 0x0C1F
    6344:	88 23       	and	r24, r24
    6346:	c1 f1       	breq	.+112    	; 0x63b8 <scheduleJob+0xc2>
    6348:	8f ef       	ldi	r24, 0xFF	; 255
    634a:	80 93 1e 0c 	sts	0x0C1E, r24
    634e:	6f b7       	in	r22, 0x3f	; 63
    6350:	f8 94       	cli
    6352:	80 91 08 02 	lds	r24, 0x0208
    6356:	48 2f       	mov	r20, r24
    6358:	50 e0       	ldi	r21, 0x00	; 0
    635a:	a7 e8       	ldi	r26, 0x87	; 135
    635c:	b3 e0       	ldi	r27, 0x03	; 3
    635e:	20 e0       	ldi	r18, 0x00	; 0
    6360:	30 e0       	ldi	r19, 0x00	; 0
    6362:	20 c0       	rjmp	.+64     	; 0x63a4 <scheduleJob+0xae>
    6364:	fd 01       	movw	r30, r26
    6366:	8c 91       	ld	r24, X
    6368:	1d 96       	adiw	r26, 0x0d	; 13
    636a:	88 23       	and	r24, r24
    636c:	c9 f4       	brne	.+50     	; 0x63a0 <scheduleJob+0xaa>
    636e:	8f ef       	ldi	r24, 0xFF	; 255
    6370:	80 83       	st	Z, r24
    6372:	32 82       	std	Z+2, r3	; 0x02
    6374:	21 82       	std	Z+1, r2	; 0x01
    6376:	54 82       	std	Z+4, r5	; 0x04
    6378:	43 82       	std	Z+3, r4	; 0x03
    637a:	81 86       	std	Z+9, r8	; 0x09
    637c:	92 86       	std	Z+10, r9	; 0x0a
    637e:	a3 86       	std	Z+11, r10	; 0x0b
    6380:	b4 86       	std	Z+12, r11	; 0x0c
    6382:	c5 82       	std	Z+5, r12	; 0x05
    6384:	d6 82       	std	Z+6, r13	; 0x06
    6386:	e7 82       	std	Z+7, r14	; 0x07
    6388:	f0 86       	std	Z+8, r15	; 0x08
    638a:	80 91 1c 0c 	lds	r24, 0x0C1C
    638e:	90 91 1d 0c 	lds	r25, 0x0C1D
    6392:	01 96       	adiw	r24, 0x01	; 1
    6394:	90 93 1d 0c 	sts	0x0C1D, r25
    6398:	80 93 1c 0c 	sts	0x0C1C, r24
    639c:	8f ef       	ldi	r24, 0xFF	; 255
    639e:	06 c0       	rjmp	.+12     	; 0x63ac <scheduleJob+0xb6>
    63a0:	2f 5f       	subi	r18, 0xFF	; 255
    63a2:	3f 4f       	sbci	r19, 0xFF	; 255
    63a4:	24 17       	cp	r18, r20
    63a6:	35 07       	cpc	r19, r21
    63a8:	ec f2       	brlt	.-70     	; 0x6364 <scheduleJob+0x6e>
    63aa:	80 e0       	ldi	r24, 0x00	; 0
    63ac:	6f bf       	out	0x3f, r22	; 63
    63ae:	88 23       	and	r24, r24
    63b0:	59 f5       	brne	.+86     	; 0x6408 <scheduleJob+0x112>
    63b2:	8f ef       	ldi	r24, 0xFF	; 255
    63b4:	0e 94 76 28 	call	0x50ec	; 0x50ec <setError>
    63b8:	3e 01       	movw	r6, r28
    63ba:	08 94       	sec
    63bc:	61 1c       	adc	r6, r1
    63be:	71 1c       	adc	r7, r1
    63c0:	c5 01       	movw	r24, r10
    63c2:	b4 01       	movw	r22, r8
    63c4:	a7 01       	movw	r20, r14
    63c6:	96 01       	movw	r18, r12
    63c8:	83 01       	movw	r16, r6
    63ca:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <clockHasElapsedGetOverflow>
    63ce:	88 23       	and	r24, r24
    63d0:	b9 f3       	breq	.-18     	; 0x63c0 <scheduleJob+0xca>
    63d2:	c8 0c       	add	r12, r8
    63d4:	d9 1c       	adc	r13, r9
    63d6:	ea 1c       	adc	r14, r10
    63d8:	fb 1c       	adc	r15, r11
    63da:	09 81       	ldd	r16, Y+1	; 0x01
    63dc:	1a 81       	ldd	r17, Y+2	; 0x02
    63de:	2b 81       	ldd	r18, Y+3	; 0x03
    63e0:	3c 81       	ldd	r19, Y+4	; 0x04
    63e2:	c2 01       	movw	r24, r4
    63e4:	b7 01       	movw	r22, r14
    63e6:	a6 01       	movw	r20, r12
    63e8:	f1 01       	movw	r30, r2
    63ea:	09 95       	icall
    63ec:	11 c0       	rjmp	.+34     	; 0x6410 <scheduleJob+0x11a>
    63ee:	e0 91 19 0c 	lds	r30, 0x0C19
    63f2:	f0 91 1a 0c 	lds	r31, 0x0C1A
    63f6:	77 96       	adiw	r30, 0x17	; 23
    63f8:	85 91       	lpm	r24, Z+
    63fa:	94 91       	lpm	r25, Z+
    63fc:	40 96       	adiw	r24, 0x10	; 16
    63fe:	60 e0       	ldi	r22, 0x00	; 0
    6400:	70 e0       	ldi	r23, 0x00	; 0
    6402:	0e 94 6f 30 	call	0x60de	; 0x60de <__scheduleUpdate>
    6406:	04 c0       	rjmp	.+8      	; 0x6410 <scheduleJob+0x11a>
    6408:	80 91 1f 0c 	lds	r24, 0x0C1F
    640c:	88 23       	and	r24, r24
    640e:	79 f3       	breq	.-34     	; 0x63ee <scheduleJob+0xf8>
    6410:	0f 90       	pop	r0
    6412:	0f 90       	pop	r0
    6414:	0f 90       	pop	r0
    6416:	0f 90       	pop	r0
    6418:	cf 91       	pop	r28
    641a:	df 91       	pop	r29
    641c:	1f 91       	pop	r17
    641e:	0f 91       	pop	r16
    6420:	ff 90       	pop	r15
    6422:	ef 90       	pop	r14
    6424:	df 90       	pop	r13
    6426:	cf 90       	pop	r12
    6428:	bf 90       	pop	r11
    642a:	af 90       	pop	r10
    642c:	9f 90       	pop	r9
    642e:	8f 90       	pop	r8
    6430:	7f 90       	pop	r7
    6432:	6f 90       	pop	r6
    6434:	5f 90       	pop	r5
    6436:	4f 90       	pop	r4
    6438:	3f 90       	pop	r3
    643a:	2f 90       	pop	r2
    643c:	08 95       	ret

0000643e <malloc>:
    643e:	cf 93       	push	r28
    6440:	df 93       	push	r29
    6442:	bc 01       	movw	r22, r24
    6444:	82 30       	cpi	r24, 0x02	; 2
    6446:	91 05       	cpc	r25, r1
    6448:	10 f4       	brcc	.+4      	; 0x644e <malloc+0x10>
    644a:	62 e0       	ldi	r22, 0x02	; 2
    644c:	70 e0       	ldi	r23, 0x00	; 0
    644e:	a0 91 22 0c 	lds	r26, 0x0C22
    6452:	b0 91 23 0c 	lds	r27, 0x0C23
    6456:	ed 01       	movw	r28, r26
    6458:	e0 e0       	ldi	r30, 0x00	; 0
    645a:	f0 e0       	ldi	r31, 0x00	; 0
    645c:	40 e0       	ldi	r20, 0x00	; 0
    645e:	50 e0       	ldi	r21, 0x00	; 0
    6460:	21 c0       	rjmp	.+66     	; 0x64a4 <malloc+0x66>
    6462:	88 81       	ld	r24, Y
    6464:	99 81       	ldd	r25, Y+1	; 0x01
    6466:	86 17       	cp	r24, r22
    6468:	97 07       	cpc	r25, r23
    646a:	69 f4       	brne	.+26     	; 0x6486 <malloc+0x48>
    646c:	8a 81       	ldd	r24, Y+2	; 0x02
    646e:	9b 81       	ldd	r25, Y+3	; 0x03
    6470:	30 97       	sbiw	r30, 0x00	; 0
    6472:	19 f0       	breq	.+6      	; 0x647a <malloc+0x3c>
    6474:	93 83       	std	Z+3, r25	; 0x03
    6476:	82 83       	std	Z+2, r24	; 0x02
    6478:	04 c0       	rjmp	.+8      	; 0x6482 <malloc+0x44>
    647a:	90 93 23 0c 	sts	0x0C23, r25
    647e:	80 93 22 0c 	sts	0x0C22, r24
    6482:	fe 01       	movw	r30, r28
    6484:	34 c0       	rjmp	.+104    	; 0x64ee <malloc+0xb0>
    6486:	68 17       	cp	r22, r24
    6488:	79 07       	cpc	r23, r25
    648a:	38 f4       	brcc	.+14     	; 0x649a <malloc+0x5c>
    648c:	41 15       	cp	r20, r1
    648e:	51 05       	cpc	r21, r1
    6490:	19 f0       	breq	.+6      	; 0x6498 <malloc+0x5a>
    6492:	84 17       	cp	r24, r20
    6494:	95 07       	cpc	r25, r21
    6496:	08 f4       	brcc	.+2      	; 0x649a <malloc+0x5c>
    6498:	ac 01       	movw	r20, r24
    649a:	fe 01       	movw	r30, r28
    649c:	8a 81       	ldd	r24, Y+2	; 0x02
    649e:	9b 81       	ldd	r25, Y+3	; 0x03
    64a0:	9c 01       	movw	r18, r24
    64a2:	e9 01       	movw	r28, r18
    64a4:	20 97       	sbiw	r28, 0x00	; 0
    64a6:	e9 f6       	brne	.-70     	; 0x6462 <malloc+0x24>
    64a8:	41 15       	cp	r20, r1
    64aa:	51 05       	cpc	r21, r1
    64ac:	a9 f1       	breq	.+106    	; 0x6518 <malloc+0xda>
    64ae:	ca 01       	movw	r24, r20
    64b0:	86 1b       	sub	r24, r22
    64b2:	97 0b       	sbc	r25, r23
    64b4:	04 97       	sbiw	r24, 0x04	; 4
    64b6:	08 f4       	brcc	.+2      	; 0x64ba <malloc+0x7c>
    64b8:	ba 01       	movw	r22, r20
    64ba:	e0 e0       	ldi	r30, 0x00	; 0
    64bc:	f0 e0       	ldi	r31, 0x00	; 0
    64be:	2a c0       	rjmp	.+84     	; 0x6514 <malloc+0xd6>
    64c0:	8d 91       	ld	r24, X+
    64c2:	9c 91       	ld	r25, X
    64c4:	11 97       	sbiw	r26, 0x01	; 1
    64c6:	84 17       	cp	r24, r20
    64c8:	95 07       	cpc	r25, r21
    64ca:	f9 f4       	brne	.+62     	; 0x650a <malloc+0xcc>
    64cc:	64 17       	cp	r22, r20
    64ce:	75 07       	cpc	r23, r21
    64d0:	81 f4       	brne	.+32     	; 0x64f2 <malloc+0xb4>
    64d2:	12 96       	adiw	r26, 0x02	; 2
    64d4:	8d 91       	ld	r24, X+
    64d6:	9c 91       	ld	r25, X
    64d8:	13 97       	sbiw	r26, 0x03	; 3
    64da:	30 97       	sbiw	r30, 0x00	; 0
    64dc:	19 f0       	breq	.+6      	; 0x64e4 <malloc+0xa6>
    64de:	93 83       	std	Z+3, r25	; 0x03
    64e0:	82 83       	std	Z+2, r24	; 0x02
    64e2:	04 c0       	rjmp	.+8      	; 0x64ec <malloc+0xae>
    64e4:	90 93 23 0c 	sts	0x0C23, r25
    64e8:	80 93 22 0c 	sts	0x0C22, r24
    64ec:	fd 01       	movw	r30, r26
    64ee:	32 96       	adiw	r30, 0x02	; 2
    64f0:	4c c0       	rjmp	.+152    	; 0x658a <malloc+0x14c>
    64f2:	ca 01       	movw	r24, r20
    64f4:	86 1b       	sub	r24, r22
    64f6:	97 0b       	sbc	r25, r23
    64f8:	fd 01       	movw	r30, r26
    64fa:	e8 0f       	add	r30, r24
    64fc:	f9 1f       	adc	r31, r25
    64fe:	61 93       	st	Z+, r22
    6500:	71 93       	st	Z+, r23
    6502:	02 97       	sbiw	r24, 0x02	; 2
    6504:	8d 93       	st	X+, r24
    6506:	9c 93       	st	X, r25
    6508:	40 c0       	rjmp	.+128    	; 0x658a <malloc+0x14c>
    650a:	fd 01       	movw	r30, r26
    650c:	82 81       	ldd	r24, Z+2	; 0x02
    650e:	93 81       	ldd	r25, Z+3	; 0x03
    6510:	9c 01       	movw	r18, r24
    6512:	d9 01       	movw	r26, r18
    6514:	10 97       	sbiw	r26, 0x00	; 0
    6516:	a1 f6       	brne	.-88     	; 0x64c0 <malloc+0x82>
    6518:	80 91 20 0c 	lds	r24, 0x0C20
    651c:	90 91 21 0c 	lds	r25, 0x0C21
    6520:	89 2b       	or	r24, r25
    6522:	41 f4       	brne	.+16     	; 0x6534 <malloc+0xf6>
    6524:	80 91 e5 02 	lds	r24, 0x02E5
    6528:	90 91 e6 02 	lds	r25, 0x02E6
    652c:	90 93 21 0c 	sts	0x0C21, r25
    6530:	80 93 20 0c 	sts	0x0C20, r24
    6534:	40 91 e7 02 	lds	r20, 0x02E7
    6538:	50 91 e8 02 	lds	r21, 0x02E8
    653c:	41 15       	cp	r20, r1
    653e:	51 05       	cpc	r21, r1
    6540:	41 f4       	brne	.+16     	; 0x6552 <malloc+0x114>
    6542:	4d b7       	in	r20, 0x3d	; 61
    6544:	5e b7       	in	r21, 0x3e	; 62
    6546:	80 91 e3 02 	lds	r24, 0x02E3
    654a:	90 91 e4 02 	lds	r25, 0x02E4
    654e:	48 1b       	sub	r20, r24
    6550:	59 0b       	sbc	r21, r25
    6552:	20 91 20 0c 	lds	r18, 0x0C20
    6556:	30 91 21 0c 	lds	r19, 0x0C21
    655a:	ca 01       	movw	r24, r20
    655c:	82 1b       	sub	r24, r18
    655e:	93 0b       	sbc	r25, r19
    6560:	86 17       	cp	r24, r22
    6562:	97 07       	cpc	r25, r23
    6564:	80 f0       	brcs	.+32     	; 0x6586 <malloc+0x148>
    6566:	ab 01       	movw	r20, r22
    6568:	4e 5f       	subi	r20, 0xFE	; 254
    656a:	5f 4f       	sbci	r21, 0xFF	; 255
    656c:	84 17       	cp	r24, r20
    656e:	95 07       	cpc	r25, r21
    6570:	50 f0       	brcs	.+20     	; 0x6586 <malloc+0x148>
    6572:	42 0f       	add	r20, r18
    6574:	53 1f       	adc	r21, r19
    6576:	50 93 21 0c 	sts	0x0C21, r21
    657a:	40 93 20 0c 	sts	0x0C20, r20
    657e:	f9 01       	movw	r30, r18
    6580:	61 93       	st	Z+, r22
    6582:	71 93       	st	Z+, r23
    6584:	02 c0       	rjmp	.+4      	; 0x658a <malloc+0x14c>
    6586:	e0 e0       	ldi	r30, 0x00	; 0
    6588:	f0 e0       	ldi	r31, 0x00	; 0
    658a:	cf 01       	movw	r24, r30
    658c:	df 91       	pop	r29
    658e:	cf 91       	pop	r28
    6590:	08 95       	ret

00006592 <free>:
    6592:	cf 93       	push	r28
    6594:	df 93       	push	r29
    6596:	00 97       	sbiw	r24, 0x00	; 0
    6598:	09 f4       	brne	.+2      	; 0x659c <free+0xa>
    659a:	50 c0       	rjmp	.+160    	; 0x663c <free+0xaa>
    659c:	ec 01       	movw	r28, r24
    659e:	22 97       	sbiw	r28, 0x02	; 2
    65a0:	1b 82       	std	Y+3, r1	; 0x03
    65a2:	1a 82       	std	Y+2, r1	; 0x02
    65a4:	a0 91 22 0c 	lds	r26, 0x0C22
    65a8:	b0 91 23 0c 	lds	r27, 0x0C23
    65ac:	10 97       	sbiw	r26, 0x00	; 0
    65ae:	09 f1       	breq	.+66     	; 0x65f2 <free+0x60>
    65b0:	40 e0       	ldi	r20, 0x00	; 0
    65b2:	50 e0       	ldi	r21, 0x00	; 0
    65b4:	ac 17       	cp	r26, r28
    65b6:	bd 07       	cpc	r27, r29
    65b8:	08 f1       	brcs	.+66     	; 0x65fc <free+0x6a>
    65ba:	bb 83       	std	Y+3, r27	; 0x03
    65bc:	aa 83       	std	Y+2, r26	; 0x02
    65be:	fe 01       	movw	r30, r28
    65c0:	21 91       	ld	r18, Z+
    65c2:	31 91       	ld	r19, Z+
    65c4:	e2 0f       	add	r30, r18
    65c6:	f3 1f       	adc	r31, r19
    65c8:	ae 17       	cp	r26, r30
    65ca:	bf 07       	cpc	r27, r31
    65cc:	79 f4       	brne	.+30     	; 0x65ec <free+0x5a>
    65ce:	8d 91       	ld	r24, X+
    65d0:	9c 91       	ld	r25, X
    65d2:	11 97       	sbiw	r26, 0x01	; 1
    65d4:	28 0f       	add	r18, r24
    65d6:	39 1f       	adc	r19, r25
    65d8:	2e 5f       	subi	r18, 0xFE	; 254
    65da:	3f 4f       	sbci	r19, 0xFF	; 255
    65dc:	39 83       	std	Y+1, r19	; 0x01
    65de:	28 83       	st	Y, r18
    65e0:	12 96       	adiw	r26, 0x02	; 2
    65e2:	8d 91       	ld	r24, X+
    65e4:	9c 91       	ld	r25, X
    65e6:	13 97       	sbiw	r26, 0x03	; 3
    65e8:	9b 83       	std	Y+3, r25	; 0x03
    65ea:	8a 83       	std	Y+2, r24	; 0x02
    65ec:	41 15       	cp	r20, r1
    65ee:	51 05       	cpc	r21, r1
    65f0:	71 f4       	brne	.+28     	; 0x660e <free+0x7c>
    65f2:	d0 93 23 0c 	sts	0x0C23, r29
    65f6:	c0 93 22 0c 	sts	0x0C22, r28
    65fa:	20 c0       	rjmp	.+64     	; 0x663c <free+0xaa>
    65fc:	12 96       	adiw	r26, 0x02	; 2
    65fe:	8d 91       	ld	r24, X+
    6600:	9c 91       	ld	r25, X
    6602:	13 97       	sbiw	r26, 0x03	; 3
    6604:	ad 01       	movw	r20, r26
    6606:	00 97       	sbiw	r24, 0x00	; 0
    6608:	11 f0       	breq	.+4      	; 0x660e <free+0x7c>
    660a:	dc 01       	movw	r26, r24
    660c:	d3 cf       	rjmp	.-90     	; 0x65b4 <free+0x22>
    660e:	fa 01       	movw	r30, r20
    6610:	d3 83       	std	Z+3, r29	; 0x03
    6612:	c2 83       	std	Z+2, r28	; 0x02
    6614:	21 91       	ld	r18, Z+
    6616:	31 91       	ld	r19, Z+
    6618:	e2 0f       	add	r30, r18
    661a:	f3 1f       	adc	r31, r19
    661c:	ce 17       	cp	r28, r30
    661e:	df 07       	cpc	r29, r31
    6620:	69 f4       	brne	.+26     	; 0x663c <free+0xaa>
    6622:	88 81       	ld	r24, Y
    6624:	99 81       	ldd	r25, Y+1	; 0x01
    6626:	28 0f       	add	r18, r24
    6628:	39 1f       	adc	r19, r25
    662a:	2e 5f       	subi	r18, 0xFE	; 254
    662c:	3f 4f       	sbci	r19, 0xFF	; 255
    662e:	fa 01       	movw	r30, r20
    6630:	31 83       	std	Z+1, r19	; 0x01
    6632:	20 83       	st	Z, r18
    6634:	8a 81       	ldd	r24, Y+2	; 0x02
    6636:	9b 81       	ldd	r25, Y+3	; 0x03
    6638:	93 83       	std	Z+3, r25	; 0x03
    663a:	82 83       	std	Z+2, r24	; 0x02
    663c:	df 91       	pop	r29
    663e:	cf 91       	pop	r28
    6640:	08 95       	ret

00006642 <abort>:
    6642:	81 e0       	ldi	r24, 0x01	; 1
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	f8 94       	cli
    6648:	0c 94 37 38 	jmp	0x706e	; 0x706e <_exit>

0000664c <exit>:
    664c:	f8 94       	cli
    664e:	0c 94 37 38 	jmp	0x706e	; 0x706e <_exit>

00006652 <__subsf3>:
    6652:	50 58       	subi	r21, 0x80	; 128

00006654 <__addsf3>:
    6654:	bb 27       	eor	r27, r27
    6656:	aa 27       	eor	r26, r26
    6658:	0e d0       	rcall	.+28     	; 0x6676 <__addsf3x>
    665a:	30 c2       	rjmp	.+1120   	; 0x6abc <__fp_round>
    665c:	f0 d1       	rcall	.+992    	; 0x6a3e <__fp_pscA>
    665e:	30 f0       	brcs	.+12     	; 0x666c <__addsf3+0x18>
    6660:	f5 d1       	rcall	.+1002   	; 0x6a4c <__fp_pscB>
    6662:	20 f0       	brcs	.+8      	; 0x666c <__addsf3+0x18>
    6664:	31 f4       	brne	.+12     	; 0x6672 <__addsf3+0x1e>
    6666:	9f 3f       	cpi	r25, 0xFF	; 255
    6668:	11 f4       	brne	.+4      	; 0x666e <__addsf3+0x1a>
    666a:	1e f4       	brtc	.+6      	; 0x6672 <__addsf3+0x1e>
    666c:	c0 c1       	rjmp	.+896    	; 0x69ee <__fp_nan>
    666e:	0e f4       	brtc	.+2      	; 0x6672 <__addsf3+0x1e>
    6670:	e0 95       	com	r30
    6672:	e7 fb       	bst	r30, 7
    6674:	b6 c1       	rjmp	.+876    	; 0x69e2 <__fp_inf>

00006676 <__addsf3x>:
    6676:	e9 2f       	mov	r30, r25
    6678:	43 d2       	rcall	.+1158   	; 0x6b00 <__fp_split3>
    667a:	80 f3       	brcs	.-32     	; 0x665c <__addsf3+0x8>
    667c:	ba 17       	cp	r27, r26
    667e:	62 07       	cpc	r22, r18
    6680:	73 07       	cpc	r23, r19
    6682:	84 07       	cpc	r24, r20
    6684:	95 07       	cpc	r25, r21
    6686:	18 f0       	brcs	.+6      	; 0x668e <__addsf3x+0x18>
    6688:	71 f4       	brne	.+28     	; 0x66a6 <__addsf3x+0x30>
    668a:	9e f5       	brtc	.+102    	; 0x66f2 <__addsf3x+0x7c>
    668c:	5b c2       	rjmp	.+1206   	; 0x6b44 <__fp_zero>
    668e:	0e f4       	brtc	.+2      	; 0x6692 <__addsf3x+0x1c>
    6690:	e0 95       	com	r30
    6692:	0b 2e       	mov	r0, r27
    6694:	ba 2f       	mov	r27, r26
    6696:	a0 2d       	mov	r26, r0
    6698:	0b 01       	movw	r0, r22
    669a:	b9 01       	movw	r22, r18
    669c:	90 01       	movw	r18, r0
    669e:	0c 01       	movw	r0, r24
    66a0:	ca 01       	movw	r24, r20
    66a2:	a0 01       	movw	r20, r0
    66a4:	11 24       	eor	r1, r1
    66a6:	ff 27       	eor	r31, r31
    66a8:	59 1b       	sub	r21, r25
    66aa:	99 f0       	breq	.+38     	; 0x66d2 <__addsf3x+0x5c>
    66ac:	59 3f       	cpi	r21, 0xF9	; 249
    66ae:	50 f4       	brcc	.+20     	; 0x66c4 <__addsf3x+0x4e>
    66b0:	50 3e       	cpi	r21, 0xE0	; 224
    66b2:	68 f1       	brcs	.+90     	; 0x670e <__addsf3x+0x98>
    66b4:	1a 16       	cp	r1, r26
    66b6:	f0 40       	sbci	r31, 0x00	; 0
    66b8:	a2 2f       	mov	r26, r18
    66ba:	23 2f       	mov	r18, r19
    66bc:	34 2f       	mov	r19, r20
    66be:	44 27       	eor	r20, r20
    66c0:	58 5f       	subi	r21, 0xF8	; 248
    66c2:	f3 cf       	rjmp	.-26     	; 0x66aa <__addsf3x+0x34>
    66c4:	46 95       	lsr	r20
    66c6:	37 95       	ror	r19
    66c8:	27 95       	ror	r18
    66ca:	a7 95       	ror	r26
    66cc:	f0 40       	sbci	r31, 0x00	; 0
    66ce:	53 95       	inc	r21
    66d0:	c9 f7       	brne	.-14     	; 0x66c4 <__addsf3x+0x4e>
    66d2:	7e f4       	brtc	.+30     	; 0x66f2 <__addsf3x+0x7c>
    66d4:	1f 16       	cp	r1, r31
    66d6:	ba 0b       	sbc	r27, r26
    66d8:	62 0b       	sbc	r22, r18
    66da:	73 0b       	sbc	r23, r19
    66dc:	84 0b       	sbc	r24, r20
    66de:	ba f0       	brmi	.+46     	; 0x670e <__addsf3x+0x98>
    66e0:	91 50       	subi	r25, 0x01	; 1
    66e2:	a1 f0       	breq	.+40     	; 0x670c <__addsf3x+0x96>
    66e4:	ff 0f       	add	r31, r31
    66e6:	bb 1f       	adc	r27, r27
    66e8:	66 1f       	adc	r22, r22
    66ea:	77 1f       	adc	r23, r23
    66ec:	88 1f       	adc	r24, r24
    66ee:	c2 f7       	brpl	.-16     	; 0x66e0 <__addsf3x+0x6a>
    66f0:	0e c0       	rjmp	.+28     	; 0x670e <__addsf3x+0x98>
    66f2:	ba 0f       	add	r27, r26
    66f4:	62 1f       	adc	r22, r18
    66f6:	73 1f       	adc	r23, r19
    66f8:	84 1f       	adc	r24, r20
    66fa:	48 f4       	brcc	.+18     	; 0x670e <__addsf3x+0x98>
    66fc:	87 95       	ror	r24
    66fe:	77 95       	ror	r23
    6700:	67 95       	ror	r22
    6702:	b7 95       	ror	r27
    6704:	f7 95       	ror	r31
    6706:	9e 3f       	cpi	r25, 0xFE	; 254
    6708:	08 f0       	brcs	.+2      	; 0x670c <__addsf3x+0x96>
    670a:	b3 cf       	rjmp	.-154    	; 0x6672 <__addsf3+0x1e>
    670c:	93 95       	inc	r25
    670e:	88 0f       	add	r24, r24
    6710:	08 f0       	brcs	.+2      	; 0x6714 <__addsf3x+0x9e>
    6712:	99 27       	eor	r25, r25
    6714:	ee 0f       	add	r30, r30
    6716:	97 95       	ror	r25
    6718:	87 95       	ror	r24
    671a:	08 95       	ret
    671c:	90 d1       	rcall	.+800    	; 0x6a3e <__fp_pscA>
    671e:	58 f0       	brcs	.+22     	; 0x6736 <__addsf3x+0xc0>
    6720:	80 e8       	ldi	r24, 0x80	; 128
    6722:	91 e0       	ldi	r25, 0x01	; 1
    6724:	09 f4       	brne	.+2      	; 0x6728 <__addsf3x+0xb2>
    6726:	9e ef       	ldi	r25, 0xFE	; 254
    6728:	91 d1       	rcall	.+802    	; 0x6a4c <__fp_pscB>
    672a:	28 f0       	brcs	.+10     	; 0x6736 <__addsf3x+0xc0>
    672c:	40 e8       	ldi	r20, 0x80	; 128
    672e:	51 e0       	ldi	r21, 0x01	; 1
    6730:	59 f4       	brne	.+22     	; 0x6748 <atan2+0xe>
    6732:	5e ef       	ldi	r21, 0xFE	; 254
    6734:	09 c0       	rjmp	.+18     	; 0x6748 <atan2+0xe>
    6736:	5b c1       	rjmp	.+694    	; 0x69ee <__fp_nan>
    6738:	05 c2       	rjmp	.+1034   	; 0x6b44 <__fp_zero>

0000673a <atan2>:
    673a:	e9 2f       	mov	r30, r25
    673c:	e0 78       	andi	r30, 0x80	; 128
    673e:	e0 d1       	rcall	.+960    	; 0x6b00 <__fp_split3>
    6740:	68 f3       	brcs	.-38     	; 0x671c <__addsf3x+0xa6>
    6742:	09 2e       	mov	r0, r25
    6744:	05 2a       	or	r0, r21
    6746:	c1 f3       	breq	.-16     	; 0x6738 <__addsf3x+0xc2>
    6748:	26 17       	cp	r18, r22
    674a:	37 07       	cpc	r19, r23
    674c:	48 07       	cpc	r20, r24
    674e:	59 07       	cpc	r21, r25
    6750:	38 f0       	brcs	.+14     	; 0x6760 <atan2+0x26>
    6752:	0e 2e       	mov	r0, r30
    6754:	07 f8       	bld	r0, 7
    6756:	e0 25       	eor	r30, r0
    6758:	69 f0       	breq	.+26     	; 0x6774 <atan2+0x3a>
    675a:	e0 25       	eor	r30, r0
    675c:	e0 64       	ori	r30, 0x40	; 64
    675e:	0a c0       	rjmp	.+20     	; 0x6774 <atan2+0x3a>
    6760:	ef 63       	ori	r30, 0x3F	; 63
    6762:	07 f8       	bld	r0, 7
    6764:	00 94       	com	r0
    6766:	07 fa       	bst	r0, 7
    6768:	db 01       	movw	r26, r22
    676a:	b9 01       	movw	r22, r18
    676c:	9d 01       	movw	r18, r26
    676e:	dc 01       	movw	r26, r24
    6770:	ca 01       	movw	r24, r20
    6772:	ad 01       	movw	r20, r26
    6774:	ef 93       	push	r30
    6776:	4a d0       	rcall	.+148    	; 0x680c <__divsf3_pse>
    6778:	a1 d1       	rcall	.+834    	; 0x6abc <__fp_round>
    677a:	0a d0       	rcall	.+20     	; 0x6790 <atan>
    677c:	5f 91       	pop	r21
    677e:	55 23       	and	r21, r21
    6780:	31 f0       	breq	.+12     	; 0x678e <atan2+0x54>
    6782:	2b ed       	ldi	r18, 0xDB	; 219
    6784:	3f e0       	ldi	r19, 0x0F	; 15
    6786:	49 e4       	ldi	r20, 0x49	; 73
    6788:	50 fd       	sbrc	r21, 0
    678a:	49 ec       	ldi	r20, 0xC9	; 201
    678c:	63 cf       	rjmp	.-314    	; 0x6654 <__addsf3>
    678e:	08 95       	ret

00006790 <atan>:
    6790:	df 93       	push	r29
    6792:	dd 27       	eor	r29, r29
    6794:	b9 2f       	mov	r27, r25
    6796:	bf 77       	andi	r27, 0x7F	; 127
    6798:	40 e8       	ldi	r20, 0x80	; 128
    679a:	5f e3       	ldi	r21, 0x3F	; 63
    679c:	16 16       	cp	r1, r22
    679e:	17 06       	cpc	r1, r23
    67a0:	48 07       	cpc	r20, r24
    67a2:	5b 07       	cpc	r21, r27
    67a4:	10 f4       	brcc	.+4      	; 0x67aa <atan+0x1a>
    67a6:	d9 2f       	mov	r29, r25
    67a8:	d8 d1       	rcall	.+944    	; 0x6b5a <inverse>
    67aa:	9f 93       	push	r25
    67ac:	8f 93       	push	r24
    67ae:	7f 93       	push	r23
    67b0:	6f 93       	push	r22
    67b2:	dd d2       	rcall	.+1466   	; 0x6d6e <square>
    67b4:	e4 ee       	ldi	r30, 0xE4	; 228
    67b6:	f0 e0       	ldi	r31, 0x00	; 0
    67b8:	1d d1       	rcall	.+570    	; 0x69f4 <__fp_powser>
    67ba:	80 d1       	rcall	.+768    	; 0x6abc <__fp_round>
    67bc:	2f 91       	pop	r18
    67be:	3f 91       	pop	r19
    67c0:	4f 91       	pop	r20
    67c2:	5f 91       	pop	r21
    67c4:	dd d1       	rcall	.+954    	; 0x6b80 <__mulsf3x>
    67c6:	dd 23       	and	r29, r29
    67c8:	49 f0       	breq	.+18     	; 0x67dc <atan+0x4c>
    67ca:	90 58       	subi	r25, 0x80	; 128
    67cc:	a2 ea       	ldi	r26, 0xA2	; 162
    67ce:	2a ed       	ldi	r18, 0xDA	; 218
    67d0:	3f e0       	ldi	r19, 0x0F	; 15
    67d2:	49 ec       	ldi	r20, 0xC9	; 201
    67d4:	5f e3       	ldi	r21, 0x3F	; 63
    67d6:	d0 78       	andi	r29, 0x80	; 128
    67d8:	5d 27       	eor	r21, r29
    67da:	4d df       	rcall	.-358    	; 0x6676 <__addsf3x>
    67dc:	df 91       	pop	r29
    67de:	6e c1       	rjmp	.+732    	; 0x6abc <__fp_round>

000067e0 <__cmpsf2>:
    67e0:	dc d0       	rcall	.+440    	; 0x699a <__fp_cmp>
    67e2:	08 f4       	brcc	.+2      	; 0x67e6 <__cmpsf2+0x6>
    67e4:	81 e0       	ldi	r24, 0x01	; 1
    67e6:	08 95       	ret

000067e8 <cos>:
    67e8:	39 d1       	rcall	.+626    	; 0x6a5c <__fp_rempio2>
    67ea:	e3 95       	inc	r30
    67ec:	78 c1       	rjmp	.+752    	; 0x6ade <__fp_sinus>

000067ee <__divsf3>:
    67ee:	0c d0       	rcall	.+24     	; 0x6808 <__divsf3x>
    67f0:	65 c1       	rjmp	.+714    	; 0x6abc <__fp_round>
    67f2:	2c d1       	rcall	.+600    	; 0x6a4c <__fp_pscB>
    67f4:	40 f0       	brcs	.+16     	; 0x6806 <__divsf3+0x18>
    67f6:	23 d1       	rcall	.+582    	; 0x6a3e <__fp_pscA>
    67f8:	30 f0       	brcs	.+12     	; 0x6806 <__divsf3+0x18>
    67fa:	21 f4       	brne	.+8      	; 0x6804 <__divsf3+0x16>
    67fc:	5f 3f       	cpi	r21, 0xFF	; 255
    67fe:	19 f0       	breq	.+6      	; 0x6806 <__divsf3+0x18>
    6800:	f0 c0       	rjmp	.+480    	; 0x69e2 <__fp_inf>
    6802:	51 11       	cpse	r21, r1
    6804:	a0 c1       	rjmp	.+832    	; 0x6b46 <__fp_szero>
    6806:	f3 c0       	rjmp	.+486    	; 0x69ee <__fp_nan>

00006808 <__divsf3x>:
    6808:	7b d1       	rcall	.+758    	; 0x6b00 <__fp_split3>
    680a:	98 f3       	brcs	.-26     	; 0x67f2 <__divsf3+0x4>

0000680c <__divsf3_pse>:
    680c:	99 23       	and	r25, r25
    680e:	c9 f3       	breq	.-14     	; 0x6802 <__divsf3+0x14>
    6810:	55 23       	and	r21, r21
    6812:	b1 f3       	breq	.-20     	; 0x6800 <__divsf3+0x12>
    6814:	95 1b       	sub	r25, r21
    6816:	55 0b       	sbc	r21, r21
    6818:	bb 27       	eor	r27, r27
    681a:	aa 27       	eor	r26, r26
    681c:	62 17       	cp	r22, r18
    681e:	73 07       	cpc	r23, r19
    6820:	84 07       	cpc	r24, r20
    6822:	38 f0       	brcs	.+14     	; 0x6832 <__divsf3_pse+0x26>
    6824:	9f 5f       	subi	r25, 0xFF	; 255
    6826:	5f 4f       	sbci	r21, 0xFF	; 255
    6828:	22 0f       	add	r18, r18
    682a:	33 1f       	adc	r19, r19
    682c:	44 1f       	adc	r20, r20
    682e:	aa 1f       	adc	r26, r26
    6830:	a9 f3       	breq	.-22     	; 0x681c <__divsf3_pse+0x10>
    6832:	33 d0       	rcall	.+102    	; 0x689a <__divsf3_pse+0x8e>
    6834:	0e 2e       	mov	r0, r30
    6836:	3a f0       	brmi	.+14     	; 0x6846 <__divsf3_pse+0x3a>
    6838:	e0 e8       	ldi	r30, 0x80	; 128
    683a:	30 d0       	rcall	.+96     	; 0x689c <__divsf3_pse+0x90>
    683c:	91 50       	subi	r25, 0x01	; 1
    683e:	50 40       	sbci	r21, 0x00	; 0
    6840:	e6 95       	lsr	r30
    6842:	00 1c       	adc	r0, r0
    6844:	ca f7       	brpl	.-14     	; 0x6838 <__divsf3_pse+0x2c>
    6846:	29 d0       	rcall	.+82     	; 0x689a <__divsf3_pse+0x8e>
    6848:	fe 2f       	mov	r31, r30
    684a:	27 d0       	rcall	.+78     	; 0x689a <__divsf3_pse+0x8e>
    684c:	66 0f       	add	r22, r22
    684e:	77 1f       	adc	r23, r23
    6850:	88 1f       	adc	r24, r24
    6852:	bb 1f       	adc	r27, r27
    6854:	26 17       	cp	r18, r22
    6856:	37 07       	cpc	r19, r23
    6858:	48 07       	cpc	r20, r24
    685a:	ab 07       	cpc	r26, r27
    685c:	b0 e8       	ldi	r27, 0x80	; 128
    685e:	09 f0       	breq	.+2      	; 0x6862 <__divsf3_pse+0x56>
    6860:	bb 0b       	sbc	r27, r27
    6862:	80 2d       	mov	r24, r0
    6864:	bf 01       	movw	r22, r30
    6866:	ff 27       	eor	r31, r31
    6868:	93 58       	subi	r25, 0x83	; 131
    686a:	5f 4f       	sbci	r21, 0xFF	; 255
    686c:	2a f0       	brmi	.+10     	; 0x6878 <__divsf3_pse+0x6c>
    686e:	9e 3f       	cpi	r25, 0xFE	; 254
    6870:	51 05       	cpc	r21, r1
    6872:	68 f0       	brcs	.+26     	; 0x688e <__divsf3_pse+0x82>
    6874:	b6 c0       	rjmp	.+364    	; 0x69e2 <__fp_inf>
    6876:	67 c1       	rjmp	.+718    	; 0x6b46 <__fp_szero>
    6878:	5f 3f       	cpi	r21, 0xFF	; 255
    687a:	ec f3       	brlt	.-6      	; 0x6876 <__divsf3_pse+0x6a>
    687c:	98 3e       	cpi	r25, 0xE8	; 232
    687e:	dc f3       	brlt	.-10     	; 0x6876 <__divsf3_pse+0x6a>
    6880:	86 95       	lsr	r24
    6882:	77 95       	ror	r23
    6884:	67 95       	ror	r22
    6886:	b7 95       	ror	r27
    6888:	f7 95       	ror	r31
    688a:	9f 5f       	subi	r25, 0xFF	; 255
    688c:	c9 f7       	brne	.-14     	; 0x6880 <__divsf3_pse+0x74>
    688e:	88 0f       	add	r24, r24
    6890:	91 1d       	adc	r25, r1
    6892:	96 95       	lsr	r25
    6894:	87 95       	ror	r24
    6896:	97 f9       	bld	r25, 7
    6898:	08 95       	ret
    689a:	e1 e0       	ldi	r30, 0x01	; 1
    689c:	66 0f       	add	r22, r22
    689e:	77 1f       	adc	r23, r23
    68a0:	88 1f       	adc	r24, r24
    68a2:	bb 1f       	adc	r27, r27
    68a4:	62 17       	cp	r22, r18
    68a6:	73 07       	cpc	r23, r19
    68a8:	84 07       	cpc	r24, r20
    68aa:	ba 07       	cpc	r27, r26
    68ac:	20 f0       	brcs	.+8      	; 0x68b6 <__divsf3_pse+0xaa>
    68ae:	62 1b       	sub	r22, r18
    68b0:	73 0b       	sbc	r23, r19
    68b2:	84 0b       	sbc	r24, r20
    68b4:	ba 0b       	sbc	r27, r26
    68b6:	ee 1f       	adc	r30, r30
    68b8:	88 f7       	brcc	.-30     	; 0x689c <__divsf3_pse+0x90>
    68ba:	e0 95       	com	r30
    68bc:	08 95       	ret

000068be <__fixsfsi>:
    68be:	04 d0       	rcall	.+8      	; 0x68c8 <__fixunssfsi>
    68c0:	68 94       	set
    68c2:	b1 11       	cpse	r27, r1
    68c4:	40 c1       	rjmp	.+640    	; 0x6b46 <__fp_szero>
    68c6:	08 95       	ret

000068c8 <__fixunssfsi>:
    68c8:	23 d1       	rcall	.+582    	; 0x6b10 <__fp_splitA>
    68ca:	88 f0       	brcs	.+34     	; 0x68ee <__fixunssfsi+0x26>
    68cc:	9f 57       	subi	r25, 0x7F	; 127
    68ce:	90 f0       	brcs	.+36     	; 0x68f4 <__fixunssfsi+0x2c>
    68d0:	b9 2f       	mov	r27, r25
    68d2:	99 27       	eor	r25, r25
    68d4:	b7 51       	subi	r27, 0x17	; 23
    68d6:	a0 f0       	brcs	.+40     	; 0x6900 <__fixunssfsi+0x38>
    68d8:	d1 f0       	breq	.+52     	; 0x690e <__fixunssfsi+0x46>
    68da:	66 0f       	add	r22, r22
    68dc:	77 1f       	adc	r23, r23
    68de:	88 1f       	adc	r24, r24
    68e0:	99 1f       	adc	r25, r25
    68e2:	1a f0       	brmi	.+6      	; 0x68ea <__fixunssfsi+0x22>
    68e4:	ba 95       	dec	r27
    68e6:	c9 f7       	brne	.-14     	; 0x68da <__fixunssfsi+0x12>
    68e8:	12 c0       	rjmp	.+36     	; 0x690e <__fixunssfsi+0x46>
    68ea:	b1 30       	cpi	r27, 0x01	; 1
    68ec:	81 f0       	breq	.+32     	; 0x690e <__fixunssfsi+0x46>
    68ee:	2a d1       	rcall	.+596    	; 0x6b44 <__fp_zero>
    68f0:	b1 e0       	ldi	r27, 0x01	; 1
    68f2:	08 95       	ret
    68f4:	27 c1       	rjmp	.+590    	; 0x6b44 <__fp_zero>
    68f6:	67 2f       	mov	r22, r23
    68f8:	78 2f       	mov	r23, r24
    68fa:	88 27       	eor	r24, r24
    68fc:	b8 5f       	subi	r27, 0xF8	; 248
    68fe:	39 f0       	breq	.+14     	; 0x690e <__fixunssfsi+0x46>
    6900:	b9 3f       	cpi	r27, 0xF9	; 249
    6902:	cc f3       	brlt	.-14     	; 0x68f6 <__fixunssfsi+0x2e>
    6904:	86 95       	lsr	r24
    6906:	77 95       	ror	r23
    6908:	67 95       	ror	r22
    690a:	b3 95       	inc	r27
    690c:	d9 f7       	brne	.-10     	; 0x6904 <__fixunssfsi+0x3c>
    690e:	3e f4       	brtc	.+14     	; 0x691e <__fixunssfsi+0x56>
    6910:	90 95       	com	r25
    6912:	80 95       	com	r24
    6914:	70 95       	com	r23
    6916:	61 95       	neg	r22
    6918:	7f 4f       	sbci	r23, 0xFF	; 255
    691a:	8f 4f       	sbci	r24, 0xFF	; 255
    691c:	9f 4f       	sbci	r25, 0xFF	; 255
    691e:	08 95       	ret

00006920 <__floatunsisf>:
    6920:	e8 94       	clt
    6922:	09 c0       	rjmp	.+18     	; 0x6936 <__floatsisf+0x12>

00006924 <__floatsisf>:
    6924:	97 fb       	bst	r25, 7
    6926:	3e f4       	brtc	.+14     	; 0x6936 <__floatsisf+0x12>
    6928:	90 95       	com	r25
    692a:	80 95       	com	r24
    692c:	70 95       	com	r23
    692e:	61 95       	neg	r22
    6930:	7f 4f       	sbci	r23, 0xFF	; 255
    6932:	8f 4f       	sbci	r24, 0xFF	; 255
    6934:	9f 4f       	sbci	r25, 0xFF	; 255
    6936:	99 23       	and	r25, r25
    6938:	a9 f0       	breq	.+42     	; 0x6964 <__floatsisf+0x40>
    693a:	f9 2f       	mov	r31, r25
    693c:	96 e9       	ldi	r25, 0x96	; 150
    693e:	bb 27       	eor	r27, r27
    6940:	93 95       	inc	r25
    6942:	f6 95       	lsr	r31
    6944:	87 95       	ror	r24
    6946:	77 95       	ror	r23
    6948:	67 95       	ror	r22
    694a:	b7 95       	ror	r27
    694c:	f1 11       	cpse	r31, r1
    694e:	f8 cf       	rjmp	.-16     	; 0x6940 <__floatsisf+0x1c>
    6950:	fa f4       	brpl	.+62     	; 0x6990 <__floatsisf+0x6c>
    6952:	bb 0f       	add	r27, r27
    6954:	11 f4       	brne	.+4      	; 0x695a <__floatsisf+0x36>
    6956:	60 ff       	sbrs	r22, 0
    6958:	1b c0       	rjmp	.+54     	; 0x6990 <__floatsisf+0x6c>
    695a:	6f 5f       	subi	r22, 0xFF	; 255
    695c:	7f 4f       	sbci	r23, 0xFF	; 255
    695e:	8f 4f       	sbci	r24, 0xFF	; 255
    6960:	9f 4f       	sbci	r25, 0xFF	; 255
    6962:	16 c0       	rjmp	.+44     	; 0x6990 <__floatsisf+0x6c>
    6964:	88 23       	and	r24, r24
    6966:	11 f0       	breq	.+4      	; 0x696c <__floatsisf+0x48>
    6968:	96 e9       	ldi	r25, 0x96	; 150
    696a:	11 c0       	rjmp	.+34     	; 0x698e <__floatsisf+0x6a>
    696c:	77 23       	and	r23, r23
    696e:	21 f0       	breq	.+8      	; 0x6978 <__floatsisf+0x54>
    6970:	9e e8       	ldi	r25, 0x8E	; 142
    6972:	87 2f       	mov	r24, r23
    6974:	76 2f       	mov	r23, r22
    6976:	05 c0       	rjmp	.+10     	; 0x6982 <__floatsisf+0x5e>
    6978:	66 23       	and	r22, r22
    697a:	71 f0       	breq	.+28     	; 0x6998 <__floatsisf+0x74>
    697c:	96 e8       	ldi	r25, 0x86	; 134
    697e:	86 2f       	mov	r24, r22
    6980:	70 e0       	ldi	r23, 0x00	; 0
    6982:	60 e0       	ldi	r22, 0x00	; 0
    6984:	2a f0       	brmi	.+10     	; 0x6990 <__floatsisf+0x6c>
    6986:	9a 95       	dec	r25
    6988:	66 0f       	add	r22, r22
    698a:	77 1f       	adc	r23, r23
    698c:	88 1f       	adc	r24, r24
    698e:	da f7       	brpl	.-10     	; 0x6986 <__floatsisf+0x62>
    6990:	88 0f       	add	r24, r24
    6992:	96 95       	lsr	r25
    6994:	87 95       	ror	r24
    6996:	97 f9       	bld	r25, 7
    6998:	08 95       	ret

0000699a <__fp_cmp>:
    699a:	99 0f       	add	r25, r25
    699c:	00 08       	sbc	r0, r0
    699e:	55 0f       	add	r21, r21
    69a0:	aa 0b       	sbc	r26, r26
    69a2:	e0 e8       	ldi	r30, 0x80	; 128
    69a4:	fe ef       	ldi	r31, 0xFE	; 254
    69a6:	16 16       	cp	r1, r22
    69a8:	17 06       	cpc	r1, r23
    69aa:	e8 07       	cpc	r30, r24
    69ac:	f9 07       	cpc	r31, r25
    69ae:	c0 f0       	brcs	.+48     	; 0x69e0 <__fp_cmp+0x46>
    69b0:	12 16       	cp	r1, r18
    69b2:	13 06       	cpc	r1, r19
    69b4:	e4 07       	cpc	r30, r20
    69b6:	f5 07       	cpc	r31, r21
    69b8:	98 f0       	brcs	.+38     	; 0x69e0 <__fp_cmp+0x46>
    69ba:	62 1b       	sub	r22, r18
    69bc:	73 0b       	sbc	r23, r19
    69be:	84 0b       	sbc	r24, r20
    69c0:	95 0b       	sbc	r25, r21
    69c2:	39 f4       	brne	.+14     	; 0x69d2 <__fp_cmp+0x38>
    69c4:	0a 26       	eor	r0, r26
    69c6:	61 f0       	breq	.+24     	; 0x69e0 <__fp_cmp+0x46>
    69c8:	23 2b       	or	r18, r19
    69ca:	24 2b       	or	r18, r20
    69cc:	25 2b       	or	r18, r21
    69ce:	21 f4       	brne	.+8      	; 0x69d8 <__fp_cmp+0x3e>
    69d0:	08 95       	ret
    69d2:	0a 26       	eor	r0, r26
    69d4:	09 f4       	brne	.+2      	; 0x69d8 <__fp_cmp+0x3e>
    69d6:	a1 40       	sbci	r26, 0x01	; 1
    69d8:	a6 95       	lsr	r26
    69da:	8f ef       	ldi	r24, 0xFF	; 255
    69dc:	81 1d       	adc	r24, r1
    69de:	81 1d       	adc	r24, r1
    69e0:	08 95       	ret

000069e2 <__fp_inf>:
    69e2:	97 f9       	bld	r25, 7
    69e4:	9f 67       	ori	r25, 0x7F	; 127
    69e6:	80 e8       	ldi	r24, 0x80	; 128
    69e8:	70 e0       	ldi	r23, 0x00	; 0
    69ea:	60 e0       	ldi	r22, 0x00	; 0
    69ec:	08 95       	ret

000069ee <__fp_nan>:
    69ee:	9f ef       	ldi	r25, 0xFF	; 255
    69f0:	80 ec       	ldi	r24, 0xC0	; 192
    69f2:	08 95       	ret

000069f4 <__fp_powser>:
    69f4:	df 93       	push	r29
    69f6:	cf 93       	push	r28
    69f8:	1f 93       	push	r17
    69fa:	0f 93       	push	r16
    69fc:	ff 92       	push	r15
    69fe:	ef 92       	push	r14
    6a00:	df 92       	push	r13
    6a02:	7b 01       	movw	r14, r22
    6a04:	8c 01       	movw	r16, r24
    6a06:	68 94       	set
    6a08:	05 c0       	rjmp	.+10     	; 0x6a14 <__fp_powser+0x20>
    6a0a:	da 2e       	mov	r13, r26
    6a0c:	ef 01       	movw	r28, r30
    6a0e:	b8 d0       	rcall	.+368    	; 0x6b80 <__mulsf3x>
    6a10:	fe 01       	movw	r30, r28
    6a12:	e8 94       	clt
    6a14:	a5 91       	lpm	r26, Z+
    6a16:	25 91       	lpm	r18, Z+
    6a18:	35 91       	lpm	r19, Z+
    6a1a:	45 91       	lpm	r20, Z+
    6a1c:	55 91       	lpm	r21, Z+
    6a1e:	ae f3       	brts	.-22     	; 0x6a0a <__fp_powser+0x16>
    6a20:	ef 01       	movw	r28, r30
    6a22:	29 de       	rcall	.-942    	; 0x6676 <__addsf3x>
    6a24:	fe 01       	movw	r30, r28
    6a26:	97 01       	movw	r18, r14
    6a28:	a8 01       	movw	r20, r16
    6a2a:	da 94       	dec	r13
    6a2c:	79 f7       	brne	.-34     	; 0x6a0c <__fp_powser+0x18>
    6a2e:	df 90       	pop	r13
    6a30:	ef 90       	pop	r14
    6a32:	ff 90       	pop	r15
    6a34:	0f 91       	pop	r16
    6a36:	1f 91       	pop	r17
    6a38:	cf 91       	pop	r28
    6a3a:	df 91       	pop	r29
    6a3c:	08 95       	ret

00006a3e <__fp_pscA>:
    6a3e:	00 24       	eor	r0, r0
    6a40:	0a 94       	dec	r0
    6a42:	16 16       	cp	r1, r22
    6a44:	17 06       	cpc	r1, r23
    6a46:	18 06       	cpc	r1, r24
    6a48:	09 06       	cpc	r0, r25
    6a4a:	08 95       	ret

00006a4c <__fp_pscB>:
    6a4c:	00 24       	eor	r0, r0
    6a4e:	0a 94       	dec	r0
    6a50:	12 16       	cp	r1, r18
    6a52:	13 06       	cpc	r1, r19
    6a54:	14 06       	cpc	r1, r20
    6a56:	05 06       	cpc	r0, r21
    6a58:	08 95       	ret
    6a5a:	c9 cf       	rjmp	.-110    	; 0x69ee <__fp_nan>

00006a5c <__fp_rempio2>:
    6a5c:	59 d0       	rcall	.+178    	; 0x6b10 <__fp_splitA>
    6a5e:	e8 f3       	brcs	.-6      	; 0x6a5a <__fp_pscB+0xe>
    6a60:	e8 94       	clt
    6a62:	ef ef       	ldi	r30, 0xFF	; 255
    6a64:	bb 27       	eor	r27, r27
    6a66:	3f e0       	ldi	r19, 0x0F	; 15
    6a68:	48 ec       	ldi	r20, 0xC8	; 200
    6a6a:	5f e7       	ldi	r21, 0x7F	; 127
    6a6c:	6b 3d       	cpi	r22, 0xDB	; 219
    6a6e:	73 07       	cpc	r23, r19
    6a70:	84 07       	cpc	r24, r20
    6a72:	95 07       	cpc	r25, r21
    6a74:	08 f1       	brcs	.+66     	; 0x6ab8 <__fp_rempio2+0x5c>
    6a76:	ff 27       	eor	r31, r31
    6a78:	9f 57       	subi	r25, 0x7F	; 127
    6a7a:	b2 5a       	subi	r27, 0xA2	; 162
    6a7c:	6a 4d       	sbci	r22, 0xDA	; 218
    6a7e:	7f 40       	sbci	r23, 0x0F	; 15
    6a80:	89 4c       	sbci	r24, 0xC9	; 201
    6a82:	f0 40       	sbci	r31, 0x00	; 0
    6a84:	32 f4       	brpl	.+12     	; 0x6a92 <__fp_rempio2+0x36>
    6a86:	be 55       	subi	r27, 0x5E	; 94
    6a88:	65 42       	sbci	r22, 0x25	; 37
    6a8a:	70 4f       	sbci	r23, 0xF0	; 240
    6a8c:	86 43       	sbci	r24, 0x36	; 54
    6a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    6a90:	08 94       	sec
    6a92:	ee 1f       	adc	r30, r30
    6a94:	91 50       	subi	r25, 0x01	; 1
    6a96:	30 f0       	brcs	.+12     	; 0x6aa4 <__fp_rempio2+0x48>
    6a98:	bb 0f       	add	r27, r27
    6a9a:	66 1f       	adc	r22, r22
    6a9c:	77 1f       	adc	r23, r23
    6a9e:	88 1f       	adc	r24, r24
    6aa0:	ff 1f       	adc	r31, r31
    6aa2:	eb cf       	rjmp	.-42     	; 0x6a7a <__fp_rempio2+0x1e>
    6aa4:	9e e7       	ldi	r25, 0x7E	; 126
    6aa6:	88 23       	and	r24, r24
    6aa8:	32 f0       	brmi	.+12     	; 0x6ab6 <__fp_rempio2+0x5a>
    6aaa:	bb 0f       	add	r27, r27
    6aac:	66 1f       	adc	r22, r22
    6aae:	77 1f       	adc	r23, r23
    6ab0:	88 1f       	adc	r24, r24
    6ab2:	9a 95       	dec	r25
    6ab4:	c1 f7       	brne	.-16     	; 0x6aa6 <__fp_rempio2+0x4a>
    6ab6:	93 95       	inc	r25
    6ab8:	e0 95       	com	r30
    6aba:	8d c1       	rjmp	.+794    	; 0x6dd6 <__fp_mpack>

00006abc <__fp_round>:
    6abc:	09 2e       	mov	r0, r25
    6abe:	03 94       	inc	r0
    6ac0:	00 0c       	add	r0, r0
    6ac2:	11 f4       	brne	.+4      	; 0x6ac8 <__fp_round+0xc>
    6ac4:	88 23       	and	r24, r24
    6ac6:	52 f0       	brmi	.+20     	; 0x6adc <__fp_round+0x20>
    6ac8:	bb 0f       	add	r27, r27
    6aca:	40 f4       	brcc	.+16     	; 0x6adc <__fp_round+0x20>
    6acc:	bf 2b       	or	r27, r31
    6ace:	11 f4       	brne	.+4      	; 0x6ad4 <__fp_round+0x18>
    6ad0:	60 ff       	sbrs	r22, 0
    6ad2:	04 c0       	rjmp	.+8      	; 0x6adc <__fp_round+0x20>
    6ad4:	6f 5f       	subi	r22, 0xFF	; 255
    6ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    6ada:	9f 4f       	sbci	r25, 0xFF	; 255
    6adc:	08 95       	ret

00006ade <__fp_sinus>:
    6ade:	ef 93       	push	r30
    6ae0:	e0 ff       	sbrs	r30, 0
    6ae2:	06 c0       	rjmp	.+12     	; 0x6af0 <__fp_sinus+0x12>
    6ae4:	a2 ea       	ldi	r26, 0xA2	; 162
    6ae6:	2a ed       	ldi	r18, 0xDA	; 218
    6ae8:	3f e0       	ldi	r19, 0x0F	; 15
    6aea:	49 ec       	ldi	r20, 0xC9	; 201
    6aec:	5f eb       	ldi	r21, 0xBF	; 191
    6aee:	c3 dd       	rcall	.-1146   	; 0x6676 <__addsf3x>
    6af0:	e5 df       	rcall	.-54     	; 0x6abc <__fp_round>
    6af2:	0f 90       	pop	r0
    6af4:	03 94       	inc	r0
    6af6:	01 fc       	sbrc	r0, 1
    6af8:	90 58       	subi	r25, 0x80	; 128
    6afa:	e1 e1       	ldi	r30, 0x11	; 17
    6afc:	f1 e0       	ldi	r31, 0x01	; 1
    6afe:	82 c1       	rjmp	.+772    	; 0x6e04 <__fp_powsodd>

00006b00 <__fp_split3>:
    6b00:	57 fd       	sbrc	r21, 7
    6b02:	90 58       	subi	r25, 0x80	; 128
    6b04:	44 0f       	add	r20, r20
    6b06:	55 1f       	adc	r21, r21
    6b08:	59 f0       	breq	.+22     	; 0x6b20 <__fp_splitA+0x10>
    6b0a:	5f 3f       	cpi	r21, 0xFF	; 255
    6b0c:	71 f0       	breq	.+28     	; 0x6b2a <__fp_splitA+0x1a>
    6b0e:	47 95       	ror	r20

00006b10 <__fp_splitA>:
    6b10:	88 0f       	add	r24, r24
    6b12:	97 fb       	bst	r25, 7
    6b14:	99 1f       	adc	r25, r25
    6b16:	61 f0       	breq	.+24     	; 0x6b30 <__fp_splitA+0x20>
    6b18:	9f 3f       	cpi	r25, 0xFF	; 255
    6b1a:	79 f0       	breq	.+30     	; 0x6b3a <__fp_splitA+0x2a>
    6b1c:	87 95       	ror	r24
    6b1e:	08 95       	ret
    6b20:	12 16       	cp	r1, r18
    6b22:	13 06       	cpc	r1, r19
    6b24:	14 06       	cpc	r1, r20
    6b26:	55 1f       	adc	r21, r21
    6b28:	f2 cf       	rjmp	.-28     	; 0x6b0e <__fp_split3+0xe>
    6b2a:	46 95       	lsr	r20
    6b2c:	f1 df       	rcall	.-30     	; 0x6b10 <__fp_splitA>
    6b2e:	08 c0       	rjmp	.+16     	; 0x6b40 <__fp_splitA+0x30>
    6b30:	16 16       	cp	r1, r22
    6b32:	17 06       	cpc	r1, r23
    6b34:	18 06       	cpc	r1, r24
    6b36:	99 1f       	adc	r25, r25
    6b38:	f1 cf       	rjmp	.-30     	; 0x6b1c <__fp_splitA+0xc>
    6b3a:	86 95       	lsr	r24
    6b3c:	71 05       	cpc	r23, r1
    6b3e:	61 05       	cpc	r22, r1
    6b40:	08 94       	sec
    6b42:	08 95       	ret

00006b44 <__fp_zero>:
    6b44:	e8 94       	clt

00006b46 <__fp_szero>:
    6b46:	bb 27       	eor	r27, r27
    6b48:	66 27       	eor	r22, r22
    6b4a:	77 27       	eor	r23, r23
    6b4c:	cb 01       	movw	r24, r22
    6b4e:	97 f9       	bld	r25, 7
    6b50:	08 95       	ret

00006b52 <__gesf2>:
    6b52:	23 df       	rcall	.-442    	; 0x699a <__fp_cmp>
    6b54:	08 f4       	brcc	.+2      	; 0x6b58 <__gesf2+0x6>
    6b56:	8f ef       	ldi	r24, 0xFF	; 255
    6b58:	08 95       	ret

00006b5a <inverse>:
    6b5a:	9b 01       	movw	r18, r22
    6b5c:	ac 01       	movw	r20, r24
    6b5e:	60 e0       	ldi	r22, 0x00	; 0
    6b60:	70 e0       	ldi	r23, 0x00	; 0
    6b62:	80 e8       	ldi	r24, 0x80	; 128
    6b64:	9f e3       	ldi	r25, 0x3F	; 63
    6b66:	43 ce       	rjmp	.-890    	; 0x67ee <__divsf3>

00006b68 <__mulsf3>:
    6b68:	0b d0       	rcall	.+22     	; 0x6b80 <__mulsf3x>
    6b6a:	a8 cf       	rjmp	.-176    	; 0x6abc <__fp_round>
    6b6c:	68 df       	rcall	.-304    	; 0x6a3e <__fp_pscA>
    6b6e:	28 f0       	brcs	.+10     	; 0x6b7a <__mulsf3+0x12>
    6b70:	6d df       	rcall	.-294    	; 0x6a4c <__fp_pscB>
    6b72:	18 f0       	brcs	.+6      	; 0x6b7a <__mulsf3+0x12>
    6b74:	95 23       	and	r25, r21
    6b76:	09 f0       	breq	.+2      	; 0x6b7a <__mulsf3+0x12>
    6b78:	34 cf       	rjmp	.-408    	; 0x69e2 <__fp_inf>
    6b7a:	39 cf       	rjmp	.-398    	; 0x69ee <__fp_nan>
    6b7c:	11 24       	eor	r1, r1
    6b7e:	e3 cf       	rjmp	.-58     	; 0x6b46 <__fp_szero>

00006b80 <__mulsf3x>:
    6b80:	bf df       	rcall	.-130    	; 0x6b00 <__fp_split3>
    6b82:	a0 f3       	brcs	.-24     	; 0x6b6c <__mulsf3+0x4>

00006b84 <__mulsf3_pse>:
    6b84:	95 9f       	mul	r25, r21
    6b86:	d1 f3       	breq	.-12     	; 0x6b7c <__mulsf3+0x14>
    6b88:	95 0f       	add	r25, r21
    6b8a:	50 e0       	ldi	r21, 0x00	; 0
    6b8c:	55 1f       	adc	r21, r21
    6b8e:	62 9f       	mul	r22, r18
    6b90:	f0 01       	movw	r30, r0
    6b92:	72 9f       	mul	r23, r18
    6b94:	bb 27       	eor	r27, r27
    6b96:	f0 0d       	add	r31, r0
    6b98:	b1 1d       	adc	r27, r1
    6b9a:	63 9f       	mul	r22, r19
    6b9c:	aa 27       	eor	r26, r26
    6b9e:	f0 0d       	add	r31, r0
    6ba0:	b1 1d       	adc	r27, r1
    6ba2:	aa 1f       	adc	r26, r26
    6ba4:	64 9f       	mul	r22, r20
    6ba6:	66 27       	eor	r22, r22
    6ba8:	b0 0d       	add	r27, r0
    6baa:	a1 1d       	adc	r26, r1
    6bac:	66 1f       	adc	r22, r22
    6bae:	82 9f       	mul	r24, r18
    6bb0:	22 27       	eor	r18, r18
    6bb2:	b0 0d       	add	r27, r0
    6bb4:	a1 1d       	adc	r26, r1
    6bb6:	62 1f       	adc	r22, r18
    6bb8:	73 9f       	mul	r23, r19
    6bba:	b0 0d       	add	r27, r0
    6bbc:	a1 1d       	adc	r26, r1
    6bbe:	62 1f       	adc	r22, r18
    6bc0:	83 9f       	mul	r24, r19
    6bc2:	a0 0d       	add	r26, r0
    6bc4:	61 1d       	adc	r22, r1
    6bc6:	22 1f       	adc	r18, r18
    6bc8:	74 9f       	mul	r23, r20
    6bca:	33 27       	eor	r19, r19
    6bcc:	a0 0d       	add	r26, r0
    6bce:	61 1d       	adc	r22, r1
    6bd0:	23 1f       	adc	r18, r19
    6bd2:	84 9f       	mul	r24, r20
    6bd4:	60 0d       	add	r22, r0
    6bd6:	21 1d       	adc	r18, r1
    6bd8:	82 2f       	mov	r24, r18
    6bda:	76 2f       	mov	r23, r22
    6bdc:	6a 2f       	mov	r22, r26
    6bde:	11 24       	eor	r1, r1
    6be0:	9f 57       	subi	r25, 0x7F	; 127
    6be2:	50 40       	sbci	r21, 0x00	; 0
    6be4:	8a f0       	brmi	.+34     	; 0x6c08 <__mulsf3_pse+0x84>
    6be6:	e1 f0       	breq	.+56     	; 0x6c20 <__mulsf3_pse+0x9c>
    6be8:	88 23       	and	r24, r24
    6bea:	4a f0       	brmi	.+18     	; 0x6bfe <__mulsf3_pse+0x7a>
    6bec:	ee 0f       	add	r30, r30
    6bee:	ff 1f       	adc	r31, r31
    6bf0:	bb 1f       	adc	r27, r27
    6bf2:	66 1f       	adc	r22, r22
    6bf4:	77 1f       	adc	r23, r23
    6bf6:	88 1f       	adc	r24, r24
    6bf8:	91 50       	subi	r25, 0x01	; 1
    6bfa:	50 40       	sbci	r21, 0x00	; 0
    6bfc:	a9 f7       	brne	.-22     	; 0x6be8 <__mulsf3_pse+0x64>
    6bfe:	9e 3f       	cpi	r25, 0xFE	; 254
    6c00:	51 05       	cpc	r21, r1
    6c02:	70 f0       	brcs	.+28     	; 0x6c20 <__mulsf3_pse+0x9c>
    6c04:	ee ce       	rjmp	.-548    	; 0x69e2 <__fp_inf>
    6c06:	9f cf       	rjmp	.-194    	; 0x6b46 <__fp_szero>
    6c08:	5f 3f       	cpi	r21, 0xFF	; 255
    6c0a:	ec f3       	brlt	.-6      	; 0x6c06 <__mulsf3_pse+0x82>
    6c0c:	98 3e       	cpi	r25, 0xE8	; 232
    6c0e:	dc f3       	brlt	.-10     	; 0x6c06 <__mulsf3_pse+0x82>
    6c10:	86 95       	lsr	r24
    6c12:	77 95       	ror	r23
    6c14:	67 95       	ror	r22
    6c16:	b7 95       	ror	r27
    6c18:	f7 95       	ror	r31
    6c1a:	e7 95       	ror	r30
    6c1c:	9f 5f       	subi	r25, 0xFF	; 255
    6c1e:	c1 f7       	brne	.-16     	; 0x6c10 <__mulsf3_pse+0x8c>
    6c20:	fe 2b       	or	r31, r30
    6c22:	88 0f       	add	r24, r24
    6c24:	91 1d       	adc	r25, r1
    6c26:	96 95       	lsr	r25
    6c28:	87 95       	ror	r24
    6c2a:	97 f9       	bld	r25, 7
    6c2c:	08 95       	ret

00006c2e <pow>:
    6c2e:	fa 01       	movw	r30, r20
    6c30:	ee 0f       	add	r30, r30
    6c32:	ff 1f       	adc	r31, r31
    6c34:	30 96       	adiw	r30, 0x00	; 0
    6c36:	21 05       	cpc	r18, r1
    6c38:	31 05       	cpc	r19, r1
    6c3a:	99 f1       	breq	.+102    	; 0x6ca2 <pow+0x74>
    6c3c:	61 15       	cp	r22, r1
    6c3e:	71 05       	cpc	r23, r1
    6c40:	61 f4       	brne	.+24     	; 0x6c5a <pow+0x2c>
    6c42:	80 38       	cpi	r24, 0x80	; 128
    6c44:	bf e3       	ldi	r27, 0x3F	; 63
    6c46:	9b 07       	cpc	r25, r27
    6c48:	49 f1       	breq	.+82     	; 0x6c9c <pow+0x6e>
    6c4a:	68 94       	set
    6c4c:	90 38       	cpi	r25, 0x80	; 128
    6c4e:	81 05       	cpc	r24, r1
    6c50:	61 f0       	breq	.+24     	; 0x6c6a <pow+0x3c>
    6c52:	80 38       	cpi	r24, 0x80	; 128
    6c54:	bf ef       	ldi	r27, 0xFF	; 255
    6c56:	9b 07       	cpc	r25, r27
    6c58:	41 f0       	breq	.+16     	; 0x6c6a <pow+0x3c>
    6c5a:	99 23       	and	r25, r25
    6c5c:	42 f5       	brpl	.+80     	; 0x6cae <pow+0x80>
    6c5e:	ff 3f       	cpi	r31, 0xFF	; 255
    6c60:	e1 05       	cpc	r30, r1
    6c62:	31 05       	cpc	r19, r1
    6c64:	21 05       	cpc	r18, r1
    6c66:	11 f1       	breq	.+68     	; 0x6cac <pow+0x7e>
    6c68:	e8 94       	clt
    6c6a:	08 94       	sec
    6c6c:	e7 95       	ror	r30
    6c6e:	d9 01       	movw	r26, r18
    6c70:	aa 23       	and	r26, r26
    6c72:	29 f4       	brne	.+10     	; 0x6c7e <pow+0x50>
    6c74:	ab 2f       	mov	r26, r27
    6c76:	be 2f       	mov	r27, r30
    6c78:	f8 5f       	subi	r31, 0xF8	; 248
    6c7a:	d0 f3       	brcs	.-12     	; 0x6c70 <pow+0x42>
    6c7c:	10 c0       	rjmp	.+32     	; 0x6c9e <pow+0x70>
    6c7e:	ff 5f       	subi	r31, 0xFF	; 255
    6c80:	70 f4       	brcc	.+28     	; 0x6c9e <pow+0x70>
    6c82:	a6 95       	lsr	r26
    6c84:	e0 f7       	brcc	.-8      	; 0x6c7e <pow+0x50>
    6c86:	f7 39       	cpi	r31, 0x97	; 151
    6c88:	50 f0       	brcs	.+20     	; 0x6c9e <pow+0x70>
    6c8a:	19 f0       	breq	.+6      	; 0x6c92 <pow+0x64>
    6c8c:	ff 3a       	cpi	r31, 0xAF	; 175
    6c8e:	38 f4       	brcc	.+14     	; 0x6c9e <pow+0x70>
    6c90:	9f 77       	andi	r25, 0x7F	; 127
    6c92:	9f 93       	push	r25
    6c94:	0c d0       	rcall	.+24     	; 0x6cae <pow+0x80>
    6c96:	0f 90       	pop	r0
    6c98:	07 fc       	sbrc	r0, 7
    6c9a:	90 58       	subi	r25, 0x80	; 128
    6c9c:	08 95       	ret
    6c9e:	3e f0       	brts	.+14     	; 0x6cae <pow+0x80>
    6ca0:	a6 ce       	rjmp	.-692    	; 0x69ee <__fp_nan>
    6ca2:	60 e0       	ldi	r22, 0x00	; 0
    6ca4:	70 e0       	ldi	r23, 0x00	; 0
    6ca6:	80 e8       	ldi	r24, 0x80	; 128
    6ca8:	9f e3       	ldi	r25, 0x3F	; 63
    6caa:	08 95       	ret
    6cac:	4f e7       	ldi	r20, 0x7F	; 127
    6cae:	9f 77       	andi	r25, 0x7F	; 127
    6cb0:	5f 93       	push	r21
    6cb2:	4f 93       	push	r20
    6cb4:	3f 93       	push	r19
    6cb6:	2f 93       	push	r18
    6cb8:	f1 d0       	rcall	.+482    	; 0x6e9c <log>
    6cba:	2f 91       	pop	r18
    6cbc:	3f 91       	pop	r19
    6cbe:	4f 91       	pop	r20
    6cc0:	5f 91       	pop	r21
    6cc2:	52 df       	rcall	.-348    	; 0x6b68 <__mulsf3>
    6cc4:	5c c0       	rjmp	.+184    	; 0x6d7e <exp>

00006cc6 <sin>:
    6cc6:	9f 93       	push	r25
    6cc8:	c9 de       	rcall	.-622    	; 0x6a5c <__fp_rempio2>
    6cca:	0f 90       	pop	r0
    6ccc:	07 fc       	sbrc	r0, 7
    6cce:	ee 5f       	subi	r30, 0xFE	; 254
    6cd0:	06 cf       	rjmp	.-500    	; 0x6ade <__fp_sinus>
    6cd2:	11 f4       	brne	.+4      	; 0x6cd8 <sin+0x12>
    6cd4:	0e f4       	brtc	.+2      	; 0x6cd8 <sin+0x12>
    6cd6:	8b ce       	rjmp	.-746    	; 0x69ee <__fp_nan>
    6cd8:	7e c0       	rjmp	.+252    	; 0x6dd6 <__fp_mpack>

00006cda <sqrt>:
    6cda:	1a df       	rcall	.-460    	; 0x6b10 <__fp_splitA>
    6cdc:	d0 f3       	brcs	.-12     	; 0x6cd2 <sin+0xc>
    6cde:	99 23       	and	r25, r25
    6ce0:	d9 f3       	breq	.-10     	; 0x6cd8 <sin+0x12>
    6ce2:	ce f3       	brts	.-14     	; 0x6cd6 <sin+0x10>
    6ce4:	9f 57       	subi	r25, 0x7F	; 127
    6ce6:	55 0b       	sbc	r21, r21
    6ce8:	87 ff       	sbrs	r24, 7
    6cea:	85 d0       	rcall	.+266    	; 0x6df6 <__fp_norm2>
    6cec:	56 95       	lsr	r21
    6cee:	97 95       	ror	r25
    6cf0:	b0 e0       	ldi	r27, 0x00	; 0
    6cf2:	20 f4       	brcc	.+8      	; 0x6cfc <sqrt+0x22>
    6cf4:	66 0f       	add	r22, r22
    6cf6:	77 1f       	adc	r23, r23
    6cf8:	88 1f       	adc	r24, r24
    6cfa:	bb 1f       	adc	r27, r27
    6cfc:	1f 93       	push	r17
    6cfe:	0f 93       	push	r16
    6d00:	00 24       	eor	r0, r0
    6d02:	90 01       	movw	r18, r0
    6d04:	a0 01       	movw	r20, r0
    6d06:	80 01       	movw	r16, r0
    6d08:	f0 01       	movw	r30, r0
    6d0a:	a0 e8       	ldi	r26, 0x80	; 128
    6d0c:	0e 0f       	add	r16, r30
    6d0e:	1f 1f       	adc	r17, r31
    6d10:	0a 1e       	adc	r0, r26
    6d12:	51 1d       	adc	r21, r1
    6d14:	60 1b       	sub	r22, r16
    6d16:	71 0b       	sbc	r23, r17
    6d18:	80 09       	sbc	r24, r0
    6d1a:	b5 0b       	sbc	r27, r21
    6d1c:	48 f4       	brcc	.+18     	; 0x6d30 <sqrt+0x56>
    6d1e:	60 0f       	add	r22, r16
    6d20:	71 1f       	adc	r23, r17
    6d22:	80 1d       	adc	r24, r0
    6d24:	b5 1f       	adc	r27, r21
    6d26:	0e 1b       	sub	r16, r30
    6d28:	1f 0b       	sbc	r17, r31
    6d2a:	0a 0a       	sbc	r0, r26
    6d2c:	51 09       	sbc	r21, r1
    6d2e:	07 c0       	rjmp	.+14     	; 0x6d3e <sqrt+0x64>
    6d30:	2e 0f       	add	r18, r30
    6d32:	3f 1f       	adc	r19, r31
    6d34:	4a 1f       	adc	r20, r26
    6d36:	0e 0f       	add	r16, r30
    6d38:	1f 1f       	adc	r17, r31
    6d3a:	0a 1e       	adc	r0, r26
    6d3c:	51 1d       	adc	r21, r1
    6d3e:	66 0f       	add	r22, r22
    6d40:	77 1f       	adc	r23, r23
    6d42:	88 1f       	adc	r24, r24
    6d44:	bb 1f       	adc	r27, r27
    6d46:	a6 95       	lsr	r26
    6d48:	f7 95       	ror	r31
    6d4a:	e7 95       	ror	r30
    6d4c:	f8 f6       	brcc	.-66     	; 0x6d0c <sqrt+0x32>
    6d4e:	06 17       	cp	r16, r22
    6d50:	17 07       	cpc	r17, r23
    6d52:	08 06       	cpc	r0, r24
    6d54:	5b 07       	cpc	r21, r27
    6d56:	21 1d       	adc	r18, r1
    6d58:	31 1d       	adc	r19, r1
    6d5a:	41 1d       	adc	r20, r1
    6d5c:	0f 91       	pop	r16
    6d5e:	1f 91       	pop	r17
    6d60:	b9 01       	movw	r22, r18
    6d62:	84 2f       	mov	r24, r20
    6d64:	91 58       	subi	r25, 0x81	; 129
    6d66:	88 0f       	add	r24, r24
    6d68:	96 95       	lsr	r25
    6d6a:	87 95       	ror	r24
    6d6c:	08 95       	ret

00006d6e <square>:
    6d6e:	9b 01       	movw	r18, r22
    6d70:	ac 01       	movw	r20, r24
    6d72:	fa ce       	rjmp	.-524    	; 0x6b68 <__mulsf3>
    6d74:	19 f4       	brne	.+6      	; 0x6d7c <square+0xe>
    6d76:	0e f0       	brts	.+2      	; 0x6d7a <square+0xc>
    6d78:	34 ce       	rjmp	.-920    	; 0x69e2 <__fp_inf>
    6d7a:	e4 ce       	rjmp	.-568    	; 0x6b44 <__fp_zero>
    6d7c:	38 ce       	rjmp	.-912    	; 0x69ee <__fp_nan>

00006d7e <exp>:
    6d7e:	c8 de       	rcall	.-624    	; 0x6b10 <__fp_splitA>
    6d80:	c8 f3       	brcs	.-14     	; 0x6d74 <square+0x6>
    6d82:	96 38       	cpi	r25, 0x86	; 134
    6d84:	c0 f7       	brcc	.-16     	; 0x6d76 <square+0x8>
    6d86:	07 f8       	bld	r0, 7
    6d88:	0f 92       	push	r0
    6d8a:	e8 94       	clt
    6d8c:	2b e3       	ldi	r18, 0x3B	; 59
    6d8e:	3a ea       	ldi	r19, 0xAA	; 170
    6d90:	48 eb       	ldi	r20, 0xB8	; 184
    6d92:	5f e7       	ldi	r21, 0x7F	; 127
    6d94:	f7 de       	rcall	.-530    	; 0x6b84 <__mulsf3_pse>
    6d96:	0f 92       	push	r0
    6d98:	0f 92       	push	r0
    6d9a:	0f 92       	push	r0
    6d9c:	4d b7       	in	r20, 0x3d	; 61
    6d9e:	5e b7       	in	r21, 0x3e	; 62
    6da0:	0f 92       	push	r0
    6da2:	bc d0       	rcall	.+376    	; 0x6f1c <modf>
    6da4:	ef e2       	ldi	r30, 0x2F	; 47
    6da6:	f1 e0       	ldi	r31, 0x01	; 1
    6da8:	25 de       	rcall	.-950    	; 0x69f4 <__fp_powser>
    6daa:	4f 91       	pop	r20
    6dac:	5f 91       	pop	r21
    6dae:	ef 91       	pop	r30
    6db0:	ff 91       	pop	r31
    6db2:	e5 95       	asr	r30
    6db4:	ee 1f       	adc	r30, r30
    6db6:	ff 1f       	adc	r31, r31
    6db8:	49 f0       	breq	.+18     	; 0x6dcc <exp+0x4e>
    6dba:	fe 57       	subi	r31, 0x7E	; 126
    6dbc:	e0 68       	ori	r30, 0x80	; 128
    6dbe:	44 27       	eor	r20, r20
    6dc0:	ee 0f       	add	r30, r30
    6dc2:	44 1f       	adc	r20, r20
    6dc4:	fa 95       	dec	r31
    6dc6:	e1 f7       	brne	.-8      	; 0x6dc0 <exp+0x42>
    6dc8:	41 95       	neg	r20
    6dca:	55 0b       	sbc	r21, r21
    6dcc:	2e d0       	rcall	.+92     	; 0x6e2a <ldexp>
    6dce:	0f 90       	pop	r0
    6dd0:	07 fe       	sbrs	r0, 7
    6dd2:	c3 ce       	rjmp	.-634    	; 0x6b5a <inverse>
    6dd4:	08 95       	ret

00006dd6 <__fp_mpack>:
    6dd6:	9f 3f       	cpi	r25, 0xFF	; 255
    6dd8:	49 f0       	breq	.+18     	; 0x6dec <__fp_mpack+0x16>
    6dda:	91 50       	subi	r25, 0x01	; 1
    6ddc:	28 f4       	brcc	.+10     	; 0x6de8 <__fp_mpack+0x12>
    6dde:	86 95       	lsr	r24
    6de0:	77 95       	ror	r23
    6de2:	67 95       	ror	r22
    6de4:	b7 95       	ror	r27
    6de6:	9f 5f       	subi	r25, 0xFF	; 255
    6de8:	80 38       	cpi	r24, 0x80	; 128
    6dea:	9f 4f       	sbci	r25, 0xFF	; 255
    6dec:	88 0f       	add	r24, r24
    6dee:	96 95       	lsr	r25
    6df0:	87 95       	ror	r24
    6df2:	97 f9       	bld	r25, 7
    6df4:	08 95       	ret

00006df6 <__fp_norm2>:
    6df6:	91 50       	subi	r25, 0x01	; 1
    6df8:	50 40       	sbci	r21, 0x00	; 0
    6dfa:	66 0f       	add	r22, r22
    6dfc:	77 1f       	adc	r23, r23
    6dfe:	88 1f       	adc	r24, r24
    6e00:	d2 f7       	brpl	.-12     	; 0x6df6 <__fp_norm2>
    6e02:	08 95       	ret

00006e04 <__fp_powsodd>:
    6e04:	9f 93       	push	r25
    6e06:	8f 93       	push	r24
    6e08:	7f 93       	push	r23
    6e0a:	6f 93       	push	r22
    6e0c:	ff 93       	push	r31
    6e0e:	ef 93       	push	r30
    6e10:	9b 01       	movw	r18, r22
    6e12:	ac 01       	movw	r20, r24
    6e14:	a9 de       	rcall	.-686    	; 0x6b68 <__mulsf3>
    6e16:	ef 91       	pop	r30
    6e18:	ff 91       	pop	r31
    6e1a:	ec dd       	rcall	.-1064   	; 0x69f4 <__fp_powser>
    6e1c:	2f 91       	pop	r18
    6e1e:	3f 91       	pop	r19
    6e20:	4f 91       	pop	r20
    6e22:	5f 91       	pop	r21
    6e24:	a1 ce       	rjmp	.-702    	; 0x6b68 <__mulsf3>
    6e26:	dd cd       	rjmp	.-1094   	; 0x69e2 <__fp_inf>
    6e28:	d6 cf       	rjmp	.-84     	; 0x6dd6 <__fp_mpack>

00006e2a <ldexp>:
    6e2a:	72 de       	rcall	.-796    	; 0x6b10 <__fp_splitA>
    6e2c:	e8 f3       	brcs	.-6      	; 0x6e28 <__fp_powsodd+0x24>
    6e2e:	99 23       	and	r25, r25
    6e30:	d9 f3       	breq	.-10     	; 0x6e28 <__fp_powsodd+0x24>
    6e32:	94 0f       	add	r25, r20
    6e34:	51 1d       	adc	r21, r1
    6e36:	bb f3       	brvs	.-18     	; 0x6e26 <__fp_powsodd+0x22>
    6e38:	91 50       	subi	r25, 0x01	; 1
    6e3a:	50 40       	sbci	r21, 0x00	; 0
    6e3c:	94 f0       	brlt	.+36     	; 0x6e62 <ldexp+0x38>
    6e3e:	59 f0       	breq	.+22     	; 0x6e56 <ldexp+0x2c>
    6e40:	88 23       	and	r24, r24
    6e42:	32 f0       	brmi	.+12     	; 0x6e50 <ldexp+0x26>
    6e44:	66 0f       	add	r22, r22
    6e46:	77 1f       	adc	r23, r23
    6e48:	88 1f       	adc	r24, r24
    6e4a:	91 50       	subi	r25, 0x01	; 1
    6e4c:	50 40       	sbci	r21, 0x00	; 0
    6e4e:	c1 f7       	brne	.-16     	; 0x6e40 <ldexp+0x16>
    6e50:	9e 3f       	cpi	r25, 0xFE	; 254
    6e52:	51 05       	cpc	r21, r1
    6e54:	44 f7       	brge	.-48     	; 0x6e26 <__fp_powsodd+0x22>
    6e56:	88 0f       	add	r24, r24
    6e58:	91 1d       	adc	r25, r1
    6e5a:	96 95       	lsr	r25
    6e5c:	87 95       	ror	r24
    6e5e:	97 f9       	bld	r25, 7
    6e60:	08 95       	ret
    6e62:	5f 3f       	cpi	r21, 0xFF	; 255
    6e64:	ac f0       	brlt	.+42     	; 0x6e90 <ldexp+0x66>
    6e66:	98 3e       	cpi	r25, 0xE8	; 232
    6e68:	9c f0       	brlt	.+38     	; 0x6e90 <ldexp+0x66>
    6e6a:	bb 27       	eor	r27, r27
    6e6c:	86 95       	lsr	r24
    6e6e:	77 95       	ror	r23
    6e70:	67 95       	ror	r22
    6e72:	b7 95       	ror	r27
    6e74:	08 f4       	brcc	.+2      	; 0x6e78 <ldexp+0x4e>
    6e76:	b1 60       	ori	r27, 0x01	; 1
    6e78:	93 95       	inc	r25
    6e7a:	c1 f7       	brne	.-16     	; 0x6e6c <ldexp+0x42>
    6e7c:	bb 0f       	add	r27, r27
    6e7e:	58 f7       	brcc	.-42     	; 0x6e56 <ldexp+0x2c>
    6e80:	11 f4       	brne	.+4      	; 0x6e86 <ldexp+0x5c>
    6e82:	60 ff       	sbrs	r22, 0
    6e84:	e8 cf       	rjmp	.-48     	; 0x6e56 <ldexp+0x2c>
    6e86:	6f 5f       	subi	r22, 0xFF	; 255
    6e88:	7f 4f       	sbci	r23, 0xFF	; 255
    6e8a:	8f 4f       	sbci	r24, 0xFF	; 255
    6e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e8e:	e3 cf       	rjmp	.-58     	; 0x6e56 <ldexp+0x2c>
    6e90:	5a ce       	rjmp	.-844    	; 0x6b46 <__fp_szero>
    6e92:	0e f0       	brts	.+2      	; 0x6e96 <ldexp+0x6c>
    6e94:	a0 cf       	rjmp	.-192    	; 0x6dd6 <__fp_mpack>
    6e96:	ab cd       	rjmp	.-1194   	; 0x69ee <__fp_nan>
    6e98:	68 94       	set
    6e9a:	a3 cd       	rjmp	.-1210   	; 0x69e2 <__fp_inf>

00006e9c <log>:
    6e9c:	39 de       	rcall	.-910    	; 0x6b10 <__fp_splitA>
    6e9e:	c8 f3       	brcs	.-14     	; 0x6e92 <ldexp+0x68>
    6ea0:	99 23       	and	r25, r25
    6ea2:	d1 f3       	breq	.-12     	; 0x6e98 <ldexp+0x6e>
    6ea4:	c6 f3       	brts	.-16     	; 0x6e96 <ldexp+0x6c>
    6ea6:	df 93       	push	r29
    6ea8:	cf 93       	push	r28
    6eaa:	1f 93       	push	r17
    6eac:	0f 93       	push	r16
    6eae:	ff 92       	push	r15
    6eb0:	c9 2f       	mov	r28, r25
    6eb2:	dd 27       	eor	r29, r29
    6eb4:	88 23       	and	r24, r24
    6eb6:	2a f0       	brmi	.+10     	; 0x6ec2 <log+0x26>
    6eb8:	21 97       	sbiw	r28, 0x01	; 1
    6eba:	66 0f       	add	r22, r22
    6ebc:	77 1f       	adc	r23, r23
    6ebe:	88 1f       	adc	r24, r24
    6ec0:	da f7       	brpl	.-10     	; 0x6eb8 <log+0x1c>
    6ec2:	20 e0       	ldi	r18, 0x00	; 0
    6ec4:	30 e0       	ldi	r19, 0x00	; 0
    6ec6:	40 e8       	ldi	r20, 0x80	; 128
    6ec8:	5f eb       	ldi	r21, 0xBF	; 191
    6eca:	9f e3       	ldi	r25, 0x3F	; 63
    6ecc:	88 39       	cpi	r24, 0x98	; 152
    6ece:	20 f0       	brcs	.+8      	; 0x6ed8 <log+0x3c>
    6ed0:	80 3e       	cpi	r24, 0xE0	; 224
    6ed2:	30 f0       	brcs	.+12     	; 0x6ee0 <log+0x44>
    6ed4:	21 96       	adiw	r28, 0x01	; 1
    6ed6:	8f 77       	andi	r24, 0x7F	; 127
    6ed8:	bd db       	rcall	.-2182   	; 0x6654 <__addsf3>
    6eda:	e7 e5       	ldi	r30, 0x57	; 87
    6edc:	f1 e0       	ldi	r31, 0x01	; 1
    6ede:	03 c0       	rjmp	.+6      	; 0x6ee6 <log+0x4a>
    6ee0:	b9 db       	rcall	.-2190   	; 0x6654 <__addsf3>
    6ee2:	e4 e8       	ldi	r30, 0x84	; 132
    6ee4:	f1 e0       	ldi	r31, 0x01	; 1
    6ee6:	86 dd       	rcall	.-1268   	; 0x69f4 <__fp_powser>
    6ee8:	8b 01       	movw	r16, r22
    6eea:	be 01       	movw	r22, r28
    6eec:	ec 01       	movw	r28, r24
    6eee:	fb 2e       	mov	r15, r27
    6ef0:	6f 57       	subi	r22, 0x7F	; 127
    6ef2:	71 09       	sbc	r23, r1
    6ef4:	75 95       	asr	r23
    6ef6:	77 1f       	adc	r23, r23
    6ef8:	88 0b       	sbc	r24, r24
    6efa:	99 0b       	sbc	r25, r25
    6efc:	13 dd       	rcall	.-1498   	; 0x6924 <__floatsisf>
    6efe:	28 e1       	ldi	r18, 0x18	; 24
    6f00:	32 e7       	ldi	r19, 0x72	; 114
    6f02:	41 e3       	ldi	r20, 0x31	; 49
    6f04:	5f e3       	ldi	r21, 0x3F	; 63
    6f06:	3c de       	rcall	.-904    	; 0x6b80 <__mulsf3x>
    6f08:	af 2d       	mov	r26, r15
    6f0a:	98 01       	movw	r18, r16
    6f0c:	ae 01       	movw	r20, r28
    6f0e:	ff 90       	pop	r15
    6f10:	0f 91       	pop	r16
    6f12:	1f 91       	pop	r17
    6f14:	cf 91       	pop	r28
    6f16:	df 91       	pop	r29
    6f18:	ae db       	rcall	.-2212   	; 0x6676 <__addsf3x>
    6f1a:	d0 cd       	rjmp	.-1120   	; 0x6abc <__fp_round>

00006f1c <modf>:
    6f1c:	fa 01       	movw	r30, r20
    6f1e:	dc 01       	movw	r26, r24
    6f20:	aa 0f       	add	r26, r26
    6f22:	bb 1f       	adc	r27, r27
    6f24:	9b 01       	movw	r18, r22
    6f26:	ac 01       	movw	r20, r24
    6f28:	bf 57       	subi	r27, 0x7F	; 127
    6f2a:	28 f4       	brcc	.+10     	; 0x6f36 <modf+0x1a>
    6f2c:	22 27       	eor	r18, r18
    6f2e:	33 27       	eor	r19, r19
    6f30:	44 27       	eor	r20, r20
    6f32:	50 78       	andi	r21, 0x80	; 128
    6f34:	1f c0       	rjmp	.+62     	; 0x6f74 <modf+0x58>
    6f36:	b7 51       	subi	r27, 0x17	; 23
    6f38:	88 f4       	brcc	.+34     	; 0x6f5c <modf+0x40>
    6f3a:	ab 2f       	mov	r26, r27
    6f3c:	00 24       	eor	r0, r0
    6f3e:	46 95       	lsr	r20
    6f40:	37 95       	ror	r19
    6f42:	27 95       	ror	r18
    6f44:	01 1c       	adc	r0, r1
    6f46:	a3 95       	inc	r26
    6f48:	d2 f3       	brmi	.-12     	; 0x6f3e <modf+0x22>
    6f4a:	00 20       	and	r0, r0
    6f4c:	69 f0       	breq	.+26     	; 0x6f68 <modf+0x4c>
    6f4e:	22 0f       	add	r18, r18
    6f50:	33 1f       	adc	r19, r19
    6f52:	44 1f       	adc	r20, r20
    6f54:	b3 95       	inc	r27
    6f56:	da f3       	brmi	.-10     	; 0x6f4e <modf+0x32>
    6f58:	0d d0       	rcall	.+26     	; 0x6f74 <modf+0x58>
    6f5a:	7b cb       	rjmp	.-2314   	; 0x6652 <__subsf3>
    6f5c:	61 30       	cpi	r22, 0x01	; 1
    6f5e:	71 05       	cpc	r23, r1
    6f60:	a0 e8       	ldi	r26, 0x80	; 128
    6f62:	8a 07       	cpc	r24, r26
    6f64:	b9 46       	sbci	r27, 0x69	; 105
    6f66:	30 f4       	brcc	.+12     	; 0x6f74 <modf+0x58>
    6f68:	9b 01       	movw	r18, r22
    6f6a:	ac 01       	movw	r20, r24
    6f6c:	66 27       	eor	r22, r22
    6f6e:	77 27       	eor	r23, r23
    6f70:	88 27       	eor	r24, r24
    6f72:	90 78       	andi	r25, 0x80	; 128
    6f74:	30 96       	adiw	r30, 0x00	; 0
    6f76:	21 f0       	breq	.+8      	; 0x6f80 <modf+0x64>
    6f78:	20 83       	st	Z, r18
    6f7a:	31 83       	std	Z+1, r19	; 0x01
    6f7c:	42 83       	std	Z+2, r20	; 0x02
    6f7e:	53 83       	std	Z+3, r21	; 0x03
    6f80:	08 95       	ret

00006f82 <__mulsi3>:
    6f82:	62 9f       	mul	r22, r18
    6f84:	d0 01       	movw	r26, r0
    6f86:	73 9f       	mul	r23, r19
    6f88:	f0 01       	movw	r30, r0
    6f8a:	82 9f       	mul	r24, r18
    6f8c:	e0 0d       	add	r30, r0
    6f8e:	f1 1d       	adc	r31, r1
    6f90:	64 9f       	mul	r22, r20
    6f92:	e0 0d       	add	r30, r0
    6f94:	f1 1d       	adc	r31, r1
    6f96:	92 9f       	mul	r25, r18
    6f98:	f0 0d       	add	r31, r0
    6f9a:	83 9f       	mul	r24, r19
    6f9c:	f0 0d       	add	r31, r0
    6f9e:	74 9f       	mul	r23, r20
    6fa0:	f0 0d       	add	r31, r0
    6fa2:	65 9f       	mul	r22, r21
    6fa4:	f0 0d       	add	r31, r0
    6fa6:	99 27       	eor	r25, r25
    6fa8:	72 9f       	mul	r23, r18
    6faa:	b0 0d       	add	r27, r0
    6fac:	e1 1d       	adc	r30, r1
    6fae:	f9 1f       	adc	r31, r25
    6fb0:	63 9f       	mul	r22, r19
    6fb2:	b0 0d       	add	r27, r0
    6fb4:	e1 1d       	adc	r30, r1
    6fb6:	f9 1f       	adc	r31, r25
    6fb8:	bd 01       	movw	r22, r26
    6fba:	cf 01       	movw	r24, r30
    6fbc:	11 24       	eor	r1, r1
    6fbe:	08 95       	ret

00006fc0 <__udivmodhi4>:
    6fc0:	aa 1b       	sub	r26, r26
    6fc2:	bb 1b       	sub	r27, r27
    6fc4:	51 e1       	ldi	r21, 0x11	; 17
    6fc6:	07 c0       	rjmp	.+14     	; 0x6fd6 <__udivmodhi4_ep>

00006fc8 <__udivmodhi4_loop>:
    6fc8:	aa 1f       	adc	r26, r26
    6fca:	bb 1f       	adc	r27, r27
    6fcc:	a6 17       	cp	r26, r22
    6fce:	b7 07       	cpc	r27, r23
    6fd0:	10 f0       	brcs	.+4      	; 0x6fd6 <__udivmodhi4_ep>
    6fd2:	a6 1b       	sub	r26, r22
    6fd4:	b7 0b       	sbc	r27, r23

00006fd6 <__udivmodhi4_ep>:
    6fd6:	88 1f       	adc	r24, r24
    6fd8:	99 1f       	adc	r25, r25
    6fda:	5a 95       	dec	r21
    6fdc:	a9 f7       	brne	.-22     	; 0x6fc8 <__udivmodhi4_loop>
    6fde:	80 95       	com	r24
    6fe0:	90 95       	com	r25
    6fe2:	bc 01       	movw	r22, r24
    6fe4:	cd 01       	movw	r24, r26
    6fe6:	08 95       	ret

00006fe8 <__udivmodsi4>:
    6fe8:	a1 e2       	ldi	r26, 0x21	; 33
    6fea:	1a 2e       	mov	r1, r26
    6fec:	aa 1b       	sub	r26, r26
    6fee:	bb 1b       	sub	r27, r27
    6ff0:	fd 01       	movw	r30, r26
    6ff2:	0d c0       	rjmp	.+26     	; 0x700e <__udivmodsi4_ep>

00006ff4 <__udivmodsi4_loop>:
    6ff4:	aa 1f       	adc	r26, r26
    6ff6:	bb 1f       	adc	r27, r27
    6ff8:	ee 1f       	adc	r30, r30
    6ffa:	ff 1f       	adc	r31, r31
    6ffc:	a2 17       	cp	r26, r18
    6ffe:	b3 07       	cpc	r27, r19
    7000:	e4 07       	cpc	r30, r20
    7002:	f5 07       	cpc	r31, r21
    7004:	20 f0       	brcs	.+8      	; 0x700e <__udivmodsi4_ep>
    7006:	a2 1b       	sub	r26, r18
    7008:	b3 0b       	sbc	r27, r19
    700a:	e4 0b       	sbc	r30, r20
    700c:	f5 0b       	sbc	r31, r21

0000700e <__udivmodsi4_ep>:
    700e:	66 1f       	adc	r22, r22
    7010:	77 1f       	adc	r23, r23
    7012:	88 1f       	adc	r24, r24
    7014:	99 1f       	adc	r25, r25
    7016:	1a 94       	dec	r1
    7018:	69 f7       	brne	.-38     	; 0x6ff4 <__udivmodsi4_loop>
    701a:	60 95       	com	r22
    701c:	70 95       	com	r23
    701e:	80 95       	com	r24
    7020:	90 95       	com	r25
    7022:	9b 01       	movw	r18, r22
    7024:	ac 01       	movw	r20, r24
    7026:	bd 01       	movw	r22, r26
    7028:	cf 01       	movw	r24, r30
    702a:	08 95       	ret

0000702c <__divmodsi4>:
    702c:	97 fb       	bst	r25, 7
    702e:	09 2e       	mov	r0, r25
    7030:	05 26       	eor	r0, r21
    7032:	0e d0       	rcall	.+28     	; 0x7050 <__divmodsi4_neg1>
    7034:	57 fd       	sbrc	r21, 7
    7036:	04 d0       	rcall	.+8      	; 0x7040 <__divmodsi4_neg2>
    7038:	d7 df       	rcall	.-82     	; 0x6fe8 <__udivmodsi4>
    703a:	0a d0       	rcall	.+20     	; 0x7050 <__divmodsi4_neg1>
    703c:	00 1c       	adc	r0, r0
    703e:	38 f4       	brcc	.+14     	; 0x704e <__divmodsi4_exit>

00007040 <__divmodsi4_neg2>:
    7040:	50 95       	com	r21
    7042:	40 95       	com	r20
    7044:	30 95       	com	r19
    7046:	21 95       	neg	r18
    7048:	3f 4f       	sbci	r19, 0xFF	; 255
    704a:	4f 4f       	sbci	r20, 0xFF	; 255
    704c:	5f 4f       	sbci	r21, 0xFF	; 255

0000704e <__divmodsi4_exit>:
    704e:	08 95       	ret

00007050 <__divmodsi4_neg1>:
    7050:	f6 f7       	brtc	.-4      	; 0x704e <__divmodsi4_exit>
    7052:	90 95       	com	r25
    7054:	80 95       	com	r24
    7056:	70 95       	com	r23
    7058:	61 95       	neg	r22
    705a:	7f 4f       	sbci	r23, 0xFF	; 255
    705c:	8f 4f       	sbci	r24, 0xFF	; 255
    705e:	9f 4f       	sbci	r25, 0xFF	; 255
    7060:	08 95       	ret

00007062 <__tablejump2__>:
    7062:	ee 0f       	add	r30, r30
    7064:	ff 1f       	adc	r31, r31

00007066 <__tablejump__>:
    7066:	05 90       	lpm	r0, Z+
    7068:	f4 91       	lpm	r31, Z+
    706a:	e0 2d       	mov	r30, r0
    706c:	09 94       	ijmp

0000706e <_exit>:
    706e:	f8 94       	cli

00007070 <__stop_program>:
    7070:	ff cf       	rjmp	.-2      	; 0x7070 <__stop_program>
