
testXBee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800200  00001250  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000298  00800292  00800292  00001376  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000081c  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001383  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000451  00000000  00000000  00002f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001273  00000000  00000000  000033c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000640  00000000  00000000  0000463c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000082e  00000000  00000000  00004c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000089e  00000000  00000000  000054aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__vector_25>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__vector_27>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__vector_36>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__vector_38>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__vector_51>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__vector_53>
      d8:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__vector_54>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__vector_56>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e0 e5       	ldi	r30, 0x50	; 80
      f8:	f2 e1       	ldi	r31, 0x12	; 18
      fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
     100:	a2 39       	cpi	r26, 0x92	; 146
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
     106:	15 e0       	ldi	r17, 0x05	; 5
     108:	a2 e9       	ldi	r26, 0x92	; 146
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	aa 32       	cpi	r26, 0x2A	; 42
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 cc 03 	call	0x798	; 0x798 <main>
     11a:	0c 94 bf 08 	jmp	0x117e	; 0x117e <exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <PWM_Init_timer1_LED>:

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     122:	89 30       	cpi	r24, 0x09	; 9
     124:	49 f4       	brne	.+18     	; 0x138 <PWM_Init_timer1_LED+0x16>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     126:	80 91 80 00 	lds	r24, 0x0080
     12a:	82 60       	ori	r24, 0x02	; 2
     12c:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,PWM10);
     130:	80 91 80 00 	lds	r24, 0x0080
     134:	8e 7f       	andi	r24, 0xFE	; 254
     136:	0e c0       	rjmp	.+28     	; 0x154 <PWM_Init_timer1_LED+0x32>
	}
	else if( bitRes == 10 )
     138:	8a 30       	cpi	r24, 0x0A	; 10
     13a:	21 f4       	brne	.+8      	; 0x144 <PWM_Init_timer1_LED+0x22>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     13c:	80 91 80 00 	lds	r24, 0x0080
     140:	82 60       	ori	r24, 0x02	; 2
     142:	03 c0       	rjmp	.+6      	; 0x14a <PWM_Init_timer1_LED+0x28>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     144:	80 91 80 00 	lds	r24, 0x0080
     148:	8d 7f       	andi	r24, 0xFD	; 253
     14a:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,PWM10);
     14e:	80 91 80 00 	lds	r24, 0x0080
     152:	81 60       	ori	r24, 0x01	; 1
     154:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     158:	10 92 8b 00 	sts	0x008B, r1
     15c:	10 92 8a 00 	sts	0x008A, r1
}
     160:	08 95       	ret

00000162 <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     162:	89 30       	cpi	r24, 0x09	; 9
     164:	49 f4       	brne	.+18     	; 0x178 <PWM_Init_timer2_H6+0x16>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
     166:	80 91 b0 00 	lds	r24, 0x00B0
     16a:	82 60       	ori	r24, 0x02	; 2
     16c:	80 93 b0 00 	sts	0x00B0, r24
		cbi(TCCR2A,PWM10);
     170:	80 91 b0 00 	lds	r24, 0x00B0
     174:	8e 7f       	andi	r24, 0xFE	; 254
     176:	0e c0       	rjmp	.+28     	; 0x194 <PWM_Init_timer2_H6+0x32>
	}
	else if( bitRes == 10 )
     178:	8a 30       	cpi	r24, 0x0A	; 10
     17a:	21 f4       	brne	.+8      	; 0x184 <PWM_Init_timer2_H6+0x22>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
     17c:	80 91 b0 00 	lds	r24, 0x00B0
     180:	82 60       	ori	r24, 0x02	; 2
     182:	03 c0       	rjmp	.+6      	; 0x18a <PWM_Init_timer2_H6+0x28>
		sbi(TCCR2A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
     184:	80 91 b0 00 	lds	r24, 0x00B0
     188:	8d 7f       	andi	r24, 0xFD	; 253
     18a:	80 93 b0 00 	sts	0x00B0, r24
		sbi(TCCR2A,PWM10);
     18e:	80 91 b0 00 	lds	r24, 0x00B0
     192:	81 60       	ori	r24, 0x01	; 1
     194:	80 93 b0 00 	sts	0x00B0, r24
	}
	// clear output compare values
	OCR2B = 0;
     198:	10 92 b4 00 	sts	0x00B4, r1
}
     19c:	08 95       	ret

0000019e <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     19e:	89 30       	cpi	r24, 0x09	; 9
     1a0:	49 f4       	brne	.+18     	; 0x1b4 <PWM_Init_timer3_E3+0x16>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
     1a2:	80 91 90 00 	lds	r24, 0x0090
     1a6:	82 60       	ori	r24, 0x02	; 2
     1a8:	80 93 90 00 	sts	0x0090, r24
		cbi(TCCR3A,PWM10);
     1ac:	80 91 90 00 	lds	r24, 0x0090
     1b0:	8e 7f       	andi	r24, 0xFE	; 254
     1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <PWM_Init_timer3_E3+0x32>
	}
	else if( bitRes == 10 )
     1b4:	8a 30       	cpi	r24, 0x0A	; 10
     1b6:	21 f4       	brne	.+8      	; 0x1c0 <PWM_Init_timer3_E3+0x22>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
     1b8:	80 91 90 00 	lds	r24, 0x0090
     1bc:	82 60       	ori	r24, 0x02	; 2
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <PWM_Init_timer3_E3+0x28>
		sbi(TCCR3A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
     1c0:	80 91 90 00 	lds	r24, 0x0090
     1c4:	8d 7f       	andi	r24, 0xFD	; 253
     1c6:	80 93 90 00 	sts	0x0090, r24
		sbi(TCCR3A,PWM10);
     1ca:	80 91 90 00 	lds	r24, 0x0090
     1ce:	81 60       	ori	r24, 0x01	; 1
     1d0:	80 93 90 00 	sts	0x0090, r24
	}
	// clear output compare values
	OCR3A = 0;
     1d4:	10 92 99 00 	sts	0x0099, r1
     1d8:	10 92 98 00 	sts	0x0098, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     1dc:	08 95       	ret

000001de <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     1de:	89 30       	cpi	r24, 0x09	; 9
     1e0:	49 f4       	brne	.+18     	; 0x1f4 <PWM_Init_timer3_E4+0x16>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
     1e2:	80 91 91 00 	lds	r24, 0x0091
     1e6:	82 60       	ori	r24, 0x02	; 2
     1e8:	80 93 91 00 	sts	0x0091, r24
		cbi(TCCR3B,PWM10);
     1ec:	80 91 91 00 	lds	r24, 0x0091
     1f0:	8e 7f       	andi	r24, 0xFE	; 254
     1f2:	0e c0       	rjmp	.+28     	; 0x210 <PWM_Init_timer3_E4+0x32>
	}
	else if( bitRes == 10 )
     1f4:	8a 30       	cpi	r24, 0x0A	; 10
     1f6:	21 f4       	brne	.+8      	; 0x200 <PWM_Init_timer3_E4+0x22>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
     1f8:	80 91 91 00 	lds	r24, 0x0091
     1fc:	82 60       	ori	r24, 0x02	; 2
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <PWM_Init_timer3_E4+0x28>
		sbi(TCCR3B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
     200:	80 91 91 00 	lds	r24, 0x0091
     204:	8d 7f       	andi	r24, 0xFD	; 253
     206:	80 93 91 00 	sts	0x0091, r24
		sbi(TCCR3B,PWM10);
     20a:	80 91 91 00 	lds	r24, 0x0091
     20e:	81 60       	ori	r24, 0x01	; 1
     210:	80 93 91 00 	sts	0x0091, r24
	}
	// clear output compare values
	OCR3B = 0;
     214:	10 92 9b 00 	sts	0x009B, r1
     218:	10 92 9a 00 	sts	0x009A, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     21c:	08 95       	ret

0000021e <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     21e:	89 30       	cpi	r24, 0x09	; 9
     220:	49 f4       	brne	.+18     	; 0x234 <PWM_Init_timer3_E5+0x16>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
     222:	80 91 92 00 	lds	r24, 0x0092
     226:	82 60       	ori	r24, 0x02	; 2
     228:	80 93 92 00 	sts	0x0092, r24
		cbi(TCCR3C,PWM10);
     22c:	80 91 92 00 	lds	r24, 0x0092
     230:	8e 7f       	andi	r24, 0xFE	; 254
     232:	0e c0       	rjmp	.+28     	; 0x250 <PWM_Init_timer3_E5+0x32>
	}
	else if( bitRes == 10 )
     234:	8a 30       	cpi	r24, 0x0A	; 10
     236:	21 f4       	brne	.+8      	; 0x240 <PWM_Init_timer3_E5+0x22>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
     238:	80 91 92 00 	lds	r24, 0x0092
     23c:	82 60       	ori	r24, 0x02	; 2
     23e:	03 c0       	rjmp	.+6      	; 0x246 <PWM_Init_timer3_E5+0x28>
		sbi(TCCR3C,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
     240:	80 91 92 00 	lds	r24, 0x0092
     244:	8d 7f       	andi	r24, 0xFD	; 253
     246:	80 93 92 00 	sts	0x0092, r24
		sbi(TCCR3C,PWM10);
     24a:	80 91 92 00 	lds	r24, 0x0092
     24e:	81 60       	ori	r24, 0x01	; 1
     250:	80 93 92 00 	sts	0x0092, r24
	}
	// clear output compare values
	OCR3C = 0;
     254:	10 92 9d 00 	sts	0x009D, r1
     258:	10 92 9c 00 	sts	0x009C, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     25c:	08 95       	ret

0000025e <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     25e:	89 30       	cpi	r24, 0x09	; 9
     260:	49 f4       	brne	.+18     	; 0x274 <PWM_Init_timer4_H3+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     262:	80 91 a0 00 	lds	r24, 0x00A0
     266:	82 60       	ori	r24, 0x02	; 2
     268:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     26c:	80 91 a0 00 	lds	r24, 0x00A0
     270:	8e 7f       	andi	r24, 0xFE	; 254
     272:	0e c0       	rjmp	.+28     	; 0x290 <PWM_Init_timer4_H3+0x32>
	}
	else if( bitRes == 10 )
     274:	8a 30       	cpi	r24, 0x0A	; 10
     276:	21 f4       	brne	.+8      	; 0x280 <PWM_Init_timer4_H3+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     278:	80 91 a0 00 	lds	r24, 0x00A0
     27c:	82 60       	ori	r24, 0x02	; 2
     27e:	03 c0       	rjmp	.+6      	; 0x286 <PWM_Init_timer4_H3+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     280:	80 91 a0 00 	lds	r24, 0x00A0
     284:	8d 7f       	andi	r24, 0xFD	; 253
     286:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     28a:	80 91 a0 00 	lds	r24, 0x00A0
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4A = 0;
     294:	10 92 a9 00 	sts	0x00A9, r1
     298:	10 92 a8 00 	sts	0x00A8, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     29c:	08 95       	ret

0000029e <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     29e:	89 30       	cpi	r24, 0x09	; 9
     2a0:	49 f4       	brne	.+18     	; 0x2b4 <PWM_Init_timer4_H4+0x16>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
     2a2:	80 91 a1 00 	lds	r24, 0x00A1
     2a6:	82 60       	ori	r24, 0x02	; 2
     2a8:	80 93 a1 00 	sts	0x00A1, r24
		cbi(TCCR4B,PWM10);
     2ac:	80 91 a1 00 	lds	r24, 0x00A1
     2b0:	8e 7f       	andi	r24, 0xFE	; 254
     2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <PWM_Init_timer4_H4+0x32>
	}
	else if( bitRes == 10 )
     2b4:	8a 30       	cpi	r24, 0x0A	; 10
     2b6:	21 f4       	brne	.+8      	; 0x2c0 <PWM_Init_timer4_H4+0x22>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
     2b8:	80 91 a1 00 	lds	r24, 0x00A1
     2bc:	82 60       	ori	r24, 0x02	; 2
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <PWM_Init_timer4_H4+0x28>
		sbi(TCCR4B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
     2c0:	80 91 a1 00 	lds	r24, 0x00A1
     2c4:	8d 7f       	andi	r24, 0xFD	; 253
     2c6:	80 93 a1 00 	sts	0x00A1, r24
		sbi(TCCR4B,PWM10);
     2ca:	80 91 a1 00 	lds	r24, 0x00A1
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	80 93 a1 00 	sts	0x00A1, r24
	}
	// clear output compare values
	OCR4B = 0;
     2d4:	10 92 ab 00 	sts	0x00AB, r1
     2d8:	10 92 aa 00 	sts	0x00AA, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     2dc:	08 95       	ret

000002de <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     2de:	89 30       	cpi	r24, 0x09	; 9
     2e0:	49 f4       	brne	.+18     	; 0x2f4 <PWM_Init_timer4_H5+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     2e2:	80 91 a0 00 	lds	r24, 0x00A0
     2e6:	82 60       	ori	r24, 0x02	; 2
     2e8:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     2ec:	80 91 a0 00 	lds	r24, 0x00A0
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	0e c0       	rjmp	.+28     	; 0x310 <PWM_Init_timer4_H5+0x32>
	}
	else if( bitRes == 10 )
     2f4:	8a 30       	cpi	r24, 0x0A	; 10
     2f6:	21 f4       	brne	.+8      	; 0x300 <PWM_Init_timer4_H5+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     2f8:	80 91 a0 00 	lds	r24, 0x00A0
     2fc:	82 60       	ori	r24, 0x02	; 2
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <PWM_Init_timer4_H5+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     300:	80 91 a0 00 	lds	r24, 0x00A0
     304:	8d 7f       	andi	r24, 0xFD	; 253
     306:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     30a:	80 91 a0 00 	lds	r24, 0x00A0
     30e:	81 60       	ori	r24, 0x01	; 1
     310:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4C = 0;
     314:	10 92 ad 00 	sts	0x00AD, r1
     318:	10 92 ac 00 	sts	0x00AC, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     31c:	08 95       	ret

0000031e <timer1PWMInitICR>:
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     31e:	e0 e8       	ldi	r30, 0x80	; 128
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	20 81       	ld	r18, Z
     324:	2e 7f       	andi	r18, 0xFE	; 254
     326:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     328:	20 81       	ld	r18, Z
     32a:	22 60       	ori	r18, 0x02	; 2
     32c:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     32e:	e1 e8       	ldi	r30, 0x81	; 129
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	20 81       	ld	r18, Z
     334:	28 60       	ori	r18, 0x08	; 8
     336:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     338:	20 81       	ld	r18, Z
     33a:	20 61       	ori	r18, 0x10	; 16
     33c:	20 83       	st	Z, r18
	
	// set top count value
	ICR1 = topcount;
     33e:	90 93 87 00 	sts	0x0087, r25
     342:	80 93 86 00 	sts	0x0086, r24
	
	// clear output compare values
	OCR1A = 0;
     346:	10 92 89 00 	sts	0x0089, r1
     34a:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     34e:	10 92 8b 00 	sts	0x008B, r1
     352:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     356:	10 92 8d 00 	sts	0x008D, r1
     35a:	10 92 8c 00 	sts	0x008C, r1
}
     35e:	08 95       	ret

00000360 <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
     360:	e0 e9       	ldi	r30, 0x90	; 144
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	20 81       	ld	r18, Z
     366:	2e 7f       	andi	r18, 0xFE	; 254
     368:	20 83       	st	Z, r18
	sbi(TCCR3A,WGM11);
     36a:	20 81       	ld	r18, Z
     36c:	22 60       	ori	r18, 0x02	; 2
     36e:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM12);
     370:	e1 e9       	ldi	r30, 0x91	; 145
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	20 81       	ld	r18, Z
     376:	28 60       	ori	r18, 0x08	; 8
     378:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM13);
     37a:	20 81       	ld	r18, Z
     37c:	20 61       	ori	r18, 0x10	; 16
     37e:	20 83       	st	Z, r18
	
	// set top count value
	ICR3 = topcount;
     380:	90 93 97 00 	sts	0x0097, r25
     384:	80 93 96 00 	sts	0x0096, r24
	
	// clear output compare values
	OCR3A = 0;
     388:	10 92 99 00 	sts	0x0099, r1
     38c:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
     390:	10 92 9b 00 	sts	0x009B, r1
     394:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
     398:	10 92 9d 00 	sts	0x009D, r1
     39c:	10 92 9c 00 	sts	0x009C, r1
}
     3a0:	08 95       	ret

000003a2 <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
     3a2:	e0 ea       	ldi	r30, 0xA0	; 160
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	20 81       	ld	r18, Z
     3a8:	2e 7f       	andi	r18, 0xFE	; 254
     3aa:	20 83       	st	Z, r18
	sbi(TCCR4A,WGM11);
     3ac:	20 81       	ld	r18, Z
     3ae:	22 60       	ori	r18, 0x02	; 2
     3b0:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM12);
     3b2:	e1 ea       	ldi	r30, 0xA1	; 161
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	20 81       	ld	r18, Z
     3b8:	28 60       	ori	r18, 0x08	; 8
     3ba:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM13);
     3bc:	20 81       	ld	r18, Z
     3be:	20 61       	ori	r18, 0x10	; 16
     3c0:	20 83       	st	Z, r18
	
	// set top count value
	ICR4 = topcount;
     3c2:	90 93 a7 00 	sts	0x00A7, r25
     3c6:	80 93 a6 00 	sts	0x00A6, r24
	
	// clear output compare values
	OCR4A = 0;
     3ca:	10 92 a9 00 	sts	0x00A9, r1
     3ce:	10 92 a8 00 	sts	0x00A8, r1
	OCR4B = 0;
     3d2:	10 92 ab 00 	sts	0x00AB, r1
     3d6:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
     3da:	10 92 ad 00 	sts	0x00AD, r1
     3de:	10 92 ac 00 	sts	0x00AC, r1
}
     3e2:	08 95       	ret

000003e4 <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
	sbi(TCCR1A,COM1B1);
     3e4:	e0 e8       	ldi	r30, 0x80	; 128
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	80 62       	ori	r24, 0x20	; 32
     3ec:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     3ee:	80 81       	ld	r24, Z
     3f0:	8f 7e       	andi	r24, 0xEF	; 239
     3f2:	80 83       	st	Z, r24
}
     3f4:	08 95       	ret

000003f6 <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
	sbi(TCCR2A,COM2B1);
     3f6:	e0 eb       	ldi	r30, 0xB0	; 176
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     400:	80 81       	ld	r24, Z
     402:	8f 7e       	andi	r24, 0xEF	; 239
     404:	80 83       	st	Z, r24
}
     406:	08 95       	ret

00000408 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
	sbi(TCCR3A,COM3A1);
     408:	e0 e9       	ldi	r30, 0x90	; 144
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	80 68       	ori	r24, 0x80	; 128
     410:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     412:	80 81       	ld	r24, Z
     414:	8f 7b       	andi	r24, 0xBF	; 191
     416:	80 83       	st	Z, r24
}
     418:	08 95       	ret

0000041a <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
	sbi(TCCR3A,COM3B1);
     41a:	e0 e9       	ldi	r30, 0x90	; 144
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 62       	ori	r24, 0x20	; 32
     422:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     424:	80 81       	ld	r24, Z
     426:	8f 7e       	andi	r24, 0xEF	; 239
     428:	80 83       	st	Z, r24
}
     42a:	08 95       	ret

0000042c <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
	sbi(TCCR3A,COM3C1);
     42c:	e0 e9       	ldi	r30, 0x90	; 144
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	88 60       	ori	r24, 0x08	; 8
     434:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     436:	80 81       	ld	r24, Z
     438:	8b 7f       	andi	r24, 0xFB	; 251
     43a:	80 83       	st	Z, r24
}
     43c:	08 95       	ret

0000043e <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
	sbi(TCCR4A,COM4A1);
     43e:	e0 ea       	ldi	r30, 0xA0	; 160
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	80 68       	ori	r24, 0x80	; 128
     446:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     448:	80 81       	ld	r24, Z
     44a:	8f 7b       	andi	r24, 0xBF	; 191
     44c:	80 83       	st	Z, r24
}
     44e:	08 95       	ret

00000450 <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
	sbi(TCCR4A,COM4B1);
     450:	e0 ea       	ldi	r30, 0xA0	; 160
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	80 62       	ori	r24, 0x20	; 32
     458:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     45a:	80 81       	ld	r24, Z
     45c:	8f 7e       	andi	r24, 0xEF	; 239
     45e:	80 83       	st	Z, r24
}
     460:	08 95       	ret

00000462 <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
	sbi(TCCR4A,COM4C1);
     462:	e0 ea       	ldi	r30, 0xA0	; 160
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     46c:	80 81       	ld	r24, Z
     46e:	8b 7f       	andi	r24, 0xFB	; 251
     470:	80 83       	st	Z, r24
}
     472:	08 95       	ret

00000474 <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     474:	e0 e8       	ldi	r30, 0x80	; 128
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	8f 7d       	andi	r24, 0xDF	; 223
     47c:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     47e:	80 81       	ld	r24, Z
     480:	8f 7e       	andi	r24, 0xEF	; 239
     482:	80 83       	st	Z, r24
}
     484:	08 95       	ret

00000486 <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     486:	e0 eb       	ldi	r30, 0xB0	; 176
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8f 7d       	andi	r24, 0xDF	; 223
     48e:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     490:	80 81       	ld	r24, Z
     492:	8f 7e       	andi	r24, 0xEF	; 239
     494:	80 83       	st	Z, r24
}
     496:	08 95       	ret

00000498 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     498:	e0 e9       	ldi	r30, 0x90	; 144
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	8f 77       	andi	r24, 0x7F	; 127
     4a0:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     4a2:	80 81       	ld	r24, Z
     4a4:	8f 7b       	andi	r24, 0xBF	; 191
     4a6:	80 83       	st	Z, r24
}
     4a8:	08 95       	ret

000004aa <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     4aa:	e0 e9       	ldi	r30, 0x90	; 144
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	8f 7d       	andi	r24, 0xDF	; 223
     4b2:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     4b4:	80 81       	ld	r24, Z
     4b6:	8f 7e       	andi	r24, 0xEF	; 239
     4b8:	80 83       	st	Z, r24
}
     4ba:	08 95       	ret

000004bc <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     4bc:	e0 e9       	ldi	r30, 0x90	; 144
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	87 7f       	andi	r24, 0xF7	; 247
     4c4:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     4c6:	80 81       	ld	r24, Z
     4c8:	8b 7f       	andi	r24, 0xFB	; 251
     4ca:	80 83       	st	Z, r24
}
     4cc:	08 95       	ret

000004ce <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     4ce:	e0 ea       	ldi	r30, 0xA0	; 160
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	8f 77       	andi	r24, 0x7F	; 127
     4d6:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     4d8:	80 81       	ld	r24, Z
     4da:	8f 7b       	andi	r24, 0xBF	; 191
     4dc:	80 83       	st	Z, r24
}
     4de:	08 95       	ret

000004e0 <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     4e0:	e0 ea       	ldi	r30, 0xA0	; 160
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	8f 7d       	andi	r24, 0xDF	; 223
     4e8:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     4ea:	80 81       	ld	r24, Z
     4ec:	8f 7e       	andi	r24, 0xEF	; 239
     4ee:	80 83       	st	Z, r24
}
     4f0:	08 95       	ret

000004f2 <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     4f2:	e0 ea       	ldi	r30, 0xA0	; 160
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	87 7f       	andi	r24, 0xF7	; 247
     4fa:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     4fc:	80 81       	ld	r24, Z
     4fe:	8b 7f       	andi	r24, 0xFB	; 251
     500:	80 83       	st	Z, r24
}
     502:	08 95       	ret

00000504 <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
	cbi(TCCR1A,PWM11);
     504:	e0 e8       	ldi	r30, 0x80	; 128
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	8d 7f       	andi	r24, 0xFD	; 253
     50c:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM10);
     50e:	80 81       	ld	r24, Z
     510:	8e 7f       	andi	r24, 0xFE	; 254
     512:	80 83       	st	Z, r24
}

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     514:	80 81       	ld	r24, Z
     516:	8f 7d       	andi	r24, 0xDF	; 223
     518:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     51a:	80 81       	ld	r24, Z
     51c:	8f 7e       	andi	r24, 0xEF	; 239
     51e:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
	//timer2PWMCOff();
}
     520:	08 95       	ret

00000522 <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
	cbi(TCCR2A,PWM11);
     522:	e0 eb       	ldi	r30, 0xB0	; 176
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	8d 7f       	andi	r24, 0xFD	; 253
     52a:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM10);
     52c:	80 81       	ld	r24, Z
     52e:	8e 7f       	andi	r24, 0xFE	; 254
     530:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     532:	80 81       	ld	r24, Z
     534:	8f 7d       	andi	r24, 0xDF	; 223
     536:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     538:	80 81       	ld	r24, Z
     53a:	8f 7e       	andi	r24, 0xEF	; 239
     53c:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM11);
	cbi(TCCR2A,PWM10);
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
	//timer2PWMCOff();
}
     53e:	08 95       	ret

00000540 <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
	cbi(TCCR3A,PWM11);
     540:	e0 e9       	ldi	r30, 0x90	; 144
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	8d 7f       	andi	r24, 0xFD	; 253
     548:	80 83       	st	Z, r24
	cbi(TCCR3A,PWM10);
     54a:	80 81       	ld	r24, Z
     54c:	8e 7f       	andi	r24, 0xFE	; 254
     54e:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B1);
	cbi(TCCR2A,COM2B0);
}
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     550:	80 81       	ld	r24, Z
     552:	8f 77       	andi	r24, 0x7F	; 127
     554:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     556:	80 81       	ld	r24, Z
     558:	8f 7b       	andi	r24, 0xBF	; 191
     55a:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     55c:	80 81       	ld	r24, Z
     55e:	8f 7d       	andi	r24, 0xDF	; 223
     560:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     562:	80 81       	ld	r24, Z
     564:	8f 7e       	andi	r24, 0xEF	; 239
     566:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     568:	80 81       	ld	r24, Z
     56a:	87 7f       	andi	r24, 0xF7	; 247
     56c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     56e:	80 81       	ld	r24, Z
     570:	8b 7f       	andi	r24, 0xFB	; 251
     572:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
	PWM_timer3_Off_E4();
	PWM_timer3_Off_E5();
	//timer2PWMCOff();
}
     574:	08 95       	ret

00000576 <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
	cbi(TCCR4A,PWM11);
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	8d 7f       	andi	r24, 0xFD	; 253
     57e:	80 83       	st	Z, r24
	cbi(TCCR4A,PWM10);
     580:	80 81       	ld	r24, Z
     582:	8e 7f       	andi	r24, 0xFE	; 254
     584:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C1);
	cbi(TCCR3A,COM3C0);
}
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     586:	80 81       	ld	r24, Z
     588:	8f 77       	andi	r24, 0x7F	; 127
     58a:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     58c:	80 81       	ld	r24, Z
     58e:	8f 7b       	andi	r24, 0xBF	; 191
     590:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     592:	80 81       	ld	r24, Z
     594:	8f 7d       	andi	r24, 0xDF	; 223
     596:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     598:	80 81       	ld	r24, Z
     59a:	8f 7e       	andi	r24, 0xEF	; 239
     59c:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     59e:	80 81       	ld	r24, Z
     5a0:	87 7f       	andi	r24, 0xF7	; 247
     5a2:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     5a4:	80 81       	ld	r24, Z
     5a6:	8b 7f       	andi	r24, 0xFB	; 251
     5a8:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
	PWM_timer4_Off_H4();
	PWM_timer4_Off_H5();
	//timer2PWMCOff();
}
     5aa:	08 95       	ret

000005ac <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
     5ac:	90 93 8b 00 	sts	0x008B, r25
     5b0:	80 93 8a 00 	sts	0x008A, r24
     5b4:	08 95       	ret

000005b6 <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     5b6:	80 93 b4 00 	sts	0x00B4, r24
     5ba:	08 95       	ret

000005bc <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
     5bc:	90 93 99 00 	sts	0x0099, r25
     5c0:	80 93 98 00 	sts	0x0098, r24
     5c4:	08 95       	ret

000005c6 <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
     5c6:	90 93 9b 00 	sts	0x009B, r25
     5ca:	80 93 9a 00 	sts	0x009A, r24
     5ce:	08 95       	ret

000005d0 <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
     5d0:	90 93 9d 00 	sts	0x009D, r25
     5d4:	80 93 9c 00 	sts	0x009C, r24
     5d8:	08 95       	ret

000005da <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
     5da:	90 93 a9 00 	sts	0x00A9, r25
     5de:	80 93 a8 00 	sts	0x00A8, r24
     5e2:	08 95       	ret

000005e4 <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
     5e4:	90 93 ab 00 	sts	0x00AB, r25
     5e8:	80 93 aa 00 	sts	0x00AA, r24
     5ec:	08 95       	ret

000005ee <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
     5ee:	90 93 ad 00 	sts	0x00AD, r25
     5f2:	80 93 ac 00 	sts	0x00AC, r24
     5f6:	08 95       	ret

000005f8 <configure_ports>:
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
     5f8:	10 ba       	out	0x10, r1	; 16
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
     5fa:	11 ba       	out	0x11, r1	; 17
	DDRK = 0b00000000;  //configure all K ports for input				0x00
     5fc:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
     600:	10 92 08 01 	sts	0x0108, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	91 b9       	out	0x01, r25	; 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
     608:	80 e4       	ldi	r24, 0x40	; 64
     60a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;  //configure ports for output
     60c:	97 b9       	out	0x07, r25	; 7
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
     60e:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, PD1); // SDA pull-up
     610:	59 9a       	sbi	0x0b, 1	; 11
	DDRD = 0b11110011;  //configure ports for output
     612:	83 ef       	ldi	r24, 0xF3	; 243
     614:	8a b9       	out	0x0a, r24	; 10
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
     616:	8e ef       	ldi	r24, 0xFE	; 254
     618:	8d b9       	out	0x0d, r24	; 13
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
     61a:	a5 9a       	sbi	0x14, 5	; 20
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
     61c:	9d 98       	cbi	0x13, 5	; 19
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
     61e:	80 93 01 01 	sts	0x0101, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
     622:	80 93 04 01 	sts	0x0104, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
     626:	08 95       	ret

00000628 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
	}
     628:	08 95       	ret

0000062a <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     62a:	2e 9a       	sbi	0x05, 6	; 5
     62c:	08 95       	ret

0000062e <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     62e:	2e 98       	cbi	0x05, 6	; 5
     630:	08 95       	ret

00000632 <button_pressed>:


//*****************BUTTON****************
int button_pressed(void)
	{
	return (bit_is_clear(PING, 5));
     632:	22 b3       	in	r18, 0x12	; 18
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	85 e0       	ldi	r24, 0x05	; 5
     638:	36 95       	lsr	r19
     63a:	27 95       	ror	r18
     63c:	8a 95       	dec	r24
     63e:	e1 f7       	brne	.-8      	; 0x638 <button_pressed+0x6>
     640:	20 95       	com	r18
     642:	30 95       	com	r19
     644:	21 70       	andi	r18, 0x01	; 1
     646:	30 70       	andi	r19, 0x00	; 0
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
     648:	c9 01       	movw	r24, r18
     64a:	08 95       	ret

0000064c <cos_SoR>:
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
	if (degrees >= 0)//positive angles
     64c:	97 fd       	sbrc	r25, 7
     64e:	10 c0       	rjmp	.+32     	; 0x670 <cos_SoR+0x24>
		return angtable[degrees/5];
     650:	25 e0       	ldi	r18, 0x05	; 5
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodsi4>
     65c:	da 01       	movw	r26, r20
     65e:	c9 01       	movw	r24, r18
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	80 50       	subi	r24, 0x00	; 0
     666:	9e 4f       	sbci	r25, 0xFE	; 254
     668:	fc 01       	movw	r30, r24
     66a:	20 81       	ld	r18, Z
     66c:	31 81       	ldd	r19, Z+1	; 0x01
     66e:	17 c0       	rjmp	.+46     	; 0x69e <cos_SoR+0x52>
	else
		return -angtable[72-(-degrees)/5];
     670:	25 e0       	ldi	r18, 0x05	; 5
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodsi4>
     67c:	da 01       	movw	r26, r20
     67e:	c9 01       	movw	r24, r18
     680:	88 5b       	subi	r24, 0xB8	; 184
     682:	9f 4f       	sbci	r25, 0xFF	; 255
     684:	af 4f       	sbci	r26, 0xFF	; 255
     686:	bf 4f       	sbci	r27, 0xFF	; 255
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	80 50       	subi	r24, 0x00	; 0
     68e:	9e 4f       	sbci	r25, 0xFE	; 254
     690:	fc 01       	movw	r30, r24
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	22 27       	eor	r18, r18
     698:	33 27       	eor	r19, r19
     69a:	28 1b       	sub	r18, r24
     69c:	39 0b       	sbc	r19, r25
	}
     69e:	c9 01       	movw	r24, r18
     6a0:	08 95       	ret

000006a2 <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
	degrees=degrees - 90;//phase shift 90 degrees
     6a2:	6a 55       	subi	r22, 0x5A	; 90
     6a4:	70 40       	sbci	r23, 0x00	; 0
     6a6:	80 40       	sbci	r24, 0x00	; 0
     6a8:	90 40       	sbci	r25, 0x00	; 0

	if (degrees >= 0)//positive angles
     6aa:	97 fd       	sbrc	r25, 7
     6ac:	10 c0       	rjmp	.+32     	; 0x6ce <sin_SoR+0x2c>
		return angtable[degrees/5];
     6ae:	25 e0       	ldi	r18, 0x05	; 5
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodsi4>
     6ba:	da 01       	movw	r26, r20
     6bc:	c9 01       	movw	r24, r18
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	80 50       	subi	r24, 0x00	; 0
     6c4:	9e 4f       	sbci	r25, 0xFE	; 254
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 81       	ld	r18, Z
     6ca:	31 81       	ldd	r19, Z+1	; 0x01
     6cc:	17 c0       	rjmp	.+46     	; 0x6fc <sin_SoR+0x5a>
	else
		return -angtable[72-(-degrees)/5];
     6ce:	25 e0       	ldi	r18, 0x05	; 5
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodsi4>
     6da:	da 01       	movw	r26, r20
     6dc:	c9 01       	movw	r24, r18
     6de:	88 5b       	subi	r24, 0xB8	; 184
     6e0:	9f 4f       	sbci	r25, 0xFF	; 255
     6e2:	af 4f       	sbci	r26, 0xFF	; 255
     6e4:	bf 4f       	sbci	r27, 0xFF	; 255
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	80 50       	subi	r24, 0x00	; 0
     6ec:	9e 4f       	sbci	r25, 0xFE	; 254
     6ee:	fc 01       	movw	r30, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	91 81       	ldd	r25, Z+1	; 0x01
     6f4:	22 27       	eor	r18, r18
     6f6:	33 27       	eor	r19, r19
     6f8:	28 1b       	sub	r18, r24
     6fa:	39 0b       	sbc	r19, r25
	}
     6fc:	c9 01       	movw	r24, r18
     6fe:	08 95       	ret

00000700 <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
     710:	8a e5       	ldi	r24, 0x5A	; 90
     712:	c8 16       	cp	r12, r24
     714:	d1 04       	cpc	r13, r1
     716:	e1 04       	cpc	r14, r1
     718:	f1 04       	cpc	r15, r1
     71a:	a1 f1       	breq	.+104    	; 0x784 <tan_SoR+0x84>
     71c:	86 ea       	ldi	r24, 0xA6	; 166
     71e:	c8 16       	cp	r12, r24
     720:	8f ef       	ldi	r24, 0xFF	; 255
     722:	d8 06       	cpc	r13, r24
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	e8 06       	cpc	r14, r24
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	f8 06       	cpc	r15, r24
     72c:	59 f1       	breq	.+86     	; 0x784 <tan_SoR+0x84>
     72e:	8e e0       	ldi	r24, 0x0E	; 14
     730:	c8 16       	cp	r12, r24
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	d8 06       	cpc	r13, r24
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	e8 06       	cpc	r14, r24
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	f8 06       	cpc	r15, r24
     73e:	11 f1       	breq	.+68     	; 0x784 <tan_SoR+0x84>
     740:	82 ef       	ldi	r24, 0xF2	; 242
     742:	c8 16       	cp	r12, r24
     744:	8e ef       	ldi	r24, 0xFE	; 254
     746:	d8 06       	cpc	r13, r24
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	e8 06       	cpc	r14, r24
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	f8 06       	cpc	r15, r24
     750:	c9 f0       	breq	.+50     	; 0x784 <tan_SoR+0x84>
		return 0;//what else should I return?!?!?
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
     752:	c7 01       	movw	r24, r14
     754:	b6 01       	movw	r22, r12
     756:	0e 94 51 03 	call	0x6a2	; 0x6a2 <sin_SoR>
     75a:	8c 01       	movw	r16, r24
     75c:	c7 01       	movw	r24, r14
     75e:	b6 01       	movw	r22, r12
     760:	0e 94 26 03 	call	0x64c	; 0x64c <cos_SoR>
     764:	bc 01       	movw	r22, r24
     766:	c8 01       	movw	r24, r16
     768:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__divmodhi4>
     76c:	cb 01       	movw	r24, r22
     76e:	9b 01       	movw	r18, r22
     770:	73 e0       	ldi	r23, 0x03	; 3
     772:	22 0f       	add	r18, r18
     774:	33 1f       	adc	r19, r19
     776:	7a 95       	dec	r23
     778:	e1 f7       	brne	.-8      	; 0x772 <tan_SoR+0x72>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	28 0f       	add	r18, r24
     780:	39 1f       	adc	r19, r25
     782:	02 c0       	rjmp	.+4      	; 0x788 <tan_SoR+0x88>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
	}
     788:	c9 01       	movw	r24, r18
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	08 95       	ret

00000798 <main>:
#include <SoR_Utils.h>

int main(){
     798:	1f 93       	push	r17
uint32_t counter = 0;
uartInit();
     79a:	0e 94 06 08 	call	0x100c	; 0x100c <uartInit>
     79e:	10 e0       	ldi	r17, 0x00	; 0
while(1){
	uart1SendByte(counter);
     7a0:	81 2f       	mov	r24, r17
     7a2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <uart1SendByte>
     7a6:	1f 5f       	subi	r17, 0xFF	; 255
     7a8:	fb cf       	rjmp	.-10     	; 0x7a0 <main+0x8>

000007aa <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
     7aa:	84 30       	cpi	r24, 0x04	; 4
     7ac:	40 f4       	brcc	.+16     	; 0x7be <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
     7ae:	e8 2f       	mov	r30, r24
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ee 0f       	add	r30, r30
     7b4:	ff 1f       	adc	r31, r31
     7b6:	ee 52       	subi	r30, 0x2E	; 46
     7b8:	fb 4f       	sbci	r31, 0xFB	; 251
     7ba:	71 83       	std	Z+1, r23	; 0x01
     7bc:	60 83       	st	Z, r22
     7be:	08 95       	ret

000007c0 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
     7c0:	1f 93       	push	r17
     7c2:	18 2f       	mov	r17, r24
     7c4:	9a 01       	movw	r18, r20
     7c6:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     7c8:	ca 01       	movw	r24, r20
     7ca:	b9 01       	movw	r22, r18
     7cc:	60 58       	subi	r22, 0x80	; 128
     7ce:	7b 47       	sbci	r23, 0x7B	; 123
     7d0:	81 4e       	sbci	r24, 0xE1	; 225
     7d2:	9f 4f       	sbci	r25, 0xFF	; 255
     7d4:	f3 e0       	ldi	r31, 0x03	; 3
     7d6:	66 0f       	add	r22, r22
     7d8:	77 1f       	adc	r23, r23
     7da:	88 1f       	adc	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	fa 95       	dec	r31
     7e0:	d1 f7       	brne	.-12     	; 0x7d6 <uartSetBaudRate+0x16>
     7e2:	e4 e0       	ldi	r30, 0x04	; 4
     7e4:	22 0f       	add	r18, r18
     7e6:	33 1f       	adc	r19, r19
     7e8:	44 1f       	adc	r20, r20
     7ea:	55 1f       	adc	r21, r21
     7ec:	ea 95       	dec	r30
     7ee:	d1 f7       	brne	.-12     	; 0x7e4 <uartSetBaudRate+0x24>
     7f0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__udivmodsi4>
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==3)
     7f8:	13 30       	cpi	r17, 0x03	; 3
     7fa:	29 f4       	brne	.+10     	; 0x806 <uartSetBaudRate+0x46>
	{
		outb(UBRR3L, bauddiv);
     7fc:	20 93 34 01 	sts	0x0134, r18
		#ifdef UBRR3H
		outb(UBRR3H, bauddiv>>8);
     800:	30 93 35 01 	sts	0x0135, r19
     804:	12 c0       	rjmp	.+36     	; 0x82a <uartSetBaudRate+0x6a>
		#endif
	}
	else if(nUart==2)
     806:	12 30       	cpi	r17, 0x02	; 2
     808:	29 f4       	brne	.+10     	; 0x814 <uartSetBaudRate+0x54>
	{
		outb(UBRR2L, bauddiv);
     80a:	20 93 d4 00 	sts	0x00D4, r18
		#ifdef UBRR2H
		outb(UBRR2H, bauddiv>>8);
     80e:	30 93 d5 00 	sts	0x00D5, r19
     812:	0b c0       	rjmp	.+22     	; 0x82a <uartSetBaudRate+0x6a>
		#endif
	}
	else if(nUart==1)
     814:	11 30       	cpi	r17, 0x01	; 1
     816:	29 f4       	brne	.+10     	; 0x822 <uartSetBaudRate+0x62>
	{
		outb(UBRR1L, bauddiv);
     818:	20 93 cc 00 	sts	0x00CC, r18
		#ifdef UBRR1H
		outb(UBRR1H, bauddiv>>8);
     81c:	30 93 cd 00 	sts	0x00CD, r19
     820:	04 c0       	rjmp	.+8      	; 0x82a <uartSetBaudRate+0x6a>
		#endif
	}
	else
	{
		outb(UBRR0L, bauddiv);
     822:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
     826:	30 93 c5 00 	sts	0x00C5, r19
		#endif
	}
}
     82a:	1f 91       	pop	r17
     82c:	08 95       	ret

0000082e <uartGetRxBuffer>:

cBuffer* uartGetRxBuffer(u08 nUart)
{
     82e:	28 2f       	mov	r18, r24
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	a3 e0       	ldi	r26, 0x03	; 3
     834:	22 0f       	add	r18, r18
     836:	33 1f       	adc	r19, r19
     838:	aa 95       	dec	r26
     83a:	e1 f7       	brne	.-8      	; 0x834 <uartGetRxBuffer+0x6>
     83c:	22 52       	subi	r18, 0x22	; 34
     83e:	3b 4f       	sbci	r19, 0xFB	; 251
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
     840:	c9 01       	movw	r24, r18
     842:	08 95       	ret

00000844 <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
     844:	28 2f       	mov	r18, r24
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	b3 e0       	ldi	r27, 0x03	; 3
     84a:	22 0f       	add	r18, r18
     84c:	33 1f       	adc	r19, r19
     84e:	ba 95       	dec	r27
     850:	e1 f7       	brne	.-8      	; 0x84a <uartGetTxBuffer+0x6>
     852:	2e 5f       	subi	r18, 0xFE	; 254
     854:	3a 4f       	sbci	r19, 0xFA	; 250
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
     856:	c9 01       	movw	r24, r18
     858:	08 95       	ret

0000085a <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
     85a:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==3)
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	39 f4       	brne	.+14     	; 0x86e <uartSendByte+0x14>
	{
		while(!(UCSR3A & (1<<UDRE3)));
     860:	80 91 30 01 	lds	r24, 0x0130
     864:	85 ff       	sbrs	r24, 5
     866:	fc cf       	rjmp	.-8      	; 0x860 <uartSendByte+0x6>
		outb(UDR3, txData);
     868:	60 93 36 01 	sts	0x0136, r22
     86c:	18 c0       	rjmp	.+48     	; 0x89e <uartSendByte+0x44>
	}
	else if(nUart==2)
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	39 f4       	brne	.+14     	; 0x880 <uartSendByte+0x26>
	{
		while(!(UCSR2A & (1<<UDRE2)));
     872:	80 91 d0 00 	lds	r24, 0x00D0
     876:	85 ff       	sbrs	r24, 5
     878:	fc cf       	rjmp	.-8      	; 0x872 <uartSendByte+0x18>
		outb(UDR2, txData);
     87a:	60 93 d6 00 	sts	0x00D6, r22
     87e:	0f c0       	rjmp	.+30     	; 0x89e <uartSendByte+0x44>
	}
	else if(nUart==1)
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	39 f4       	brne	.+14     	; 0x892 <uartSendByte+0x38>
	{
		while(!(UCSR1A & (1<<UDRE1)));
     884:	80 91 c8 00 	lds	r24, 0x00C8
     888:	85 ff       	sbrs	r24, 5
     88a:	fc cf       	rjmp	.-8      	; 0x884 <uartSendByte+0x2a>
		outb(UDR1, txData);
     88c:	60 93 ce 00 	sts	0x00CE, r22
     890:	06 c0       	rjmp	.+12     	; 0x89e <uartSendByte+0x44>
	}
	else
	{
		while(!(UCSR0A & (1<<UDRE0)));
     892:	80 91 c0 00 	lds	r24, 0x00C0
     896:	85 ff       	sbrs	r24, 5
     898:	fc cf       	rjmp	.-8      	; 0x892 <uartSendByte+0x38>
		outb(UDR0, txData);
     89a:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	e6 52       	subi	r30, 0x26	; 38
     8a2:	fb 4f       	sbci	r31, 0xFB	; 251
     8a4:	10 82       	st	Z, r1
}
     8a6:	08 95       	ret

000008a8 <uart0SendByte>:

void uart0SendByte(u08 data)
{
     8a8:	68 2f       	mov	r22, r24
	// send byte on UART0
	uartSendByte(0, data);
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	0e 94 2d 04 	call	0x85a	; 0x85a <uartSendByte>
}
     8b0:	08 95       	ret

000008b2 <uart1SendByte>:

void uart1SendByte(u08 data)
{
     8b2:	68 2f       	mov	r22, r24
	// send byte on UART1
	uartSendByte(1, data);
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	0e 94 2d 04 	call	0x85a	; 0x85a <uartSendByte>
}
     8ba:	08 95       	ret

000008bc <uart2SendByte>:

void uart2SendByte(u08 data)
{
     8bc:	68 2f       	mov	r22, r24
	// send byte on UART2
	uartSendByte(2, data);
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	0e 94 2d 04 	call	0x85a	; 0x85a <uartSendByte>
}
     8c4:	08 95       	ret

000008c6 <uart3SendByte>:

void uart3SendByte(u08 data)
{
     8c6:	68 2f       	mov	r22, r24
	// send byte on UART3
	uartSendByte(3, data);
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	0e 94 2d 04 	call	0x85a	; 0x85a <uartSendByte>
}
     8ce:	08 95       	ret

000008d0 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	e8 2f       	mov	r30, r24
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	8a 95       	dec	r24
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <uartReceiveBufferIsEmpty+0x8>
     8e0:	ee 51       	subi	r30, 0x1E	; 30
     8e2:	fb 4f       	sbci	r31, 0xFB	; 251
     8e4:	80 81       	ld	r24, Z
     8e6:	91 81       	ldd	r25, Z+1	; 0x01
     8e8:	89 2b       	or	r24, r25
     8ea:	09 f4       	brne	.+2      	; 0x8ee <uartReceiveBufferIsEmpty+0x1e>
     8ec:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
     8ee:	82 2f       	mov	r24, r18
     8f0:	08 95       	ret

000008f2 <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
	u08 c;
	// get received char
	if(nUart==3)
     8f6:	83 30       	cpi	r24, 0x03	; 3
     8f8:	19 f4       	brne	.+6      	; 0x900 <uartReceiveService+0xe>
		c = inb(UDR3);
     8fa:	60 91 36 01 	lds	r22, 0x0136
     8fe:	0c c0       	rjmp	.+24     	; 0x918 <uartReceiveService+0x26>
	else if(nUart==2)
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	19 f4       	brne	.+6      	; 0x90a <uartReceiveService+0x18>
		c = inb(UDR2);
     904:	60 91 d6 00 	lds	r22, 0x00D6
     908:	07 c0       	rjmp	.+14     	; 0x918 <uartReceiveService+0x26>
	else if(nUart==1)
     90a:	81 30       	cpi	r24, 0x01	; 1
     90c:	19 f4       	brne	.+6      	; 0x914 <uartReceiveService+0x22>
		c = inb(UDR1);
     90e:	60 91 ce 00 	lds	r22, 0x00CE
     912:	02 c0       	rjmp	.+4      	; 0x918 <uartReceiveService+0x26>
	else
		c = inb(UDR0);
     914:	60 91 c6 00 	lds	r22, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
     918:	28 2f       	mov	r18, r24
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	e9 01       	movw	r28, r18
     91e:	cc 0f       	add	r28, r28
     920:	dd 1f       	adc	r29, r29
     922:	fe 01       	movw	r30, r28
     924:	ee 52       	subi	r30, 0x2E	; 46
     926:	fb 4f       	sbci	r31, 0xFB	; 251
     928:	80 81       	ld	r24, Z
     92a:	91 81       	ldd	r25, Z+1	; 0x01
     92c:	89 2b       	or	r24, r25
     92e:	31 f0       	breq	.+12     	; 0x93c <uartReceiveService+0x4a>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
     930:	01 90       	ld	r0, Z+
     932:	f0 81       	ld	r31, Z
     934:	e0 2d       	mov	r30, r0
     936:	86 2f       	mov	r24, r22
     938:	09 95       	icall
     93a:	14 c0       	rjmp	.+40     	; 0x964 <uartReceiveService+0x72>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
     93c:	93 e0       	ldi	r25, 0x03	; 3
     93e:	22 0f       	add	r18, r18
     940:	33 1f       	adc	r19, r19
     942:	9a 95       	dec	r25
     944:	e1 f7       	brne	.-8      	; 0x93e <uartReceiveService+0x4c>
     946:	c9 01       	movw	r24, r18
     948:	82 52       	subi	r24, 0x22	; 34
     94a:	9b 4f       	sbci	r25, 0xFB	; 251
     94c:	0e 94 85 08 	call	0x110a	; 0x110a <bufferAddToEnd>
     950:	88 23       	and	r24, r24
     952:	41 f4       	brne	.+16     	; 0x964 <uartReceiveService+0x72>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
     954:	fe 01       	movw	r30, r28
     956:	ee 5d       	subi	r30, 0xDE	; 222
     958:	fa 4f       	sbci	r31, 0xFA	; 250
     95a:	80 81       	ld	r24, Z
     95c:	91 81       	ldd	r25, Z+1	; 0x01
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	91 83       	std	Z+1, r25	; 0x01
     962:	80 83       	st	Z, r24
		}
	}
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <__vector_54>:
{
	uartReceiveService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_RECV)      
{
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	2f 93       	push	r18
     976:	3f 93       	push	r19
     978:	4f 93       	push	r20
     97a:	5f 93       	push	r21
     97c:	6f 93       	push	r22
     97e:	7f 93       	push	r23
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	af 93       	push	r26
     986:	bf 93       	push	r27
     988:	ef 93       	push	r30
     98a:	ff 93       	push	r31
	uartReceiveService(3);
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <uartReceiveService>
}
     992:	ff 91       	pop	r31
     994:	ef 91       	pop	r30
     996:	bf 91       	pop	r27
     998:	af 91       	pop	r26
     99a:	9f 91       	pop	r25
     99c:	8f 91       	pop	r24
     99e:	7f 91       	pop	r23
     9a0:	6f 91       	pop	r22
     9a2:	5f 91       	pop	r21
     9a4:	4f 91       	pop	r20
     9a6:	3f 91       	pop	r19
     9a8:	2f 91       	pop	r18
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0
     9b0:	1f 90       	pop	r1
     9b2:	18 95       	reti

000009b4 <__vector_51>:
{
	uartReceiveService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_RECV)      
{
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	11 24       	eor	r1, r1
     9be:	2f 93       	push	r18
     9c0:	3f 93       	push	r19
     9c2:	4f 93       	push	r20
     9c4:	5f 93       	push	r21
     9c6:	6f 93       	push	r22
     9c8:	7f 93       	push	r23
     9ca:	8f 93       	push	r24
     9cc:	9f 93       	push	r25
     9ce:	af 93       	push	r26
     9d0:	bf 93       	push	r27
     9d2:	ef 93       	push	r30
     9d4:	ff 93       	push	r31
	uartReceiveService(2);
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <uartReceiveService>
}
     9dc:	ff 91       	pop	r31
     9de:	ef 91       	pop	r30
     9e0:	bf 91       	pop	r27
     9e2:	af 91       	pop	r26
     9e4:	9f 91       	pop	r25
     9e6:	8f 91       	pop	r24
     9e8:	7f 91       	pop	r23
     9ea:	6f 91       	pop	r22
     9ec:	5f 91       	pop	r21
     9ee:	4f 91       	pop	r20
     9f0:	3f 91       	pop	r19
     9f2:	2f 91       	pop	r18
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	0f 90       	pop	r0
     9fa:	1f 90       	pop	r1
     9fc:	18 95       	reti

000009fe <__vector_36>:
{
	uartReceiveService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_RECV)      
{
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
	uartReceiveService(1);
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	0e 94 79 04 	call	0x8f2	; 0x8f2 <uartReceiveService>
}
     a26:	ff 91       	pop	r31
     a28:	ef 91       	pop	r30
     a2a:	bf 91       	pop	r27
     a2c:	af 91       	pop	r26
     a2e:	9f 91       	pop	r25
     a30:	8f 91       	pop	r24
     a32:	7f 91       	pop	r23
     a34:	6f 91       	pop	r22
     a36:	5f 91       	pop	r21
     a38:	4f 91       	pop	r20
     a3a:	3f 91       	pop	r19
     a3c:	2f 91       	pop	r18
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0f 90       	pop	r0
     a44:	1f 90       	pop	r1
     a46:	18 95       	reti

00000a48 <__vector_25>:
	uartTransmitService(3);
}

	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
	uartReceiveService(0);
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <uartReceiveService>
}
     a70:	ff 91       	pop	r31
     a72:	ef 91       	pop	r30
     a74:	bf 91       	pop	r27
     a76:	af 91       	pop	r26
     a78:	9f 91       	pop	r25
     a7a:	8f 91       	pop	r24
     a7c:	7f 91       	pop	r23
     a7e:	6f 91       	pop	r22
     a80:	5f 91       	pop	r21
     a82:	4f 91       	pop	r20
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
     a92:	8f 92       	push	r8
     a94:	9f 92       	push	r9
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	88 2e       	mov	r8, r24
     aac:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
     aae:	c8 2e       	mov	r12, r24
     ab0:	dd 24       	eor	r13, r13
     ab2:	f6 01       	movw	r30, r12
     ab4:	13 e0       	ldi	r17, 0x03	; 3
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	1a 95       	dec	r17
     abc:	e1 f7       	brne	.-8      	; 0xab6 <uartSendBuffer+0x24>
     abe:	ea 5f       	subi	r30, 0xFA	; 250
     ac0:	fa 4f       	sbci	r31, 0xFA	; 250
     ac2:	20 81       	ld	r18, Z
     ac4:	31 81       	ldd	r19, Z+1	; 0x01
     ac6:	24 0f       	add	r18, r20
     ac8:	35 1f       	adc	r19, r21
     aca:	f6 01       	movw	r30, r12
     acc:	73 e0       	ldi	r23, 0x03	; 3
     ace:	ee 0f       	add	r30, r30
     ad0:	ff 1f       	adc	r31, r31
     ad2:	7a 95       	dec	r23
     ad4:	e1 f7       	brne	.-8      	; 0xace <uartSendBuffer+0x3c>
     ad6:	ec 5f       	subi	r30, 0xFC	; 252
     ad8:	fa 4f       	sbci	r31, 0xFA	; 250
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	28 17       	cp	r18, r24
     ae0:	39 07       	cpc	r19, r25
     ae2:	70 f5       	brcc	.+92     	; 0xb40 <uartSendBuffer+0xae>
     ae4:	41 15       	cp	r20, r1
     ae6:	51 05       	cpc	r21, r1
     ae8:	59 f1       	breq	.+86     	; 0xb40 <uartSendBuffer+0xae>
	{
		// grab first character
		first = *buffer++;
     aea:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
     aec:	76 01       	movw	r14, r12
     aee:	63 e0       	ldi	r22, 0x03	; 3
     af0:	ee 0c       	add	r14, r14
     af2:	ff 1c       	adc	r15, r15
     af4:	6a 95       	dec	r22
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <uartSendBuffer+0x5e>
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	95 e0       	ldi	r25, 0x05	; 5
     afc:	e8 0e       	add	r14, r24
     afe:	f9 1e       	adc	r15, r25
     b00:	8d 01       	movw	r16, r26
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
     b06:	5a 01       	movw	r10, r20
     b08:	08 94       	sec
     b0a:	a1 08       	sbc	r10, r1
     b0c:	b1 08       	sbc	r11, r1
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <uartSendBuffer+0x8a>
     b10:	c7 01       	movw	r24, r14
     b12:	f8 01       	movw	r30, r16
     b14:	60 81       	ld	r22, Z
     b16:	0e 94 85 08 	call	0x110a	; 0x110a <bufferAddToEnd>
     b1a:	21 96       	adiw	r28, 0x01	; 1
     b1c:	0f 5f       	subi	r16, 0xFF	; 255
     b1e:	1f 4f       	sbci	r17, 0xFF	; 255
     b20:	ca 15       	cp	r28, r10
     b22:	db 05       	cpc	r29, r11
     b24:	a8 f3       	brcs	.-22     	; 0xb10 <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
     b26:	8e ef       	ldi	r24, 0xFE	; 254
     b28:	94 e0       	ldi	r25, 0x04	; 4
     b2a:	c8 0e       	add	r12, r24
     b2c:	d9 1e       	adc	r13, r25
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	f6 01       	movw	r30, r12
     b32:	80 83       	st	Z, r24
		uartSendByte(nUart, first);
     b34:	88 2d       	mov	r24, r8
     b36:	69 2d       	mov	r22, r9
     b38:	0e 94 2d 04 	call	0x85a	; 0x85a <uartSendByte>
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <uartSendBuffer+0xb0>
		// return success
		return TRUE;
     b40:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	9f 90       	pop	r9
     b58:	8f 90       	pop	r8
     b5a:	08 95       	ret

00000b5c <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	23 e0       	ldi	r18, 0x03	; 3
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	2a 95       	dec	r18
     b66:	e1 f7       	brne	.-8      	; 0xb60 <uartAddToTxBuffer+0x4>
     b68:	8e 5f       	subi	r24, 0xFE	; 254
     b6a:	9a 4f       	sbci	r25, 0xFA	; 250
     b6c:	0e 94 85 08 	call	0x110a	; 0x110a <bufferAddToEnd>
}
     b70:	08 95       	ret

00000b72 <uart3AddToTxBuffer>:
{
	uartAddToTxBuffer(2,data);
}

void uart3AddToTxBuffer(u08 data)
{
     b72:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     b74:	8a e1       	ldi	r24, 0x1A	; 26
     b76:	95 e0       	ldi	r25, 0x05	; 5
     b78:	0e 94 85 08 	call	0x110a	; 0x110a <bufferAddToEnd>
}

void uart3AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(3,data);
}
     b7c:	08 95       	ret

00000b7e <uart2AddToTxBuffer>:
{
	uartAddToTxBuffer(1,data);
}

void uart2AddToTxBuffer(u08 data)
{
     b7e:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     b80:	82 e1       	ldi	r24, 0x12	; 18
     b82:	95 e0       	ldi	r25, 0x05	; 5
     b84:	0e 94 85 08 	call	0x110a	; 0x110a <bufferAddToEnd>
}

void uart2AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(2,data);
}
     b88:	08 95       	ret

00000b8a <uart1AddToTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uart1AddToTxBuffer(u08 data)
{
     b8a:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     b8c:	8a e0       	ldi	r24, 0x0A	; 10
     b8e:	95 e0       	ldi	r25, 0x05	; 5
     b90:	0e 94 85 08 	call	0x110a	; 0x110a <bufferAddToEnd>
}

void uart1AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(1,data);
}
     b94:	08 95       	ret

00000b96 <uart0AddToTxBuffer>:
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
}

void uart0AddToTxBuffer(u08 data)
{
     b96:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	95 e0       	ldi	r25, 0x05	; 5
     b9c:	0e 94 85 08 	call	0x110a	; 0x110a <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
     ba0:	08 95       	ret

00000ba2 <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
     ba8:	a8 2f       	mov	r26, r24
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ed 01       	movw	r28, r26
     bae:	c2 50       	subi	r28, 0x02	; 2
     bb0:	db 4f       	sbci	r29, 0xFB	; 251
     bb2:	88 81       	ld	r24, Y
     bb4:	88 23       	and	r24, r24
     bb6:	79 f1       	breq	.+94     	; 0xc16 <uartTransmitService+0x74>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
     bb8:	fd 01       	movw	r30, r26
     bba:	33 e0       	ldi	r19, 0x03	; 3
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	3a 95       	dec	r19
     bc2:	e1 f7       	brne	.-8      	; 0xbbc <uartTransmitService+0x1a>
     bc4:	ea 5f       	subi	r30, 0xFA	; 250
     bc6:	fa 4f       	sbci	r31, 0xFA	; 250
     bc8:	80 81       	ld	r24, Z
     bca:	91 81       	ldd	r25, Z+1	; 0x01
     bcc:	89 2b       	or	r24, r25
     bce:	11 f1       	breq	.+68     	; 0xc14 <uartTransmitService+0x72>
		{
			// send byte from top of buffer
			if(nUart==3)
     bd0:	23 30       	cpi	r18, 0x03	; 3
     bd2:	39 f4       	brne	.+14     	; 0xbe2 <uartTransmitService+0x40>
				outb(UDR3,  bufferGetFromFront(&uartTxBuffer[3]) );
     bd4:	8a e1       	ldi	r24, 0x1A	; 26
     bd6:	95 e0       	ldi	r25, 0x05	; 5
     bd8:	0e 94 1c 08 	call	0x1038	; 0x1038 <bufferGetFromFront>
     bdc:	80 93 36 01 	sts	0x0136, r24
     be0:	1e c0       	rjmp	.+60     	; 0xc1e <uartTransmitService+0x7c>
			else if(nUart==2)
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	39 f4       	brne	.+14     	; 0xbf4 <uartTransmitService+0x52>
				outb(UDR2,  bufferGetFromFront(&uartTxBuffer[2]) );
     be6:	82 e1       	ldi	r24, 0x12	; 18
     be8:	95 e0       	ldi	r25, 0x05	; 5
     bea:	0e 94 1c 08 	call	0x1038	; 0x1038 <bufferGetFromFront>
     bee:	80 93 d6 00 	sts	0x00D6, r24
     bf2:	15 c0       	rjmp	.+42     	; 0xc1e <uartTransmitService+0x7c>
			else if(nUart==1)
     bf4:	21 30       	cpi	r18, 0x01	; 1
     bf6:	39 f4       	brne	.+14     	; 0xc06 <uartTransmitService+0x64>
				outb(UDR1,  bufferGetFromFront(&uartTxBuffer[1]) );
     bf8:	8a e0       	ldi	r24, 0x0A	; 10
     bfa:	95 e0       	ldi	r25, 0x05	; 5
     bfc:	0e 94 1c 08 	call	0x1038	; 0x1038 <bufferGetFromFront>
     c00:	80 93 ce 00 	sts	0x00CE, r24
     c04:	0c c0       	rjmp	.+24     	; 0xc1e <uartTransmitService+0x7c>
			else
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	95 e0       	ldi	r25, 0x05	; 5
     c0a:	0e 94 1c 08 	call	0x1038	; 0x1038 <bufferGetFromFront>
     c0e:	80 93 c6 00 	sts	0x00C6, r24
     c12:	05 c0       	rjmp	.+10     	; 0xc1e <uartTransmitService+0x7c>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
     c14:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
     c16:	a6 52       	subi	r26, 0x26	; 38
     c18:	bb 4f       	sbci	r27, 0xFB	; 251
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	8c 93       	st	X, r24
	}
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <__vector_56>:
{
	uartTransmitService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_TRANS)      
{
     c24:	1f 92       	push	r1
     c26:	0f 92       	push	r0
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	0f 92       	push	r0
     c2c:	11 24       	eor	r1, r1
     c2e:	2f 93       	push	r18
     c30:	3f 93       	push	r19
     c32:	4f 93       	push	r20
     c34:	5f 93       	push	r21
     c36:	6f 93       	push	r22
     c38:	7f 93       	push	r23
     c3a:	8f 93       	push	r24
     c3c:	9f 93       	push	r25
     c3e:	af 93       	push	r26
     c40:	bf 93       	push	r27
     c42:	ef 93       	push	r30
     c44:	ff 93       	push	r31
	uartTransmitService(3);
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	0e 94 d1 05 	call	0xba2	; 0xba2 <uartTransmitService>
}
     c4c:	ff 91       	pop	r31
     c4e:	ef 91       	pop	r30
     c50:	bf 91       	pop	r27
     c52:	af 91       	pop	r26
     c54:	9f 91       	pop	r25
     c56:	8f 91       	pop	r24
     c58:	7f 91       	pop	r23
     c5a:	6f 91       	pop	r22
     c5c:	5f 91       	pop	r21
     c5e:	4f 91       	pop	r20
     c60:	3f 91       	pop	r19
     c62:	2f 91       	pop	r18
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <__vector_53>:
{
	uartTransmitService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_TRANS)      
{
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	0f 92       	push	r0
     c76:	11 24       	eor	r1, r1
     c78:	2f 93       	push	r18
     c7a:	3f 93       	push	r19
     c7c:	4f 93       	push	r20
     c7e:	5f 93       	push	r21
     c80:	6f 93       	push	r22
     c82:	7f 93       	push	r23
     c84:	8f 93       	push	r24
     c86:	9f 93       	push	r25
     c88:	af 93       	push	r26
     c8a:	bf 93       	push	r27
     c8c:	ef 93       	push	r30
     c8e:	ff 93       	push	r31
	uartTransmitService(2);
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	0e 94 d1 05 	call	0xba2	; 0xba2 <uartTransmitService>
}
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	bf 91       	pop	r27
     c9c:	af 91       	pop	r26
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	7f 91       	pop	r23
     ca4:	6f 91       	pop	r22
     ca6:	5f 91       	pop	r21
     ca8:	4f 91       	pop	r20
     caa:	3f 91       	pop	r19
     cac:	2f 91       	pop	r18
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <__vector_38>:
{
	uartTransmitService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_TRANS)      
{
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	11 24       	eor	r1, r1
     cc2:	2f 93       	push	r18
     cc4:	3f 93       	push	r19
     cc6:	4f 93       	push	r20
     cc8:	5f 93       	push	r21
     cca:	6f 93       	push	r22
     ccc:	7f 93       	push	r23
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	af 93       	push	r26
     cd4:	bf 93       	push	r27
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
	uartTransmitService(1);
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	0e 94 d1 05 	call	0xba2	; 0xba2 <uartTransmitService>
}
     ce0:	ff 91       	pop	r31
     ce2:	ef 91       	pop	r30
     ce4:	bf 91       	pop	r27
     ce6:	af 91       	pop	r26
     ce8:	9f 91       	pop	r25
     cea:	8f 91       	pop	r24
     cec:	7f 91       	pop	r23
     cee:	6f 91       	pop	r22
     cf0:	5f 91       	pop	r21
     cf2:	4f 91       	pop	r20
     cf4:	3f 91       	pop	r19
     cf6:	2f 91       	pop	r18
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <__vector_27>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	2f 93       	push	r18
     d0e:	3f 93       	push	r19
     d10:	4f 93       	push	r20
     d12:	5f 93       	push	r21
     d14:	6f 93       	push	r22
     d16:	7f 93       	push	r23
     d18:	8f 93       	push	r24
     d1a:	9f 93       	push	r25
     d1c:	af 93       	push	r26
     d1e:	bf 93       	push	r27
     d20:	ef 93       	push	r30
     d22:	ff 93       	push	r31
	uartTransmitService(0);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 d1 05 	call	0xba2	; 0xba2 <uartTransmitService>
}
     d2a:	ff 91       	pop	r31
     d2c:	ef 91       	pop	r30
     d2e:	bf 91       	pop	r27
     d30:	af 91       	pop	r26
     d32:	9f 91       	pop	r25
     d34:	8f 91       	pop	r24
     d36:	7f 91       	pop	r23
     d38:	6f 91       	pop	r22
     d3a:	5f 91       	pop	r21
     d3c:	4f 91       	pop	r20
     d3e:	3f 91       	pop	r19
     d40:	2f 91       	pop	r18
     d42:	0f 90       	pop	r0
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	0f 90       	pop	r0
     d48:	1f 90       	pop	r1
     d4a:	18 95       	reti

00000d4c <uartSendTxBuffer>:
{
	uartAddToTxBuffer(3,data);
}

void uartSendTxBuffer(u08 nUart)
{
     d4c:	1f 93       	push	r17
     d4e:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	fc 01       	movw	r30, r24
     d54:	e2 50       	subi	r30, 0x02	; 2
     d56:	fb 4f       	sbci	r31, 0xFB	; 251
     d58:	2f ef       	ldi	r18, 0xFF	; 255
     d5a:	20 83       	st	Z, r18
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
     d5c:	43 e0       	ldi	r20, 0x03	; 3
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	4a 95       	dec	r20
     d64:	e1 f7       	brne	.-8      	; 0xd5e <uartSendTxBuffer+0x12>
     d66:	8e 5f       	subi	r24, 0xFE	; 254
     d68:	9a 4f       	sbci	r25, 0xFA	; 250
     d6a:	0e 94 1c 08 	call	0x1038	; 0x1038 <bufferGetFromFront>
     d6e:	68 2f       	mov	r22, r24
     d70:	81 2f       	mov	r24, r17
     d72:	0e 94 2d 04 	call	0x85a	; 0x85a <uartSendByte>
}
     d76:	1f 91       	pop	r17
     d78:	08 95       	ret

00000d7a <uartReceiveByte>:
		return -1;
}


u08 uartReceiveByte(u08 nUart, u08* rxData)
{
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	f9 01       	movw	r30, r18
     d86:	73 e0       	ldi	r23, 0x03	; 3
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	7a 95       	dec	r23
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <uartReceiveByte+0xe>
     d90:	e0 52       	subi	r30, 0x20	; 32
     d92:	fb 4f       	sbci	r31, 0xFB	; 251
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	89 2b       	or	r24, r25
     d9a:	c9 f0       	breq	.+50     	; 0xdce <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
     d9c:	f9 01       	movw	r30, r18
     d9e:	63 e0       	ldi	r22, 0x03	; 3
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	6a 95       	dec	r22
     da6:	e1 f7       	brne	.-8      	; 0xda0 <uartReceiveByte+0x26>
     da8:	ee 51       	subi	r30, 0x1E	; 30
     daa:	fb 4f       	sbci	r31, 0xFB	; 251
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	89 2b       	or	r24, r25
     db2:	69 f0       	breq	.+26     	; 0xdce <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
     db4:	53 e0       	ldi	r21, 0x03	; 3
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	5a 95       	dec	r21
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <uartReceiveByte+0x3c>
     dbe:	c9 01       	movw	r24, r18
     dc0:	82 52       	subi	r24, 0x22	; 34
     dc2:	9b 4f       	sbci	r25, 0xFB	; 251
     dc4:	0e 94 1c 08 	call	0x1038	; 0x1038 <bufferGetFromFront>
     dc8:	88 83       	st	Y, r24
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <uartReceiveByte+0x56>
			return TRUE;
     dce:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <uart3GetByte>:
	else
		return -1;
}

int uart3GetByte(void)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	0f 92       	push	r0
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(3,&c))
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	be 01       	movw	r22, r28
     de4:	6f 5f       	subi	r22, 0xFF	; 255
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <uartReceiveByte>
     dec:	88 23       	and	r24, r24
     dee:	19 f4       	brne	.+6      	; 0xdf6 <uart3GetByte+0x20>
     df0:	2f ef       	ldi	r18, 0xFF	; 255
     df2:	3f ef       	ldi	r19, 0xFF	; 255
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <uart3GetByte+0x26>
		return c;
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
     dfc:	c9 01       	movw	r24, r18
     dfe:	0f 90       	pop	r0
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <uart2GetByte>:
	else
		return -1;
}

int uart2GetByte(void)
{
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	0f 92       	push	r0
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(2,&c))
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	be 01       	movw	r22, r28
     e14:	6f 5f       	subi	r22, 0xFF	; 255
     e16:	7f 4f       	sbci	r23, 0xFF	; 255
     e18:	0e 94 bd 06 	call	0xd7a	; 0xd7a <uartReceiveByte>
     e1c:	88 23       	and	r24, r24
     e1e:	19 f4       	brne	.+6      	; 0xe26 <uart2GetByte+0x20>
     e20:	2f ef       	ldi	r18, 0xFF	; 255
     e22:	3f ef       	ldi	r19, 0xFF	; 255
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <uart2GetByte+0x26>
		return c;
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
     e2c:	c9 01       	movw	r24, r18
     e2e:	0f 90       	pop	r0
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <uart1GetByte>:
	else
		return -1;
}

int uart1GetByte(void)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(1,&c))
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	be 01       	movw	r22, r28
     e44:	6f 5f       	subi	r22, 0xFF	; 255
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	0e 94 bd 06 	call	0xd7a	; 0xd7a <uartReceiveByte>
     e4c:	88 23       	and	r24, r24
     e4e:	19 f4       	brne	.+6      	; 0xe56 <uart1GetByte+0x20>
     e50:	2f ef       	ldi	r18, 0xFF	; 255
     e52:	3f ef       	ldi	r19, 0xFF	; 255
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <uart1GetByte+0x26>
		return c;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
     e5c:	c9 01       	movw	r24, r18
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <uart0GetByte>:
	// send byte on UART3
	uartSendByte(3, data);
}

int uart0GetByte(void)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	be 01       	movw	r22, r28
     e74:	6f 5f       	subi	r22, 0xFF	; 255
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	0e 94 bd 06 	call	0xd7a	; 0xd7a <uartReceiveByte>
     e7c:	88 23       	and	r24, r24
     e7e:	19 f4       	brne	.+6      	; 0xe86 <uart0GetByte+0x20>
     e80:	2f ef       	ldi	r18, 0xFF	; 255
     e82:	3f ef       	ldi	r19, 0xFF	; 255
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <uart0GetByte+0x26>
		return c;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
     e8c:	c9 01       	movw	r24, r18
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	e3 e0       	ldi	r30, 0x03	; 3
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	ea 95       	dec	r30
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <uartFlushReceiveBuffer+0x4>
     ea2:	82 52       	subi	r24, 0x22	; 34
     ea4:	9b 4f       	sbci	r25, 0xFB	; 251
     ea6:	0e 94 b8 08 	call	0x1170	; 0x1170 <bufferFlush>
}
     eaa:	08 95       	ret

00000eac <uart3InitBuffers>:

void uart3InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) uart3RxData, UART3_RX_BUFFER_SIZE);
     eac:	86 ef       	ldi	r24, 0xF6	; 246
     eae:	94 e0       	ldi	r25, 0x04	; 4
     eb0:	62 e4       	ldi	r22, 0x42	; 66
     eb2:	74 e0       	ldi	r23, 0x04	; 4
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	0e 94 0f 08 	call	0x101e	; 0x101e <bufferInit>
		bufferInit(&uartTxBuffer[3], (u08*) uart3TxData, UART3_TX_BUFFER_SIZE);
     ebc:	8a e1       	ldi	r24, 0x1A	; 26
     ebe:	95 e0       	ldi	r25, 0x05	; 5
     ec0:	62 ec       	ldi	r22, 0xC2	; 194
     ec2:	74 e0       	ldi	r23, 0x04	; 4
     ec4:	40 e1       	ldi	r20, 0x10	; 16
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	0e 94 0f 08 	call	0x101e	; 0x101e <bufferInit>
	#else
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) UART3_RX_BUFFER_ADDR, UART3_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[3], (u08*) UART3_TX_BUFFER_ADDR, UART3_TX_BUFFER_SIZE);
	#endif
}
     ecc:	08 95       	ret

00000ece <uart3Init>:
}

void uart3Init(void)
{
	// initialize the buffers
	uart3InitBuffers();
     ece:	0e 94 56 07 	call	0xeac	; 0xeac <uart3InitBuffers>
	// initialize user receive handlers
	UartRxFunc[3] = 0;
     ed2:	10 92 d9 04 	sts	0x04D9, r1
     ed6:	10 92 d8 04 	sts	0x04D8, r1
	// enable RxD/TxD and interrupts
	outb(UCSR3B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     eda:	88 ed       	ldi	r24, 0xD8	; 216
     edc:	80 93 31 01 	sts	0x0131, r24
	// set default baud rate
	uartSetBaudRate(3, UART3_DEFAULT_BAUD_RATE);
     ee0:	83 e0       	ldi	r24, 0x03	; 3
     ee2:	40 e8       	ldi	r20, 0x80	; 128
     ee4:	55 e2       	ldi	r21, 0x25	; 37
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <uartSetBaudRate>
	// initialize states
	uartReadyTx[3] = TRUE;
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	80 93 dd 04 	sts	0x04DD, r24
	uartBufferedTx[3] = FALSE;
     ef4:	10 92 01 05 	sts	0x0501, r1
	// clear overflow count
	uartRxOverflow[3] = 0;
     ef8:	10 92 29 05 	sts	0x0529, r1
     efc:	10 92 28 05 	sts	0x0528, r1
	// enable interrupts
	sei();
     f00:	78 94       	sei
}
     f02:	08 95       	ret

00000f04 <uart2InitBuffers>:

void uart2InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) uart2RxData, UART2_RX_BUFFER_SIZE);
     f04:	8e ee       	ldi	r24, 0xEE	; 238
     f06:	94 e0       	ldi	r25, 0x04	; 4
     f08:	62 eb       	ldi	r22, 0xB2	; 178
     f0a:	73 e0       	ldi	r23, 0x03	; 3
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	0e 94 0f 08 	call	0x101e	; 0x101e <bufferInit>
		bufferInit(&uartTxBuffer[2], (u08*) uart2TxData, UART2_TX_BUFFER_SIZE);
     f14:	82 e1       	ldi	r24, 0x12	; 18
     f16:	95 e0       	ldi	r25, 0x05	; 5
     f18:	62 e3       	ldi	r22, 0x32	; 50
     f1a:	74 e0       	ldi	r23, 0x04	; 4
     f1c:	40 e1       	ldi	r20, 0x10	; 16
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	0e 94 0f 08 	call	0x101e	; 0x101e <bufferInit>
	#else
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) UART2_RX_BUFFER_ADDR, UART2_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[2], (u08*) UART2_TX_BUFFER_ADDR, UART2_TX_BUFFER_SIZE);
	#endif
}
     f24:	08 95       	ret

00000f26 <uart2Init>:
}

void uart2Init(void)
{
	// initialize the buffers
	uart2InitBuffers();
     f26:	0e 94 82 07 	call	0xf04	; 0xf04 <uart2InitBuffers>
	// initialize user receive handlers
	UartRxFunc[2] = 0;
     f2a:	10 92 d7 04 	sts	0x04D7, r1
     f2e:	10 92 d6 04 	sts	0x04D6, r1
	// enable RxD/TxD and interrupts
	outb(UCSR2B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     f32:	88 ed       	ldi	r24, 0xD8	; 216
     f34:	80 93 d1 00 	sts	0x00D1, r24
	// set default baud rate
	uartSetBaudRate(2, UART2_DEFAULT_BAUD_RATE);
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	40 e8       	ldi	r20, 0x80	; 128
     f3c:	55 e2       	ldi	r21, 0x25	; 37
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <uartSetBaudRate>
	// initialize states
	uartReadyTx[2] = TRUE;
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	80 93 dc 04 	sts	0x04DC, r24
	uartBufferedTx[2] = FALSE;
     f4c:	10 92 00 05 	sts	0x0500, r1
	// clear overflow count
	uartRxOverflow[2] = 0;
     f50:	10 92 27 05 	sts	0x0527, r1
     f54:	10 92 26 05 	sts	0x0526, r1
	// enable interrupts
	sei();
     f58:	78 94       	sei
}
     f5a:	08 95       	ret

00000f5c <uart1InitBuffers>:

void uart1InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) uart1RxData, UART1_RX_BUFFER_SIZE);
     f5c:	86 ee       	ldi	r24, 0xE6	; 230
     f5e:	94 e0       	ldi	r25, 0x04	; 4
     f60:	62 e2       	ldi	r22, 0x22	; 34
     f62:	73 e0       	ldi	r23, 0x03	; 3
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	0e 94 0f 08 	call	0x101e	; 0x101e <bufferInit>
		bufferInit(&uartTxBuffer[1], (u08*) uart1TxData, UART1_TX_BUFFER_SIZE);
     f6c:	8a e0       	ldi	r24, 0x0A	; 10
     f6e:	95 e0       	ldi	r25, 0x05	; 5
     f70:	62 ea       	ldi	r22, 0xA2	; 162
     f72:	73 e0       	ldi	r23, 0x03	; 3
     f74:	40 e1       	ldi	r20, 0x10	; 16
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	0e 94 0f 08 	call	0x101e	; 0x101e <bufferInit>
	#else
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) UART1_RX_BUFFER_ADDR, UART1_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[1], (u08*) UART1_TX_BUFFER_ADDR, UART1_TX_BUFFER_SIZE);
	#endif
}
     f7c:	08 95       	ret

00000f7e <uart1Init>:
}

void uart1Init(void)
{
	// initialize the buffers
	uart1InitBuffers();
     f7e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <uart1InitBuffers>
	// initialize user receive handlers
	UartRxFunc[1] = 0;
     f82:	10 92 d5 04 	sts	0x04D5, r1
     f86:	10 92 d4 04 	sts	0x04D4, r1
	// enable RxD/TxD and interrupts
	outb(UCSR1B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     f8a:	88 ed       	ldi	r24, 0xD8	; 216
     f8c:	80 93 c9 00 	sts	0x00C9, r24
	// set default baud rate
	uartSetBaudRate(1, UART1_DEFAULT_BAUD_RATE);
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	40 e8       	ldi	r20, 0x80	; 128
     f94:	55 e2       	ldi	r21, 0x25	; 37
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <uartSetBaudRate>
	// initialize states
	uartReadyTx[1] = TRUE;
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	80 93 db 04 	sts	0x04DB, r24
	uartBufferedTx[1] = FALSE;
     fa4:	10 92 ff 04 	sts	0x04FF, r1
	// clear overflow count
	uartRxOverflow[1] = 0;
     fa8:	10 92 25 05 	sts	0x0525, r1
     fac:	10 92 24 05 	sts	0x0524, r1
	// enable interrupts
	sei();
     fb0:	78 94       	sei
}
     fb2:	08 95       	ret

00000fb4 <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
     fb4:	8e ed       	ldi	r24, 0xDE	; 222
     fb6:	94 e0       	ldi	r25, 0x04	; 4
     fb8:	62 e9       	ldi	r22, 0x92	; 146
     fba:	72 e0       	ldi	r23, 0x02	; 2
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	0e 94 0f 08 	call	0x101e	; 0x101e <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	95 e0       	ldi	r25, 0x05	; 5
     fc8:	62 e1       	ldi	r22, 0x12	; 18
     fca:	73 e0       	ldi	r23, 0x03	; 3
     fcc:	40 e1       	ldi	r20, 0x10	; 16
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	0e 94 0f 08 	call	0x101e	; 0x101e <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
     fd4:	08 95       	ret

00000fd6 <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
     fd6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
     fda:	10 92 d3 04 	sts	0x04D3, r1
     fde:	10 92 d2 04 	sts	0x04D2, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     fe2:	88 ed       	ldi	r24, 0xD8	; 216
     fe4:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	40 e8       	ldi	r20, 0x80	; 128
     fec:	55 e2       	ldi	r21, 0x25	; 37
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	80 93 da 04 	sts	0x04DA, r24
	uartBufferedTx[0] = FALSE;
     ffc:	10 92 fe 04 	sts	0x04FE, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    1000:	10 92 23 05 	sts	0x0523, r1
    1004:	10 92 22 05 	sts	0x0522, r1
	// enable interrupts
	sei();
    1008:	78 94       	sei
}
    100a:	08 95       	ret

0000100c <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    100c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart0Init>
	uart1Init();
    1010:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart1Init>
	uart2Init();
    1014:	0e 94 93 07 	call	0xf26	; 0xf26 <uart2Init>
	uart3Init();
    1018:	0e 94 67 07 	call	0xece	; 0xece <uart3Init>
}
    101c:	08 95       	ret

0000101e <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    101e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1020:	8f b7       	in	r24, 0x3f	; 63
    1022:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    1024:	71 83       	std	Z+1, r23	; 0x01
    1026:	60 83       	st	Z, r22
	buffer->size = size;
    1028:	53 83       	std	Z+3, r21	; 0x03
    102a:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    102c:	17 82       	std	Z+7, r1	; 0x07
    102e:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    1030:	15 82       	std	Z+5, r1	; 0x05
    1032:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    1034:	8f bf       	out	0x3f, r24	; 63
}
    1036:	08 95       	ret

00001038 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    1038:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    103a:	4f b7       	in	r20, 0x3f	; 63
    103c:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    103e:	14 96       	adiw	r26, 0x04	; 4
    1040:	8d 91       	ld	r24, X+
    1042:	9c 91       	ld	r25, X
    1044:	15 97       	sbiw	r26, 0x05	; 5
    1046:	89 2b       	or	r24, r25
    1048:	11 f4       	brne	.+4      	; 0x104e <bufferGetFromFront+0x16>
    104a:	e0 e0       	ldi	r30, 0x00	; 0
    104c:	25 c0       	rjmp	.+74     	; 0x1098 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    104e:	16 96       	adiw	r26, 0x06	; 6
    1050:	8d 91       	ld	r24, X+
    1052:	9c 91       	ld	r25, X
    1054:	17 97       	sbiw	r26, 0x07	; 7
    1056:	ed 91       	ld	r30, X+
    1058:	fc 91       	ld	r31, X
    105a:	11 97       	sbiw	r26, 0x01	; 1
    105c:	e8 0f       	add	r30, r24
    105e:	f9 1f       	adc	r31, r25
    1060:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	17 96       	adiw	r26, 0x07	; 7
    1066:	9c 93       	st	X, r25
    1068:	8e 93       	st	-X, r24
    106a:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    106c:	12 96       	adiw	r26, 0x02	; 2
    106e:	2d 91       	ld	r18, X+
    1070:	3c 91       	ld	r19, X
    1072:	13 97       	sbiw	r26, 0x03	; 3
    1074:	82 17       	cp	r24, r18
    1076:	93 07       	cpc	r25, r19
    1078:	30 f0       	brcs	.+12     	; 0x1086 <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    107a:	82 1b       	sub	r24, r18
    107c:	93 0b       	sbc	r25, r19
    107e:	17 96       	adiw	r26, 0x07	; 7
    1080:	9c 93       	st	X, r25
    1082:	8e 93       	st	-X, r24
    1084:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    1086:	14 96       	adiw	r26, 0x04	; 4
    1088:	8d 91       	ld	r24, X+
    108a:	9c 91       	ld	r25, X
    108c:	15 97       	sbiw	r26, 0x05	; 5
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	15 96       	adiw	r26, 0x05	; 5
    1092:	9c 93       	st	X, r25
    1094:	8e 93       	st	-X, r24
    1096:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    1098:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    109a:	8e 2f       	mov	r24, r30
    109c:	08 95       	ret

0000109e <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    109e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    10a0:	4f b7       	in	r20, 0x3f	; 63
    10a2:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    10a4:	84 81       	ldd	r24, Z+4	; 0x04
    10a6:	95 81       	ldd	r25, Z+5	; 0x05
    10a8:	68 17       	cp	r22, r24
    10aa:	79 07       	cpc	r23, r25
    10ac:	b0 f4       	brcc	.+44     	; 0x10da <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    10ae:	86 81       	ldd	r24, Z+6	; 0x06
    10b0:	97 81       	ldd	r25, Z+7	; 0x07
    10b2:	86 0f       	add	r24, r22
    10b4:	97 1f       	adc	r25, r23
    10b6:	97 83       	std	Z+7, r25	; 0x07
    10b8:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    10ba:	22 81       	ldd	r18, Z+2	; 0x02
    10bc:	33 81       	ldd	r19, Z+3	; 0x03
    10be:	82 17       	cp	r24, r18
    10c0:	93 07       	cpc	r25, r19
    10c2:	20 f0       	brcs	.+8      	; 0x10cc <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    10c4:	82 1b       	sub	r24, r18
    10c6:	93 0b       	sbc	r25, r19
    10c8:	97 83       	std	Z+7, r25	; 0x07
    10ca:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    10cc:	84 81       	ldd	r24, Z+4	; 0x04
    10ce:	95 81       	ldd	r25, Z+5	; 0x05
    10d0:	86 1b       	sub	r24, r22
    10d2:	97 0b       	sbc	r25, r23
    10d4:	95 83       	std	Z+5, r25	; 0x05
    10d6:	84 83       	std	Z+4, r24	; 0x04
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    10da:	15 82       	std	Z+5, r1	; 0x05
    10dc:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    10de:	4f bf       	out	0x3f, r20	; 63
}
    10e0:	08 95       	ret

000010e2 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    10e2:	fc 01       	movw	r30, r24
    10e4:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    10e6:	2f b7       	in	r18, 0x3f	; 63
    10e8:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    10ea:	2f bf       	out	0x3f, r18	; 63
    10ec:	26 81       	ldd	r18, Z+6	; 0x06
    10ee:	37 81       	ldd	r19, Z+7	; 0x07
    10f0:	62 81       	ldd	r22, Z+2	; 0x02
    10f2:	73 81       	ldd	r23, Z+3	; 0x03
    10f4:	82 0f       	add	r24, r18
    10f6:	93 1f       	adc	r25, r19
    10f8:	0e 94 c2 08 	call	0x1184	; 0x1184 <__udivmodhi4>
    10fc:	01 90       	ld	r0, Z+
    10fe:	f0 81       	ld	r31, Z
    1100:	e0 2d       	mov	r30, r0
    1102:	e8 0f       	add	r30, r24
    1104:	f9 1f       	adc	r31, r25
	return data;
}
    1106:	80 81       	ld	r24, Z
    1108:	08 95       	ret

0000110a <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	ec 01       	movw	r28, r24
    1112:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    1114:	4f b7       	in	r20, 0x3f	; 63
    1116:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	3d 81       	ldd	r19, Y+5	; 0x05
    111c:	6a 81       	ldd	r22, Y+2	; 0x02
    111e:	7b 81       	ldd	r23, Y+3	; 0x03
    1120:	26 17       	cp	r18, r22
    1122:	37 07       	cpc	r19, r23
    1124:	98 f4       	brcc	.+38     	; 0x114c <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    1126:	8e 81       	ldd	r24, Y+6	; 0x06
    1128:	9f 81       	ldd	r25, Y+7	; 0x07
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	0e 94 c2 08 	call	0x1184	; 0x1184 <__udivmodhi4>
    1132:	e8 81       	ld	r30, Y
    1134:	f9 81       	ldd	r31, Y+1	; 0x01
    1136:	e8 0f       	add	r30, r24
    1138:	f9 1f       	adc	r31, r25
    113a:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	9d 83       	std	Y+5, r25	; 0x05
    1144:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    1146:	4f bf       	out	0x3f, r20	; 63
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    114c:	4f bf       	out	0x3f, r20	; 63
    114e:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	08 95       	ret

00001158 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    1158:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    115a:	8f b7       	in	r24, 0x3f	; 63
    115c:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    115e:	8f bf       	out	0x3f, r24	; 63
    1160:	22 81       	ldd	r18, Z+2	; 0x02
    1162:	33 81       	ldd	r19, Z+3	; 0x03
    1164:	84 81       	ldd	r24, Z+4	; 0x04
    1166:	95 81       	ldd	r25, Z+5	; 0x05
    1168:	28 1b       	sub	r18, r24
    116a:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    116c:	c9 01       	movw	r24, r18
    116e:	08 95       	ret

00001170 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    1170:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1172:	8f b7       	in	r24, 0x3f	; 63
    1174:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    1176:	15 82       	std	Z+5, r1	; 0x05
    1178:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    117a:	8f bf       	out	0x3f, r24	; 63
}
    117c:	08 95       	ret

0000117e <exit>:
    117e:	f8 94       	cli
    1180:	0c 94 26 09 	jmp	0x124c	; 0x124c <_exit>

00001184 <__udivmodhi4>:
    1184:	aa 1b       	sub	r26, r26
    1186:	bb 1b       	sub	r27, r27
    1188:	51 e1       	ldi	r21, 0x11	; 17
    118a:	07 c0       	rjmp	.+14     	; 0x119a <__udivmodhi4_ep>

0000118c <__udivmodhi4_loop>:
    118c:	aa 1f       	adc	r26, r26
    118e:	bb 1f       	adc	r27, r27
    1190:	a6 17       	cp	r26, r22
    1192:	b7 07       	cpc	r27, r23
    1194:	10 f0       	brcs	.+4      	; 0x119a <__udivmodhi4_ep>
    1196:	a6 1b       	sub	r26, r22
    1198:	b7 0b       	sbc	r27, r23

0000119a <__udivmodhi4_ep>:
    119a:	88 1f       	adc	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	5a 95       	dec	r21
    11a0:	a9 f7       	brne	.-22     	; 0x118c <__udivmodhi4_loop>
    11a2:	80 95       	com	r24
    11a4:	90 95       	com	r25
    11a6:	bc 01       	movw	r22, r24
    11a8:	cd 01       	movw	r24, r26
    11aa:	08 95       	ret

000011ac <__divmodhi4>:
    11ac:	97 fb       	bst	r25, 7
    11ae:	09 2e       	mov	r0, r25
    11b0:	07 26       	eor	r0, r23
    11b2:	0a d0       	rcall	.+20     	; 0x11c8 <__divmodhi4_neg1>
    11b4:	77 fd       	sbrc	r23, 7
    11b6:	04 d0       	rcall	.+8      	; 0x11c0 <__divmodhi4_neg2>
    11b8:	e5 df       	rcall	.-54     	; 0x1184 <__udivmodhi4>
    11ba:	06 d0       	rcall	.+12     	; 0x11c8 <__divmodhi4_neg1>
    11bc:	00 20       	and	r0, r0
    11be:	1a f4       	brpl	.+6      	; 0x11c6 <__divmodhi4_exit>

000011c0 <__divmodhi4_neg2>:
    11c0:	70 95       	com	r23
    11c2:	61 95       	neg	r22
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255

000011c6 <__divmodhi4_exit>:
    11c6:	08 95       	ret

000011c8 <__divmodhi4_neg1>:
    11c8:	f6 f7       	brtc	.-4      	; 0x11c6 <__divmodhi4_exit>
    11ca:	90 95       	com	r25
    11cc:	81 95       	neg	r24
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	08 95       	ret

000011d2 <__udivmodsi4>:
    11d2:	a1 e2       	ldi	r26, 0x21	; 33
    11d4:	1a 2e       	mov	r1, r26
    11d6:	aa 1b       	sub	r26, r26
    11d8:	bb 1b       	sub	r27, r27
    11da:	fd 01       	movw	r30, r26
    11dc:	0d c0       	rjmp	.+26     	; 0x11f8 <__udivmodsi4_ep>

000011de <__udivmodsi4_loop>:
    11de:	aa 1f       	adc	r26, r26
    11e0:	bb 1f       	adc	r27, r27
    11e2:	ee 1f       	adc	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	a2 17       	cp	r26, r18
    11e8:	b3 07       	cpc	r27, r19
    11ea:	e4 07       	cpc	r30, r20
    11ec:	f5 07       	cpc	r31, r21
    11ee:	20 f0       	brcs	.+8      	; 0x11f8 <__udivmodsi4_ep>
    11f0:	a2 1b       	sub	r26, r18
    11f2:	b3 0b       	sbc	r27, r19
    11f4:	e4 0b       	sbc	r30, r20
    11f6:	f5 0b       	sbc	r31, r21

000011f8 <__udivmodsi4_ep>:
    11f8:	66 1f       	adc	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	1a 94       	dec	r1
    1202:	69 f7       	brne	.-38     	; 0x11de <__udivmodsi4_loop>
    1204:	60 95       	com	r22
    1206:	70 95       	com	r23
    1208:	80 95       	com	r24
    120a:	90 95       	com	r25
    120c:	9b 01       	movw	r18, r22
    120e:	ac 01       	movw	r20, r24
    1210:	bd 01       	movw	r22, r26
    1212:	cf 01       	movw	r24, r30
    1214:	08 95       	ret

00001216 <__divmodsi4>:
    1216:	97 fb       	bst	r25, 7
    1218:	09 2e       	mov	r0, r25
    121a:	05 26       	eor	r0, r21
    121c:	0e d0       	rcall	.+28     	; 0x123a <__divmodsi4_neg1>
    121e:	57 fd       	sbrc	r21, 7
    1220:	04 d0       	rcall	.+8      	; 0x122a <__divmodsi4_neg2>
    1222:	d7 df       	rcall	.-82     	; 0x11d2 <__udivmodsi4>
    1224:	0a d0       	rcall	.+20     	; 0x123a <__divmodsi4_neg1>
    1226:	00 1c       	adc	r0, r0
    1228:	38 f4       	brcc	.+14     	; 0x1238 <__divmodsi4_exit>

0000122a <__divmodsi4_neg2>:
    122a:	50 95       	com	r21
    122c:	40 95       	com	r20
    122e:	30 95       	com	r19
    1230:	21 95       	neg	r18
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	4f 4f       	sbci	r20, 0xFF	; 255
    1236:	5f 4f       	sbci	r21, 0xFF	; 255

00001238 <__divmodsi4_exit>:
    1238:	08 95       	ret

0000123a <__divmodsi4_neg1>:
    123a:	f6 f7       	brtc	.-4      	; 0x1238 <__divmodsi4_exit>
    123c:	90 95       	com	r25
    123e:	80 95       	com	r24
    1240:	70 95       	com	r23
    1242:	61 95       	neg	r22
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	8f 4f       	sbci	r24, 0xFF	; 255
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	08 95       	ret

0000124c <_exit>:
    124c:	f8 94       	cli

0000124e <__stop_program>:
    124e:	ff cf       	rjmp	.-2      	; 0x124e <__stop_program>
