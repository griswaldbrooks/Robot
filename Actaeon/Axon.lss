
Axon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800200  00005444  000054d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ef  00800296  00800296  0000556e  2**0
                  ALLOC
  3 .stab         00005b08  00000000  00000000  00005570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002eaa  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__vector_13>
      38:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__vector_14>
      3c:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__vector_15>
      40:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__vector_16>
      44:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__vector_17>
      48:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__vector_18>
      4c:	0c 94 85 10 	jmp	0x210a	; 0x210a <__vector_19>
      50:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__vector_20>
      54:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__vector_21>
      58:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__vector_22>
      5c:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__vector_23>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_25>
      68:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      6c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__vector_27>
      70:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      74:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_29>
      78:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      7c:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__vector_31>
      80:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__vector_32>
      84:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__vector_33>
      88:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__vector_34>
      8c:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__vector_35>
      90:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_36>
      94:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      98:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__vector_38>
      9c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      a0:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      a4:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__vector_41>
      a8:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__vector_42>
      ac:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__vector_43>
      b0:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__vector_44>
      b4:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__vector_45>
      b8:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__vector_46>
      bc:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__vector_47>
      c0:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__vector_48>
      c4:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__vector_49>
      c8:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__vector_50>
      cc:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__vector_51>
      d0:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      d4:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_53>
      d8:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_54>
      dc:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      e0:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_56>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <uart3Init+0x42>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <TimerPrescaleFactor>:
     166:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000172 <Timer2PrescaleFactor>:
     172:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

00000182 <__c.2089>:
     182:	42 41 44 5f 76 65 63 74 20 63 61 6c 6c 65 64 21     BAD_vect called!
	...

00000193 <HexChars>:
     193:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

000001a4 <__c.3132>:
     1a4:	25 64 20 25 64 20 25 64 20 25 64 20 25 64 20 25     %d %d %d %d %d %
     1b4:	64 20 25 64 20 25 64 20 25 64 20 25 64 20 25 64     d %d %d %d %d %d
     1c4:	20 25 64 20 25 64 20 25 64 20 25 64 20 25 64 20      %d %d %d %d %d 
     1d4:	25 64 20 25 64 0d 0a 00                             %d %d...

000001dc <__c.3157>:
     1dc:	25 64 0d 0a 00                                      %d...

000001e1 <__c.3201>:
     1e1:	4c 5f 53 65 6e 73 6f 72 3d 25 64 2c 20 4c 5f 77     L_Sensor=%d, L_w
     1f1:	68 65 65 6c 3d 25 64 25 64 2c 20 52 5f 53 65 6e     heel=%d%d, R_Sen
     201:	73 6f 72 3d 25 64 2c 20 52 5f 77 68 65 65 6c 3d     sor=%d, R_wheel=
     211:	25 64 25 64 0d 0a 00                                %d%d...

00000218 <__c.3265>:
     218:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 43     Initialization C
     228:	6f 6d 70 6c 65 74 65 20 0d 0a 00                    omplete ...

00000233 <__c.3260>:
     233:	2e 00                                               ..

00000235 <__c.3258>:
     235:	0d 0a 53 79 73 74 65 6d 20 57 61 72 6d 65 64 20     ..System Warmed 
     245:	55 70 00                                            Up.

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d1 e2       	ldi	r29, 0x21	; 33
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	12 e0       	ldi	r17, 0x02	; 2
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b2 e0       	ldi	r27, 0x02	; 2
     25a:	e4 e4       	ldi	r30, 0x44	; 68
     25c:	f4 e5       	ldi	r31, 0x54	; 84
     25e:	02 c0       	rjmp	.+4      	; 0x264 <.do_copy_data_start>

00000260 <.do_copy_data_loop>:
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0

00000264 <.do_copy_data_start>:
     264:	a6 39       	cpi	r26, 0x96	; 150
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <.do_copy_data_loop>

0000026a <__do_clear_bss>:
     26a:	15 e0       	ldi	r17, 0x05	; 5
     26c:	a6 e9       	ldi	r26, 0x96	; 150
     26e:	b2 e0       	ldi	r27, 0x02	; 2
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a5 38       	cpi	r26, 0x85	; 133
     276:	b1 07       	cpc	r27, r17
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 42 25 	call	0x4a84	; 0x4a84 <main>
     27e:	0c 94 20 2a 	jmp	0x5440	; 0x5440 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__vector_default>

00000286 <a2dInit>:

// functions

// initialize a2d converter
void a2dInit(void)
{
     286:	df 93       	push	r29
     288:	cf 93       	push	r28
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
     28e:	aa e7       	ldi	r26, 0x7A	; 122
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	ea e7       	ldi	r30, 0x7A	; 122
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	80 68       	ori	r24, 0x80	; 128
     29a:	8c 93       	st	X, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
     29c:	aa e7       	ldi	r26, 0x7A	; 122
     29e:	b0 e0       	ldi	r27, 0x00	; 0
     2a0:	ea e7       	ldi	r30, 0x7A	; 122
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	8f 7d       	andi	r24, 0xDF	; 223
     2a8:	8c 93       	st	X, r24
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	0e 94 84 01 	call	0x308	; 0x308 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE);	// set default reference
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0e 94 98 01 	call	0x330	; 0x330 <a2dSetReference>
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
     2b6:	ac e7       	ldi	r26, 0x7C	; 124
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	ec e7       	ldi	r30, 0x7C	; 124
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	8f 7d       	andi	r24, 0xDF	; 223
     2c2:	8c 93       	st	X, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
     2c4:	aa e7       	ldi	r26, 0x7A	; 122
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	ea e7       	ldi	r30, 0x7A	; 122
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	88 60       	ori	r24, 0x08	; 8
     2d0:	8c 93       	st	X, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
     2d2:	10 92 18 05 	sts	0x0518, r1
	sei();							// turn on interrupts (if not already on)
     2d6:	78 94       	sei
}
     2d8:	cf 91       	pop	r28
     2da:	df 91       	pop	r29
     2dc:	08 95       	ret

000002de <a2dOff>:

// turn off a2d converter
void a2dOff(void)
{
     2de:	df 93       	push	r29
     2e0:	cf 93       	push	r28
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
	cbi(ADCSR, ADIE);				// disable ADC interrupts
     2e6:	aa e7       	ldi	r26, 0x7A	; 122
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	ea e7       	ldi	r30, 0x7A	; 122
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	87 7f       	andi	r24, 0xF7	; 247
     2f2:	8c 93       	st	X, r24
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
     2f4:	aa e7       	ldi	r26, 0x7A	; 122
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	ea e7       	ldi	r30, 0x7A	; 122
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	8f 77       	andi	r24, 0x7F	; 127
     300:	8c 93       	st	X, r24
}
     302:	cf 91       	pop	r28
     304:	df 91       	pop	r29
     306:	08 95       	ret

00000308 <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
     308:	df 93       	push	r29
     30a:	cf 93       	push	r28
     30c:	0f 92       	push	r0
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	89 83       	std	Y+1, r24	; 0x01
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
     314:	aa e7       	ldi	r26, 0x7A	; 122
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	ea e7       	ldi	r30, 0x7A	; 122
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	98 2f       	mov	r25, r24
     320:	98 7f       	andi	r25, 0xF8	; 248
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	89 2b       	or	r24, r25
     326:	8c 93       	st	X, r24
}
     328:	0f 90       	pop	r0
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	0f 92       	push	r0
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	89 83       	std	Y+1, r24	; 0x01
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
     33c:	ac e7       	ldi	r26, 0x7C	; 124
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	ec e7       	ldi	r30, 0x7C	; 124
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	28 2f       	mov	r18, r24
     348:	2f 73       	andi	r18, 0x3F	; 63
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	88 2f       	mov	r24, r24
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	00 24       	eor	r0, r0
     352:	96 95       	lsr	r25
     354:	87 95       	ror	r24
     356:	07 94       	ror	r0
     358:	96 95       	lsr	r25
     35a:	87 95       	ror	r24
     35c:	07 94       	ror	r0
     35e:	98 2f       	mov	r25, r24
     360:	80 2d       	mov	r24, r0
     362:	82 2b       	or	r24, r18
     364:	8c 93       	st	X, r24
}
     366:	0f 90       	pop	r0
     368:	cf 91       	pop	r28
     36a:	df 91       	pop	r29
     36c:	08 95       	ret

0000036e <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
     36e:	df 93       	push	r29
     370:	cf 93       	push	r28
     372:	0f 92       	push	r0
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	89 83       	std	Y+1, r24	; 0x01
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
     37a:	ac e7       	ldi	r26, 0x7C	; 124
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	ec e7       	ldi	r30, 0x7C	; 124
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	98 2f       	mov	r25, r24
     386:	90 7e       	andi	r25, 0xE0	; 224
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	8f 71       	andi	r24, 0x1F	; 31
     38c:	89 2b       	or	r24, r25
     38e:	8c 93       	st	X, r24
}
     390:	0f 90       	pop	r0
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
     3a0:	aa e7       	ldi	r26, 0x7A	; 122
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	ea e7       	ldi	r30, 0x7A	; 122
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	80 61       	ori	r24, 0x10	; 16
     3ac:	8c 93       	st	X, r24
	sbi(ADCSR, ADSC);	// start conversion
     3ae:	aa e7       	ldi	r26, 0x7A	; 122
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	ea e7       	ldi	r30, 0x7A	; 122
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	80 64       	ori	r24, 0x40	; 64
     3ba:	8c 93       	st	X, r24
}
     3bc:	cf 91       	pop	r28
     3be:	df 91       	pop	r29
     3c0:	08 95       	ret

000003c2 <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
	return bit_is_set(ADCSR, ADSC);
     3ca:	ea e7       	ldi	r30, 0x7A	; 122
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	80 74       	andi	r24, 0x40	; 64
}
     3d2:	cf 91       	pop	r28
     3d4:	df 91       	pop	r29
     3d6:	08 95       	ret

000003d8 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
     3d8:	df 93       	push	r29
     3da:	cf 93       	push	r28
     3dc:	0f 92       	push	r0
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	89 83       	std	Y+1, r24	; 0x01
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
     3e4:	10 92 18 05 	sts	0x0518, r1

if (ch >= 8)
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	88 30       	cpi	r24, 0x08	; 8
     3ec:	40 f0       	brcs	.+16     	; 0x3fe <a2dConvert10bit+0x26>
    ADCSRB |= _BV(MUX5);
     3ee:	ab e7       	ldi	r26, 0x7B	; 123
     3f0:	b0 e0       	ldi	r27, 0x00	; 0
     3f2:	eb e7       	ldi	r30, 0x7B	; 123
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	88 60       	ori	r24, 0x08	; 8
     3fa:	8c 93       	st	X, r24
     3fc:	07 c0       	rjmp	.+14     	; 0x40c <a2dConvert10bit+0x34>
else
    ADCSRB &= ~_BV(MUX5);
     3fe:	ab e7       	ldi	r26, 0x7B	; 123
     400:	b0 e0       	ldi	r27, 0x00	; 0
     402:	eb e7       	ldi	r30, 0x7B	; 123
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	87 7f       	andi	r24, 0xF7	; 247
     40a:	8c 93       	st	X, r24

   outb(ADMUX, (inb(ADMUX) & ~7) | (ch & 7));   // set channel
     40c:	ac e7       	ldi	r26, 0x7C	; 124
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	ec e7       	ldi	r30, 0x7C	; 124
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	98 2f       	mov	r25, r24
     418:	98 7f       	andi	r25, 0xF8	; 248
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	87 70       	andi	r24, 0x07	; 7
     41e:	89 2b       	or	r24, r25
     420:	8c 93       	st	X, r24

	//outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
     422:	aa e7       	ldi	r26, 0x7A	; 122
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	ea e7       	ldi	r30, 0x7A	; 122
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	80 61       	ori	r24, 0x10	; 16
     42e:	8c 93       	st	X, r24
	sbi(ADCSR, ADSC);						// start conversion
     430:	aa e7       	ldi	r26, 0x7A	; 122
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	ea e7       	ldi	r30, 0x7A	; 122
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	80 64       	ori	r24, 0x40	; 64
     43c:	8c 93       	st	X, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
     43e:	ea e7       	ldi	r30, 0x7A	; 122
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	80 74       	andi	r24, 0x40	; 64
     44a:	90 70       	andi	r25, 0x00	; 0
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	b9 f7       	brne	.-18     	; 0x43e <a2dConvert10bit+0x66>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	//return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits) //old version
	return ADC;//new version code
     450:	e8 e7       	ldi	r30, 0x78	; 120
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	91 81       	ldd	r25, Z+1	; 0x01
}
     458:	0f 90       	pop	r0
     45a:	cf 91       	pop	r28
     45c:	df 91       	pop	r29
     45e:	08 95       	ret

00000460 <a2dConvert8bit>:

// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
     460:	df 93       	push	r29
     462:	cf 93       	push	r28
     464:	0f 92       	push	r0
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <a2dConvert10bit>
     472:	96 95       	lsr	r25
     474:	87 95       	ror	r24
     476:	96 95       	lsr	r25
     478:	87 95       	ror	r24
}
     47a:	0f 90       	pop	r0
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	08 95       	ret

00000482 <__vector_29>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	8f 93       	push	r24
     48e:	df 93       	push	r29
     490:	cf 93       	push	r28
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	80 93 18 05 	sts	0x0518, r24
}
     49c:	cf 91       	pop	r28
     49e:	df 91       	pop	r29
     4a0:	8f 91       	pop	r24
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
     4ac:	df 93       	push	r29
     4ae:	cf 93       	push	r28
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	27 97       	sbiw	r28, 0x07	; 7
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	9b 83       	std	Y+3, r25	; 0x03
     4c2:	8a 83       	std	Y+2, r24	; 0x02
     4c4:	7d 83       	std	Y+5, r23	; 0x05
     4c6:	6c 83       	std	Y+4, r22	; 0x04
     4c8:	5f 83       	std	Y+7, r21	; 0x07
     4ca:	4e 83       	std	Y+6, r20	; 0x06
	// begin critical section
	CRITICAL_SECTION_START;
     4cc:	ef e5       	ldi	r30, 0x5F	; 95
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
     4d6:	ea 81       	ldd	r30, Y+2	; 0x02
     4d8:	fb 81       	ldd	r31, Y+3	; 0x03
     4da:	8c 81       	ldd	r24, Y+4	; 0x04
     4dc:	9d 81       	ldd	r25, Y+5	; 0x05
     4de:	91 83       	std	Z+1, r25	; 0x01
     4e0:	80 83       	st	Z, r24
	buffer->size = size;
     4e2:	ea 81       	ldd	r30, Y+2	; 0x02
     4e4:	fb 81       	ldd	r31, Y+3	; 0x03
     4e6:	8e 81       	ldd	r24, Y+6	; 0x06
     4e8:	9f 81       	ldd	r25, Y+7	; 0x07
     4ea:	93 83       	std	Z+3, r25	; 0x03
     4ec:	82 83       	std	Z+2, r24	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
     4ee:	ea 81       	ldd	r30, Y+2	; 0x02
     4f0:	fb 81       	ldd	r31, Y+3	; 0x03
     4f2:	17 82       	std	Z+7, r1	; 0x07
     4f4:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
     4f6:	ea 81       	ldd	r30, Y+2	; 0x02
     4f8:	fb 81       	ldd	r31, Y+3	; 0x03
     4fa:	15 82       	std	Z+5, r1	; 0x05
     4fc:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     4fe:	ef e5       	ldi	r30, 0x5F	; 95
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	80 83       	st	Z, r24
}
     506:	27 96       	adiw	r28, 0x07	; 7
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	00 d0       	rcall	.+0      	; 0x51e <bufferGetFromFront+0x6>
     51e:	00 d0       	rcall	.+0      	; 0x520 <bufferGetFromFront+0x8>
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	9c 83       	std	Y+4, r25	; 0x04
     526:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char data = 0;
     528:	1a 82       	std	Y+2, r1	; 0x02
	// begin critical section
	CRITICAL_SECTION_START;
     52a:	ef e5       	ldi	r30, 0x5F	; 95
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     534:	eb 81       	ldd	r30, Y+3	; 0x03
     536:	fc 81       	ldd	r31, Y+4	; 0x04
     538:	84 81       	ldd	r24, Z+4	; 0x04
     53a:	95 81       	ldd	r25, Z+5	; 0x05
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	d1 f1       	breq	.+116    	; 0x5b4 <bufferGetFromFront+0x9c>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     540:	eb 81       	ldd	r30, Y+3	; 0x03
     542:	fc 81       	ldd	r31, Y+4	; 0x04
     544:	20 81       	ld	r18, Z
     546:	31 81       	ldd	r19, Z+1	; 0x01
     548:	eb 81       	ldd	r30, Y+3	; 0x03
     54a:	fc 81       	ldd	r31, Y+4	; 0x04
     54c:	86 81       	ldd	r24, Z+6	; 0x06
     54e:	97 81       	ldd	r25, Z+7	; 0x07
     550:	f9 01       	movw	r30, r18
     552:	e8 0f       	add	r30, r24
     554:	f9 1f       	adc	r31, r25
     556:	80 81       	ld	r24, Z
     558:	8a 83       	std	Y+2, r24	; 0x02
		// move index down and decrement length
		buffer->dataindex++;
     55a:	eb 81       	ldd	r30, Y+3	; 0x03
     55c:	fc 81       	ldd	r31, Y+4	; 0x04
     55e:	86 81       	ldd	r24, Z+6	; 0x06
     560:	97 81       	ldd	r25, Z+7	; 0x07
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	eb 81       	ldd	r30, Y+3	; 0x03
     566:	fc 81       	ldd	r31, Y+4	; 0x04
     568:	97 83       	std	Z+7, r25	; 0x07
     56a:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
     56c:	eb 81       	ldd	r30, Y+3	; 0x03
     56e:	fc 81       	ldd	r31, Y+4	; 0x04
     570:	26 81       	ldd	r18, Z+6	; 0x06
     572:	37 81       	ldd	r19, Z+7	; 0x07
     574:	eb 81       	ldd	r30, Y+3	; 0x03
     576:	fc 81       	ldd	r31, Y+4	; 0x04
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	28 17       	cp	r18, r24
     57e:	39 07       	cpc	r19, r25
     580:	80 f0       	brcs	.+32     	; 0x5a2 <bufferGetFromFront+0x8a>
		{
			buffer->dataindex -= buffer->size;
     582:	eb 81       	ldd	r30, Y+3	; 0x03
     584:	fc 81       	ldd	r31, Y+4	; 0x04
     586:	26 81       	ldd	r18, Z+6	; 0x06
     588:	37 81       	ldd	r19, Z+7	; 0x07
     58a:	eb 81       	ldd	r30, Y+3	; 0x03
     58c:	fc 81       	ldd	r31, Y+4	; 0x04
     58e:	82 81       	ldd	r24, Z+2	; 0x02
     590:	93 81       	ldd	r25, Z+3	; 0x03
     592:	a9 01       	movw	r20, r18
     594:	48 1b       	sub	r20, r24
     596:	59 0b       	sbc	r21, r25
     598:	ca 01       	movw	r24, r20
     59a:	eb 81       	ldd	r30, Y+3	; 0x03
     59c:	fc 81       	ldd	r31, Y+4	; 0x04
     59e:	97 83       	std	Z+7, r25	; 0x07
     5a0:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength--;
     5a2:	eb 81       	ldd	r30, Y+3	; 0x03
     5a4:	fc 81       	ldd	r31, Y+4	; 0x04
     5a6:	84 81       	ldd	r24, Z+4	; 0x04
     5a8:	95 81       	ldd	r25, Z+5	; 0x05
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	eb 81       	ldd	r30, Y+3	; 0x03
     5ae:	fc 81       	ldd	r31, Y+4	; 0x04
     5b0:	95 83       	std	Z+5, r25	; 0x05
     5b2:	84 83       	std	Z+4, r24	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     5b4:	ef e5       	ldi	r30, 0x5F	; 95
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	80 83       	st	Z, r24
	// return
	return data;
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	cf 91       	pop	r28
     5c8:	df 91       	pop	r29
     5ca:	08 95       	ret

000005cc <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
     5cc:	df 93       	push	r29
     5ce:	cf 93       	push	r28
     5d0:	00 d0       	rcall	.+0      	; 0x5d2 <bufferDumpFromFront+0x6>
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <bufferDumpFromFront+0x8>
     5d4:	0f 92       	push	r0
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	9b 83       	std	Y+3, r25	; 0x03
     5dc:	8a 83       	std	Y+2, r24	; 0x02
     5de:	7d 83       	std	Y+5, r23	; 0x05
     5e0:	6c 83       	std	Y+4, r22	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     5e2:	ef e5       	ldi	r30, 0x5F	; 95
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
     5ec:	ea 81       	ldd	r30, Y+2	; 0x02
     5ee:	fb 81       	ldd	r31, Y+3	; 0x03
     5f0:	24 81       	ldd	r18, Z+4	; 0x04
     5f2:	35 81       	ldd	r19, Z+5	; 0x05
     5f4:	8c 81       	ldd	r24, Y+4	; 0x04
     5f6:	9d 81       	ldd	r25, Y+5	; 0x05
     5f8:	82 17       	cp	r24, r18
     5fa:	93 07       	cpc	r25, r19
     5fc:	b0 f5       	brcc	.+108    	; 0x66a <bufferDumpFromFront+0x9e>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
     5fe:	ea 81       	ldd	r30, Y+2	; 0x02
     600:	fb 81       	ldd	r31, Y+3	; 0x03
     602:	26 81       	ldd	r18, Z+6	; 0x06
     604:	37 81       	ldd	r19, Z+7	; 0x07
     606:	8c 81       	ldd	r24, Y+4	; 0x04
     608:	9d 81       	ldd	r25, Y+5	; 0x05
     60a:	82 0f       	add	r24, r18
     60c:	93 1f       	adc	r25, r19
     60e:	ea 81       	ldd	r30, Y+2	; 0x02
     610:	fb 81       	ldd	r31, Y+3	; 0x03
     612:	97 83       	std	Z+7, r25	; 0x07
     614:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
     616:	ea 81       	ldd	r30, Y+2	; 0x02
     618:	fb 81       	ldd	r31, Y+3	; 0x03
     61a:	26 81       	ldd	r18, Z+6	; 0x06
     61c:	37 81       	ldd	r19, Z+7	; 0x07
     61e:	ea 81       	ldd	r30, Y+2	; 0x02
     620:	fb 81       	ldd	r31, Y+3	; 0x03
     622:	82 81       	ldd	r24, Z+2	; 0x02
     624:	93 81       	ldd	r25, Z+3	; 0x03
     626:	28 17       	cp	r18, r24
     628:	39 07       	cpc	r19, r25
     62a:	80 f0       	brcs	.+32     	; 0x64c <bufferDumpFromFront+0x80>
		{
			buffer->dataindex -= buffer->size;
     62c:	ea 81       	ldd	r30, Y+2	; 0x02
     62e:	fb 81       	ldd	r31, Y+3	; 0x03
     630:	26 81       	ldd	r18, Z+6	; 0x06
     632:	37 81       	ldd	r19, Z+7	; 0x07
     634:	ea 81       	ldd	r30, Y+2	; 0x02
     636:	fb 81       	ldd	r31, Y+3	; 0x03
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	a9 01       	movw	r20, r18
     63e:	48 1b       	sub	r20, r24
     640:	59 0b       	sbc	r21, r25
     642:	ca 01       	movw	r24, r20
     644:	ea 81       	ldd	r30, Y+2	; 0x02
     646:	fb 81       	ldd	r31, Y+3	; 0x03
     648:	97 83       	std	Z+7, r25	; 0x07
     64a:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
     64c:	ea 81       	ldd	r30, Y+2	; 0x02
     64e:	fb 81       	ldd	r31, Y+3	; 0x03
     650:	24 81       	ldd	r18, Z+4	; 0x04
     652:	35 81       	ldd	r19, Z+5	; 0x05
     654:	8c 81       	ldd	r24, Y+4	; 0x04
     656:	9d 81       	ldd	r25, Y+5	; 0x05
     658:	a9 01       	movw	r20, r18
     65a:	48 1b       	sub	r20, r24
     65c:	59 0b       	sbc	r21, r25
     65e:	ca 01       	movw	r24, r20
     660:	ea 81       	ldd	r30, Y+2	; 0x02
     662:	fb 81       	ldd	r31, Y+3	; 0x03
     664:	95 83       	std	Z+5, r25	; 0x05
     666:	84 83       	std	Z+4, r24	; 0x04
     668:	04 c0       	rjmp	.+8      	; 0x672 <bufferDumpFromFront+0xa6>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
     66a:	ea 81       	ldd	r30, Y+2	; 0x02
     66c:	fb 81       	ldd	r31, Y+3	; 0x03
     66e:	15 82       	std	Z+5, r1	; 0x05
     670:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     672:	ef e5       	ldi	r30, 0x5F	; 95
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	80 83       	st	Z, r24
}
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	cf 91       	pop	r28
     686:	df 91       	pop	r29
     688:	08 95       	ret

0000068a <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	00 d0       	rcall	.+0      	; 0x694 <bufferGetAtIndex+0xa>
     694:	00 d0       	rcall	.+0      	; 0x696 <bufferGetAtIndex+0xc>
     696:	00 d0       	rcall	.+0      	; 0x698 <bufferGetAtIndex+0xe>
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	9c 83       	std	Y+4, r25	; 0x04
     69e:	8b 83       	std	Y+3, r24	; 0x03
     6a0:	7e 83       	std	Y+6, r23	; 0x06
     6a2:	6d 83       	std	Y+5, r22	; 0x05
	// begin critical section
	CRITICAL_SECTION_START;
     6a4:	ef e5       	ldi	r30, 0x5F	; 95
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	8a 83       	std	Y+2, r24	; 0x02
     6ac:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
     6ae:	eb 81       	ldd	r30, Y+3	; 0x03
     6b0:	fc 81       	ldd	r31, Y+4	; 0x04
     6b2:	00 81       	ld	r16, Z
     6b4:	11 81       	ldd	r17, Z+1	; 0x01
     6b6:	eb 81       	ldd	r30, Y+3	; 0x03
     6b8:	fc 81       	ldd	r31, Y+4	; 0x04
     6ba:	26 81       	ldd	r18, Z+6	; 0x06
     6bc:	37 81       	ldd	r19, Z+7	; 0x07
     6be:	8d 81       	ldd	r24, Y+5	; 0x05
     6c0:	9e 81       	ldd	r25, Y+6	; 0x06
     6c2:	82 0f       	add	r24, r18
     6c4:	93 1f       	adc	r25, r19
     6c6:	eb 81       	ldd	r30, Y+3	; 0x03
     6c8:	fc 81       	ldd	r31, Y+4	; 0x04
     6ca:	22 81       	ldd	r18, Z+2	; 0x02
     6cc:	33 81       	ldd	r19, Z+3	; 0x03
     6ce:	b9 01       	movw	r22, r18
     6d0:	0e 94 bc 29 	call	0x5378	; 0x5378 <__udivmodhi4>
     6d4:	f8 01       	movw	r30, r16
     6d6:	e8 0f       	add	r30, r24
     6d8:	f9 1f       	adc	r31, r25
     6da:	80 81       	ld	r24, Z
     6dc:	89 83       	std	Y+1, r24	; 0x01
	// end critical section
	CRITICAL_SECTION_END;
     6de:	ef e5       	ldi	r30, 0x5F	; 95
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	80 83       	st	Z, r24
	return data;
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
}
     6e8:	26 96       	adiw	r28, 0x06	; 6
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	cf 91       	pop	r28
     6f6:	df 91       	pop	r29
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	df 93       	push	r29
     704:	cf 93       	push	r28
     706:	00 d0       	rcall	.+0      	; 0x708 <bufferAddToEnd+0xa>
     708:	00 d0       	rcall	.+0      	; 0x70a <bufferAddToEnd+0xc>
     70a:	0f 92       	push	r0
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	9b 83       	std	Y+3, r25	; 0x03
     712:	8a 83       	std	Y+2, r24	; 0x02
     714:	6c 83       	std	Y+4, r22	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     716:	ef e5       	ldi	r30, 0x5F	; 95
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	89 83       	std	Y+1, r24	; 0x01
     71e:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     720:	ea 81       	ldd	r30, Y+2	; 0x02
     722:	fb 81       	ldd	r31, Y+3	; 0x03
     724:	24 81       	ldd	r18, Z+4	; 0x04
     726:	35 81       	ldd	r19, Z+5	; 0x05
     728:	ea 81       	ldd	r30, Y+2	; 0x02
     72a:	fb 81       	ldd	r31, Y+3	; 0x03
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	93 81       	ldd	r25, Z+3	; 0x03
     730:	28 17       	cp	r18, r24
     732:	39 07       	cpc	r19, r25
     734:	50 f5       	brcc	.+84     	; 0x78a <bufferAddToEnd+0x8c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     736:	ea 81       	ldd	r30, Y+2	; 0x02
     738:	fb 81       	ldd	r31, Y+3	; 0x03
     73a:	00 81       	ld	r16, Z
     73c:	11 81       	ldd	r17, Z+1	; 0x01
     73e:	ea 81       	ldd	r30, Y+2	; 0x02
     740:	fb 81       	ldd	r31, Y+3	; 0x03
     742:	26 81       	ldd	r18, Z+6	; 0x06
     744:	37 81       	ldd	r19, Z+7	; 0x07
     746:	ea 81       	ldd	r30, Y+2	; 0x02
     748:	fb 81       	ldd	r31, Y+3	; 0x03
     74a:	84 81       	ldd	r24, Z+4	; 0x04
     74c:	95 81       	ldd	r25, Z+5	; 0x05
     74e:	82 0f       	add	r24, r18
     750:	93 1f       	adc	r25, r19
     752:	ea 81       	ldd	r30, Y+2	; 0x02
     754:	fb 81       	ldd	r31, Y+3	; 0x03
     756:	22 81       	ldd	r18, Z+2	; 0x02
     758:	33 81       	ldd	r19, Z+3	; 0x03
     75a:	b9 01       	movw	r22, r18
     75c:	0e 94 bc 29 	call	0x5378	; 0x5378 <__udivmodhi4>
     760:	f8 01       	movw	r30, r16
     762:	e8 0f       	add	r30, r24
     764:	f9 1f       	adc	r31, r25
     766:	8c 81       	ldd	r24, Y+4	; 0x04
     768:	80 83       	st	Z, r24
		// increment the length
		buffer->datalength++;
     76a:	ea 81       	ldd	r30, Y+2	; 0x02
     76c:	fb 81       	ldd	r31, Y+3	; 0x03
     76e:	84 81       	ldd	r24, Z+4	; 0x04
     770:	95 81       	ldd	r25, Z+5	; 0x05
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	ea 81       	ldd	r30, Y+2	; 0x02
     776:	fb 81       	ldd	r31, Y+3	; 0x03
     778:	95 83       	std	Z+5, r25	; 0x05
     77a:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     77c:	ef e5       	ldi	r30, 0x5F	; 95
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	80 83       	st	Z, r24
		// return success
		return -1;
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	8d 83       	std	Y+5, r24	; 0x05
     788:	05 c0       	rjmp	.+10     	; 0x794 <bufferAddToEnd+0x96>
	}
	// end critical section
	CRITICAL_SECTION_END;
     78a:	ef e5       	ldi	r30, 0x5F	; 95
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	80 83       	st	Z, r24
	// return failure
	return 0;
     792:	1d 82       	std	Y+5, r1	; 0x05
     794:	8d 81       	ldd	r24, Y+5	; 0x05
}
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	cf 91       	pop	r28
     7a2:	df 91       	pop	r29
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     7aa:	df 93       	push	r29
     7ac:	cf 93       	push	r28
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <bufferIsNotFull+0x6>
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <bufferIsNotFull+0x8>
     7b2:	0f 92       	push	r0
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	9d 83       	std	Y+5, r25	; 0x05
     7ba:	8c 83       	std	Y+4, r24	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     7bc:	ef e5       	ldi	r30, 0x5F	; 95
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     7c6:	ec 81       	ldd	r30, Y+4	; 0x04
     7c8:	fd 81       	ldd	r31, Y+5	; 0x05
     7ca:	22 81       	ldd	r18, Z+2	; 0x02
     7cc:	33 81       	ldd	r19, Z+3	; 0x03
     7ce:	ec 81       	ldd	r30, Y+4	; 0x04
     7d0:	fd 81       	ldd	r31, Y+5	; 0x05
     7d2:	84 81       	ldd	r24, Z+4	; 0x04
     7d4:	95 81       	ldd	r25, Z+5	; 0x05
     7d6:	a9 01       	movw	r20, r18
     7d8:	48 1b       	sub	r20, r24
     7da:	59 0b       	sbc	r21, r25
     7dc:	ca 01       	movw	r24, r20
     7de:	9a 83       	std	Y+2, r25	; 0x02
     7e0:	89 83       	std	Y+1, r24	; 0x01
	// end critical section
	CRITICAL_SECTION_END;
     7e2:	ef e5       	ldi	r30, 0x5F	; 95
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	80 83       	st	Z, r24
	return bytesleft;
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
}
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	cf 91       	pop	r28
     7fa:	df 91       	pop	r29
     7fc:	08 95       	ret

000007fe <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	00 d0       	rcall	.+0      	; 0x804 <bufferFlush+0x6>
     804:	0f 92       	push	r0
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	9b 83       	std	Y+3, r25	; 0x03
     80c:	8a 83       	std	Y+2, r24	; 0x02
	// begin critical section
	CRITICAL_SECTION_START;
     80e:	ef e5       	ldi	r30, 0x5F	; 95
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	80 81       	ld	r24, Z
     814:	89 83       	std	Y+1, r24	; 0x01
     816:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
     818:	ea 81       	ldd	r30, Y+2	; 0x02
     81a:	fb 81       	ldd	r31, Y+3	; 0x03
     81c:	15 82       	std	Z+5, r1	; 0x05
     81e:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     820:	ef e5       	ldi	r30, 0x5F	; 95
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	80 83       	st	Z, r24
}
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	cf 91       	pop	r28
     830:	df 91       	pop	r29
     832:	08 95       	ret

00000834 <uartInit>:

typedef void (*voidFuncPtru08)(unsigned char);
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
     834:	df 93       	push	r29
     836:	cf 93       	push	r28
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
	// initialize all uarts
	uart0Init();
     83c:	0e 94 29 04 	call	0x852	; 0x852 <uart0Init>
	uart1Init();
     840:	0e 94 4b 04 	call	0x896	; 0x896 <uart1Init>
	uart2Init();
     844:	0e 94 6d 04 	call	0x8da	; 0x8da <uart2Init>
	uart3Init();
     848:	0e 94 8f 04 	call	0x91e	; 0x91e <uart3Init>
}
     84c:	cf 91       	pop	r28
     84e:	df 91       	pop	r29
     850:	08 95       	ret

00000852 <uart0Init>:

void uart0Init(void)
{
     852:	df 93       	push	r29
     854:	cf 93       	push	r28
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
	// initialize the buffers
	uart0InitBuffers();
     85a:	0e 94 b1 04 	call	0x962	; 0x962 <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
     85e:	10 92 d7 04 	sts	0x04D7, r1
     862:	10 92 d6 04 	sts	0x04D6, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     866:	e1 ec       	ldi	r30, 0xC1	; 193
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	88 ed       	ldi	r24, 0xD8	; 216
     86c:	80 83       	st	Z, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	40 e8       	ldi	r20, 0x80	; 128
     872:	55 e2       	ldi	r21, 0x25	; 37
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	0e 94 33 05 	call	0xa66	; 0xa66 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	80 93 19 05 	sts	0x0519, r24
	uartBufferedTx[0] = FALSE;
     882:	10 92 3d 05 	sts	0x053D, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
     886:	10 92 62 05 	sts	0x0562, r1
     88a:	10 92 61 05 	sts	0x0561, r1
	// enable interrupts
	sei();
     88e:	78 94       	sei
}
     890:	cf 91       	pop	r28
     892:	df 91       	pop	r29
     894:	08 95       	ret

00000896 <uart1Init>:

void uart1Init(void)
{
     896:	df 93       	push	r29
     898:	cf 93       	push	r28
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
	// initialize the buffers
	uart1InitBuffers();
     89e:	0e 94 ca 04 	call	0x994	; 0x994 <uart1InitBuffers>
	// initialize user receive handlers
	UartRxFunc[1] = 0;
     8a2:	10 92 d9 04 	sts	0x04D9, r1
     8a6:	10 92 d8 04 	sts	0x04D8, r1
	// enable RxD/TxD and interrupts
	outb(UCSR1B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     8aa:	e9 ec       	ldi	r30, 0xC9	; 201
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	88 ed       	ldi	r24, 0xD8	; 216
     8b0:	80 83       	st	Z, r24
	// set default baud rate
	uartSetBaudRate(1, UART1_DEFAULT_BAUD_RATE);
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	40 e8       	ldi	r20, 0x80	; 128
     8b6:	55 e2       	ldi	r21, 0x25	; 37
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	0e 94 33 05 	call	0xa66	; 0xa66 <uartSetBaudRate>
	// initialize states
	uartReadyTx[1] = TRUE;
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	80 93 1a 05 	sts	0x051A, r24
	uartBufferedTx[1] = FALSE;
     8c6:	10 92 3e 05 	sts	0x053E, r1
	// clear overflow count
	uartRxOverflow[1] = 0;
     8ca:	10 92 64 05 	sts	0x0564, r1
     8ce:	10 92 63 05 	sts	0x0563, r1
	// enable interrupts
	sei();
     8d2:	78 94       	sei
}
     8d4:	cf 91       	pop	r28
     8d6:	df 91       	pop	r29
     8d8:	08 95       	ret

000008da <uart2Init>:

void uart2Init(void)
{
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
	// initialize the buffers
	uart2InitBuffers();
     8e2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <uart2InitBuffers>
	// initialize user receive handlers
	UartRxFunc[2] = 0;
     8e6:	10 92 db 04 	sts	0x04DB, r1
     8ea:	10 92 da 04 	sts	0x04DA, r1
	// enable RxD/TxD and interrupts
	outb(UCSR2B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     8ee:	e1 ed       	ldi	r30, 0xD1	; 209
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	88 ed       	ldi	r24, 0xD8	; 216
     8f4:	80 83       	st	Z, r24
	// set default baud rate
	uartSetBaudRate(2, UART2_DEFAULT_BAUD_RATE);
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	40 e8       	ldi	r20, 0x80	; 128
     8fa:	55 e2       	ldi	r21, 0x25	; 37
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	0e 94 33 05 	call	0xa66	; 0xa66 <uartSetBaudRate>
	// initialize states
	uartReadyTx[2] = TRUE;
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	80 93 1b 05 	sts	0x051B, r24
	uartBufferedTx[2] = FALSE;
     90a:	10 92 3f 05 	sts	0x053F, r1
	// clear overflow count
	uartRxOverflow[2] = 0;
     90e:	10 92 66 05 	sts	0x0566, r1
     912:	10 92 65 05 	sts	0x0565, r1
	// enable interrupts
	sei();
     916:	78 94       	sei
}
     918:	cf 91       	pop	r28
     91a:	df 91       	pop	r29
     91c:	08 95       	ret

0000091e <uart3Init>:

void uart3Init(void)
{
     91e:	df 93       	push	r29
     920:	cf 93       	push	r28
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
	// initialize the buffers
	uart3InitBuffers();
     926:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <uart3InitBuffers>
	// initialize user receive handlers
	UartRxFunc[3] = 0;
     92a:	10 92 dd 04 	sts	0x04DD, r1
     92e:	10 92 dc 04 	sts	0x04DC, r1
	// enable RxD/TxD and interrupts
	outb(UCSR3B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     932:	e1 e3       	ldi	r30, 0x31	; 49
     934:	f1 e0       	ldi	r31, 0x01	; 1
     936:	88 ed       	ldi	r24, 0xD8	; 216
     938:	80 83       	st	Z, r24
	// set default baud rate
	uartSetBaudRate(3, UART3_DEFAULT_BAUD_RATE);
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	40 e8       	ldi	r20, 0x80	; 128
     93e:	55 e2       	ldi	r21, 0x25	; 37
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	0e 94 33 05 	call	0xa66	; 0xa66 <uartSetBaudRate>
	// initialize states
	uartReadyTx[3] = TRUE;
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	80 93 1c 05 	sts	0x051C, r24
	uartBufferedTx[3] = FALSE;
     94e:	10 92 40 05 	sts	0x0540, r1
	// clear overflow count
	uartRxOverflow[3] = 0;
     952:	10 92 68 05 	sts	0x0568, r1
     956:	10 92 67 05 	sts	0x0567, r1
	// enable interrupts
	sei();
     95a:	78 94       	sei
}
     95c:	cf 91       	pop	r28
     95e:	df 91       	pop	r29
     960:	08 95       	ret

00000962 <uart0InitBuffers>:

void uart0InitBuffers(void)
{
     962:	df 93       	push	r29
     964:	cf 93       	push	r28
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
     96a:	8d e1       	ldi	r24, 0x1D	; 29
     96c:	95 e0       	ldi	r25, 0x05	; 5
     96e:	26 e9       	ldi	r18, 0x96	; 150
     970:	32 e0       	ldi	r19, 0x02	; 2
     972:	b9 01       	movw	r22, r18
     974:	40 e8       	ldi	r20, 0x80	; 128
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	0e 94 56 02 	call	0x4ac	; 0x4ac <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
     97c:	81 e4       	ldi	r24, 0x41	; 65
     97e:	95 e0       	ldi	r25, 0x05	; 5
     980:	26 e1       	ldi	r18, 0x16	; 22
     982:	33 e0       	ldi	r19, 0x03	; 3
     984:	b9 01       	movw	r22, r18
     986:	40 e1       	ldi	r20, 0x10	; 16
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	0e 94 56 02 	call	0x4ac	; 0x4ac <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
     98e:	cf 91       	pop	r28
     990:	df 91       	pop	r29
     992:	08 95       	ret

00000994 <uart1InitBuffers>:

void uart1InitBuffers(void)
{
     994:	df 93       	push	r29
     996:	cf 93       	push	r28
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) uart1RxData, UART1_RX_BUFFER_SIZE);
     99c:	85 e2       	ldi	r24, 0x25	; 37
     99e:	95 e0       	ldi	r25, 0x05	; 5
     9a0:	26 e2       	ldi	r18, 0x26	; 38
     9a2:	33 e0       	ldi	r19, 0x03	; 3
     9a4:	b9 01       	movw	r22, r18
     9a6:	40 e8       	ldi	r20, 0x80	; 128
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	0e 94 56 02 	call	0x4ac	; 0x4ac <bufferInit>
		bufferInit(&uartTxBuffer[1], (u08*) uart1TxData, UART1_TX_BUFFER_SIZE);
     9ae:	89 e4       	ldi	r24, 0x49	; 73
     9b0:	95 e0       	ldi	r25, 0x05	; 5
     9b2:	26 ea       	ldi	r18, 0xA6	; 166
     9b4:	33 e0       	ldi	r19, 0x03	; 3
     9b6:	b9 01       	movw	r22, r18
     9b8:	40 e1       	ldi	r20, 0x10	; 16
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	0e 94 56 02 	call	0x4ac	; 0x4ac <bufferInit>
	#else
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) UART1_RX_BUFFER_ADDR, UART1_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[1], (u08*) UART1_TX_BUFFER_ADDR, UART1_TX_BUFFER_SIZE);
	#endif
}
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	08 95       	ret

000009c6 <uart2InitBuffers>:

void uart2InitBuffers(void)
{
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) uart2RxData, UART2_RX_BUFFER_SIZE);
     9ce:	8d e2       	ldi	r24, 0x2D	; 45
     9d0:	95 e0       	ldi	r25, 0x05	; 5
     9d2:	26 eb       	ldi	r18, 0xB6	; 182
     9d4:	33 e0       	ldi	r19, 0x03	; 3
     9d6:	b9 01       	movw	r22, r18
     9d8:	40 e8       	ldi	r20, 0x80	; 128
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	0e 94 56 02 	call	0x4ac	; 0x4ac <bufferInit>
		bufferInit(&uartTxBuffer[2], (u08*) uart2TxData, UART2_TX_BUFFER_SIZE);
     9e0:	81 e5       	ldi	r24, 0x51	; 81
     9e2:	95 e0       	ldi	r25, 0x05	; 5
     9e4:	26 e3       	ldi	r18, 0x36	; 54
     9e6:	34 e0       	ldi	r19, 0x04	; 4
     9e8:	b9 01       	movw	r22, r18
     9ea:	40 e1       	ldi	r20, 0x10	; 16
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	0e 94 56 02 	call	0x4ac	; 0x4ac <bufferInit>
	#else
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) UART2_RX_BUFFER_ADDR, UART2_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[2], (u08*) UART2_TX_BUFFER_ADDR, UART2_TX_BUFFER_SIZE);
	#endif
}
     9f2:	cf 91       	pop	r28
     9f4:	df 91       	pop	r29
     9f6:	08 95       	ret

000009f8 <uart3InitBuffers>:

void uart3InitBuffers(void)
{
     9f8:	df 93       	push	r29
     9fa:	cf 93       	push	r28
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) uart3RxData, UART3_RX_BUFFER_SIZE);
     a00:	85 e3       	ldi	r24, 0x35	; 53
     a02:	95 e0       	ldi	r25, 0x05	; 5
     a04:	26 e4       	ldi	r18, 0x46	; 70
     a06:	34 e0       	ldi	r19, 0x04	; 4
     a08:	b9 01       	movw	r22, r18
     a0a:	40 e8       	ldi	r20, 0x80	; 128
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	0e 94 56 02 	call	0x4ac	; 0x4ac <bufferInit>
		bufferInit(&uartTxBuffer[3], (u08*) uart3TxData, UART3_TX_BUFFER_SIZE);
     a12:	89 e5       	ldi	r24, 0x59	; 89
     a14:	95 e0       	ldi	r25, 0x05	; 5
     a16:	26 ec       	ldi	r18, 0xC6	; 198
     a18:	34 e0       	ldi	r19, 0x04	; 4
     a1a:	b9 01       	movw	r22, r18
     a1c:	40 e1       	ldi	r20, 0x10	; 16
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	0e 94 56 02 	call	0x4ac	; 0x4ac <bufferInit>
	#else
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) UART3_RX_BUFFER_ADDR, UART3_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[3], (u08*) UART3_TX_BUFFER_ADDR, UART3_TX_BUFFER_SIZE);
	#endif
}
     a24:	cf 91       	pop	r28
     a26:	df 91       	pop	r29
     a28:	08 95       	ret

00000a2a <uartSetRxHandler>:

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
     a2a:	df 93       	push	r29
     a2c:	cf 93       	push	r28
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <uartSetRxHandler+0x6>
     a30:	0f 92       	push	r0
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	7b 83       	std	Y+3, r23	; 0x03
     a3a:	6a 83       	std	Y+2, r22	; 0x02
	// make sure the uart number is within bounds
	if(nUart < 4)
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	84 30       	cpi	r24, 0x04	; 4
     a40:	60 f4       	brcc	.+24     	; 0xa5a <uartSetRxHandler+0x30>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	88 2f       	mov	r24, r24
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	fc 01       	movw	r30, r24
     a4e:	ea 52       	subi	r30, 0x2A	; 42
     a50:	fb 4f       	sbci	r31, 0xFB	; 251
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	9b 81       	ldd	r25, Y+3	; 0x03
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	80 83       	st	Z, r24
	}
}
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	cf 91       	pop	r28
     a62:	df 91       	pop	r29
     a64:	08 95       	ret

00000a66 <uartSetBaudRate>:

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	df 93       	push	r29
     a70:	cf 93       	push	r28
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	27 97       	sbiw	r28, 0x07	; 7
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	8b 83       	std	Y+3, r24	; 0x03
     a84:	4c 83       	std	Y+4, r20	; 0x04
     a86:	5d 83       	std	Y+5, r21	; 0x05
     a88:	6e 83       	std	Y+6, r22	; 0x06
     a8a:	7f 83       	std	Y+7, r23	; 0x07
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     a8c:	8c 81       	ldd	r24, Y+4	; 0x04
     a8e:	9d 81       	ldd	r25, Y+5	; 0x05
     a90:	ae 81       	ldd	r26, Y+6	; 0x06
     a92:	bf 81       	ldd	r27, Y+7	; 0x07
     a94:	80 58       	subi	r24, 0x80	; 128
     a96:	9b 47       	sbci	r25, 0x7B	; 123
     a98:	a1 4e       	sbci	r26, 0xE1	; 225
     a9a:	bf 4f       	sbci	r27, 0xFF	; 255
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	aa 1f       	adc	r26, r26
     aa2:	bb 1f       	adc	r27, r27
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	aa 1f       	adc	r26, r26
     aaa:	bb 1f       	adc	r27, r27
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	aa 1f       	adc	r26, r26
     ab2:	bb 1f       	adc	r27, r27
     ab4:	7c 01       	movw	r14, r24
     ab6:	8d 01       	movw	r16, r26
     ab8:	8c 81       	ldd	r24, Y+4	; 0x04
     aba:	9d 81       	ldd	r25, Y+5	; 0x05
     abc:	ae 81       	ldd	r26, Y+6	; 0x06
     abe:	bf 81       	ldd	r27, Y+7	; 0x07
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	aa 1f       	adc	r26, r26
     ace:	bb 1f       	adc	r27, r27
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	aa 1f       	adc	r26, r26
     ad6:	bb 1f       	adc	r27, r27
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	aa 1f       	adc	r26, r26
     ade:	bb 1f       	adc	r27, r27
     ae0:	9c 01       	movw	r18, r24
     ae2:	ad 01       	movw	r20, r26
     ae4:	c8 01       	movw	r24, r16
     ae6:	b7 01       	movw	r22, r14
     ae8:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivmodsi4>
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
	if(nUart==3)
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	83 30       	cpi	r24, 0x03	; 3
     afa:	61 f4       	brne	.+24     	; 0xb14 <uartSetBaudRate+0xae>
	{
		outb(UBRR3L, bauddiv);
     afc:	e4 e3       	ldi	r30, 0x34	; 52
     afe:	f1 e0       	ldi	r31, 0x01	; 1
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	80 83       	st	Z, r24
		#ifdef UBRR3H
		outb(UBRR3H, bauddiv>>8);
     b04:	e5 e3       	ldi	r30, 0x35	; 53
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	9a 81       	ldd	r25, Y+2	; 0x02
     b0c:	89 2f       	mov	r24, r25
     b0e:	99 27       	eor	r25, r25
     b10:	80 83       	st	Z, r24
     b12:	29 c0       	rjmp	.+82     	; 0xb66 <uartSetBaudRate+0x100>
		#endif
	}
	else if(nUart==2)
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	61 f4       	brne	.+24     	; 0xb32 <uartSetBaudRate+0xcc>
	{
		outb(UBRR2L, bauddiv);
     b1a:	e4 ed       	ldi	r30, 0xD4	; 212
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	80 83       	st	Z, r24
		#ifdef UBRR2H
		outb(UBRR2H, bauddiv>>8);
     b22:	e5 ed       	ldi	r30, 0xD5	; 213
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	9a 81       	ldd	r25, Y+2	; 0x02
     b2a:	89 2f       	mov	r24, r25
     b2c:	99 27       	eor	r25, r25
     b2e:	80 83       	st	Z, r24
     b30:	1a c0       	rjmp	.+52     	; 0xb66 <uartSetBaudRate+0x100>
		#endif
	}
	else if(nUart==1)
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	61 f4       	brne	.+24     	; 0xb50 <uartSetBaudRate+0xea>
	{
		outb(UBRR1L, bauddiv);
     b38:	ec ec       	ldi	r30, 0xCC	; 204
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	80 83       	st	Z, r24
		#ifdef UBRR1H
		outb(UBRR1H, bauddiv>>8);
     b40:	ed ec       	ldi	r30, 0xCD	; 205
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
     b48:	89 2f       	mov	r24, r25
     b4a:	99 27       	eor	r25, r25
     b4c:	80 83       	st	Z, r24
     b4e:	0b c0       	rjmp	.+22     	; 0xb66 <uartSetBaudRate+0x100>
		#endif
	}
	else
	{
		outb(UBRR0L, bauddiv);
     b50:	e4 ec       	ldi	r30, 0xC4	; 196
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	80 83       	st	Z, r24
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
     b58:	e5 ec       	ldi	r30, 0xC5	; 197
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	89 2f       	mov	r24, r25
     b62:	99 27       	eor	r25, r25
     b64:	80 83       	st	Z, r24
		#endif
	}
}
     b66:	27 96       	adiw	r28, 0x07	; 7
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <uartGetRxBuffer>:

cBuffer* uartGetRxBuffer(u08 nUart)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	83 5e       	subi	r24, 0xE3	; 227
     ba0:	9a 4f       	sbci	r25, 0xFA	; 250
}
     ba2:	0f 90       	pop	r0
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	0f 92       	push	r0
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	89 83       	std	Y+1, r24	; 0x01
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	8f 5b       	subi	r24, 0xBF	; 191
     bca:	9a 4f       	sbci	r25, 0xFA	; 250
}
     bcc:	0f 90       	pop	r0
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	00 d0       	rcall	.+0      	; 0xbda <uartSendByte+0x6>
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	6a 83       	std	Y+2, r22	; 0x02
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==3)
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	83 30       	cpi	r24, 0x03	; 3
     be6:	71 f4       	brne	.+28     	; 0xc04 <uartSendByte+0x30>
	{
		while(!(UCSR3A & (1<<UDRE3)));
     be8:	e0 e3       	ldi	r30, 0x30	; 48
     bea:	f1 e0       	ldi	r31, 0x01	; 1
     bec:	80 81       	ld	r24, Z
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	80 72       	andi	r24, 0x20	; 32
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	b9 f3       	breq	.-18     	; 0xbe8 <uartSendByte+0x14>
		outb(UDR3, txData);
     bfa:	e6 e3       	ldi	r30, 0x36	; 54
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	80 83       	st	Z, r24
     c02:	2f c0       	rjmp	.+94     	; 0xc62 <uartSendByte+0x8e>
	}
	else if(nUart==2)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	71 f4       	brne	.+28     	; 0xc26 <uartSendByte+0x52>
	{
		while(!(UCSR2A & (1<<UDRE2)));
     c0a:	e0 ed       	ldi	r30, 0xD0	; 208
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	80 72       	andi	r24, 0x20	; 32
     c16:	90 70       	andi	r25, 0x00	; 0
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	b9 f3       	breq	.-18     	; 0xc0a <uartSendByte+0x36>
		outb(UDR2, txData);
     c1c:	e6 ed       	ldi	r30, 0xD6	; 214
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	80 83       	st	Z, r24
     c24:	1e c0       	rjmp	.+60     	; 0xc62 <uartSendByte+0x8e>
	}
	else if(nUart==1)
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	71 f4       	brne	.+28     	; 0xc48 <uartSendByte+0x74>
	{
		while(!(UCSR1A & (1<<UDRE1)));
     c2c:	e8 ec       	ldi	r30, 0xC8	; 200
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	80 72       	andi	r24, 0x20	; 32
     c38:	90 70       	andi	r25, 0x00	; 0
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	b9 f3       	breq	.-18     	; 0xc2c <uartSendByte+0x58>
		outb(UDR1, txData);
     c3e:	ee ec       	ldi	r30, 0xCE	; 206
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	80 83       	st	Z, r24
     c46:	0d c0       	rjmp	.+26     	; 0xc62 <uartSendByte+0x8e>
	}
	else
	{
		while(!(UCSR0A & (1<<UDRE0)));
     c48:	e0 ec       	ldi	r30, 0xC0	; 192
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	80 72       	andi	r24, 0x20	; 32
     c54:	90 70       	andi	r25, 0x00	; 0
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	b9 f3       	breq	.-18     	; 0xc48 <uartSendByte+0x74>
		outb(UDR0, txData);
     c5a:	e6 ec       	ldi	r30, 0xC6	; 198
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	80 83       	st	Z, r24
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	fc 01       	movw	r30, r24
     c6a:	e7 5e       	subi	r30, 0xE7	; 231
     c6c:	fa 4f       	sbci	r31, 0xFA	; 250
     c6e:	10 82       	st	Z, r1
}
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <uart0SendByte>:

void uart0SendByte(u08 data)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	0f 92       	push	r0
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	89 83       	std	Y+1, r24	; 0x01
	// send byte on UART0
	uartSendByte(0, data);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	69 81       	ldd	r22, Y+1	; 0x01
     c8a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <uartSendByte>
}
     c8e:	0f 90       	pop	r0
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <uart1SendByte>:

void uart1SendByte(u08 data)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	89 83       	std	Y+1, r24	; 0x01
	// send byte on UART1
	uartSendByte(1, data);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	69 81       	ldd	r22, Y+1	; 0x01
     ca6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <uartSendByte>
}
     caa:	0f 90       	pop	r0
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <uart2SendByte>:

void uart2SendByte(u08 data)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	0f 92       	push	r0
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	89 83       	std	Y+1, r24	; 0x01
	// send byte on UART2
	uartSendByte(2, data);
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	69 81       	ldd	r22, Y+1	; 0x01
     cc2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <uartSendByte>
}
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <uart3SendByte>:

void uart3SendByte(u08 data)
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	0f 92       	push	r0
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	89 83       	std	Y+1, r24	; 0x01
	// send byte on UART3
	uartSendByte(3, data);
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	69 81       	ldd	r22, Y+1	; 0x01
     cde:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <uartSendByte>
}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <uart0GetByte>:

int uart0GetByte(void)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <uart0GetByte+0x6>
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	9e 01       	movw	r18, r28
     cfa:	2f 5f       	subi	r18, 0xFF	; 255
     cfc:	3f 4f       	sbci	r19, 0xFF	; 255
     cfe:	b9 01       	movw	r22, r18
     d00:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <uartReceiveByte>
     d04:	88 23       	and	r24, r24
     d06:	31 f0       	breq	.+12     	; 0xd14 <uart0GetByte+0x2a>
		return c;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	3b 83       	std	Y+3, r19	; 0x03
     d10:	2a 83       	std	Y+2, r18	; 0x02
     d12:	04 c0       	rjmp	.+8      	; 0xd1c <uart0GetByte+0x32>
	else
		return -1;
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	9f ef       	ldi	r25, 0xFF	; 255
     d18:	9b 83       	std	Y+3, r25	; 0x03
     d1a:	8a 83       	std	Y+2, r24	; 0x02
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <uart1GetByte>:

int uart1GetByte(void)
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	00 d0       	rcall	.+0      	; 0xd32 <uart1GetByte+0x6>
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(1,&c))
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	9e 01       	movw	r18, r28
     d3c:	2f 5f       	subi	r18, 0xFF	; 255
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	b9 01       	movw	r22, r18
     d42:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <uartReceiveByte>
     d46:	88 23       	and	r24, r24
     d48:	31 f0       	breq	.+12     	; 0xd56 <uart1GetByte+0x2a>
		return c;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	3b 83       	std	Y+3, r19	; 0x03
     d52:	2a 83       	std	Y+2, r18	; 0x02
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <uart1GetByte+0x32>
	else
		return -1;
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	9f ef       	ldi	r25, 0xFF	; 255
     d5a:	9b 83       	std	Y+3, r25	; 0x03
     d5c:	8a 83       	std	Y+2, r24	; 0x02
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <uart2GetByte>:

int uart2GetByte(void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <uart2GetByte+0x6>
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(2,&c))
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	9e 01       	movw	r18, r28
     d7e:	2f 5f       	subi	r18, 0xFF	; 255
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	b9 01       	movw	r22, r18
     d84:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <uartReceiveByte>
     d88:	88 23       	and	r24, r24
     d8a:	31 f0       	breq	.+12     	; 0xd98 <uart2GetByte+0x2a>
		return c;
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3b 83       	std	Y+3, r19	; 0x03
     d94:	2a 83       	std	Y+2, r18	; 0x02
     d96:	04 c0       	rjmp	.+8      	; 0xda0 <uart2GetByte+0x32>
	else
		return -1;
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
     d9c:	9b 83       	std	Y+3, r25	; 0x03
     d9e:	8a 83       	std	Y+2, r24	; 0x02
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	9b 81       	ldd	r25, Y+3	; 0x03
}
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <uart3GetByte>:

int uart3GetByte(void)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <uart3GetByte+0x6>
     db6:	0f 92       	push	r0
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(3,&c))
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	9e 01       	movw	r18, r28
     dc0:	2f 5f       	subi	r18, 0xFF	; 255
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	b9 01       	movw	r22, r18
     dc6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <uartReceiveByte>
     dca:	88 23       	and	r24, r24
     dcc:	31 f0       	breq	.+12     	; 0xdda <uart3GetByte+0x2a>
		return c;
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	3b 83       	std	Y+3, r19	; 0x03
     dd6:	2a 83       	std	Y+2, r18	; 0x02
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <uart3GetByte+0x32>
	else
		return -1;
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	9b 83       	std	Y+3, r25	; 0x03
     de0:	8a 83       	std	Y+2, r24	; 0x02
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <uartReceiveByte>:


u08 uartReceiveByte(u08 nUart, u08* rxData)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <uartReceiveByte+0x6>
     df8:	00 d0       	rcall	.+0      	; 0xdfa <uartReceiveByte+0x8>
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	7b 83       	std	Y+3, r23	; 0x03
     e02:	6a 83       	std	Y+2, r22	; 0x02
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	fc 01       	movw	r30, r24
     e1a:	e3 5e       	subi	r30, 0xE3	; 227
     e1c:	fa 4f       	sbci	r31, 0xFA	; 250
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	31 f1       	breq	.+76     	; 0xe72 <uartReceiveByte+0x80>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	88 2f       	mov	r24, r24
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	fc 01       	movw	r30, r24
     e3c:	e3 5e       	subi	r30, 0xE3	; 227
     e3e:	fa 4f       	sbci	r31, 0xFA	; 250
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	99 f0       	breq	.+38     	; 0xe6e <uartReceiveByte+0x7c>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	83 5e       	subi	r24, 0xE3	; 227
     e5c:	9a 4f       	sbci	r25, 0xFA	; 250
     e5e:	0e 94 8c 02 	call	0x518	; 0x518 <bufferGetFromFront>
     e62:	ea 81       	ldd	r30, Y+2	; 0x02
     e64:	fb 81       	ldd	r31, Y+3	; 0x03
     e66:	80 83       	st	Z, r24
			return TRUE;
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	8c 83       	std	Y+4, r24	; 0x04
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <uartReceiveByte+0x82>
		}
		else
			return FALSE;			// no data
     e6e:	1c 82       	std	Y+4, r1	; 0x04
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <uartReceiveByte+0x82>
	}
	else
		return FALSE;				// no buffer
     e72:	1c 82       	std	Y+4, r1	; 0x04
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <uartFlushReceiveBuffer>:

void uartFlushReceiveBuffer(u08 nUart)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	89 83       	std	Y+1, r24	; 0x01
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	83 5e       	subi	r24, 0xE3	; 227
     ea4:	9a 4f       	sbci	r25, 0xFA	; 250
     ea6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <bufferFlush>
}
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <uartReceiveBufferIsEmpty>:

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <uartReceiveBufferIsEmpty+0x6>
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	89 83       	std	Y+1, r24	; 0x01
	return (uartRxBuffer[nUart].datalength == 0);
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	fc 01       	movw	r30, r24
     ed4:	e3 5e       	subi	r30, 0xE3	; 227
     ed6:	fa 4f       	sbci	r31, 0xFA	; 250
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
     edc:	1a 82       	std	Y+2, r1	; 0x02
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	11 f4       	brne	.+4      	; 0xee6 <uartReceiveBufferIsEmpty+0x34>
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <uartAddToTxBuffer>:

void uartAddToTxBuffer(u08 nUart, u08 data)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <uartAddToTxBuffer+0x6>
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	6a 83       	std	Y+2, r22	; 0x02
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	8f 5b       	subi	r24, 0xBF	; 191
     f14:	9a 4f       	sbci	r25, 0xFA	; 250
     f16:	6a 81       	ldd	r22, Y+2	; 0x02
     f18:	0e 94 7f 03 	call	0x6fe	; 0x6fe <bufferAddToEnd>
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <uart0AddToTxBuffer>:

void uart0AddToTxBuffer(u08 data)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	0f 92       	push	r0
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	89 83       	std	Y+1, r24	; 0x01
	uartAddToTxBuffer(0,data);
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	69 81       	ldd	r22, Y+1	; 0x01
     f36:	0e 94 79 07 	call	0xef2	; 0xef2 <uartAddToTxBuffer>
}
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <uart1AddToTxBuffer>:

void uart1AddToTxBuffer(u08 data)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	0f 92       	push	r0
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	89 83       	std	Y+1, r24	; 0x01
	uartAddToTxBuffer(1,data);
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	69 81       	ldd	r22, Y+1	; 0x01
     f52:	0e 94 79 07 	call	0xef2	; 0xef2 <uartAddToTxBuffer>
}
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <uart2AddToTxBuffer>:

void uart2AddToTxBuffer(u08 data)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	89 83       	std	Y+1, r24	; 0x01
	uartAddToTxBuffer(2,data);
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	69 81       	ldd	r22, Y+1	; 0x01
     f6e:	0e 94 79 07 	call	0xef2	; 0xef2 <uartAddToTxBuffer>
}
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <uart3AddToTxBuffer>:

void uart3AddToTxBuffer(u08 data)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	0f 92       	push	r0
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	89 83       	std	Y+1, r24	; 0x01
	uartAddToTxBuffer(3,data);
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	69 81       	ldd	r22, Y+1	; 0x01
     f8a:	0e 94 79 07 	call	0xef2	; 0xef2 <uartAddToTxBuffer>
}
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <uartSendTxBuffer>:

void uartSendTxBuffer(u08 nUart)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	89 83       	std	Y+1, r24	; 0x01
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	fc 01       	movw	r30, r24
     faa:	e3 5c       	subi	r30, 0xC3	; 195
     fac:	fa 4f       	sbci	r31, 0xFA	; 250
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	80 83       	st	Z, r24
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	8f 5b       	subi	r24, 0xBF	; 191
     fc6:	9a 4f       	sbci	r25, 0xFA	; 250
     fc8:	0e 94 8c 02 	call	0x518	; 0x518 <bufferGetFromFront>
     fcc:	98 2f       	mov	r25, r24
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	69 2f       	mov	r22, r25
     fd2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <uartSendByte>
}
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <uartSendBuffer>:

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	29 97       	sbiw	r28, 0x09	; 9
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	7b 83       	std	Y+3, r23	; 0x03
     ff6:	6a 83       	std	Y+2, r22	; 0x02
     ff8:	5d 83       	std	Y+5, r21	; 0x05
     ffa:	4c 83       	std	Y+4, r20	; 0x04
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	fc 01       	movw	r30, r24
    1012:	ef 5b       	subi	r30, 0xBF	; 191
    1014:	fa 4f       	sbci	r31, 0xFA	; 250
    1016:	20 81       	ld	r18, Z
    1018:	31 81       	ldd	r19, Z+1	; 0x01
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	9d 81       	ldd	r25, Y+5	; 0x05
    101e:	28 0f       	add	r18, r24
    1020:	39 1f       	adc	r19, r25
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	fc 01       	movw	r30, r24
    1038:	ef 5b       	subi	r30, 0xBF	; 191
    103a:	fa 4f       	sbci	r31, 0xFA	; 250
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	08 f0       	brcs	.+2      	; 0x1048 <uartSendBuffer+0x6a>
    1046:	45 c0       	rjmp	.+138    	; 0x10d2 <uartSendBuffer+0xf4>
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	09 f4       	brne	.+2      	; 0x1052 <uartSendBuffer+0x74>
    1050:	40 c0       	rjmp	.+128    	; 0x10d2 <uartSendBuffer+0xf4>
	{
		// grab first character
		first = *buffer++;
    1052:	ea 81       	ldd	r30, Y+2	; 0x02
    1054:	fb 81       	ldd	r31, Y+3	; 0x03
    1056:	20 81       	ld	r18, Z
    1058:	28 87       	std	Y+8, r18	; 0x08
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	9b 83       	std	Y+3, r25	; 0x03
    1062:	8a 83       	std	Y+2, r24	; 0x02
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    1064:	1f 82       	std	Y+7, r1	; 0x07
    1066:	1e 82       	std	Y+6, r1	; 0x06
    1068:	1d c0       	rjmp	.+58     	; 0x10a4 <uartSendBuffer+0xc6>
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	9c 01       	movw	r18, r24
    107e:	2f 5b       	subi	r18, 0xBF	; 191
    1080:	3a 4f       	sbci	r19, 0xFA	; 250
    1082:	ea 81       	ldd	r30, Y+2	; 0x02
    1084:	fb 81       	ldd	r31, Y+3	; 0x03
    1086:	40 81       	ld	r20, Z
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	9b 83       	std	Y+3, r25	; 0x03
    1090:	8a 83       	std	Y+2, r24	; 0x02
    1092:	c9 01       	movw	r24, r18
    1094:	64 2f       	mov	r22, r20
    1096:	0e 94 7f 03 	call	0x6fe	; 0x6fe <bufferAddToEnd>
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    109a:	8e 81       	ldd	r24, Y+6	; 0x06
    109c:	9f 81       	ldd	r25, Y+7	; 0x07
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	9f 83       	std	Y+7, r25	; 0x07
    10a2:	8e 83       	std	Y+6, r24	; 0x06
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	9d 81       	ldd	r25, Y+5	; 0x05
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	2e 81       	ldd	r18, Y+6	; 0x06
    10ac:	3f 81       	ldd	r19, Y+7	; 0x07
    10ae:	28 17       	cp	r18, r24
    10b0:	39 07       	cpc	r19, r25
    10b2:	d8 f2       	brcs	.-74     	; 0x106a <uartSendBuffer+0x8c>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	fc 01       	movw	r30, r24
    10bc:	e3 5c       	subi	r30, 0xC3	; 195
    10be:	fa 4f       	sbci	r31, 0xFA	; 250
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	80 83       	st	Z, r24
		uartSendByte(nUart, first);
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	68 85       	ldd	r22, Y+8	; 0x08
    10c8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <uartSendByte>
		// return success
		return TRUE;
    10cc:	3f ef       	ldi	r19, 0xFF	; 255
    10ce:	39 87       	std	Y+9, r19	; 0x09
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <uartSendBuffer+0xf6>
	}
	else
	{
		// return failure
		return FALSE;
    10d2:	19 86       	std	Y+9, r1	; 0x09
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
	}
}
    10d6:	29 96       	adiw	r28, 0x09	; 9
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <uartTransmitService>:

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	89 83       	std	Y+1, r24	; 0x01
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	fc 01       	movw	r30, r24
    1100:	e3 5c       	subi	r30, 0xC3	; 195
    1102:	fa 4f       	sbci	r31, 0xFA	; 250
    1104:	80 81       	ld	r24, Z
    1106:	88 23       	and	r24, r24
    1108:	09 f4       	brne	.+2      	; 0x110c <uartTransmitService+0x24>
    110a:	4e c0       	rjmp	.+156    	; 0x11a8 <uartTransmitService+0xc0>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	fc 01       	movw	r30, r24
    1122:	ef 5b       	subi	r30, 0xBF	; 191
    1124:	fa 4f       	sbci	r31, 0xFA	; 250
    1126:	80 81       	ld	r24, Z
    1128:	91 81       	ldd	r25, Z+1	; 0x01
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f1       	breq	.+90     	; 0x1188 <uartTransmitService+0xa0>
		{
			// send byte from top of buffer
			if(nUart==3)
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	49 f4       	brne	.+18     	; 0x1146 <uartTransmitService+0x5e>
				outb(UDR3,  bufferGetFromFront(&uartTxBuffer[3]) );
    1134:	06 e3       	ldi	r16, 0x36	; 54
    1136:	11 e0       	ldi	r17, 0x01	; 1
    1138:	89 e5       	ldi	r24, 0x59	; 89
    113a:	95 e0       	ldi	r25, 0x05	; 5
    113c:	0e 94 8c 02 	call	0x518	; 0x518 <bufferGetFromFront>
    1140:	f8 01       	movw	r30, r16
    1142:	80 83       	st	Z, r24
    1144:	39 c0       	rjmp	.+114    	; 0x11b8 <uartTransmitService+0xd0>
			else if(nUart==2)
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	49 f4       	brne	.+18     	; 0x115e <uartTransmitService+0x76>
				outb(UDR2,  bufferGetFromFront(&uartTxBuffer[2]) );
    114c:	06 ed       	ldi	r16, 0xD6	; 214
    114e:	10 e0       	ldi	r17, 0x00	; 0
    1150:	81 e5       	ldi	r24, 0x51	; 81
    1152:	95 e0       	ldi	r25, 0x05	; 5
    1154:	0e 94 8c 02 	call	0x518	; 0x518 <bufferGetFromFront>
    1158:	f8 01       	movw	r30, r16
    115a:	80 83       	st	Z, r24
    115c:	2d c0       	rjmp	.+90     	; 0x11b8 <uartTransmitService+0xd0>
			else if(nUart==1)
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	49 f4       	brne	.+18     	; 0x1176 <uartTransmitService+0x8e>
				outb(UDR1,  bufferGetFromFront(&uartTxBuffer[1]) );
    1164:	0e ec       	ldi	r16, 0xCE	; 206
    1166:	10 e0       	ldi	r17, 0x00	; 0
    1168:	89 e4       	ldi	r24, 0x49	; 73
    116a:	95 e0       	ldi	r25, 0x05	; 5
    116c:	0e 94 8c 02 	call	0x518	; 0x518 <bufferGetFromFront>
    1170:	f8 01       	movw	r30, r16
    1172:	80 83       	st	Z, r24
    1174:	21 c0       	rjmp	.+66     	; 0x11b8 <uartTransmitService+0xd0>
			else
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    1176:	06 ec       	ldi	r16, 0xC6	; 198
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	81 e4       	ldi	r24, 0x41	; 65
    117c:	95 e0       	ldi	r25, 0x05	; 5
    117e:	0e 94 8c 02 	call	0x518	; 0x518 <bufferGetFromFront>
    1182:	f8 01       	movw	r30, r16
    1184:	80 83       	st	Z, r24
    1186:	18 c0       	rjmp	.+48     	; 0x11b8 <uartTransmitService+0xd0>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	fc 01       	movw	r30, r24
    1190:	e3 5c       	subi	r30, 0xC3	; 195
    1192:	fa 4f       	sbci	r31, 0xFA	; 250
    1194:	10 82       	st	Z, r1
			// return to ready state
			uartReadyTx[nUart] = TRUE;
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	fc 01       	movw	r30, r24
    119e:	e7 5e       	subi	r30, 0xE7	; 231
    11a0:	fa 4f       	sbci	r31, 0xFA	; 250
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	80 83       	st	Z, r24
    11a6:	08 c0       	rjmp	.+16     	; 0x11b8 <uartTransmitService+0xd0>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	fc 01       	movw	r30, r24
    11b0:	e7 5e       	subi	r30, 0xE7	; 231
    11b2:	fa 4f       	sbci	r31, 0xFA	; 250
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	80 83       	st	Z, r24
	}
}
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	08 95       	ret

000011c4 <uartReceiveService>:

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <uartReceiveService+0x6>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	8a 83       	std	Y+2, r24	; 0x02
	u08 c;
	// get received char
	if(nUart==3)
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	83 30       	cpi	r24, 0x03	; 3
    11d4:	29 f4       	brne	.+10     	; 0x11e0 <uartReceiveService+0x1c>
		c = inb(UDR3);
    11d6:	e6 e3       	ldi	r30, 0x36	; 54
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	80 81       	ld	r24, Z
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	14 c0       	rjmp	.+40     	; 0x1208 <uartReceiveService+0x44>
	else if(nUart==2)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	29 f4       	brne	.+10     	; 0x11f0 <uartReceiveService+0x2c>
		c = inb(UDR2);
    11e6:	e6 ed       	ldi	r30, 0xD6	; 214
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	0c c0       	rjmp	.+24     	; 0x1208 <uartReceiveService+0x44>
	else if(nUart==1)
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	29 f4       	brne	.+10     	; 0x1200 <uartReceiveService+0x3c>
		c = inb(UDR1);
    11f6:	ee ec       	ldi	r30, 0xCE	; 206
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <uartReceiveService+0x44>
	else
		c = inb(UDR0);
    1200:	e6 ec       	ldi	r30, 0xC6	; 198
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	89 83       	std	Y+1, r24	; 0x01

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	fc 01       	movw	r30, r24
    1214:	ea 52       	subi	r30, 0x2A	; 42
    1216:	fb 4f       	sbci	r31, 0xFB	; 251
    1218:	80 81       	ld	r24, Z
    121a:	91 81       	ldd	r25, Z+1	; 0x01
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	71 f0       	breq	.+28     	; 0x123c <uartReceiveService+0x78>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	88 2f       	mov	r24, r24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	fc 01       	movw	r30, r24
    122c:	ea 52       	subi	r30, 0x2A	; 42
    122e:	fb 4f       	sbci	r31, 0xFB	; 251
    1230:	01 90       	ld	r0, Z+
    1232:	f0 81       	ld	r31, Z
    1234:	e0 2d       	mov	r30, r0
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	09 95       	icall
    123a:	26 c0       	rjmp	.+76     	; 0x1288 <uartReceiveService+0xc4>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	83 5e       	subi	r24, 0xE3	; 227
    1250:	9a 4f       	sbci	r25, 0xFA	; 250
    1252:	69 81       	ldd	r22, Y+1	; 0x01
    1254:	0e 94 7f 03 	call	0x6fe	; 0x6fe <bufferAddToEnd>
    1258:	88 23       	and	r24, r24
    125a:	b1 f4       	brne	.+44     	; 0x1288 <uartReceiveService+0xc4>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	c9 01       	movw	r24, r18
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	fc 01       	movw	r30, r24
    126a:	ef 59       	subi	r30, 0x9F	; 159
    126c:	fa 4f       	sbci	r31, 0xFA	; 250
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	ac 01       	movw	r20, r24
    1274:	4f 5f       	subi	r20, 0xFF	; 255
    1276:	5f 4f       	sbci	r21, 0xFF	; 255
    1278:	c9 01       	movw	r24, r18
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	fc 01       	movw	r30, r24
    1280:	ef 59       	subi	r30, 0x9F	; 159
    1282:	fa 4f       	sbci	r31, 0xFA	; 250
    1284:	51 83       	std	Z+1, r21	; 0x01
    1286:	40 83       	st	Z, r20
		}
	}
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <__vector_27>:

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    1292:	1f 92       	push	r1
    1294:	0f 92       	push	r0
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	2f 93       	push	r18
    129e:	3f 93       	push	r19
    12a0:	4f 93       	push	r20
    12a2:	5f 93       	push	r21
    12a4:	6f 93       	push	r22
    12a6:	7f 93       	push	r23
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25
    12ac:	af 93       	push	r26
    12ae:	bf 93       	push	r27
    12b0:	ef 93       	push	r30
    12b2:	ff 93       	push	r31
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(0);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 74 08 	call	0x10e8	; 0x10e8 <uartTransmitService>
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	ff 91       	pop	r31
    12c8:	ef 91       	pop	r30
    12ca:	bf 91       	pop	r27
    12cc:	af 91       	pop	r26
    12ce:	9f 91       	pop	r25
    12d0:	8f 91       	pop	r24
    12d2:	7f 91       	pop	r23
    12d4:	6f 91       	pop	r22
    12d6:	5f 91       	pop	r21
    12d8:	4f 91       	pop	r20
    12da:	3f 91       	pop	r19
    12dc:	2f 91       	pop	r18
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	0f 90       	pop	r0
    12e4:	1f 90       	pop	r1
    12e6:	18 95       	reti

000012e8 <__vector_38>:

UART_INTERRUPT_HANDLER(SIG_USART1_TRANS)      
{
    12e8:	1f 92       	push	r1
    12ea:	0f 92       	push	r0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	0f 92       	push	r0
    12f0:	11 24       	eor	r1, r1
    12f2:	2f 93       	push	r18
    12f4:	3f 93       	push	r19
    12f6:	4f 93       	push	r20
    12f8:	5f 93       	push	r21
    12fa:	6f 93       	push	r22
    12fc:	7f 93       	push	r23
    12fe:	8f 93       	push	r24
    1300:	9f 93       	push	r25
    1302:	af 93       	push	r26
    1304:	bf 93       	push	r27
    1306:	ef 93       	push	r30
    1308:	ff 93       	push	r31
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(1);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	0e 94 74 08 	call	0x10e8	; 0x10e8 <uartTransmitService>
}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	ff 91       	pop	r31
    131e:	ef 91       	pop	r30
    1320:	bf 91       	pop	r27
    1322:	af 91       	pop	r26
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	7f 91       	pop	r23
    132a:	6f 91       	pop	r22
    132c:	5f 91       	pop	r21
    132e:	4f 91       	pop	r20
    1330:	3f 91       	pop	r19
    1332:	2f 91       	pop	r18
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	18 95       	reti

0000133e <__vector_53>:

UART_INTERRUPT_HANDLER(SIG_USART2_TRANS)      
{
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(2);
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <uartTransmitService>
}
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	ff 91       	pop	r31
    1374:	ef 91       	pop	r30
    1376:	bf 91       	pop	r27
    1378:	af 91       	pop	r26
    137a:	9f 91       	pop	r25
    137c:	8f 91       	pop	r24
    137e:	7f 91       	pop	r23
    1380:	6f 91       	pop	r22
    1382:	5f 91       	pop	r21
    1384:	4f 91       	pop	r20
    1386:	3f 91       	pop	r19
    1388:	2f 91       	pop	r18
    138a:	0f 90       	pop	r0
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	0f 90       	pop	r0
    1390:	1f 90       	pop	r1
    1392:	18 95       	reti

00001394 <__vector_56>:

UART_INTERRUPT_HANDLER(SIG_USART3_TRANS)      
{
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	2f 93       	push	r18
    13a0:	3f 93       	push	r19
    13a2:	4f 93       	push	r20
    13a4:	5f 93       	push	r21
    13a6:	6f 93       	push	r22
    13a8:	7f 93       	push	r23
    13aa:	8f 93       	push	r24
    13ac:	9f 93       	push	r25
    13ae:	af 93       	push	r26
    13b0:	bf 93       	push	r27
    13b2:	ef 93       	push	r30
    13b4:	ff 93       	push	r31
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(3);
    13be:	83 e0       	ldi	r24, 0x03	; 3
    13c0:	0e 94 74 08 	call	0x10e8	; 0x10e8 <uartTransmitService>
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <__vector_25>:

	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	2f 93       	push	r18
    13f6:	3f 93       	push	r19
    13f8:	4f 93       	push	r20
    13fa:	5f 93       	push	r21
    13fc:	6f 93       	push	r22
    13fe:	7f 93       	push	r23
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
    1404:	af 93       	push	r26
    1406:	bf 93       	push	r27
    1408:	ef 93       	push	r30
    140a:	ff 93       	push	r31
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(0);
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <uartReceiveService>
}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	ff 91       	pop	r31
    1420:	ef 91       	pop	r30
    1422:	bf 91       	pop	r27
    1424:	af 91       	pop	r26
    1426:	9f 91       	pop	r25
    1428:	8f 91       	pop	r24
    142a:	7f 91       	pop	r23
    142c:	6f 91       	pop	r22
    142e:	5f 91       	pop	r21
    1430:	4f 91       	pop	r20
    1432:	3f 91       	pop	r19
    1434:	2f 91       	pop	r18
    1436:	0f 90       	pop	r0
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	0f 90       	pop	r0
    143c:	1f 90       	pop	r1
    143e:	18 95       	reti

00001440 <__vector_36>:

UART_INTERRUPT_HANDLER(SIG_USART1_RECV)      
{
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	ef 93       	push	r30
    1460:	ff 93       	push	r31
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(1);
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <uartReceiveService>
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	ff 91       	pop	r31
    1476:	ef 91       	pop	r30
    1478:	bf 91       	pop	r27
    147a:	af 91       	pop	r26
    147c:	9f 91       	pop	r25
    147e:	8f 91       	pop	r24
    1480:	7f 91       	pop	r23
    1482:	6f 91       	pop	r22
    1484:	5f 91       	pop	r21
    1486:	4f 91       	pop	r20
    1488:	3f 91       	pop	r19
    148a:	2f 91       	pop	r18
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0
    1492:	1f 90       	pop	r1
    1494:	18 95       	reti

00001496 <__vector_51>:

UART_INTERRUPT_HANDLER(SIG_USART2_RECV)      
{
    1496:	1f 92       	push	r1
    1498:	0f 92       	push	r0
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	0f 92       	push	r0
    149e:	11 24       	eor	r1, r1
    14a0:	2f 93       	push	r18
    14a2:	3f 93       	push	r19
    14a4:	4f 93       	push	r20
    14a6:	5f 93       	push	r21
    14a8:	6f 93       	push	r22
    14aa:	7f 93       	push	r23
    14ac:	8f 93       	push	r24
    14ae:	9f 93       	push	r25
    14b0:	af 93       	push	r26
    14b2:	bf 93       	push	r27
    14b4:	ef 93       	push	r30
    14b6:	ff 93       	push	r31
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(2);
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <uartReceiveService>
}
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	ff 91       	pop	r31
    14cc:	ef 91       	pop	r30
    14ce:	bf 91       	pop	r27
    14d0:	af 91       	pop	r26
    14d2:	9f 91       	pop	r25
    14d4:	8f 91       	pop	r24
    14d6:	7f 91       	pop	r23
    14d8:	6f 91       	pop	r22
    14da:	5f 91       	pop	r21
    14dc:	4f 91       	pop	r20
    14de:	3f 91       	pop	r19
    14e0:	2f 91       	pop	r18
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	0f 90       	pop	r0
    14e8:	1f 90       	pop	r1
    14ea:	18 95       	reti

000014ec <__vector_54>:

UART_INTERRUPT_HANDLER(SIG_USART3_RECV)      
{
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	2f 93       	push	r18
    14f8:	3f 93       	push	r19
    14fa:	4f 93       	push	r20
    14fc:	5f 93       	push	r21
    14fe:	6f 93       	push	r22
    1500:	7f 93       	push	r23
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	af 93       	push	r26
    1508:	bf 93       	push	r27
    150a:	ef 93       	push	r30
    150c:	ff 93       	push	r31
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(3);
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <uartReceiveService>
}
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <prescaler_hex_to_value>:

typedef void (*void_func_ptr)(void);
volatile static void_func_ptr TimerIntFunc[TIMER_MAX_ENUM];

uint16_t prescaler_hex_to_value(uint8_t hex)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <prescaler_hex_to_value+0x6>
    1548:	00 d0       	rcall	.+0      	; 0x154a <prescaler_hex_to_value+0x8>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	8d 83       	std	Y+5, r24	; 0x05
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	87 70       	andi	r24, 0x07	; 7
    155a:	90 70       	andi	r25, 0x00	; 0
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	8a 59       	subi	r24, 0x9A	; 154
    1562:	9e 4f       	sbci	r25, 0xFE	; 254
    1564:	9c 83       	std	Y+4, r25	; 0x04
    1566:	8b 83       	std	Y+3, r24	; 0x03
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	fc 01       	movw	r30, r24
    156e:	85 91       	lpm	r24, Z+
    1570:	94 91       	lpm	r25, Z+
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	fc 83       	std	Y+4, r31	; 0x04
    1578:	eb 83       	std	Y+3, r30	; 0x03
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <prescaler_hex_to_value_for_timer2>:

uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <prescaler_hex_to_value_for_timer2+0x6>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <prescaler_hex_to_value_for_timer2+0x8>
    1596:	0f 92       	push	r0
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	8d 83       	std	Y+5, r24	; 0x05
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	87 70       	andi	r24, 0x07	; 7
    15a6:	90 70       	andi	r25, 0x00	; 0
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	8e 58       	subi	r24, 0x8E	; 142
    15ae:	9e 4f       	sbci	r25, 0xFE	; 254
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	8b 83       	std	Y+3, r24	; 0x03
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	fc 01       	movw	r30, r24
    15ba:	85 91       	lpm	r24, Z+
    15bc:	94 91       	lpm	r25, Z+
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	fc 83       	std	Y+4, r31	; 0x04
    15c4:	eb 83       	std	Y+3, r30	; 0x03
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <get_timer0_prescaler>:

uint16_t get_timer0_prescaler(void)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value(TCCR0B);
    15e2:	e5 e4       	ldi	r30, 0x45	; 69
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	0e 94 a1 0a 	call	0x1542	; 0x1542 <prescaler_hex_to_value>
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <get_timer1_prescaler>:
uint16_t get_timer1_prescaler(void)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value(TCCR1B);
    15fa:	e1 e8       	ldi	r30, 0x81	; 129
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	0e 94 a1 0a 	call	0x1542	; 0x1542 <prescaler_hex_to_value>
}
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <get_timer2_prescaler>:
uint16_t get_timer2_prescaler(void)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value_for_timer2(TCCR2B);
    1612:	e1 eb       	ldi	r30, 0xB1	; 177
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	0e 94 c7 0a 	call	0x158e	; 0x158e <prescaler_hex_to_value_for_timer2>
}
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <get_timer3_prescaler>:
uint16_t get_timer3_prescaler(void)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value(TCCR3B);
    162a:	e1 e9       	ldi	r30, 0x91	; 145
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	0e 94 a1 0a 	call	0x1542	; 0x1542 <prescaler_hex_to_value>
}
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <get_timer4_prescaler>:
uint16_t get_timer4_prescaler(void)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value(TCCR4B);
    1642:	e1 ea       	ldi	r30, 0xA1	; 161
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	0e 94 a1 0a 	call	0x1542	; 0x1542 <prescaler_hex_to_value>
}
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <get_timer5_prescaler>:
uint16_t get_timer5_prescaler(void)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value(TCCR5B);
    165a:	e1 e2       	ldi	r30, 0x21	; 33
    165c:	f1 e0       	ldi	r31, 0x01	; 1
    165e:	80 81       	ld	r24, Z
    1660:	0e 94 a1 0a 	call	0x1542	; 0x1542 <prescaler_hex_to_value>
}
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <get_timer0_overflow>:

const uint32_t get_timer0_overflow(void)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    return timer0_ovrflow_cnt;
    1672:	80 91 71 05 	lds	r24, 0x0571
    1676:	90 91 72 05 	lds	r25, 0x0572
    167a:	a0 91 73 05 	lds	r26, 0x0573
    167e:	b0 91 74 05 	lds	r27, 0x0574
}
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <get_timer1_overflow>:
const uint32_t get_timer1_overflow(void)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    return timer1_ovrflow_cnt;
    1694:	80 91 6d 05 	lds	r24, 0x056D
    1698:	90 91 6e 05 	lds	r25, 0x056E
    169c:	a0 91 6f 05 	lds	r26, 0x056F
    16a0:	b0 91 70 05 	lds	r27, 0x0570
}
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <get_timer2_overflow>:
const uint32_t get_timer2_overflow(void)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    return timer2_ovrflow_cnt;
    16b6:	80 91 75 05 	lds	r24, 0x0575
    16ba:	90 91 76 05 	lds	r25, 0x0576
    16be:	a0 91 77 05 	lds	r26, 0x0577
    16c2:	b0 91 78 05 	lds	r27, 0x0578
}
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <get_timer3_overflow>:
const uint32_t get_timer3_overflow(void)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    return timer3_ovrflow_cnt;
    16d8:	80 91 7d 05 	lds	r24, 0x057D
    16dc:	90 91 7e 05 	lds	r25, 0x057E
    16e0:	a0 91 7f 05 	lds	r26, 0x057F
    16e4:	b0 91 80 05 	lds	r27, 0x0580
}
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <get_timer4_overflow>:
const uint32_t get_timer4_overflow(void)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    return timer4_ovrflow_cnt;
    16fa:	80 91 69 05 	lds	r24, 0x0569
    16fe:	90 91 6a 05 	lds	r25, 0x056A
    1702:	a0 91 6b 05 	lds	r26, 0x056B
    1706:	b0 91 6c 05 	lds	r27, 0x056C
}
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <get_timer5_overflow>:
const uint32_t get_timer5_overflow(void)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    return timer5_ovrflow_cnt;
    171c:	80 91 81 05 	lds	r24, 0x0581
    1720:	90 91 82 05 	lds	r25, 0x0582
    1724:	a0 91 83 05 	lds	r26, 0x0583
    1728:	b0 91 84 05 	lds	r27, 0x0584
}
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <get_timer0_counter>:

const uint8_t get_timer0_counter(void)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    return TCNT0;
    173e:	e6 e4       	ldi	r30, 0x46	; 70
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <get_timer1_counter>:
const uint16_t get_timer1_counter(void)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
    1752:	e4 e8       	ldi	r30, 0x84	; 132
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	91 81       	ldd	r25, Z+1	; 0x01
}
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <get_timer2_counter>:
const uint8_t get_timer2_counter(void)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    return TCNT2;
    1768:	e2 eb       	ldi	r30, 0xB2	; 178
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
}
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <get_timer3_counter>:
const uint16_t get_timer3_counter(void)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    return TCNT3;
    177c:	e4 e9       	ldi	r30, 0x94	; 148
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <get_timer4_counter>:
const uint16_t get_timer4_counter(void)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    return TCNT4;
    1792:	e4 ea       	ldi	r30, 0xA4	; 164
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01
}
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <get_timer5_counter>:
const uint16_t get_timer5_counter(void)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    return TCNT5;
    17a8:	e4 e2       	ldi	r30, 0x24	; 36
    17aa:	f1 e0       	ldi	r31, 0x01	; 1
    17ac:	80 81       	ld	r24, Z
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <reset_timer0>:

void reset_timer0(void)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    TCNT0 = timer0_ovrflow_cnt = 0;
    17be:	10 92 71 05 	sts	0x0571, r1
    17c2:	10 92 72 05 	sts	0x0572, r1
    17c6:	10 92 73 05 	sts	0x0573, r1
    17ca:	10 92 74 05 	sts	0x0574, r1
    17ce:	e6 e4       	ldi	r30, 0x46	; 70
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	10 82       	st	Z, r1
}
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <reset_timer1>:
void reset_timer1(void)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = timer1_ovrflow_cnt = 0;
    17e2:	10 92 6d 05 	sts	0x056D, r1
    17e6:	10 92 6e 05 	sts	0x056E, r1
    17ea:	10 92 6f 05 	sts	0x056F, r1
    17ee:	10 92 70 05 	sts	0x0570, r1
    17f2:	e4 e8       	ldi	r30, 0x84	; 132
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	11 82       	std	Z+1, r1	; 0x01
    17f8:	10 82       	st	Z, r1
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <reset_timer2>:
void reset_timer2(void)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    TCNT2 = timer2_ovrflow_cnt = 0;
    1808:	10 92 75 05 	sts	0x0575, r1
    180c:	10 92 76 05 	sts	0x0576, r1
    1810:	10 92 77 05 	sts	0x0577, r1
    1814:	10 92 78 05 	sts	0x0578, r1
    1818:	e2 eb       	ldi	r30, 0xB2	; 178
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	10 82       	st	Z, r1
}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <reset_timer3>:
void reset_timer3(void)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    TCNT3 = timer3_ovrflow_cnt = 0;
    182c:	10 92 7d 05 	sts	0x057D, r1
    1830:	10 92 7e 05 	sts	0x057E, r1
    1834:	10 92 7f 05 	sts	0x057F, r1
    1838:	10 92 80 05 	sts	0x0580, r1
    183c:	e4 e9       	ldi	r30, 0x94	; 148
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	11 82       	std	Z+1, r1	; 0x01
    1842:	10 82       	st	Z, r1
}
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <reset_timer4>:
void reset_timer4(void)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    TCNT4 = timer4_ovrflow_cnt = 0;
    1852:	10 92 69 05 	sts	0x0569, r1
    1856:	10 92 6a 05 	sts	0x056A, r1
    185a:	10 92 6b 05 	sts	0x056B, r1
    185e:	10 92 6c 05 	sts	0x056C, r1
    1862:	e4 ea       	ldi	r30, 0xA4	; 164
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	11 82       	std	Z+1, r1	; 0x01
    1868:	10 82       	st	Z, r1
}
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <reset_timer5>:
void reset_timer5(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    TCNT5 = timer5_ovrflow_cnt = 0;
    1878:	10 92 81 05 	sts	0x0581, r1
    187c:	10 92 82 05 	sts	0x0582, r1
    1880:	10 92 83 05 	sts	0x0583, r1
    1884:	10 92 84 05 	sts	0x0584, r1
    1888:	e4 e2       	ldi	r30, 0x24	; 36
    188a:	f1 e0       	ldi	r31, 0x01	; 1
    188c:	11 82       	std	Z+1, r1	; 0x01
    188e:	10 82       	st	Z, r1
}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <delay_us>:

void delay_us(unsigned short time_us) 
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <delay_us+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <delay_us+0x8>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <delay_us+0xa>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	9c 83       	std	Y+4, r25	; 0x04
    18a6:	8b 83       	std	Y+3, r24	; 0x03
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / 5; // +3 for rounding up (dirty) 
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	cc 01       	movw	r24, r24
    18ae:	a0 e0       	ldi	r26, 0x00	; 0
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	aa 1f       	adc	r26, r26
    18b8:	bb 1f       	adc	r27, r27
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	aa 1f       	adc	r26, r26
    18c0:	bb 1f       	adc	r27, r27
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	aa 1f       	adc	r26, r26
    18c8:	bb 1f       	adc	r27, r27
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	aa 1f       	adc	r26, r26
    18d0:	bb 1f       	adc	r27, r27
    18d2:	03 96       	adiw	r24, 0x03	; 3
    18d4:	a1 1d       	adc	r26, r1
    18d6:	b1 1d       	adc	r27, r1
    18d8:	25 e0       	ldi	r18, 0x05	; 5
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 05 2a 	call	0x540a	; 0x540a <__divmodsi4>
    18e8:	da 01       	movw	r26, r20
    18ea:	c9 01       	movw	r24, r18
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
    18f0:	1e 82       	std	Y+6, r1	; 0x06
    18f2:	1d 82       	std	Y+5, r1	; 0x05
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <delay_us+0x6c>
    18f6:	2d 81       	ldd	r18, Y+5	; 0x05
    18f8:	3e 81       	ldd	r19, Y+6	; 0x06
    18fa:	2f 5f       	subi	r18, 0xFF	; 255
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
    18fe:	3e 83       	std	Y+6, r19	; 0x06
    1900:	2d 83       	std	Y+5, r18	; 0x05
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	2d 81       	ldd	r18, Y+5	; 0x05
    1908:	3e 81       	ldd	r19, Y+6	; 0x06
    190a:	28 17       	cp	r18, r24
    190c:	39 07       	cpc	r19, r25
    190e:	98 f3       	brcs	.-26     	; 0x18f6 <delay_us+0x60>
}
    1910:	26 96       	adiw	r28, 0x06	; 6
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <init_timer0>:

void init_timer0(const uint8_t prescaler)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	89 83       	std	Y+1, r24	; 0x01
  TCCR0B = prescaler;
    192e:	e5 e4       	ldi	r30, 0x45	; 69
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	80 83       	st	Z, r24
  TIMSK0 = _BV(TOIE0); // enable interrupts
    1936:	ee e6       	ldi	r30, 0x6E	; 110
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	80 83       	st	Z, r24
  reset_timer0(); // reset counter
    193e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <reset_timer0>
}
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <init_timer1>:
void init_timer1(const uint8_t prescaler)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	0f 92       	push	r0
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	89 83       	std	Y+1, r24	; 0x01
  TCCR1B = prescaler;
    1956:	e1 e8       	ldi	r30, 0x81	; 129
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	80 83       	st	Z, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
    195e:	ef e6       	ldi	r30, 0x6F	; 111
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	80 83       	st	Z, r24
  reset_timer1(); // reset counter
    1966:	0e 94 ed 0b 	call	0x17da	; 0x17da <reset_timer1>
}
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <init_timer2>:
void init_timer2(const uint8_t prescaler)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	0f 92       	push	r0
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	89 83       	std	Y+1, r24	; 0x01
  TCCR2B = prescaler;
    197e:	e1 eb       	ldi	r30, 0xB1	; 177
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	80 83       	st	Z, r24
  TIMSK2 = _BV(TOIE2); // enable interrupts
    1986:	e0 e7       	ldi	r30, 0x70	; 112
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	80 83       	st	Z, r24
  reset_timer2(); // reset counter
    198e:	0e 94 00 0c 	call	0x1800	; 0x1800 <reset_timer2>
}
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <init_timer3>:
void init_timer3(const uint8_t prescaler)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
  TCCR3B = prescaler;
    19a6:	e1 e9       	ldi	r30, 0x91	; 145
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	80 83       	st	Z, r24
  TIMSK3 = _BV(TOIE3); // enable interrupts
    19ae:	e1 e7       	ldi	r30, 0x71	; 113
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	80 83       	st	Z, r24
  reset_timer3(); // reset counter
    19b6:	0e 94 12 0c 	call	0x1824	; 0x1824 <reset_timer3>
}
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <init_timer4>:
void init_timer4(const uint8_t prescaler)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	89 83       	std	Y+1, r24	; 0x01
  TCCR4B = prescaler;
    19ce:	e1 ea       	ldi	r30, 0xA1	; 161
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	80 83       	st	Z, r24
  TIMSK4 = _BV(TOIE4); // enable interrupts
    19d6:	e2 e7       	ldi	r30, 0x72	; 114
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	80 83       	st	Z, r24
  reset_timer4(); // reset counter
    19de:	0e 94 25 0c 	call	0x184a	; 0x184a <reset_timer4>
}
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <init_timer5>:
void init_timer5(const uint8_t prescaler)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	89 83       	std	Y+1, r24	; 0x01
  TCCR5B = prescaler;
    19f6:	e1 e2       	ldi	r30, 0x21	; 33
    19f8:	f1 e0       	ldi	r31, 0x01	; 1
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	80 83       	st	Z, r24
  TIMSK5 = _BV(TOIE5); // enable interrupts
    19fe:	e3 e7       	ldi	r30, 0x73	; 115
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	80 83       	st	Z, r24
  reset_timer5(); // reset counter
    1a06:	0e 94 38 0c 	call	0x1870	; 0x1870 <reset_timer5>
}
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <timer_attach>:

void timer_attach(TimerInterrupt_t interrupt, void (*user_func)(void) )
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <timer_attach+0x6>
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	7b 83       	std	Y+3, r23	; 0x03
    1a22:	6a 83       	std	Y+2, r22	; 0x02
  // set the interrupt function to run
  // the supplied user's function
  TimerIntFunc[interrupt] = user_func;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e2 52       	subi	r30, 0x22	; 34
    1a32:	fb 4f       	sbci	r31, 0xFB	; 251
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	9b 81       	ldd	r25, Y+3	; 0x03
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <timer_detach>:

void timer_detach(TimerInterrupt_t interrupt)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	0f 92       	push	r0
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	89 83       	std	Y+1, r24	; 0x01
  // clear the user defined interrupt function
  TimerIntFunc[interrupt] = NULL;
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	fc 01       	movw	r30, r24
    1a60:	e2 52       	subi	r30, 0x22	; 34
    1a62:	fb 4f       	sbci	r31, 0xFB	; 251
    1a64:	11 82       	std	Z+1, r1	; 0x01
    1a66:	10 82       	st	Z, r1
}
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <_delay_loop_2>:

void
_delay_loop_2(uint16_t __count)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <_delay_loop_2+0x6>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	__asm__ volatile (
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <_delay_loop_2+0x12>
    1a86:	9a 83       	std	Y+2, r25	; 0x02
    1a88:	89 83       	std	Y+1, r24	; 0x01
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <sleep>:

void sleep(uint16_t time_ms)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	28 97       	sbiw	r28, 0x08	; 8
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	98 87       	std	Y+8, r25	; 0x08
    1aaa:	8f 83       	std	Y+7, r24	; 0x07
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * time_ms;
    1aac:	8f 81       	ldd	r24, Y+7	; 0x07
    1aae:	98 85       	ldd	r25, Y+8	; 0x08
    1ab0:	cc 01       	movw	r24, r24
    1ab2:	a0 e0       	ldi	r26, 0x00	; 0
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__floatunsisf>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a e7       	ldi	r20, 0x7A	; 122
    1acc:	55 e4       	ldi	r21, 0x45	; 69
    1ace:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	ab 83       	std	Y+3, r26	; 0x03
    1adc:	bc 83       	std	Y+4, r27	; 0x04
	if (__tmp < 1.0)
    1ade:	69 81       	ldd	r22, Y+1	; 0x01
    1ae0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 80 26 	call	0x4d00	; 0x4d00 <__cmpsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <sleep+0x6c>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	42 c0       	rjmp	.+132    	; 0x1b84 <sleep+0xf0>
	else if (__tmp > 65535)
    1b00:	69 81       	ldd	r22, Y+1	; 0x01
    1b02:	7a 81       	ldd	r23, Y+2	; 0x02
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__gesf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	64 f5       	brge	.+88     	; 0x1b70 <sleep+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
    1b18:	8f 81       	ldd	r24, Y+7	; 0x07
    1b1a:	98 85       	ldd	r25, Y+8	; 0x08
    1b1c:	cc 01       	movw	r24, r24
    1b1e:	a0 e0       	ldi	r26, 0x00	; 0
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__floatunsisf>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	bc 01       	movw	r22, r24
    1b30:	cd 01       	movw	r24, r26
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e2       	ldi	r20, 0x20	; 32
    1b38:	51 e4       	ldi	r21, 0x41	; 65
    1b3a:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	09 c0       	rjmp	.+18     	; 0x1b66 <sleep+0xd2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
    1b54:	80 e9       	ldi	r24, 0x90	; 144
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_delay_loop_2>
			__ticks --;
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	99 f7       	brne	.-26     	; 0x1b54 <sleep+0xc0>
    1b6e:	0e c0       	rjmp	.+28     	; 0x1b8c <sleep+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b70:	69 81       	ldd	r22, Y+1	; 0x01
    1b72:	7a 81       	ldd	r23, Y+2	; 0x02
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	9c 81       	ldd	r25, Y+4	; 0x04
    1b78:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
	_delay_loop_2(__ticks);
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_delay_loop_2>
}
    1b8c:	28 96       	adiw	r28, 0x08	; 8
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <__vector_23>:
    }
  }
}*/

ISR(TIMER0_OVF_vect) 
{
    1b9e:	1f 92       	push	r1
    1ba0:	0f 92       	push	r0
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	0f 92       	push	r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	2f 93       	push	r18
    1baa:	3f 93       	push	r19
    1bac:	4f 93       	push	r20
    1bae:	5f 93       	push	r21
    1bb0:	6f 93       	push	r22
    1bb2:	7f 93       	push	r23
    1bb4:	8f 93       	push	r24
    1bb6:	9f 93       	push	r25
    1bb8:	af 93       	push	r26
    1bba:	bf 93       	push	r27
    1bbc:	ef 93       	push	r30
    1bbe:	ff 93       	push	r31
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
  timer0_ovrflow_cnt++;
    1bc8:	80 91 71 05 	lds	r24, 0x0571
    1bcc:	90 91 72 05 	lds	r25, 0x0572
    1bd0:	a0 91 73 05 	lds	r26, 0x0573
    1bd4:	b0 91 74 05 	lds	r27, 0x0574
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	a1 1d       	adc	r26, r1
    1bdc:	b1 1d       	adc	r27, r1
    1bde:	80 93 71 05 	sts	0x0571, r24
    1be2:	90 93 72 05 	sts	0x0572, r25
    1be6:	a0 93 73 05 	sts	0x0573, r26
    1bea:	b0 93 74 05 	sts	0x0574, r27
  timer_sleep_cnt++;
    1bee:	80 91 79 05 	lds	r24, 0x0579
    1bf2:	90 91 7a 05 	lds	r25, 0x057A
    1bf6:	a0 91 7b 05 	lds	r26, 0x057B
    1bfa:	b0 91 7c 05 	lds	r27, 0x057C
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	a1 1d       	adc	r26, r1
    1c02:	b1 1d       	adc	r27, r1
    1c04:	80 93 79 05 	sts	0x0579, r24
    1c08:	90 93 7a 05 	sts	0x057A, r25
    1c0c:	a0 93 7b 05 	sts	0x057B, r26
    1c10:	b0 93 7c 05 	sts	0x057C, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER0_OVF_interrupt);
    1c14:	80 91 e2 04 	lds	r24, 0x04E2
    1c18:	90 91 e3 04 	lds	r25, 0x04E3
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	29 f0       	breq	.+10     	; 0x1c2a <__vector_23+0x8c>
    1c20:	e0 91 e2 04 	lds	r30, 0x04E2
    1c24:	f0 91 e3 04 	lds	r31, 0x04E3
    1c28:	09 95       	icall
}
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	ff 91       	pop	r31
    1c30:	ef 91       	pop	r30
    1c32:	bf 91       	pop	r27
    1c34:	af 91       	pop	r26
    1c36:	9f 91       	pop	r25
    1c38:	8f 91       	pop	r24
    1c3a:	7f 91       	pop	r23
    1c3c:	6f 91       	pop	r22
    1c3e:	5f 91       	pop	r21
    1c40:	4f 91       	pop	r20
    1c42:	3f 91       	pop	r19
    1c44:	2f 91       	pop	r18
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	0f 90       	pop	r0
    1c4c:	1f 90       	pop	r1
    1c4e:	18 95       	reti

00001c50 <__vector_20>:
ISR(TIMER1_OVF_vect) 
{
    1c50:	1f 92       	push	r1
    1c52:	0f 92       	push	r0
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	0f 92       	push	r0
    1c58:	11 24       	eor	r1, r1
    1c5a:	2f 93       	push	r18
    1c5c:	3f 93       	push	r19
    1c5e:	4f 93       	push	r20
    1c60:	5f 93       	push	r21
    1c62:	6f 93       	push	r22
    1c64:	7f 93       	push	r23
    1c66:	8f 93       	push	r24
    1c68:	9f 93       	push	r25
    1c6a:	af 93       	push	r26
    1c6c:	bf 93       	push	r27
    1c6e:	ef 93       	push	r30
    1c70:	ff 93       	push	r31
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
  timer1_ovrflow_cnt++;
    1c7a:	80 91 6d 05 	lds	r24, 0x056D
    1c7e:	90 91 6e 05 	lds	r25, 0x056E
    1c82:	a0 91 6f 05 	lds	r26, 0x056F
    1c86:	b0 91 70 05 	lds	r27, 0x0570
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	a1 1d       	adc	r26, r1
    1c8e:	b1 1d       	adc	r27, r1
    1c90:	80 93 6d 05 	sts	0x056D, r24
    1c94:	90 93 6e 05 	sts	0x056E, r25
    1c98:	a0 93 6f 05 	sts	0x056F, r26
    1c9c:	b0 93 70 05 	sts	0x0570, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER1_OVF_interrupt);
    1ca0:	80 91 ec 04 	lds	r24, 0x04EC
    1ca4:	90 91 ed 04 	lds	r25, 0x04ED
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	29 f0       	breq	.+10     	; 0x1cb6 <__vector_20+0x66>
    1cac:	e0 91 ec 04 	lds	r30, 0x04EC
    1cb0:	f0 91 ed 04 	lds	r31, 0x04ED
    1cb4:	09 95       	icall
}
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	ff 91       	pop	r31
    1cbc:	ef 91       	pop	r30
    1cbe:	bf 91       	pop	r27
    1cc0:	af 91       	pop	r26
    1cc2:	9f 91       	pop	r25
    1cc4:	8f 91       	pop	r24
    1cc6:	7f 91       	pop	r23
    1cc8:	6f 91       	pop	r22
    1cca:	5f 91       	pop	r21
    1ccc:	4f 91       	pop	r20
    1cce:	3f 91       	pop	r19
    1cd0:	2f 91       	pop	r18
    1cd2:	0f 90       	pop	r0
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	0f 90       	pop	r0
    1cd8:	1f 90       	pop	r1
    1cda:	18 95       	reti

00001cdc <__vector_15>:
ISR(TIMER2_OVF_vect) 
{
    1cdc:	1f 92       	push	r1
    1cde:	0f 92       	push	r0
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	0f 92       	push	r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	2f 93       	push	r18
    1ce8:	3f 93       	push	r19
    1cea:	4f 93       	push	r20
    1cec:	5f 93       	push	r21
    1cee:	6f 93       	push	r22
    1cf0:	7f 93       	push	r23
    1cf2:	8f 93       	push	r24
    1cf4:	9f 93       	push	r25
    1cf6:	af 93       	push	r26
    1cf8:	bf 93       	push	r27
    1cfa:	ef 93       	push	r30
    1cfc:	ff 93       	push	r31
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
  timer2_ovrflow_cnt++;
    1d06:	80 91 75 05 	lds	r24, 0x0575
    1d0a:	90 91 76 05 	lds	r25, 0x0576
    1d0e:	a0 91 77 05 	lds	r26, 0x0577
    1d12:	b0 91 78 05 	lds	r27, 0x0578
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	a1 1d       	adc	r26, r1
    1d1a:	b1 1d       	adc	r27, r1
    1d1c:	80 93 75 05 	sts	0x0575, r24
    1d20:	90 93 76 05 	sts	0x0576, r25
    1d24:	a0 93 77 05 	sts	0x0577, r26
    1d28:	b0 93 78 05 	sts	0x0578, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER2_OVF_interrupt);
    1d2c:	80 91 f2 04 	lds	r24, 0x04F2
    1d30:	90 91 f3 04 	lds	r25, 0x04F3
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	29 f0       	breq	.+10     	; 0x1d42 <__vector_15+0x66>
    1d38:	e0 91 f2 04 	lds	r30, 0x04F2
    1d3c:	f0 91 f3 04 	lds	r31, 0x04F3
    1d40:	09 95       	icall
}
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	ff 91       	pop	r31
    1d48:	ef 91       	pop	r30
    1d4a:	bf 91       	pop	r27
    1d4c:	af 91       	pop	r26
    1d4e:	9f 91       	pop	r25
    1d50:	8f 91       	pop	r24
    1d52:	7f 91       	pop	r23
    1d54:	6f 91       	pop	r22
    1d56:	5f 91       	pop	r21
    1d58:	4f 91       	pop	r20
    1d5a:	3f 91       	pop	r19
    1d5c:	2f 91       	pop	r18
    1d5e:	0f 90       	pop	r0
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	0f 90       	pop	r0
    1d64:	1f 90       	pop	r1
    1d66:	18 95       	reti

00001d68 <__vector_35>:
ISR(TIMER3_OVF_vect) 
{
    1d68:	1f 92       	push	r1
    1d6a:	0f 92       	push	r0
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	0f 92       	push	r0
    1d70:	11 24       	eor	r1, r1
    1d72:	2f 93       	push	r18
    1d74:	3f 93       	push	r19
    1d76:	4f 93       	push	r20
    1d78:	5f 93       	push	r21
    1d7a:	6f 93       	push	r22
    1d7c:	7f 93       	push	r23
    1d7e:	8f 93       	push	r24
    1d80:	9f 93       	push	r25
    1d82:	af 93       	push	r26
    1d84:	bf 93       	push	r27
    1d86:	ef 93       	push	r30
    1d88:	ff 93       	push	r31
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
  timer3_ovrflow_cnt++;
    1d92:	80 91 7d 05 	lds	r24, 0x057D
    1d96:	90 91 7e 05 	lds	r25, 0x057E
    1d9a:	a0 91 7f 05 	lds	r26, 0x057F
    1d9e:	b0 91 80 05 	lds	r27, 0x0580
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	a1 1d       	adc	r26, r1
    1da6:	b1 1d       	adc	r27, r1
    1da8:	80 93 7d 05 	sts	0x057D, r24
    1dac:	90 93 7e 05 	sts	0x057E, r25
    1db0:	a0 93 7f 05 	sts	0x057F, r26
    1db4:	b0 93 80 05 	sts	0x0580, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER3_OVF_interrupt);
    1db8:	80 91 fc 04 	lds	r24, 0x04FC
    1dbc:	90 91 fd 04 	lds	r25, 0x04FD
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	29 f0       	breq	.+10     	; 0x1dce <__vector_35+0x66>
    1dc4:	e0 91 fc 04 	lds	r30, 0x04FC
    1dc8:	f0 91 fd 04 	lds	r31, 0x04FD
    1dcc:	09 95       	icall
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	ff 91       	pop	r31
    1dd4:	ef 91       	pop	r30
    1dd6:	bf 91       	pop	r27
    1dd8:	af 91       	pop	r26
    1dda:	9f 91       	pop	r25
    1ddc:	8f 91       	pop	r24
    1dde:	7f 91       	pop	r23
    1de0:	6f 91       	pop	r22
    1de2:	5f 91       	pop	r21
    1de4:	4f 91       	pop	r20
    1de6:	3f 91       	pop	r19
    1de8:	2f 91       	pop	r18
    1dea:	0f 90       	pop	r0
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	0f 90       	pop	r0
    1df0:	1f 90       	pop	r1
    1df2:	18 95       	reti

00001df4 <__vector_45>:
ISR(TIMER4_OVF_vect) 
{
    1df4:	1f 92       	push	r1
    1df6:	0f 92       	push	r0
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	0f 92       	push	r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	2f 93       	push	r18
    1e00:	3f 93       	push	r19
    1e02:	4f 93       	push	r20
    1e04:	5f 93       	push	r21
    1e06:	6f 93       	push	r22
    1e08:	7f 93       	push	r23
    1e0a:	8f 93       	push	r24
    1e0c:	9f 93       	push	r25
    1e0e:	af 93       	push	r26
    1e10:	bf 93       	push	r27
    1e12:	ef 93       	push	r30
    1e14:	ff 93       	push	r31
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
  timer4_ovrflow_cnt++;
    1e1e:	80 91 69 05 	lds	r24, 0x0569
    1e22:	90 91 6a 05 	lds	r25, 0x056A
    1e26:	a0 91 6b 05 	lds	r26, 0x056B
    1e2a:	b0 91 6c 05 	lds	r27, 0x056C
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	a1 1d       	adc	r26, r1
    1e32:	b1 1d       	adc	r27, r1
    1e34:	80 93 69 05 	sts	0x0569, r24
    1e38:	90 93 6a 05 	sts	0x056A, r25
    1e3c:	a0 93 6b 05 	sts	0x056B, r26
    1e40:	b0 93 6c 05 	sts	0x056C, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER4_OVF_interrupt);
    1e44:	80 91 06 05 	lds	r24, 0x0506
    1e48:	90 91 07 05 	lds	r25, 0x0507
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	29 f0       	breq	.+10     	; 0x1e5a <__vector_45+0x66>
    1e50:	e0 91 06 05 	lds	r30, 0x0506
    1e54:	f0 91 07 05 	lds	r31, 0x0507
    1e58:	09 95       	icall
}
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	ff 91       	pop	r31
    1e60:	ef 91       	pop	r30
    1e62:	bf 91       	pop	r27
    1e64:	af 91       	pop	r26
    1e66:	9f 91       	pop	r25
    1e68:	8f 91       	pop	r24
    1e6a:	7f 91       	pop	r23
    1e6c:	6f 91       	pop	r22
    1e6e:	5f 91       	pop	r21
    1e70:	4f 91       	pop	r20
    1e72:	3f 91       	pop	r19
    1e74:	2f 91       	pop	r18
    1e76:	0f 90       	pop	r0
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	0f 90       	pop	r0
    1e7c:	1f 90       	pop	r1
    1e7e:	18 95       	reti

00001e80 <__vector_50>:
ISR(TIMER5_OVF_vect) 
{
    1e80:	1f 92       	push	r1
    1e82:	0f 92       	push	r0
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	0f 92       	push	r0
    1e88:	11 24       	eor	r1, r1
    1e8a:	2f 93       	push	r18
    1e8c:	3f 93       	push	r19
    1e8e:	4f 93       	push	r20
    1e90:	5f 93       	push	r21
    1e92:	6f 93       	push	r22
    1e94:	7f 93       	push	r23
    1e96:	8f 93       	push	r24
    1e98:	9f 93       	push	r25
    1e9a:	af 93       	push	r26
    1e9c:	bf 93       	push	r27
    1e9e:	ef 93       	push	r30
    1ea0:	ff 93       	push	r31
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
  timer5_ovrflow_cnt++;
    1eaa:	80 91 81 05 	lds	r24, 0x0581
    1eae:	90 91 82 05 	lds	r25, 0x0582
    1eb2:	a0 91 83 05 	lds	r26, 0x0583
    1eb6:	b0 91 84 05 	lds	r27, 0x0584
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	a1 1d       	adc	r26, r1
    1ebe:	b1 1d       	adc	r27, r1
    1ec0:	80 93 81 05 	sts	0x0581, r24
    1ec4:	90 93 82 05 	sts	0x0582, r25
    1ec8:	a0 93 83 05 	sts	0x0583, r26
    1ecc:	b0 93 84 05 	sts	0x0584, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER5_OVF_interrupt);
    1ed0:	80 91 10 05 	lds	r24, 0x0510
    1ed4:	90 91 11 05 	lds	r25, 0x0511
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	29 f0       	breq	.+10     	; 0x1ee6 <__vector_50+0x66>
    1edc:	e0 91 10 05 	lds	r30, 0x0510
    1ee0:	f0 91 11 05 	lds	r31, 0x0511
    1ee4:	09 95       	icall
}
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	ff 91       	pop	r31
    1eec:	ef 91       	pop	r30
    1eee:	bf 91       	pop	r27
    1ef0:	af 91       	pop	r26
    1ef2:	9f 91       	pop	r25
    1ef4:	8f 91       	pop	r24
    1ef6:	7f 91       	pop	r23
    1ef8:	6f 91       	pop	r22
    1efa:	5f 91       	pop	r21
    1efc:	4f 91       	pop	r20
    1efe:	3f 91       	pop	r19
    1f00:	2f 91       	pop	r18
    1f02:	0f 90       	pop	r0
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	0f 90       	pop	r0
    1f08:	1f 90       	pop	r1
    1f0a:	18 95       	reti

00001f0c <__vector_21>:
ISR(TIMER0_COMPA_vect)
{
    1f0c:	1f 92       	push	r1
    1f0e:	0f 92       	push	r0
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	0f 92       	push	r0
    1f14:	11 24       	eor	r1, r1
    1f16:	2f 93       	push	r18
    1f18:	3f 93       	push	r19
    1f1a:	4f 93       	push	r20
    1f1c:	5f 93       	push	r21
    1f1e:	6f 93       	push	r22
    1f20:	7f 93       	push	r23
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	af 93       	push	r26
    1f28:	bf 93       	push	r27
    1f2a:	ef 93       	push	r30
    1f2c:	ff 93       	push	r31
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPA_interrupt);
    1f36:	80 91 de 04 	lds	r24, 0x04DE
    1f3a:	90 91 df 04 	lds	r25, 0x04DF
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	29 f0       	breq	.+10     	; 0x1f4c <__vector_21+0x40>
    1f42:	e0 91 de 04 	lds	r30, 0x04DE
    1f46:	f0 91 df 04 	lds	r31, 0x04DF
    1f4a:	09 95       	icall
}
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	ff 91       	pop	r31
    1f52:	ef 91       	pop	r30
    1f54:	bf 91       	pop	r27
    1f56:	af 91       	pop	r26
    1f58:	9f 91       	pop	r25
    1f5a:	8f 91       	pop	r24
    1f5c:	7f 91       	pop	r23
    1f5e:	6f 91       	pop	r22
    1f60:	5f 91       	pop	r21
    1f62:	4f 91       	pop	r20
    1f64:	3f 91       	pop	r19
    1f66:	2f 91       	pop	r18
    1f68:	0f 90       	pop	r0
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	0f 90       	pop	r0
    1f6e:	1f 90       	pop	r1
    1f70:	18 95       	reti

00001f72 <__vector_22>:
ISR(TIMER0_COMPB_vect)
{
    1f72:	1f 92       	push	r1
    1f74:	0f 92       	push	r0
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	0f 92       	push	r0
    1f7a:	11 24       	eor	r1, r1
    1f7c:	2f 93       	push	r18
    1f7e:	3f 93       	push	r19
    1f80:	4f 93       	push	r20
    1f82:	5f 93       	push	r21
    1f84:	6f 93       	push	r22
    1f86:	7f 93       	push	r23
    1f88:	8f 93       	push	r24
    1f8a:	9f 93       	push	r25
    1f8c:	af 93       	push	r26
    1f8e:	bf 93       	push	r27
    1f90:	ef 93       	push	r30
    1f92:	ff 93       	push	r31
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPB_interrupt);
    1f9c:	80 91 e0 04 	lds	r24, 0x04E0
    1fa0:	90 91 e1 04 	lds	r25, 0x04E1
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	29 f0       	breq	.+10     	; 0x1fb2 <__vector_22+0x40>
    1fa8:	e0 91 e0 04 	lds	r30, 0x04E0
    1fac:	f0 91 e1 04 	lds	r31, 0x04E1
    1fb0:	09 95       	icall
}
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	ff 91       	pop	r31
    1fb8:	ef 91       	pop	r30
    1fba:	bf 91       	pop	r27
    1fbc:	af 91       	pop	r26
    1fbe:	9f 91       	pop	r25
    1fc0:	8f 91       	pop	r24
    1fc2:	7f 91       	pop	r23
    1fc4:	6f 91       	pop	r22
    1fc6:	5f 91       	pop	r21
    1fc8:	4f 91       	pop	r20
    1fca:	3f 91       	pop	r19
    1fcc:	2f 91       	pop	r18
    1fce:	0f 90       	pop	r0
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	0f 90       	pop	r0
    1fd4:	1f 90       	pop	r1
    1fd6:	18 95       	reti

00001fd8 <__vector_16>:
ISR(TIMER1_CAPT_vect)
{
    1fd8:	1f 92       	push	r1
    1fda:	0f 92       	push	r0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	0f 92       	push	r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	2f 93       	push	r18
    1fe4:	3f 93       	push	r19
    1fe6:	4f 93       	push	r20
    1fe8:	5f 93       	push	r21
    1fea:	6f 93       	push	r22
    1fec:	7f 93       	push	r23
    1fee:	8f 93       	push	r24
    1ff0:	9f 93       	push	r25
    1ff2:	af 93       	push	r26
    1ff4:	bf 93       	push	r27
    1ff6:	ef 93       	push	r30
    1ff8:	ff 93       	push	r31
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER1_CAPT_interrupt);
    2002:	80 91 e4 04 	lds	r24, 0x04E4
    2006:	90 91 e5 04 	lds	r25, 0x04E5
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	29 f0       	breq	.+10     	; 0x2018 <__vector_16+0x40>
    200e:	e0 91 e4 04 	lds	r30, 0x04E4
    2012:	f0 91 e5 04 	lds	r31, 0x04E5
    2016:	09 95       	icall
}
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	ff 91       	pop	r31
    201e:	ef 91       	pop	r30
    2020:	bf 91       	pop	r27
    2022:	af 91       	pop	r26
    2024:	9f 91       	pop	r25
    2026:	8f 91       	pop	r24
    2028:	7f 91       	pop	r23
    202a:	6f 91       	pop	r22
    202c:	5f 91       	pop	r21
    202e:	4f 91       	pop	r20
    2030:	3f 91       	pop	r19
    2032:	2f 91       	pop	r18
    2034:	0f 90       	pop	r0
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	0f 90       	pop	r0
    203a:	1f 90       	pop	r1
    203c:	18 95       	reti

0000203e <__vector_17>:
ISR(TIMER1_COMPA_vect)
{
    203e:	1f 92       	push	r1
    2040:	0f 92       	push	r0
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	0f 92       	push	r0
    2046:	11 24       	eor	r1, r1
    2048:	2f 93       	push	r18
    204a:	3f 93       	push	r19
    204c:	4f 93       	push	r20
    204e:	5f 93       	push	r21
    2050:	6f 93       	push	r22
    2052:	7f 93       	push	r23
    2054:	8f 93       	push	r24
    2056:	9f 93       	push	r25
    2058:	af 93       	push	r26
    205a:	bf 93       	push	r27
    205c:	ef 93       	push	r30
    205e:	ff 93       	push	r31
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPA_interrupt);
    2068:	80 91 e6 04 	lds	r24, 0x04E6
    206c:	90 91 e7 04 	lds	r25, 0x04E7
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	29 f0       	breq	.+10     	; 0x207e <__vector_17+0x40>
    2074:	e0 91 e6 04 	lds	r30, 0x04E6
    2078:	f0 91 e7 04 	lds	r31, 0x04E7
    207c:	09 95       	icall
}
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	ff 91       	pop	r31
    2084:	ef 91       	pop	r30
    2086:	bf 91       	pop	r27
    2088:	af 91       	pop	r26
    208a:	9f 91       	pop	r25
    208c:	8f 91       	pop	r24
    208e:	7f 91       	pop	r23
    2090:	6f 91       	pop	r22
    2092:	5f 91       	pop	r21
    2094:	4f 91       	pop	r20
    2096:	3f 91       	pop	r19
    2098:	2f 91       	pop	r18
    209a:	0f 90       	pop	r0
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	0f 90       	pop	r0
    20a0:	1f 90       	pop	r1
    20a2:	18 95       	reti

000020a4 <__vector_18>:
ISR(TIMER1_COMPB_vect)
{
    20a4:	1f 92       	push	r1
    20a6:	0f 92       	push	r0
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	0f 92       	push	r0
    20ac:	11 24       	eor	r1, r1
    20ae:	2f 93       	push	r18
    20b0:	3f 93       	push	r19
    20b2:	4f 93       	push	r20
    20b4:	5f 93       	push	r21
    20b6:	6f 93       	push	r22
    20b8:	7f 93       	push	r23
    20ba:	8f 93       	push	r24
    20bc:	9f 93       	push	r25
    20be:	af 93       	push	r26
    20c0:	bf 93       	push	r27
    20c2:	ef 93       	push	r30
    20c4:	ff 93       	push	r31
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPB_interrupt);
    20ce:	80 91 e8 04 	lds	r24, 0x04E8
    20d2:	90 91 e9 04 	lds	r25, 0x04E9
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	29 f0       	breq	.+10     	; 0x20e4 <__vector_18+0x40>
    20da:	e0 91 e8 04 	lds	r30, 0x04E8
    20de:	f0 91 e9 04 	lds	r31, 0x04E9
    20e2:	09 95       	icall
}
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	ff 91       	pop	r31
    20ea:	ef 91       	pop	r30
    20ec:	bf 91       	pop	r27
    20ee:	af 91       	pop	r26
    20f0:	9f 91       	pop	r25
    20f2:	8f 91       	pop	r24
    20f4:	7f 91       	pop	r23
    20f6:	6f 91       	pop	r22
    20f8:	5f 91       	pop	r21
    20fa:	4f 91       	pop	r20
    20fc:	3f 91       	pop	r19
    20fe:	2f 91       	pop	r18
    2100:	0f 90       	pop	r0
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	0f 90       	pop	r0
    2106:	1f 90       	pop	r1
    2108:	18 95       	reti

0000210a <__vector_19>:
ISR(TIMER1_COMPC_vect)
{
    210a:	1f 92       	push	r1
    210c:	0f 92       	push	r0
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	0f 92       	push	r0
    2112:	11 24       	eor	r1, r1
    2114:	2f 93       	push	r18
    2116:	3f 93       	push	r19
    2118:	4f 93       	push	r20
    211a:	5f 93       	push	r21
    211c:	6f 93       	push	r22
    211e:	7f 93       	push	r23
    2120:	8f 93       	push	r24
    2122:	9f 93       	push	r25
    2124:	af 93       	push	r26
    2126:	bf 93       	push	r27
    2128:	ef 93       	push	r30
    212a:	ff 93       	push	r31
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPC_interrupt);
    2134:	80 91 ea 04 	lds	r24, 0x04EA
    2138:	90 91 eb 04 	lds	r25, 0x04EB
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	29 f0       	breq	.+10     	; 0x214a <__vector_19+0x40>
    2140:	e0 91 ea 04 	lds	r30, 0x04EA
    2144:	f0 91 eb 04 	lds	r31, 0x04EB
    2148:	09 95       	icall
}
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	ff 91       	pop	r31
    2150:	ef 91       	pop	r30
    2152:	bf 91       	pop	r27
    2154:	af 91       	pop	r26
    2156:	9f 91       	pop	r25
    2158:	8f 91       	pop	r24
    215a:	7f 91       	pop	r23
    215c:	6f 91       	pop	r22
    215e:	5f 91       	pop	r21
    2160:	4f 91       	pop	r20
    2162:	3f 91       	pop	r19
    2164:	2f 91       	pop	r18
    2166:	0f 90       	pop	r0
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	0f 90       	pop	r0
    216c:	1f 90       	pop	r1
    216e:	18 95       	reti

00002170 <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
    2170:	1f 92       	push	r1
    2172:	0f 92       	push	r0
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	0f 92       	push	r0
    2178:	11 24       	eor	r1, r1
    217a:	2f 93       	push	r18
    217c:	3f 93       	push	r19
    217e:	4f 93       	push	r20
    2180:	5f 93       	push	r21
    2182:	6f 93       	push	r22
    2184:	7f 93       	push	r23
    2186:	8f 93       	push	r24
    2188:	9f 93       	push	r25
    218a:	af 93       	push	r26
    218c:	bf 93       	push	r27
    218e:	ef 93       	push	r30
    2190:	ff 93       	push	r31
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPA_interrupt);
    219a:	80 91 ee 04 	lds	r24, 0x04EE
    219e:	90 91 ef 04 	lds	r25, 0x04EF
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	29 f0       	breq	.+10     	; 0x21b0 <__vector_13+0x40>
    21a6:	e0 91 ee 04 	lds	r30, 0x04EE
    21aa:	f0 91 ef 04 	lds	r31, 0x04EF
    21ae:	09 95       	icall
}
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	ff 91       	pop	r31
    21b6:	ef 91       	pop	r30
    21b8:	bf 91       	pop	r27
    21ba:	af 91       	pop	r26
    21bc:	9f 91       	pop	r25
    21be:	8f 91       	pop	r24
    21c0:	7f 91       	pop	r23
    21c2:	6f 91       	pop	r22
    21c4:	5f 91       	pop	r21
    21c6:	4f 91       	pop	r20
    21c8:	3f 91       	pop	r19
    21ca:	2f 91       	pop	r18
    21cc:	0f 90       	pop	r0
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	0f 90       	pop	r0
    21d2:	1f 90       	pop	r1
    21d4:	18 95       	reti

000021d6 <__vector_14>:
ISR(TIMER2_COMPB_vect)
{
    21d6:	1f 92       	push	r1
    21d8:	0f 92       	push	r0
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	0f 92       	push	r0
    21de:	11 24       	eor	r1, r1
    21e0:	2f 93       	push	r18
    21e2:	3f 93       	push	r19
    21e4:	4f 93       	push	r20
    21e6:	5f 93       	push	r21
    21e8:	6f 93       	push	r22
    21ea:	7f 93       	push	r23
    21ec:	8f 93       	push	r24
    21ee:	9f 93       	push	r25
    21f0:	af 93       	push	r26
    21f2:	bf 93       	push	r27
    21f4:	ef 93       	push	r30
    21f6:	ff 93       	push	r31
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPB_interrupt);
    2200:	80 91 f0 04 	lds	r24, 0x04F0
    2204:	90 91 f1 04 	lds	r25, 0x04F1
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	29 f0       	breq	.+10     	; 0x2216 <__stack+0x17>
    220c:	e0 91 f0 04 	lds	r30, 0x04F0
    2210:	f0 91 f1 04 	lds	r31, 0x04F1
    2214:	09 95       	icall
}
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	ff 91       	pop	r31
    221c:	ef 91       	pop	r30
    221e:	bf 91       	pop	r27
    2220:	af 91       	pop	r26
    2222:	9f 91       	pop	r25
    2224:	8f 91       	pop	r24
    2226:	7f 91       	pop	r23
    2228:	6f 91       	pop	r22
    222a:	5f 91       	pop	r21
    222c:	4f 91       	pop	r20
    222e:	3f 91       	pop	r19
    2230:	2f 91       	pop	r18
    2232:	0f 90       	pop	r0
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	0f 90       	pop	r0
    2238:	1f 90       	pop	r1
    223a:	18 95       	reti

0000223c <__vector_31>:
ISR(TIMER3_CAPT_vect)
{
    223c:	1f 92       	push	r1
    223e:	0f 92       	push	r0
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	0f 92       	push	r0
    2244:	11 24       	eor	r1, r1
    2246:	2f 93       	push	r18
    2248:	3f 93       	push	r19
    224a:	4f 93       	push	r20
    224c:	5f 93       	push	r21
    224e:	6f 93       	push	r22
    2250:	7f 93       	push	r23
    2252:	8f 93       	push	r24
    2254:	9f 93       	push	r25
    2256:	af 93       	push	r26
    2258:	bf 93       	push	r27
    225a:	ef 93       	push	r30
    225c:	ff 93       	push	r31
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER3_CAPT_interrupt);
    2266:	80 91 f4 04 	lds	r24, 0x04F4
    226a:	90 91 f5 04 	lds	r25, 0x04F5
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	29 f0       	breq	.+10     	; 0x227c <__vector_31+0x40>
    2272:	e0 91 f4 04 	lds	r30, 0x04F4
    2276:	f0 91 f5 04 	lds	r31, 0x04F5
    227a:	09 95       	icall
}
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	ff 91       	pop	r31
    2282:	ef 91       	pop	r30
    2284:	bf 91       	pop	r27
    2286:	af 91       	pop	r26
    2288:	9f 91       	pop	r25
    228a:	8f 91       	pop	r24
    228c:	7f 91       	pop	r23
    228e:	6f 91       	pop	r22
    2290:	5f 91       	pop	r21
    2292:	4f 91       	pop	r20
    2294:	3f 91       	pop	r19
    2296:	2f 91       	pop	r18
    2298:	0f 90       	pop	r0
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	0f 90       	pop	r0
    229e:	1f 90       	pop	r1
    22a0:	18 95       	reti

000022a2 <__vector_32>:
ISR(TIMER3_COMPA_vect)
{
    22a2:	1f 92       	push	r1
    22a4:	0f 92       	push	r0
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	0f 92       	push	r0
    22aa:	11 24       	eor	r1, r1
    22ac:	2f 93       	push	r18
    22ae:	3f 93       	push	r19
    22b0:	4f 93       	push	r20
    22b2:	5f 93       	push	r21
    22b4:	6f 93       	push	r22
    22b6:	7f 93       	push	r23
    22b8:	8f 93       	push	r24
    22ba:	9f 93       	push	r25
    22bc:	af 93       	push	r26
    22be:	bf 93       	push	r27
    22c0:	ef 93       	push	r30
    22c2:	ff 93       	push	r31
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPA_interrupt);
    22cc:	80 91 f6 04 	lds	r24, 0x04F6
    22d0:	90 91 f7 04 	lds	r25, 0x04F7
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	29 f0       	breq	.+10     	; 0x22e2 <__vector_32+0x40>
    22d8:	e0 91 f6 04 	lds	r30, 0x04F6
    22dc:	f0 91 f7 04 	lds	r31, 0x04F7
    22e0:	09 95       	icall
}
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	ff 91       	pop	r31
    22e8:	ef 91       	pop	r30
    22ea:	bf 91       	pop	r27
    22ec:	af 91       	pop	r26
    22ee:	9f 91       	pop	r25
    22f0:	8f 91       	pop	r24
    22f2:	7f 91       	pop	r23
    22f4:	6f 91       	pop	r22
    22f6:	5f 91       	pop	r21
    22f8:	4f 91       	pop	r20
    22fa:	3f 91       	pop	r19
    22fc:	2f 91       	pop	r18
    22fe:	0f 90       	pop	r0
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	0f 90       	pop	r0
    2304:	1f 90       	pop	r1
    2306:	18 95       	reti

00002308 <__vector_33>:
ISR(TIMER3_COMPB_vect)
{
    2308:	1f 92       	push	r1
    230a:	0f 92       	push	r0
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	0f 92       	push	r0
    2310:	11 24       	eor	r1, r1
    2312:	2f 93       	push	r18
    2314:	3f 93       	push	r19
    2316:	4f 93       	push	r20
    2318:	5f 93       	push	r21
    231a:	6f 93       	push	r22
    231c:	7f 93       	push	r23
    231e:	8f 93       	push	r24
    2320:	9f 93       	push	r25
    2322:	af 93       	push	r26
    2324:	bf 93       	push	r27
    2326:	ef 93       	push	r30
    2328:	ff 93       	push	r31
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPB_interrupt);
    2332:	80 91 f8 04 	lds	r24, 0x04F8
    2336:	90 91 f9 04 	lds	r25, 0x04F9
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	29 f0       	breq	.+10     	; 0x2348 <__vector_33+0x40>
    233e:	e0 91 f8 04 	lds	r30, 0x04F8
    2342:	f0 91 f9 04 	lds	r31, 0x04F9
    2346:	09 95       	icall
}
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	ff 91       	pop	r31
    234e:	ef 91       	pop	r30
    2350:	bf 91       	pop	r27
    2352:	af 91       	pop	r26
    2354:	9f 91       	pop	r25
    2356:	8f 91       	pop	r24
    2358:	7f 91       	pop	r23
    235a:	6f 91       	pop	r22
    235c:	5f 91       	pop	r21
    235e:	4f 91       	pop	r20
    2360:	3f 91       	pop	r19
    2362:	2f 91       	pop	r18
    2364:	0f 90       	pop	r0
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	0f 90       	pop	r0
    236a:	1f 90       	pop	r1
    236c:	18 95       	reti

0000236e <__vector_34>:
ISR(TIMER3_COMPC_vect)
{
    236e:	1f 92       	push	r1
    2370:	0f 92       	push	r0
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	0f 92       	push	r0
    2376:	11 24       	eor	r1, r1
    2378:	2f 93       	push	r18
    237a:	3f 93       	push	r19
    237c:	4f 93       	push	r20
    237e:	5f 93       	push	r21
    2380:	6f 93       	push	r22
    2382:	7f 93       	push	r23
    2384:	8f 93       	push	r24
    2386:	9f 93       	push	r25
    2388:	af 93       	push	r26
    238a:	bf 93       	push	r27
    238c:	ef 93       	push	r30
    238e:	ff 93       	push	r31
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPC_interrupt);
    2398:	80 91 fa 04 	lds	r24, 0x04FA
    239c:	90 91 fb 04 	lds	r25, 0x04FB
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	29 f0       	breq	.+10     	; 0x23ae <__vector_34+0x40>
    23a4:	e0 91 fa 04 	lds	r30, 0x04FA
    23a8:	f0 91 fb 04 	lds	r31, 0x04FB
    23ac:	09 95       	icall
}
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	ff 91       	pop	r31
    23b4:	ef 91       	pop	r30
    23b6:	bf 91       	pop	r27
    23b8:	af 91       	pop	r26
    23ba:	9f 91       	pop	r25
    23bc:	8f 91       	pop	r24
    23be:	7f 91       	pop	r23
    23c0:	6f 91       	pop	r22
    23c2:	5f 91       	pop	r21
    23c4:	4f 91       	pop	r20
    23c6:	3f 91       	pop	r19
    23c8:	2f 91       	pop	r18
    23ca:	0f 90       	pop	r0
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	0f 90       	pop	r0
    23d0:	1f 90       	pop	r1
    23d2:	18 95       	reti

000023d4 <__vector_41>:
ISR(TIMER4_CAPT_vect)
{
    23d4:	1f 92       	push	r1
    23d6:	0f 92       	push	r0
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	0f 92       	push	r0
    23dc:	11 24       	eor	r1, r1
    23de:	2f 93       	push	r18
    23e0:	3f 93       	push	r19
    23e2:	4f 93       	push	r20
    23e4:	5f 93       	push	r21
    23e6:	6f 93       	push	r22
    23e8:	7f 93       	push	r23
    23ea:	8f 93       	push	r24
    23ec:	9f 93       	push	r25
    23ee:	af 93       	push	r26
    23f0:	bf 93       	push	r27
    23f2:	ef 93       	push	r30
    23f4:	ff 93       	push	r31
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER4_CAPT_interrupt);
    23fe:	80 91 fe 04 	lds	r24, 0x04FE
    2402:	90 91 ff 04 	lds	r25, 0x04FF
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	29 f0       	breq	.+10     	; 0x2414 <__vector_41+0x40>
    240a:	e0 91 fe 04 	lds	r30, 0x04FE
    240e:	f0 91 ff 04 	lds	r31, 0x04FF
    2412:	09 95       	icall
}
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	ff 91       	pop	r31
    241a:	ef 91       	pop	r30
    241c:	bf 91       	pop	r27
    241e:	af 91       	pop	r26
    2420:	9f 91       	pop	r25
    2422:	8f 91       	pop	r24
    2424:	7f 91       	pop	r23
    2426:	6f 91       	pop	r22
    2428:	5f 91       	pop	r21
    242a:	4f 91       	pop	r20
    242c:	3f 91       	pop	r19
    242e:	2f 91       	pop	r18
    2430:	0f 90       	pop	r0
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	0f 90       	pop	r0
    2436:	1f 90       	pop	r1
    2438:	18 95       	reti

0000243a <__vector_42>:
ISR(TIMER4_COMPA_vect)
{
    243a:	1f 92       	push	r1
    243c:	0f 92       	push	r0
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	0f 92       	push	r0
    2442:	11 24       	eor	r1, r1
    2444:	2f 93       	push	r18
    2446:	3f 93       	push	r19
    2448:	4f 93       	push	r20
    244a:	5f 93       	push	r21
    244c:	6f 93       	push	r22
    244e:	7f 93       	push	r23
    2450:	8f 93       	push	r24
    2452:	9f 93       	push	r25
    2454:	af 93       	push	r26
    2456:	bf 93       	push	r27
    2458:	ef 93       	push	r30
    245a:	ff 93       	push	r31
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPA_interrupt);
    2464:	80 91 00 05 	lds	r24, 0x0500
    2468:	90 91 01 05 	lds	r25, 0x0501
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	29 f0       	breq	.+10     	; 0x247a <__vector_42+0x40>
    2470:	e0 91 00 05 	lds	r30, 0x0500
    2474:	f0 91 01 05 	lds	r31, 0x0501
    2478:	09 95       	icall
}
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	ff 91       	pop	r31
    2480:	ef 91       	pop	r30
    2482:	bf 91       	pop	r27
    2484:	af 91       	pop	r26
    2486:	9f 91       	pop	r25
    2488:	8f 91       	pop	r24
    248a:	7f 91       	pop	r23
    248c:	6f 91       	pop	r22
    248e:	5f 91       	pop	r21
    2490:	4f 91       	pop	r20
    2492:	3f 91       	pop	r19
    2494:	2f 91       	pop	r18
    2496:	0f 90       	pop	r0
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	0f 90       	pop	r0
    249c:	1f 90       	pop	r1
    249e:	18 95       	reti

000024a0 <__vector_43>:
ISR(TIMER4_COMPB_vect)
{
    24a0:	1f 92       	push	r1
    24a2:	0f 92       	push	r0
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	0f 92       	push	r0
    24a8:	11 24       	eor	r1, r1
    24aa:	2f 93       	push	r18
    24ac:	3f 93       	push	r19
    24ae:	4f 93       	push	r20
    24b0:	5f 93       	push	r21
    24b2:	6f 93       	push	r22
    24b4:	7f 93       	push	r23
    24b6:	8f 93       	push	r24
    24b8:	9f 93       	push	r25
    24ba:	af 93       	push	r26
    24bc:	bf 93       	push	r27
    24be:	ef 93       	push	r30
    24c0:	ff 93       	push	r31
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPB_interrupt);
    24ca:	80 91 02 05 	lds	r24, 0x0502
    24ce:	90 91 03 05 	lds	r25, 0x0503
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	29 f0       	breq	.+10     	; 0x24e0 <__vector_43+0x40>
    24d6:	e0 91 02 05 	lds	r30, 0x0502
    24da:	f0 91 03 05 	lds	r31, 0x0503
    24de:	09 95       	icall
}
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	ff 91       	pop	r31
    24e6:	ef 91       	pop	r30
    24e8:	bf 91       	pop	r27
    24ea:	af 91       	pop	r26
    24ec:	9f 91       	pop	r25
    24ee:	8f 91       	pop	r24
    24f0:	7f 91       	pop	r23
    24f2:	6f 91       	pop	r22
    24f4:	5f 91       	pop	r21
    24f6:	4f 91       	pop	r20
    24f8:	3f 91       	pop	r19
    24fa:	2f 91       	pop	r18
    24fc:	0f 90       	pop	r0
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	0f 90       	pop	r0
    2502:	1f 90       	pop	r1
    2504:	18 95       	reti

00002506 <__vector_44>:
ISR(TIMER4_COMPC_vect)
{
    2506:	1f 92       	push	r1
    2508:	0f 92       	push	r0
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	0f 92       	push	r0
    250e:	11 24       	eor	r1, r1
    2510:	2f 93       	push	r18
    2512:	3f 93       	push	r19
    2514:	4f 93       	push	r20
    2516:	5f 93       	push	r21
    2518:	6f 93       	push	r22
    251a:	7f 93       	push	r23
    251c:	8f 93       	push	r24
    251e:	9f 93       	push	r25
    2520:	af 93       	push	r26
    2522:	bf 93       	push	r27
    2524:	ef 93       	push	r30
    2526:	ff 93       	push	r31
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPC_interrupt);
    2530:	80 91 04 05 	lds	r24, 0x0504
    2534:	90 91 05 05 	lds	r25, 0x0505
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	29 f0       	breq	.+10     	; 0x2546 <__vector_44+0x40>
    253c:	e0 91 04 05 	lds	r30, 0x0504
    2540:	f0 91 05 05 	lds	r31, 0x0505
    2544:	09 95       	icall
}
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	ff 91       	pop	r31
    254c:	ef 91       	pop	r30
    254e:	bf 91       	pop	r27
    2550:	af 91       	pop	r26
    2552:	9f 91       	pop	r25
    2554:	8f 91       	pop	r24
    2556:	7f 91       	pop	r23
    2558:	6f 91       	pop	r22
    255a:	5f 91       	pop	r21
    255c:	4f 91       	pop	r20
    255e:	3f 91       	pop	r19
    2560:	2f 91       	pop	r18
    2562:	0f 90       	pop	r0
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	0f 90       	pop	r0
    2568:	1f 90       	pop	r1
    256a:	18 95       	reti

0000256c <__vector_46>:
ISR(TIMER5_CAPT_vect)
{
    256c:	1f 92       	push	r1
    256e:	0f 92       	push	r0
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	0f 92       	push	r0
    2574:	11 24       	eor	r1, r1
    2576:	2f 93       	push	r18
    2578:	3f 93       	push	r19
    257a:	4f 93       	push	r20
    257c:	5f 93       	push	r21
    257e:	6f 93       	push	r22
    2580:	7f 93       	push	r23
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	af 93       	push	r26
    2588:	bf 93       	push	r27
    258a:	ef 93       	push	r30
    258c:	ff 93       	push	r31
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER5_CAPT_interrupt);
    2596:	80 91 08 05 	lds	r24, 0x0508
    259a:	90 91 09 05 	lds	r25, 0x0509
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	29 f0       	breq	.+10     	; 0x25ac <__vector_46+0x40>
    25a2:	e0 91 08 05 	lds	r30, 0x0508
    25a6:	f0 91 09 05 	lds	r31, 0x0509
    25aa:	09 95       	icall
}
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	ff 91       	pop	r31
    25b2:	ef 91       	pop	r30
    25b4:	bf 91       	pop	r27
    25b6:	af 91       	pop	r26
    25b8:	9f 91       	pop	r25
    25ba:	8f 91       	pop	r24
    25bc:	7f 91       	pop	r23
    25be:	6f 91       	pop	r22
    25c0:	5f 91       	pop	r21
    25c2:	4f 91       	pop	r20
    25c4:	3f 91       	pop	r19
    25c6:	2f 91       	pop	r18
    25c8:	0f 90       	pop	r0
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	0f 90       	pop	r0
    25ce:	1f 90       	pop	r1
    25d0:	18 95       	reti

000025d2 <__vector_47>:
ISR(TIMER5_COMPA_vect)
{
    25d2:	1f 92       	push	r1
    25d4:	0f 92       	push	r0
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	0f 92       	push	r0
    25da:	11 24       	eor	r1, r1
    25dc:	2f 93       	push	r18
    25de:	3f 93       	push	r19
    25e0:	4f 93       	push	r20
    25e2:	5f 93       	push	r21
    25e4:	6f 93       	push	r22
    25e6:	7f 93       	push	r23
    25e8:	8f 93       	push	r24
    25ea:	9f 93       	push	r25
    25ec:	af 93       	push	r26
    25ee:	bf 93       	push	r27
    25f0:	ef 93       	push	r30
    25f2:	ff 93       	push	r31
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPA_interrupt);
    25fc:	80 91 0a 05 	lds	r24, 0x050A
    2600:	90 91 0b 05 	lds	r25, 0x050B
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	29 f0       	breq	.+10     	; 0x2612 <__vector_47+0x40>
    2608:	e0 91 0a 05 	lds	r30, 0x050A
    260c:	f0 91 0b 05 	lds	r31, 0x050B
    2610:	09 95       	icall
}
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	ff 91       	pop	r31
    2618:	ef 91       	pop	r30
    261a:	bf 91       	pop	r27
    261c:	af 91       	pop	r26
    261e:	9f 91       	pop	r25
    2620:	8f 91       	pop	r24
    2622:	7f 91       	pop	r23
    2624:	6f 91       	pop	r22
    2626:	5f 91       	pop	r21
    2628:	4f 91       	pop	r20
    262a:	3f 91       	pop	r19
    262c:	2f 91       	pop	r18
    262e:	0f 90       	pop	r0
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	0f 90       	pop	r0
    2634:	1f 90       	pop	r1
    2636:	18 95       	reti

00002638 <__vector_48>:
ISR(TIMER5_COMPB_vect)
{
    2638:	1f 92       	push	r1
    263a:	0f 92       	push	r0
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	0f 92       	push	r0
    2640:	11 24       	eor	r1, r1
    2642:	2f 93       	push	r18
    2644:	3f 93       	push	r19
    2646:	4f 93       	push	r20
    2648:	5f 93       	push	r21
    264a:	6f 93       	push	r22
    264c:	7f 93       	push	r23
    264e:	8f 93       	push	r24
    2650:	9f 93       	push	r25
    2652:	af 93       	push	r26
    2654:	bf 93       	push	r27
    2656:	ef 93       	push	r30
    2658:	ff 93       	push	r31
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPB_interrupt);
    2662:	80 91 0c 05 	lds	r24, 0x050C
    2666:	90 91 0d 05 	lds	r25, 0x050D
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	29 f0       	breq	.+10     	; 0x2678 <__vector_48+0x40>
    266e:	e0 91 0c 05 	lds	r30, 0x050C
    2672:	f0 91 0d 05 	lds	r31, 0x050D
    2676:	09 95       	icall
}
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	ff 91       	pop	r31
    267e:	ef 91       	pop	r30
    2680:	bf 91       	pop	r27
    2682:	af 91       	pop	r26
    2684:	9f 91       	pop	r25
    2686:	8f 91       	pop	r24
    2688:	7f 91       	pop	r23
    268a:	6f 91       	pop	r22
    268c:	5f 91       	pop	r21
    268e:	4f 91       	pop	r20
    2690:	3f 91       	pop	r19
    2692:	2f 91       	pop	r18
    2694:	0f 90       	pop	r0
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	0f 90       	pop	r0
    269a:	1f 90       	pop	r1
    269c:	18 95       	reti

0000269e <__vector_49>:
ISR(TIMER5_COMPC_vect)
{
    269e:	1f 92       	push	r1
    26a0:	0f 92       	push	r0
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	0f 92       	push	r0
    26a6:	11 24       	eor	r1, r1
    26a8:	2f 93       	push	r18
    26aa:	3f 93       	push	r19
    26ac:	4f 93       	push	r20
    26ae:	5f 93       	push	r21
    26b0:	6f 93       	push	r22
    26b2:	7f 93       	push	r23
    26b4:	8f 93       	push	r24
    26b6:	9f 93       	push	r25
    26b8:	af 93       	push	r26
    26ba:	bf 93       	push	r27
    26bc:	ef 93       	push	r30
    26be:	ff 93       	push	r31
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPC_interrupt);
    26c8:	80 91 0e 05 	lds	r24, 0x050E
    26cc:	90 91 0f 05 	lds	r25, 0x050F
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	29 f0       	breq	.+10     	; 0x26de <__vector_49+0x40>
    26d4:	e0 91 0e 05 	lds	r30, 0x050E
    26d8:	f0 91 0f 05 	lds	r31, 0x050F
    26dc:	09 95       	icall
}
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	ff 91       	pop	r31
    26e4:	ef 91       	pop	r30
    26e6:	bf 91       	pop	r27
    26e8:	af 91       	pop	r26
    26ea:	9f 91       	pop	r25
    26ec:	8f 91       	pop	r24
    26ee:	7f 91       	pop	r23
    26f0:	6f 91       	pop	r22
    26f2:	5f 91       	pop	r21
    26f4:	4f 91       	pop	r20
    26f6:	3f 91       	pop	r19
    26f8:	2f 91       	pop	r18
    26fa:	0f 90       	pop	r0
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	0f 90       	pop	r0
    2700:	1f 90       	pop	r1
    2702:	18 95       	reti

00002704 <__vector_default>:

ISR(BADISR_vect)
{
    2704:	1f 92       	push	r1
    2706:	0f 92       	push	r0
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	0f 92       	push	r0
    270c:	11 24       	eor	r1, r1
    270e:	2f 93       	push	r18
    2710:	3f 93       	push	r19
    2712:	4f 93       	push	r20
    2714:	5f 93       	push	r21
    2716:	6f 93       	push	r22
    2718:	7f 93       	push	r23
    271a:	8f 93       	push	r24
    271c:	9f 93       	push	r25
    271e:	af 93       	push	r26
    2720:	bf 93       	push	r27
    2722:	ef 93       	push	r30
    2724:	ff 93       	push	r31
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
  rprintf("BAD_vect called!");
    272e:	82 e8       	ldi	r24, 0x82	; 130
    2730:	91 e0       	ldi	r25, 0x01	; 1
    2732:	00 d0       	rcall	.+0      	; 0x2734 <__vector_default+0x30>
    2734:	0f 92       	push	r0
    2736:	ed b7       	in	r30, 0x3d	; 61
    2738:	fe b7       	in	r31, 0x3e	; 62
    273a:	31 96       	adiw	r30, 0x01	; 1
    273c:	21 e0       	ldi	r18, 0x01	; 1
    273e:	20 83       	st	Z, r18
    2740:	92 83       	std	Z+2, r25	; 0x02
    2742:	81 83       	std	Z+1, r24	; 0x01
    2744:	0e 94 56 17 	call	0x2eac	; 0x2eac <rprintf1RamRom>
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
}
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	ff 91       	pop	r31
    2754:	ef 91       	pop	r30
    2756:	bf 91       	pop	r27
    2758:	af 91       	pop	r26
    275a:	9f 91       	pop	r25
    275c:	8f 91       	pop	r24
    275e:	7f 91       	pop	r23
    2760:	6f 91       	pop	r22
    2762:	5f 91       	pop	r21
    2764:	4f 91       	pop	r20
    2766:	3f 91       	pop	r19
    2768:	2f 91       	pop	r18
    276a:	0f 90       	pop	r0
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	0f 90       	pop	r0
    2770:	1f 90       	pop	r1
    2772:	18 95       	reti

00002774 <rprintfInit>:

// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	00 d0       	rcall	.+0      	; 0x277a <rprintfInit+0x6>
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	89 83       	std	Y+1, r24	; 0x01
	rputchar = putchar_func;
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	9a 81       	ldd	r25, Y+2	; 0x02
    2786:	90 93 13 05 	sts	0x0513, r25
    278a:	80 93 12 05 	sts	0x0512, r24
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	0f 92       	push	r0
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	89 83       	std	Y+1, r24	; 0x01
	// do LF -> CR/LF translation
	if(c == '\n')
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	8a 30       	cpi	r24, 0x0A	; 10
    27a8:	31 f4       	brne	.+12     	; 0x27b6 <rprintfChar+0x1e>
		rputchar('\r');
    27aa:	e0 91 12 05 	lds	r30, 0x0512
    27ae:	f0 91 13 05 	lds	r31, 0x0513
    27b2:	8d e0       	ldi	r24, 0x0D	; 13
    27b4:	09 95       	icall
	// send character
	rputchar(c);
    27b6:	e0 91 12 05 	lds	r30, 0x0512
    27ba:	f0 91 13 05 	lds	r31, 0x0513
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	09 95       	icall
}
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <rprintfStr+0x6>
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	89 f0       	breq	.+34     	; 0x2802 <rprintfStr+0x38>
    27e0:	0b c0       	rjmp	.+22     	; 0x27f8 <rprintfStr+0x2e>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    27e2:	e9 81       	ldd	r30, Y+1	; 0x01
    27e4:	fa 81       	ldd	r31, Y+2	; 0x02
    27e6:	20 81       	ld	r18, Z
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	9a 81       	ldd	r25, Y+2	; 0x02
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	9a 83       	std	Y+2, r25	; 0x02
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	82 2f       	mov	r24, r18
    27f4:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    27f8:	e9 81       	ldd	r30, Y+1	; 0x01
    27fa:	fa 81       	ldd	r31, Y+2	; 0x02
    27fc:	80 81       	ld	r24, Z
    27fe:	88 23       	and	r24, r24
    2800:	81 f7       	brne	.-32     	; 0x27e2 <rprintfStr+0x18>
		rprintfChar(*str++);
}
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	2a 97       	sbiw	r28, 0x0a	; 10
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	9a 83       	std	Y+2, r25	; 0x02
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	7c 83       	std	Y+4, r23	; 0x04
    2826:	6b 83       	std	Y+3, r22	; 0x03
    2828:	5e 83       	std	Y+6, r21	; 0x06
    282a:	4d 83       	std	Y+5, r20	; 0x05
	register int i=0;
    282c:	18 86       	std	Y+8, r1	; 0x08
    282e:	1f 82       	std	Y+7, r1	; 0x07

	// check to make sure we have a good pointer
	if (!str) return;
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	9a 81       	ldd	r25, Y+2	; 0x02
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	09 f4       	brne	.+2      	; 0x283a <rprintfStrLen+0x2e>
    2838:	49 c0       	rjmp	.+146    	; 0x28cc <rprintfStrLen+0xc0>
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    283a:	2f 81       	ldd	r18, Y+7	; 0x07
    283c:	38 85       	ldd	r19, Y+8	; 0x08
    283e:	19 86       	std	Y+9, r1	; 0x09
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	28 17       	cp	r18, r24
    2846:	39 07       	cpc	r19, r25
    2848:	10 f4       	brcc	.+4      	; 0x284e <rprintfStrLen+0x42>
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	89 87       	std	Y+9, r24	; 0x09
    284e:	8f 81       	ldd	r24, Y+7	; 0x07
    2850:	98 85       	ldd	r25, Y+8	; 0x08
    2852:	01 96       	adiw	r24, 0x01	; 1
    2854:	98 87       	std	Y+8, r25	; 0x08
    2856:	8f 83       	std	Y+7, r24	; 0x07
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	99 85       	ldd	r25, Y+9	; 0x09
    285c:	89 27       	eor	r24, r25
    285e:	88 23       	and	r24, r24
    2860:	91 f4       	brne	.+36     	; 0x2886 <rprintfStrLen+0x7a>
    2862:	e9 81       	ldd	r30, Y+1	; 0x01
    2864:	fa 81       	ldd	r31, Y+2	; 0x02
    2866:	80 81       	ld	r24, Z
    2868:	8a 87       	std	Y+10, r24	; 0x0a
    286a:	8a 85       	ldd	r24, Y+10	; 0x0a
    286c:	88 23       	and	r24, r24
    286e:	11 f0       	breq	.+4      	; 0x2874 <rprintfStrLen+0x68>
    2870:	91 e0       	ldi	r25, 0x01	; 1
    2872:	9a 87       	std	Y+10, r25	; 0x0a
    2874:	8a 85       	ldd	r24, Y+10	; 0x0a
    2876:	29 81       	ldd	r18, Y+1	; 0x01
    2878:	3a 81       	ldd	r19, Y+2	; 0x02
    287a:	2f 5f       	subi	r18, 0xFF	; 255
    287c:	3f 4f       	sbci	r19, 0xFF	; 255
    287e:	3a 83       	std	Y+2, r19	; 0x02
    2880:	29 83       	std	Y+1, r18	; 0x01
    2882:	88 23       	and	r24, r24
    2884:	d1 f6       	brne	.-76     	; 0x283a <rprintfStrLen+0x2e>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    2886:	18 86       	std	Y+8, r1	; 0x08
    2888:	1f 82       	std	Y+7, r1	; 0x07
    288a:	19 c0       	rjmp	.+50     	; 0x28be <rprintfStrLen+0xb2>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    288c:	e9 81       	ldd	r30, Y+1	; 0x01
    288e:	fa 81       	ldd	r31, Y+2	; 0x02
    2890:	80 81       	ld	r24, Z
    2892:	88 23       	and	r24, r24
    2894:	61 f0       	breq	.+24     	; 0x28ae <rprintfStrLen+0xa2>
			rprintfChar(*str++);
    2896:	e9 81       	ldd	r30, Y+1	; 0x01
    2898:	fa 81       	ldd	r31, Y+2	; 0x02
    289a:	20 81       	ld	r18, Z
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	82 2f       	mov	r24, r18
    28a8:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
    28ac:	03 c0       	rjmp	.+6      	; 0x28b4 <rprintfStrLen+0xa8>
		else
			rprintfChar(' ');
    28ae:	80 e2       	ldi	r24, 0x20	; 32
    28b0:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    28b4:	8f 81       	ldd	r24, Y+7	; 0x07
    28b6:	98 85       	ldd	r25, Y+8	; 0x08
    28b8:	01 96       	adiw	r24, 0x01	; 1
    28ba:	98 87       	std	Y+8, r25	; 0x08
    28bc:	8f 83       	std	Y+7, r24	; 0x07
    28be:	2f 81       	ldd	r18, Y+7	; 0x07
    28c0:	38 85       	ldd	r19, Y+8	; 0x08
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	28 17       	cp	r18, r24
    28c8:	39 07       	cpc	r19, r25
    28ca:	00 f3       	brcs	.-64     	; 0x288c <rprintfStrLen+0x80>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    28cc:	2a 96       	adiw	r28, 0x0a	; 10
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <rprintfProgStr+0x6>
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <rprintfProgStr+0x8>
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <rprintfProgStr+0xa>
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	9d 83       	std	Y+5, r25	; 0x05
    28ee:	8c 83       	std	Y+4, r24	; 0x04
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    28f0:	8c 81       	ldd	r24, Y+4	; 0x04
    28f2:	9d 81       	ldd	r25, Y+5	; 0x05
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	b1 f0       	breq	.+44     	; 0x2924 <rprintfProgStr+0x46>
    28f8:	03 c0       	rjmp	.+6      	; 0x2900 <rprintfProgStr+0x22>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    28fa:	8e 81       	ldd	r24, Y+6	; 0x06
    28fc:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    2900:	8c 81       	ldd	r24, Y+4	; 0x04
    2902:	9d 81       	ldd	r25, Y+5	; 0x05
    2904:	9b 83       	std	Y+3, r25	; 0x03
    2906:	8a 83       	std	Y+2, r24	; 0x02
    2908:	8c 81       	ldd	r24, Y+4	; 0x04
    290a:	9d 81       	ldd	r25, Y+5	; 0x05
    290c:	01 96       	adiw	r24, 0x01	; 1
    290e:	9d 83       	std	Y+5, r25	; 0x05
    2910:	8c 83       	std	Y+4, r24	; 0x04
    2912:	ea 81       	ldd	r30, Y+2	; 0x02
    2914:	fb 81       	ldd	r31, Y+3	; 0x03
    2916:	84 91       	lpm	r24, Z+
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	8e 83       	std	Y+6, r24	; 0x06
    291e:	8e 81       	ldd	r24, Y+6	; 0x06
    2920:	88 23       	and	r24, r24
    2922:	59 f7       	brne	.-42     	; 0x28fa <rprintfProgStr+0x1c>
		rprintfChar(c);
}
    2924:	26 96       	adiw	r28, 0x06	; 6
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <rprintfCRLF>:

// *** rprintfCRLF ***
// prints carriage return and line feed
void rprintfCRLF(void)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    293e:	8a e0       	ldi	r24, 0x0A	; 10
    2940:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
}
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <rprintfu04>:

// *** rprintfu04 ***
// prints an unsigned 4-bit number in hex (1 digit)
void rprintfu04(unsigned char data)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	00 d0       	rcall	.+0      	; 0x2950 <rprintfu04+0x6>
    2950:	00 d0       	rcall	.+0      	; 0x2952 <rprintfu04+0x8>
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	8c 83       	std	Y+4, r24	; 0x04
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    2958:	8c 81       	ldd	r24, Y+4	; 0x04
    295a:	88 2f       	mov	r24, r24
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	8f 70       	andi	r24, 0x0F	; 15
    2960:	90 70       	andi	r25, 0x00	; 0
    2962:	8d 56       	subi	r24, 0x6D	; 109
    2964:	9e 4f       	sbci	r25, 0xFE	; 254
    2966:	9b 83       	std	Y+3, r25	; 0x03
    2968:	8a 83       	std	Y+2, r24	; 0x02
    296a:	ea 81       	ldd	r30, Y+2	; 0x02
    296c:	fb 81       	ldd	r31, Y+3	; 0x03
    296e:	84 91       	lpm	r24, Z+
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
}
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	0f 92       	push	r0
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	89 83       	std	Y+1, r24	; 0x01
	// print 8-bit hex value
	rprintfu04(data>>4);
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	82 95       	swap	r24
    2996:	8f 70       	andi	r24, 0x0F	; 15
    2998:	0e 94 a5 14 	call	0x294a	; 0x294a <rprintfu04>
	rprintfu04(data);
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	0e 94 a5 14 	call	0x294a	; 0x294a <rprintfu04>
}
    29a2:	0f 90       	pop	r0
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <rprintfu16+0x6>
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
	// print 16-bit hex value
	rprintfu08(data>>8);
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	9a 81       	ldd	r25, Y+2	; 0x02
    29bc:	89 2f       	mov	r24, r25
    29be:	99 27       	eor	r25, r25
    29c0:	0e 94 c3 14 	call	0x2986	; 0x2986 <rprintfu08>
	rprintfu08(data);
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	0e 94 c3 14 	call	0x2986	; 0x2986 <rprintfu08>
}
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	00 d0       	rcall	.+0      	; 0x29da <rprintfu32+0x6>
    29da:	00 d0       	rcall	.+0      	; 0x29dc <rprintfu32+0x8>
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	69 83       	std	Y+1, r22	; 0x01
    29e2:	7a 83       	std	Y+2, r23	; 0x02
    29e4:	8b 83       	std	Y+3, r24	; 0x03
    29e6:	9c 83       	std	Y+4, r25	; 0x04
	// print 32-bit hex value
	rprintfu16(data>>16);
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	9a 81       	ldd	r25, Y+2	; 0x02
    29ec:	ab 81       	ldd	r26, Y+3	; 0x03
    29ee:	bc 81       	ldd	r27, Y+4	; 0x04
    29f0:	cd 01       	movw	r24, r26
    29f2:	aa 27       	eor	r26, r26
    29f4:	bb 27       	eor	r27, r27
    29f6:	0e 94 d5 14 	call	0x29aa	; 0x29aa <rprintfu16>
	rprintfu16(data);
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	0e 94 d5 14 	call	0x29aa	; 0x29aa <rprintfu16>
}
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    2a10:	ef 92       	push	r14
    2a12:	ff 92       	push	r15
    2a14:	0f 93       	push	r16
    2a16:	1f 93       	push	r17
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	e8 97       	sbiw	r28, 0x38	; 56
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	8e a7       	std	Y+46, r24	; 0x2e
    2a2e:	6f a7       	std	Y+47, r22	; 0x2f
    2a30:	48 ab       	std	Y+48, r20	; 0x30
    2a32:	29 ab       	std	Y+49, r18	; 0x31
    2a34:	ea aa       	std	Y+50, r14	; 0x32
    2a36:	fb aa       	std	Y+51, r15	; 0x33
    2a38:	0c ab       	std	Y+52, r16	; 0x34
    2a3a:	1d ab       	std	Y+53, r17	; 0x35
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    2a3c:	88 a9       	ldd	r24, Y+48	; 0x30
    2a3e:	88 23       	and	r24, r24
    2a40:	b1 f0       	breq	.+44     	; 0x2a6e <rprintfNum+0x5e>
    2a42:	8a a9       	ldd	r24, Y+50	; 0x32
    2a44:	9b a9       	ldd	r25, Y+51	; 0x33
    2a46:	ac a9       	ldd	r26, Y+52	; 0x34
    2a48:	bd a9       	ldd	r27, Y+53	; 0x35
    2a4a:	bb 23       	and	r27, r27
    2a4c:	84 f4       	brge	.+32     	; 0x2a6e <rprintfNum+0x5e>
	{
		x = -n;
    2a4e:	8a a9       	ldd	r24, Y+50	; 0x32
    2a50:	9b a9       	ldd	r25, Y+51	; 0x33
    2a52:	ac a9       	ldd	r26, Y+52	; 0x34
    2a54:	bd a9       	ldd	r27, Y+53	; 0x35
    2a56:	b0 95       	com	r27
    2a58:	a0 95       	com	r26
    2a5a:	90 95       	com	r25
    2a5c:	81 95       	neg	r24
    2a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a60:	af 4f       	sbci	r26, 0xFF	; 255
    2a62:	bf 4f       	sbci	r27, 0xFF	; 255
    2a64:	88 87       	std	Y+8, r24	; 0x08
    2a66:	99 87       	std	Y+9, r25	; 0x09
    2a68:	aa 87       	std	Y+10, r26	; 0x0a
    2a6a:	bb 87       	std	Y+11, r27	; 0x0b
    2a6c:	08 c0       	rjmp	.+16     	; 0x2a7e <rprintfNum+0x6e>
	}
	else
	{
	 	x = n;
    2a6e:	8a a9       	ldd	r24, Y+50	; 0x32
    2a70:	9b a9       	ldd	r25, Y+51	; 0x33
    2a72:	ac a9       	ldd	r26, Y+52	; 0x34
    2a74:	bd a9       	ldd	r27, Y+53	; 0x35
    2a76:	88 87       	std	Y+8, r24	; 0x08
    2a78:	99 87       	std	Y+9, r25	; 0x09
    2a7a:	aa 87       	std	Y+10, r26	; 0x0a
    2a7c:	bb 87       	std	Y+11, r27	; 0x0b
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    2a7e:	88 a9       	ldd	r24, Y+48	; 0x30
    2a80:	8e ab       	std	Y+54, r24	; 0x36
    2a82:	8e a9       	ldd	r24, Y+54	; 0x36
    2a84:	88 23       	and	r24, r24
    2a86:	11 f0       	breq	.+4      	; 0x2a8c <rprintfNum+0x7c>
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	8e ab       	std	Y+54, r24	; 0x36
    2a8c:	9e a9       	ldd	r25, Y+54	; 0x36
    2a8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a90:	89 1b       	sub	r24, r25
    2a92:	81 50       	subi	r24, 0x01	; 1
    2a94:	8f 83       	std	Y+7, r24	; 0x07
  	p = buf + sizeof (buf);
    2a96:	ce 01       	movw	r24, r28
    2a98:	0e 96       	adiw	r24, 0x0e	; 14
    2a9a:	80 96       	adiw	r24, 0x20	; 32
    2a9c:	9d 87       	std	Y+13, r25	; 0x0d
    2a9e:	8c 87       	std	Y+12, r24	; 0x0c
  	*--p = '\0';
    2aa0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aa2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	9d 87       	std	Y+13, r25	; 0x0d
    2aa8:	8c 87       	std	Y+12, r24	; 0x0c
    2aaa:	ec 85       	ldd	r30, Y+12	; 0x0c
    2aac:	fd 85       	ldd	r31, Y+13	; 0x0d
    2aae:	10 82       	st	Z, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    2ab0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ab2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	9d 87       	std	Y+13, r25	; 0x0d
    2ab8:	8c 87       	std	Y+12, r24	; 0x0c
    2aba:	8e a5       	ldd	r24, Y+46	; 0x2e
    2abc:	28 2f       	mov	r18, r24
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e0       	ldi	r20, 0x00	; 0
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	88 85       	ldd	r24, Y+8	; 0x08
    2ac6:	99 85       	ldd	r25, Y+9	; 0x09
    2ac8:	aa 85       	ldd	r26, Y+10	; 0x0a
    2aca:	bb 85       	ldd	r27, Y+11	; 0x0b
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivmodsi4>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	8f 70       	andi	r24, 0x0F	; 15
    2ada:	90 70       	andi	r25, 0x00	; 0
    2adc:	8d 56       	subi	r24, 0x6D	; 109
    2ade:	9e 4f       	sbci	r25, 0xFE	; 254
    2ae0:	9e 83       	std	Y+6, r25	; 0x06
    2ae2:	8d 83       	std	Y+5, r24	; 0x05
    2ae4:	ed 81       	ldd	r30, Y+5	; 0x05
    2ae6:	fe 81       	ldd	r31, Y+6	; 0x06
    2ae8:	84 91       	lpm	r24, Z+
    2aea:	8c 83       	std	Y+4, r24	; 0x04
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	ec 85       	ldd	r30, Y+12	; 0x0c
    2af0:	fd 85       	ldd	r31, Y+13	; 0x0d
    2af2:	80 83       	st	Z, r24
    2af4:	8e a5       	ldd	r24, Y+46	; 0x2e
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	88 85       	ldd	r24, Y+8	; 0x08
    2b00:	99 85       	ldd	r25, Y+9	; 0x09
    2b02:	aa 85       	ldd	r26, Y+10	; 0x0a
    2b04:	bb 85       	ldd	r27, Y+11	; 0x0b
    2b06:	bc 01       	movw	r22, r24
    2b08:	cd 01       	movw	r24, r26
    2b0a:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivmodsi4>
    2b0e:	da 01       	movw	r26, r20
    2b10:	c9 01       	movw	r24, r18
    2b12:	88 87       	std	Y+8, r24	; 0x08
    2b14:	99 87       	std	Y+9, r25	; 0x09
    2b16:	aa 87       	std	Y+10, r26	; 0x0a
    2b18:	bb 87       	std	Y+11, r27	; 0x0b
    2b1a:	47 c0       	rjmp	.+142    	; 0x2baa <rprintfNum+0x19a>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    2b1c:	88 85       	ldd	r24, Y+8	; 0x08
    2b1e:	99 85       	ldd	r25, Y+9	; 0x09
    2b20:	aa 85       	ldd	r26, Y+10	; 0x0a
    2b22:	bb 85       	ldd	r27, Y+11	; 0x0b
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	a1 05       	cpc	r26, r1
    2b28:	b1 05       	cpc	r27, r1
    2b2a:	b1 f1       	breq	.+108    	; 0x2b98 <rprintfNum+0x188>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    2b2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	9d 87       	std	Y+13, r25	; 0x0d
    2b34:	8c 87       	std	Y+12, r24	; 0x0c
    2b36:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	88 85       	ldd	r24, Y+8	; 0x08
    2b42:	99 85       	ldd	r25, Y+9	; 0x09
    2b44:	aa 85       	ldd	r26, Y+10	; 0x0a
    2b46:	bb 85       	ldd	r27, Y+11	; 0x0b
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivmodsi4>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8f 70       	andi	r24, 0x0F	; 15
    2b56:	90 70       	andi	r25, 0x00	; 0
    2b58:	8d 56       	subi	r24, 0x6D	; 109
    2b5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b5c:	9b 83       	std	Y+3, r25	; 0x03
    2b5e:	8a 83       	std	Y+2, r24	; 0x02
    2b60:	ea 81       	ldd	r30, Y+2	; 0x02
    2b62:	fb 81       	ldd	r31, Y+3	; 0x03
    2b64:	84 91       	lpm	r24, Z+
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b6c:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b6e:	80 83       	st	Z, r24
    2b70:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b72:	28 2f       	mov	r18, r24
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	88 85       	ldd	r24, Y+8	; 0x08
    2b7c:	99 85       	ldd	r25, Y+9	; 0x09
    2b7e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2b80:	bb 85       	ldd	r27, Y+11	; 0x0b
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivmodsi4>
    2b8a:	da 01       	movw	r26, r20
    2b8c:	c9 01       	movw	r24, r18
    2b8e:	88 87       	std	Y+8, r24	; 0x08
    2b90:	99 87       	std	Y+9, r25	; 0x09
    2b92:	aa 87       	std	Y+10, r26	; 0x0a
    2b94:	bb 87       	std	Y+11, r27	; 0x0b
    2b96:	09 c0       	rjmp	.+18     	; 0x2baa <rprintfNum+0x19a>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    2b98:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	9d 87       	std	Y+13, r25	; 0x0d
    2ba0:	8c 87       	std	Y+12, r24	; 0x0c
    2ba2:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ba4:	fd 85       	ldd	r31, Y+13	; 0x0d
    2ba6:	89 a9       	ldd	r24, Y+49	; 0x31
    2ba8:	80 83       	st	Z, r24
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    2baa:	8f 81       	ldd	r24, Y+7	; 0x07
    2bac:	8f ab       	std	Y+55, r24	; 0x37
    2bae:	8f a9       	ldd	r24, Y+55	; 0x37
    2bb0:	88 23       	and	r24, r24
    2bb2:	11 f0       	breq	.+4      	; 0x2bb8 <rprintfNum+0x1a8>
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	8f ab       	std	Y+55, r24	; 0x37
    2bb8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bba:	9f 81       	ldd	r25, Y+7	; 0x07
    2bbc:	91 50       	subi	r25, 0x01	; 1
    2bbe:	9f 83       	std	Y+7, r25	; 0x07
    2bc0:	88 23       	and	r24, r24
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <rprintfNum+0x1b6>
    2bc4:	ab cf       	rjmp	.-170    	; 0x2b1c <rprintfNum+0x10c>
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    2bc6:	88 a9       	ldd	r24, Y+48	; 0x30
    2bc8:	88 23       	and	r24, r24
    2bca:	61 f1       	breq	.+88     	; 0x2c24 <rprintfNum+0x214>
	{
		if(n < 0)
    2bcc:	8a a9       	ldd	r24, Y+50	; 0x32
    2bce:	9b a9       	ldd	r25, Y+51	; 0x33
    2bd0:	ac a9       	ldd	r26, Y+52	; 0x34
    2bd2:	bd a9       	ldd	r27, Y+53	; 0x35
    2bd4:	bb 23       	and	r27, r27
    2bd6:	54 f4       	brge	.+20     	; 0x2bec <rprintfNum+0x1dc>
		{
   			*--p = '-';
    2bd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bda:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	9d 87       	std	Y+13, r25	; 0x0d
    2be0:	8c 87       	std	Y+12, r24	; 0x0c
    2be2:	ec 85       	ldd	r30, Y+12	; 0x0c
    2be4:	fd 85       	ldd	r31, Y+13	; 0x0d
    2be6:	8d e2       	ldi	r24, 0x2D	; 45
    2be8:	80 83       	st	Z, r24
    2bea:	1c c0       	rjmp	.+56     	; 0x2c24 <rprintfNum+0x214>
		}
		else if(n > 0)
    2bec:	8a a9       	ldd	r24, Y+50	; 0x32
    2bee:	9b a9       	ldd	r25, Y+51	; 0x33
    2bf0:	ac a9       	ldd	r26, Y+52	; 0x34
    2bf2:	bd a9       	ldd	r27, Y+53	; 0x35
    2bf4:	18 16       	cp	r1, r24
    2bf6:	19 06       	cpc	r1, r25
    2bf8:	1a 06       	cpc	r1, r26
    2bfa:	1b 06       	cpc	r1, r27
    2bfc:	54 f4       	brge	.+20     	; 0x2c12 <rprintfNum+0x202>
		{
	   		*--p = '+';
    2bfe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c00:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	9d 87       	std	Y+13, r25	; 0x0d
    2c06:	8c 87       	std	Y+12, r24	; 0x0c
    2c08:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c0a:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c0c:	8b e2       	ldi	r24, 0x2B	; 43
    2c0e:	80 83       	st	Z, r24
    2c10:	09 c0       	rjmp	.+18     	; 0x2c24 <rprintfNum+0x214>
		}
		else
		{
	   		*--p = ' ';
    2c12:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c14:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	9d 87       	std	Y+13, r25	; 0x0d
    2c1a:	8c 87       	std	Y+12, r24	; 0x0c
    2c1c:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c1e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c20:	80 e2       	ldi	r24, 0x20	; 32
    2c22:	80 83       	st	Z, r24
		}
	}

	// print the string right-justified
	count = numDigits;
    2c24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c26:	8f 83       	std	Y+7, r24	; 0x07
    2c28:	0b c0       	rjmp	.+22     	; 0x2c40 <rprintfNum+0x230>
	while(count--)
	{
		rprintfChar(*p++);
    2c2a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c2c:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c2e:	20 81       	ld	r18, Z
    2c30:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c32:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c34:	01 96       	adiw	r24, 0x01	; 1
    2c36:	9d 87       	std	Y+13, r25	; 0x0d
    2c38:	8c 87       	std	Y+12, r24	; 0x0c
    2c3a:	82 2f       	mov	r24, r18
    2c3c:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    2c40:	8f 81       	ldd	r24, Y+7	; 0x07
    2c42:	88 af       	std	Y+56, r24	; 0x38
    2c44:	88 ad       	ldd	r24, Y+56	; 0x38
    2c46:	88 23       	and	r24, r24
    2c48:	11 f0       	breq	.+4      	; 0x2c4e <rprintfNum+0x23e>
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	88 af       	std	Y+56, r24	; 0x38
    2c4e:	88 ad       	ldd	r24, Y+56	; 0x38
    2c50:	9f 81       	ldd	r25, Y+7	; 0x07
    2c52:	91 50       	subi	r25, 0x01	; 1
    2c54:	9f 83       	std	Y+7, r25	; 0x07
    2c56:	88 23       	and	r24, r24
    2c58:	41 f7       	brne	.-48     	; 0x2c2a <rprintfNum+0x21a>
	{
		rprintfChar(*p++);
	}
}
    2c5a:	e8 96       	adiw	r28, 0x38	; 56
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	08 95       	ret

00002c74 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	65 97       	sbiw	r28, 0x15	; 21
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	89 87       	std	Y+9, r24	; 0x09
    2c8a:	4a 87       	std	Y+10, r20	; 0x0a
    2c8c:	5b 87       	std	Y+11, r21	; 0x0b
    2c8e:	6c 87       	std	Y+12, r22	; 0x0c
    2c90:	7d 87       	std	Y+13, r23	; 0x0d
	unsigned char firstplace = FALSE;
    2c92:	18 86       	std	Y+8, r1	; 0x08
	unsigned char negative;
	unsigned char i, digit;
	double place = 1.0;
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a0 e8       	ldi	r26, 0x80	; 128
    2c9a:	bf e3       	ldi	r27, 0x3F	; 63
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	9a 83       	std	Y+2, r25	; 0x02
    2ca0:	ab 83       	std	Y+3, r26	; 0x03
    2ca2:	bc 83       	std	Y+4, r27	; 0x04
	
	// save sign
	negative = (x<0);
    2ca4:	1f 82       	std	Y+7, r1	; 0x07
    2ca6:	6a 85       	ldd	r22, Y+10	; 0x0a
    2ca8:	7b 85       	ldd	r23, Y+11	; 0x0b
    2caa:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cac:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	50 e0       	ldi	r21, 0x00	; 0
    2cb6:	0e 94 80 26 	call	0x4d00	; 0x4d00 <__cmpsf2>
    2cba:	88 23       	and	r24, r24
    2cbc:	14 f4       	brge	.+4      	; 0x2cc2 <rprintfFloat+0x4e>
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	8f 83       	std	Y+7, r24	; 0x07
	// convert to absolute value
	x = (x>0)?(x):(-x);
    2cc2:	6a 85       	ldd	r22, Y+10	; 0x0a
    2cc4:	7b 85       	ldd	r23, Y+11	; 0x0b
    2cc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e0       	ldi	r20, 0x00	; 0
    2cd0:	50 e0       	ldi	r21, 0x00	; 0
    2cd2:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__gesf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	4c f4       	brge	.+18     	; 0x2cec <rprintfFloat+0x78>
    2cda:	2a 85       	ldd	r18, Y+10	; 0x0a
    2cdc:	3b 85       	ldd	r19, Y+11	; 0x0b
    2cde:	4c 85       	ldd	r20, Y+12	; 0x0c
    2ce0:	5d 85       	ldd	r21, Y+13	; 0x0d
    2ce2:	2a 8b       	std	Y+18, r18	; 0x12
    2ce4:	3b 8b       	std	Y+19, r19	; 0x13
    2ce6:	4c 8b       	std	Y+20, r20	; 0x14
    2ce8:	5d 8b       	std	Y+21, r21	; 0x15
    2cea:	0b c0       	rjmp	.+22     	; 0x2d02 <rprintfFloat+0x8e>
    2cec:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cee:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cf0:	ac 85       	ldd	r26, Y+12	; 0x0c
    2cf2:	bd 85       	ldd	r27, Y+13	; 0x0d
    2cf4:	9c 01       	movw	r18, r24
    2cf6:	ad 01       	movw	r20, r26
    2cf8:	50 58       	subi	r21, 0x80	; 128
    2cfa:	2a 8b       	std	Y+18, r18	; 0x12
    2cfc:	3b 8b       	std	Y+19, r19	; 0x13
    2cfe:	4c 8b       	std	Y+20, r20	; 0x14
    2d00:	5d 8b       	std	Y+21, r21	; 0x15
    2d02:	8a 89       	ldd	r24, Y+18	; 0x12
    2d04:	9b 89       	ldd	r25, Y+19	; 0x13
    2d06:	ac 89       	ldd	r26, Y+20	; 0x14
    2d08:	bd 89       	ldd	r27, Y+21	; 0x15
    2d0a:	8a 87       	std	Y+10, r24	; 0x0a
    2d0c:	9b 87       	std	Y+11, r25	; 0x0b
    2d0e:	ac 87       	std	Y+12, r26	; 0x0c
    2d10:	bd 87       	std	Y+13, r27	; 0x0d
	
	// find starting digit place
	for(i=0; i<15; i++)
    2d12:	1e 82       	std	Y+6, r1	; 0x06
    2d14:	29 c0       	rjmp	.+82     	; 0x2d68 <rprintfFloat+0xf4>
	{
		if((x/place) < 10.0)
    2d16:	6a 85       	ldd	r22, Y+10	; 0x0a
    2d18:	7b 85       	ldd	r23, Y+11	; 0x0b
    2d1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d1e:	29 81       	ldd	r18, Y+1	; 0x01
    2d20:	3a 81       	ldd	r19, Y+2	; 0x02
    2d22:	4b 81       	ldd	r20, Y+3	; 0x03
    2d24:	5c 81       	ldd	r21, Y+4	; 0x04
    2d26:	0e 94 84 26 	call	0x4d08	; 0x4d08 <__divsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e2       	ldi	r20, 0x20	; 32
    2d38:	51 e4       	ldi	r21, 0x41	; 65
    2d3a:	0e 94 80 26 	call	0x4d00	; 0x4d00 <__cmpsf2>
    2d3e:	88 23       	and	r24, r24
    2d40:	b4 f0       	brlt	.+44     	; 0x2d6e <rprintfFloat+0xfa>
			break;
		else
			place *= 10.0;
    2d42:	69 81       	ldd	r22, Y+1	; 0x01
    2d44:	7a 81       	ldd	r23, Y+2	; 0x02
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	40 e2       	ldi	r20, 0x20	; 32
    2d50:	51 e4       	ldi	r21, 0x41	; 65
    2d52:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	ab 83       	std	Y+3, r26	; 0x03
    2d60:	bc 83       	std	Y+4, r27	; 0x04
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    2d62:	8e 81       	ldd	r24, Y+6	; 0x06
    2d64:	8f 5f       	subi	r24, 0xFF	; 255
    2d66:	8e 83       	std	Y+6, r24	; 0x06
    2d68:	8e 81       	ldd	r24, Y+6	; 0x06
    2d6a:	8f 30       	cpi	r24, 0x0F	; 15
    2d6c:	a0 f2       	brcs	.-88     	; 0x2d16 <rprintfFloat+0xa2>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    2d6e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d70:	88 23       	and	r24, r24
    2d72:	21 f0       	breq	.+8      	; 0x2d7c <rprintfFloat+0x108>
		rprintfChar('-');
    2d74:	8d e2       	ldi	r24, 0x2D	; 45
    2d76:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <rprintfFloat+0x10e>
	else
		rprintfChar('+');
    2d7c:	8b e2       	ldi	r24, 0x2B	; 43
    2d7e:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>

	// print digits
	for(i=0; i<numDigits; i++)
    2d82:	1e 82       	std	Y+6, r1	; 0x06
    2d84:	85 c0       	rjmp	.+266    	; 0x2e90 <rprintfFloat+0x21c>
	{
		digit = (x/place);
    2d86:	6a 85       	ldd	r22, Y+10	; 0x0a
    2d88:	7b 85       	ldd	r23, Y+11	; 0x0b
    2d8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d8e:	29 81       	ldd	r18, Y+1	; 0x01
    2d90:	3a 81       	ldd	r19, Y+2	; 0x02
    2d92:	4b 81       	ldd	r20, Y+3	; 0x03
    2d94:	5c 81       	ldd	r21, Y+4	; 0x04
    2d96:	0e 94 84 26 	call	0x4d08	; 0x4d08 <__divsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	8d 83       	std	Y+5, r24	; 0x05

		if(digit | firstplace | (place == 1.0))
    2dac:	9d 81       	ldd	r25, Y+5	; 0x05
    2dae:	88 85       	ldd	r24, Y+8	; 0x08
    2db0:	89 2b       	or	r24, r25
    2db2:	a8 2f       	mov	r26, r24
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	b9 8b       	std	Y+17, r27	; 0x11
    2db8:	a8 8b       	std	Y+16, r26	; 0x10
    2dba:	1f 86       	std	Y+15, r1	; 0x0f
    2dbc:	1e 86       	std	Y+14, r1	; 0x0e
    2dbe:	69 81       	ldd	r22, Y+1	; 0x01
    2dc0:	7a 81       	ldd	r23, Y+2	; 0x02
    2dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e8       	ldi	r20, 0x80	; 128
    2dcc:	5f e3       	ldi	r21, 0x3F	; 63
    2dce:	0e 94 80 26 	call	0x4d00	; 0x4d00 <__cmpsf2>
    2dd2:	88 23       	and	r24, r24
    2dd4:	21 f4       	brne	.+8      	; 0x2dde <rprintfFloat+0x16a>
    2dd6:	21 e0       	ldi	r18, 0x01	; 1
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	3f 87       	std	Y+15, r19	; 0x0f
    2ddc:	2e 87       	std	Y+14, r18	; 0x0e
    2dde:	88 89       	ldd	r24, Y+16	; 0x10
    2de0:	99 89       	ldd	r25, Y+17	; 0x11
    2de2:	4e 85       	ldd	r20, Y+14	; 0x0e
    2de4:	5f 85       	ldd	r21, Y+15	; 0x0f
    2de6:	84 2b       	or	r24, r20
    2de8:	95 2b       	or	r25, r21
    2dea:	00 97       	sbiw	r24, 0x00	; 0
    2dec:	39 f0       	breq	.+14     	; 0x2dfc <rprintfFloat+0x188>
		{
			firstplace = TRUE;
    2dee:	8f ef       	ldi	r24, 0xFF	; 255
    2df0:	88 87       	std	Y+8, r24	; 0x08
			rprintfChar(digit+0x30);
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	80 5d       	subi	r24, 0xD0	; 208
    2df6:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
    2dfa:	03 c0       	rjmp	.+6      	; 0x2e02 <rprintfFloat+0x18e>
		}
		else
			rprintfChar(' ');
    2dfc:	80 e2       	ldi	r24, 0x20	; 32
    2dfe:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
		
		if(place == 1.0)
    2e02:	69 81       	ldd	r22, Y+1	; 0x01
    2e04:	7a 81       	ldd	r23, Y+2	; 0x02
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e8       	ldi	r20, 0x80	; 128
    2e10:	5f e3       	ldi	r21, 0x3F	; 63
    2e12:	0e 94 80 26 	call	0x4d00	; 0x4d00 <__cmpsf2>
    2e16:	88 23       	and	r24, r24
    2e18:	19 f4       	brne	.+6      	; 0x2e20 <rprintfFloat+0x1ac>
		{
			rprintfChar('.');
    2e1a:	8e e2       	ldi	r24, 0x2E	; 46
    2e1c:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
		}
		
		x -= (digit*place);
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	88 2f       	mov	r24, r24
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	aa 27       	eor	r26, r26
    2e28:	97 fd       	sbrc	r25, 7
    2e2a:	a0 95       	com	r26
    2e2c:	ba 2f       	mov	r27, r26
    2e2e:	bc 01       	movw	r22, r24
    2e30:	cd 01       	movw	r24, r26
    2e32:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	29 81       	ldd	r18, Y+1	; 0x01
    2e40:	3a 81       	ldd	r19, Y+2	; 0x02
    2e42:	4b 81       	ldd	r20, Y+3	; 0x03
    2e44:	5c 81       	ldd	r21, Y+4	; 0x04
    2e46:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	9c 01       	movw	r18, r24
    2e50:	ad 01       	movw	r20, r26
    2e52:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e54:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e56:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e58:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e5a:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__subsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	8a 87       	std	Y+10, r24	; 0x0a
    2e64:	9b 87       	std	Y+11, r25	; 0x0b
    2e66:	ac 87       	std	Y+12, r26	; 0x0c
    2e68:	bd 87       	std	Y+13, r27	; 0x0d
		place /= 10.0;
    2e6a:	69 81       	ldd	r22, Y+1	; 0x01
    2e6c:	7a 81       	ldd	r23, Y+2	; 0x02
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	9c 81       	ldd	r25, Y+4	; 0x04
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e2       	ldi	r20, 0x20	; 32
    2e78:	51 e4       	ldi	r21, 0x41	; 65
    2e7a:	0e 94 84 26 	call	0x4d08	; 0x4d08 <__divsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	ab 83       	std	Y+3, r26	; 0x03
    2e88:	bc 83       	std	Y+4, r27	; 0x04
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    2e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e8c:	8f 5f       	subi	r24, 0xFF	; 255
    2e8e:	8e 83       	std	Y+6, r24	; 0x06
    2e90:	9e 81       	ldd	r25, Y+6	; 0x06
    2e92:	89 85       	ldd	r24, Y+9	; 0x09
    2e94:	98 17       	cp	r25, r24
    2e96:	08 f4       	brcc	.+2      	; 0x2e9a <rprintfFloat+0x226>
    2e98:	76 cf       	rjmp	.-276    	; 0x2d86 <rprintfFloat+0x112>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    2e9a:	65 96       	adiw	r28, 0x15	; 21
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	63 97       	sbiw	r28, 0x13	; 19
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	4b 96       	adiw	r24, 0x1b	; 27
    2ec4:	9f 87       	std	Y+15, r25	; 0x0f
    2ec6:	8e 87       	std	Y+14, r24	; 0x0e
    2ec8:	11 c0       	rjmp	.+34     	; 0x2eec <rprintf1RamRom+0x40>
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    2eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ecc:	88 23       	and	r24, r24
    2ece:	59 f4       	brne	.+22     	; 0x2ee6 <rprintf1RamRom+0x3a>
			{
				va_end(ap);
				return(0);
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    2ed4:	63 96       	adiw	r28, 0x13	; 19
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    2ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee8:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    2eec:	88 8d       	ldd	r24, Y+24	; 0x18
    2eee:	88 23       	and	r24, r24
    2ef0:	81 f0       	breq	.+32     	; 0x2f12 <rprintf1RamRom+0x66>
    2ef2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ef4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
    2efa:	89 8d       	ldd	r24, Y+25	; 0x19
    2efc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2efe:	01 96       	adiw	r24, 0x01	; 1
    2f00:	9a 8f       	std	Y+26, r25	; 0x1a
    2f02:	89 8f       	std	Y+25, r24	; 0x19
    2f04:	ed 81       	ldd	r30, Y+5	; 0x05
    2f06:	fe 81       	ldd	r31, Y+6	; 0x06
    2f08:	84 91       	lpm	r24, Z+
    2f0a:	8c 83       	std	Y+4, r24	; 0x04
    2f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0e:	8b 8b       	std	Y+19, r24	; 0x13
    2f10:	09 c0       	rjmp	.+18     	; 0x2f24 <rprintf1RamRom+0x78>
    2f12:	e9 8d       	ldd	r30, Y+25	; 0x19
    2f14:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2f16:	20 81       	ld	r18, Z
    2f18:	2b 8b       	std	Y+19, r18	; 0x13
    2f1a:	89 8d       	ldd	r24, Y+25	; 0x19
    2f1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f1e:	01 96       	adiw	r24, 0x01	; 1
    2f20:	9a 8f       	std	Y+26, r25	; 0x1a
    2f22:	89 8f       	std	Y+25, r24	; 0x19
    2f24:	3b 89       	ldd	r19, Y+19	; 0x13
    2f26:	3d 87       	std	Y+13, r19	; 0x0d
    2f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2a:	85 32       	cpi	r24, 0x25	; 37
    2f2c:	71 f6       	brne	.-100    	; 0x2eca <rprintf1RamRom+0x1e>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    2f2e:	88 8d       	ldd	r24, Y+24	; 0x18
    2f30:	88 23       	and	r24, r24
    2f32:	81 f0       	breq	.+32     	; 0x2f54 <rprintf1RamRom+0xa8>
    2f34:	89 8d       	ldd	r24, Y+25	; 0x19
    2f36:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f38:	9b 83       	std	Y+3, r25	; 0x03
    2f3a:	8a 83       	std	Y+2, r24	; 0x02
    2f3c:	89 8d       	ldd	r24, Y+25	; 0x19
    2f3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f40:	01 96       	adiw	r24, 0x01	; 1
    2f42:	9a 8f       	std	Y+26, r25	; 0x1a
    2f44:	89 8f       	std	Y+25, r24	; 0x19
    2f46:	ea 81       	ldd	r30, Y+2	; 0x02
    2f48:	fb 81       	ldd	r31, Y+3	; 0x03
    2f4a:	84 91       	lpm	r24, Z+
    2f4c:	89 83       	std	Y+1, r24	; 0x01
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	8a 8b       	std	Y+18, r24	; 0x12
    2f52:	09 c0       	rjmp	.+18     	; 0x2f66 <rprintf1RamRom+0xba>
    2f54:	e9 8d       	ldd	r30, Y+25	; 0x19
    2f56:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2f58:	80 81       	ld	r24, Z
    2f5a:	8a 8b       	std	Y+18, r24	; 0x12
    2f5c:	89 8d       	ldd	r24, Y+25	; 0x19
    2f5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f60:	01 96       	adiw	r24, 0x01	; 1
    2f62:	9a 8f       	std	Y+26, r25	; 0x1a
    2f64:	89 8f       	std	Y+25, r24	; 0x19
    2f66:	9a 89       	ldd	r25, Y+18	; 0x12
    2f68:	9d 87       	std	Y+13, r25	; 0x0d
    2f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	39 8b       	std	Y+17, r19	; 0x11
    2f72:	28 8b       	std	Y+16, r18	; 0x10
    2f74:	88 89       	ldd	r24, Y+16	; 0x10
    2f76:	99 89       	ldd	r25, Y+17	; 0x11
    2f78:	84 36       	cpi	r24, 0x64	; 100
    2f7a:	91 05       	cpc	r25, r1
    2f7c:	c1 f0       	breq	.+48     	; 0x2fae <rprintf1RamRom+0x102>
    2f7e:	28 89       	ldd	r18, Y+16	; 0x10
    2f80:	39 89       	ldd	r19, Y+17	; 0x11
    2f82:	28 37       	cpi	r18, 0x78	; 120
    2f84:	31 05       	cpc	r19, r1
    2f86:	e1 f0       	breq	.+56     	; 0x2fc0 <rprintf1RamRom+0x114>
    2f88:	88 89       	ldd	r24, Y+16	; 0x10
    2f8a:	99 89       	ldd	r25, Y+17	; 0x11
    2f8c:	83 36       	cpi	r24, 0x63	; 99
    2f8e:	91 05       	cpc	r25, r1
    2f90:	51 f4       	brne	.+20     	; 0x2fa6 <rprintf1RamRom+0xfa>
		{
			case 'c': format_flag = va_arg(ap,int);
    2f92:	2e 85       	ldd	r18, Y+14	; 0x0e
    2f94:	3f 85       	ldd	r19, Y+15	; 0x0f
    2f96:	c9 01       	movw	r24, r18
    2f98:	02 96       	adiw	r24, 0x02	; 2
    2f9a:	9f 87       	std	Y+15, r25	; 0x0f
    2f9c:	8e 87       	std	Y+14, r24	; 0x0e
    2f9e:	f9 01       	movw	r30, r18
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	8d 87       	std	Y+13, r24	; 0x0d
			default:  rprintfChar(format_flag); continue;
    2fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa8:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
    2fac:	9f cf       	rjmp	.-194    	; 0x2eec <rprintf1RamRom+0x40>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
    2fae:	8a e0       	ldi	r24, 0x0A	; 10
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	98 87       	std	Y+8, r25	; 0x08
    2fb4:	8f 83       	std	Y+7, r24	; 0x07
    2fb6:	80 e1       	ldi	r24, 0x10	; 16
    2fb8:	97 e2       	ldi	r25, 0x27	; 39
    2fba:	9a 87       	std	Y+10, r25	; 0x0a
    2fbc:	89 87       	std	Y+9, r24	; 0x09
    2fbe:	08 c0       	rjmp	.+16     	; 0x2fd0 <rprintf1RamRom+0x124>
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
    2fc0:	80 e1       	ldi	r24, 0x10	; 16
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	98 87       	std	Y+8, r25	; 0x08
    2fc6:	8f 83       	std	Y+7, r24	; 0x07
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e1       	ldi	r25, 0x10	; 16
    2fcc:	9a 87       	std	Y+10, r25	; 0x0a
    2fce:	89 87       	std	Y+9, r24	; 0x09

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    2fd0:	2e 85       	ldd	r18, Y+14	; 0x0e
    2fd2:	3f 85       	ldd	r19, Y+15	; 0x0f
    2fd4:	c9 01       	movw	r24, r18
    2fd6:	02 96       	adiw	r24, 0x02	; 2
    2fd8:	9f 87       	std	Y+15, r25	; 0x0f
    2fda:	8e 87       	std	Y+14, r24	; 0x0e
    2fdc:	f9 01       	movw	r30, r18
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	9c 87       	std	Y+12, r25	; 0x0c
    2fe4:	8b 87       	std	Y+11, r24	; 0x0b
			if (format_flag == 'd')
    2fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe8:	84 36       	cpi	r24, 0x64	; 100
    2fea:	29 f5       	brne	.+74     	; 0x3036 <rprintf1RamRom+0x18a>
			{
				if (((int)u_val) < 0)
    2fec:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fee:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ff0:	99 23       	and	r25, r25
    2ff2:	ac f4       	brge	.+42     	; 0x301e <rprintf1RamRom+0x172>
				{
					u_val = - u_val;
    2ff4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ff6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ff8:	90 95       	com	r25
    2ffa:	81 95       	neg	r24
    2ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffe:	9c 87       	std	Y+12, r25	; 0x0c
    3000:	8b 87       	std	Y+11, r24	; 0x0b
					rprintfChar('-');
    3002:	8d e2       	ldi	r24, 0x2D	; 45
    3004:	0e 94 cc 13 	call	0x2798	; 0x2798 <rprintfChar>
    3008:	0a c0       	rjmp	.+20     	; 0x301e <rprintf1RamRom+0x172>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    300a:	89 85       	ldd	r24, Y+9	; 0x09
    300c:	9a 85       	ldd	r25, Y+10	; 0x0a
    300e:	2a e0       	ldi	r18, 0x0A	; 10
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	b9 01       	movw	r22, r18
    3014:	0e 94 bc 29 	call	0x5378	; 0x5378 <__udivmodhi4>
    3018:	cb 01       	movw	r24, r22
    301a:	9a 87       	std	Y+10, r25	; 0x0a
    301c:	89 87       	std	Y+9, r24	; 0x09
    301e:	89 85       	ldd	r24, Y+9	; 0x09
    3020:	9a 85       	ldd	r25, Y+10	; 0x0a
    3022:	82 30       	cpi	r24, 0x02	; 2
    3024:	91 05       	cpc	r25, r1
    3026:	38 f0       	brcs	.+14     	; 0x3036 <rprintf1RamRom+0x18a>
    3028:	29 85       	ldd	r18, Y+9	; 0x09
    302a:	3a 85       	ldd	r19, Y+10	; 0x0a
    302c:	8b 85       	ldd	r24, Y+11	; 0x0b
    302e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3030:	82 17       	cp	r24, r18
    3032:	93 07       	cpc	r25, r19
    3034:	50 f3       	brcs	.-44     	; 0x300a <rprintf1RamRom+0x15e>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    3036:	8b 85       	ldd	r24, Y+11	; 0x0b
    3038:	9c 85       	ldd	r25, Y+12	; 0x0c
    303a:	29 85       	ldd	r18, Y+9	; 0x09
    303c:	3a 85       	ldd	r19, Y+10	; 0x0a
    303e:	b9 01       	movw	r22, r18
    3040:	0e 94 bc 29 	call	0x5378	; 0x5378 <__udivmodhi4>
    3044:	cb 01       	movw	r24, r22
    3046:	0e 94 a5 14 	call	0x294a	; 0x294a <rprintfu04>
				u_val %= div_val;
    304a:	8b 85       	ldd	r24, Y+11	; 0x0b
    304c:	9c 85       	ldd	r25, Y+12	; 0x0c
    304e:	29 85       	ldd	r18, Y+9	; 0x09
    3050:	3a 85       	ldd	r19, Y+10	; 0x0a
    3052:	b9 01       	movw	r22, r18
    3054:	0e 94 bc 29 	call	0x5378	; 0x5378 <__udivmodhi4>
    3058:	9c 87       	std	Y+12, r25	; 0x0c
    305a:	8b 87       	std	Y+11, r24	; 0x0b
				div_val /= base;
    305c:	89 85       	ldd	r24, Y+9	; 0x09
    305e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3060:	2f 81       	ldd	r18, Y+7	; 0x07
    3062:	38 85       	ldd	r19, Y+8	; 0x08
    3064:	b9 01       	movw	r22, r18
    3066:	0e 94 bc 29 	call	0x5378	; 0x5378 <__udivmodhi4>
    306a:	cb 01       	movw	r24, r22
    306c:	9a 87       	std	Y+10, r25	; 0x0a
    306e:	89 87       	std	Y+9, r24	; 0x09
			} while (div_val);
    3070:	89 85       	ldd	r24, Y+9	; 0x09
    3072:	9a 85       	ldd	r25, Y+10	; 0x0a
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	f9 f6       	brne	.-66     	; 0x3036 <rprintf1RamRom+0x18a>
    3078:	39 cf       	rjmp	.-398    	; 0x2eec <rprintf1RamRom+0x40>

0000307a <PWM_Init_timer1_LED>:

//tested and working: H3, H6

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	0f 92       	push	r0
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	89 83       	std	Y+1, r24	; 0x01
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	89 30       	cpi	r24, 0x09	; 9
    308a:	79 f4       	brne	.+30     	; 0x30aa <PWM_Init_timer1_LED+0x30>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
    308c:	a0 e8       	ldi	r26, 0x80	; 128
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e0 e8       	ldi	r30, 0x80	; 128
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	82 60       	ori	r24, 0x02	; 2
    3098:	8c 93       	st	X, r24
		cbi(TCCR1A,PWM10);
    309a:	a0 e8       	ldi	r26, 0x80	; 128
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e0 e8       	ldi	r30, 0x80	; 128
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	8e 7f       	andi	r24, 0xFE	; 254
    30a6:	8c 93       	st	X, r24
    30a8:	20 c0       	rjmp	.+64     	; 0x30ea <PWM_Init_timer1_LED+0x70>
	}
	else if( bitRes == 10 )
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	8a 30       	cpi	r24, 0x0A	; 10
    30ae:	79 f4       	brne	.+30     	; 0x30ce <PWM_Init_timer1_LED+0x54>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
    30b0:	a0 e8       	ldi	r26, 0x80	; 128
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	e0 e8       	ldi	r30, 0x80	; 128
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	82 60       	ori	r24, 0x02	; 2
    30bc:	8c 93       	st	X, r24
		sbi(TCCR1A,PWM10);
    30be:	a0 e8       	ldi	r26, 0x80	; 128
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e0 e8       	ldi	r30, 0x80	; 128
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	81 60       	ori	r24, 0x01	; 1
    30ca:	8c 93       	st	X, r24
    30cc:	0e c0       	rjmp	.+28     	; 0x30ea <PWM_Init_timer1_LED+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
    30ce:	a0 e8       	ldi	r26, 0x80	; 128
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e0 e8       	ldi	r30, 0x80	; 128
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	8d 7f       	andi	r24, 0xFD	; 253
    30da:	8c 93       	st	X, r24
		sbi(TCCR1A,PWM10);
    30dc:	a0 e8       	ldi	r26, 0x80	; 128
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e0 e8       	ldi	r30, 0x80	; 128
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	81 60       	ori	r24, 0x01	; 1
    30e8:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR1B = 0;
    30ea:	ea e8       	ldi	r30, 0x8A	; 138
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	11 82       	std	Z+1, r1	; 0x01
    30f0:	10 82       	st	Z, r1
}
    30f2:	0f 90       	pop	r0
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	08 95       	ret

000030fa <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	0f 92       	push	r0
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	89 83       	std	Y+1, r24	; 0x01
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	89 30       	cpi	r24, 0x09	; 9
    310a:	79 f4       	brne	.+30     	; 0x312a <PWM_Init_timer2_H6+0x30>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
    310c:	a0 eb       	ldi	r26, 0xB0	; 176
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	e0 eb       	ldi	r30, 0xB0	; 176
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	82 60       	ori	r24, 0x02	; 2
    3118:	8c 93       	st	X, r24
		cbi(TCCR2A,PWM10);
    311a:	a0 eb       	ldi	r26, 0xB0	; 176
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e0 eb       	ldi	r30, 0xB0	; 176
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	8e 7f       	andi	r24, 0xFE	; 254
    3126:	8c 93       	st	X, r24
    3128:	20 c0       	rjmp	.+64     	; 0x316a <PWM_Init_timer2_H6+0x70>
	}
	else if( bitRes == 10 )
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	8a 30       	cpi	r24, 0x0A	; 10
    312e:	79 f4       	brne	.+30     	; 0x314e <PWM_Init_timer2_H6+0x54>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
    3130:	a0 eb       	ldi	r26, 0xB0	; 176
    3132:	b0 e0       	ldi	r27, 0x00	; 0
    3134:	e0 eb       	ldi	r30, 0xB0	; 176
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	82 60       	ori	r24, 0x02	; 2
    313c:	8c 93       	st	X, r24
		sbi(TCCR2A,PWM10);
    313e:	a0 eb       	ldi	r26, 0xB0	; 176
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e0 eb       	ldi	r30, 0xB0	; 176
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	81 60       	ori	r24, 0x01	; 1
    314a:	8c 93       	st	X, r24
    314c:	0e c0       	rjmp	.+28     	; 0x316a <PWM_Init_timer2_H6+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
    314e:	a0 eb       	ldi	r26, 0xB0	; 176
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	e0 eb       	ldi	r30, 0xB0	; 176
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	8d 7f       	andi	r24, 0xFD	; 253
    315a:	8c 93       	st	X, r24
		sbi(TCCR2A,PWM10);
    315c:	a0 eb       	ldi	r26, 0xB0	; 176
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	e0 eb       	ldi	r30, 0xB0	; 176
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	81 60       	ori	r24, 0x01	; 1
    3168:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR2B = 0;
    316a:	e4 eb       	ldi	r30, 0xB4	; 180
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	10 82       	st	Z, r1
}
    3170:	0f 90       	pop	r0
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	08 95       	ret

00003178 <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
    3178:	df 93       	push	r29
    317a:	cf 93       	push	r28
    317c:	0f 92       	push	r0
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	89 83       	std	Y+1, r24	; 0x01
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	89 30       	cpi	r24, 0x09	; 9
    3188:	79 f4       	brne	.+30     	; 0x31a8 <PWM_Init_timer3_E3+0x30>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
    318a:	a0 e9       	ldi	r26, 0x90	; 144
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	e0 e9       	ldi	r30, 0x90	; 144
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	82 60       	ori	r24, 0x02	; 2
    3196:	8c 93       	st	X, r24
		cbi(TCCR3A,PWM10);
    3198:	a0 e9       	ldi	r26, 0x90	; 144
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e0 e9       	ldi	r30, 0x90	; 144
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	8e 7f       	andi	r24, 0xFE	; 254
    31a4:	8c 93       	st	X, r24
    31a6:	20 c0       	rjmp	.+64     	; 0x31e8 <PWM_Init_timer3_E3+0x70>
	}
	else if( bitRes == 10 )
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	8a 30       	cpi	r24, 0x0A	; 10
    31ac:	79 f4       	brne	.+30     	; 0x31cc <PWM_Init_timer3_E3+0x54>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
    31ae:	a0 e9       	ldi	r26, 0x90	; 144
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	e0 e9       	ldi	r30, 0x90	; 144
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	82 60       	ori	r24, 0x02	; 2
    31ba:	8c 93       	st	X, r24
		sbi(TCCR3A,PWM10);
    31bc:	a0 e9       	ldi	r26, 0x90	; 144
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	e0 e9       	ldi	r30, 0x90	; 144
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	81 60       	ori	r24, 0x01	; 1
    31c8:	8c 93       	st	X, r24
    31ca:	0e c0       	rjmp	.+28     	; 0x31e8 <PWM_Init_timer3_E3+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
    31cc:	a0 e9       	ldi	r26, 0x90	; 144
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	e0 e9       	ldi	r30, 0x90	; 144
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	8d 7f       	andi	r24, 0xFD	; 253
    31d8:	8c 93       	st	X, r24
		sbi(TCCR3A,PWM10);
    31da:	a0 e9       	ldi	r26, 0x90	; 144
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e0 e9       	ldi	r30, 0x90	; 144
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	81 60       	ori	r24, 0x01	; 1
    31e6:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR3A = 0;
    31e8:	e8 e9       	ldi	r30, 0x98	; 152
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	11 82       	std	Z+1, r1	; 0x01
    31ee:	10 82       	st	Z, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    31f0:	0f 90       	pop	r0
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	0f 92       	push	r0
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62
    3202:	89 83       	std	Y+1, r24	; 0x01
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	89 30       	cpi	r24, 0x09	; 9
    3208:	79 f4       	brne	.+30     	; 0x3228 <PWM_Init_timer3_E4+0x30>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
    320a:	a1 e9       	ldi	r26, 0x91	; 145
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	e1 e9       	ldi	r30, 0x91	; 145
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	82 60       	ori	r24, 0x02	; 2
    3216:	8c 93       	st	X, r24
		cbi(TCCR3B,PWM10);
    3218:	a1 e9       	ldi	r26, 0x91	; 145
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	e1 e9       	ldi	r30, 0x91	; 145
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	8e 7f       	andi	r24, 0xFE	; 254
    3224:	8c 93       	st	X, r24
    3226:	20 c0       	rjmp	.+64     	; 0x3268 <PWM_Init_timer3_E4+0x70>
	}
	else if( bitRes == 10 )
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	8a 30       	cpi	r24, 0x0A	; 10
    322c:	79 f4       	brne	.+30     	; 0x324c <PWM_Init_timer3_E4+0x54>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
    322e:	a1 e9       	ldi	r26, 0x91	; 145
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	e1 e9       	ldi	r30, 0x91	; 145
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	80 81       	ld	r24, Z
    3238:	82 60       	ori	r24, 0x02	; 2
    323a:	8c 93       	st	X, r24
		sbi(TCCR3B,PWM10);
    323c:	a1 e9       	ldi	r26, 0x91	; 145
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e1 e9       	ldi	r30, 0x91	; 145
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	81 60       	ori	r24, 0x01	; 1
    3248:	8c 93       	st	X, r24
    324a:	0e c0       	rjmp	.+28     	; 0x3268 <PWM_Init_timer3_E4+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
    324c:	a1 e9       	ldi	r26, 0x91	; 145
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e1 e9       	ldi	r30, 0x91	; 145
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	8d 7f       	andi	r24, 0xFD	; 253
    3258:	8c 93       	st	X, r24
		sbi(TCCR3B,PWM10);
    325a:	a1 e9       	ldi	r26, 0x91	; 145
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	e1 e9       	ldi	r30, 0x91	; 145
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	81 60       	ori	r24, 0x01	; 1
    3266:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR3B = 0;
    3268:	ea e9       	ldi	r30, 0x9A	; 154
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	11 82       	std	Z+1, r1	; 0x01
    326e:	10 82       	st	Z, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    3270:	0f 90       	pop	r0
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	08 95       	ret

00003278 <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	0f 92       	push	r0
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
    3282:	89 83       	std	Y+1, r24	; 0x01
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	89 30       	cpi	r24, 0x09	; 9
    3288:	79 f4       	brne	.+30     	; 0x32a8 <PWM_Init_timer3_E5+0x30>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
    328a:	a2 e9       	ldi	r26, 0x92	; 146
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	e2 e9       	ldi	r30, 0x92	; 146
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	82 60       	ori	r24, 0x02	; 2
    3296:	8c 93       	st	X, r24
		cbi(TCCR3C,PWM10);
    3298:	a2 e9       	ldi	r26, 0x92	; 146
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e2 e9       	ldi	r30, 0x92	; 146
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	8e 7f       	andi	r24, 0xFE	; 254
    32a4:	8c 93       	st	X, r24
    32a6:	20 c0       	rjmp	.+64     	; 0x32e8 <PWM_Init_timer3_E5+0x70>
	}
	else if( bitRes == 10 )
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	8a 30       	cpi	r24, 0x0A	; 10
    32ac:	79 f4       	brne	.+30     	; 0x32cc <PWM_Init_timer3_E5+0x54>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
    32ae:	a2 e9       	ldi	r26, 0x92	; 146
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	e2 e9       	ldi	r30, 0x92	; 146
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	82 60       	ori	r24, 0x02	; 2
    32ba:	8c 93       	st	X, r24
		sbi(TCCR3C,PWM10);
    32bc:	a2 e9       	ldi	r26, 0x92	; 146
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e2 e9       	ldi	r30, 0x92	; 146
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	81 60       	ori	r24, 0x01	; 1
    32c8:	8c 93       	st	X, r24
    32ca:	0e c0       	rjmp	.+28     	; 0x32e8 <PWM_Init_timer3_E5+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
    32cc:	a2 e9       	ldi	r26, 0x92	; 146
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	e2 e9       	ldi	r30, 0x92	; 146
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	8d 7f       	andi	r24, 0xFD	; 253
    32d8:	8c 93       	st	X, r24
		sbi(TCCR3C,PWM10);
    32da:	a2 e9       	ldi	r26, 0x92	; 146
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	e2 e9       	ldi	r30, 0x92	; 146
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	81 60       	ori	r24, 0x01	; 1
    32e6:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR3C = 0;
    32e8:	ec e9       	ldi	r30, 0x9C	; 156
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	11 82       	std	Z+1, r1	; 0x01
    32ee:	10 82       	st	Z, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    32f0:	0f 90       	pop	r0
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	08 95       	ret

000032f8 <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	0f 92       	push	r0
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62
    3302:	89 83       	std	Y+1, r24	; 0x01
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	89 30       	cpi	r24, 0x09	; 9
    3308:	79 f4       	brne	.+30     	; 0x3328 <PWM_Init_timer4_H3+0x30>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
    330a:	a0 ea       	ldi	r26, 0xA0	; 160
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	e0 ea       	ldi	r30, 0xA0	; 160
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	82 60       	ori	r24, 0x02	; 2
    3316:	8c 93       	st	X, r24
		cbi(TCCR4A,PWM10);
    3318:	a0 ea       	ldi	r26, 0xA0	; 160
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e0 ea       	ldi	r30, 0xA0	; 160
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	8e 7f       	andi	r24, 0xFE	; 254
    3324:	8c 93       	st	X, r24
    3326:	20 c0       	rjmp	.+64     	; 0x3368 <PWM_Init_timer4_H3+0x70>
	}
	else if( bitRes == 10 )
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	8a 30       	cpi	r24, 0x0A	; 10
    332c:	79 f4       	brne	.+30     	; 0x334c <PWM_Init_timer4_H3+0x54>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
    332e:	a0 ea       	ldi	r26, 0xA0	; 160
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	e0 ea       	ldi	r30, 0xA0	; 160
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	82 60       	ori	r24, 0x02	; 2
    333a:	8c 93       	st	X, r24
		sbi(TCCR4A,PWM10);
    333c:	a0 ea       	ldi	r26, 0xA0	; 160
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	e0 ea       	ldi	r30, 0xA0	; 160
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	81 60       	ori	r24, 0x01	; 1
    3348:	8c 93       	st	X, r24
    334a:	0e c0       	rjmp	.+28     	; 0x3368 <PWM_Init_timer4_H3+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
    334c:	a0 ea       	ldi	r26, 0xA0	; 160
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	e0 ea       	ldi	r30, 0xA0	; 160
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	8d 7f       	andi	r24, 0xFD	; 253
    3358:	8c 93       	st	X, r24
		sbi(TCCR4A,PWM10);
    335a:	a0 ea       	ldi	r26, 0xA0	; 160
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	e0 ea       	ldi	r30, 0xA0	; 160
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	80 81       	ld	r24, Z
    3364:	81 60       	ori	r24, 0x01	; 1
    3366:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR4A = 0;
    3368:	e8 ea       	ldi	r30, 0xA8	; 168
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	11 82       	std	Z+1, r1	; 0x01
    336e:	10 82       	st	Z, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    3370:	0f 90       	pop	r0
    3372:	cf 91       	pop	r28
    3374:	df 91       	pop	r29
    3376:	08 95       	ret

00003378 <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
    3378:	df 93       	push	r29
    337a:	cf 93       	push	r28
    337c:	0f 92       	push	r0
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	89 83       	std	Y+1, r24	; 0x01
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	89 30       	cpi	r24, 0x09	; 9
    3388:	79 f4       	brne	.+30     	; 0x33a8 <PWM_Init_timer4_H4+0x30>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
    338a:	a1 ea       	ldi	r26, 0xA1	; 161
    338c:	b0 e0       	ldi	r27, 0x00	; 0
    338e:	e1 ea       	ldi	r30, 0xA1	; 161
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	80 81       	ld	r24, Z
    3394:	82 60       	ori	r24, 0x02	; 2
    3396:	8c 93       	st	X, r24
		cbi(TCCR4B,PWM10);
    3398:	a1 ea       	ldi	r26, 0xA1	; 161
    339a:	b0 e0       	ldi	r27, 0x00	; 0
    339c:	e1 ea       	ldi	r30, 0xA1	; 161
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	80 81       	ld	r24, Z
    33a2:	8e 7f       	andi	r24, 0xFE	; 254
    33a4:	8c 93       	st	X, r24
    33a6:	20 c0       	rjmp	.+64     	; 0x33e8 <PWM_Init_timer4_H4+0x70>
	}
	else if( bitRes == 10 )
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	8a 30       	cpi	r24, 0x0A	; 10
    33ac:	79 f4       	brne	.+30     	; 0x33cc <PWM_Init_timer4_H4+0x54>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
    33ae:	a1 ea       	ldi	r26, 0xA1	; 161
    33b0:	b0 e0       	ldi	r27, 0x00	; 0
    33b2:	e1 ea       	ldi	r30, 0xA1	; 161
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	80 81       	ld	r24, Z
    33b8:	82 60       	ori	r24, 0x02	; 2
    33ba:	8c 93       	st	X, r24
		sbi(TCCR4B,PWM10);
    33bc:	a1 ea       	ldi	r26, 0xA1	; 161
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	e1 ea       	ldi	r30, 0xA1	; 161
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	81 60       	ori	r24, 0x01	; 1
    33c8:	8c 93       	st	X, r24
    33ca:	0e c0       	rjmp	.+28     	; 0x33e8 <PWM_Init_timer4_H4+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
    33cc:	a1 ea       	ldi	r26, 0xA1	; 161
    33ce:	b0 e0       	ldi	r27, 0x00	; 0
    33d0:	e1 ea       	ldi	r30, 0xA1	; 161
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	80 81       	ld	r24, Z
    33d6:	8d 7f       	andi	r24, 0xFD	; 253
    33d8:	8c 93       	st	X, r24
		sbi(TCCR4B,PWM10);
    33da:	a1 ea       	ldi	r26, 0xA1	; 161
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	e1 ea       	ldi	r30, 0xA1	; 161
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
    33e4:	81 60       	ori	r24, 0x01	; 1
    33e6:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR4B = 0;
    33e8:	ea ea       	ldi	r30, 0xAA	; 170
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	11 82       	std	Z+1, r1	; 0x01
    33ee:	10 82       	st	Z, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    33f0:	0f 90       	pop	r0
    33f2:	cf 91       	pop	r28
    33f4:	df 91       	pop	r29
    33f6:	08 95       	ret

000033f8 <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
    33f8:	df 93       	push	r29
    33fa:	cf 93       	push	r28
    33fc:	0f 92       	push	r0
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	89 83       	std	Y+1, r24	; 0x01
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	89 30       	cpi	r24, 0x09	; 9
    3408:	79 f4       	brne	.+30     	; 0x3428 <PWM_Init_timer4_H5+0x30>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
    340a:	a0 ea       	ldi	r26, 0xA0	; 160
    340c:	b0 e0       	ldi	r27, 0x00	; 0
    340e:	e0 ea       	ldi	r30, 0xA0	; 160
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 81       	ld	r24, Z
    3414:	82 60       	ori	r24, 0x02	; 2
    3416:	8c 93       	st	X, r24
		cbi(TCCR4A,PWM10);
    3418:	a0 ea       	ldi	r26, 0xA0	; 160
    341a:	b0 e0       	ldi	r27, 0x00	; 0
    341c:	e0 ea       	ldi	r30, 0xA0	; 160
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	80 81       	ld	r24, Z
    3422:	8e 7f       	andi	r24, 0xFE	; 254
    3424:	8c 93       	st	X, r24
    3426:	20 c0       	rjmp	.+64     	; 0x3468 <PWM_Init_timer4_H5+0x70>
	}
	else if( bitRes == 10 )
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	8a 30       	cpi	r24, 0x0A	; 10
    342c:	79 f4       	brne	.+30     	; 0x344c <PWM_Init_timer4_H5+0x54>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
    342e:	a0 ea       	ldi	r26, 0xA0	; 160
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	e0 ea       	ldi	r30, 0xA0	; 160
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	80 81       	ld	r24, Z
    3438:	82 60       	ori	r24, 0x02	; 2
    343a:	8c 93       	st	X, r24
		sbi(TCCR4A,PWM10);
    343c:	a0 ea       	ldi	r26, 0xA0	; 160
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	e0 ea       	ldi	r30, 0xA0	; 160
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	81 60       	ori	r24, 0x01	; 1
    3448:	8c 93       	st	X, r24
    344a:	0e c0       	rjmp	.+28     	; 0x3468 <PWM_Init_timer4_H5+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
    344c:	a0 ea       	ldi	r26, 0xA0	; 160
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	e0 ea       	ldi	r30, 0xA0	; 160
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	8d 7f       	andi	r24, 0xFD	; 253
    3458:	8c 93       	st	X, r24
		sbi(TCCR4A,PWM10);
    345a:	a0 ea       	ldi	r26, 0xA0	; 160
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	e0 ea       	ldi	r30, 0xA0	; 160
    3460:	f0 e0       	ldi	r31, 0x00	; 0
    3462:	80 81       	ld	r24, Z
    3464:	81 60       	ori	r24, 0x01	; 1
    3466:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR4C = 0;
    3468:	ec ea       	ldi	r30, 0xAC	; 172
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	11 82       	std	Z+1, r1	; 0x01
    346e:	10 82       	st	Z, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    3470:	0f 90       	pop	r0
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <timer1PWMInitICR>:

#ifdef WGM10
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	00 d0       	rcall	.+0      	; 0x347e <timer1PWMInitICR+0x6>
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	9a 83       	std	Y+2, r25	; 0x02
    3484:	89 83       	std	Y+1, r24	; 0x01
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
    3486:	a0 e8       	ldi	r26, 0x80	; 128
    3488:	b0 e0       	ldi	r27, 0x00	; 0
    348a:	e0 e8       	ldi	r30, 0x80	; 128
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	80 81       	ld	r24, Z
    3490:	8e 7f       	andi	r24, 0xFE	; 254
    3492:	8c 93       	st	X, r24
	sbi(TCCR1A,WGM11);
    3494:	a0 e8       	ldi	r26, 0x80	; 128
    3496:	b0 e0       	ldi	r27, 0x00	; 0
    3498:	e0 e8       	ldi	r30, 0x80	; 128
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	80 81       	ld	r24, Z
    349e:	82 60       	ori	r24, 0x02	; 2
    34a0:	8c 93       	st	X, r24
	sbi(TCCR1B,WGM12);
    34a2:	a1 e8       	ldi	r26, 0x81	; 129
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	e1 e8       	ldi	r30, 0x81	; 129
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	80 81       	ld	r24, Z
    34ac:	88 60       	ori	r24, 0x08	; 8
    34ae:	8c 93       	st	X, r24
	sbi(TCCR1B,WGM13);
    34b0:	a1 e8       	ldi	r26, 0x81	; 129
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	e1 e8       	ldi	r30, 0x81	; 129
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	80 61       	ori	r24, 0x10	; 16
    34bc:	8c 93       	st	X, r24
	
	// set top count value
	ICR1 = topcount;
    34be:	e6 e8       	ldi	r30, 0x86	; 134
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	9a 81       	ldd	r25, Y+2	; 0x02
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	80 83       	st	Z, r24
	
	// clear output compare values
	OCR1A = 0;
    34ca:	e8 e8       	ldi	r30, 0x88	; 136
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	11 82       	std	Z+1, r1	; 0x01
    34d0:	10 82       	st	Z, r1
	OCR1B = 0;
    34d2:	ea e8       	ldi	r30, 0x8A	; 138
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	11 82       	std	Z+1, r1	; 0x01
    34d8:	10 82       	st	Z, r1
	OCR1C = 0;
    34da:	ec e8       	ldi	r30, 0x8C	; 140
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	11 82       	std	Z+1, r1	; 0x01
    34e0:	10 82       	st	Z, r1
}
    34e2:	0f 90       	pop	r0
    34e4:	0f 90       	pop	r0
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	08 95       	ret

000034ec <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	00 d0       	rcall	.+0      	; 0x34f2 <timer3PWMInitICR+0x6>
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	9a 83       	std	Y+2, r25	; 0x02
    34f8:	89 83       	std	Y+1, r24	; 0x01
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
    34fa:	a0 e9       	ldi	r26, 0x90	; 144
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	e0 e9       	ldi	r30, 0x90	; 144
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	8e 7f       	andi	r24, 0xFE	; 254
    3506:	8c 93       	st	X, r24
	sbi(TCCR3A,WGM11);
    3508:	a0 e9       	ldi	r26, 0x90	; 144
    350a:	b0 e0       	ldi	r27, 0x00	; 0
    350c:	e0 e9       	ldi	r30, 0x90	; 144
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	80 81       	ld	r24, Z
    3512:	82 60       	ori	r24, 0x02	; 2
    3514:	8c 93       	st	X, r24
	sbi(TCCR3B,WGM12);
    3516:	a1 e9       	ldi	r26, 0x91	; 145
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e1 e9       	ldi	r30, 0x91	; 145
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	88 60       	ori	r24, 0x08	; 8
    3522:	8c 93       	st	X, r24
	sbi(TCCR3B,WGM13);
    3524:	a1 e9       	ldi	r26, 0x91	; 145
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	e1 e9       	ldi	r30, 0x91	; 145
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	80 61       	ori	r24, 0x10	; 16
    3530:	8c 93       	st	X, r24
	
	// set top count value
	ICR3 = topcount;
    3532:	e6 e9       	ldi	r30, 0x96	; 150
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	9a 81       	ldd	r25, Y+2	; 0x02
    353a:	91 83       	std	Z+1, r25	; 0x01
    353c:	80 83       	st	Z, r24
	
	// clear output compare values
	OCR3A = 0;
    353e:	e8 e9       	ldi	r30, 0x98	; 152
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	11 82       	std	Z+1, r1	; 0x01
    3544:	10 82       	st	Z, r1
	OCR3B = 0;
    3546:	ea e9       	ldi	r30, 0x9A	; 154
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	11 82       	std	Z+1, r1	; 0x01
    354c:	10 82       	st	Z, r1
	OCR3C = 0;
    354e:	ec e9       	ldi	r30, 0x9C	; 156
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	11 82       	std	Z+1, r1	; 0x01
    3554:	10 82       	st	Z, r1
}
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	08 95       	ret

00003560 <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	00 d0       	rcall	.+0      	; 0x3566 <timer4PWMInitICR+0x6>
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	9a 83       	std	Y+2, r25	; 0x02
    356c:	89 83       	std	Y+1, r24	; 0x01
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
    356e:	a0 ea       	ldi	r26, 0xA0	; 160
    3570:	b0 e0       	ldi	r27, 0x00	; 0
    3572:	e0 ea       	ldi	r30, 0xA0	; 160
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	80 81       	ld	r24, Z
    3578:	8e 7f       	andi	r24, 0xFE	; 254
    357a:	8c 93       	st	X, r24
	sbi(TCCR4A,WGM11);
    357c:	a0 ea       	ldi	r26, 0xA0	; 160
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	e0 ea       	ldi	r30, 0xA0	; 160
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	80 81       	ld	r24, Z
    3586:	82 60       	ori	r24, 0x02	; 2
    3588:	8c 93       	st	X, r24
	sbi(TCCR4B,WGM12);
    358a:	a1 ea       	ldi	r26, 0xA1	; 161
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	e1 ea       	ldi	r30, 0xA1	; 161
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	88 60       	ori	r24, 0x08	; 8
    3596:	8c 93       	st	X, r24
	sbi(TCCR4B,WGM13);
    3598:	a1 ea       	ldi	r26, 0xA1	; 161
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	e1 ea       	ldi	r30, 0xA1	; 161
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	80 61       	ori	r24, 0x10	; 16
    35a4:	8c 93       	st	X, r24
	
	// set top count value
	ICR4 = topcount;
    35a6:	e6 ea       	ldi	r30, 0xA6	; 166
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	9a 81       	ldd	r25, Y+2	; 0x02
    35ae:	91 83       	std	Z+1, r25	; 0x01
    35b0:	80 83       	st	Z, r24
	
	// clear output compare values
	OCR4A = 0;
    35b2:	e8 ea       	ldi	r30, 0xA8	; 168
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	11 82       	std	Z+1, r1	; 0x01
    35b8:	10 82       	st	Z, r1
	OCR4B = 0;
    35ba:	ea ea       	ldi	r30, 0xAA	; 170
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	11 82       	std	Z+1, r1	; 0x01
    35c0:	10 82       	st	Z, r1
	OCR4C = 0;
    35c2:	ec ea       	ldi	r30, 0xAC	; 172
    35c4:	f0 e0       	ldi	r31, 0x00	; 0
    35c6:	11 82       	std	Z+1, r1	; 0x01
    35c8:	10 82       	st	Z, r1
}
    35ca:	0f 90       	pop	r0
    35cc:	0f 90       	pop	r0
    35ce:	cf 91       	pop	r28
    35d0:	df 91       	pop	r29
    35d2:	08 95       	ret

000035d4 <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
    35d4:	df 93       	push	r29
    35d6:	cf 93       	push	r28
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR1A,COM1B1);
    35dc:	a0 e8       	ldi	r26, 0x80	; 128
    35de:	b0 e0       	ldi	r27, 0x00	; 0
    35e0:	e0 e8       	ldi	r30, 0x80	; 128
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	80 81       	ld	r24, Z
    35e6:	80 62       	ori	r24, 0x20	; 32
    35e8:	8c 93       	st	X, r24
	cbi(TCCR1A,COM1B0);
    35ea:	a0 e8       	ldi	r26, 0x80	; 128
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	e0 e8       	ldi	r30, 0x80	; 128
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	8f 7e       	andi	r24, 0xEF	; 239
    35f6:	8c 93       	st	X, r24
}
    35f8:	cf 91       	pop	r28
    35fa:	df 91       	pop	r29
    35fc:	08 95       	ret

000035fe <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR2A,COM2B1);
    3606:	a0 eb       	ldi	r26, 0xB0	; 176
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	e0 eb       	ldi	r30, 0xB0	; 176
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	80 62       	ori	r24, 0x20	; 32
    3612:	8c 93       	st	X, r24
	cbi(TCCR2A,COM2B0);
    3614:	a0 eb       	ldi	r26, 0xB0	; 176
    3616:	b0 e0       	ldi	r27, 0x00	; 0
    3618:	e0 eb       	ldi	r30, 0xB0	; 176
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	80 81       	ld	r24, Z
    361e:	8f 7e       	andi	r24, 0xEF	; 239
    3620:	8c 93       	st	X, r24
}
    3622:	cf 91       	pop	r28
    3624:	df 91       	pop	r29
    3626:	08 95       	ret

00003628 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
    3628:	df 93       	push	r29
    362a:	cf 93       	push	r28
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR3A,COM3A1);
    3630:	a0 e9       	ldi	r26, 0x90	; 144
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	e0 e9       	ldi	r30, 0x90	; 144
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	80 68       	ori	r24, 0x80	; 128
    363c:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3A0);
    363e:	a0 e9       	ldi	r26, 0x90	; 144
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e0 e9       	ldi	r30, 0x90	; 144
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	8f 7b       	andi	r24, 0xBF	; 191
    364a:	8c 93       	st	X, r24
}
    364c:	cf 91       	pop	r28
    364e:	df 91       	pop	r29
    3650:	08 95       	ret

00003652 <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
    3652:	df 93       	push	r29
    3654:	cf 93       	push	r28
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR3A,COM3B1);
    365a:	a0 e9       	ldi	r26, 0x90	; 144
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	e0 e9       	ldi	r30, 0x90	; 144
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	80 81       	ld	r24, Z
    3664:	80 62       	ori	r24, 0x20	; 32
    3666:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3B0);
    3668:	a0 e9       	ldi	r26, 0x90	; 144
    366a:	b0 e0       	ldi	r27, 0x00	; 0
    366c:	e0 e9       	ldi	r30, 0x90	; 144
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	80 81       	ld	r24, Z
    3672:	8f 7e       	andi	r24, 0xEF	; 239
    3674:	8c 93       	st	X, r24
}
    3676:	cf 91       	pop	r28
    3678:	df 91       	pop	r29
    367a:	08 95       	ret

0000367c <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR3A,COM3C1);
    3684:	a0 e9       	ldi	r26, 0x90	; 144
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	e0 e9       	ldi	r30, 0x90	; 144
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	80 81       	ld	r24, Z
    368e:	88 60       	ori	r24, 0x08	; 8
    3690:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3C0);
    3692:	a0 e9       	ldi	r26, 0x90	; 144
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	e0 e9       	ldi	r30, 0x90	; 144
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	80 81       	ld	r24, Z
    369c:	8b 7f       	andi	r24, 0xFB	; 251
    369e:	8c 93       	st	X, r24
}
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	08 95       	ret

000036a6 <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR4A,COM4A1);
    36ae:	a0 ea       	ldi	r26, 0xA0	; 160
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	e0 ea       	ldi	r30, 0xA0	; 160
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	80 68       	ori	r24, 0x80	; 128
    36ba:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4A0);
    36bc:	a0 ea       	ldi	r26, 0xA0	; 160
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	e0 ea       	ldi	r30, 0xA0	; 160
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 81       	ld	r24, Z
    36c6:	8f 7b       	andi	r24, 0xBF	; 191
    36c8:	8c 93       	st	X, r24
}
    36ca:	cf 91       	pop	r28
    36cc:	df 91       	pop	r29
    36ce:	08 95       	ret

000036d0 <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
    36d0:	df 93       	push	r29
    36d2:	cf 93       	push	r28
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR4A,COM4B1);
    36d8:	a0 ea       	ldi	r26, 0xA0	; 160
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	e0 ea       	ldi	r30, 0xA0	; 160
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	80 81       	ld	r24, Z
    36e2:	80 62       	ori	r24, 0x20	; 32
    36e4:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4B0);
    36e6:	a0 ea       	ldi	r26, 0xA0	; 160
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	e0 ea       	ldi	r30, 0xA0	; 160
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	80 81       	ld	r24, Z
    36f0:	8f 7e       	andi	r24, 0xEF	; 239
    36f2:	8c 93       	st	X, r24
}
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR4A,COM4C1);
    3702:	a0 ea       	ldi	r26, 0xA0	; 160
    3704:	b0 e0       	ldi	r27, 0x00	; 0
    3706:	e0 ea       	ldi	r30, 0xA0	; 160
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	80 81       	ld	r24, Z
    370c:	88 60       	ori	r24, 0x08	; 8
    370e:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4C0);
    3710:	a0 ea       	ldi	r26, 0xA0	; 160
    3712:	b0 e0       	ldi	r27, 0x00	; 0
    3714:	e0 ea       	ldi	r30, 0xA0	; 160
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
    371a:	8b 7f       	andi	r24, 0xFB	; 251
    371c:	8c 93       	st	X, r24
}
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR1A,COM1B1);
    372c:	a0 e8       	ldi	r26, 0x80	; 128
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	e0 e8       	ldi	r30, 0x80	; 128
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	8f 7d       	andi	r24, 0xDF	; 223
    3738:	8c 93       	st	X, r24
	cbi(TCCR1A,COM1B0);
    373a:	a0 e8       	ldi	r26, 0x80	; 128
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e0 e8       	ldi	r30, 0x80	; 128
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	8f 7e       	andi	r24, 0xEF	; 239
    3746:	8c 93       	st	X, r24
}
    3748:	cf 91       	pop	r28
    374a:	df 91       	pop	r29
    374c:	08 95       	ret

0000374e <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR2A,COM2B1);
    3756:	a0 eb       	ldi	r26, 0xB0	; 176
    3758:	b0 e0       	ldi	r27, 0x00	; 0
    375a:	e0 eb       	ldi	r30, 0xB0	; 176
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	80 81       	ld	r24, Z
    3760:	8f 7d       	andi	r24, 0xDF	; 223
    3762:	8c 93       	st	X, r24
	cbi(TCCR2A,COM2B0);
    3764:	a0 eb       	ldi	r26, 0xB0	; 176
    3766:	b0 e0       	ldi	r27, 0x00	; 0
    3768:	e0 eb       	ldi	r30, 0xB0	; 176
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	8f 7e       	andi	r24, 0xEF	; 239
    3770:	8c 93       	st	X, r24
}
    3772:	cf 91       	pop	r28
    3774:	df 91       	pop	r29
    3776:	08 95       	ret

00003778 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR3A,COM3A1);
    3780:	a0 e9       	ldi	r26, 0x90	; 144
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	e0 e9       	ldi	r30, 0x90	; 144
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	80 81       	ld	r24, Z
    378a:	8f 77       	andi	r24, 0x7F	; 127
    378c:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3A0);
    378e:	a0 e9       	ldi	r26, 0x90	; 144
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	e0 e9       	ldi	r30, 0x90	; 144
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	80 81       	ld	r24, Z
    3798:	8f 7b       	andi	r24, 0xBF	; 191
    379a:	8c 93       	st	X, r24
}
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	08 95       	ret

000037a2 <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
    37a2:	df 93       	push	r29
    37a4:	cf 93       	push	r28
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR3A,COM3B1);
    37aa:	a0 e9       	ldi	r26, 0x90	; 144
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	e0 e9       	ldi	r30, 0x90	; 144
    37b0:	f0 e0       	ldi	r31, 0x00	; 0
    37b2:	80 81       	ld	r24, Z
    37b4:	8f 7d       	andi	r24, 0xDF	; 223
    37b6:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3B0);
    37b8:	a0 e9       	ldi	r26, 0x90	; 144
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	e0 e9       	ldi	r30, 0x90	; 144
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	80 81       	ld	r24, Z
    37c2:	8f 7e       	andi	r24, 0xEF	; 239
    37c4:	8c 93       	st	X, r24
}
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR3A,COM3C1);
    37d4:	a0 e9       	ldi	r26, 0x90	; 144
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	e0 e9       	ldi	r30, 0x90	; 144
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	87 7f       	andi	r24, 0xF7	; 247
    37e0:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3C0);
    37e2:	a0 e9       	ldi	r26, 0x90	; 144
    37e4:	b0 e0       	ldi	r27, 0x00	; 0
    37e6:	e0 e9       	ldi	r30, 0x90	; 144
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	8b 7f       	andi	r24, 0xFB	; 251
    37ee:	8c 93       	st	X, r24
}
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR4A,COM4A1);
    37fe:	a0 ea       	ldi	r26, 0xA0	; 160
    3800:	b0 e0       	ldi	r27, 0x00	; 0
    3802:	e0 ea       	ldi	r30, 0xA0	; 160
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	80 81       	ld	r24, Z
    3808:	8f 77       	andi	r24, 0x7F	; 127
    380a:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4A0);
    380c:	a0 ea       	ldi	r26, 0xA0	; 160
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	e0 ea       	ldi	r30, 0xA0	; 160
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	80 81       	ld	r24, Z
    3816:	8f 7b       	andi	r24, 0xBF	; 191
    3818:	8c 93       	st	X, r24
}
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR4A,COM4B1);
    3828:	a0 ea       	ldi	r26, 0xA0	; 160
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	e0 ea       	ldi	r30, 0xA0	; 160
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	80 81       	ld	r24, Z
    3832:	8f 7d       	andi	r24, 0xDF	; 223
    3834:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4B0);
    3836:	a0 ea       	ldi	r26, 0xA0	; 160
    3838:	b0 e0       	ldi	r27, 0x00	; 0
    383a:	e0 ea       	ldi	r30, 0xA0	; 160
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	8f 7e       	andi	r24, 0xEF	; 239
    3842:	8c 93       	st	X, r24
}
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	08 95       	ret

0000384a <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR4A,COM4C1);
    3852:	a0 ea       	ldi	r26, 0xA0	; 160
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	e0 ea       	ldi	r30, 0xA0	; 160
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	80 81       	ld	r24, Z
    385c:	87 7f       	andi	r24, 0xF7	; 247
    385e:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4C0);
    3860:	a0 ea       	ldi	r26, 0xA0	; 160
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	e0 ea       	ldi	r30, 0xA0	; 160
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	80 81       	ld	r24, Z
    386a:	8b 7f       	andi	r24, 0xFB	; 251
    386c:	8c 93       	st	X, r24
}
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR1A,PWM11);
    387c:	a0 e8       	ldi	r26, 0x80	; 128
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	e0 e8       	ldi	r30, 0x80	; 128
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	80 81       	ld	r24, Z
    3886:	8d 7f       	andi	r24, 0xFD	; 253
    3888:	8c 93       	st	X, r24
	cbi(TCCR1A,PWM10);
    388a:	a0 e8       	ldi	r26, 0x80	; 128
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	e0 e8       	ldi	r30, 0x80	; 128
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 81       	ld	r24, Z
    3894:	8e 7f       	andi	r24, 0xFE	; 254
    3896:	8c 93       	st	X, r24
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
    3898:	0e 94 92 1b 	call	0x3724	; 0x3724 <PWM_timer1_Off_LED>
	//timer2PWMCOff();
}
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	08 95       	ret

000038a2 <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR2A,PWM11);
    38aa:	a0 eb       	ldi	r26, 0xB0	; 176
    38ac:	b0 e0       	ldi	r27, 0x00	; 0
    38ae:	e0 eb       	ldi	r30, 0xB0	; 176
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	80 81       	ld	r24, Z
    38b4:	8d 7f       	andi	r24, 0xFD	; 253
    38b6:	8c 93       	st	X, r24
	cbi(TCCR2A,PWM10);
    38b8:	a0 eb       	ldi	r26, 0xB0	; 176
    38ba:	b0 e0       	ldi	r27, 0x00	; 0
    38bc:	e0 eb       	ldi	r30, 0xB0	; 176
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	80 81       	ld	r24, Z
    38c2:	8e 7f       	andi	r24, 0xFE	; 254
    38c4:	8c 93       	st	X, r24
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
    38c6:	0e 94 a7 1b 	call	0x374e	; 0x374e <PWM_timer2_Off_H6>
	//timer2PWMCOff();
}
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR3A,PWM11);
    38d8:	a0 e9       	ldi	r26, 0x90	; 144
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e0 e9       	ldi	r30, 0x90	; 144
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	8d 7f       	andi	r24, 0xFD	; 253
    38e4:	8c 93       	st	X, r24
	cbi(TCCR3A,PWM10);
    38e6:	a0 e9       	ldi	r26, 0x90	; 144
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e0 e9       	ldi	r30, 0x90	; 144
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	8e 7f       	andi	r24, 0xFE	; 254
    38f2:	8c 93       	st	X, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
    38f4:	0e 94 bc 1b 	call	0x3778	; 0x3778 <PWM_timer3_Off_E3>
	PWM_timer3_Off_E4();
    38f8:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <PWM_timer3_Off_E4>
	PWM_timer3_Off_E5();
    38fc:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <PWM_timer3_Off_E5>
	//timer2PWMCOff();
}
    3900:	cf 91       	pop	r28
    3902:	df 91       	pop	r29
    3904:	08 95       	ret

00003906 <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	cd b7       	in	r28, 0x3d	; 61
    390c:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR4A,PWM11);
    390e:	a0 ea       	ldi	r26, 0xA0	; 160
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e0 ea       	ldi	r30, 0xA0	; 160
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	8d 7f       	andi	r24, 0xFD	; 253
    391a:	8c 93       	st	X, r24
	cbi(TCCR4A,PWM10);
    391c:	a0 ea       	ldi	r26, 0xA0	; 160
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	e0 ea       	ldi	r30, 0xA0	; 160
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	8e 7f       	andi	r24, 0xFE	; 254
    3928:	8c 93       	st	X, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
    392a:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <PWM_timer4_Off_H3>
	PWM_timer4_Off_H4();
    392e:	0e 94 10 1c 	call	0x3820	; 0x3820 <PWM_timer4_Off_H4>
	PWM_timer4_Off_H5();
    3932:	0e 94 25 1c 	call	0x384a	; 0x384a <PWM_timer4_Off_H5>
	//timer2PWMCOff();
}
    3936:	cf 91       	pop	r28
    3938:	df 91       	pop	r29
    393a:	08 95       	ret

0000393c <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	00 d0       	rcall	.+0      	; 0x3942 <PWM_timer1_Set_LED+0x6>
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
    3946:	9a 83       	std	Y+2, r25	; 0x02
    3948:	89 83       	std	Y+1, r24	; 0x01
    394a:	ea e8       	ldi	r30, 0x8A	; 138
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	89 81       	ldd	r24, Y+1	; 0x01
    3950:	9a 81       	ldd	r25, Y+2	; 0x02
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	80 83       	st	Z, r24
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	00 d0       	rcall	.+0      	; 0x3966 <PWM_timer2_Set_H6+0x6>
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	9a 83       	std	Y+2, r25	; 0x02
    396c:	89 83       	std	Y+1, r24	; 0x01
    396e:	e4 eb       	ldi	r30, 0xB4	; 180
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	80 83       	st	Z, r24
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	00 d0       	rcall	.+0      	; 0x3986 <PWM_timer3_Set_E3+0x6>
    3986:	cd b7       	in	r28, 0x3d	; 61
    3988:	de b7       	in	r29, 0x3e	; 62
    398a:	9a 83       	std	Y+2, r25	; 0x02
    398c:	89 83       	std	Y+1, r24	; 0x01
    398e:	e8 e9       	ldi	r30, 0x98	; 152
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	89 81       	ldd	r24, Y+1	; 0x01
    3994:	9a 81       	ldd	r25, Y+2	; 0x02
    3996:	91 83       	std	Z+1, r25	; 0x01
    3998:	80 83       	st	Z, r24
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	cf 91       	pop	r28
    39a0:	df 91       	pop	r29
    39a2:	08 95       	ret

000039a4 <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
    39a4:	df 93       	push	r29
    39a6:	cf 93       	push	r28
    39a8:	00 d0       	rcall	.+0      	; 0x39aa <PWM_timer3_Set_E4+0x6>
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	9a 83       	std	Y+2, r25	; 0x02
    39b0:	89 83       	std	Y+1, r24	; 0x01
    39b2:	ea e9       	ldi	r30, 0x9A	; 154
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
    39b8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ba:	91 83       	std	Z+1, r25	; 0x01
    39bc:	80 83       	st	Z, r24
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	cf 91       	pop	r28
    39c4:	df 91       	pop	r29
    39c6:	08 95       	ret

000039c8 <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
    39c8:	df 93       	push	r29
    39ca:	cf 93       	push	r28
    39cc:	00 d0       	rcall	.+0      	; 0x39ce <PWM_timer3_Set_E5+0x6>
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
    39d2:	9a 83       	std	Y+2, r25	; 0x02
    39d4:	89 83       	std	Y+1, r24	; 0x01
    39d6:	ec e9       	ldi	r30, 0x9C	; 156
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	9a 81       	ldd	r25, Y+2	; 0x02
    39de:	91 83       	std	Z+1, r25	; 0x01
    39e0:	80 83       	st	Z, r24
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	cf 91       	pop	r28
    39e8:	df 91       	pop	r29
    39ea:	08 95       	ret

000039ec <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
    39ec:	df 93       	push	r29
    39ee:	cf 93       	push	r28
    39f0:	00 d0       	rcall	.+0      	; 0x39f2 <PWM_timer4_Set_H3+0x6>
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
    39f6:	9a 83       	std	Y+2, r25	; 0x02
    39f8:	89 83       	std	Y+1, r24	; 0x01
    39fa:	e8 ea       	ldi	r30, 0xA8	; 168
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	9a 81       	ldd	r25, Y+2	; 0x02
    3a02:	91 83       	std	Z+1, r25	; 0x01
    3a04:	80 83       	st	Z, r24
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	cf 91       	pop	r28
    3a0c:	df 91       	pop	r29
    3a0e:	08 95       	ret

00003a10 <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
    3a10:	df 93       	push	r29
    3a12:	cf 93       	push	r28
    3a14:	00 d0       	rcall	.+0      	; 0x3a16 <PWM_timer4_Set_H4+0x6>
    3a16:	cd b7       	in	r28, 0x3d	; 61
    3a18:	de b7       	in	r29, 0x3e	; 62
    3a1a:	9a 83       	std	Y+2, r25	; 0x02
    3a1c:	89 83       	std	Y+1, r24	; 0x01
    3a1e:	ea ea       	ldi	r30, 0xAA	; 170
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	9a 81       	ldd	r25, Y+2	; 0x02
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	80 83       	st	Z, r24
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	cf 91       	pop	r28
    3a30:	df 91       	pop	r29
    3a32:	08 95       	ret

00003a34 <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
    3a34:	df 93       	push	r29
    3a36:	cf 93       	push	r28
    3a38:	00 d0       	rcall	.+0      	; 0x3a3a <PWM_timer4_Set_H5+0x6>
    3a3a:	cd b7       	in	r28, 0x3d	; 61
    3a3c:	de b7       	in	r29, 0x3e	; 62
    3a3e:	9a 83       	std	Y+2, r25	; 0x02
    3a40:	89 83       	std	Y+1, r24	; 0x01
    3a42:	ec ea       	ldi	r30, 0xAC	; 172
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	89 81       	ldd	r24, Y+1	; 0x01
    3a48:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4a:	91 83       	std	Z+1, r25	; 0x01
    3a4c:	80 83       	st	Z, r24
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	cf 91       	pop	r28
    3a54:	df 91       	pop	r29
    3a56:	08 95       	ret

00003a58 <configure_ports>:


//************CONFIGURE PORTS************
//configure ports for input or output - specific to ATmega2560
void configure_ports(void)
	{
    3a58:	df 93       	push	r29
    3a5a:	cf 93       	push	r28
    3a5c:	cd b7       	in	r28, 0x3d	; 61
    3a5e:	de b7       	in	r29, 0x3e	; 62
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
    3a60:	e0 e3       	ldi	r30, 0x30	; 48
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	10 82       	st	Z, r1
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
    3a66:	e1 e3       	ldi	r30, 0x31	; 49
    3a68:	f0 e0       	ldi	r31, 0x00	; 0
    3a6a:	10 82       	st	Z, r1
	DDRK = 0b00000000;  //configure all K ports for input				0x00
    3a6c:	e7 e0       	ldi	r30, 0x07	; 7
    3a6e:	f1 e0       	ldi	r31, 0x01	; 1
    3a70:	10 82       	st	Z, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
    3a72:	e8 e0       	ldi	r30, 0x08	; 8
    3a74:	f1 e0       	ldi	r31, 0x01	; 1
    3a76:	10 82       	st	Z, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
    3a78:	e1 e2       	ldi	r30, 0x21	; 33
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	8f ef       	ldi	r24, 0xFF	; 255
    3a7e:	80 83       	st	Z, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
    3a80:	e4 e2       	ldi	r30, 0x24	; 36
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	80 e4       	ldi	r24, 0x40	; 64
    3a86:	80 83       	st	Z, r24
	DDRC = 0b11111111;  //configure ports for output
    3a88:	e7 e2       	ldi	r30, 0x27	; 39
    3a8a:	f0 e0       	ldi	r31, 0x00	; 0
    3a8c:	8f ef       	ldi	r24, 0xFF	; 255
    3a8e:	80 83       	st	Z, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
    3a90:	ab e2       	ldi	r26, 0x2B	; 43
    3a92:	b0 e0       	ldi	r27, 0x00	; 0
    3a94:	eb e2       	ldi	r30, 0x2B	; 43
    3a96:	f0 e0       	ldi	r31, 0x00	; 0
    3a98:	80 81       	ld	r24, Z
    3a9a:	81 60       	ori	r24, 0x01	; 1
    3a9c:	8c 93       	st	X, r24
	sbi(PORTD, PD1); // SDA pull-up
    3a9e:	ab e2       	ldi	r26, 0x2B	; 43
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	eb e2       	ldi	r30, 0x2B	; 43
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	80 81       	ld	r24, Z
    3aa8:	82 60       	ori	r24, 0x02	; 2
    3aaa:	8c 93       	st	X, r24
	DDRD = 0b11110011;  //configure ports for output
    3aac:	ea e2       	ldi	r30, 0x2A	; 42
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	83 ef       	ldi	r24, 0xF3	; 243
    3ab2:	80 83       	st	Z, r24
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
    3ab4:	ed e2       	ldi	r30, 0x2D	; 45
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	8e ef       	ldi	r24, 0xFE	; 254
    3aba:	80 83       	st	Z, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
    3abc:	a4 e3       	ldi	r26, 0x34	; 52
    3abe:	b0 e0       	ldi	r27, 0x00	; 0
    3ac0:	e4 e3       	ldi	r30, 0x34	; 52
    3ac2:	f0 e0       	ldi	r31, 0x00	; 0
    3ac4:	80 81       	ld	r24, Z
    3ac6:	80 62       	ori	r24, 0x20	; 32
    3ac8:	8c 93       	st	X, r24
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
    3aca:	a3 e3       	ldi	r26, 0x33	; 51
    3acc:	b0 e0       	ldi	r27, 0x00	; 0
    3ace:	e3 e3       	ldi	r30, 0x33	; 51
    3ad0:	f0 e0       	ldi	r31, 0x00	; 0
    3ad2:	80 81       	ld	r24, Z
    3ad4:	8f 7d       	andi	r24, 0xDF	; 223
    3ad6:	8c 93       	st	X, r24
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
    3ad8:	e1 e0       	ldi	r30, 0x01	; 1
    3ada:	f1 e0       	ldi	r31, 0x01	; 1
    3adc:	8e ef       	ldi	r24, 0xFE	; 254
    3ade:	80 83       	st	Z, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
    3ae0:	e4 e0       	ldi	r30, 0x04	; 4
    3ae2:	f1 e0       	ldi	r31, 0x01	; 1
    3ae4:	8e ef       	ldi	r24, 0xFE	; 254
    3ae6:	80 83       	st	Z, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
    3ae8:	cf 91       	pop	r28
    3aea:	df 91       	pop	r29
    3aec:	08 95       	ret

00003aee <delay_cycles>:

//************DELAY FUNCTIONS************
//wait for X amount of cycles (234 cycles is about 1.003 milliseconds)//incorrect
//to calculate: 234/1.003*(time in milliseconds) = number of cycles
void delay_cycles(unsigned long int cycles)
	{
    3aee:	df 93       	push	r29
    3af0:	cf 93       	push	r28
    3af2:	00 d0       	rcall	.+0      	; 0x3af4 <delay_cycles+0x6>
    3af4:	00 d0       	rcall	.+0      	; 0x3af6 <delay_cycles+0x8>
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	69 83       	std	Y+1, r22	; 0x01
    3afc:	7a 83       	std	Y+2, r23	; 0x02
    3afe:	8b 83       	std	Y+3, r24	; 0x03
    3b00:	9c 83       	std	Y+4, r25	; 0x04
    3b02:	0b c0       	rjmp	.+22     	; 0x3b1a <delay_cycles+0x2c>
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    3b06:	9a 81       	ldd	r25, Y+2	; 0x02
    3b08:	ab 81       	ldd	r26, Y+3	; 0x03
    3b0a:	bc 81       	ldd	r27, Y+4	; 0x04
    3b0c:	01 97       	sbiw	r24, 0x01	; 1
    3b0e:	a1 09       	sbc	r26, r1
    3b10:	b1 09       	sbc	r27, r1
    3b12:	89 83       	std	Y+1, r24	; 0x01
    3b14:	9a 83       	std	Y+2, r25	; 0x02
    3b16:	ab 83       	std	Y+3, r26	; 0x03
    3b18:	bc 83       	std	Y+4, r27	; 0x04
//wait for X amount of cycles (234 cycles is about 1.003 milliseconds)//incorrect
//to calculate: 234/1.003*(time in milliseconds) = number of cycles
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1e:	ab 81       	ldd	r26, Y+3	; 0x03
    3b20:	bc 81       	ldd	r27, Y+4	; 0x04
    3b22:	00 97       	sbiw	r24, 0x00	; 0
    3b24:	a1 05       	cpc	r26, r1
    3b26:	b1 05       	cpc	r27, r1
    3b28:	69 f7       	brne	.-38     	; 0x3b04 <delay_cycles+0x16>
		cycles--;
	}
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	cf 91       	pop	r28
    3b34:	df 91       	pop	r29
    3b36:	08 95       	ret

00003b38 <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
    3b38:	df 93       	push	r29
    3b3a:	cf 93       	push	r28
    3b3c:	cd b7       	in	r28, 0x3d	; 61
    3b3e:	de b7       	in	r29, 0x3e	; 62
    3b40:	a5 e2       	ldi	r26, 0x25	; 37
    3b42:	b0 e0       	ldi	r27, 0x00	; 0
    3b44:	e5 e2       	ldi	r30, 0x25	; 37
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	80 81       	ld	r24, Z
    3b4a:	80 64       	ori	r24, 0x40	; 64
    3b4c:	8c 93       	st	X, r24
    3b4e:	cf 91       	pop	r28
    3b50:	df 91       	pop	r29
    3b52:	08 95       	ret

00003b54 <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
    3b54:	df 93       	push	r29
    3b56:	cf 93       	push	r28
    3b58:	cd b7       	in	r28, 0x3d	; 61
    3b5a:	de b7       	in	r29, 0x3e	; 62
    3b5c:	a5 e2       	ldi	r26, 0x25	; 37
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	e5 e2       	ldi	r30, 0x25	; 37
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	80 81       	ld	r24, Z
    3b66:	8f 7b       	andi	r24, 0xBF	; 191
    3b68:	8c 93       	st	X, r24
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	08 95       	ret

00003b70 <button_pressed>:
//***************************************


//*****************BUTTON****************
int button_pressed(void)
	{
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	00 d0       	rcall	.+0      	; 0x3b76 <button_pressed+0x6>
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
	return (bit_is_clear(PING, 5));
    3b7a:	e2 e3       	ldi	r30, 0x32	; 50
    3b7c:	f0 e0       	ldi	r31, 0x00	; 0
    3b7e:	80 81       	ld	r24, Z
    3b80:	88 2f       	mov	r24, r24
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	80 72       	andi	r24, 0x20	; 32
    3b86:	90 70       	andi	r25, 0x00	; 0
    3b88:	1a 82       	std	Y+2, r1	; 0x02
    3b8a:	19 82       	std	Y+1, r1	; 0x01
    3b8c:	00 97       	sbiw	r24, 0x00	; 0
    3b8e:	21 f4       	brne	.+8      	; 0x3b98 <button_pressed+0x28>
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	9a 83       	std	Y+2, r25	; 0x02
    3b96:	89 83       	std	Y+1, r24	; 0x01
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	9a 81       	ldd	r25, Y+2	; 0x02
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
    3b9c:	0f 90       	pop	r0
    3b9e:	0f 90       	pop	r0
    3ba0:	cf 91       	pop	r28
    3ba2:	df 91       	pop	r29
    3ba4:	08 95       	ret

00003ba6 <cos_SoR>:
//multiplied by 100 so no floating point math
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
    3ba6:	df 93       	push	r29
    3ba8:	cf 93       	push	r28
    3baa:	00 d0       	rcall	.+0      	; 0x3bac <cos_SoR+0x6>
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <cos_SoR+0x8>
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <cos_SoR+0xa>
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	69 83       	std	Y+1, r22	; 0x01
    3bb6:	7a 83       	std	Y+2, r23	; 0x02
    3bb8:	8b 83       	std	Y+3, r24	; 0x03
    3bba:	9c 83       	std	Y+4, r25	; 0x04
	if (degrees >= 0)//positive angles
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc0:	ab 81       	ldd	r26, Y+3	; 0x03
    3bc2:	bc 81       	ldd	r27, Y+4	; 0x04
    3bc4:	bb 23       	and	r27, r27
    3bc6:	c4 f0       	brlt	.+48     	; 0x3bf8 <cos_SoR+0x52>
		return angtable[degrees/5];
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	9a 81       	ldd	r25, Y+2	; 0x02
    3bcc:	ab 81       	ldd	r26, Y+3	; 0x03
    3bce:	bc 81       	ldd	r27, Y+4	; 0x04
    3bd0:	25 e0       	ldi	r18, 0x05	; 5
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	40 e0       	ldi	r20, 0x00	; 0
    3bd6:	50 e0       	ldi	r21, 0x00	; 0
    3bd8:	bc 01       	movw	r22, r24
    3bda:	cd 01       	movw	r24, r26
    3bdc:	0e 94 05 2a 	call	0x540a	; 0x540a <__divmodsi4>
    3be0:	da 01       	movw	r26, r20
    3be2:	c9 01       	movw	r24, r18
    3be4:	88 0f       	add	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	fc 01       	movw	r30, r24
    3bea:	e0 50       	subi	r30, 0x00	; 0
    3bec:	fe 4f       	sbci	r31, 0xFE	; 254
    3bee:	20 81       	ld	r18, Z
    3bf0:	31 81       	ldd	r19, Z+1	; 0x01
    3bf2:	3e 83       	std	Y+6, r19	; 0x06
    3bf4:	2d 83       	std	Y+5, r18	; 0x05
    3bf6:	2c c0       	rjmp	.+88     	; 0x3c50 <cos_SoR+0xaa>
	else
		return -angtable[72-(-degrees)/5];
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfc:	ab 81       	ldd	r26, Y+3	; 0x03
    3bfe:	bc 81       	ldd	r27, Y+4	; 0x04
    3c00:	b0 95       	com	r27
    3c02:	a0 95       	com	r26
    3c04:	90 95       	com	r25
    3c06:	81 95       	neg	r24
    3c08:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0a:	af 4f       	sbci	r26, 0xFF	; 255
    3c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c0e:	25 e0       	ldi	r18, 0x05	; 5
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e0       	ldi	r20, 0x00	; 0
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	bc 01       	movw	r22, r24
    3c18:	cd 01       	movw	r24, r26
    3c1a:	0e 94 05 2a 	call	0x540a	; 0x540a <__divmodsi4>
    3c1e:	da 01       	movw	r26, r20
    3c20:	c9 01       	movw	r24, r18
    3c22:	9c 01       	movw	r18, r24
    3c24:	ad 01       	movw	r20, r26
    3c26:	88 e4       	ldi	r24, 0x48	; 72
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	a0 e0       	ldi	r26, 0x00	; 0
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	82 1b       	sub	r24, r18
    3c30:	93 0b       	sbc	r25, r19
    3c32:	a4 0b       	sbc	r26, r20
    3c34:	b5 0b       	sbc	r27, r21
    3c36:	88 0f       	add	r24, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	e0 50       	subi	r30, 0x00	; 0
    3c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c40:	80 81       	ld	r24, Z
    3c42:	91 81       	ldd	r25, Z+1	; 0x01
    3c44:	22 27       	eor	r18, r18
    3c46:	33 27       	eor	r19, r19
    3c48:	28 1b       	sub	r18, r24
    3c4a:	39 0b       	sbc	r19, r25
    3c4c:	3e 83       	std	Y+6, r19	; 0x06
    3c4e:	2d 83       	std	Y+5, r18	; 0x05
    3c50:	8d 81       	ldd	r24, Y+5	; 0x05
    3c52:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    3c54:	26 96       	adiw	r28, 0x06	; 6
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	cf 91       	pop	r28
    3c62:	df 91       	pop	r29
    3c64:	08 95       	ret

00003c66 <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
    3c66:	df 93       	push	r29
    3c68:	cf 93       	push	r28
    3c6a:	00 d0       	rcall	.+0      	; 0x3c6c <sin_SoR+0x6>
    3c6c:	00 d0       	rcall	.+0      	; 0x3c6e <sin_SoR+0x8>
    3c6e:	00 d0       	rcall	.+0      	; 0x3c70 <sin_SoR+0xa>
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62
    3c74:	69 83       	std	Y+1, r22	; 0x01
    3c76:	7a 83       	std	Y+2, r23	; 0x02
    3c78:	8b 83       	std	Y+3, r24	; 0x03
    3c7a:	9c 83       	std	Y+4, r25	; 0x04
	degrees=degrees - 90;//phase shift 90 degrees
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c80:	ab 81       	ldd	r26, Y+3	; 0x03
    3c82:	bc 81       	ldd	r27, Y+4	; 0x04
    3c84:	8a 55       	subi	r24, 0x5A	; 90
    3c86:	90 40       	sbci	r25, 0x00	; 0
    3c88:	a0 40       	sbci	r26, 0x00	; 0
    3c8a:	b0 40       	sbci	r27, 0x00	; 0
    3c8c:	89 83       	std	Y+1, r24	; 0x01
    3c8e:	9a 83       	std	Y+2, r25	; 0x02
    3c90:	ab 83       	std	Y+3, r26	; 0x03
    3c92:	bc 83       	std	Y+4, r27	; 0x04

	if (degrees >= 0)//positive angles
    3c94:	89 81       	ldd	r24, Y+1	; 0x01
    3c96:	9a 81       	ldd	r25, Y+2	; 0x02
    3c98:	ab 81       	ldd	r26, Y+3	; 0x03
    3c9a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c9c:	bb 23       	and	r27, r27
    3c9e:	c4 f0       	brlt	.+48     	; 0x3cd0 <sin_SoR+0x6a>
		return angtable[degrees/5];
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca4:	ab 81       	ldd	r26, Y+3	; 0x03
    3ca6:	bc 81       	ldd	r27, Y+4	; 0x04
    3ca8:	25 e0       	ldi	r18, 0x05	; 5
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e0       	ldi	r20, 0x00	; 0
    3cae:	50 e0       	ldi	r21, 0x00	; 0
    3cb0:	bc 01       	movw	r22, r24
    3cb2:	cd 01       	movw	r24, r26
    3cb4:	0e 94 05 2a 	call	0x540a	; 0x540a <__divmodsi4>
    3cb8:	da 01       	movw	r26, r20
    3cba:	c9 01       	movw	r24, r18
    3cbc:	88 0f       	add	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	e0 50       	subi	r30, 0x00	; 0
    3cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc6:	20 81       	ld	r18, Z
    3cc8:	31 81       	ldd	r19, Z+1	; 0x01
    3cca:	3e 83       	std	Y+6, r19	; 0x06
    3ccc:	2d 83       	std	Y+5, r18	; 0x05
    3cce:	2c c0       	rjmp	.+88     	; 0x3d28 <sin_SoR+0xc2>
	else
		return -angtable[72-(-degrees)/5];
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd4:	ab 81       	ldd	r26, Y+3	; 0x03
    3cd6:	bc 81       	ldd	r27, Y+4	; 0x04
    3cd8:	b0 95       	com	r27
    3cda:	a0 95       	com	r26
    3cdc:	90 95       	com	r25
    3cde:	81 95       	neg	r24
    3ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce2:	af 4f       	sbci	r26, 0xFF	; 255
    3ce4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ce6:	25 e0       	ldi	r18, 0x05	; 5
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	40 e0       	ldi	r20, 0x00	; 0
    3cec:	50 e0       	ldi	r21, 0x00	; 0
    3cee:	bc 01       	movw	r22, r24
    3cf0:	cd 01       	movw	r24, r26
    3cf2:	0e 94 05 2a 	call	0x540a	; 0x540a <__divmodsi4>
    3cf6:	da 01       	movw	r26, r20
    3cf8:	c9 01       	movw	r24, r18
    3cfa:	9c 01       	movw	r18, r24
    3cfc:	ad 01       	movw	r20, r26
    3cfe:	88 e4       	ldi	r24, 0x48	; 72
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	a0 e0       	ldi	r26, 0x00	; 0
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	82 1b       	sub	r24, r18
    3d08:	93 0b       	sbc	r25, r19
    3d0a:	a4 0b       	sbc	r26, r20
    3d0c:	b5 0b       	sbc	r27, r21
    3d0e:	88 0f       	add	r24, r24
    3d10:	99 1f       	adc	r25, r25
    3d12:	fc 01       	movw	r30, r24
    3d14:	e0 50       	subi	r30, 0x00	; 0
    3d16:	fe 4f       	sbci	r31, 0xFE	; 254
    3d18:	80 81       	ld	r24, Z
    3d1a:	91 81       	ldd	r25, Z+1	; 0x01
    3d1c:	22 27       	eor	r18, r18
    3d1e:	33 27       	eor	r19, r19
    3d20:	28 1b       	sub	r18, r24
    3d22:	39 0b       	sbc	r19, r25
    3d24:	3e 83       	std	Y+6, r19	; 0x06
    3d26:	2d 83       	std	Y+5, r18	; 0x05
    3d28:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2a:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    3d2c:	26 96       	adiw	r28, 0x06	; 6
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	08 95       	ret

00003d3e <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
    3d3e:	0f 93       	push	r16
    3d40:	1f 93       	push	r17
    3d42:	df 93       	push	r29
    3d44:	cf 93       	push	r28
    3d46:	00 d0       	rcall	.+0      	; 0x3d48 <tan_SoR+0xa>
    3d48:	00 d0       	rcall	.+0      	; 0x3d4a <tan_SoR+0xc>
    3d4a:	00 d0       	rcall	.+0      	; 0x3d4c <tan_SoR+0xe>
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	69 83       	std	Y+1, r22	; 0x01
    3d52:	7a 83       	std	Y+2, r23	; 0x02
    3d54:	8b 83       	std	Y+3, r24	; 0x03
    3d56:	9c 83       	std	Y+4, r25	; 0x04
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
    3d58:	89 81       	ldd	r24, Y+1	; 0x01
    3d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5c:	ab 81       	ldd	r26, Y+3	; 0x03
    3d5e:	bc 81       	ldd	r27, Y+4	; 0x04
    3d60:	8a 35       	cpi	r24, 0x5A	; 90
    3d62:	91 05       	cpc	r25, r1
    3d64:	a1 05       	cpc	r26, r1
    3d66:	b1 05       	cpc	r27, r1
    3d68:	21 f1       	breq	.+72     	; 0x3db2 <tan_SoR+0x74>
    3d6a:	89 81       	ldd	r24, Y+1	; 0x01
    3d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6e:	ab 81       	ldd	r26, Y+3	; 0x03
    3d70:	bc 81       	ldd	r27, Y+4	; 0x04
    3d72:	86 3a       	cpi	r24, 0xA6	; 166
    3d74:	2f ef       	ldi	r18, 0xFF	; 255
    3d76:	92 07       	cpc	r25, r18
    3d78:	2f ef       	ldi	r18, 0xFF	; 255
    3d7a:	a2 07       	cpc	r26, r18
    3d7c:	2f ef       	ldi	r18, 0xFF	; 255
    3d7e:	b2 07       	cpc	r27, r18
    3d80:	c1 f0       	breq	.+48     	; 0x3db2 <tan_SoR+0x74>
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	9a 81       	ldd	r25, Y+2	; 0x02
    3d86:	ab 81       	ldd	r26, Y+3	; 0x03
    3d88:	bc 81       	ldd	r27, Y+4	; 0x04
    3d8a:	8e 30       	cpi	r24, 0x0E	; 14
    3d8c:	41 e0       	ldi	r20, 0x01	; 1
    3d8e:	94 07       	cpc	r25, r20
    3d90:	40 e0       	ldi	r20, 0x00	; 0
    3d92:	a4 07       	cpc	r26, r20
    3d94:	40 e0       	ldi	r20, 0x00	; 0
    3d96:	b4 07       	cpc	r27, r20
    3d98:	61 f0       	breq	.+24     	; 0x3db2 <tan_SoR+0x74>
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d9e:	ab 81       	ldd	r26, Y+3	; 0x03
    3da0:	bc 81       	ldd	r27, Y+4	; 0x04
    3da2:	82 3f       	cpi	r24, 0xF2	; 242
    3da4:	5e ef       	ldi	r21, 0xFE	; 254
    3da6:	95 07       	cpc	r25, r21
    3da8:	5f ef       	ldi	r21, 0xFF	; 255
    3daa:	a5 07       	cpc	r26, r21
    3dac:	5f ef       	ldi	r21, 0xFF	; 255
    3dae:	b5 07       	cpc	r27, r21
    3db0:	19 f4       	brne	.+6      	; 0x3db8 <tan_SoR+0x7a>
		return 0;//what else should I return?!?!?
    3db2:	1e 82       	std	Y+6, r1	; 0x06
    3db4:	1d 82       	std	Y+5, r1	; 0x05
    3db6:	24 c0       	rjmp	.+72     	; 0x3e00 <tan_SoR+0xc2>
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
    3db8:	89 81       	ldd	r24, Y+1	; 0x01
    3dba:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbc:	ab 81       	ldd	r26, Y+3	; 0x03
    3dbe:	bc 81       	ldd	r27, Y+4	; 0x04
    3dc0:	bc 01       	movw	r22, r24
    3dc2:	cd 01       	movw	r24, r26
    3dc4:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <sin_SoR>
    3dc8:	8c 01       	movw	r16, r24
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dce:	ab 81       	ldd	r26, Y+3	; 0x03
    3dd0:	bc 81       	ldd	r27, Y+4	; 0x04
    3dd2:	bc 01       	movw	r22, r24
    3dd4:	cd 01       	movw	r24, r26
    3dd6:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <cos_SoR>
    3dda:	9c 01       	movw	r18, r24
    3ddc:	c8 01       	movw	r24, r16
    3dde:	b9 01       	movw	r22, r18
    3de0:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <__divmodhi4>
    3de4:	cb 01       	movw	r24, r22
    3de6:	9c 01       	movw	r18, r24
    3de8:	22 0f       	add	r18, r18
    3dea:	33 1f       	adc	r19, r19
    3dec:	c9 01       	movw	r24, r18
    3dee:	88 0f       	add	r24, r24
    3df0:	99 1f       	adc	r25, r25
    3df2:	88 0f       	add	r24, r24
    3df4:	99 1f       	adc	r25, r25
    3df6:	a9 01       	movw	r20, r18
    3df8:	48 0f       	add	r20, r24
    3dfa:	59 1f       	adc	r21, r25
    3dfc:	5e 83       	std	Y+6, r21	; 0x06
    3dfe:	4d 83       	std	Y+5, r20	; 0x05
    3e00:	8d 81       	ldd	r24, Y+5	; 0x05
    3e02:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    3e04:	26 96       	adiw	r28, 0x06	; 6
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	cd bf       	out	0x3d, r28	; 61
    3e10:	cf 91       	pop	r28
    3e12:	df 91       	pop	r29
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	08 95       	ret

00003e1a <sharp_IR_interpret_GP2D12>:
//you can power this sensor directly from the Axon's ADC header row


//Sharp GP2D12 IR Range Sensor -  claims 10cm to 80cm (I got 8cm to 150cm)
int sharp_IR_interpret_GP2D12(int value)
	{
    3e1a:	df 93       	push	r29
    3e1c:	cf 93       	push	r28
    3e1e:	00 d0       	rcall	.+0      	; 0x3e20 <sharp_IR_interpret_GP2D12+0x6>
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62
    3e24:	9a 83       	std	Y+2, r25	; 0x02
    3e26:	89 83       	std	Y+1, r24	; 0x01
	return 1384.4*pow(value,-.9988);
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2c:	aa 27       	eor	r26, r26
    3e2e:	97 fd       	sbrc	r25, 7
    3e30:	a0 95       	com	r26
    3e32:	ba 2f       	mov	r27, r26
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	bc 01       	movw	r22, r24
    3e42:	cd 01       	movw	r24, r26
    3e44:	2b e5       	ldi	r18, 0x5B	; 91
    3e46:	31 eb       	ldi	r19, 0xB1	; 177
    3e48:	4f e7       	ldi	r20, 0x7F	; 127
    3e4a:	5f eb       	ldi	r21, 0xBF	; 191
    3e4c:	0e 94 36 28 	call	0x506c	; 0x506c <pow>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	bc 01       	movw	r22, r24
    3e56:	cd 01       	movw	r24, r26
    3e58:	2d ec       	ldi	r18, 0xCD	; 205
    3e5a:	3c e0       	ldi	r19, 0x0C	; 12
    3e5c:	4d ea       	ldi	r20, 0xAD	; 173
    3e5e:	54 e4       	ldi	r21, 0x44	; 68
    3e60:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	bc 01       	movw	r22, r24
    3e6a:	cd 01       	movw	r24, r26
    3e6c:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
	}
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	cf 91       	pop	r28
    3e7a:	df 91       	pop	r29
    3e7c:	08 95       	ret

00003e7e <sharp_IR_interpret_GP2Y0A02YK>:
//Sharp GP2Y0A02YK IR Range Sensor - 20 cm to 150 cm
int sharp_IR_interpret_GP2Y0A02YK(int value)
	{
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	00 d0       	rcall	.+0      	; 0x3e84 <sharp_IR_interpret_GP2Y0A02YK+0x6>
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
    3e88:	9a 83       	std	Y+2, r25	; 0x02
    3e8a:	89 83       	std	Y+1, r24	; 0x01
	return 1904.5*pow(value,-.89);
    3e8c:	89 81       	ldd	r24, Y+1	; 0x01
    3e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e90:	aa 27       	eor	r26, r26
    3e92:	97 fd       	sbrc	r25, 7
    3e94:	a0 95       	com	r26
    3e96:	ba 2f       	mov	r27, r26
    3e98:	bc 01       	movw	r22, r24
    3e9a:	cd 01       	movw	r24, r26
    3e9c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	bc 01       	movw	r22, r24
    3ea6:	cd 01       	movw	r24, r26
    3ea8:	2a e0       	ldi	r18, 0x0A	; 10
    3eaa:	37 ed       	ldi	r19, 0xD7	; 215
    3eac:	43 e6       	ldi	r20, 0x63	; 99
    3eae:	5f eb       	ldi	r21, 0xBF	; 191
    3eb0:	0e 94 36 28 	call	0x506c	; 0x506c <pow>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	bc 01       	movw	r22, r24
    3eba:	cd 01       	movw	r24, r26
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e1       	ldi	r19, 0x10	; 16
    3ec0:	4e ee       	ldi	r20, 0xEE	; 238
    3ec2:	54 e4       	ldi	r21, 0x44	; 68
    3ec4:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	bc 01       	movw	r22, r24
    3ece:	cd 01       	movw	r24, r26
    3ed0:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
	}
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	cf 91       	pop	r28
    3ede:	df 91       	pop	r29
    3ee0:	08 95       	ret

00003ee2 <sharp_IR_interpret_GP2Y0A21YK>:
//Sharp GP2Y0A21YK IR Range Sensor - 4 cm to 30 cm
int sharp_IR_interpret_GP2Y0A21YK(int value)
	{
    3ee2:	df 93       	push	r29
    3ee4:	cf 93       	push	r28
    3ee6:	00 d0       	rcall	.+0      	; 0x3ee8 <sharp_IR_interpret_GP2Y0A21YK+0x6>
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
    3eec:	9a 83       	std	Y+2, r25	; 0x02
    3eee:	89 83       	std	Y+1, r24	; 0x01
	return 739.38*pow(value,-.8105);
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
    3ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef4:	aa 27       	eor	r26, r26
    3ef6:	97 fd       	sbrc	r25, 7
    3ef8:	a0 95       	com	r26
    3efa:	ba 2f       	mov	r27, r26
    3efc:	bc 01       	movw	r22, r24
    3efe:	cd 01       	movw	r24, r26
    3f00:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    3f04:	dc 01       	movw	r26, r24
    3f06:	cb 01       	movw	r24, r22
    3f08:	bc 01       	movw	r22, r24
    3f0a:	cd 01       	movw	r24, r26
    3f0c:	2e ee       	ldi	r18, 0xEE	; 238
    3f0e:	3c e7       	ldi	r19, 0x7C	; 124
    3f10:	4f e4       	ldi	r20, 0x4F	; 79
    3f12:	5f eb       	ldi	r21, 0xBF	; 191
    3f14:	0e 94 36 28 	call	0x506c	; 0x506c <pow>
    3f18:	dc 01       	movw	r26, r24
    3f1a:	cb 01       	movw	r24, r22
    3f1c:	bc 01       	movw	r22, r24
    3f1e:	cd 01       	movw	r24, r26
    3f20:	22 e5       	ldi	r18, 0x52	; 82
    3f22:	38 ed       	ldi	r19, 0xD8	; 216
    3f24:	48 e3       	ldi	r20, 0x38	; 56
    3f26:	54 e4       	ldi	r21, 0x44	; 68
    3f28:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	bc 01       	movw	r22, r24
    3f32:	cd 01       	movw	r24, r26
    3f34:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
	}
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	cf 91       	pop	r28
    3f42:	df 91       	pop	r29
    3f44:	08 95       	ret

00003f46 <sharp_IR_interpret_GP2D120>:
//Sharp GP2D120 IR Range Sensor - 4 to 30 cm 
int sharp_IR_interpret_GP2D120(int value)
	{
    3f46:	df 93       	push	r29
    3f48:	cf 93       	push	r28
    3f4a:	00 d0       	rcall	.+0      	; 0x3f4c <sharp_IR_interpret_GP2D120+0x6>
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	9a 83       	std	Y+2, r25	; 0x02
    3f52:	89 83       	std	Y+1, r24	; 0x01
	return 509.88*pow(value,-.9154);
    3f54:	89 81       	ldd	r24, Y+1	; 0x01
    3f56:	9a 81       	ldd	r25, Y+2	; 0x02
    3f58:	aa 27       	eor	r26, r26
    3f5a:	97 fd       	sbrc	r25, 7
    3f5c:	a0 95       	com	r26
    3f5e:	ba 2f       	mov	r27, r26
    3f60:	bc 01       	movw	r22, r24
    3f62:	cd 01       	movw	r24, r26
    3f64:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	bc 01       	movw	r22, r24
    3f6e:	cd 01       	movw	r24, r26
    3f70:	28 ea       	ldi	r18, 0xA8	; 168
    3f72:	37 e5       	ldi	r19, 0x57	; 87
    3f74:	4a e6       	ldi	r20, 0x6A	; 106
    3f76:	5f eb       	ldi	r21, 0xBF	; 191
    3f78:	0e 94 36 28 	call	0x506c	; 0x506c <pow>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	bc 01       	movw	r22, r24
    3f82:	cd 01       	movw	r24, r26
    3f84:	24 ea       	ldi	r18, 0xA4	; 164
    3f86:	30 ef       	ldi	r19, 0xF0	; 240
    3f88:	4e ef       	ldi	r20, 0xFE	; 254
    3f8a:	53 e4       	ldi	r21, 0x43	; 67
    3f8c:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	bc 01       	movw	r22, r24
    3f96:	cd 01       	movw	r24, r26
    3f98:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
	}
    3fa0:	0f 90       	pop	r0
    3fa2:	0f 90       	pop	r0
    3fa4:	cf 91       	pop	r28
    3fa6:	df 91       	pop	r29
    3fa8:	08 95       	ret

00003faa <sharp_IR_interpret_GP2D15>:
//Sharp GP2D15 IR Range Sensor - 10cm to 80cm  
int sharp_IR_interpret_GP2D15(int value)
	{
    3faa:	df 93       	push	r29
    3fac:	cf 93       	push	r28
    3fae:	00 d0       	rcall	.+0      	; 0x3fb0 <sharp_IR_interpret_GP2D15+0x6>
    3fb0:	cd b7       	in	r28, 0x3d	; 61
    3fb2:	de b7       	in	r29, 0x3e	; 62
    3fb4:	9a 83       	std	Y+2, r25	; 0x02
    3fb6:	89 83       	std	Y+1, r24	; 0x01
	return 736.21*pow(value,-.7922);
    3fb8:	89 81       	ldd	r24, Y+1	; 0x01
    3fba:	9a 81       	ldd	r25, Y+2	; 0x02
    3fbc:	aa 27       	eor	r26, r26
    3fbe:	97 fd       	sbrc	r25, 7
    3fc0:	a0 95       	com	r26
    3fc2:	ba 2f       	mov	r27, r26
    3fc4:	bc 01       	movw	r22, r24
    3fc6:	cd 01       	movw	r24, r26
    3fc8:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    3fcc:	dc 01       	movw	r26, r24
    3fce:	cb 01       	movw	r24, r22
    3fd0:	bc 01       	movw	r22, r24
    3fd2:	cd 01       	movw	r24, r26
    3fd4:	2f e9       	ldi	r18, 0x9F	; 159
    3fd6:	3d ec       	ldi	r19, 0xCD	; 205
    3fd8:	4a e4       	ldi	r20, 0x4A	; 74
    3fda:	5f eb       	ldi	r21, 0xBF	; 191
    3fdc:	0e 94 36 28 	call	0x506c	; 0x506c <pow>
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	bc 01       	movw	r22, r24
    3fe6:	cd 01       	movw	r24, r26
    3fe8:	21 e7       	ldi	r18, 0x71	; 113
    3fea:	3d e0       	ldi	r19, 0x0D	; 13
    3fec:	48 e3       	ldi	r20, 0x38	; 56
    3fee:	54 e4       	ldi	r21, 0x44	; 68
    3ff0:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	cb 01       	movw	r24, r22
    3ff8:	bc 01       	movw	r22, r24
    3ffa:	cd 01       	movw	r24, r26
    3ffc:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    4000:	dc 01       	movw	r26, r24
    4002:	cb 01       	movw	r24, r22
	}
    4004:	0f 90       	pop	r0
    4006:	0f 90       	pop	r0
    4008:	cf 91       	pop	r28
    400a:	df 91       	pop	r29
    400c:	08 95       	ret

0000400e <accelerometer_ACCM3D>:
//ACCM3D for more info, see:
//http://www.dimensionengineering.com/DE-ACCM3D.htm
//you can power this sensor directly from the Axon's 5V ADC header row
//converts ADC value to degrees
int accelerometer_ACCM3D(int value)
	{
    400e:	df 93       	push	r29
    4010:	cf 93       	push	r28
    4012:	00 d0       	rcall	.+0      	; 0x4014 <accelerometer_ACCM3D+0x6>
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
    4018:	9a 83       	std	Y+2, r25	; 0x02
    401a:	89 83       	std	Y+1, r24	; 0x01
	return (8.1818*value-8.1818);
    401c:	89 81       	ldd	r24, Y+1	; 0x01
    401e:	9a 81       	ldd	r25, Y+2	; 0x02
    4020:	aa 27       	eor	r26, r26
    4022:	97 fd       	sbrc	r25, 7
    4024:	a0 95       	com	r26
    4026:	ba 2f       	mov	r27, r26
    4028:	bc 01       	movw	r22, r24
    402a:	cd 01       	movw	r24, r26
    402c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    4030:	dc 01       	movw	r26, r24
    4032:	cb 01       	movw	r24, r22
    4034:	bc 01       	movw	r22, r24
    4036:	cd 01       	movw	r24, r26
    4038:	27 ea       	ldi	r18, 0xA7	; 167
    403a:	38 ee       	ldi	r19, 0xE8	; 232
    403c:	42 e0       	ldi	r20, 0x02	; 2
    403e:	51 e4       	ldi	r21, 0x41	; 65
    4040:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	bc 01       	movw	r22, r24
    404a:	cd 01       	movw	r24, r26
    404c:	27 ea       	ldi	r18, 0xA7	; 167
    404e:	38 ee       	ldi	r19, 0xE8	; 232
    4050:	42 e0       	ldi	r20, 0x02	; 2
    4052:	51 e4       	ldi	r21, 0x41	; 65
    4054:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__subsf3>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	bc 01       	movw	r22, r24
    405e:	cd 01       	movw	r24, r26
    4060:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
	}
    4068:	0f 90       	pop	r0
    406a:	0f 90       	pop	r0
    406c:	cf 91       	pop	r28
    406e:	df 91       	pop	r29
    4070:	08 95       	ret

00004072 <accelerometer_SEN00741>:
//SEN-00741 for more info, see:
//http://www.sparkfun.com/commerce/product_info.php?products_id=741
//http://www.sparkfun.com/datasheets/Components/ADXL330_0.pdf
//use the 3.3V output on the Axon to power this sensor (giving it 5V will fry it!)
int accelerometer_SEN00741(int value)
	{
    4072:	df 93       	push	r29
    4074:	cf 93       	push	r28
    4076:	00 d0       	rcall	.+0      	; 0x4078 <accelerometer_SEN00741+0x6>
    4078:	cd b7       	in	r28, 0x3d	; 61
    407a:	de b7       	in	r29, 0x3e	; 62
    407c:	9a 83       	std	Y+2, r25	; 0x02
    407e:	89 83       	std	Y+1, r24	; 0x01
	return (8.1818*value-8.1818);
    4080:	89 81       	ldd	r24, Y+1	; 0x01
    4082:	9a 81       	ldd	r25, Y+2	; 0x02
    4084:	aa 27       	eor	r26, r26
    4086:	97 fd       	sbrc	r25, 7
    4088:	a0 95       	com	r26
    408a:	ba 2f       	mov	r27, r26
    408c:	bc 01       	movw	r22, r24
    408e:	cd 01       	movw	r24, r26
    4090:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	bc 01       	movw	r22, r24
    409a:	cd 01       	movw	r24, r26
    409c:	27 ea       	ldi	r18, 0xA7	; 167
    409e:	38 ee       	ldi	r19, 0xE8	; 232
    40a0:	42 e0       	ldi	r20, 0x02	; 2
    40a2:	51 e4       	ldi	r21, 0x41	; 65
    40a4:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	bc 01       	movw	r22, r24
    40ae:	cd 01       	movw	r24, r26
    40b0:	27 ea       	ldi	r18, 0xA7	; 167
    40b2:	38 ee       	ldi	r19, 0xE8	; 232
    40b4:	42 e0       	ldi	r20, 0x02	; 2
    40b6:	51 e4       	ldi	r21, 0x41	; 65
    40b8:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__subsf3>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	bc 01       	movw	r22, r24
    40c2:	cd 01       	movw	r24, r26
    40c4:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
	}
    40cc:	0f 90       	pop	r0
    40ce:	0f 90       	pop	r0
    40d0:	cf 91       	pop	r28
    40d2:	df 91       	pop	r29
    40d4:	08 95       	ret

000040d6 <gyro_SEN00741>:
//http://www.sparkfun.com/datasheets/Components/IDG-300_Datasheet.pdf
//use the 3.3V output on the Axon to power this sensor (giving it 5V will fry it!)
//converts ADC value to degrees
//2 mV/deg/second, effectively linear at 1%
int gyro_SEN00741(int value)
	{
    40d6:	df 93       	push	r29
    40d8:	cf 93       	push	r28
    40da:	00 d0       	rcall	.+0      	; 0x40dc <gyro_SEN00741+0x6>
    40dc:	cd b7       	in	r28, 0x3d	; 61
    40de:	de b7       	in	r29, 0x3e	; 62
    40e0:	9a 83       	std	Y+2, r25	; 0x02
    40e2:	89 83       	std	Y+1, r24	; 0x01
	return (15*value-180);
    40e4:	29 81       	ldd	r18, Y+1	; 0x01
    40e6:	3a 81       	ldd	r19, Y+2	; 0x02
    40e8:	c9 01       	movw	r24, r18
    40ea:	88 0f       	add	r24, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	82 0f       	add	r24, r18
    40f0:	93 1f       	adc	r25, r19
    40f2:	9c 01       	movw	r18, r24
    40f4:	22 0f       	add	r18, r18
    40f6:	33 1f       	adc	r19, r19
    40f8:	22 0f       	add	r18, r18
    40fa:	33 1f       	adc	r19, r19
    40fc:	82 0f       	add	r24, r18
    40fe:	93 1f       	adc	r25, r19
    4100:	84 5b       	subi	r24, 0xB4	; 180
    4102:	90 40       	sbci	r25, 0x00	; 0
	}
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	cf 91       	pop	r28
    410a:	df 91       	pop	r29
    410c:	08 95       	ret

0000410e <sonar_MaxSonar>:
/******************SONAR******************/
//LV_MaxSonar_EZ1: http://www.maxbotix.com/uploads/LV-MaxSonar-EZ1-Datasheet.pdf
//you can power these sensors directly from the Axon's 5V ADC header row
//A supply of 5V yields ~9.8mV/in for all EZ versions
int sonar_MaxSonar(int value)
	{
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	00 d0       	rcall	.+0      	; 0x4114 <sonar_MaxSonar+0x6>
    4114:	cd b7       	in	r28, 0x3d	; 61
    4116:	de b7       	in	r29, 0x3e	; 62
    4118:	9a 83       	std	Y+2, r25	; 0x02
    411a:	89 83       	std	Y+1, r24	; 0x01
	return (50.01*value-51.02);
    411c:	89 81       	ldd	r24, Y+1	; 0x01
    411e:	9a 81       	ldd	r25, Y+2	; 0x02
    4120:	aa 27       	eor	r26, r26
    4122:	97 fd       	sbrc	r25, 7
    4124:	a0 95       	com	r26
    4126:	ba 2f       	mov	r27, r26
    4128:	bc 01       	movw	r22, r24
    412a:	cd 01       	movw	r24, r26
    412c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	bc 01       	movw	r22, r24
    4136:	cd 01       	movw	r24, r26
    4138:	2d e3       	ldi	r18, 0x3D	; 61
    413a:	3a e0       	ldi	r19, 0x0A	; 10
    413c:	48 e4       	ldi	r20, 0x48	; 72
    413e:	52 e4       	ldi	r21, 0x42	; 66
    4140:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	bc 01       	movw	r22, r24
    414a:	cd 01       	movw	r24, r26
    414c:	2b e7       	ldi	r18, 0x7B	; 123
    414e:	34 e1       	ldi	r19, 0x14	; 20
    4150:	4c e4       	ldi	r20, 0x4C	; 76
    4152:	52 e4       	ldi	r21, 0x42	; 66
    4154:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__subsf3>
    4158:	dc 01       	movw	r26, r24
    415a:	cb 01       	movw	r24, r22
    415c:	bc 01       	movw	r22, r24
    415e:	cd 01       	movw	r24, r26
    4160:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
	}
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	cf 91       	pop	r28
    416e:	df 91       	pop	r29
    4170:	08 95       	ret

00004172 <sonar_Ping>:
//http://www.societyofrobots.com/member_tutorials/node/174
//http://www.societyofrobots.com/robotforum/index.php?topic=5123.msg40008
//http://www.societyofrobots.com/robotforum/index.php?topic=4656.30
//uses timer0
int sonar_Ping(void)
	{
    4172:	df 93       	push	r29
    4174:	cf 93       	push	r28
    4176:	cd b7       	in	r28, 0x3d	; 61
    4178:	de b7       	in	r29, 0x3e	; 62
	#define PINGPIN    3          // assign a pin to the Ping Sensor
	#define DDR        DDRA
	#define PORT       PORTA
	#define PIN        PINA

	PORT_ON(DDR, PINGPIN);   // Switch PingPin to OUPUT
    417a:	a1 e2       	ldi	r26, 0x21	; 33
    417c:	b0 e0       	ldi	r27, 0x00	; 0
    417e:	e1 e2       	ldi	r30, 0x21	; 33
    4180:	f0 e0       	ldi	r31, 0x00	; 0
    4182:	80 81       	ld	r24, Z
    4184:	88 60       	ori	r24, 0x08	; 8
    4186:	8c 93       	st	X, r24
	// ------Trigger Pulse--------------
	PORT_OFF(PORT, PINGPIN);   // Bring PingPin low before starting trigger pulse
    4188:	a2 e2       	ldi	r26, 0x22	; 34
    418a:	b0 e0       	ldi	r27, 0x00	; 0
    418c:	e2 e2       	ldi	r30, 0x22	; 34
    418e:	f0 e0       	ldi	r31, 0x00	; 0
    4190:	80 81       	ld	r24, Z
    4192:	87 7f       	andi	r24, 0xF7	; 247
    4194:	8c 93       	st	X, r24
	delay_us(2);        //  Wait for 2 microseconds
    4196:	82 e0       	ldi	r24, 0x02	; 2
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <delay_us>
	PORT_ON(PORT, PINGPIN);    // Bring PingPin High for 5us according to spec sheet.
    419e:	a2 e2       	ldi	r26, 0x22	; 34
    41a0:	b0 e0       	ldi	r27, 0x00	; 0
    41a2:	e2 e2       	ldi	r30, 0x22	; 34
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	80 81       	ld	r24, Z
    41a8:	88 60       	ori	r24, 0x08	; 8
    41aa:	8c 93       	st	X, r24
	delay_us(5);       // Wait for 5 microseconds
    41ac:	85 e0       	ldi	r24, 0x05	; 5
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <delay_us>
	PORT_OFF(PORT, PINGPIN);; //  Bring PingPin Low and standby
    41b4:	a2 e2       	ldi	r26, 0x22	; 34
    41b6:	b0 e0       	ldi	r27, 0x00	; 0
    41b8:	e2 e2       	ldi	r30, 0x22	; 34
    41ba:	f0 e0       	ldi	r31, 0x00	; 0
    41bc:	80 81       	ld	r24, Z
    41be:	87 7f       	andi	r24, 0xF7	; 247
    41c0:	8c 93       	st	X, r24
	//--------End Trigger Pulse---------------------
	FLIP_PORT(DDR, PINGPIN);   // Switch PingPin to INPUT
    41c2:	a1 e2       	ldi	r26, 0x21	; 33
    41c4:	b0 e0       	ldi	r27, 0x00	; 0
    41c6:	e1 e2       	ldi	r30, 0x21	; 33
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	90 81       	ld	r25, Z
    41cc:	88 e0       	ldi	r24, 0x08	; 8
    41ce:	89 27       	eor	r24, r25
    41d0:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIN, PINGPIN);     // Loop until the the PingPin goes high  (macro found in sfr_def.h)
    41d2:	e0 e2       	ldi	r30, 0x20	; 32
    41d4:	f0 e0       	ldi	r31, 0x00	; 0
    41d6:	80 81       	ld	r24, Z
    41d8:	88 2f       	mov	r24, r24
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	88 70       	andi	r24, 0x08	; 8
    41de:	90 70       	andi	r25, 0x00	; 0
    41e0:	00 97       	sbiw	r24, 0x00	; 0
    41e2:	b9 f3       	breq	.-18     	; 0x41d2 <sonar_Ping+0x60>
	//clears timer, reset overflow counter
	reset_timer0();       //reset timer 0
    41e4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <reset_timer0>
	loop_until_bit_is_clear(PIN, PINGPIN);     // Loop until the the PingPin goes low  (macro found in sfr_def.h)
    41e8:	e0 e2       	ldi	r30, 0x20	; 32
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	80 81       	ld	r24, Z
    41ee:	88 2f       	mov	r24, r24
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	88 70       	andi	r24, 0x08	; 8
    41f4:	90 70       	andi	r25, 0x00	; 0
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	b9 f7       	brne	.-18     	; 0x41e8 <sonar_Ping+0x76>
	//read timer0's overflow counter
	//255 is count before overflow, dependent on clock
	
	return (get_timer0_overflow()*255+TCNT0) * 2.068965517;//elapsed time x conversion
    41fa:	0e 94 35 0b 	call	0x166a	; 0x166a <get_timer0_overflow>
    41fe:	dc 01       	movw	r26, r24
    4200:	cb 01       	movw	r24, r22
    4202:	2f ef       	ldi	r18, 0xFF	; 255
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e0       	ldi	r20, 0x00	; 0
    4208:	50 e0       	ldi	r21, 0x00	; 0
    420a:	bc 01       	movw	r22, r24
    420c:	cd 01       	movw	r24, r26
    420e:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsi3>
    4212:	9b 01       	movw	r18, r22
    4214:	ac 01       	movw	r20, r24
    4216:	e6 e4       	ldi	r30, 0x46	; 70
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	80 81       	ld	r24, Z
    421c:	88 2f       	mov	r24, r24
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	a0 e0       	ldi	r26, 0x00	; 0
    4222:	b0 e0       	ldi	r27, 0x00	; 0
    4224:	82 0f       	add	r24, r18
    4226:	93 1f       	adc	r25, r19
    4228:	a4 1f       	adc	r26, r20
    422a:	b5 1f       	adc	r27, r21
    422c:	bc 01       	movw	r22, r24
    422e:	cd 01       	movw	r24, r26
    4230:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__floatunsisf>
    4234:	dc 01       	movw	r26, r24
    4236:	cb 01       	movw	r24, r22
    4238:	bc 01       	movw	r22, r24
    423a:	cd 01       	movw	r24, r26
    423c:	2e ee       	ldi	r18, 0xEE	; 238
    423e:	39 e6       	ldi	r19, 0x69	; 105
    4240:	44 e0       	ldi	r20, 0x04	; 4
    4242:	50 e4       	ldi	r21, 0x40	; 64
    4244:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	bc 01       	movw	r22, r24
    424e:	cd 01       	movw	r24, r26
    4250:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
	}
    4258:	cf 91       	pop	r28
    425a:	df 91       	pop	r29
    425c:	08 95       	ret

0000425e <pressure_phidget>:
//http://www.robotshop.us/PDF/Phidgets-Sensors.pdf
//you can power these sensors directly from the Axon's 5V ADC header row
//(unless otherwise specified)
//Gas Pressure Sensor
int pressure_phidget(int value)
	{
    425e:	df 93       	push	r29
    4260:	cf 93       	push	r28
    4262:	00 d0       	rcall	.+0      	; 0x4264 <pressure_phidget+0x6>
    4264:	cd b7       	in	r28, 0x3d	; 61
    4266:	de b7       	in	r29, 0x3e	; 62
    4268:	9a 83       	std	Y+2, r25	; 0x02
    426a:	89 83       	std	Y+1, r24	; 0x01
	return (value*0.25 + 10);//returns in kilopascals
    426c:	89 81       	ldd	r24, Y+1	; 0x01
    426e:	9a 81       	ldd	r25, Y+2	; 0x02
    4270:	aa 27       	eor	r26, r26
    4272:	97 fd       	sbrc	r25, 7
    4274:	a0 95       	com	r26
    4276:	ba 2f       	mov	r27, r26
    4278:	bc 01       	movw	r22, r24
    427a:	cd 01       	movw	r24, r26
    427c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	bc 01       	movw	r22, r24
    4286:	cd 01       	movw	r24, r26
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	40 e8       	ldi	r20, 0x80	; 128
    428e:	5e e3       	ldi	r21, 0x3E	; 62
    4290:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    4294:	dc 01       	movw	r26, r24
    4296:	cb 01       	movw	r24, r22
    4298:	bc 01       	movw	r22, r24
    429a:	cd 01       	movw	r24, r26
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	40 e2       	ldi	r20, 0x20	; 32
    42a2:	51 e4       	ldi	r21, 0x41	; 65
    42a4:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__addsf3>
    42a8:	dc 01       	movw	r26, r24
    42aa:	cb 01       	movw	r24, r22
    42ac:	bc 01       	movw	r22, r24
    42ae:	cd 01       	movw	r24, r26
    42b0:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
	}
    42b8:	0f 90       	pop	r0
    42ba:	0f 90       	pop	r0
    42bc:	cf 91       	pop	r28
    42be:	df 91       	pop	r29
    42c0:	08 95       	ret

000042c2 <voltage_phidget>:
//Voltage Sensor
int voltage_phidget(int value)
	{
    42c2:	df 93       	push	r29
    42c4:	cf 93       	push	r28
    42c6:	00 d0       	rcall	.+0      	; 0x42c8 <voltage_phidget+0x6>
    42c8:	cd b7       	in	r28, 0x3d	; 61
    42ca:	de b7       	in	r29, 0x3e	; 62
    42cc:	9a 83       	std	Y+2, r25	; 0x02
    42ce:	89 83       	std	Y+1, r24	; 0x01
	return ((value - 500) * 0.06);//returns in volts
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	9a 81       	ldd	r25, Y+2	; 0x02
    42d4:	84 5f       	subi	r24, 0xF4	; 244
    42d6:	91 40       	sbci	r25, 0x01	; 1
    42d8:	aa 27       	eor	r26, r26
    42da:	97 fd       	sbrc	r25, 7
    42dc:	a0 95       	com	r26
    42de:	ba 2f       	mov	r27, r26
    42e0:	bc 01       	movw	r22, r24
    42e2:	cd 01       	movw	r24, r26
    42e4:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	bc 01       	movw	r22, r24
    42ee:	cd 01       	movw	r24, r26
    42f0:	2f e8       	ldi	r18, 0x8F	; 143
    42f2:	32 ec       	ldi	r19, 0xC2	; 194
    42f4:	45 e7       	ldi	r20, 0x75	; 117
    42f6:	5d e3       	ldi	r21, 0x3D	; 61
    42f8:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    42fc:	dc 01       	movw	r26, r24
    42fe:	cb 01       	movw	r24, r22
    4300:	bc 01       	movw	r22, r24
    4302:	cd 01       	movw	r24, r26
    4304:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
	}
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	cf 91       	pop	r28
    4312:	df 91       	pop	r29
    4314:	08 95       	ret

00004316 <magnetic_phidget>:
//Magnetic Sensor
int magnetic_phidget(int value)
	{
    4316:	df 93       	push	r29
    4318:	cf 93       	push	r28
    431a:	00 d0       	rcall	.+0      	; 0x431c <magnetic_phidget+0x6>
    431c:	cd b7       	in	r28, 0x3d	; 61
    431e:	de b7       	in	r29, 0x3e	; 62
    4320:	9a 83       	std	Y+2, r25	; 0x02
    4322:	89 83       	std	Y+1, r24	; 0x01
	return (500 - value);//returns in gauss
    4324:	24 ef       	ldi	r18, 0xF4	; 244
    4326:	31 e0       	ldi	r19, 0x01	; 1
    4328:	89 81       	ldd	r24, Y+1	; 0x01
    432a:	9a 81       	ldd	r25, Y+2	; 0x02
    432c:	a9 01       	movw	r20, r18
    432e:	48 1b       	sub	r20, r24
    4330:	59 0b       	sbc	r21, r25
    4332:	ca 01       	movw	r24, r20
	}
    4334:	0f 90       	pop	r0
    4336:	0f 90       	pop	r0
    4338:	cf 91       	pop	r28
    433a:	df 91       	pop	r29
    433c:	08 95       	ret

0000433e <temperature_phidget>:
//Temperature Sensor
int temperature_phidget(int value)
	{
    433e:	df 93       	push	r29
    4340:	cf 93       	push	r28
    4342:	00 d0       	rcall	.+0      	; 0x4344 <temperature_phidget+0x6>
    4344:	00 d0       	rcall	.+0      	; 0x4346 <temperature_phidget+0x8>
    4346:	cd b7       	in	r28, 0x3d	; 61
    4348:	de b7       	in	r29, 0x3e	; 62
    434a:	9a 83       	std	Y+2, r25	; 0x02
    434c:	89 83       	std	Y+1, r24	; 0x01
	return ((value-200)/4);//returns in celsius
    434e:	89 81       	ldd	r24, Y+1	; 0x01
    4350:	9a 81       	ldd	r25, Y+2	; 0x02
    4352:	88 5c       	subi	r24, 0xC8	; 200
    4354:	90 40       	sbci	r25, 0x00	; 0
    4356:	9c 83       	std	Y+4, r25	; 0x04
    4358:	8b 83       	std	Y+3, r24	; 0x03
    435a:	8b 81       	ldd	r24, Y+3	; 0x03
    435c:	9c 81       	ldd	r25, Y+4	; 0x04
    435e:	99 23       	and	r25, r25
    4360:	2c f4       	brge	.+10     	; 0x436c <temperature_phidget+0x2e>
    4362:	8b 81       	ldd	r24, Y+3	; 0x03
    4364:	9c 81       	ldd	r25, Y+4	; 0x04
    4366:	03 96       	adiw	r24, 0x03	; 3
    4368:	9c 83       	std	Y+4, r25	; 0x04
    436a:	8b 83       	std	Y+3, r24	; 0x03
    436c:	8b 81       	ldd	r24, Y+3	; 0x03
    436e:	9c 81       	ldd	r25, Y+4	; 0x04
    4370:	95 95       	asr	r25
    4372:	87 95       	ror	r24
    4374:	95 95       	asr	r25
    4376:	87 95       	ror	r24
	}
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	0f 90       	pop	r0
    4380:	cf 91       	pop	r28
    4382:	df 91       	pop	r29
    4384:	08 95       	ret

00004386 <currentDC50_phidget>:
//50A Current Sensor
int currentDC50_phidget(int value)
	{
    4386:	df 93       	push	r29
    4388:	cf 93       	push	r28
    438a:	00 d0       	rcall	.+0      	; 0x438c <currentDC50_phidget+0x6>
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	9a 83       	std	Y+2, r25	; 0x02
    4392:	89 83       	std	Y+1, r24	; 0x01
	return ((value-500)* 0.125);//returns in amps
    4394:	89 81       	ldd	r24, Y+1	; 0x01
    4396:	9a 81       	ldd	r25, Y+2	; 0x02
    4398:	84 5f       	subi	r24, 0xF4	; 244
    439a:	91 40       	sbci	r25, 0x01	; 1
    439c:	aa 27       	eor	r26, r26
    439e:	97 fd       	sbrc	r25, 7
    43a0:	a0 95       	com	r26
    43a2:	ba 2f       	mov	r27, r26
    43a4:	bc 01       	movw	r22, r24
    43a6:	cd 01       	movw	r24, r26
    43a8:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    43ac:	dc 01       	movw	r26, r24
    43ae:	cb 01       	movw	r24, r22
    43b0:	bc 01       	movw	r22, r24
    43b2:	cd 01       	movw	r24, r26
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	40 e0       	ldi	r20, 0x00	; 0
    43ba:	5e e3       	ldi	r21, 0x3E	; 62
    43bc:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    43c0:	dc 01       	movw	r26, r24
    43c2:	cb 01       	movw	r24, r22
    43c4:	bc 01       	movw	r22, r24
    43c6:	cd 01       	movw	r24, r26
    43c8:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
	}
    43d0:	0f 90       	pop	r0
    43d2:	0f 90       	pop	r0
    43d4:	cf 91       	pop	r28
    43d6:	df 91       	pop	r29
    43d8:	08 95       	ret

000043da <currentAC50_phidget>:
//50A Current Sensor
int currentAC50_phidget(int value)
	{
    43da:	df 93       	push	r29
    43dc:	cf 93       	push	r28
    43de:	00 d0       	rcall	.+0      	; 0x43e0 <currentAC50_phidget+0x6>
    43e0:	cd b7       	in	r28, 0x3d	; 61
    43e2:	de b7       	in	r29, 0x3e	; 62
    43e4:	9a 83       	std	Y+2, r25	; 0x02
    43e6:	89 83       	std	Y+1, r24	; 0x01
	return (value*0.0625);//returns in amps
    43e8:	89 81       	ldd	r24, Y+1	; 0x01
    43ea:	9a 81       	ldd	r25, Y+2	; 0x02
    43ec:	aa 27       	eor	r26, r26
    43ee:	97 fd       	sbrc	r25, 7
    43f0:	a0 95       	com	r26
    43f2:	ba 2f       	mov	r27, r26
    43f4:	bc 01       	movw	r22, r24
    43f6:	cd 01       	movw	r24, r26
    43f8:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	bc 01       	movw	r22, r24
    4402:	cd 01       	movw	r24, r26
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	40 e8       	ldi	r20, 0x80	; 128
    440a:	5d e3       	ldi	r21, 0x3D	; 61
    440c:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    4410:	dc 01       	movw	r26, r24
    4412:	cb 01       	movw	r24, r22
    4414:	bc 01       	movw	r22, r24
    4416:	cd 01       	movw	r24, r26
    4418:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
	}
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	cf 91       	pop	r28
    4426:	df 91       	pop	r29
    4428:	08 95       	ret

0000442a <currentDC20_phidget>:
//20A Current Sensor
int currentDC20_phidget(int value)
	{
    442a:	df 93       	push	r29
    442c:	cf 93       	push	r28
    442e:	00 d0       	rcall	.+0      	; 0x4430 <currentDC20_phidget+0x6>
    4430:	cd b7       	in	r28, 0x3d	; 61
    4432:	de b7       	in	r29, 0x3e	; 62
    4434:	9a 83       	std	Y+2, r25	; 0x02
    4436:	89 83       	std	Y+1, r24	; 0x01
	return ((value-500)* 0.05);//returns in amps
    4438:	89 81       	ldd	r24, Y+1	; 0x01
    443a:	9a 81       	ldd	r25, Y+2	; 0x02
    443c:	84 5f       	subi	r24, 0xF4	; 244
    443e:	91 40       	sbci	r25, 0x01	; 1
    4440:	aa 27       	eor	r26, r26
    4442:	97 fd       	sbrc	r25, 7
    4444:	a0 95       	com	r26
    4446:	ba 2f       	mov	r27, r26
    4448:	bc 01       	movw	r22, r24
    444a:	cd 01       	movw	r24, r26
    444c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	bc 01       	movw	r22, r24
    4456:	cd 01       	movw	r24, r26
    4458:	2d ec       	ldi	r18, 0xCD	; 205
    445a:	3c ec       	ldi	r19, 0xCC	; 204
    445c:	4c e4       	ldi	r20, 0x4C	; 76
    445e:	5d e3       	ldi	r21, 0x3D	; 61
    4460:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    4464:	dc 01       	movw	r26, r24
    4466:	cb 01       	movw	r24, r22
    4468:	bc 01       	movw	r22, r24
    446a:	cd 01       	movw	r24, r26
    446c:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
	}
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
    4478:	cf 91       	pop	r28
    447a:	df 91       	pop	r29
    447c:	08 95       	ret

0000447e <currentAC20_phidget>:
//20A Current Sensor
int currentAC20_phidget(int value)
	{
    447e:	df 93       	push	r29
    4480:	cf 93       	push	r28
    4482:	00 d0       	rcall	.+0      	; 0x4484 <currentAC20_phidget+0x6>
    4484:	cd b7       	in	r28, 0x3d	; 61
    4486:	de b7       	in	r29, 0x3e	; 62
    4488:	9a 83       	std	Y+2, r25	; 0x02
    448a:	89 83       	std	Y+1, r24	; 0x01
	return (value*0.025);//returns in amps
    448c:	89 81       	ldd	r24, Y+1	; 0x01
    448e:	9a 81       	ldd	r25, Y+2	; 0x02
    4490:	aa 27       	eor	r26, r26
    4492:	97 fd       	sbrc	r25, 7
    4494:	a0 95       	com	r26
    4496:	ba 2f       	mov	r27, r26
    4498:	bc 01       	movw	r22, r24
    449a:	cd 01       	movw	r24, r26
    449c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	bc 01       	movw	r22, r24
    44a6:	cd 01       	movw	r24, r26
    44a8:	2d ec       	ldi	r18, 0xCD	; 205
    44aa:	3c ec       	ldi	r19, 0xCC	; 204
    44ac:	4c ec       	ldi	r20, 0xCC	; 204
    44ae:	5c e3       	ldi	r21, 0x3C	; 60
    44b0:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	bc 01       	movw	r22, r24
    44ba:	cd 01       	movw	r24, r26
    44bc:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
	}
    44c4:	0f 90       	pop	r0
    44c6:	0f 90       	pop	r0
    44c8:	cf 91       	pop	r28
    44ca:	df 91       	pop	r29
    44cc:	08 95       	ret

000044ce <humidity_phidget>:
//Humidity Sensor
int humidity_phidget(int value)
	{
    44ce:	df 93       	push	r29
    44d0:	cf 93       	push	r28
    44d2:	00 d0       	rcall	.+0      	; 0x44d4 <humidity_phidget+0x6>
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
    44d8:	9a 83       	std	Y+2, r25	; 0x02
    44da:	89 83       	std	Y+1, r24	; 0x01
	return ((value*0.1946) - 41.98);//returns in RH (in %)
    44dc:	89 81       	ldd	r24, Y+1	; 0x01
    44de:	9a 81       	ldd	r25, Y+2	; 0x02
    44e0:	aa 27       	eor	r26, r26
    44e2:	97 fd       	sbrc	r25, 7
    44e4:	a0 95       	com	r26
    44e6:	ba 2f       	mov	r27, r26
    44e8:	bc 01       	movw	r22, r24
    44ea:	cd 01       	movw	r24, r26
    44ec:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__floatsisf>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	bc 01       	movw	r22, r24
    44f6:	cd 01       	movw	r24, r26
    44f8:	29 e3       	ldi	r18, 0x39	; 57
    44fa:	35 e4       	ldi	r19, 0x45	; 69
    44fc:	47 e4       	ldi	r20, 0x47	; 71
    44fe:	5e e3       	ldi	r21, 0x3E	; 62
    4500:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__mulsf3>
    4504:	dc 01       	movw	r26, r24
    4506:	cb 01       	movw	r24, r22
    4508:	bc 01       	movw	r22, r24
    450a:	cd 01       	movw	r24, r26
    450c:	25 e8       	ldi	r18, 0x85	; 133
    450e:	3b ee       	ldi	r19, 0xEB	; 235
    4510:	47 e2       	ldi	r20, 0x27	; 39
    4512:	52 e4       	ldi	r21, 0x42	; 66
    4514:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__subsf3>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	bc 01       	movw	r22, r24
    451e:	cd 01       	movw	r24, r26
    4520:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fixsfsi>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
	}
    4528:	0f 90       	pop	r0
    452a:	0f 90       	pop	r0
    452c:	cf 91       	pop	r28
    452e:	df 91       	pop	r29
    4530:	08 95       	ret

00004532 <sabertooth>:
//Character 0 will shut down both motors

//example: sabertooth(38,200);//send command to motors

void sabertooth(int m1, int m2)
	{
    4532:	df 93       	push	r29
    4534:	cf 93       	push	r28
    4536:	00 d0       	rcall	.+0      	; 0x4538 <sabertooth+0x6>
    4538:	00 d0       	rcall	.+0      	; 0x453a <sabertooth+0x8>
    453a:	cd b7       	in	r28, 0x3d	; 61
    453c:	de b7       	in	r29, 0x3e	; 62
    453e:	9a 83       	std	Y+2, r25	; 0x02
    4540:	89 83       	std	Y+1, r24	; 0x01
    4542:	7c 83       	std	Y+4, r23	; 0x04
    4544:	6b 83       	std	Y+3, r22	; 0x03
	//rprintfInit(uart2SendByte);//select uart2
	uartSetBaudRate(2, 38400);//select baud (see page 13/14 of datasheet)
    4546:	82 e0       	ldi	r24, 0x02	; 2
    4548:	40 e0       	ldi	r20, 0x00	; 0
    454a:	56 e9       	ldi	r21, 0x96	; 150
    454c:	60 e0       	ldi	r22, 0x00	; 0
    454e:	70 e0       	ldi	r23, 0x00	; 0
    4550:	0e 94 33 05 	call	0xa66	; 0xa66 <uartSetBaudRate>
	uart2SendByte(m1);//send a command for motor 1
    4554:	89 81       	ldd	r24, Y+1	; 0x01
    4556:	0e 94 59 06 	call	0xcb2	; 0xcb2 <uart2SendByte>
	uart2SendByte(m2);//send a command for motor 2
    455a:	8b 81       	ldd	r24, Y+3	; 0x03
    455c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <uart2SendByte>
	}
    4560:	0f 90       	pop	r0
    4562:	0f 90       	pop	r0
    4564:	0f 90       	pop	r0
    4566:	0f 90       	pop	r0
    4568:	cf 91       	pop	r28
    456a:	df 91       	pop	r29
    456c:	08 95       	ret

0000456e <syren>:
//http://www.dimensionengineering.com/datasheets/SyRen10-25.pdf

//0 represents full reverse and 255 represents full forward

void syren(int m1)
	{
    456e:	df 93       	push	r29
    4570:	cf 93       	push	r28
    4572:	00 d0       	rcall	.+0      	; 0x4574 <syren+0x6>
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
    4578:	9a 83       	std	Y+2, r25	; 0x02
    457a:	89 83       	std	Y+1, r24	; 0x01
	//rprintfInit(uart2SendByte);//select uart2
	uartSetBaudRate(2, 38400);//select baud (see page 14 of datasheet)
    457c:	82 e0       	ldi	r24, 0x02	; 2
    457e:	40 e0       	ldi	r20, 0x00	; 0
    4580:	56 e9       	ldi	r21, 0x96	; 150
    4582:	60 e0       	ldi	r22, 0x00	; 0
    4584:	70 e0       	ldi	r23, 0x00	; 0
    4586:	0e 94 33 05 	call	0xa66	; 0xa66 <uartSetBaudRate>
	uart2SendByte(m1);//send a command for motor 1
    458a:	89 81       	ldd	r24, Y+1	; 0x01
    458c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <uart2SendByte>
	}
    4590:	0f 90       	pop	r0
    4592:	0f 90       	pop	r0
    4594:	cf 91       	pop	r28
    4596:	df 91       	pop	r29
    4598:	08 95       	ret

0000459a <axon_DAQ>:

//this file contains code to convert the Axon into a DAQ (data acquisition device)


void axon_DAQ(void)
	{
    459a:	0f 93       	push	r16
    459c:	1f 93       	push	r17
    459e:	df 93       	push	r29
    45a0:	cf 93       	push	r28
    45a2:	cd b7       	in	r28, 0x3d	; 61
    45a4:	de b7       	in	r29, 0x3e	; 62
    45a6:	a0 97       	sbiw	r28, 0x20	; 32
    45a8:	0f b6       	in	r0, 0x3f	; 63
    45aa:	f8 94       	cli
    45ac:	de bf       	out	0x3e, r29	; 62
    45ae:	0f be       	out	0x3f, r0	; 63
    45b0:	cd bf       	out	0x3d, r28	; 61
	int a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;

	//select speed/accuracy of data conversion
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling, 32 default
    45b2:	85 e0       	ldi	r24, 0x05	; 5
    45b4:	0e 94 84 01 	call	0x308	; 0x308 <a2dSetPrescaler>
	// ADC_PRESCALE_DIV128		-> CPU clk/128

	while(1)
		{
		//clear timer
		reset_timer2();
    45b8:	0e 94 00 0c 	call	0x1800	; 0x1800 <reset_timer2>
		//add a delay here to slow it down
		//be careful that clock doesn't overflow!
		//delay_ms(1);

		//gather data
		a0=a2dConvert8bit(0);
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    45c2:	88 2f       	mov	r24, r24
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	98 a3       	std	Y+32, r25	; 0x20
    45c8:	8f 8f       	std	Y+31, r24	; 0x1f
		a1=a2dConvert8bit(1);
    45ca:	81 e0       	ldi	r24, 0x01	; 1
    45cc:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    45d0:	88 2f       	mov	r24, r24
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	9e 8f       	std	Y+30, r25	; 0x1e
    45d6:	8d 8f       	std	Y+29, r24	; 0x1d
		a2=a2dConvert8bit(2);
    45d8:	82 e0       	ldi	r24, 0x02	; 2
    45da:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    45de:	88 2f       	mov	r24, r24
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	9c 8f       	std	Y+28, r25	; 0x1c
    45e4:	8b 8f       	std	Y+27, r24	; 0x1b
		a3=a2dConvert8bit(3);
    45e6:	83 e0       	ldi	r24, 0x03	; 3
    45e8:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    45ec:	88 2f       	mov	r24, r24
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	9a 8f       	std	Y+26, r25	; 0x1a
    45f2:	89 8f       	std	Y+25, r24	; 0x19
		a4=a2dConvert8bit(4);
    45f4:	84 e0       	ldi	r24, 0x04	; 4
    45f6:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    45fa:	88 2f       	mov	r24, r24
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	98 8f       	std	Y+24, r25	; 0x18
    4600:	8f 8b       	std	Y+23, r24	; 0x17
		a5=a2dConvert8bit(5);
    4602:	85 e0       	ldi	r24, 0x05	; 5
    4604:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4608:	88 2f       	mov	r24, r24
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	9e 8b       	std	Y+22, r25	; 0x16
    460e:	8d 8b       	std	Y+21, r24	; 0x15
		a6=a2dConvert8bit(6);
    4610:	86 e0       	ldi	r24, 0x06	; 6
    4612:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4616:	88 2f       	mov	r24, r24
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	9c 8b       	std	Y+20, r25	; 0x14
    461c:	8b 8b       	std	Y+19, r24	; 0x13
		a7=a2dConvert8bit(7);
    461e:	87 e0       	ldi	r24, 0x07	; 7
    4620:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4624:	88 2f       	mov	r24, r24
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	9a 8b       	std	Y+18, r25	; 0x12
    462a:	89 8b       	std	Y+17, r24	; 0x11
		a8=a2dConvert8bit(8);
    462c:	88 e0       	ldi	r24, 0x08	; 8
    462e:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4632:	88 2f       	mov	r24, r24
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	98 8b       	std	Y+16, r25	; 0x10
    4638:	8f 87       	std	Y+15, r24	; 0x0f
		a9=a2dConvert8bit(9);
    463a:	89 e0       	ldi	r24, 0x09	; 9
    463c:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4640:	88 2f       	mov	r24, r24
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	9e 87       	std	Y+14, r25	; 0x0e
    4646:	8d 87       	std	Y+13, r24	; 0x0d
		a10=a2dConvert8bit(10);
    4648:	8a e0       	ldi	r24, 0x0A	; 10
    464a:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    464e:	88 2f       	mov	r24, r24
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	9c 87       	std	Y+12, r25	; 0x0c
    4654:	8b 87       	std	Y+11, r24	; 0x0b
		a11=a2dConvert8bit(11);
    4656:	8b e0       	ldi	r24, 0x0B	; 11
    4658:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    465c:	88 2f       	mov	r24, r24
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	9a 87       	std	Y+10, r25	; 0x0a
    4662:	89 87       	std	Y+9, r24	; 0x09
		a12=a2dConvert8bit(12);
    4664:	8c e0       	ldi	r24, 0x0C	; 12
    4666:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    466a:	88 2f       	mov	r24, r24
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	98 87       	std	Y+8, r25	; 0x08
    4670:	8f 83       	std	Y+7, r24	; 0x07
		a13=a2dConvert8bit(13);
    4672:	8d e0       	ldi	r24, 0x0D	; 13
    4674:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4678:	88 2f       	mov	r24, r24
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	9e 83       	std	Y+6, r25	; 0x06
    467e:	8d 83       	std	Y+5, r24	; 0x05
		a14=a2dConvert8bit(14);
    4680:	8e e0       	ldi	r24, 0x0E	; 14
    4682:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4686:	88 2f       	mov	r24, r24
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	9c 83       	std	Y+4, r25	; 0x04
    468c:	8b 83       	std	Y+3, r24	; 0x03
		a15=a2dConvert8bit(15);
    468e:	8f e0       	ldi	r24, 0x0F	; 15
    4690:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4694:	88 2f       	mov	r24, r24
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	9a 83       	std	Y+2, r25	; 0x02
    469a:	89 83       	std	Y+1, r24	; 0x01

		//report data, add time stamp and overflow count at end of data
		rprintf("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,get_timer2_counter());
    469c:	04 ea       	ldi	r16, 0xA4	; 164
    469e:	11 e0       	ldi	r17, 0x01	; 1
    46a0:	0e 94 b0 0b 	call	0x1760	; 0x1760 <get_timer2_counter>
    46a4:	28 2f       	mov	r18, r24
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	8d b7       	in	r24, 0x3d	; 61
    46aa:	9e b7       	in	r25, 0x3e	; 62
    46ac:	85 97       	sbiw	r24, 0x25	; 37
    46ae:	0f b6       	in	r0, 0x3f	; 63
    46b0:	f8 94       	cli
    46b2:	9e bf       	out	0x3e, r25	; 62
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	8d bf       	out	0x3d, r24	; 61
    46b8:	ed b7       	in	r30, 0x3d	; 61
    46ba:	fe b7       	in	r31, 0x3e	; 62
    46bc:	31 96       	adiw	r30, 0x01	; 1
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	80 83       	st	Z, r24
    46c2:	12 83       	std	Z+2, r17	; 0x02
    46c4:	01 83       	std	Z+1, r16	; 0x01
    46c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46c8:	98 a1       	ldd	r25, Y+32	; 0x20
    46ca:	94 83       	std	Z+4, r25	; 0x04
    46cc:	83 83       	std	Z+3, r24	; 0x03
    46ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46d2:	96 83       	std	Z+6, r25	; 0x06
    46d4:	85 83       	std	Z+5, r24	; 0x05
    46d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46da:	90 87       	std	Z+8, r25	; 0x08
    46dc:	87 83       	std	Z+7, r24	; 0x07
    46de:	89 8d       	ldd	r24, Y+25	; 0x19
    46e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46e2:	92 87       	std	Z+10, r25	; 0x0a
    46e4:	81 87       	std	Z+9, r24	; 0x09
    46e6:	8f 89       	ldd	r24, Y+23	; 0x17
    46e8:	98 8d       	ldd	r25, Y+24	; 0x18
    46ea:	94 87       	std	Z+12, r25	; 0x0c
    46ec:	83 87       	std	Z+11, r24	; 0x0b
    46ee:	8d 89       	ldd	r24, Y+21	; 0x15
    46f0:	9e 89       	ldd	r25, Y+22	; 0x16
    46f2:	96 87       	std	Z+14, r25	; 0x0e
    46f4:	85 87       	std	Z+13, r24	; 0x0d
    46f6:	8b 89       	ldd	r24, Y+19	; 0x13
    46f8:	9c 89       	ldd	r25, Y+20	; 0x14
    46fa:	90 8b       	std	Z+16, r25	; 0x10
    46fc:	87 87       	std	Z+15, r24	; 0x0f
    46fe:	89 89       	ldd	r24, Y+17	; 0x11
    4700:	9a 89       	ldd	r25, Y+18	; 0x12
    4702:	92 8b       	std	Z+18, r25	; 0x12
    4704:	81 8b       	std	Z+17, r24	; 0x11
    4706:	8f 85       	ldd	r24, Y+15	; 0x0f
    4708:	98 89       	ldd	r25, Y+16	; 0x10
    470a:	94 8b       	std	Z+20, r25	; 0x14
    470c:	83 8b       	std	Z+19, r24	; 0x13
    470e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4710:	9e 85       	ldd	r25, Y+14	; 0x0e
    4712:	96 8b       	std	Z+22, r25	; 0x16
    4714:	85 8b       	std	Z+21, r24	; 0x15
    4716:	8b 85       	ldd	r24, Y+11	; 0x0b
    4718:	9c 85       	ldd	r25, Y+12	; 0x0c
    471a:	90 8f       	std	Z+24, r25	; 0x18
    471c:	87 8b       	std	Z+23, r24	; 0x17
    471e:	89 85       	ldd	r24, Y+9	; 0x09
    4720:	9a 85       	ldd	r25, Y+10	; 0x0a
    4722:	92 8f       	std	Z+26, r25	; 0x1a
    4724:	81 8f       	std	Z+25, r24	; 0x19
    4726:	8f 81       	ldd	r24, Y+7	; 0x07
    4728:	98 85       	ldd	r25, Y+8	; 0x08
    472a:	94 8f       	std	Z+28, r25	; 0x1c
    472c:	83 8f       	std	Z+27, r24	; 0x1b
    472e:	8d 81       	ldd	r24, Y+5	; 0x05
    4730:	9e 81       	ldd	r25, Y+6	; 0x06
    4732:	96 8f       	std	Z+30, r25	; 0x1e
    4734:	85 8f       	std	Z+29, r24	; 0x1d
    4736:	8b 81       	ldd	r24, Y+3	; 0x03
    4738:	9c 81       	ldd	r25, Y+4	; 0x04
    473a:	90 a3       	std	Z+32, r25	; 0x20
    473c:	87 8f       	std	Z+31, r24	; 0x1f
    473e:	89 81       	ldd	r24, Y+1	; 0x01
    4740:	9a 81       	ldd	r25, Y+2	; 0x02
    4742:	92 a3       	std	Z+34, r25	; 0x22
    4744:	81 a3       	std	Z+33, r24	; 0x21
    4746:	34 a3       	std	Z+36, r19	; 0x24
    4748:	23 a3       	std	Z+35, r18	; 0x23
    474a:	0e 94 56 17 	call	0x2eac	; 0x2eac <rprintf1RamRom>
    474e:	8d b7       	in	r24, 0x3d	; 61
    4750:	9e b7       	in	r25, 0x3e	; 62
    4752:	85 96       	adiw	r24, 0x25	; 37
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	9e bf       	out	0x3e, r25	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	8d bf       	out	0x3d, r24	; 61
    475e:	2c cf       	rjmp	.-424    	; 0x45b8 <axon_DAQ+0x1e>

00004760 <axon_DAQ_fast>:
		}
	}

void axon_DAQ_fast(void)
	{
    4760:	df 93       	push	r29
    4762:	cf 93       	push	r28
    4764:	00 d0       	rcall	.+0      	; 0x4766 <axon_DAQ_fast+0x6>
    4766:	cd b7       	in	r28, 0x3d	; 61
    4768:	de b7       	in	r29, 0x3e	; 62
	int a9;

	//select speed/accuracy of data conversion
	a2dSetPrescaler(ADC_PRESCALE_DIV4); // configure ADC scaling
    476a:	82 e0       	ldi	r24, 0x02	; 2
    476c:	0e 94 84 01 	call	0x308	; 0x308 <a2dSetPrescaler>

	while(1)
		{
		//gather data
		a9=a2dConvert8bit(9);
    4770:	89 e0       	ldi	r24, 0x09	; 9
    4772:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4776:	88 2f       	mov	r24, r24
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	9a 83       	std	Y+2, r25	; 0x02
    477c:	89 83       	std	Y+1, r24	; 0x01

		//report data, add time stamp and overflow count at end of data
		rprintf("%d\r\n",a9);
    477e:	2c ed       	ldi	r18, 0xDC	; 220
    4780:	31 e0       	ldi	r19, 0x01	; 1
    4782:	00 d0       	rcall	.+0      	; 0x4784 <axon_DAQ_fast+0x24>
    4784:	00 d0       	rcall	.+0      	; 0x4786 <axon_DAQ_fast+0x26>
    4786:	0f 92       	push	r0
    4788:	ed b7       	in	r30, 0x3d	; 61
    478a:	fe b7       	in	r31, 0x3e	; 62
    478c:	31 96       	adiw	r30, 0x01	; 1
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	80 83       	st	Z, r24
    4792:	32 83       	std	Z+2, r19	; 0x02
    4794:	21 83       	std	Z+1, r18	; 0x01
    4796:	89 81       	ldd	r24, Y+1	; 0x01
    4798:	9a 81       	ldd	r25, Y+2	; 0x02
    479a:	94 83       	std	Z+4, r25	; 0x04
    479c:	83 83       	std	Z+3, r24	; 0x03
    479e:	0e 94 56 17 	call	0x2eac	; 0x2eac <rprintf1RamRom>
    47a2:	0f 90       	pop	r0
    47a4:	0f 90       	pop	r0
    47a6:	0f 90       	pop	r0
    47a8:	0f 90       	pop	r0
    47aa:	0f 90       	pop	r0
    47ac:	e1 cf       	rjmp	.-62     	; 0x4770 <axon_DAQ_fast+0x10>

000047ae <control>:
void test_code(void);

//enter your code in control here
//photovore is just a default sample program and can be deleted
void control(void)
	{
    47ae:	df 93       	push	r29
    47b0:	cf 93       	push	r28
    47b2:	00 d0       	rcall	.+0      	; 0x47b4 <control+0x6>
    47b4:	00 d0       	rcall	.+0      	; 0x47b6 <control+0x8>
    47b6:	cd b7       	in	r28, 0x3d	; 61
    47b8:	de b7       	in	r29, 0x3e	; 62
	//photovore();//run photovore algorithm, or comment out for your own code

	for(int x = 0; x < 10000; x++)
    47ba:	1c 82       	std	Y+4, r1	; 0x04
    47bc:	1b 82       	std	Y+3, r1	; 0x03
    47be:	07 c0       	rjmp	.+14     	; 0x47ce <control+0x20>
	{
		LED_on();
    47c0:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LED_on>
//photovore is just a default sample program and can be deleted
void control(void)
	{
	//photovore();//run photovore algorithm, or comment out for your own code

	for(int x = 0; x < 10000; x++)
    47c4:	8b 81       	ldd	r24, Y+3	; 0x03
    47c6:	9c 81       	ldd	r25, Y+4	; 0x04
    47c8:	01 96       	adiw	r24, 0x01	; 1
    47ca:	9c 83       	std	Y+4, r25	; 0x04
    47cc:	8b 83       	std	Y+3, r24	; 0x03
    47ce:	8b 81       	ldd	r24, Y+3	; 0x03
    47d0:	9c 81       	ldd	r25, Y+4	; 0x04
    47d2:	27 e2       	ldi	r18, 0x27	; 39
    47d4:	80 31       	cpi	r24, 0x10	; 16
    47d6:	92 07       	cpc	r25, r18
    47d8:	9c f3       	brlt	.-26     	; 0x47c0 <control+0x12>
	{
		LED_on();
	}

	for(int x = 0; x < 10000; x++)
    47da:	1a 82       	std	Y+2, r1	; 0x02
    47dc:	19 82       	std	Y+1, r1	; 0x01
    47de:	07 c0       	rjmp	.+14     	; 0x47ee <control+0x40>
	{
		LED_off();
    47e0:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LED_off>
	for(int x = 0; x < 10000; x++)
	{
		LED_on();
	}

	for(int x = 0; x < 10000; x++)
    47e4:	89 81       	ldd	r24, Y+1	; 0x01
    47e6:	9a 81       	ldd	r25, Y+2	; 0x02
    47e8:	01 96       	adiw	r24, 0x01	; 1
    47ea:	9a 83       	std	Y+2, r25	; 0x02
    47ec:	89 83       	std	Y+1, r24	; 0x01
    47ee:	89 81       	ldd	r24, Y+1	; 0x01
    47f0:	9a 81       	ldd	r25, Y+2	; 0x02
    47f2:	27 e2       	ldi	r18, 0x27	; 39
    47f4:	80 31       	cpi	r24, 0x10	; 16
    47f6:	92 07       	cpc	r25, r18
    47f8:	9c f3       	brlt	.-26     	; 0x47e0 <control+0x32>





	}
    47fa:	0f 90       	pop	r0
    47fc:	0f 90       	pop	r0
    47fe:	0f 90       	pop	r0
    4800:	0f 90       	pop	r0
    4802:	cf 91       	pop	r28
    4804:	df 91       	pop	r29
    4806:	08 95       	ret

00004808 <update_sensors>:

void update_sensors(void)
	{
    4808:	df 93       	push	r29
    480a:	cf 93       	push	r28
    480c:	cd b7       	in	r28, 0x3d	; 61
    480e:	de b7       	in	r29, 0x3e	; 62
	sensor_right=a2dConvert8bit(2)+auto_calib_R;
    4810:	82 e0       	ldi	r24, 0x02	; 2
    4812:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4816:	28 2f       	mov	r18, r24
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	80 91 16 05 	lds	r24, 0x0516
    481e:	90 91 17 05 	lds	r25, 0x0517
    4822:	82 0f       	add	r24, r18
    4824:	93 1f       	adc	r25, r19
    4826:	90 93 95 02 	sts	0x0295, r25
    482a:	80 93 94 02 	sts	0x0294, r24
	sensor_left=a2dConvert8bit(14)+auto_calib_L;//right sensor is off, so I fudged it . . . mmmmm fudge!
    482e:	8e e0       	ldi	r24, 0x0E	; 14
    4830:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4834:	28 2f       	mov	r18, r24
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	80 91 14 05 	lds	r24, 0x0514
    483c:	90 91 15 05 	lds	r25, 0x0515
    4840:	82 0f       	add	r24, r18
    4842:	93 1f       	adc	r25, r19
    4844:	90 93 93 02 	sts	0x0293, r25
    4848:	80 93 92 02 	sts	0x0292, r24
	}
    484c:	cf 91       	pop	r28
    484e:	df 91       	pop	r29
    4850:	08 95       	ret

00004852 <photovore>:

void photovore(void)
	{
    4852:	df 93       	push	r29
    4854:	cf 93       	push	r28
    4856:	cd b7       	in	r28, 0x3d	; 61
    4858:	de b7       	in	r29, 0x3e	; 62
    485a:	2a 97       	sbiw	r28, 0x0a	; 10
    485c:	0f b6       	in	r0, 0x3f	; 63
    485e:	f8 94       	cli
    4860:	de bf       	out	0x3e, r29	; 62
    4862:	0f be       	out	0x3f, r0	; 63
    4864:	cd bf       	out	0x3d, r28	; 61
	//initialize values
	long unsigned int wheel_left=500;
    4866:	84 ef       	ldi	r24, 0xF4	; 244
    4868:	91 e0       	ldi	r25, 0x01	; 1
    486a:	a0 e0       	ldi	r26, 0x00	; 0
    486c:	b0 e0       	ldi	r27, 0x00	; 0
    486e:	8f 83       	std	Y+7, r24	; 0x07
    4870:	98 87       	std	Y+8, r25	; 0x08
    4872:	a9 87       	std	Y+9, r26	; 0x09
    4874:	ba 87       	std	Y+10, r27	; 0x0a
	long unsigned int wheel_right=500;
    4876:	84 ef       	ldi	r24, 0xF4	; 244
    4878:	91 e0       	ldi	r25, 0x01	; 1
    487a:	a0 e0       	ldi	r26, 0x00	; 0
    487c:	b0 e0       	ldi	r27, 0x00	; 0
    487e:	8b 83       	std	Y+3, r24	; 0x03
    4880:	9c 83       	std	Y+4, r25	; 0x04
    4882:	ad 83       	std	Y+5, r26	; 0x05
    4884:	be 83       	std	Y+6, r27	; 0x06
	unsigned int threshold = 8;
    4886:	88 e0       	ldi	r24, 0x08	; 8
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	9a 83       	std	Y+2, r25	; 0x02
    488c:	89 83       	std	Y+1, r24	; 0x01

	//autocalibrate makes both start at equal values (so must start in same lighting)
	update_sensors();
    488e:	0e 94 04 24 	call	0x4808	; 0x4808 <update_sensors>
	if (sensor_left>sensor_right)
    4892:	20 91 92 02 	lds	r18, 0x0292
    4896:	30 91 93 02 	lds	r19, 0x0293
    489a:	80 91 94 02 	lds	r24, 0x0294
    489e:	90 91 95 02 	lds	r25, 0x0295
    48a2:	82 17       	cp	r24, r18
    48a4:	93 07       	cpc	r25, r19
    48a6:	88 f4       	brcc	.+34     	; 0x48ca <photovore+0x78>
		auto_calib_R=sensor_left-sensor_right;
    48a8:	20 91 92 02 	lds	r18, 0x0292
    48ac:	30 91 93 02 	lds	r19, 0x0293
    48b0:	80 91 94 02 	lds	r24, 0x0294
    48b4:	90 91 95 02 	lds	r25, 0x0295
    48b8:	a9 01       	movw	r20, r18
    48ba:	48 1b       	sub	r20, r24
    48bc:	59 0b       	sbc	r21, r25
    48be:	ca 01       	movw	r24, r20
    48c0:	90 93 17 05 	sts	0x0517, r25
    48c4:	80 93 16 05 	sts	0x0516, r24
    48c8:	10 c0       	rjmp	.+32     	; 0x48ea <photovore+0x98>
	else
		auto_calib_L=sensor_right-sensor_left;
    48ca:	20 91 94 02 	lds	r18, 0x0294
    48ce:	30 91 95 02 	lds	r19, 0x0295
    48d2:	80 91 92 02 	lds	r24, 0x0292
    48d6:	90 91 93 02 	lds	r25, 0x0293
    48da:	a9 01       	movw	r20, r18
    48dc:	48 1b       	sub	r20, r24
    48de:	59 0b       	sbc	r21, r25
    48e0:	ca 01       	movw	r24, r20
    48e2:	90 93 15 05 	sts	0x0515, r25
    48e6:	80 93 14 05 	sts	0x0514, r24
		

	while(1)
		{
		//get sensor data
		update_sensors();
    48ea:	0e 94 04 24 	call	0x4808	; 0x4808 <update_sensors>

		//detects more light on left side of robot
		if(sensor_left > sensor_right && (sensor_left - sensor_right) > threshold)
    48ee:	20 91 92 02 	lds	r18, 0x0292
    48f2:	30 91 93 02 	lds	r19, 0x0293
    48f6:	80 91 94 02 	lds	r24, 0x0294
    48fa:	90 91 95 02 	lds	r25, 0x0295
    48fe:	82 17       	cp	r24, r18
    4900:	93 07       	cpc	r25, r19
    4902:	00 f5       	brcc	.+64     	; 0x4944 <photovore+0xf2>
    4904:	20 91 92 02 	lds	r18, 0x0292
    4908:	30 91 93 02 	lds	r19, 0x0293
    490c:	80 91 94 02 	lds	r24, 0x0294
    4910:	90 91 95 02 	lds	r25, 0x0295
    4914:	28 1b       	sub	r18, r24
    4916:	39 0b       	sbc	r19, r25
    4918:	89 81       	ldd	r24, Y+1	; 0x01
    491a:	9a 81       	ldd	r25, Y+2	; 0x02
    491c:	82 17       	cp	r24, r18
    491e:	93 07       	cpc	r25, r19
    4920:	88 f4       	brcc	.+34     	; 0x4944 <photovore+0xf2>
			{//go left
	 		wheel_left=550;
    4922:	86 e2       	ldi	r24, 0x26	; 38
    4924:	92 e0       	ldi	r25, 0x02	; 2
    4926:	a0 e0       	ldi	r26, 0x00	; 0
    4928:	b0 e0       	ldi	r27, 0x00	; 0
    492a:	8f 83       	std	Y+7, r24	; 0x07
    492c:	98 87       	std	Y+8, r25	; 0x08
    492e:	a9 87       	std	Y+9, r26	; 0x09
    4930:	ba 87       	std	Y+10, r27	; 0x0a
	 		wheel_right=550;
    4932:	86 e2       	ldi	r24, 0x26	; 38
    4934:	92 e0       	ldi	r25, 0x02	; 2
    4936:	a0 e0       	ldi	r26, 0x00	; 0
    4938:	b0 e0       	ldi	r27, 0x00	; 0
    493a:	8b 83       	std	Y+3, r24	; 0x03
    493c:	9c 83       	std	Y+4, r25	; 0x04
    493e:	ad 83       	std	Y+5, r26	; 0x05
    4940:	be 83       	std	Y+6, r27	; 0x06
    4942:	3b c0       	rjmp	.+118    	; 0x49ba <photovore+0x168>
	 		}

	 	//detects more light on right side of robot
	 	else if(sensor_right > sensor_left && (sensor_right - sensor_left) > threshold)
    4944:	20 91 94 02 	lds	r18, 0x0294
    4948:	30 91 95 02 	lds	r19, 0x0295
    494c:	80 91 92 02 	lds	r24, 0x0292
    4950:	90 91 93 02 	lds	r25, 0x0293
    4954:	82 17       	cp	r24, r18
    4956:	93 07       	cpc	r25, r19
    4958:	00 f5       	brcc	.+64     	; 0x499a <photovore+0x148>
    495a:	20 91 94 02 	lds	r18, 0x0294
    495e:	30 91 95 02 	lds	r19, 0x0295
    4962:	80 91 92 02 	lds	r24, 0x0292
    4966:	90 91 93 02 	lds	r25, 0x0293
    496a:	28 1b       	sub	r18, r24
    496c:	39 0b       	sbc	r19, r25
    496e:	89 81       	ldd	r24, Y+1	; 0x01
    4970:	9a 81       	ldd	r25, Y+2	; 0x02
    4972:	82 17       	cp	r24, r18
    4974:	93 07       	cpc	r25, r19
    4976:	88 f4       	brcc	.+34     	; 0x499a <photovore+0x148>
			{//go right
			wheel_left=850;
    4978:	82 e5       	ldi	r24, 0x52	; 82
    497a:	93 e0       	ldi	r25, 0x03	; 3
    497c:	a0 e0       	ldi	r26, 0x00	; 0
    497e:	b0 e0       	ldi	r27, 0x00	; 0
    4980:	8f 83       	std	Y+7, r24	; 0x07
    4982:	98 87       	std	Y+8, r25	; 0x08
    4984:	a9 87       	std	Y+9, r26	; 0x09
    4986:	ba 87       	std	Y+10, r27	; 0x0a
			wheel_right=850;
    4988:	82 e5       	ldi	r24, 0x52	; 82
    498a:	93 e0       	ldi	r25, 0x03	; 3
    498c:	a0 e0       	ldi	r26, 0x00	; 0
    498e:	b0 e0       	ldi	r27, 0x00	; 0
    4990:	8b 83       	std	Y+3, r24	; 0x03
    4992:	9c 83       	std	Y+4, r25	; 0x04
    4994:	ad 83       	std	Y+5, r26	; 0x05
    4996:	be 83       	std	Y+6, r27	; 0x06
    4998:	10 c0       	rjmp	.+32     	; 0x49ba <photovore+0x168>
			}

	 	//light is about equal on both sides
		else
			{//go straight
			wheel_left=600;
    499a:	88 e5       	ldi	r24, 0x58	; 88
    499c:	92 e0       	ldi	r25, 0x02	; 2
    499e:	a0 e0       	ldi	r26, 0x00	; 0
    49a0:	b0 e0       	ldi	r27, 0x00	; 0
    49a2:	8f 83       	std	Y+7, r24	; 0x07
    49a4:	98 87       	std	Y+8, r25	; 0x08
    49a6:	a9 87       	std	Y+9, r26	; 0x09
    49a8:	ba 87       	std	Y+10, r27	; 0x0a
			wheel_right=800;
    49aa:	80 e2       	ldi	r24, 0x20	; 32
    49ac:	93 e0       	ldi	r25, 0x03	; 3
    49ae:	a0 e0       	ldi	r26, 0x00	; 0
    49b0:	b0 e0       	ldi	r27, 0x00	; 0
    49b2:	8b 83       	std	Y+3, r24	; 0x03
    49b4:	9c 83       	std	Y+4, r25	; 0x04
    49b6:	ad 83       	std	Y+5, r26	; 0x05
    49b8:	be 83       	std	Y+6, r27	; 0x06
	 		}
 
		//output data to USB (use hyperterminal to view it)
		rprintf("L_Sensor=%d, L_wheel=%d%d, R_Sensor=%d, R_wheel=%d%d\r\n",sensor_left, wheel_left, sensor_right, wheel_right);
    49ba:	21 ee       	ldi	r18, 0xE1	; 225
    49bc:	31 e0       	ldi	r19, 0x01	; 1
    49be:	40 91 92 02 	lds	r20, 0x0292
    49c2:	50 91 93 02 	lds	r21, 0x0293
    49c6:	60 91 94 02 	lds	r22, 0x0294
    49ca:	70 91 95 02 	lds	r23, 0x0295
    49ce:	8d b7       	in	r24, 0x3d	; 61
    49d0:	9e b7       	in	r25, 0x3e	; 62
    49d2:	0f 97       	sbiw	r24, 0x0f	; 15
    49d4:	0f b6       	in	r0, 0x3f	; 63
    49d6:	f8 94       	cli
    49d8:	9e bf       	out	0x3e, r25	; 62
    49da:	0f be       	out	0x3f, r0	; 63
    49dc:	8d bf       	out	0x3d, r24	; 61
    49de:	ed b7       	in	r30, 0x3d	; 61
    49e0:	fe b7       	in	r31, 0x3e	; 62
    49e2:	31 96       	adiw	r30, 0x01	; 1
    49e4:	81 e0       	ldi	r24, 0x01	; 1
    49e6:	80 83       	st	Z, r24
    49e8:	32 83       	std	Z+2, r19	; 0x02
    49ea:	21 83       	std	Z+1, r18	; 0x01
    49ec:	54 83       	std	Z+4, r21	; 0x04
    49ee:	43 83       	std	Z+3, r20	; 0x03
    49f0:	8f 81       	ldd	r24, Y+7	; 0x07
    49f2:	98 85       	ldd	r25, Y+8	; 0x08
    49f4:	a9 85       	ldd	r26, Y+9	; 0x09
    49f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    49f8:	85 83       	std	Z+5, r24	; 0x05
    49fa:	96 83       	std	Z+6, r25	; 0x06
    49fc:	a7 83       	std	Z+7, r26	; 0x07
    49fe:	b0 87       	std	Z+8, r27	; 0x08
    4a00:	72 87       	std	Z+10, r23	; 0x0a
    4a02:	61 87       	std	Z+9, r22	; 0x09
    4a04:	8b 81       	ldd	r24, Y+3	; 0x03
    4a06:	9c 81       	ldd	r25, Y+4	; 0x04
    4a08:	ad 81       	ldd	r26, Y+5	; 0x05
    4a0a:	be 81       	ldd	r27, Y+6	; 0x06
    4a0c:	83 87       	std	Z+11, r24	; 0x0b
    4a0e:	94 87       	std	Z+12, r25	; 0x0c
    4a10:	a5 87       	std	Z+13, r26	; 0x0d
    4a12:	b6 87       	std	Z+14, r27	; 0x0e
    4a14:	0e 94 56 17 	call	0x2eac	; 0x2eac <rprintf1RamRom>
    4a18:	4d b7       	in	r20, 0x3d	; 61
    4a1a:	5e b7       	in	r21, 0x3e	; 62
    4a1c:	41 5f       	subi	r20, 0xF1	; 241
    4a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a20:	0f b6       	in	r0, 0x3f	; 63
    4a22:	f8 94       	cli
    4a24:	5e bf       	out	0x3e, r21	; 62
    4a26:	0f be       	out	0x3f, r0	; 63
    4a28:	4d bf       	out	0x3d, r20	; 61

		//command servos
		wheel_left(wheel_left);
    4a2a:	ae e2       	ldi	r26, 0x2E	; 46
    4a2c:	b0 e0       	ldi	r27, 0x00	; 0
    4a2e:	ee e2       	ldi	r30, 0x2E	; 46
    4a30:	f0 e0       	ldi	r31, 0x00	; 0
    4a32:	80 81       	ld	r24, Z
    4a34:	80 64       	ori	r24, 0x40	; 64
    4a36:	8c 93       	st	X, r24
    4a38:	8f 81       	ldd	r24, Y+7	; 0x07
    4a3a:	98 85       	ldd	r25, Y+8	; 0x08
    4a3c:	a9 85       	ldd	r26, Y+9	; 0x09
    4a3e:	ba 85       	ldd	r27, Y+10	; 0x0a
    4a40:	bc 01       	movw	r22, r24
    4a42:	cd 01       	movw	r24, r26
    4a44:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>
    4a48:	ae e2       	ldi	r26, 0x2E	; 46
    4a4a:	b0 e0       	ldi	r27, 0x00	; 0
    4a4c:	ee e2       	ldi	r30, 0x2E	; 46
    4a4e:	f0 e0       	ldi	r31, 0x00	; 0
    4a50:	80 81       	ld	r24, Z
    4a52:	8f 7b       	andi	r24, 0xBF	; 191
    4a54:	8c 93       	st	X, r24
		wheel_right(wheel_right);
    4a56:	a8 e2       	ldi	r26, 0x28	; 40
    4a58:	b0 e0       	ldi	r27, 0x00	; 0
    4a5a:	e8 e2       	ldi	r30, 0x28	; 40
    4a5c:	f0 e0       	ldi	r31, 0x00	; 0
    4a5e:	80 81       	ld	r24, Z
    4a60:	80 68       	ori	r24, 0x80	; 128
    4a62:	8c 93       	st	X, r24
    4a64:	8b 81       	ldd	r24, Y+3	; 0x03
    4a66:	9c 81       	ldd	r25, Y+4	; 0x04
    4a68:	ad 81       	ldd	r26, Y+5	; 0x05
    4a6a:	be 81       	ldd	r27, Y+6	; 0x06
    4a6c:	bc 01       	movw	r22, r24
    4a6e:	cd 01       	movw	r24, r26
    4a70:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>
    4a74:	a8 e2       	ldi	r26, 0x28	; 40
    4a76:	b0 e0       	ldi	r27, 0x00	; 0
    4a78:	e8 e2       	ldi	r30, 0x28	; 40
    4a7a:	f0 e0       	ldi	r31, 0x00	; 0
    4a7c:	80 81       	ld	r24, Z
    4a7e:	8f 77       	andi	r24, 0x7F	; 127
    4a80:	8c 93       	st	X, r24
    4a82:	33 cf       	rjmp	.-410    	; 0x48ea <photovore+0x98>

00004a84 <main>:
//#include "axon_test.c" //include this is doing a function test for the Axon
//#include "axon_oscope_test.c" //include this is doing a function test for the Axon


int main(void)
	{
    4a84:	df 93       	push	r29
    4a86:	cf 93       	push	r28
    4a88:	00 d0       	rcall	.+0      	; 0x4a8a <main+0x6>
    4a8a:	00 d0       	rcall	.+0      	; 0x4a8c <main+0x8>
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
	//declare variables here
	int i=0;//useless variable
    4a90:	1c 82       	std	Y+4, r1	; 0x04
    4a92:	1b 82       	std	Y+3, r1	; 0x03
	int j=0;//useless variable
    4a94:	1a 82       	std	Y+2, r1	; 0x02
    4a96:	19 82       	std	Y+1, r1	; 0x01

	//add 1.7s delay for potential power issues
	delay_cycles(65535);
    4a98:	6f ef       	ldi	r22, 0xFF	; 255
    4a9a:	7f ef       	ldi	r23, 0xFF	; 255
    4a9c:	80 e0       	ldi	r24, 0x00	; 0
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>
	delay_cycles(65535);
    4aa4:	6f ef       	ldi	r22, 0xFF	; 255
    4aa6:	7f ef       	ldi	r23, 0xFF	; 255
    4aa8:	80 e0       	ldi	r24, 0x00	; 0
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>
	delay_cycles(65535);
    4ab0:	6f ef       	ldi	r22, 0xFF	; 255
    4ab2:	7f ef       	ldi	r23, 0xFF	; 255
    4ab4:	80 e0       	ldi	r24, 0x00	; 0
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>
	delay_cycles(65535);
    4abc:	6f ef       	ldi	r22, 0xFF	; 255
    4abe:	7f ef       	ldi	r23, 0xFF	; 255
    4ac0:	80 e0       	ldi	r24, 0x00	; 0
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>
	delay_cycles(65535);
    4ac8:	6f ef       	ldi	r22, 0xFF	; 255
    4aca:	7f ef       	ldi	r23, 0xFF	; 255
    4acc:	80 e0       	ldi	r24, 0x00	; 0
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>
	delay_cycles(65535);
    4ad4:	6f ef       	ldi	r22, 0xFF	; 255
    4ad6:	7f ef       	ldi	r23, 0xFF	; 255
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>
	delay_cycles(65535);
    4ae0:	6f ef       	ldi	r22, 0xFF	; 255
    4ae2:	7f ef       	ldi	r23, 0xFF	; 255
    4ae4:	80 e0       	ldi	r24, 0x00	; 0
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>

	/****************INITIALIZATIONS*******************/
	//other stuff Im experimenting with for SoR
	uartInit();  // initialize the UART (serial port)
    4aec:	0e 94 1a 04 	call	0x834	; 0x834 <uartInit>
    uartSetBaudRate(0, 38400); // set UARTE speed, for Bluetooth
    4af0:	80 e0       	ldi	r24, 0x00	; 0
    4af2:	40 e0       	ldi	r20, 0x00	; 0
    4af4:	56 e9       	ldi	r21, 0x96	; 150
    4af6:	60 e0       	ldi	r22, 0x00	; 0
    4af8:	70 e0       	ldi	r23, 0x00	; 0
    4afa:	0e 94 33 05 	call	0xa66	; 0xa66 <uartSetBaudRate>
    uartSetBaudRate(1, 115200); // set UARTD speed, for USB connection, up to 500k, try 115200 if it doesn't work
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	40 e0       	ldi	r20, 0x00	; 0
    4b02:	52 ec       	ldi	r21, 0xC2	; 194
    4b04:	61 e0       	ldi	r22, 0x01	; 1
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	0e 94 33 05 	call	0xa66	; 0xa66 <uartSetBaudRate>
    uartSetBaudRate(2, 38400); // set UARTH speed
    4b0c:	82 e0       	ldi	r24, 0x02	; 2
    4b0e:	40 e0       	ldi	r20, 0x00	; 0
    4b10:	56 e9       	ldi	r21, 0x96	; 150
    4b12:	60 e0       	ldi	r22, 0x00	; 0
    4b14:	70 e0       	ldi	r23, 0x00	; 0
    4b16:	0e 94 33 05 	call	0xa66	; 0xa66 <uartSetBaudRate>
    uartSetBaudRate(3, 38400); // set UARTJ speed, for Blackfin
    4b1a:	83 e0       	ldi	r24, 0x03	; 3
    4b1c:	40 e0       	ldi	r20, 0x00	; 0
    4b1e:	56 e9       	ldi	r21, 0x96	; 150
    4b20:	60 e0       	ldi	r22, 0x00	; 0
    4b22:	70 e0       	ldi	r23, 0x00	; 0
    4b24:	0e 94 33 05 	call	0xa66	; 0xa66 <uartSetBaudRate>
	//G=Ground, T=Tx (connect to external Rx), R=Rx (connect to external Tx)

	rprintfInit(uart1SendByte);// initialize rprintf system and configure uart1 (USB) for rprintf
    4b28:	8b e4       	ldi	r24, 0x4B	; 75
    4b2a:	96 e0       	ldi	r25, 0x06	; 6
    4b2c:	0e 94 ba 13 	call	0x2774	; 0x2774 <rprintfInit>

	configure_ports(); // configure which ports are analog, digital, etc.
    4b30:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <configure_ports>

	LED_on();
    4b34:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LED_on>

	rprintf("\r\nSystem Warmed Up");
    4b38:	25 e3       	ldi	r18, 0x35	; 53
    4b3a:	32 e0       	ldi	r19, 0x02	; 2
    4b3c:	00 d0       	rcall	.+0      	; 0x4b3e <main+0xba>
    4b3e:	0f 92       	push	r0
    4b40:	ed b7       	in	r30, 0x3d	; 61
    4b42:	fe b7       	in	r31, 0x3e	; 62
    4b44:	31 96       	adiw	r30, 0x01	; 1
    4b46:	81 e0       	ldi	r24, 0x01	; 1
    4b48:	80 83       	st	Z, r24
    4b4a:	32 83       	std	Z+2, r19	; 0x02
    4b4c:	21 83       	std	Z+1, r18	; 0x01
    4b4e:	0e 94 56 17 	call	0x2eac	; 0x2eac <rprintf1RamRom>
    4b52:	0f 90       	pop	r0
    4b54:	0f 90       	pop	r0
    4b56:	0f 90       	pop	r0

	// initialize the timer system
 	init_timer0(TIMER_CLK_1024);
    4b58:	85 e0       	ldi	r24, 0x05	; 5
    4b5a:	0e 94 91 0c 	call	0x1922	; 0x1922 <init_timer0>
 	init_timer1(TIMER_CLK_64);
    4b5e:	83 e0       	ldi	r24, 0x03	; 3
    4b60:	0e 94 a5 0c 	call	0x194a	; 0x194a <init_timer1>
 	init_timer2(TIMER2_CLK_64);
    4b64:	84 e0       	ldi	r24, 0x04	; 4
    4b66:	0e 94 b9 0c 	call	0x1972	; 0x1972 <init_timer2>
 	init_timer3(TIMER_CLK_64);
    4b6a:	83 e0       	ldi	r24, 0x03	; 3
    4b6c:	0e 94 cd 0c 	call	0x199a	; 0x199a <init_timer3>
 	init_timer4(TIMER_CLK_64);
    4b70:	83 e0       	ldi	r24, 0x03	; 3
    4b72:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <init_timer4>
 	init_timer5(TIMER_CLK_64);
    4b76:	83 e0       	ldi	r24, 0x03	; 3
    4b78:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <init_timer5>

	a2dInit(); // initialize analog to digital converter (ADC)
    4b7c:	0e 94 43 01 	call	0x286	; 0x286 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
    4b80:	85 e0       	ldi	r24, 0x05	; 5
    4b82:	0e 94 84 01 	call	0x308	; 0x308 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	0e 94 98 01 	call	0x330	; 0x330 <a2dSetReference>

	//let system stabelize for X time
	for(i=0;i<16;i++)
    4b8c:	1c 82       	std	Y+4, r1	; 0x04
    4b8e:	1b 82       	std	Y+3, r1	; 0x03
    4b90:	22 c0       	rjmp	.+68     	; 0x4bd6 <main+0x152>
		{
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
    4b92:	8b 81       	ldd	r24, Y+3	; 0x03
    4b94:	0e 94 30 02 	call	0x460	; 0x460 <a2dConvert8bit>
    4b98:	88 2f       	mov	r24, r24
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	9a 83       	std	Y+2, r25	; 0x02
    4b9e:	89 83       	std	Y+1, r24	; 0x01
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
    4ba0:	68 e8       	ldi	r22, 0x88	; 136
    4ba2:	73 e1       	ldi	r23, 0x13	; 19
    4ba4:	80 e0       	ldi	r24, 0x00	; 0
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>
		rprintf(".");
    4bac:	23 e3       	ldi	r18, 0x33	; 51
    4bae:	32 e0       	ldi	r19, 0x02	; 2
    4bb0:	00 d0       	rcall	.+0      	; 0x4bb2 <main+0x12e>
    4bb2:	0f 92       	push	r0
    4bb4:	ed b7       	in	r30, 0x3d	; 61
    4bb6:	fe b7       	in	r31, 0x3e	; 62
    4bb8:	31 96       	adiw	r30, 0x01	; 1
    4bba:	81 e0       	ldi	r24, 0x01	; 1
    4bbc:	80 83       	st	Z, r24
    4bbe:	32 83       	std	Z+2, r19	; 0x02
    4bc0:	21 83       	std	Z+1, r18	; 0x01
    4bc2:	0e 94 56 17 	call	0x2eac	; 0x2eac <rprintf1RamRom>
    4bc6:	0f 90       	pop	r0
    4bc8:	0f 90       	pop	r0
    4bca:	0f 90       	pop	r0
	a2dInit(); // initialize analog to digital converter (ADC)
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage

	//let system stabelize for X time
	for(i=0;i<16;i++)
    4bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bce:	9c 81       	ldd	r25, Y+4	; 0x04
    4bd0:	01 96       	adiw	r24, 0x01	; 1
    4bd2:	9c 83       	std	Y+4, r25	; 0x04
    4bd4:	8b 83       	std	Y+3, r24	; 0x03
    4bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    4bda:	80 31       	cpi	r24, 0x10	; 16
    4bdc:	91 05       	cpc	r25, r1
    4bde:	cc f2       	brlt	.-78     	; 0x4b92 <main+0x10e>
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
		rprintf(".");
		}

	LED_off();
    4be0:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LED_off>

	rprintf("Initialization Complete \r\n");
    4be4:	88 e1       	ldi	r24, 0x18	; 24
    4be6:	92 e0       	ldi	r25, 0x02	; 2
    4be8:	00 d0       	rcall	.+0      	; 0x4bea <main+0x166>
    4bea:	0f 92       	push	r0
    4bec:	ed b7       	in	r30, 0x3d	; 61
    4bee:	fe b7       	in	r31, 0x3e	; 62
    4bf0:	31 96       	adiw	r30, 0x01	; 1
    4bf2:	21 e0       	ldi	r18, 0x01	; 1
    4bf4:	20 83       	st	Z, r18
    4bf6:	92 83       	std	Z+2, r25	; 0x02
    4bf8:	81 83       	std	Z+1, r24	; 0x01
    4bfa:	0e 94 56 17 	call	0x2eac	; 0x2eac <rprintf1RamRom>
    4bfe:	0f 90       	pop	r0
    4c00:	0f 90       	pop	r0
    4c02:	0f 90       	pop	r0
//}
	
	/*********ADD YOUR CODE BELOW THIS LINE **********/

	//wait until user pushes button
	while(!button_pressed());
    4c04:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <button_pressed>
    4c08:	00 97       	sbiw	r24, 0x00	; 0
    4c0a:	e1 f3       	breq	.-8      	; 0x4c04 <main+0x180>

	//reset all timers to zero
	reset_timer0();
    4c0c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <reset_timer0>
	reset_timer1();
    4c10:	0e 94 ed 0b 	call	0x17da	; 0x17da <reset_timer1>
	reset_timer2();
    4c14:	0e 94 00 0c 	call	0x1800	; 0x1800 <reset_timer2>
	reset_timer3();
    4c18:	0e 94 12 0c 	call	0x1824	; 0x1824 <reset_timer3>
	reset_timer4();
    4c1c:	0e 94 25 0c 	call	0x184a	; 0x184a <reset_timer4>
	reset_timer5();
    4c20:	0e 94 38 0c 	call	0x1870	; 0x1870 <reset_timer5>

	while(1)
		{
		control();//uncomment this for your code (and use control.c only to program)
    4c24:	0e 94 d7 23 	call	0x47ae	; 0x47ae <control>
PWM_timer4_Off_H3();
PWM_timer4_Off_H4();
PWM_timer4_Off_H5();
delay_ms(1000);
*/
		delay_cycles(100);//an optional small delay to prevent crazy oscillations
    4c28:	64 e6       	ldi	r22, 0x64	; 100
    4c2a:	70 e0       	ldi	r23, 0x00	; 0
    4c2c:	80 e0       	ldi	r24, 0x00	; 0
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	0e 94 77 1d 	call	0x3aee	; 0x3aee <delay_cycles>
    4c34:	f7 cf       	rjmp	.-18     	; 0x4c24 <main+0x1a0>

00004c36 <__subsf3>:
    4c36:	50 58       	subi	r21, 0x80	; 128

00004c38 <__addsf3>:
    4c38:	bb 27       	eor	r27, r27
    4c3a:	aa 27       	eor	r26, r26
    4c3c:	0e d0       	rcall	.+28     	; 0x4c5a <__addsf3x>
    4c3e:	75 c1       	rjmp	.+746    	; 0x4f2a <__fp_round>
    4c40:	66 d1       	rcall	.+716    	; 0x4f0e <__fp_pscA>
    4c42:	30 f0       	brcs	.+12     	; 0x4c50 <__addsf3+0x18>
    4c44:	6b d1       	rcall	.+726    	; 0x4f1c <__fp_pscB>
    4c46:	20 f0       	brcs	.+8      	; 0x4c50 <__addsf3+0x18>
    4c48:	31 f4       	brne	.+12     	; 0x4c56 <__addsf3+0x1e>
    4c4a:	9f 3f       	cpi	r25, 0xFF	; 255
    4c4c:	11 f4       	brne	.+4      	; 0x4c52 <__addsf3+0x1a>
    4c4e:	1e f4       	brtc	.+6      	; 0x4c56 <__addsf3+0x1e>
    4c50:	5b c1       	rjmp	.+694    	; 0x4f08 <__fp_nan>
    4c52:	0e f4       	brtc	.+2      	; 0x4c56 <__addsf3+0x1e>
    4c54:	e0 95       	com	r30
    4c56:	e7 fb       	bst	r30, 7
    4c58:	51 c1       	rjmp	.+674    	; 0x4efc <__fp_inf>

00004c5a <__addsf3x>:
    4c5a:	e9 2f       	mov	r30, r25
    4c5c:	77 d1       	rcall	.+750    	; 0x4f4c <__fp_split3>
    4c5e:	80 f3       	brcs	.-32     	; 0x4c40 <__addsf3+0x8>
    4c60:	ba 17       	cp	r27, r26
    4c62:	62 07       	cpc	r22, r18
    4c64:	73 07       	cpc	r23, r19
    4c66:	84 07       	cpc	r24, r20
    4c68:	95 07       	cpc	r25, r21
    4c6a:	18 f0       	brcs	.+6      	; 0x4c72 <__addsf3x+0x18>
    4c6c:	71 f4       	brne	.+28     	; 0x4c8a <__addsf3x+0x30>
    4c6e:	9e f5       	brtc	.+102    	; 0x4cd6 <__addsf3x+0x7c>
    4c70:	8f c1       	rjmp	.+798    	; 0x4f90 <__fp_zero>
    4c72:	0e f4       	brtc	.+2      	; 0x4c76 <__addsf3x+0x1c>
    4c74:	e0 95       	com	r30
    4c76:	0b 2e       	mov	r0, r27
    4c78:	ba 2f       	mov	r27, r26
    4c7a:	a0 2d       	mov	r26, r0
    4c7c:	0b 01       	movw	r0, r22
    4c7e:	b9 01       	movw	r22, r18
    4c80:	90 01       	movw	r18, r0
    4c82:	0c 01       	movw	r0, r24
    4c84:	ca 01       	movw	r24, r20
    4c86:	a0 01       	movw	r20, r0
    4c88:	11 24       	eor	r1, r1
    4c8a:	ff 27       	eor	r31, r31
    4c8c:	59 1b       	sub	r21, r25
    4c8e:	99 f0       	breq	.+38     	; 0x4cb6 <__addsf3x+0x5c>
    4c90:	59 3f       	cpi	r21, 0xF9	; 249
    4c92:	50 f4       	brcc	.+20     	; 0x4ca8 <__addsf3x+0x4e>
    4c94:	50 3e       	cpi	r21, 0xE0	; 224
    4c96:	68 f1       	brcs	.+90     	; 0x4cf2 <__addsf3x+0x98>
    4c98:	1a 16       	cp	r1, r26
    4c9a:	f0 40       	sbci	r31, 0x00	; 0
    4c9c:	a2 2f       	mov	r26, r18
    4c9e:	23 2f       	mov	r18, r19
    4ca0:	34 2f       	mov	r19, r20
    4ca2:	44 27       	eor	r20, r20
    4ca4:	58 5f       	subi	r21, 0xF8	; 248
    4ca6:	f3 cf       	rjmp	.-26     	; 0x4c8e <__addsf3x+0x34>
    4ca8:	46 95       	lsr	r20
    4caa:	37 95       	ror	r19
    4cac:	27 95       	ror	r18
    4cae:	a7 95       	ror	r26
    4cb0:	f0 40       	sbci	r31, 0x00	; 0
    4cb2:	53 95       	inc	r21
    4cb4:	c9 f7       	brne	.-14     	; 0x4ca8 <__addsf3x+0x4e>
    4cb6:	7e f4       	brtc	.+30     	; 0x4cd6 <__addsf3x+0x7c>
    4cb8:	1f 16       	cp	r1, r31
    4cba:	ba 0b       	sbc	r27, r26
    4cbc:	62 0b       	sbc	r22, r18
    4cbe:	73 0b       	sbc	r23, r19
    4cc0:	84 0b       	sbc	r24, r20
    4cc2:	ba f0       	brmi	.+46     	; 0x4cf2 <__addsf3x+0x98>
    4cc4:	91 50       	subi	r25, 0x01	; 1
    4cc6:	a1 f0       	breq	.+40     	; 0x4cf0 <__addsf3x+0x96>
    4cc8:	ff 0f       	add	r31, r31
    4cca:	bb 1f       	adc	r27, r27
    4ccc:	66 1f       	adc	r22, r22
    4cce:	77 1f       	adc	r23, r23
    4cd0:	88 1f       	adc	r24, r24
    4cd2:	c2 f7       	brpl	.-16     	; 0x4cc4 <__addsf3x+0x6a>
    4cd4:	0e c0       	rjmp	.+28     	; 0x4cf2 <__addsf3x+0x98>
    4cd6:	ba 0f       	add	r27, r26
    4cd8:	62 1f       	adc	r22, r18
    4cda:	73 1f       	adc	r23, r19
    4cdc:	84 1f       	adc	r24, r20
    4cde:	48 f4       	brcc	.+18     	; 0x4cf2 <__addsf3x+0x98>
    4ce0:	87 95       	ror	r24
    4ce2:	77 95       	ror	r23
    4ce4:	67 95       	ror	r22
    4ce6:	b7 95       	ror	r27
    4ce8:	f7 95       	ror	r31
    4cea:	9e 3f       	cpi	r25, 0xFE	; 254
    4cec:	08 f0       	brcs	.+2      	; 0x4cf0 <__addsf3x+0x96>
    4cee:	b3 cf       	rjmp	.-154    	; 0x4c56 <__addsf3+0x1e>
    4cf0:	93 95       	inc	r25
    4cf2:	88 0f       	add	r24, r24
    4cf4:	08 f0       	brcs	.+2      	; 0x4cf8 <__addsf3x+0x9e>
    4cf6:	99 27       	eor	r25, r25
    4cf8:	ee 0f       	add	r30, r30
    4cfa:	97 95       	ror	r25
    4cfc:	87 95       	ror	r24
    4cfe:	08 95       	ret

00004d00 <__cmpsf2>:
    4d00:	d9 d0       	rcall	.+434    	; 0x4eb4 <__fp_cmp>
    4d02:	08 f4       	brcc	.+2      	; 0x4d06 <__cmpsf2+0x6>
    4d04:	81 e0       	ldi	r24, 0x01	; 1
    4d06:	08 95       	ret

00004d08 <__divsf3>:
    4d08:	0c d0       	rcall	.+24     	; 0x4d22 <__divsf3x>
    4d0a:	0f c1       	rjmp	.+542    	; 0x4f2a <__fp_round>
    4d0c:	07 d1       	rcall	.+526    	; 0x4f1c <__fp_pscB>
    4d0e:	40 f0       	brcs	.+16     	; 0x4d20 <__divsf3+0x18>
    4d10:	fe d0       	rcall	.+508    	; 0x4f0e <__fp_pscA>
    4d12:	30 f0       	brcs	.+12     	; 0x4d20 <__divsf3+0x18>
    4d14:	21 f4       	brne	.+8      	; 0x4d1e <__divsf3+0x16>
    4d16:	5f 3f       	cpi	r21, 0xFF	; 255
    4d18:	19 f0       	breq	.+6      	; 0x4d20 <__divsf3+0x18>
    4d1a:	f0 c0       	rjmp	.+480    	; 0x4efc <__fp_inf>
    4d1c:	51 11       	cpse	r21, r1
    4d1e:	39 c1       	rjmp	.+626    	; 0x4f92 <__fp_szero>
    4d20:	f3 c0       	rjmp	.+486    	; 0x4f08 <__fp_nan>

00004d22 <__divsf3x>:
    4d22:	14 d1       	rcall	.+552    	; 0x4f4c <__fp_split3>
    4d24:	98 f3       	brcs	.-26     	; 0x4d0c <__divsf3+0x4>

00004d26 <__divsf3_pse>:
    4d26:	99 23       	and	r25, r25
    4d28:	c9 f3       	breq	.-14     	; 0x4d1c <__divsf3+0x14>
    4d2a:	55 23       	and	r21, r21
    4d2c:	b1 f3       	breq	.-20     	; 0x4d1a <__divsf3+0x12>
    4d2e:	95 1b       	sub	r25, r21
    4d30:	55 0b       	sbc	r21, r21
    4d32:	bb 27       	eor	r27, r27
    4d34:	aa 27       	eor	r26, r26
    4d36:	62 17       	cp	r22, r18
    4d38:	73 07       	cpc	r23, r19
    4d3a:	84 07       	cpc	r24, r20
    4d3c:	38 f0       	brcs	.+14     	; 0x4d4c <__divsf3_pse+0x26>
    4d3e:	9f 5f       	subi	r25, 0xFF	; 255
    4d40:	5f 4f       	sbci	r21, 0xFF	; 255
    4d42:	22 0f       	add	r18, r18
    4d44:	33 1f       	adc	r19, r19
    4d46:	44 1f       	adc	r20, r20
    4d48:	aa 1f       	adc	r26, r26
    4d4a:	a9 f3       	breq	.-22     	; 0x4d36 <__divsf3_pse+0x10>
    4d4c:	33 d0       	rcall	.+102    	; 0x4db4 <__divsf3_pse+0x8e>
    4d4e:	0e 2e       	mov	r0, r30
    4d50:	3a f0       	brmi	.+14     	; 0x4d60 <__divsf3_pse+0x3a>
    4d52:	e0 e8       	ldi	r30, 0x80	; 128
    4d54:	30 d0       	rcall	.+96     	; 0x4db6 <__divsf3_pse+0x90>
    4d56:	91 50       	subi	r25, 0x01	; 1
    4d58:	50 40       	sbci	r21, 0x00	; 0
    4d5a:	e6 95       	lsr	r30
    4d5c:	00 1c       	adc	r0, r0
    4d5e:	ca f7       	brpl	.-14     	; 0x4d52 <__divsf3_pse+0x2c>
    4d60:	29 d0       	rcall	.+82     	; 0x4db4 <__divsf3_pse+0x8e>
    4d62:	fe 2f       	mov	r31, r30
    4d64:	27 d0       	rcall	.+78     	; 0x4db4 <__divsf3_pse+0x8e>
    4d66:	66 0f       	add	r22, r22
    4d68:	77 1f       	adc	r23, r23
    4d6a:	88 1f       	adc	r24, r24
    4d6c:	bb 1f       	adc	r27, r27
    4d6e:	26 17       	cp	r18, r22
    4d70:	37 07       	cpc	r19, r23
    4d72:	48 07       	cpc	r20, r24
    4d74:	ab 07       	cpc	r26, r27
    4d76:	b0 e8       	ldi	r27, 0x80	; 128
    4d78:	09 f0       	breq	.+2      	; 0x4d7c <__divsf3_pse+0x56>
    4d7a:	bb 0b       	sbc	r27, r27
    4d7c:	80 2d       	mov	r24, r0
    4d7e:	bf 01       	movw	r22, r30
    4d80:	ff 27       	eor	r31, r31
    4d82:	93 58       	subi	r25, 0x83	; 131
    4d84:	5f 4f       	sbci	r21, 0xFF	; 255
    4d86:	2a f0       	brmi	.+10     	; 0x4d92 <__divsf3_pse+0x6c>
    4d88:	9e 3f       	cpi	r25, 0xFE	; 254
    4d8a:	51 05       	cpc	r21, r1
    4d8c:	68 f0       	brcs	.+26     	; 0x4da8 <__divsf3_pse+0x82>
    4d8e:	b6 c0       	rjmp	.+364    	; 0x4efc <__fp_inf>
    4d90:	00 c1       	rjmp	.+512    	; 0x4f92 <__fp_szero>
    4d92:	5f 3f       	cpi	r21, 0xFF	; 255
    4d94:	ec f3       	brlt	.-6      	; 0x4d90 <__divsf3_pse+0x6a>
    4d96:	98 3e       	cpi	r25, 0xE8	; 232
    4d98:	dc f3       	brlt	.-10     	; 0x4d90 <__divsf3_pse+0x6a>
    4d9a:	86 95       	lsr	r24
    4d9c:	77 95       	ror	r23
    4d9e:	67 95       	ror	r22
    4da0:	b7 95       	ror	r27
    4da2:	f7 95       	ror	r31
    4da4:	9f 5f       	subi	r25, 0xFF	; 255
    4da6:	c9 f7       	brne	.-14     	; 0x4d9a <__divsf3_pse+0x74>
    4da8:	88 0f       	add	r24, r24
    4daa:	91 1d       	adc	r25, r1
    4dac:	96 95       	lsr	r25
    4dae:	87 95       	ror	r24
    4db0:	97 f9       	bld	r25, 7
    4db2:	08 95       	ret
    4db4:	e1 e0       	ldi	r30, 0x01	; 1
    4db6:	66 0f       	add	r22, r22
    4db8:	77 1f       	adc	r23, r23
    4dba:	88 1f       	adc	r24, r24
    4dbc:	bb 1f       	adc	r27, r27
    4dbe:	62 17       	cp	r22, r18
    4dc0:	73 07       	cpc	r23, r19
    4dc2:	84 07       	cpc	r24, r20
    4dc4:	ba 07       	cpc	r27, r26
    4dc6:	20 f0       	brcs	.+8      	; 0x4dd0 <__divsf3_pse+0xaa>
    4dc8:	62 1b       	sub	r22, r18
    4dca:	73 0b       	sbc	r23, r19
    4dcc:	84 0b       	sbc	r24, r20
    4dce:	ba 0b       	sbc	r27, r26
    4dd0:	ee 1f       	adc	r30, r30
    4dd2:	88 f7       	brcc	.-30     	; 0x4db6 <__divsf3_pse+0x90>
    4dd4:	e0 95       	com	r30
    4dd6:	08 95       	ret

00004dd8 <__fixsfsi>:
    4dd8:	04 d0       	rcall	.+8      	; 0x4de2 <__fixunssfsi>
    4dda:	68 94       	set
    4ddc:	b1 11       	cpse	r27, r1
    4dde:	d9 c0       	rjmp	.+434    	; 0x4f92 <__fp_szero>
    4de0:	08 95       	ret

00004de2 <__fixunssfsi>:
    4de2:	bc d0       	rcall	.+376    	; 0x4f5c <__fp_splitA>
    4de4:	88 f0       	brcs	.+34     	; 0x4e08 <__fixunssfsi+0x26>
    4de6:	9f 57       	subi	r25, 0x7F	; 127
    4de8:	90 f0       	brcs	.+36     	; 0x4e0e <__fixunssfsi+0x2c>
    4dea:	b9 2f       	mov	r27, r25
    4dec:	99 27       	eor	r25, r25
    4dee:	b7 51       	subi	r27, 0x17	; 23
    4df0:	a0 f0       	brcs	.+40     	; 0x4e1a <__fixunssfsi+0x38>
    4df2:	d1 f0       	breq	.+52     	; 0x4e28 <__fixunssfsi+0x46>
    4df4:	66 0f       	add	r22, r22
    4df6:	77 1f       	adc	r23, r23
    4df8:	88 1f       	adc	r24, r24
    4dfa:	99 1f       	adc	r25, r25
    4dfc:	1a f0       	brmi	.+6      	; 0x4e04 <__fixunssfsi+0x22>
    4dfe:	ba 95       	dec	r27
    4e00:	c9 f7       	brne	.-14     	; 0x4df4 <__fixunssfsi+0x12>
    4e02:	12 c0       	rjmp	.+36     	; 0x4e28 <__fixunssfsi+0x46>
    4e04:	b1 30       	cpi	r27, 0x01	; 1
    4e06:	81 f0       	breq	.+32     	; 0x4e28 <__fixunssfsi+0x46>
    4e08:	c3 d0       	rcall	.+390    	; 0x4f90 <__fp_zero>
    4e0a:	b1 e0       	ldi	r27, 0x01	; 1
    4e0c:	08 95       	ret
    4e0e:	c0 c0       	rjmp	.+384    	; 0x4f90 <__fp_zero>
    4e10:	67 2f       	mov	r22, r23
    4e12:	78 2f       	mov	r23, r24
    4e14:	88 27       	eor	r24, r24
    4e16:	b8 5f       	subi	r27, 0xF8	; 248
    4e18:	39 f0       	breq	.+14     	; 0x4e28 <__fixunssfsi+0x46>
    4e1a:	b9 3f       	cpi	r27, 0xF9	; 249
    4e1c:	cc f3       	brlt	.-14     	; 0x4e10 <__fixunssfsi+0x2e>
    4e1e:	86 95       	lsr	r24
    4e20:	77 95       	ror	r23
    4e22:	67 95       	ror	r22
    4e24:	b3 95       	inc	r27
    4e26:	d9 f7       	brne	.-10     	; 0x4e1e <__fixunssfsi+0x3c>
    4e28:	3e f4       	brtc	.+14     	; 0x4e38 <__fixunssfsi+0x56>
    4e2a:	90 95       	com	r25
    4e2c:	80 95       	com	r24
    4e2e:	70 95       	com	r23
    4e30:	61 95       	neg	r22
    4e32:	7f 4f       	sbci	r23, 0xFF	; 255
    4e34:	8f 4f       	sbci	r24, 0xFF	; 255
    4e36:	9f 4f       	sbci	r25, 0xFF	; 255
    4e38:	08 95       	ret

00004e3a <__floatunsisf>:
    4e3a:	e8 94       	clt
    4e3c:	09 c0       	rjmp	.+18     	; 0x4e50 <__floatsisf+0x12>

00004e3e <__floatsisf>:
    4e3e:	97 fb       	bst	r25, 7
    4e40:	3e f4       	brtc	.+14     	; 0x4e50 <__floatsisf+0x12>
    4e42:	90 95       	com	r25
    4e44:	80 95       	com	r24
    4e46:	70 95       	com	r23
    4e48:	61 95       	neg	r22
    4e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e4c:	8f 4f       	sbci	r24, 0xFF	; 255
    4e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e50:	99 23       	and	r25, r25
    4e52:	a9 f0       	breq	.+42     	; 0x4e7e <__floatsisf+0x40>
    4e54:	f9 2f       	mov	r31, r25
    4e56:	96 e9       	ldi	r25, 0x96	; 150
    4e58:	bb 27       	eor	r27, r27
    4e5a:	93 95       	inc	r25
    4e5c:	f6 95       	lsr	r31
    4e5e:	87 95       	ror	r24
    4e60:	77 95       	ror	r23
    4e62:	67 95       	ror	r22
    4e64:	b7 95       	ror	r27
    4e66:	f1 11       	cpse	r31, r1
    4e68:	f8 cf       	rjmp	.-16     	; 0x4e5a <__floatsisf+0x1c>
    4e6a:	fa f4       	brpl	.+62     	; 0x4eaa <__floatsisf+0x6c>
    4e6c:	bb 0f       	add	r27, r27
    4e6e:	11 f4       	brne	.+4      	; 0x4e74 <__floatsisf+0x36>
    4e70:	60 ff       	sbrs	r22, 0
    4e72:	1b c0       	rjmp	.+54     	; 0x4eaa <__floatsisf+0x6c>
    4e74:	6f 5f       	subi	r22, 0xFF	; 255
    4e76:	7f 4f       	sbci	r23, 0xFF	; 255
    4e78:	8f 4f       	sbci	r24, 0xFF	; 255
    4e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e7c:	16 c0       	rjmp	.+44     	; 0x4eaa <__floatsisf+0x6c>
    4e7e:	88 23       	and	r24, r24
    4e80:	11 f0       	breq	.+4      	; 0x4e86 <__floatsisf+0x48>
    4e82:	96 e9       	ldi	r25, 0x96	; 150
    4e84:	11 c0       	rjmp	.+34     	; 0x4ea8 <__floatsisf+0x6a>
    4e86:	77 23       	and	r23, r23
    4e88:	21 f0       	breq	.+8      	; 0x4e92 <__floatsisf+0x54>
    4e8a:	9e e8       	ldi	r25, 0x8E	; 142
    4e8c:	87 2f       	mov	r24, r23
    4e8e:	76 2f       	mov	r23, r22
    4e90:	05 c0       	rjmp	.+10     	; 0x4e9c <__floatsisf+0x5e>
    4e92:	66 23       	and	r22, r22
    4e94:	71 f0       	breq	.+28     	; 0x4eb2 <__floatsisf+0x74>
    4e96:	96 e8       	ldi	r25, 0x86	; 134
    4e98:	86 2f       	mov	r24, r22
    4e9a:	70 e0       	ldi	r23, 0x00	; 0
    4e9c:	60 e0       	ldi	r22, 0x00	; 0
    4e9e:	2a f0       	brmi	.+10     	; 0x4eaa <__floatsisf+0x6c>
    4ea0:	9a 95       	dec	r25
    4ea2:	66 0f       	add	r22, r22
    4ea4:	77 1f       	adc	r23, r23
    4ea6:	88 1f       	adc	r24, r24
    4ea8:	da f7       	brpl	.-10     	; 0x4ea0 <__floatsisf+0x62>
    4eaa:	88 0f       	add	r24, r24
    4eac:	96 95       	lsr	r25
    4eae:	87 95       	ror	r24
    4eb0:	97 f9       	bld	r25, 7
    4eb2:	08 95       	ret

00004eb4 <__fp_cmp>:
    4eb4:	99 0f       	add	r25, r25
    4eb6:	00 08       	sbc	r0, r0
    4eb8:	55 0f       	add	r21, r21
    4eba:	aa 0b       	sbc	r26, r26
    4ebc:	e0 e8       	ldi	r30, 0x80	; 128
    4ebe:	fe ef       	ldi	r31, 0xFE	; 254
    4ec0:	16 16       	cp	r1, r22
    4ec2:	17 06       	cpc	r1, r23
    4ec4:	e8 07       	cpc	r30, r24
    4ec6:	f9 07       	cpc	r31, r25
    4ec8:	c0 f0       	brcs	.+48     	; 0x4efa <__fp_cmp+0x46>
    4eca:	12 16       	cp	r1, r18
    4ecc:	13 06       	cpc	r1, r19
    4ece:	e4 07       	cpc	r30, r20
    4ed0:	f5 07       	cpc	r31, r21
    4ed2:	98 f0       	brcs	.+38     	; 0x4efa <__fp_cmp+0x46>
    4ed4:	62 1b       	sub	r22, r18
    4ed6:	73 0b       	sbc	r23, r19
    4ed8:	84 0b       	sbc	r24, r20
    4eda:	95 0b       	sbc	r25, r21
    4edc:	39 f4       	brne	.+14     	; 0x4eec <__fp_cmp+0x38>
    4ede:	0a 26       	eor	r0, r26
    4ee0:	61 f0       	breq	.+24     	; 0x4efa <__fp_cmp+0x46>
    4ee2:	23 2b       	or	r18, r19
    4ee4:	24 2b       	or	r18, r20
    4ee6:	25 2b       	or	r18, r21
    4ee8:	21 f4       	brne	.+8      	; 0x4ef2 <__fp_cmp+0x3e>
    4eea:	08 95       	ret
    4eec:	0a 26       	eor	r0, r26
    4eee:	09 f4       	brne	.+2      	; 0x4ef2 <__fp_cmp+0x3e>
    4ef0:	a1 40       	sbci	r26, 0x01	; 1
    4ef2:	a6 95       	lsr	r26
    4ef4:	8f ef       	ldi	r24, 0xFF	; 255
    4ef6:	81 1d       	adc	r24, r1
    4ef8:	81 1d       	adc	r24, r1
    4efa:	08 95       	ret

00004efc <__fp_inf>:
    4efc:	97 f9       	bld	r25, 7
    4efe:	9f 67       	ori	r25, 0x7F	; 127
    4f00:	80 e8       	ldi	r24, 0x80	; 128
    4f02:	70 e0       	ldi	r23, 0x00	; 0
    4f04:	60 e0       	ldi	r22, 0x00	; 0
    4f06:	08 95       	ret

00004f08 <__fp_nan>:
    4f08:	9f ef       	ldi	r25, 0xFF	; 255
    4f0a:	80 ec       	ldi	r24, 0xC0	; 192
    4f0c:	08 95       	ret

00004f0e <__fp_pscA>:
    4f0e:	00 24       	eor	r0, r0
    4f10:	0a 94       	dec	r0
    4f12:	16 16       	cp	r1, r22
    4f14:	17 06       	cpc	r1, r23
    4f16:	18 06       	cpc	r1, r24
    4f18:	09 06       	cpc	r0, r25
    4f1a:	08 95       	ret

00004f1c <__fp_pscB>:
    4f1c:	00 24       	eor	r0, r0
    4f1e:	0a 94       	dec	r0
    4f20:	12 16       	cp	r1, r18
    4f22:	13 06       	cpc	r1, r19
    4f24:	14 06       	cpc	r1, r20
    4f26:	05 06       	cpc	r0, r21
    4f28:	08 95       	ret

00004f2a <__fp_round>:
    4f2a:	09 2e       	mov	r0, r25
    4f2c:	03 94       	inc	r0
    4f2e:	00 0c       	add	r0, r0
    4f30:	11 f4       	brne	.+4      	; 0x4f36 <__fp_round+0xc>
    4f32:	88 23       	and	r24, r24
    4f34:	52 f0       	brmi	.+20     	; 0x4f4a <__fp_round+0x20>
    4f36:	bb 0f       	add	r27, r27
    4f38:	40 f4       	brcc	.+16     	; 0x4f4a <__fp_round+0x20>
    4f3a:	bf 2b       	or	r27, r31
    4f3c:	11 f4       	brne	.+4      	; 0x4f42 <__fp_round+0x18>
    4f3e:	60 ff       	sbrs	r22, 0
    4f40:	04 c0       	rjmp	.+8      	; 0x4f4a <__fp_round+0x20>
    4f42:	6f 5f       	subi	r22, 0xFF	; 255
    4f44:	7f 4f       	sbci	r23, 0xFF	; 255
    4f46:	8f 4f       	sbci	r24, 0xFF	; 255
    4f48:	9f 4f       	sbci	r25, 0xFF	; 255
    4f4a:	08 95       	ret

00004f4c <__fp_split3>:
    4f4c:	57 fd       	sbrc	r21, 7
    4f4e:	90 58       	subi	r25, 0x80	; 128
    4f50:	44 0f       	add	r20, r20
    4f52:	55 1f       	adc	r21, r21
    4f54:	59 f0       	breq	.+22     	; 0x4f6c <__fp_splitA+0x10>
    4f56:	5f 3f       	cpi	r21, 0xFF	; 255
    4f58:	71 f0       	breq	.+28     	; 0x4f76 <__fp_splitA+0x1a>
    4f5a:	47 95       	ror	r20

00004f5c <__fp_splitA>:
    4f5c:	88 0f       	add	r24, r24
    4f5e:	97 fb       	bst	r25, 7
    4f60:	99 1f       	adc	r25, r25
    4f62:	61 f0       	breq	.+24     	; 0x4f7c <__fp_splitA+0x20>
    4f64:	9f 3f       	cpi	r25, 0xFF	; 255
    4f66:	79 f0       	breq	.+30     	; 0x4f86 <__fp_splitA+0x2a>
    4f68:	87 95       	ror	r24
    4f6a:	08 95       	ret
    4f6c:	12 16       	cp	r1, r18
    4f6e:	13 06       	cpc	r1, r19
    4f70:	14 06       	cpc	r1, r20
    4f72:	55 1f       	adc	r21, r21
    4f74:	f2 cf       	rjmp	.-28     	; 0x4f5a <__fp_split3+0xe>
    4f76:	46 95       	lsr	r20
    4f78:	f1 df       	rcall	.-30     	; 0x4f5c <__fp_splitA>
    4f7a:	08 c0       	rjmp	.+16     	; 0x4f8c <__fp_splitA+0x30>
    4f7c:	16 16       	cp	r1, r22
    4f7e:	17 06       	cpc	r1, r23
    4f80:	18 06       	cpc	r1, r24
    4f82:	99 1f       	adc	r25, r25
    4f84:	f1 cf       	rjmp	.-30     	; 0x4f68 <__fp_splitA+0xc>
    4f86:	86 95       	lsr	r24
    4f88:	71 05       	cpc	r23, r1
    4f8a:	61 05       	cpc	r22, r1
    4f8c:	08 94       	sec
    4f8e:	08 95       	ret

00004f90 <__fp_zero>:
    4f90:	e8 94       	clt

00004f92 <__fp_szero>:
    4f92:	bb 27       	eor	r27, r27
    4f94:	66 27       	eor	r22, r22
    4f96:	77 27       	eor	r23, r23
    4f98:	cb 01       	movw	r24, r22
    4f9a:	97 f9       	bld	r25, 7
    4f9c:	08 95       	ret

00004f9e <__gesf2>:
    4f9e:	8a df       	rcall	.-236    	; 0x4eb4 <__fp_cmp>
    4fa0:	08 f4       	brcc	.+2      	; 0x4fa4 <__gesf2+0x6>
    4fa2:	8f ef       	ldi	r24, 0xFF	; 255
    4fa4:	08 95       	ret

00004fa6 <__mulsf3>:
    4fa6:	0b d0       	rcall	.+22     	; 0x4fbe <__mulsf3x>
    4fa8:	c0 cf       	rjmp	.-128    	; 0x4f2a <__fp_round>
    4faa:	b1 df       	rcall	.-158    	; 0x4f0e <__fp_pscA>
    4fac:	28 f0       	brcs	.+10     	; 0x4fb8 <__mulsf3+0x12>
    4fae:	b6 df       	rcall	.-148    	; 0x4f1c <__fp_pscB>
    4fb0:	18 f0       	brcs	.+6      	; 0x4fb8 <__mulsf3+0x12>
    4fb2:	95 23       	and	r25, r21
    4fb4:	09 f0       	breq	.+2      	; 0x4fb8 <__mulsf3+0x12>
    4fb6:	a2 cf       	rjmp	.-188    	; 0x4efc <__fp_inf>
    4fb8:	a7 cf       	rjmp	.-178    	; 0x4f08 <__fp_nan>
    4fba:	11 24       	eor	r1, r1
    4fbc:	ea cf       	rjmp	.-44     	; 0x4f92 <__fp_szero>

00004fbe <__mulsf3x>:
    4fbe:	c6 df       	rcall	.-116    	; 0x4f4c <__fp_split3>
    4fc0:	a0 f3       	brcs	.-24     	; 0x4faa <__mulsf3+0x4>

00004fc2 <__mulsf3_pse>:
    4fc2:	95 9f       	mul	r25, r21
    4fc4:	d1 f3       	breq	.-12     	; 0x4fba <__mulsf3+0x14>
    4fc6:	95 0f       	add	r25, r21
    4fc8:	50 e0       	ldi	r21, 0x00	; 0
    4fca:	55 1f       	adc	r21, r21
    4fcc:	62 9f       	mul	r22, r18
    4fce:	f0 01       	movw	r30, r0
    4fd0:	72 9f       	mul	r23, r18
    4fd2:	bb 27       	eor	r27, r27
    4fd4:	f0 0d       	add	r31, r0
    4fd6:	b1 1d       	adc	r27, r1
    4fd8:	63 9f       	mul	r22, r19
    4fda:	aa 27       	eor	r26, r26
    4fdc:	f0 0d       	add	r31, r0
    4fde:	b1 1d       	adc	r27, r1
    4fe0:	aa 1f       	adc	r26, r26
    4fe2:	64 9f       	mul	r22, r20
    4fe4:	66 27       	eor	r22, r22
    4fe6:	b0 0d       	add	r27, r0
    4fe8:	a1 1d       	adc	r26, r1
    4fea:	66 1f       	adc	r22, r22
    4fec:	82 9f       	mul	r24, r18
    4fee:	22 27       	eor	r18, r18
    4ff0:	b0 0d       	add	r27, r0
    4ff2:	a1 1d       	adc	r26, r1
    4ff4:	62 1f       	adc	r22, r18
    4ff6:	73 9f       	mul	r23, r19
    4ff8:	b0 0d       	add	r27, r0
    4ffa:	a1 1d       	adc	r26, r1
    4ffc:	62 1f       	adc	r22, r18
    4ffe:	83 9f       	mul	r24, r19
    5000:	a0 0d       	add	r26, r0
    5002:	61 1d       	adc	r22, r1
    5004:	22 1f       	adc	r18, r18
    5006:	74 9f       	mul	r23, r20
    5008:	33 27       	eor	r19, r19
    500a:	a0 0d       	add	r26, r0
    500c:	61 1d       	adc	r22, r1
    500e:	23 1f       	adc	r18, r19
    5010:	84 9f       	mul	r24, r20
    5012:	60 0d       	add	r22, r0
    5014:	21 1d       	adc	r18, r1
    5016:	82 2f       	mov	r24, r18
    5018:	76 2f       	mov	r23, r22
    501a:	6a 2f       	mov	r22, r26
    501c:	11 24       	eor	r1, r1
    501e:	9f 57       	subi	r25, 0x7F	; 127
    5020:	50 40       	sbci	r21, 0x00	; 0
    5022:	8a f0       	brmi	.+34     	; 0x5046 <__mulsf3_pse+0x84>
    5024:	e1 f0       	breq	.+56     	; 0x505e <__mulsf3_pse+0x9c>
    5026:	88 23       	and	r24, r24
    5028:	4a f0       	brmi	.+18     	; 0x503c <__mulsf3_pse+0x7a>
    502a:	ee 0f       	add	r30, r30
    502c:	ff 1f       	adc	r31, r31
    502e:	bb 1f       	adc	r27, r27
    5030:	66 1f       	adc	r22, r22
    5032:	77 1f       	adc	r23, r23
    5034:	88 1f       	adc	r24, r24
    5036:	91 50       	subi	r25, 0x01	; 1
    5038:	50 40       	sbci	r21, 0x00	; 0
    503a:	a9 f7       	brne	.-22     	; 0x5026 <__mulsf3_pse+0x64>
    503c:	9e 3f       	cpi	r25, 0xFE	; 254
    503e:	51 05       	cpc	r21, r1
    5040:	70 f0       	brcs	.+28     	; 0x505e <__mulsf3_pse+0x9c>
    5042:	5c cf       	rjmp	.-328    	; 0x4efc <__fp_inf>
    5044:	a6 cf       	rjmp	.-180    	; 0x4f92 <__fp_szero>
    5046:	5f 3f       	cpi	r21, 0xFF	; 255
    5048:	ec f3       	brlt	.-6      	; 0x5044 <__mulsf3_pse+0x82>
    504a:	98 3e       	cpi	r25, 0xE8	; 232
    504c:	dc f3       	brlt	.-10     	; 0x5044 <__mulsf3_pse+0x82>
    504e:	86 95       	lsr	r24
    5050:	77 95       	ror	r23
    5052:	67 95       	ror	r22
    5054:	b7 95       	ror	r27
    5056:	f7 95       	ror	r31
    5058:	e7 95       	ror	r30
    505a:	9f 5f       	subi	r25, 0xFF	; 255
    505c:	c1 f7       	brne	.-16     	; 0x504e <__mulsf3_pse+0x8c>
    505e:	fe 2b       	or	r31, r30
    5060:	88 0f       	add	r24, r24
    5062:	91 1d       	adc	r25, r1
    5064:	96 95       	lsr	r25
    5066:	87 95       	ror	r24
    5068:	97 f9       	bld	r25, 7
    506a:	08 95       	ret

0000506c <pow>:
    506c:	fa 01       	movw	r30, r20
    506e:	ee 0f       	add	r30, r30
    5070:	ff 1f       	adc	r31, r31
    5072:	30 96       	adiw	r30, 0x00	; 0
    5074:	21 05       	cpc	r18, r1
    5076:	31 05       	cpc	r19, r1
    5078:	99 f1       	breq	.+102    	; 0x50e0 <pow+0x74>
    507a:	61 15       	cp	r22, r1
    507c:	71 05       	cpc	r23, r1
    507e:	61 f4       	brne	.+24     	; 0x5098 <pow+0x2c>
    5080:	80 38       	cpi	r24, 0x80	; 128
    5082:	bf e3       	ldi	r27, 0x3F	; 63
    5084:	9b 07       	cpc	r25, r27
    5086:	49 f1       	breq	.+82     	; 0x50da <pow+0x6e>
    5088:	68 94       	set
    508a:	90 38       	cpi	r25, 0x80	; 128
    508c:	81 05       	cpc	r24, r1
    508e:	61 f0       	breq	.+24     	; 0x50a8 <pow+0x3c>
    5090:	80 38       	cpi	r24, 0x80	; 128
    5092:	bf ef       	ldi	r27, 0xFF	; 255
    5094:	9b 07       	cpc	r25, r27
    5096:	41 f0       	breq	.+16     	; 0x50a8 <pow+0x3c>
    5098:	99 23       	and	r25, r25
    509a:	42 f5       	brpl	.+80     	; 0x50ec <pow+0x80>
    509c:	ff 3f       	cpi	r31, 0xFF	; 255
    509e:	e1 05       	cpc	r30, r1
    50a0:	31 05       	cpc	r19, r1
    50a2:	21 05       	cpc	r18, r1
    50a4:	11 f1       	breq	.+68     	; 0x50ea <pow+0x7e>
    50a6:	e8 94       	clt
    50a8:	08 94       	sec
    50aa:	e7 95       	ror	r30
    50ac:	d9 01       	movw	r26, r18
    50ae:	aa 23       	and	r26, r26
    50b0:	29 f4       	brne	.+10     	; 0x50bc <pow+0x50>
    50b2:	ab 2f       	mov	r26, r27
    50b4:	be 2f       	mov	r27, r30
    50b6:	f8 5f       	subi	r31, 0xF8	; 248
    50b8:	d0 f3       	brcs	.-12     	; 0x50ae <pow+0x42>
    50ba:	10 c0       	rjmp	.+32     	; 0x50dc <pow+0x70>
    50bc:	ff 5f       	subi	r31, 0xFF	; 255
    50be:	70 f4       	brcc	.+28     	; 0x50dc <pow+0x70>
    50c0:	a6 95       	lsr	r26
    50c2:	e0 f7       	brcc	.-8      	; 0x50bc <pow+0x50>
    50c4:	f7 39       	cpi	r31, 0x97	; 151
    50c6:	50 f0       	brcs	.+20     	; 0x50dc <pow+0x70>
    50c8:	19 f0       	breq	.+6      	; 0x50d0 <pow+0x64>
    50ca:	ff 3a       	cpi	r31, 0xAF	; 175
    50cc:	38 f4       	brcc	.+14     	; 0x50dc <pow+0x70>
    50ce:	9f 77       	andi	r25, 0x7F	; 127
    50d0:	9f 93       	push	r25
    50d2:	0c d0       	rcall	.+24     	; 0x50ec <pow+0x80>
    50d4:	0f 90       	pop	r0
    50d6:	07 fc       	sbrc	r0, 7
    50d8:	90 58       	subi	r25, 0x80	; 128
    50da:	08 95       	ret
    50dc:	3e f0       	brts	.+14     	; 0x50ec <pow+0x80>
    50de:	14 cf       	rjmp	.-472    	; 0x4f08 <__fp_nan>
    50e0:	60 e0       	ldi	r22, 0x00	; 0
    50e2:	70 e0       	ldi	r23, 0x00	; 0
    50e4:	80 e8       	ldi	r24, 0x80	; 128
    50e6:	9f e3       	ldi	r25, 0x3F	; 63
    50e8:	08 95       	ret
    50ea:	4f e7       	ldi	r20, 0x7F	; 127
    50ec:	9f 77       	andi	r25, 0x7F	; 127
    50ee:	5f 93       	push	r21
    50f0:	4f 93       	push	r20
    50f2:	3f 93       	push	r19
    50f4:	2f 93       	push	r18
    50f6:	9e d0       	rcall	.+316    	; 0x5234 <log>
    50f8:	2f 91       	pop	r18
    50fa:	3f 91       	pop	r19
    50fc:	4f 91       	pop	r20
    50fe:	5f 91       	pop	r21
    5100:	52 df       	rcall	.-348    	; 0x4fa6 <__mulsf3>
    5102:	05 c0       	rjmp	.+10     	; 0x510e <exp>
    5104:	19 f4       	brne	.+6      	; 0x510c <pow+0xa0>
    5106:	0e f0       	brts	.+2      	; 0x510a <pow+0x9e>
    5108:	f9 ce       	rjmp	.-526    	; 0x4efc <__fp_inf>
    510a:	42 cf       	rjmp	.-380    	; 0x4f90 <__fp_zero>
    510c:	fd ce       	rjmp	.-518    	; 0x4f08 <__fp_nan>

0000510e <exp>:
    510e:	26 df       	rcall	.-436    	; 0x4f5c <__fp_splitA>
    5110:	c8 f3       	brcs	.-14     	; 0x5104 <pow+0x98>
    5112:	96 38       	cpi	r25, 0x86	; 134
    5114:	c0 f7       	brcc	.-16     	; 0x5106 <pow+0x9a>
    5116:	07 f8       	bld	r0, 7
    5118:	0f 92       	push	r0
    511a:	e8 94       	clt
    511c:	2b e3       	ldi	r18, 0x3B	; 59
    511e:	3a ea       	ldi	r19, 0xAA	; 170
    5120:	48 eb       	ldi	r20, 0xB8	; 184
    5122:	5f e7       	ldi	r21, 0x7F	; 127
    5124:	4e df       	rcall	.-356    	; 0x4fc2 <__mulsf3_pse>
    5126:	0f 92       	push	r0
    5128:	0f 92       	push	r0
    512a:	0f 92       	push	r0
    512c:	4d b7       	in	r20, 0x3d	; 61
    512e:	5e b7       	in	r21, 0x3e	; 62
    5130:	0f 92       	push	r0
    5132:	c0 d0       	rcall	.+384    	; 0x52b4 <modf>
    5134:	e4 ee       	ldi	r30, 0xE4	; 228
    5136:	f0 e0       	ldi	r31, 0x00	; 0
    5138:	16 d0       	rcall	.+44     	; 0x5166 <__fp_powser>
    513a:	4f 91       	pop	r20
    513c:	5f 91       	pop	r21
    513e:	ef 91       	pop	r30
    5140:	ff 91       	pop	r31
    5142:	e5 95       	asr	r30
    5144:	ee 1f       	adc	r30, r30
    5146:	ff 1f       	adc	r31, r31
    5148:	49 f0       	breq	.+18     	; 0x515c <exp+0x4e>
    514a:	fe 57       	subi	r31, 0x7E	; 126
    514c:	e0 68       	ori	r30, 0x80	; 128
    514e:	44 27       	eor	r20, r20
    5150:	ee 0f       	add	r30, r30
    5152:	44 1f       	adc	r20, r20
    5154:	fa 95       	dec	r31
    5156:	e1 f7       	brne	.-8      	; 0x5150 <exp+0x42>
    5158:	41 95       	neg	r20
    515a:	55 0b       	sbc	r21, r21
    515c:	32 d0       	rcall	.+100    	; 0x51c2 <ldexp>
    515e:	0f 90       	pop	r0
    5160:	07 fe       	sbrs	r0, 7
    5162:	26 c0       	rjmp	.+76     	; 0x51b0 <inverse>
    5164:	08 95       	ret

00005166 <__fp_powser>:
    5166:	df 93       	push	r29
    5168:	cf 93       	push	r28
    516a:	1f 93       	push	r17
    516c:	0f 93       	push	r16
    516e:	ff 92       	push	r15
    5170:	ef 92       	push	r14
    5172:	df 92       	push	r13
    5174:	7b 01       	movw	r14, r22
    5176:	8c 01       	movw	r16, r24
    5178:	68 94       	set
    517a:	05 c0       	rjmp	.+10     	; 0x5186 <__fp_powser+0x20>
    517c:	da 2e       	mov	r13, r26
    517e:	ef 01       	movw	r28, r30
    5180:	1e df       	rcall	.-452    	; 0x4fbe <__mulsf3x>
    5182:	fe 01       	movw	r30, r28
    5184:	e8 94       	clt
    5186:	a5 91       	lpm	r26, Z+
    5188:	25 91       	lpm	r18, Z+
    518a:	35 91       	lpm	r19, Z+
    518c:	45 91       	lpm	r20, Z+
    518e:	55 91       	lpm	r21, Z+
    5190:	ae f3       	brts	.-22     	; 0x517c <__fp_powser+0x16>
    5192:	ef 01       	movw	r28, r30
    5194:	62 dd       	rcall	.-1340   	; 0x4c5a <__addsf3x>
    5196:	fe 01       	movw	r30, r28
    5198:	97 01       	movw	r18, r14
    519a:	a8 01       	movw	r20, r16
    519c:	da 94       	dec	r13
    519e:	79 f7       	brne	.-34     	; 0x517e <__fp_powser+0x18>
    51a0:	df 90       	pop	r13
    51a2:	ef 90       	pop	r14
    51a4:	ff 90       	pop	r15
    51a6:	0f 91       	pop	r16
    51a8:	1f 91       	pop	r17
    51aa:	cf 91       	pop	r28
    51ac:	df 91       	pop	r29
    51ae:	08 95       	ret

000051b0 <inverse>:
    51b0:	9b 01       	movw	r18, r22
    51b2:	ac 01       	movw	r20, r24
    51b4:	60 e0       	ldi	r22, 0x00	; 0
    51b6:	70 e0       	ldi	r23, 0x00	; 0
    51b8:	80 e8       	ldi	r24, 0x80	; 128
    51ba:	9f e3       	ldi	r25, 0x3F	; 63
    51bc:	a5 cd       	rjmp	.-1206   	; 0x4d08 <__divsf3>
    51be:	9e ce       	rjmp	.-708    	; 0x4efc <__fp_inf>
    51c0:	ac c0       	rjmp	.+344    	; 0x531a <__fp_mpack>

000051c2 <ldexp>:
    51c2:	cc de       	rcall	.-616    	; 0x4f5c <__fp_splitA>
    51c4:	e8 f3       	brcs	.-6      	; 0x51c0 <inverse+0x10>
    51c6:	99 23       	and	r25, r25
    51c8:	d9 f3       	breq	.-10     	; 0x51c0 <inverse+0x10>
    51ca:	94 0f       	add	r25, r20
    51cc:	51 1d       	adc	r21, r1
    51ce:	bb f3       	brvs	.-18     	; 0x51be <inverse+0xe>
    51d0:	91 50       	subi	r25, 0x01	; 1
    51d2:	50 40       	sbci	r21, 0x00	; 0
    51d4:	94 f0       	brlt	.+36     	; 0x51fa <ldexp+0x38>
    51d6:	59 f0       	breq	.+22     	; 0x51ee <ldexp+0x2c>
    51d8:	88 23       	and	r24, r24
    51da:	32 f0       	brmi	.+12     	; 0x51e8 <ldexp+0x26>
    51dc:	66 0f       	add	r22, r22
    51de:	77 1f       	adc	r23, r23
    51e0:	88 1f       	adc	r24, r24
    51e2:	91 50       	subi	r25, 0x01	; 1
    51e4:	50 40       	sbci	r21, 0x00	; 0
    51e6:	c1 f7       	brne	.-16     	; 0x51d8 <ldexp+0x16>
    51e8:	9e 3f       	cpi	r25, 0xFE	; 254
    51ea:	51 05       	cpc	r21, r1
    51ec:	44 f7       	brge	.-48     	; 0x51be <inverse+0xe>
    51ee:	88 0f       	add	r24, r24
    51f0:	91 1d       	adc	r25, r1
    51f2:	96 95       	lsr	r25
    51f4:	87 95       	ror	r24
    51f6:	97 f9       	bld	r25, 7
    51f8:	08 95       	ret
    51fa:	5f 3f       	cpi	r21, 0xFF	; 255
    51fc:	ac f0       	brlt	.+42     	; 0x5228 <ldexp+0x66>
    51fe:	98 3e       	cpi	r25, 0xE8	; 232
    5200:	9c f0       	brlt	.+38     	; 0x5228 <ldexp+0x66>
    5202:	bb 27       	eor	r27, r27
    5204:	86 95       	lsr	r24
    5206:	77 95       	ror	r23
    5208:	67 95       	ror	r22
    520a:	b7 95       	ror	r27
    520c:	08 f4       	brcc	.+2      	; 0x5210 <ldexp+0x4e>
    520e:	b1 60       	ori	r27, 0x01	; 1
    5210:	93 95       	inc	r25
    5212:	c1 f7       	brne	.-16     	; 0x5204 <ldexp+0x42>
    5214:	bb 0f       	add	r27, r27
    5216:	58 f7       	brcc	.-42     	; 0x51ee <ldexp+0x2c>
    5218:	11 f4       	brne	.+4      	; 0x521e <ldexp+0x5c>
    521a:	60 ff       	sbrs	r22, 0
    521c:	e8 cf       	rjmp	.-48     	; 0x51ee <ldexp+0x2c>
    521e:	6f 5f       	subi	r22, 0xFF	; 255
    5220:	7f 4f       	sbci	r23, 0xFF	; 255
    5222:	8f 4f       	sbci	r24, 0xFF	; 255
    5224:	9f 4f       	sbci	r25, 0xFF	; 255
    5226:	e3 cf       	rjmp	.-58     	; 0x51ee <ldexp+0x2c>
    5228:	b4 ce       	rjmp	.-664    	; 0x4f92 <__fp_szero>
    522a:	0e f0       	brts	.+2      	; 0x522e <ldexp+0x6c>
    522c:	76 c0       	rjmp	.+236    	; 0x531a <__fp_mpack>
    522e:	6c ce       	rjmp	.-808    	; 0x4f08 <__fp_nan>
    5230:	68 94       	set
    5232:	64 ce       	rjmp	.-824    	; 0x4efc <__fp_inf>

00005234 <log>:
    5234:	93 de       	rcall	.-730    	; 0x4f5c <__fp_splitA>
    5236:	c8 f3       	brcs	.-14     	; 0x522a <ldexp+0x68>
    5238:	99 23       	and	r25, r25
    523a:	d1 f3       	breq	.-12     	; 0x5230 <ldexp+0x6e>
    523c:	c6 f3       	brts	.-16     	; 0x522e <ldexp+0x6c>
    523e:	df 93       	push	r29
    5240:	cf 93       	push	r28
    5242:	1f 93       	push	r17
    5244:	0f 93       	push	r16
    5246:	ff 92       	push	r15
    5248:	c9 2f       	mov	r28, r25
    524a:	dd 27       	eor	r29, r29
    524c:	88 23       	and	r24, r24
    524e:	2a f0       	brmi	.+10     	; 0x525a <log+0x26>
    5250:	21 97       	sbiw	r28, 0x01	; 1
    5252:	66 0f       	add	r22, r22
    5254:	77 1f       	adc	r23, r23
    5256:	88 1f       	adc	r24, r24
    5258:	da f7       	brpl	.-10     	; 0x5250 <log+0x1c>
    525a:	20 e0       	ldi	r18, 0x00	; 0
    525c:	30 e0       	ldi	r19, 0x00	; 0
    525e:	40 e8       	ldi	r20, 0x80	; 128
    5260:	5f eb       	ldi	r21, 0xBF	; 191
    5262:	9f e3       	ldi	r25, 0x3F	; 63
    5264:	88 39       	cpi	r24, 0x98	; 152
    5266:	20 f0       	brcs	.+8      	; 0x5270 <log+0x3c>
    5268:	80 3e       	cpi	r24, 0xE0	; 224
    526a:	30 f0       	brcs	.+12     	; 0x5278 <log+0x44>
    526c:	21 96       	adiw	r28, 0x01	; 1
    526e:	8f 77       	andi	r24, 0x7F	; 127
    5270:	e3 dc       	rcall	.-1594   	; 0x4c38 <__addsf3>
    5272:	ec e0       	ldi	r30, 0x0C	; 12
    5274:	f1 e0       	ldi	r31, 0x01	; 1
    5276:	03 c0       	rjmp	.+6      	; 0x527e <log+0x4a>
    5278:	df dc       	rcall	.-1602   	; 0x4c38 <__addsf3>
    527a:	e9 e3       	ldi	r30, 0x39	; 57
    527c:	f1 e0       	ldi	r31, 0x01	; 1
    527e:	73 df       	rcall	.-282    	; 0x5166 <__fp_powser>
    5280:	8b 01       	movw	r16, r22
    5282:	be 01       	movw	r22, r28
    5284:	ec 01       	movw	r28, r24
    5286:	fb 2e       	mov	r15, r27
    5288:	6f 57       	subi	r22, 0x7F	; 127
    528a:	71 09       	sbc	r23, r1
    528c:	75 95       	asr	r23
    528e:	77 1f       	adc	r23, r23
    5290:	88 0b       	sbc	r24, r24
    5292:	99 0b       	sbc	r25, r25
    5294:	d4 dd       	rcall	.-1112   	; 0x4e3e <__floatsisf>
    5296:	28 e1       	ldi	r18, 0x18	; 24
    5298:	32 e7       	ldi	r19, 0x72	; 114
    529a:	41 e3       	ldi	r20, 0x31	; 49
    529c:	5f e3       	ldi	r21, 0x3F	; 63
    529e:	8f de       	rcall	.-738    	; 0x4fbe <__mulsf3x>
    52a0:	af 2d       	mov	r26, r15
    52a2:	98 01       	movw	r18, r16
    52a4:	ae 01       	movw	r20, r28
    52a6:	ff 90       	pop	r15
    52a8:	0f 91       	pop	r16
    52aa:	1f 91       	pop	r17
    52ac:	cf 91       	pop	r28
    52ae:	df 91       	pop	r29
    52b0:	d4 dc       	rcall	.-1624   	; 0x4c5a <__addsf3x>
    52b2:	3b ce       	rjmp	.-906    	; 0x4f2a <__fp_round>

000052b4 <modf>:
    52b4:	fa 01       	movw	r30, r20
    52b6:	dc 01       	movw	r26, r24
    52b8:	aa 0f       	add	r26, r26
    52ba:	bb 1f       	adc	r27, r27
    52bc:	9b 01       	movw	r18, r22
    52be:	ac 01       	movw	r20, r24
    52c0:	bf 57       	subi	r27, 0x7F	; 127
    52c2:	28 f4       	brcc	.+10     	; 0x52ce <modf+0x1a>
    52c4:	22 27       	eor	r18, r18
    52c6:	33 27       	eor	r19, r19
    52c8:	44 27       	eor	r20, r20
    52ca:	50 78       	andi	r21, 0x80	; 128
    52cc:	1f c0       	rjmp	.+62     	; 0x530c <modf+0x58>
    52ce:	b7 51       	subi	r27, 0x17	; 23
    52d0:	88 f4       	brcc	.+34     	; 0x52f4 <modf+0x40>
    52d2:	ab 2f       	mov	r26, r27
    52d4:	00 24       	eor	r0, r0
    52d6:	46 95       	lsr	r20
    52d8:	37 95       	ror	r19
    52da:	27 95       	ror	r18
    52dc:	01 1c       	adc	r0, r1
    52de:	a3 95       	inc	r26
    52e0:	d2 f3       	brmi	.-12     	; 0x52d6 <modf+0x22>
    52e2:	00 20       	and	r0, r0
    52e4:	69 f0       	breq	.+26     	; 0x5300 <modf+0x4c>
    52e6:	22 0f       	add	r18, r18
    52e8:	33 1f       	adc	r19, r19
    52ea:	44 1f       	adc	r20, r20
    52ec:	b3 95       	inc	r27
    52ee:	da f3       	brmi	.-10     	; 0x52e6 <modf+0x32>
    52f0:	0d d0       	rcall	.+26     	; 0x530c <modf+0x58>
    52f2:	a1 cc       	rjmp	.-1726   	; 0x4c36 <__subsf3>
    52f4:	61 30       	cpi	r22, 0x01	; 1
    52f6:	71 05       	cpc	r23, r1
    52f8:	a0 e8       	ldi	r26, 0x80	; 128
    52fa:	8a 07       	cpc	r24, r26
    52fc:	b9 46       	sbci	r27, 0x69	; 105
    52fe:	30 f4       	brcc	.+12     	; 0x530c <modf+0x58>
    5300:	9b 01       	movw	r18, r22
    5302:	ac 01       	movw	r20, r24
    5304:	66 27       	eor	r22, r22
    5306:	77 27       	eor	r23, r23
    5308:	88 27       	eor	r24, r24
    530a:	90 78       	andi	r25, 0x80	; 128
    530c:	30 96       	adiw	r30, 0x00	; 0
    530e:	21 f0       	breq	.+8      	; 0x5318 <modf+0x64>
    5310:	20 83       	st	Z, r18
    5312:	31 83       	std	Z+1, r19	; 0x01
    5314:	42 83       	std	Z+2, r20	; 0x02
    5316:	53 83       	std	Z+3, r21	; 0x03
    5318:	08 95       	ret

0000531a <__fp_mpack>:
    531a:	9f 3f       	cpi	r25, 0xFF	; 255
    531c:	49 f0       	breq	.+18     	; 0x5330 <__fp_mpack+0x16>
    531e:	91 50       	subi	r25, 0x01	; 1
    5320:	28 f4       	brcc	.+10     	; 0x532c <__fp_mpack+0x12>
    5322:	86 95       	lsr	r24
    5324:	77 95       	ror	r23
    5326:	67 95       	ror	r22
    5328:	b7 95       	ror	r27
    532a:	9f 5f       	subi	r25, 0xFF	; 255
    532c:	80 38       	cpi	r24, 0x80	; 128
    532e:	9f 4f       	sbci	r25, 0xFF	; 255
    5330:	88 0f       	add	r24, r24
    5332:	96 95       	lsr	r25
    5334:	87 95       	ror	r24
    5336:	97 f9       	bld	r25, 7
    5338:	08 95       	ret

0000533a <__mulsi3>:
    533a:	62 9f       	mul	r22, r18
    533c:	d0 01       	movw	r26, r0
    533e:	73 9f       	mul	r23, r19
    5340:	f0 01       	movw	r30, r0
    5342:	82 9f       	mul	r24, r18
    5344:	e0 0d       	add	r30, r0
    5346:	f1 1d       	adc	r31, r1
    5348:	64 9f       	mul	r22, r20
    534a:	e0 0d       	add	r30, r0
    534c:	f1 1d       	adc	r31, r1
    534e:	92 9f       	mul	r25, r18
    5350:	f0 0d       	add	r31, r0
    5352:	83 9f       	mul	r24, r19
    5354:	f0 0d       	add	r31, r0
    5356:	74 9f       	mul	r23, r20
    5358:	f0 0d       	add	r31, r0
    535a:	65 9f       	mul	r22, r21
    535c:	f0 0d       	add	r31, r0
    535e:	99 27       	eor	r25, r25
    5360:	72 9f       	mul	r23, r18
    5362:	b0 0d       	add	r27, r0
    5364:	e1 1d       	adc	r30, r1
    5366:	f9 1f       	adc	r31, r25
    5368:	63 9f       	mul	r22, r19
    536a:	b0 0d       	add	r27, r0
    536c:	e1 1d       	adc	r30, r1
    536e:	f9 1f       	adc	r31, r25
    5370:	bd 01       	movw	r22, r26
    5372:	cf 01       	movw	r24, r30
    5374:	11 24       	eor	r1, r1
    5376:	08 95       	ret

00005378 <__udivmodhi4>:
    5378:	aa 1b       	sub	r26, r26
    537a:	bb 1b       	sub	r27, r27
    537c:	51 e1       	ldi	r21, 0x11	; 17
    537e:	07 c0       	rjmp	.+14     	; 0x538e <__udivmodhi4_ep>

00005380 <__udivmodhi4_loop>:
    5380:	aa 1f       	adc	r26, r26
    5382:	bb 1f       	adc	r27, r27
    5384:	a6 17       	cp	r26, r22
    5386:	b7 07       	cpc	r27, r23
    5388:	10 f0       	brcs	.+4      	; 0x538e <__udivmodhi4_ep>
    538a:	a6 1b       	sub	r26, r22
    538c:	b7 0b       	sbc	r27, r23

0000538e <__udivmodhi4_ep>:
    538e:	88 1f       	adc	r24, r24
    5390:	99 1f       	adc	r25, r25
    5392:	5a 95       	dec	r21
    5394:	a9 f7       	brne	.-22     	; 0x5380 <__udivmodhi4_loop>
    5396:	80 95       	com	r24
    5398:	90 95       	com	r25
    539a:	bc 01       	movw	r22, r24
    539c:	cd 01       	movw	r24, r26
    539e:	08 95       	ret

000053a0 <__divmodhi4>:
    53a0:	97 fb       	bst	r25, 7
    53a2:	09 2e       	mov	r0, r25
    53a4:	07 26       	eor	r0, r23
    53a6:	0a d0       	rcall	.+20     	; 0x53bc <__divmodhi4_neg1>
    53a8:	77 fd       	sbrc	r23, 7
    53aa:	04 d0       	rcall	.+8      	; 0x53b4 <__divmodhi4_neg2>
    53ac:	e5 df       	rcall	.-54     	; 0x5378 <__udivmodhi4>
    53ae:	06 d0       	rcall	.+12     	; 0x53bc <__divmodhi4_neg1>
    53b0:	00 20       	and	r0, r0
    53b2:	1a f4       	brpl	.+6      	; 0x53ba <__divmodhi4_exit>

000053b4 <__divmodhi4_neg2>:
    53b4:	70 95       	com	r23
    53b6:	61 95       	neg	r22
    53b8:	7f 4f       	sbci	r23, 0xFF	; 255

000053ba <__divmodhi4_exit>:
    53ba:	08 95       	ret

000053bc <__divmodhi4_neg1>:
    53bc:	f6 f7       	brtc	.-4      	; 0x53ba <__divmodhi4_exit>
    53be:	90 95       	com	r25
    53c0:	81 95       	neg	r24
    53c2:	9f 4f       	sbci	r25, 0xFF	; 255
    53c4:	08 95       	ret

000053c6 <__udivmodsi4>:
    53c6:	a1 e2       	ldi	r26, 0x21	; 33
    53c8:	1a 2e       	mov	r1, r26
    53ca:	aa 1b       	sub	r26, r26
    53cc:	bb 1b       	sub	r27, r27
    53ce:	fd 01       	movw	r30, r26
    53d0:	0d c0       	rjmp	.+26     	; 0x53ec <__udivmodsi4_ep>

000053d2 <__udivmodsi4_loop>:
    53d2:	aa 1f       	adc	r26, r26
    53d4:	bb 1f       	adc	r27, r27
    53d6:	ee 1f       	adc	r30, r30
    53d8:	ff 1f       	adc	r31, r31
    53da:	a2 17       	cp	r26, r18
    53dc:	b3 07       	cpc	r27, r19
    53de:	e4 07       	cpc	r30, r20
    53e0:	f5 07       	cpc	r31, r21
    53e2:	20 f0       	brcs	.+8      	; 0x53ec <__udivmodsi4_ep>
    53e4:	a2 1b       	sub	r26, r18
    53e6:	b3 0b       	sbc	r27, r19
    53e8:	e4 0b       	sbc	r30, r20
    53ea:	f5 0b       	sbc	r31, r21

000053ec <__udivmodsi4_ep>:
    53ec:	66 1f       	adc	r22, r22
    53ee:	77 1f       	adc	r23, r23
    53f0:	88 1f       	adc	r24, r24
    53f2:	99 1f       	adc	r25, r25
    53f4:	1a 94       	dec	r1
    53f6:	69 f7       	brne	.-38     	; 0x53d2 <__udivmodsi4_loop>
    53f8:	60 95       	com	r22
    53fa:	70 95       	com	r23
    53fc:	80 95       	com	r24
    53fe:	90 95       	com	r25
    5400:	9b 01       	movw	r18, r22
    5402:	ac 01       	movw	r20, r24
    5404:	bd 01       	movw	r22, r26
    5406:	cf 01       	movw	r24, r30
    5408:	08 95       	ret

0000540a <__divmodsi4>:
    540a:	97 fb       	bst	r25, 7
    540c:	09 2e       	mov	r0, r25
    540e:	05 26       	eor	r0, r21
    5410:	0e d0       	rcall	.+28     	; 0x542e <__divmodsi4_neg1>
    5412:	57 fd       	sbrc	r21, 7
    5414:	04 d0       	rcall	.+8      	; 0x541e <__divmodsi4_neg2>
    5416:	d7 df       	rcall	.-82     	; 0x53c6 <__udivmodsi4>
    5418:	0a d0       	rcall	.+20     	; 0x542e <__divmodsi4_neg1>
    541a:	00 1c       	adc	r0, r0
    541c:	38 f4       	brcc	.+14     	; 0x542c <__divmodsi4_exit>

0000541e <__divmodsi4_neg2>:
    541e:	50 95       	com	r21
    5420:	40 95       	com	r20
    5422:	30 95       	com	r19
    5424:	21 95       	neg	r18
    5426:	3f 4f       	sbci	r19, 0xFF	; 255
    5428:	4f 4f       	sbci	r20, 0xFF	; 255
    542a:	5f 4f       	sbci	r21, 0xFF	; 255

0000542c <__divmodsi4_exit>:
    542c:	08 95       	ret

0000542e <__divmodsi4_neg1>:
    542e:	f6 f7       	brtc	.-4      	; 0x542c <__divmodsi4_exit>
    5430:	90 95       	com	r25
    5432:	80 95       	com	r24
    5434:	70 95       	com	r23
    5436:	61 95       	neg	r22
    5438:	7f 4f       	sbci	r23, 0xFF	; 255
    543a:	8f 4f       	sbci	r24, 0xFF	; 255
    543c:	9f 4f       	sbci	r25, 0xFF	; 255
    543e:	08 95       	ret

00005440 <_exit>:
    5440:	f8 94       	cli

00005442 <__stop_program>:
    5442:	ff cf       	rjmp	.-2      	; 0x5442 <__stop_program>
