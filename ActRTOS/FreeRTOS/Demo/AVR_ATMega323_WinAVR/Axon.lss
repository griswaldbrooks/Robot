
Axon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800200  0000542e  000054c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000542e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002eb  00800292  00800292  00005554  2**0
                  ALLOC
  3 .stab         00005b5c  00000000  00000000  00005554  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002ede  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 01 	jmp	0x268	; 0x268 <__ctors_end>
       4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
       8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
       c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      10:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      14:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      18:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      1c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      20:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      24:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      28:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      2c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      30:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      34:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__vector_13>
      38:	0c 94 fb 10 	jmp	0x21f6	; 0x21f6 <__vector_14>
      3c:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__vector_15>
      40:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__vector_16>
      44:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__vector_17>
      48:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__vector_18>
      4c:	0c 94 95 10 	jmp	0x212a	; 0x212a <__vector_19>
      50:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__vector_20>
      54:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__vector_21>
      58:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__vector_22>
      5c:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_23>
      60:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      64:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_25>
      68:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      6c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__vector_27>
      70:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      74:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_29>
      78:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      7c:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__vector_31>
      80:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__vector_32>
      84:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__vector_33>
      88:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__vector_34>
      8c:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__vector_35>
      90:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <__vector_36>
      94:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      98:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__vector_38>
      9c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      a0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      a4:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__vector_41>
      a8:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__vector_42>
      ac:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <__vector_43>
      b0:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__vector_44>
      b4:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__vector_45>
      b8:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__vector_46>
      bc:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__vector_47>
      c0:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__vector_48>
      c4:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__vector_49>
      c8:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__vector_50>
      cc:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__vector_51>
      d0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      d4:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_53>
      d8:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_54>
      dc:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      e0:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_56>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <uart3Init+0x22>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <TimerPrescaleFactor>:
     166:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000172 <Timer2PrescaleFactor>:
     172:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

00000182 <__c.2089>:
     182:	42 41 44 5f 76 65 63 74 20 63 61 6c 6c 65 64 21     BAD_vect called!
	...

00000193 <HexChars>:
     193:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

000001a4 <__c.3132>:
     1a4:	25 64 20 25 64 20 25 64 20 25 64 20 25 64 20 25     %d %d %d %d %d %
     1b4:	64 20 25 64 20 25 64 20 25 64 20 25 64 20 25 64     d %d %d %d %d %d
     1c4:	20 25 64 20 25 64 20 25 64 20 25 64 20 25 64 20      %d %d %d %d %d 
     1d4:	25 64 20 25 64 0d 0a 00                             %d %d...

000001dc <__c.3157>:
     1dc:	25 64 0d 0a 00                                      %d...

000001e1 <__c.3175>:
     1e1:	4c 45 46 54 20 44 49 52 3a 25 64 2c 20 4c 45 46     LEFT DIR:%d, LEF
     1f1:	54 20 44 53 54 3a 25 64 2c 20 52 49 47 48 54 20     T DST:%d, RIGHT 
     201:	44 49 52 3a 25 64 2c 20 52 49 47 48 54 20 44 53     DIR:%d, RIGHT DS
     211:	54 3a 25 64 0a 2c 00                                T:%d.,.

00000218 <__c.3173>:
     218:	20 25 64 2c 20 25 64 2c 20 25 64 2c 20 25 64 20      %d, %d, %d, %d 
     228:	0a 20 25 64 20 25 64 20 25 64 20 25 64 20 0a 00     . %d %d %d %d ..

00000238 <__c.3241>:
     238:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 43     Initialization C
     248:	6f 6d 70 6c 65 74 65 20 0d 0a 00                    omplete ...

00000253 <__c.3236>:
     253:	2e 00                                               ..

00000255 <__c.3234>:
     255:	0d 0a 53 79 73 74 65 6d 20 57 61 72 6d 65 64 20     ..System Warmed 
     265:	55 70 00                                            Up.

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	d1 e2       	ldi	r29, 0x21	; 33
     270:	de bf       	out	0x3e, r29	; 62
     272:	cd bf       	out	0x3d, r28	; 61

00000274 <__do_copy_data>:
     274:	12 e0       	ldi	r17, 0x02	; 2
     276:	a0 e0       	ldi	r26, 0x00	; 0
     278:	b2 e0       	ldi	r27, 0x02	; 2
     27a:	ee e2       	ldi	r30, 0x2E	; 46
     27c:	f4 e5       	ldi	r31, 0x54	; 84
     27e:	02 c0       	rjmp	.+4      	; 0x284 <.do_copy_data_start>

00000280 <.do_copy_data_loop>:
     280:	05 90       	lpm	r0, Z+
     282:	0d 92       	st	X+, r0

00000284 <.do_copy_data_start>:
     284:	a2 39       	cpi	r26, 0x92	; 146
     286:	b1 07       	cpc	r27, r17
     288:	d9 f7       	brne	.-10     	; 0x280 <.do_copy_data_loop>

0000028a <__do_clear_bss>:
     28a:	15 e0       	ldi	r17, 0x05	; 5
     28c:	a2 e9       	ldi	r26, 0x92	; 146
     28e:	b2 e0       	ldi	r27, 0x02	; 2
     290:	01 c0       	rjmp	.+2      	; 0x294 <.do_clear_bss_start>

00000292 <.do_clear_bss_loop>:
     292:	1d 92       	st	X+, r1

00000294 <.do_clear_bss_start>:
     294:	ad 37       	cpi	r26, 0x7D	; 125
     296:	b1 07       	cpc	r27, r17
     298:	e1 f7       	brne	.-8      	; 0x292 <.do_clear_bss_loop>
     29a:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <main>
     29e:	0c 94 15 2a 	jmp	0x542a	; 0x542a <_exit>

000002a2 <__bad_interrupt>:
     2a2:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__vector_default>

000002a6 <a2dInit>:

// functions

// initialize a2d converter
void a2dInit(void)
{
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
     2ae:	aa e7       	ldi	r26, 0x7A	; 122
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 68       	ori	r24, 0x80	; 128
     2ba:	8c 93       	st	X, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
     2bc:	aa e7       	ldi	r26, 0x7A	; 122
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	ea e7       	ldi	r30, 0x7A	; 122
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	8f 7d       	andi	r24, 0xDF	; 223
     2c8:	8c 93       	st	X, r24
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
     2ca:	86 e0       	ldi	r24, 0x06	; 6
     2cc:	0e 94 94 01 	call	0x328	; 0x328 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE);	// set default reference
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0e 94 a8 01 	call	0x350	; 0x350 <a2dSetReference>
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
     2d6:	ac e7       	ldi	r26, 0x7C	; 124
     2d8:	b0 e0       	ldi	r27, 0x00	; 0
     2da:	ec e7       	ldi	r30, 0x7C	; 124
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	8f 7d       	andi	r24, 0xDF	; 223
     2e2:	8c 93       	st	X, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
     2e4:	aa e7       	ldi	r26, 0x7A	; 122
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	ea e7       	ldi	r30, 0x7A	; 122
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	88 60       	ori	r24, 0x08	; 8
     2f0:	8c 93       	st	X, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
     2f2:	10 92 10 05 	sts	0x0510, r1
	sei();							// turn on interrupts (if not already on)
     2f6:	78 94       	sei
}
     2f8:	cf 91       	pop	r28
     2fa:	df 91       	pop	r29
     2fc:	08 95       	ret

000002fe <a2dOff>:

// turn off a2d converter
void a2dOff(void)
{
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
	cbi(ADCSR, ADIE);				// disable ADC interrupts
     306:	aa e7       	ldi	r26, 0x7A	; 122
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	ea e7       	ldi	r30, 0x7A	; 122
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	87 7f       	andi	r24, 0xF7	; 247
     312:	8c 93       	st	X, r24
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
     314:	aa e7       	ldi	r26, 0x7A	; 122
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	ea e7       	ldi	r30, 0x7A	; 122
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	8f 77       	andi	r24, 0x7F	; 127
     320:	8c 93       	st	X, r24
}
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	0f 92       	push	r0
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	89 83       	std	Y+1, r24	; 0x01
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
     334:	aa e7       	ldi	r26, 0x7A	; 122
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	ea e7       	ldi	r30, 0x7A	; 122
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	98 2f       	mov	r25, r24
     340:	98 7f       	andi	r25, 0xF8	; 248
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	89 2b       	or	r24, r25
     346:	8c 93       	st	X, r24
}
     348:	0f 90       	pop	r0
     34a:	cf 91       	pop	r28
     34c:	df 91       	pop	r29
     34e:	08 95       	ret

00000350 <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	0f 92       	push	r0
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	89 83       	std	Y+1, r24	; 0x01
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
     35c:	ac e7       	ldi	r26, 0x7C	; 124
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	ec e7       	ldi	r30, 0x7C	; 124
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	28 2f       	mov	r18, r24
     368:	2f 73       	andi	r18, 0x3F	; 63
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	88 2f       	mov	r24, r24
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	00 24       	eor	r0, r0
     372:	96 95       	lsr	r25
     374:	87 95       	ror	r24
     376:	07 94       	ror	r0
     378:	96 95       	lsr	r25
     37a:	87 95       	ror	r24
     37c:	07 94       	ror	r0
     37e:	98 2f       	mov	r25, r24
     380:	80 2d       	mov	r24, r0
     382:	82 2b       	or	r24, r18
     384:	8c 93       	st	X, r24
}
     386:	0f 90       	pop	r0
     388:	cf 91       	pop	r28
     38a:	df 91       	pop	r29
     38c:	08 95       	ret

0000038e <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
     38e:	df 93       	push	r29
     390:	cf 93       	push	r28
     392:	0f 92       	push	r0
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	89 83       	std	Y+1, r24	; 0x01
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
     39a:	ac e7       	ldi	r26, 0x7C	; 124
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	ec e7       	ldi	r30, 0x7C	; 124
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	98 2f       	mov	r25, r24
     3a6:	90 7e       	andi	r25, 0xE0	; 224
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	8f 71       	andi	r24, 0x1F	; 31
     3ac:	89 2b       	or	r24, r25
     3ae:	8c 93       	st	X, r24
}
     3b0:	0f 90       	pop	r0
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
     3c0:	aa e7       	ldi	r26, 0x7A	; 122
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	ea e7       	ldi	r30, 0x7A	; 122
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	80 61       	ori	r24, 0x10	; 16
     3cc:	8c 93       	st	X, r24
	sbi(ADCSR, ADSC);	// start conversion
     3ce:	aa e7       	ldi	r26, 0x7A	; 122
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	ea e7       	ldi	r30, 0x7A	; 122
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	80 64       	ori	r24, 0x40	; 64
     3da:	8c 93       	st	X, r24
}
     3dc:	cf 91       	pop	r28
     3de:	df 91       	pop	r29
     3e0:	08 95       	ret

000003e2 <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
	return bit_is_set(ADCSR, ADSC);
     3ea:	ea e7       	ldi	r30, 0x7A	; 122
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	80 74       	andi	r24, 0x40	; 64
}
     3f2:	cf 91       	pop	r28
     3f4:	df 91       	pop	r29
     3f6:	08 95       	ret

000003f8 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
     3f8:	df 93       	push	r29
     3fa:	cf 93       	push	r28
     3fc:	0f 92       	push	r0
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	89 83       	std	Y+1, r24	; 0x01
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
     404:	10 92 10 05 	sts	0x0510, r1

if (ch >= 8)
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	88 30       	cpi	r24, 0x08	; 8
     40c:	40 f0       	brcs	.+16     	; 0x41e <a2dConvert10bit+0x26>
    ADCSRB |= _BV(MUX5);
     40e:	ab e7       	ldi	r26, 0x7B	; 123
     410:	b0 e0       	ldi	r27, 0x00	; 0
     412:	eb e7       	ldi	r30, 0x7B	; 123
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	8c 93       	st	X, r24
     41c:	07 c0       	rjmp	.+14     	; 0x42c <a2dConvert10bit+0x34>
else
    ADCSRB &= ~_BV(MUX5);
     41e:	ab e7       	ldi	r26, 0x7B	; 123
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	eb e7       	ldi	r30, 0x7B	; 123
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	87 7f       	andi	r24, 0xF7	; 247
     42a:	8c 93       	st	X, r24

   outb(ADMUX, (inb(ADMUX) & ~7) | (ch & 7));   // set channel
     42c:	ac e7       	ldi	r26, 0x7C	; 124
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	ec e7       	ldi	r30, 0x7C	; 124
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	98 2f       	mov	r25, r24
     438:	98 7f       	andi	r25, 0xF8	; 248
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	87 70       	andi	r24, 0x07	; 7
     43e:	89 2b       	or	r24, r25
     440:	8c 93       	st	X, r24

	//outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
     442:	aa e7       	ldi	r26, 0x7A	; 122
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	ea e7       	ldi	r30, 0x7A	; 122
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	80 61       	ori	r24, 0x10	; 16
     44e:	8c 93       	st	X, r24
	sbi(ADCSR, ADSC);						// start conversion
     450:	aa e7       	ldi	r26, 0x7A	; 122
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	ea e7       	ldi	r30, 0x7A	; 122
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	80 64       	ori	r24, 0x40	; 64
     45c:	8c 93       	st	X, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
     45e:	ea e7       	ldi	r30, 0x7A	; 122
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	80 74       	andi	r24, 0x40	; 64
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	00 97       	sbiw	r24, 0x00	; 0
     46e:	b9 f7       	brne	.-18     	; 0x45e <a2dConvert10bit+0x66>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	//return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits) //old version
	return ADC;//new version code
     470:	e8 e7       	ldi	r30, 0x78	; 120
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	91 81       	ldd	r25, Z+1	; 0x01
}
     478:	0f 90       	pop	r0
     47a:	cf 91       	pop	r28
     47c:	df 91       	pop	r29
     47e:	08 95       	ret

00000480 <a2dConvert8bit>:

// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
     480:	df 93       	push	r29
     482:	cf 93       	push	r28
     484:	0f 92       	push	r0
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <a2dConvert10bit>
     492:	96 95       	lsr	r25
     494:	87 95       	ror	r24
     496:	96 95       	lsr	r25
     498:	87 95       	ror	r24
}
     49a:	0f 90       	pop	r0
     49c:	cf 91       	pop	r28
     49e:	df 91       	pop	r29
     4a0:	08 95       	ret

000004a2 <__vector_29>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
     4ac:	8f 93       	push	r24
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
     4b6:	8f ef       	ldi	r24, 0xFF	; 255
     4b8:	80 93 10 05 	sts	0x0510, r24
}
     4bc:	cf 91       	pop	r28
     4be:	df 91       	pop	r29
     4c0:	8f 91       	pop	r24
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	27 97       	sbiw	r28, 0x07	; 7
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	9b 83       	std	Y+3, r25	; 0x03
     4e2:	8a 83       	std	Y+2, r24	; 0x02
     4e4:	7d 83       	std	Y+5, r23	; 0x05
     4e6:	6c 83       	std	Y+4, r22	; 0x04
     4e8:	5f 83       	std	Y+7, r21	; 0x07
     4ea:	4e 83       	std	Y+6, r20	; 0x06
	// begin critical section
	CRITICAL_SECTION_START;
     4ec:	ef e5       	ldi	r30, 0x5F	; 95
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
     4f6:	ea 81       	ldd	r30, Y+2	; 0x02
     4f8:	fb 81       	ldd	r31, Y+3	; 0x03
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	9d 81       	ldd	r25, Y+5	; 0x05
     4fe:	91 83       	std	Z+1, r25	; 0x01
     500:	80 83       	st	Z, r24
	buffer->size = size;
     502:	ea 81       	ldd	r30, Y+2	; 0x02
     504:	fb 81       	ldd	r31, Y+3	; 0x03
     506:	8e 81       	ldd	r24, Y+6	; 0x06
     508:	9f 81       	ldd	r25, Y+7	; 0x07
     50a:	93 83       	std	Z+3, r25	; 0x03
     50c:	82 83       	std	Z+2, r24	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
     50e:	ea 81       	ldd	r30, Y+2	; 0x02
     510:	fb 81       	ldd	r31, Y+3	; 0x03
     512:	17 82       	std	Z+7, r1	; 0x07
     514:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
     516:	ea 81       	ldd	r30, Y+2	; 0x02
     518:	fb 81       	ldd	r31, Y+3	; 0x03
     51a:	15 82       	std	Z+5, r1	; 0x05
     51c:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     51e:	ef e5       	ldi	r30, 0x5F	; 95
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	80 83       	st	Z, r24
}
     526:	27 96       	adiw	r28, 0x07	; 7
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	cf 91       	pop	r28
     534:	df 91       	pop	r29
     536:	08 95       	ret

00000538 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
     538:	df 93       	push	r29
     53a:	cf 93       	push	r28
     53c:	00 d0       	rcall	.+0      	; 0x53e <bufferGetFromFront+0x6>
     53e:	00 d0       	rcall	.+0      	; 0x540 <bufferGetFromFront+0x8>
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	9c 83       	std	Y+4, r25	; 0x04
     546:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char data = 0;
     548:	1a 82       	std	Y+2, r1	; 0x02
	// begin critical section
	CRITICAL_SECTION_START;
     54a:	ef e5       	ldi	r30, 0x5F	; 95
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     554:	eb 81       	ldd	r30, Y+3	; 0x03
     556:	fc 81       	ldd	r31, Y+4	; 0x04
     558:	84 81       	ldd	r24, Z+4	; 0x04
     55a:	95 81       	ldd	r25, Z+5	; 0x05
     55c:	00 97       	sbiw	r24, 0x00	; 0
     55e:	d1 f1       	breq	.+116    	; 0x5d4 <bufferGetFromFront+0x9c>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     560:	eb 81       	ldd	r30, Y+3	; 0x03
     562:	fc 81       	ldd	r31, Y+4	; 0x04
     564:	20 81       	ld	r18, Z
     566:	31 81       	ldd	r19, Z+1	; 0x01
     568:	eb 81       	ldd	r30, Y+3	; 0x03
     56a:	fc 81       	ldd	r31, Y+4	; 0x04
     56c:	86 81       	ldd	r24, Z+6	; 0x06
     56e:	97 81       	ldd	r25, Z+7	; 0x07
     570:	f9 01       	movw	r30, r18
     572:	e8 0f       	add	r30, r24
     574:	f9 1f       	adc	r31, r25
     576:	80 81       	ld	r24, Z
     578:	8a 83       	std	Y+2, r24	; 0x02
		// move index down and decrement length
		buffer->dataindex++;
     57a:	eb 81       	ldd	r30, Y+3	; 0x03
     57c:	fc 81       	ldd	r31, Y+4	; 0x04
     57e:	86 81       	ldd	r24, Z+6	; 0x06
     580:	97 81       	ldd	r25, Z+7	; 0x07
     582:	01 96       	adiw	r24, 0x01	; 1
     584:	eb 81       	ldd	r30, Y+3	; 0x03
     586:	fc 81       	ldd	r31, Y+4	; 0x04
     588:	97 83       	std	Z+7, r25	; 0x07
     58a:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
     58c:	eb 81       	ldd	r30, Y+3	; 0x03
     58e:	fc 81       	ldd	r31, Y+4	; 0x04
     590:	26 81       	ldd	r18, Z+6	; 0x06
     592:	37 81       	ldd	r19, Z+7	; 0x07
     594:	eb 81       	ldd	r30, Y+3	; 0x03
     596:	fc 81       	ldd	r31, Y+4	; 0x04
     598:	82 81       	ldd	r24, Z+2	; 0x02
     59a:	93 81       	ldd	r25, Z+3	; 0x03
     59c:	28 17       	cp	r18, r24
     59e:	39 07       	cpc	r19, r25
     5a0:	80 f0       	brcs	.+32     	; 0x5c2 <bufferGetFromFront+0x8a>
		{
			buffer->dataindex -= buffer->size;
     5a2:	eb 81       	ldd	r30, Y+3	; 0x03
     5a4:	fc 81       	ldd	r31, Y+4	; 0x04
     5a6:	26 81       	ldd	r18, Z+6	; 0x06
     5a8:	37 81       	ldd	r19, Z+7	; 0x07
     5aa:	eb 81       	ldd	r30, Y+3	; 0x03
     5ac:	fc 81       	ldd	r31, Y+4	; 0x04
     5ae:	82 81       	ldd	r24, Z+2	; 0x02
     5b0:	93 81       	ldd	r25, Z+3	; 0x03
     5b2:	a9 01       	movw	r20, r18
     5b4:	48 1b       	sub	r20, r24
     5b6:	59 0b       	sbc	r21, r25
     5b8:	ca 01       	movw	r24, r20
     5ba:	eb 81       	ldd	r30, Y+3	; 0x03
     5bc:	fc 81       	ldd	r31, Y+4	; 0x04
     5be:	97 83       	std	Z+7, r25	; 0x07
     5c0:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength--;
     5c2:	eb 81       	ldd	r30, Y+3	; 0x03
     5c4:	fc 81       	ldd	r31, Y+4	; 0x04
     5c6:	84 81       	ldd	r24, Z+4	; 0x04
     5c8:	95 81       	ldd	r25, Z+5	; 0x05
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	eb 81       	ldd	r30, Y+3	; 0x03
     5ce:	fc 81       	ldd	r31, Y+4	; 0x04
     5d0:	95 83       	std	Z+5, r25	; 0x05
     5d2:	84 83       	std	Z+4, r24	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     5d4:	ef e5       	ldi	r30, 0x5F	; 95
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	80 83       	st	Z, r24
	// return
	return data;
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
}
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	cf 91       	pop	r28
     5e8:	df 91       	pop	r29
     5ea:	08 95       	ret

000005ec <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <bufferDumpFromFront+0x6>
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <bufferDumpFromFront+0x8>
     5f4:	0f 92       	push	r0
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	9b 83       	std	Y+3, r25	; 0x03
     5fc:	8a 83       	std	Y+2, r24	; 0x02
     5fe:	7d 83       	std	Y+5, r23	; 0x05
     600:	6c 83       	std	Y+4, r22	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     602:	ef e5       	ldi	r30, 0x5F	; 95
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
     60c:	ea 81       	ldd	r30, Y+2	; 0x02
     60e:	fb 81       	ldd	r31, Y+3	; 0x03
     610:	24 81       	ldd	r18, Z+4	; 0x04
     612:	35 81       	ldd	r19, Z+5	; 0x05
     614:	8c 81       	ldd	r24, Y+4	; 0x04
     616:	9d 81       	ldd	r25, Y+5	; 0x05
     618:	82 17       	cp	r24, r18
     61a:	93 07       	cpc	r25, r19
     61c:	b0 f5       	brcc	.+108    	; 0x68a <bufferDumpFromFront+0x9e>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
     61e:	ea 81       	ldd	r30, Y+2	; 0x02
     620:	fb 81       	ldd	r31, Y+3	; 0x03
     622:	26 81       	ldd	r18, Z+6	; 0x06
     624:	37 81       	ldd	r19, Z+7	; 0x07
     626:	8c 81       	ldd	r24, Y+4	; 0x04
     628:	9d 81       	ldd	r25, Y+5	; 0x05
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	ea 81       	ldd	r30, Y+2	; 0x02
     630:	fb 81       	ldd	r31, Y+3	; 0x03
     632:	97 83       	std	Z+7, r25	; 0x07
     634:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
     636:	ea 81       	ldd	r30, Y+2	; 0x02
     638:	fb 81       	ldd	r31, Y+3	; 0x03
     63a:	26 81       	ldd	r18, Z+6	; 0x06
     63c:	37 81       	ldd	r19, Z+7	; 0x07
     63e:	ea 81       	ldd	r30, Y+2	; 0x02
     640:	fb 81       	ldd	r31, Y+3	; 0x03
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	28 17       	cp	r18, r24
     648:	39 07       	cpc	r19, r25
     64a:	80 f0       	brcs	.+32     	; 0x66c <bufferDumpFromFront+0x80>
		{
			buffer->dataindex -= buffer->size;
     64c:	ea 81       	ldd	r30, Y+2	; 0x02
     64e:	fb 81       	ldd	r31, Y+3	; 0x03
     650:	26 81       	ldd	r18, Z+6	; 0x06
     652:	37 81       	ldd	r19, Z+7	; 0x07
     654:	ea 81       	ldd	r30, Y+2	; 0x02
     656:	fb 81       	ldd	r31, Y+3	; 0x03
     658:	82 81       	ldd	r24, Z+2	; 0x02
     65a:	93 81       	ldd	r25, Z+3	; 0x03
     65c:	a9 01       	movw	r20, r18
     65e:	48 1b       	sub	r20, r24
     660:	59 0b       	sbc	r21, r25
     662:	ca 01       	movw	r24, r20
     664:	ea 81       	ldd	r30, Y+2	; 0x02
     666:	fb 81       	ldd	r31, Y+3	; 0x03
     668:	97 83       	std	Z+7, r25	; 0x07
     66a:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
     66c:	ea 81       	ldd	r30, Y+2	; 0x02
     66e:	fb 81       	ldd	r31, Y+3	; 0x03
     670:	24 81       	ldd	r18, Z+4	; 0x04
     672:	35 81       	ldd	r19, Z+5	; 0x05
     674:	8c 81       	ldd	r24, Y+4	; 0x04
     676:	9d 81       	ldd	r25, Y+5	; 0x05
     678:	a9 01       	movw	r20, r18
     67a:	48 1b       	sub	r20, r24
     67c:	59 0b       	sbc	r21, r25
     67e:	ca 01       	movw	r24, r20
     680:	ea 81       	ldd	r30, Y+2	; 0x02
     682:	fb 81       	ldd	r31, Y+3	; 0x03
     684:	95 83       	std	Z+5, r25	; 0x05
     686:	84 83       	std	Z+4, r24	; 0x04
     688:	04 c0       	rjmp	.+8      	; 0x692 <bufferDumpFromFront+0xa6>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
     68a:	ea 81       	ldd	r30, Y+2	; 0x02
     68c:	fb 81       	ldd	r31, Y+3	; 0x03
     68e:	15 82       	std	Z+5, r1	; 0x05
     690:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     692:	ef e5       	ldi	r30, 0x5F	; 95
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	80 83       	st	Z, r24
}
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	cf 91       	pop	r28
     6a6:	df 91       	pop	r29
     6a8:	08 95       	ret

000006aa <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	df 93       	push	r29
     6b0:	cf 93       	push	r28
     6b2:	00 d0       	rcall	.+0      	; 0x6b4 <bufferGetAtIndex+0xa>
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <bufferGetAtIndex+0xc>
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <bufferGetAtIndex+0xe>
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	9c 83       	std	Y+4, r25	; 0x04
     6be:	8b 83       	std	Y+3, r24	; 0x03
     6c0:	7e 83       	std	Y+6, r23	; 0x06
     6c2:	6d 83       	std	Y+5, r22	; 0x05
	// begin critical section
	CRITICAL_SECTION_START;
     6c4:	ef e5       	ldi	r30, 0x5F	; 95
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	8a 83       	std	Y+2, r24	; 0x02
     6cc:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
     6ce:	eb 81       	ldd	r30, Y+3	; 0x03
     6d0:	fc 81       	ldd	r31, Y+4	; 0x04
     6d2:	00 81       	ld	r16, Z
     6d4:	11 81       	ldd	r17, Z+1	; 0x01
     6d6:	eb 81       	ldd	r30, Y+3	; 0x03
     6d8:	fc 81       	ldd	r31, Y+4	; 0x04
     6da:	26 81       	ldd	r18, Z+6	; 0x06
     6dc:	37 81       	ldd	r19, Z+7	; 0x07
     6de:	8d 81       	ldd	r24, Y+5	; 0x05
     6e0:	9e 81       	ldd	r25, Y+6	; 0x06
     6e2:	82 0f       	add	r24, r18
     6e4:	93 1f       	adc	r25, r19
     6e6:	eb 81       	ldd	r30, Y+3	; 0x03
     6e8:	fc 81       	ldd	r31, Y+4	; 0x04
     6ea:	22 81       	ldd	r18, Z+2	; 0x02
     6ec:	33 81       	ldd	r19, Z+3	; 0x03
     6ee:	b9 01       	movw	r22, r18
     6f0:	0e 94 b1 29 	call	0x5362	; 0x5362 <__udivmodhi4>
     6f4:	f8 01       	movw	r30, r16
     6f6:	e8 0f       	add	r30, r24
     6f8:	f9 1f       	adc	r31, r25
     6fa:	80 81       	ld	r24, Z
     6fc:	89 83       	std	Y+1, r24	; 0x01
	// end critical section
	CRITICAL_SECTION_END;
     6fe:	ef e5       	ldi	r30, 0x5F	; 95
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	8a 81       	ldd	r24, Y+2	; 0x02
     704:	80 83       	st	Z, r24
	return data;
     706:	89 81       	ldd	r24, Y+1	; 0x01
}
     708:	26 96       	adiw	r28, 0x06	; 6
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	cf 91       	pop	r28
     716:	df 91       	pop	r29
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	df 93       	push	r29
     724:	cf 93       	push	r28
     726:	00 d0       	rcall	.+0      	; 0x728 <bufferAddToEnd+0xa>
     728:	00 d0       	rcall	.+0      	; 0x72a <bufferAddToEnd+0xc>
     72a:	0f 92       	push	r0
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	9b 83       	std	Y+3, r25	; 0x03
     732:	8a 83       	std	Y+2, r24	; 0x02
     734:	6c 83       	std	Y+4, r22	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     736:	ef e5       	ldi	r30, 0x5F	; 95
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     740:	ea 81       	ldd	r30, Y+2	; 0x02
     742:	fb 81       	ldd	r31, Y+3	; 0x03
     744:	24 81       	ldd	r18, Z+4	; 0x04
     746:	35 81       	ldd	r19, Z+5	; 0x05
     748:	ea 81       	ldd	r30, Y+2	; 0x02
     74a:	fb 81       	ldd	r31, Y+3	; 0x03
     74c:	82 81       	ldd	r24, Z+2	; 0x02
     74e:	93 81       	ldd	r25, Z+3	; 0x03
     750:	28 17       	cp	r18, r24
     752:	39 07       	cpc	r19, r25
     754:	50 f5       	brcc	.+84     	; 0x7aa <bufferAddToEnd+0x8c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     756:	ea 81       	ldd	r30, Y+2	; 0x02
     758:	fb 81       	ldd	r31, Y+3	; 0x03
     75a:	00 81       	ld	r16, Z
     75c:	11 81       	ldd	r17, Z+1	; 0x01
     75e:	ea 81       	ldd	r30, Y+2	; 0x02
     760:	fb 81       	ldd	r31, Y+3	; 0x03
     762:	26 81       	ldd	r18, Z+6	; 0x06
     764:	37 81       	ldd	r19, Z+7	; 0x07
     766:	ea 81       	ldd	r30, Y+2	; 0x02
     768:	fb 81       	ldd	r31, Y+3	; 0x03
     76a:	84 81       	ldd	r24, Z+4	; 0x04
     76c:	95 81       	ldd	r25, Z+5	; 0x05
     76e:	82 0f       	add	r24, r18
     770:	93 1f       	adc	r25, r19
     772:	ea 81       	ldd	r30, Y+2	; 0x02
     774:	fb 81       	ldd	r31, Y+3	; 0x03
     776:	22 81       	ldd	r18, Z+2	; 0x02
     778:	33 81       	ldd	r19, Z+3	; 0x03
     77a:	b9 01       	movw	r22, r18
     77c:	0e 94 b1 29 	call	0x5362	; 0x5362 <__udivmodhi4>
     780:	f8 01       	movw	r30, r16
     782:	e8 0f       	add	r30, r24
     784:	f9 1f       	adc	r31, r25
     786:	8c 81       	ldd	r24, Y+4	; 0x04
     788:	80 83       	st	Z, r24
		// increment the length
		buffer->datalength++;
     78a:	ea 81       	ldd	r30, Y+2	; 0x02
     78c:	fb 81       	ldd	r31, Y+3	; 0x03
     78e:	84 81       	ldd	r24, Z+4	; 0x04
     790:	95 81       	ldd	r25, Z+5	; 0x05
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	ea 81       	ldd	r30, Y+2	; 0x02
     796:	fb 81       	ldd	r31, Y+3	; 0x03
     798:	95 83       	std	Z+5, r25	; 0x05
     79a:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     79c:	ef e5       	ldi	r30, 0x5F	; 95
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	80 83       	st	Z, r24
		// return success
		return -1;
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	8d 83       	std	Y+5, r24	; 0x05
     7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <bufferAddToEnd+0x96>
	}
	// end critical section
	CRITICAL_SECTION_END;
     7aa:	ef e5       	ldi	r30, 0x5F	; 95
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	80 83       	st	Z, r24
	// return failure
	return 0;
     7b2:	1d 82       	std	Y+5, r1	; 0x05
     7b4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	cf 91       	pop	r28
     7c2:	df 91       	pop	r29
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	08 95       	ret

000007ca <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     7ca:	df 93       	push	r29
     7cc:	cf 93       	push	r28
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <bufferIsNotFull+0x6>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <bufferIsNotFull+0x8>
     7d2:	0f 92       	push	r0
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	9d 83       	std	Y+5, r25	; 0x05
     7da:	8c 83       	std	Y+4, r24	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     7dc:	ef e5       	ldi	r30, 0x5F	; 95
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	8b 83       	std	Y+3, r24	; 0x03
     7e4:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     7e6:	ec 81       	ldd	r30, Y+4	; 0x04
     7e8:	fd 81       	ldd	r31, Y+5	; 0x05
     7ea:	22 81       	ldd	r18, Z+2	; 0x02
     7ec:	33 81       	ldd	r19, Z+3	; 0x03
     7ee:	ec 81       	ldd	r30, Y+4	; 0x04
     7f0:	fd 81       	ldd	r31, Y+5	; 0x05
     7f2:	84 81       	ldd	r24, Z+4	; 0x04
     7f4:	95 81       	ldd	r25, Z+5	; 0x05
     7f6:	a9 01       	movw	r20, r18
     7f8:	48 1b       	sub	r20, r24
     7fa:	59 0b       	sbc	r21, r25
     7fc:	ca 01       	movw	r24, r20
     7fe:	9a 83       	std	Y+2, r25	; 0x02
     800:	89 83       	std	Y+1, r24	; 0x01
	// end critical section
	CRITICAL_SECTION_END;
     802:	ef e5       	ldi	r30, 0x5F	; 95
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	8b 81       	ldd	r24, Y+3	; 0x03
     808:	80 83       	st	Z, r24
	return bytesleft;
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	cf 91       	pop	r28
     81a:	df 91       	pop	r29
     81c:	08 95       	ret

0000081e <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
     81e:	df 93       	push	r29
     820:	cf 93       	push	r28
     822:	00 d0       	rcall	.+0      	; 0x824 <bufferFlush+0x6>
     824:	0f 92       	push	r0
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	9b 83       	std	Y+3, r25	; 0x03
     82c:	8a 83       	std	Y+2, r24	; 0x02
	// begin critical section
	CRITICAL_SECTION_START;
     82e:	ef e5       	ldi	r30, 0x5F	; 95
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	89 83       	std	Y+1, r24	; 0x01
     836:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
     838:	ea 81       	ldd	r30, Y+2	; 0x02
     83a:	fb 81       	ldd	r31, Y+3	; 0x03
     83c:	15 82       	std	Z+5, r1	; 0x05
     83e:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     840:	ef e5       	ldi	r30, 0x5F	; 95
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	80 83       	st	Z, r24
}
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	cf 91       	pop	r28
     850:	df 91       	pop	r29
     852:	08 95       	ret

00000854 <uartInit>:

typedef void (*voidFuncPtru08)(unsigned char);
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
	// initialize all uarts
	uart0Init();
     85c:	0e 94 39 04 	call	0x872	; 0x872 <uart0Init>
	uart1Init();
     860:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <uart1Init>
	uart2Init();
     864:	0e 94 7d 04 	call	0x8fa	; 0x8fa <uart2Init>
	uart3Init();
     868:	0e 94 9f 04 	call	0x93e	; 0x93e <uart3Init>
}
     86c:	cf 91       	pop	r28
     86e:	df 91       	pop	r29
     870:	08 95       	ret

00000872 <uart0Init>:

void uart0Init(void)
{
     872:	df 93       	push	r29
     874:	cf 93       	push	r28
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
	// initialize the buffers
	uart0InitBuffers();
     87a:	0e 94 c1 04 	call	0x982	; 0x982 <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
     87e:	10 92 d3 04 	sts	0x04D3, r1
     882:	10 92 d2 04 	sts	0x04D2, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     886:	e1 ec       	ldi	r30, 0xC1	; 193
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	88 ed       	ldi	r24, 0xD8	; 216
     88c:	80 83       	st	Z, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	40 e8       	ldi	r20, 0x80	; 128
     892:	55 e2       	ldi	r21, 0x25	; 37
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	0e 94 43 05 	call	0xa86	; 0xa86 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	80 93 11 05 	sts	0x0511, r24
	uartBufferedTx[0] = FALSE;
     8a2:	10 92 35 05 	sts	0x0535, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
     8a6:	10 92 5a 05 	sts	0x055A, r1
     8aa:	10 92 59 05 	sts	0x0559, r1
	// enable interrupts
	sei();
     8ae:	78 94       	sei
}
     8b0:	cf 91       	pop	r28
     8b2:	df 91       	pop	r29
     8b4:	08 95       	ret

000008b6 <uart1Init>:

void uart1Init(void)
{
     8b6:	df 93       	push	r29
     8b8:	cf 93       	push	r28
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
	// initialize the buffers
	uart1InitBuffers();
     8be:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart1InitBuffers>
	// initialize user receive handlers
	UartRxFunc[1] = 0;
     8c2:	10 92 d5 04 	sts	0x04D5, r1
     8c6:	10 92 d4 04 	sts	0x04D4, r1
	// enable RxD/TxD and interrupts
	outb(UCSR1B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     8ca:	e9 ec       	ldi	r30, 0xC9	; 201
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	88 ed       	ldi	r24, 0xD8	; 216
     8d0:	80 83       	st	Z, r24
	// set default baud rate
	uartSetBaudRate(1, UART1_DEFAULT_BAUD_RATE);
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	55 e2       	ldi	r21, 0x25	; 37
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	0e 94 43 05 	call	0xa86	; 0xa86 <uartSetBaudRate>
	// initialize states
	uartReadyTx[1] = TRUE;
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	80 93 12 05 	sts	0x0512, r24
	uartBufferedTx[1] = FALSE;
     8e6:	10 92 36 05 	sts	0x0536, r1
	// clear overflow count
	uartRxOverflow[1] = 0;
     8ea:	10 92 5c 05 	sts	0x055C, r1
     8ee:	10 92 5b 05 	sts	0x055B, r1
	// enable interrupts
	sei();
     8f2:	78 94       	sei
}
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	08 95       	ret

000008fa <uart2Init>:

void uart2Init(void)
{
     8fa:	df 93       	push	r29
     8fc:	cf 93       	push	r28
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
	// initialize the buffers
	uart2InitBuffers();
     902:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <uart2InitBuffers>
	// initialize user receive handlers
	UartRxFunc[2] = 0;
     906:	10 92 d7 04 	sts	0x04D7, r1
     90a:	10 92 d6 04 	sts	0x04D6, r1
	// enable RxD/TxD and interrupts
	outb(UCSR2B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     90e:	e1 ed       	ldi	r30, 0xD1	; 209
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	88 ed       	ldi	r24, 0xD8	; 216
     914:	80 83       	st	Z, r24
	// set default baud rate
	uartSetBaudRate(2, UART2_DEFAULT_BAUD_RATE);
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	40 e8       	ldi	r20, 0x80	; 128
     91a:	55 e2       	ldi	r21, 0x25	; 37
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	0e 94 43 05 	call	0xa86	; 0xa86 <uartSetBaudRate>
	// initialize states
	uartReadyTx[2] = TRUE;
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	80 93 13 05 	sts	0x0513, r24
	uartBufferedTx[2] = FALSE;
     92a:	10 92 37 05 	sts	0x0537, r1
	// clear overflow count
	uartRxOverflow[2] = 0;
     92e:	10 92 5e 05 	sts	0x055E, r1
     932:	10 92 5d 05 	sts	0x055D, r1
	// enable interrupts
	sei();
     936:	78 94       	sei
}
     938:	cf 91       	pop	r28
     93a:	df 91       	pop	r29
     93c:	08 95       	ret

0000093e <uart3Init>:

void uart3Init(void)
{
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
	// initialize the buffers
	uart3InitBuffers();
     946:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart3InitBuffers>
	// initialize user receive handlers
	UartRxFunc[3] = 0;
     94a:	10 92 d9 04 	sts	0x04D9, r1
     94e:	10 92 d8 04 	sts	0x04D8, r1
	// enable RxD/TxD and interrupts
	outb(UCSR3B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     952:	e1 e3       	ldi	r30, 0x31	; 49
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	88 ed       	ldi	r24, 0xD8	; 216
     958:	80 83       	st	Z, r24
	// set default baud rate
	uartSetBaudRate(3, UART3_DEFAULT_BAUD_RATE);
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	40 e8       	ldi	r20, 0x80	; 128
     95e:	55 e2       	ldi	r21, 0x25	; 37
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	0e 94 43 05 	call	0xa86	; 0xa86 <uartSetBaudRate>
	// initialize states
	uartReadyTx[3] = TRUE;
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	80 93 14 05 	sts	0x0514, r24
	uartBufferedTx[3] = FALSE;
     96e:	10 92 38 05 	sts	0x0538, r1
	// clear overflow count
	uartRxOverflow[3] = 0;
     972:	10 92 60 05 	sts	0x0560, r1
     976:	10 92 5f 05 	sts	0x055F, r1
	// enable interrupts
	sei();
     97a:	78 94       	sei
}
     97c:	cf 91       	pop	r28
     97e:	df 91       	pop	r29
     980:	08 95       	ret

00000982 <uart0InitBuffers>:

void uart0InitBuffers(void)
{
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
     98a:	85 e1       	ldi	r24, 0x15	; 21
     98c:	95 e0       	ldi	r25, 0x05	; 5
     98e:	22 e9       	ldi	r18, 0x92	; 146
     990:	32 e0       	ldi	r19, 0x02	; 2
     992:	b9 01       	movw	r22, r18
     994:	40 e8       	ldi	r20, 0x80	; 128
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	0e 94 66 02 	call	0x4cc	; 0x4cc <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
     99c:	89 e3       	ldi	r24, 0x39	; 57
     99e:	95 e0       	ldi	r25, 0x05	; 5
     9a0:	22 e1       	ldi	r18, 0x12	; 18
     9a2:	33 e0       	ldi	r19, 0x03	; 3
     9a4:	b9 01       	movw	r22, r18
     9a6:	40 e1       	ldi	r20, 0x10	; 16
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	0e 94 66 02 	call	0x4cc	; 0x4cc <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	08 95       	ret

000009b4 <uart1InitBuffers>:

void uart1InitBuffers(void)
{
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) uart1RxData, UART1_RX_BUFFER_SIZE);
     9bc:	8d e1       	ldi	r24, 0x1D	; 29
     9be:	95 e0       	ldi	r25, 0x05	; 5
     9c0:	22 e2       	ldi	r18, 0x22	; 34
     9c2:	33 e0       	ldi	r19, 0x03	; 3
     9c4:	b9 01       	movw	r22, r18
     9c6:	40 e8       	ldi	r20, 0x80	; 128
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	0e 94 66 02 	call	0x4cc	; 0x4cc <bufferInit>
		bufferInit(&uartTxBuffer[1], (u08*) uart1TxData, UART1_TX_BUFFER_SIZE);
     9ce:	81 e4       	ldi	r24, 0x41	; 65
     9d0:	95 e0       	ldi	r25, 0x05	; 5
     9d2:	22 ea       	ldi	r18, 0xA2	; 162
     9d4:	33 e0       	ldi	r19, 0x03	; 3
     9d6:	b9 01       	movw	r22, r18
     9d8:	40 e1       	ldi	r20, 0x10	; 16
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	0e 94 66 02 	call	0x4cc	; 0x4cc <bufferInit>
	#else
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) UART1_RX_BUFFER_ADDR, UART1_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[1], (u08*) UART1_TX_BUFFER_ADDR, UART1_TX_BUFFER_SIZE);
	#endif
}
     9e0:	cf 91       	pop	r28
     9e2:	df 91       	pop	r29
     9e4:	08 95       	ret

000009e6 <uart2InitBuffers>:

void uart2InitBuffers(void)
{
     9e6:	df 93       	push	r29
     9e8:	cf 93       	push	r28
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) uart2RxData, UART2_RX_BUFFER_SIZE);
     9ee:	85 e2       	ldi	r24, 0x25	; 37
     9f0:	95 e0       	ldi	r25, 0x05	; 5
     9f2:	22 eb       	ldi	r18, 0xB2	; 178
     9f4:	33 e0       	ldi	r19, 0x03	; 3
     9f6:	b9 01       	movw	r22, r18
     9f8:	40 e8       	ldi	r20, 0x80	; 128
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	0e 94 66 02 	call	0x4cc	; 0x4cc <bufferInit>
		bufferInit(&uartTxBuffer[2], (u08*) uart2TxData, UART2_TX_BUFFER_SIZE);
     a00:	89 e4       	ldi	r24, 0x49	; 73
     a02:	95 e0       	ldi	r25, 0x05	; 5
     a04:	22 e3       	ldi	r18, 0x32	; 50
     a06:	34 e0       	ldi	r19, 0x04	; 4
     a08:	b9 01       	movw	r22, r18
     a0a:	40 e1       	ldi	r20, 0x10	; 16
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	0e 94 66 02 	call	0x4cc	; 0x4cc <bufferInit>
	#else
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) UART2_RX_BUFFER_ADDR, UART2_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[2], (u08*) UART2_TX_BUFFER_ADDR, UART2_TX_BUFFER_SIZE);
	#endif
}
     a12:	cf 91       	pop	r28
     a14:	df 91       	pop	r29
     a16:	08 95       	ret

00000a18 <uart3InitBuffers>:

void uart3InitBuffers(void)
{
     a18:	df 93       	push	r29
     a1a:	cf 93       	push	r28
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) uart3RxData, UART3_RX_BUFFER_SIZE);
     a20:	8d e2       	ldi	r24, 0x2D	; 45
     a22:	95 e0       	ldi	r25, 0x05	; 5
     a24:	22 e4       	ldi	r18, 0x42	; 66
     a26:	34 e0       	ldi	r19, 0x04	; 4
     a28:	b9 01       	movw	r22, r18
     a2a:	40 e8       	ldi	r20, 0x80	; 128
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	0e 94 66 02 	call	0x4cc	; 0x4cc <bufferInit>
		bufferInit(&uartTxBuffer[3], (u08*) uart3TxData, UART3_TX_BUFFER_SIZE);
     a32:	81 e5       	ldi	r24, 0x51	; 81
     a34:	95 e0       	ldi	r25, 0x05	; 5
     a36:	22 ec       	ldi	r18, 0xC2	; 194
     a38:	34 e0       	ldi	r19, 0x04	; 4
     a3a:	b9 01       	movw	r22, r18
     a3c:	40 e1       	ldi	r20, 0x10	; 16
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	0e 94 66 02 	call	0x4cc	; 0x4cc <bufferInit>
	#else
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) UART3_RX_BUFFER_ADDR, UART3_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[3], (u08*) UART3_TX_BUFFER_ADDR, UART3_TX_BUFFER_SIZE);
	#endif
}
     a44:	cf 91       	pop	r28
     a46:	df 91       	pop	r29
     a48:	08 95       	ret

00000a4a <uartSetRxHandler>:

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <uartSetRxHandler+0x6>
     a50:	0f 92       	push	r0
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	89 83       	std	Y+1, r24	; 0x01
     a58:	7b 83       	std	Y+3, r23	; 0x03
     a5a:	6a 83       	std	Y+2, r22	; 0x02
	// make sure the uart number is within bounds
	if(nUart < 4)
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
     a5e:	84 30       	cpi	r24, 0x04	; 4
     a60:	60 f4       	brcc	.+24     	; 0xa7a <uartSetRxHandler+0x30>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	fc 01       	movw	r30, r24
     a6e:	ee 52       	subi	r30, 0x2E	; 46
     a70:	fb 4f       	sbci	r31, 0xFB	; 251
     a72:	8a 81       	ldd	r24, Y+2	; 0x02
     a74:	9b 81       	ldd	r25, Y+3	; 0x03
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	80 83       	st	Z, r24
	}
}
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	cf 91       	pop	r28
     a82:	df 91       	pop	r29
     a84:	08 95       	ret

00000a86 <uartSetBaudRate>:

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	27 97       	sbiw	r28, 0x07	; 7
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	8b 83       	std	Y+3, r24	; 0x03
     aa4:	4c 83       	std	Y+4, r20	; 0x04
     aa6:	5d 83       	std	Y+5, r21	; 0x05
     aa8:	6e 83       	std	Y+6, r22	; 0x06
     aaa:	7f 83       	std	Y+7, r23	; 0x07
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     aac:	8c 81       	ldd	r24, Y+4	; 0x04
     aae:	9d 81       	ldd	r25, Y+5	; 0x05
     ab0:	ae 81       	ldd	r26, Y+6	; 0x06
     ab2:	bf 81       	ldd	r27, Y+7	; 0x07
     ab4:	80 58       	subi	r24, 0x80	; 128
     ab6:	9b 47       	sbci	r25, 0x7B	; 123
     ab8:	a1 4e       	sbci	r26, 0xE1	; 225
     aba:	bf 4f       	sbci	r27, 0xFF	; 255
     abc:	88 0f       	add	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	aa 1f       	adc	r26, r26
     ac2:	bb 1f       	adc	r27, r27
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	aa 1f       	adc	r26, r26
     aca:	bb 1f       	adc	r27, r27
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	aa 1f       	adc	r26, r26
     ad2:	bb 1f       	adc	r27, r27
     ad4:	7c 01       	movw	r14, r24
     ad6:	8d 01       	movw	r16, r26
     ad8:	8c 81       	ldd	r24, Y+4	; 0x04
     ada:	9d 81       	ldd	r25, Y+5	; 0x05
     adc:	ae 81       	ldd	r26, Y+6	; 0x06
     ade:	bf 81       	ldd	r27, Y+7	; 0x07
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	aa 1f       	adc	r26, r26
     ae6:	bb 1f       	adc	r27, r27
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	aa 1f       	adc	r26, r26
     aee:	bb 1f       	adc	r27, r27
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	aa 1f       	adc	r26, r26
     af6:	bb 1f       	adc	r27, r27
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	aa 1f       	adc	r26, r26
     afe:	bb 1f       	adc	r27, r27
     b00:	9c 01       	movw	r18, r24
     b02:	ad 01       	movw	r20, r26
     b04:	c8 01       	movw	r24, r16
     b06:	b7 01       	movw	r22, r14
     b08:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__udivmodsi4>
     b0c:	da 01       	movw	r26, r20
     b0e:	c9 01       	movw	r24, r18
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	9a 83       	std	Y+2, r25	; 0x02
     b14:	89 83       	std	Y+1, r24	; 0x01
	if(nUart==3)
     b16:	8b 81       	ldd	r24, Y+3	; 0x03
     b18:	83 30       	cpi	r24, 0x03	; 3
     b1a:	61 f4       	brne	.+24     	; 0xb34 <uartSetBaudRate+0xae>
	{
		outb(UBRR3L, bauddiv);
     b1c:	e4 e3       	ldi	r30, 0x34	; 52
     b1e:	f1 e0       	ldi	r31, 0x01	; 1
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	80 83       	st	Z, r24
		#ifdef UBRR3H
		outb(UBRR3H, bauddiv>>8);
     b24:	e5 e3       	ldi	r30, 0x35	; 53
     b26:	f1 e0       	ldi	r31, 0x01	; 1
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	89 2f       	mov	r24, r25
     b2e:	99 27       	eor	r25, r25
     b30:	80 83       	st	Z, r24
     b32:	29 c0       	rjmp	.+82     	; 0xb86 <uartSetBaudRate+0x100>
		#endif
	}
	else if(nUart==2)
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	82 30       	cpi	r24, 0x02	; 2
     b38:	61 f4       	brne	.+24     	; 0xb52 <uartSetBaudRate+0xcc>
	{
		outb(UBRR2L, bauddiv);
     b3a:	e4 ed       	ldi	r30, 0xD4	; 212
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	89 81       	ldd	r24, Y+1	; 0x01
     b40:	80 83       	st	Z, r24
		#ifdef UBRR2H
		outb(UBRR2H, bauddiv>>8);
     b42:	e5 ed       	ldi	r30, 0xD5	; 213
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	89 2f       	mov	r24, r25
     b4c:	99 27       	eor	r25, r25
     b4e:	80 83       	st	Z, r24
     b50:	1a c0       	rjmp	.+52     	; 0xb86 <uartSetBaudRate+0x100>
		#endif
	}
	else if(nUart==1)
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	61 f4       	brne	.+24     	; 0xb70 <uartSetBaudRate+0xea>
	{
		outb(UBRR1L, bauddiv);
     b58:	ec ec       	ldi	r30, 0xCC	; 204
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	80 83       	st	Z, r24
		#ifdef UBRR1H
		outb(UBRR1H, bauddiv>>8);
     b60:	ed ec       	ldi	r30, 0xCD	; 205
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
     b68:	89 2f       	mov	r24, r25
     b6a:	99 27       	eor	r25, r25
     b6c:	80 83       	st	Z, r24
     b6e:	0b c0       	rjmp	.+22     	; 0xb86 <uartSetBaudRate+0x100>
		#endif
	}
	else
	{
		outb(UBRR0L, bauddiv);
     b70:	e4 ec       	ldi	r30, 0xC4	; 196
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	80 83       	st	Z, r24
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
     b78:	e5 ec       	ldi	r30, 0xC5	; 197
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	89 2f       	mov	r24, r25
     b82:	99 27       	eor	r25, r25
     b84:	80 83       	st	Z, r24
		#endif
	}
}
     b86:	27 96       	adiw	r28, 0x07	; 7
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	08 95       	ret

00000ba0 <uartGetRxBuffer>:

cBuffer* uartGetRxBuffer(u08 nUart)
{
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	0f 92       	push	r0
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	89 83       	std	Y+1, r24	; 0x01
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	8b 5e       	subi	r24, 0xEB	; 235
     bc0:	9a 4f       	sbci	r25, 0xFA	; 250
}
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	0f 92       	push	r0
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	89 83       	std	Y+1, r24	; 0x01
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	88 2f       	mov	r24, r24
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	87 5c       	subi	r24, 0xC7	; 199
     bea:	9a 4f       	sbci	r25, 0xFA	; 250
}
     bec:	0f 90       	pop	r0
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <uartSendByte+0x6>
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	6a 83       	std	Y+2, r22	; 0x02
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==3)
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	83 30       	cpi	r24, 0x03	; 3
     c06:	71 f4       	brne	.+28     	; 0xc24 <uartSendByte+0x30>
	{
		while(!(UCSR3A & (1<<UDRE3)));
     c08:	e0 e3       	ldi	r30, 0x30	; 48
     c0a:	f1 e0       	ldi	r31, 0x01	; 1
     c0c:	80 81       	ld	r24, Z
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	80 72       	andi	r24, 0x20	; 32
     c14:	90 70       	andi	r25, 0x00	; 0
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	b9 f3       	breq	.-18     	; 0xc08 <uartSendByte+0x14>
		outb(UDR3, txData);
     c1a:	e6 e3       	ldi	r30, 0x36	; 54
     c1c:	f1 e0       	ldi	r31, 0x01	; 1
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	80 83       	st	Z, r24
     c22:	2f c0       	rjmp	.+94     	; 0xc82 <uartSendByte+0x8e>
	}
	else if(nUart==2)
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	71 f4       	brne	.+28     	; 0xc46 <uartSendByte+0x52>
	{
		while(!(UCSR2A & (1<<UDRE2)));
     c2a:	e0 ed       	ldi	r30, 0xD0	; 208
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	88 2f       	mov	r24, r24
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	80 72       	andi	r24, 0x20	; 32
     c36:	90 70       	andi	r25, 0x00	; 0
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	b9 f3       	breq	.-18     	; 0xc2a <uartSendByte+0x36>
		outb(UDR2, txData);
     c3c:	e6 ed       	ldi	r30, 0xD6	; 214
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	80 83       	st	Z, r24
     c44:	1e c0       	rjmp	.+60     	; 0xc82 <uartSendByte+0x8e>
	}
	else if(nUart==1)
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	71 f4       	brne	.+28     	; 0xc68 <uartSendByte+0x74>
	{
		while(!(UCSR1A & (1<<UDRE1)));
     c4c:	e8 ec       	ldi	r30, 0xC8	; 200
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	80 72       	andi	r24, 0x20	; 32
     c58:	90 70       	andi	r25, 0x00	; 0
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	b9 f3       	breq	.-18     	; 0xc4c <uartSendByte+0x58>
		outb(UDR1, txData);
     c5e:	ee ec       	ldi	r30, 0xCE	; 206
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	80 83       	st	Z, r24
     c66:	0d c0       	rjmp	.+26     	; 0xc82 <uartSendByte+0x8e>
	}
	else
	{
		while(!(UCSR0A & (1<<UDRE0)));
     c68:	e0 ec       	ldi	r30, 0xC0	; 192
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	80 72       	andi	r24, 0x20	; 32
     c74:	90 70       	andi	r25, 0x00	; 0
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	b9 f3       	breq	.-18     	; 0xc68 <uartSendByte+0x74>
		outb(UDR0, txData);
     c7a:	e6 ec       	ldi	r30, 0xC6	; 198
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	80 83       	st	Z, r24
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	fc 01       	movw	r30, r24
     c8a:	ef 5e       	subi	r30, 0xEF	; 239
     c8c:	fa 4f       	sbci	r31, 0xFA	; 250
     c8e:	10 82       	st	Z, r1
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <uart0SendByte>:

void uart0SendByte(u08 data)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	89 83       	std	Y+1, r24	; 0x01
	// send byte on UART0
	uartSendByte(0, data);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	69 81       	ldd	r22, Y+1	; 0x01
     caa:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <uartSendByte>
}
     cae:	0f 90       	pop	r0
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <uart1SendByte>:

void uart1SendByte(u08 data)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	0f 92       	push	r0
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	89 83       	std	Y+1, r24	; 0x01
	// send byte on UART1
	uartSendByte(1, data);
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	69 81       	ldd	r22, Y+1	; 0x01
     cc6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <uartSendByte>
}
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <uart2SendByte>:

void uart2SendByte(u08 data)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	0f 92       	push	r0
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	89 83       	std	Y+1, r24	; 0x01
	// send byte on UART2
	uartSendByte(2, data);
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	69 81       	ldd	r22, Y+1	; 0x01
     ce2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <uartSendByte>
}
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <uart3SendByte>:

void uart3SendByte(u08 data)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	0f 92       	push	r0
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	89 83       	std	Y+1, r24	; 0x01
	// send byte on UART3
	uartSendByte(3, data);
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	69 81       	ldd	r22, Y+1	; 0x01
     cfe:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <uartSendByte>
}
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <uart0GetByte>:

int uart0GetByte(void)
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <uart0GetByte+0x6>
     d10:	0f 92       	push	r0
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	9e 01       	movw	r18, r28
     d1a:	2f 5f       	subi	r18, 0xFF	; 255
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
     d1e:	b9 01       	movw	r22, r18
     d20:	0e 94 09 07 	call	0xe12	; 0xe12 <uartReceiveByte>
     d24:	88 23       	and	r24, r24
     d26:	31 f0       	breq	.+12     	; 0xd34 <uart0GetByte+0x2a>
		return c;
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	3b 83       	std	Y+3, r19	; 0x03
     d30:	2a 83       	std	Y+2, r18	; 0x02
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <uart0GetByte+0x32>
	else
		return -1;
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	9f ef       	ldi	r25, 0xFF	; 255
     d38:	9b 83       	std	Y+3, r25	; 0x03
     d3a:	8a 83       	std	Y+2, r24	; 0x02
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <uart1GetByte>:

int uart1GetByte(void)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <uart1GetByte+0x6>
     d52:	0f 92       	push	r0
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(1,&c))
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	9e 01       	movw	r18, r28
     d5c:	2f 5f       	subi	r18, 0xFF	; 255
     d5e:	3f 4f       	sbci	r19, 0xFF	; 255
     d60:	b9 01       	movw	r22, r18
     d62:	0e 94 09 07 	call	0xe12	; 0xe12 <uartReceiveByte>
     d66:	88 23       	and	r24, r24
     d68:	31 f0       	breq	.+12     	; 0xd76 <uart1GetByte+0x2a>
		return c;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3b 83       	std	Y+3, r19	; 0x03
     d72:	2a 83       	std	Y+2, r18	; 0x02
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <uart1GetByte+0x32>
	else
		return -1;
     d76:	8f ef       	ldi	r24, 0xFF	; 255
     d78:	9f ef       	ldi	r25, 0xFF	; 255
     d7a:	9b 83       	std	Y+3, r25	; 0x03
     d7c:	8a 83       	std	Y+2, r24	; 0x02
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <uart2GetByte>:

int uart2GetByte(void)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	00 d0       	rcall	.+0      	; 0xd94 <uart2GetByte+0x6>
     d94:	0f 92       	push	r0
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(2,&c))
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	9e 01       	movw	r18, r28
     d9e:	2f 5f       	subi	r18, 0xFF	; 255
     da0:	3f 4f       	sbci	r19, 0xFF	; 255
     da2:	b9 01       	movw	r22, r18
     da4:	0e 94 09 07 	call	0xe12	; 0xe12 <uartReceiveByte>
     da8:	88 23       	and	r24, r24
     daa:	31 f0       	breq	.+12     	; 0xdb8 <uart2GetByte+0x2a>
		return c;
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3b 83       	std	Y+3, r19	; 0x03
     db4:	2a 83       	std	Y+2, r18	; 0x02
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <uart2GetByte+0x32>
	else
		return -1;
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	9f ef       	ldi	r25, 0xFF	; 255
     dbc:	9b 83       	std	Y+3, r25	; 0x03
     dbe:	8a 83       	std	Y+2, r24	; 0x02
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
}
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <uart3GetByte>:

int uart3GetByte(void)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <uart3GetByte+0x6>
     dd6:	0f 92       	push	r0
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(3,&c))
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	9e 01       	movw	r18, r28
     de0:	2f 5f       	subi	r18, 0xFF	; 255
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	b9 01       	movw	r22, r18
     de6:	0e 94 09 07 	call	0xe12	; 0xe12 <uartReceiveByte>
     dea:	88 23       	and	r24, r24
     dec:	31 f0       	breq	.+12     	; 0xdfa <uart3GetByte+0x2a>
		return c;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	3b 83       	std	Y+3, r19	; 0x03
     df6:	2a 83       	std	Y+2, r18	; 0x02
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <uart3GetByte+0x32>
	else
		return -1;
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	9f ef       	ldi	r25, 0xFF	; 255
     dfe:	9b 83       	std	Y+3, r25	; 0x03
     e00:	8a 83       	std	Y+2, r24	; 0x02
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	9b 81       	ldd	r25, Y+3	; 0x03
}
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <uartReceiveByte>:


u08 uartReceiveByte(u08 nUart, u08* rxData)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <uartReceiveByte+0x6>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <uartReceiveByte+0x8>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	7b 83       	std	Y+3, r23	; 0x03
     e22:	6a 83       	std	Y+2, r22	; 0x02
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	fc 01       	movw	r30, r24
     e3a:	eb 5e       	subi	r30, 0xEB	; 235
     e3c:	fa 4f       	sbci	r31, 0xFA	; 250
     e3e:	80 81       	ld	r24, Z
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	31 f1       	breq	.+76     	; 0xe92 <uartReceiveByte+0x80>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	fc 01       	movw	r30, r24
     e5c:	eb 5e       	subi	r30, 0xEB	; 235
     e5e:	fa 4f       	sbci	r31, 0xFA	; 250
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	99 f0       	breq	.+38     	; 0xe8e <uartReceiveByte+0x7c>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	8b 5e       	subi	r24, 0xEB	; 235
     e7c:	9a 4f       	sbci	r25, 0xFA	; 250
     e7e:	0e 94 9c 02 	call	0x538	; 0x538 <bufferGetFromFront>
     e82:	ea 81       	ldd	r30, Y+2	; 0x02
     e84:	fb 81       	ldd	r31, Y+3	; 0x03
     e86:	80 83       	st	Z, r24
			return TRUE;
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	8c 83       	std	Y+4, r24	; 0x04
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <uartReceiveByte+0x82>
		}
		else
			return FALSE;			// no data
     e8e:	1c 82       	std	Y+4, r1	; 0x04
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <uartReceiveByte+0x82>
	}
	else
		return FALSE;				// no buffer
     e92:	1c 82       	std	Y+4, r1	; 0x04
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <uartFlushReceiveBuffer>:

void uartFlushReceiveBuffer(u08 nUart)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	0f 92       	push	r0
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	89 83       	std	Y+1, r24	; 0x01
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	8b 5e       	subi	r24, 0xEB	; 235
     ec4:	9a 4f       	sbci	r25, 0xFA	; 250
     ec6:	0e 94 0f 04 	call	0x81e	; 0x81e <bufferFlush>
}
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <uartReceiveBufferIsEmpty>:

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <uartReceiveBufferIsEmpty+0x6>
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	89 83       	std	Y+1, r24	; 0x01
	return (uartRxBuffer[nUart].datalength == 0);
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	fc 01       	movw	r30, r24
     ef4:	eb 5e       	subi	r30, 0xEB	; 235
     ef6:	fa 4f       	sbci	r31, 0xFA	; 250
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	1a 82       	std	Y+2, r1	; 0x02
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	11 f4       	brne	.+4      	; 0xf06 <uartReceiveBufferIsEmpty+0x34>
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	8a 83       	std	Y+2, r24	; 0x02
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <uartAddToTxBuffer>:

void uartAddToTxBuffer(u08 nUart, u08 data)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <uartAddToTxBuffer+0x6>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	6a 83       	std	Y+2, r22	; 0x02
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	87 5c       	subi	r24, 0xC7	; 199
     f34:	9a 4f       	sbci	r25, 0xFA	; 250
     f36:	6a 81       	ldd	r22, Y+2	; 0x02
     f38:	0e 94 8f 03 	call	0x71e	; 0x71e <bufferAddToEnd>
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <uart0AddToTxBuffer>:

void uart0AddToTxBuffer(u08 data)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	89 83       	std	Y+1, r24	; 0x01
	uartAddToTxBuffer(0,data);
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	69 81       	ldd	r22, Y+1	; 0x01
     f56:	0e 94 89 07 	call	0xf12	; 0xf12 <uartAddToTxBuffer>
}
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <uart1AddToTxBuffer>:

void uart1AddToTxBuffer(u08 data)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	89 83       	std	Y+1, r24	; 0x01
	uartAddToTxBuffer(1,data);
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	69 81       	ldd	r22, Y+1	; 0x01
     f72:	0e 94 89 07 	call	0xf12	; 0xf12 <uartAddToTxBuffer>
}
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <uart2AddToTxBuffer>:

void uart2AddToTxBuffer(u08 data)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	0f 92       	push	r0
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	89 83       	std	Y+1, r24	; 0x01
	uartAddToTxBuffer(2,data);
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	69 81       	ldd	r22, Y+1	; 0x01
     f8e:	0e 94 89 07 	call	0xf12	; 0xf12 <uartAddToTxBuffer>
}
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <uart3AddToTxBuffer>:

void uart3AddToTxBuffer(u08 data)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	0f 92       	push	r0
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	89 83       	std	Y+1, r24	; 0x01
	uartAddToTxBuffer(3,data);
     fa6:	83 e0       	ldi	r24, 0x03	; 3
     fa8:	69 81       	ldd	r22, Y+1	; 0x01
     faa:	0e 94 89 07 	call	0xf12	; 0xf12 <uartAddToTxBuffer>
}
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <uartSendTxBuffer>:

void uartSendTxBuffer(u08 nUart)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	89 83       	std	Y+1, r24	; 0x01
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	fc 01       	movw	r30, r24
     fca:	eb 5c       	subi	r30, 0xCB	; 203
     fcc:	fa 4f       	sbci	r31, 0xFA	; 250
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	80 83       	st	Z, r24
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	87 5c       	subi	r24, 0xC7	; 199
     fe6:	9a 4f       	sbci	r25, 0xFA	; 250
     fe8:	0e 94 9c 02 	call	0x538	; 0x538 <bufferGetFromFront>
     fec:	98 2f       	mov	r25, r24
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	69 2f       	mov	r22, r25
     ff2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <uartSendByte>
}
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <uartSendBuffer>:

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	29 97       	sbiw	r28, 0x09	; 9
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	7b 83       	std	Y+3, r23	; 0x03
    1016:	6a 83       	std	Y+2, r22	; 0x02
    1018:	5d 83       	std	Y+5, r21	; 0x05
    101a:	4c 83       	std	Y+4, r20	; 0x04
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	fc 01       	movw	r30, r24
    1032:	e7 5c       	subi	r30, 0xC7	; 199
    1034:	fa 4f       	sbci	r31, 0xFA	; 250
    1036:	20 81       	ld	r18, Z
    1038:	31 81       	ldd	r19, Z+1	; 0x01
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	28 0f       	add	r18, r24
    1040:	39 1f       	adc	r19, r25
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	fc 01       	movw	r30, r24
    1058:	e7 5c       	subi	r30, 0xC7	; 199
    105a:	fa 4f       	sbci	r31, 0xFA	; 250
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	28 17       	cp	r18, r24
    1062:	39 07       	cpc	r19, r25
    1064:	08 f0       	brcs	.+2      	; 0x1068 <uartSendBuffer+0x6a>
    1066:	45 c0       	rjmp	.+138    	; 0x10f2 <uartSendBuffer+0xf4>
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	09 f4       	brne	.+2      	; 0x1072 <uartSendBuffer+0x74>
    1070:	40 c0       	rjmp	.+128    	; 0x10f2 <uartSendBuffer+0xf4>
	{
		// grab first character
		first = *buffer++;
    1072:	ea 81       	ldd	r30, Y+2	; 0x02
    1074:	fb 81       	ldd	r31, Y+3	; 0x03
    1076:	20 81       	ld	r18, Z
    1078:	28 87       	std	Y+8, r18	; 0x08
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	9b 81       	ldd	r25, Y+3	; 0x03
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    1084:	1f 82       	std	Y+7, r1	; 0x07
    1086:	1e 82       	std	Y+6, r1	; 0x06
    1088:	1d c0       	rjmp	.+58     	; 0x10c4 <uartSendBuffer+0xc6>
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	9c 01       	movw	r18, r24
    109e:	27 5c       	subi	r18, 0xC7	; 199
    10a0:	3a 4f       	sbci	r19, 0xFA	; 250
    10a2:	ea 81       	ldd	r30, Y+2	; 0x02
    10a4:	fb 81       	ldd	r31, Y+3	; 0x03
    10a6:	40 81       	ld	r20, Z
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	9b 83       	std	Y+3, r25	; 0x03
    10b0:	8a 83       	std	Y+2, r24	; 0x02
    10b2:	c9 01       	movw	r24, r18
    10b4:	64 2f       	mov	r22, r20
    10b6:	0e 94 8f 03 	call	0x71e	; 0x71e <bufferAddToEnd>
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	9f 83       	std	Y+7, r25	; 0x07
    10c2:	8e 83       	std	Y+6, r24	; 0x06
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	2e 81       	ldd	r18, Y+6	; 0x06
    10cc:	3f 81       	ldd	r19, Y+7	; 0x07
    10ce:	28 17       	cp	r18, r24
    10d0:	39 07       	cpc	r19, r25
    10d2:	d8 f2       	brcs	.-74     	; 0x108a <uartSendBuffer+0x8c>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	fc 01       	movw	r30, r24
    10dc:	eb 5c       	subi	r30, 0xCB	; 203
    10de:	fa 4f       	sbci	r31, 0xFA	; 250
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	80 83       	st	Z, r24
		uartSendByte(nUart, first);
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	68 85       	ldd	r22, Y+8	; 0x08
    10e8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <uartSendByte>
		// return success
		return TRUE;
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	39 87       	std	Y+9, r19	; 0x09
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <uartSendBuffer+0xf6>
	}
	else
	{
		// return failure
		return FALSE;
    10f2:	19 86       	std	Y+9, r1	; 0x09
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
	}
}
    10f6:	29 96       	adiw	r28, 0x09	; 9
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <uartTransmitService>:

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	fc 01       	movw	r30, r24
    1120:	eb 5c       	subi	r30, 0xCB	; 203
    1122:	fa 4f       	sbci	r31, 0xFA	; 250
    1124:	80 81       	ld	r24, Z
    1126:	88 23       	and	r24, r24
    1128:	09 f4       	brne	.+2      	; 0x112c <uartTransmitService+0x24>
    112a:	4e c0       	rjmp	.+156    	; 0x11c8 <uartTransmitService+0xc0>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	fc 01       	movw	r30, r24
    1142:	e7 5c       	subi	r30, 0xC7	; 199
    1144:	fa 4f       	sbci	r31, 0xFA	; 250
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	69 f1       	breq	.+90     	; 0x11a8 <uartTransmitService+0xa0>
		{
			// send byte from top of buffer
			if(nUart==3)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	49 f4       	brne	.+18     	; 0x1166 <uartTransmitService+0x5e>
				outb(UDR3,  bufferGetFromFront(&uartTxBuffer[3]) );
    1154:	06 e3       	ldi	r16, 0x36	; 54
    1156:	11 e0       	ldi	r17, 0x01	; 1
    1158:	81 e5       	ldi	r24, 0x51	; 81
    115a:	95 e0       	ldi	r25, 0x05	; 5
    115c:	0e 94 9c 02 	call	0x538	; 0x538 <bufferGetFromFront>
    1160:	f8 01       	movw	r30, r16
    1162:	80 83       	st	Z, r24
    1164:	39 c0       	rjmp	.+114    	; 0x11d8 <uartTransmitService+0xd0>
			else if(nUart==2)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	49 f4       	brne	.+18     	; 0x117e <uartTransmitService+0x76>
				outb(UDR2,  bufferGetFromFront(&uartTxBuffer[2]) );
    116c:	06 ed       	ldi	r16, 0xD6	; 214
    116e:	10 e0       	ldi	r17, 0x00	; 0
    1170:	89 e4       	ldi	r24, 0x49	; 73
    1172:	95 e0       	ldi	r25, 0x05	; 5
    1174:	0e 94 9c 02 	call	0x538	; 0x538 <bufferGetFromFront>
    1178:	f8 01       	movw	r30, r16
    117a:	80 83       	st	Z, r24
    117c:	2d c0       	rjmp	.+90     	; 0x11d8 <uartTransmitService+0xd0>
			else if(nUart==1)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	49 f4       	brne	.+18     	; 0x1196 <uartTransmitService+0x8e>
				outb(UDR1,  bufferGetFromFront(&uartTxBuffer[1]) );
    1184:	0e ec       	ldi	r16, 0xCE	; 206
    1186:	10 e0       	ldi	r17, 0x00	; 0
    1188:	81 e4       	ldi	r24, 0x41	; 65
    118a:	95 e0       	ldi	r25, 0x05	; 5
    118c:	0e 94 9c 02 	call	0x538	; 0x538 <bufferGetFromFront>
    1190:	f8 01       	movw	r30, r16
    1192:	80 83       	st	Z, r24
    1194:	21 c0       	rjmp	.+66     	; 0x11d8 <uartTransmitService+0xd0>
			else
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    1196:	06 ec       	ldi	r16, 0xC6	; 198
    1198:	10 e0       	ldi	r17, 0x00	; 0
    119a:	89 e3       	ldi	r24, 0x39	; 57
    119c:	95 e0       	ldi	r25, 0x05	; 5
    119e:	0e 94 9c 02 	call	0x538	; 0x538 <bufferGetFromFront>
    11a2:	f8 01       	movw	r30, r16
    11a4:	80 83       	st	Z, r24
    11a6:	18 c0       	rjmp	.+48     	; 0x11d8 <uartTransmitService+0xd0>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	fc 01       	movw	r30, r24
    11b0:	eb 5c       	subi	r30, 0xCB	; 203
    11b2:	fa 4f       	sbci	r31, 0xFA	; 250
    11b4:	10 82       	st	Z, r1
			// return to ready state
			uartReadyTx[nUart] = TRUE;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	fc 01       	movw	r30, r24
    11be:	ef 5e       	subi	r30, 0xEF	; 239
    11c0:	fa 4f       	sbci	r31, 0xFA	; 250
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	80 83       	st	Z, r24
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <uartTransmitService+0xd0>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	fc 01       	movw	r30, r24
    11d0:	ef 5e       	subi	r30, 0xEF	; 239
    11d2:	fa 4f       	sbci	r31, 0xFA	; 250
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	80 83       	st	Z, r24
	}
}
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	08 95       	ret

000011e4 <uartReceiveService>:

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <uartReceiveService+0x6>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	8a 83       	std	Y+2, r24	; 0x02
	u08 c;
	// get received char
	if(nUart==3)
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	29 f4       	brne	.+10     	; 0x1200 <uartReceiveService+0x1c>
		c = inb(UDR3);
    11f6:	e6 e3       	ldi	r30, 0x36	; 54
    11f8:	f1 e0       	ldi	r31, 0x01	; 1
    11fa:	80 81       	ld	r24, Z
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <uartReceiveService+0x44>
	else if(nUart==2)
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	82 30       	cpi	r24, 0x02	; 2
    1204:	29 f4       	brne	.+10     	; 0x1210 <uartReceiveService+0x2c>
		c = inb(UDR2);
    1206:	e6 ed       	ldi	r30, 0xD6	; 214
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	0c c0       	rjmp	.+24     	; 0x1228 <uartReceiveService+0x44>
	else if(nUart==1)
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	29 f4       	brne	.+10     	; 0x1220 <uartReceiveService+0x3c>
		c = inb(UDR1);
    1216:	ee ec       	ldi	r30, 0xCE	; 206
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <uartReceiveService+0x44>
	else
		c = inb(UDR0);
    1220:	e6 ec       	ldi	r30, 0xC6	; 198
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	89 83       	std	Y+1, r24	; 0x01

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	fc 01       	movw	r30, r24
    1234:	ee 52       	subi	r30, 0x2E	; 46
    1236:	fb 4f       	sbci	r31, 0xFB	; 251
    1238:	80 81       	ld	r24, Z
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	71 f0       	breq	.+28     	; 0x125c <uartReceiveService+0x78>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	fc 01       	movw	r30, r24
    124c:	ee 52       	subi	r30, 0x2E	; 46
    124e:	fb 4f       	sbci	r31, 0xFB	; 251
    1250:	01 90       	ld	r0, Z+
    1252:	f0 81       	ld	r31, Z
    1254:	e0 2d       	mov	r30, r0
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	09 95       	icall
    125a:	26 c0       	rjmp	.+76     	; 0x12a8 <uartReceiveService+0xc4>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	8b 5e       	subi	r24, 0xEB	; 235
    1270:	9a 4f       	sbci	r25, 0xFA	; 250
    1272:	69 81       	ldd	r22, Y+1	; 0x01
    1274:	0e 94 8f 03 	call	0x71e	; 0x71e <bufferAddToEnd>
    1278:	88 23       	and	r24, r24
    127a:	b1 f4       	brne	.+44     	; 0x12a8 <uartReceiveService+0xc4>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	c9 01       	movw	r24, r18
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	fc 01       	movw	r30, r24
    128a:	e7 5a       	subi	r30, 0xA7	; 167
    128c:	fa 4f       	sbci	r31, 0xFA	; 250
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	ac 01       	movw	r20, r24
    1294:	4f 5f       	subi	r20, 0xFF	; 255
    1296:	5f 4f       	sbci	r21, 0xFF	; 255
    1298:	c9 01       	movw	r24, r18
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	fc 01       	movw	r30, r24
    12a0:	e7 5a       	subi	r30, 0xA7	; 167
    12a2:	fa 4f       	sbci	r31, 0xFA	; 250
    12a4:	51 83       	std	Z+1, r21	; 0x01
    12a6:	40 83       	st	Z, r20
		}
	}
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <__vector_27>:

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    12b2:	1f 92       	push	r1
    12b4:	0f 92       	push	r0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	0f 92       	push	r0
    12ba:	11 24       	eor	r1, r1
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(0);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	0e 94 84 08 	call	0x1108	; 0x1108 <uartTransmitService>
}
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	ff 91       	pop	r31
    12e8:	ef 91       	pop	r30
    12ea:	bf 91       	pop	r27
    12ec:	af 91       	pop	r26
    12ee:	9f 91       	pop	r25
    12f0:	8f 91       	pop	r24
    12f2:	7f 91       	pop	r23
    12f4:	6f 91       	pop	r22
    12f6:	5f 91       	pop	r21
    12f8:	4f 91       	pop	r20
    12fa:	3f 91       	pop	r19
    12fc:	2f 91       	pop	r18
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	0f 90       	pop	r0
    1304:	1f 90       	pop	r1
    1306:	18 95       	reti

00001308 <__vector_38>:

UART_INTERRUPT_HANDLER(SIG_USART1_TRANS)      
{
    1308:	1f 92       	push	r1
    130a:	0f 92       	push	r0
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	2f 93       	push	r18
    1314:	3f 93       	push	r19
    1316:	4f 93       	push	r20
    1318:	5f 93       	push	r21
    131a:	6f 93       	push	r22
    131c:	7f 93       	push	r23
    131e:	8f 93       	push	r24
    1320:	9f 93       	push	r25
    1322:	af 93       	push	r26
    1324:	bf 93       	push	r27
    1326:	ef 93       	push	r30
    1328:	ff 93       	push	r31
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(1);
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	0e 94 84 08 	call	0x1108	; 0x1108 <uartTransmitService>
}
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	ff 91       	pop	r31
    133e:	ef 91       	pop	r30
    1340:	bf 91       	pop	r27
    1342:	af 91       	pop	r26
    1344:	9f 91       	pop	r25
    1346:	8f 91       	pop	r24
    1348:	7f 91       	pop	r23
    134a:	6f 91       	pop	r22
    134c:	5f 91       	pop	r21
    134e:	4f 91       	pop	r20
    1350:	3f 91       	pop	r19
    1352:	2f 91       	pop	r18
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti

0000135e <__vector_53>:

UART_INTERRUPT_HANDLER(SIG_USART2_TRANS)      
{
    135e:	1f 92       	push	r1
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	2f 93       	push	r18
    136a:	3f 93       	push	r19
    136c:	4f 93       	push	r20
    136e:	5f 93       	push	r21
    1370:	6f 93       	push	r22
    1372:	7f 93       	push	r23
    1374:	8f 93       	push	r24
    1376:	9f 93       	push	r25
    1378:	af 93       	push	r26
    137a:	bf 93       	push	r27
    137c:	ef 93       	push	r30
    137e:	ff 93       	push	r31
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(2);
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	0e 94 84 08 	call	0x1108	; 0x1108 <uartTransmitService>
}
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <__vector_56>:

UART_INTERRUPT_HANDLER(SIG_USART3_TRANS)      
{
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	4f 93       	push	r20
    13c4:	5f 93       	push	r21
    13c6:	6f 93       	push	r22
    13c8:	7f 93       	push	r23
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
    13ce:	af 93       	push	r26
    13d0:	bf 93       	push	r27
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	uartTransmitService(3);
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	0e 94 84 08 	call	0x1108	; 0x1108 <uartTransmitService>
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	ff 91       	pop	r31
    13ea:	ef 91       	pop	r30
    13ec:	bf 91       	pop	r27
    13ee:	af 91       	pop	r26
    13f0:	9f 91       	pop	r25
    13f2:	8f 91       	pop	r24
    13f4:	7f 91       	pop	r23
    13f6:	6f 91       	pop	r22
    13f8:	5f 91       	pop	r21
    13fa:	4f 91       	pop	r20
    13fc:	3f 91       	pop	r19
    13fe:	2f 91       	pop	r18
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <__vector_25>:

	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	2f 93       	push	r18
    1416:	3f 93       	push	r19
    1418:	4f 93       	push	r20
    141a:	5f 93       	push	r21
    141c:	6f 93       	push	r22
    141e:	7f 93       	push	r23
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	af 93       	push	r26
    1426:	bf 93       	push	r27
    1428:	ef 93       	push	r30
    142a:	ff 93       	push	r31
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(0);
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <uartReceiveService>
}
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	ff 91       	pop	r31
    1440:	ef 91       	pop	r30
    1442:	bf 91       	pop	r27
    1444:	af 91       	pop	r26
    1446:	9f 91       	pop	r25
    1448:	8f 91       	pop	r24
    144a:	7f 91       	pop	r23
    144c:	6f 91       	pop	r22
    144e:	5f 91       	pop	r21
    1450:	4f 91       	pop	r20
    1452:	3f 91       	pop	r19
    1454:	2f 91       	pop	r18
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <__vector_36>:

UART_INTERRUPT_HANDLER(SIG_USART1_RECV)      
{
    1460:	1f 92       	push	r1
    1462:	0f 92       	push	r0
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	0f 92       	push	r0
    1468:	11 24       	eor	r1, r1
    146a:	2f 93       	push	r18
    146c:	3f 93       	push	r19
    146e:	4f 93       	push	r20
    1470:	5f 93       	push	r21
    1472:	6f 93       	push	r22
    1474:	7f 93       	push	r23
    1476:	8f 93       	push	r24
    1478:	9f 93       	push	r25
    147a:	af 93       	push	r26
    147c:	bf 93       	push	r27
    147e:	ef 93       	push	r30
    1480:	ff 93       	push	r31
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(1);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <uartReceiveService>
}
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <__vector_51>:

UART_INTERRUPT_HANDLER(SIG_USART2_RECV)      
{
    14b6:	1f 92       	push	r1
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	0f 92       	push	r0
    14be:	11 24       	eor	r1, r1
    14c0:	2f 93       	push	r18
    14c2:	3f 93       	push	r19
    14c4:	4f 93       	push	r20
    14c6:	5f 93       	push	r21
    14c8:	6f 93       	push	r22
    14ca:	7f 93       	push	r23
    14cc:	8f 93       	push	r24
    14ce:	9f 93       	push	r25
    14d0:	af 93       	push	r26
    14d2:	bf 93       	push	r27
    14d4:	ef 93       	push	r30
    14d6:	ff 93       	push	r31
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(2);
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <uartReceiveService>
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	0f 90       	pop	r0
    1508:	1f 90       	pop	r1
    150a:	18 95       	reti

0000150c <__vector_54>:

UART_INTERRUPT_HANDLER(SIG_USART3_RECV)      
{
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	4f 93       	push	r20
    151c:	5f 93       	push	r21
    151e:	6f 93       	push	r22
    1520:	7f 93       	push	r23
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	uartReceiveService(3);
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <uartReceiveService>
}
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	ff 91       	pop	r31
    1542:	ef 91       	pop	r30
    1544:	bf 91       	pop	r27
    1546:	af 91       	pop	r26
    1548:	9f 91       	pop	r25
    154a:	8f 91       	pop	r24
    154c:	7f 91       	pop	r23
    154e:	6f 91       	pop	r22
    1550:	5f 91       	pop	r21
    1552:	4f 91       	pop	r20
    1554:	3f 91       	pop	r19
    1556:	2f 91       	pop	r18
    1558:	0f 90       	pop	r0
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	0f 90       	pop	r0
    155e:	1f 90       	pop	r1
    1560:	18 95       	reti

00001562 <prescaler_hex_to_value>:

typedef void (*void_func_ptr)(void);
volatile static void_func_ptr TimerIntFunc[TIMER_MAX_ENUM];

uint16_t prescaler_hex_to_value(uint8_t hex)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <prescaler_hex_to_value+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <prescaler_hex_to_value+0x8>
    156a:	0f 92       	push	r0
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	8d 83       	std	Y+5, r24	; 0x05
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	87 70       	andi	r24, 0x07	; 7
    157a:	90 70       	andi	r25, 0x00	; 0
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	8a 59       	subi	r24, 0x9A	; 154
    1582:	9e 4f       	sbci	r25, 0xFE	; 254
    1584:	9c 83       	std	Y+4, r25	; 0x04
    1586:	8b 83       	std	Y+3, r24	; 0x03
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	fc 01       	movw	r30, r24
    158e:	85 91       	lpm	r24, Z+
    1590:	94 91       	lpm	r25, Z+
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	fc 83       	std	Y+4, r31	; 0x04
    1598:	eb 83       	std	Y+3, r30	; 0x03
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <prescaler_hex_to_value_for_timer2>:

uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <prescaler_hex_to_value_for_timer2+0x6>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <prescaler_hex_to_value_for_timer2+0x8>
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	8d 83       	std	Y+5, r24	; 0x05
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	87 70       	andi	r24, 0x07	; 7
    15c6:	90 70       	andi	r25, 0x00	; 0
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	8e 58       	subi	r24, 0x8E	; 142
    15ce:	9e 4f       	sbci	r25, 0xFE	; 254
    15d0:	9c 83       	std	Y+4, r25	; 0x04
    15d2:	8b 83       	std	Y+3, r24	; 0x03
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	fc 01       	movw	r30, r24
    15da:	85 91       	lpm	r24, Z+
    15dc:	94 91       	lpm	r25, Z+
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	fc 83       	std	Y+4, r31	; 0x04
    15e4:	eb 83       	std	Y+3, r30	; 0x03
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <get_timer0_prescaler>:

uint16_t get_timer0_prescaler(void)
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value(TCCR0B);
    1602:	e5 e4       	ldi	r30, 0x45	; 69
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	0e 94 b1 0a 	call	0x1562	; 0x1562 <prescaler_hex_to_value>
}
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <get_timer1_prescaler>:
uint16_t get_timer1_prescaler(void)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value(TCCR1B);
    161a:	e1 e8       	ldi	r30, 0x81	; 129
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	0e 94 b1 0a 	call	0x1562	; 0x1562 <prescaler_hex_to_value>
}
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <get_timer2_prescaler>:
uint16_t get_timer2_prescaler(void)
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value_for_timer2(TCCR2B);
    1632:	e1 eb       	ldi	r30, 0xB1	; 177
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <prescaler_hex_to_value_for_timer2>
}
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <get_timer3_prescaler>:
uint16_t get_timer3_prescaler(void)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value(TCCR3B);
    164a:	e1 e9       	ldi	r30, 0x91	; 145
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	0e 94 b1 0a 	call	0x1562	; 0x1562 <prescaler_hex_to_value>
}
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <get_timer4_prescaler>:
uint16_t get_timer4_prescaler(void)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value(TCCR4B);
    1662:	e1 ea       	ldi	r30, 0xA1	; 161
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	0e 94 b1 0a 	call	0x1562	; 0x1562 <prescaler_hex_to_value>
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <get_timer5_prescaler>:
uint16_t get_timer5_prescaler(void)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
  return prescaler_hex_to_value(TCCR5B);
    167a:	e1 e2       	ldi	r30, 0x21	; 33
    167c:	f1 e0       	ldi	r31, 0x01	; 1
    167e:	80 81       	ld	r24, Z
    1680:	0e 94 b1 0a 	call	0x1562	; 0x1562 <prescaler_hex_to_value>
}
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <get_timer0_overflow>:

const uint32_t get_timer0_overflow(void)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    return timer0_ovrflow_cnt;
    1692:	80 91 69 05 	lds	r24, 0x0569
    1696:	90 91 6a 05 	lds	r25, 0x056A
    169a:	a0 91 6b 05 	lds	r26, 0x056B
    169e:	b0 91 6c 05 	lds	r27, 0x056C
}
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <get_timer1_overflow>:
const uint32_t get_timer1_overflow(void)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    return timer1_ovrflow_cnt;
    16b4:	80 91 65 05 	lds	r24, 0x0565
    16b8:	90 91 66 05 	lds	r25, 0x0566
    16bc:	a0 91 67 05 	lds	r26, 0x0567
    16c0:	b0 91 68 05 	lds	r27, 0x0568
}
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <get_timer2_overflow>:
const uint32_t get_timer2_overflow(void)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    return timer2_ovrflow_cnt;
    16d6:	80 91 6d 05 	lds	r24, 0x056D
    16da:	90 91 6e 05 	lds	r25, 0x056E
    16de:	a0 91 6f 05 	lds	r26, 0x056F
    16e2:	b0 91 70 05 	lds	r27, 0x0570
}
    16e6:	bc 01       	movw	r22, r24
    16e8:	cd 01       	movw	r24, r26
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <get_timer3_overflow>:
const uint32_t get_timer3_overflow(void)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    return timer3_ovrflow_cnt;
    16f8:	80 91 75 05 	lds	r24, 0x0575
    16fc:	90 91 76 05 	lds	r25, 0x0576
    1700:	a0 91 77 05 	lds	r26, 0x0577
    1704:	b0 91 78 05 	lds	r27, 0x0578
}
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <get_timer4_overflow>:
const uint32_t get_timer4_overflow(void)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    return timer4_ovrflow_cnt;
    171a:	80 91 61 05 	lds	r24, 0x0561
    171e:	90 91 62 05 	lds	r25, 0x0562
    1722:	a0 91 63 05 	lds	r26, 0x0563
    1726:	b0 91 64 05 	lds	r27, 0x0564
}
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <get_timer5_overflow>:
const uint32_t get_timer5_overflow(void)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    return timer5_ovrflow_cnt;
    173c:	80 91 79 05 	lds	r24, 0x0579
    1740:	90 91 7a 05 	lds	r25, 0x057A
    1744:	a0 91 7b 05 	lds	r26, 0x057B
    1748:	b0 91 7c 05 	lds	r27, 0x057C
}
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <get_timer0_counter>:

const uint8_t get_timer0_counter(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    return TCNT0;
    175e:	e6 e4       	ldi	r30, 0x46	; 70
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <get_timer1_counter>:
const uint16_t get_timer1_counter(void)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
    1772:	e4 e8       	ldi	r30, 0x84	; 132
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
}
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <get_timer2_counter>:
const uint8_t get_timer2_counter(void)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    return TCNT2;
    1788:	e2 eb       	ldi	r30, 0xB2	; 178
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <get_timer3_counter>:
const uint16_t get_timer3_counter(void)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    return TCNT3;
    179c:	e4 e9       	ldi	r30, 0x94	; 148
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <get_timer4_counter>:
const uint16_t get_timer4_counter(void)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    return TCNT4;
    17b2:	e4 ea       	ldi	r30, 0xA4	; 164
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
}
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <get_timer5_counter>:
const uint16_t get_timer5_counter(void)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    return TCNT5;
    17c8:	e4 e2       	ldi	r30, 0x24	; 36
    17ca:	f1 e0       	ldi	r31, 0x01	; 1
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
}
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <reset_timer0>:

void reset_timer0(void)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    TCNT0 = timer0_ovrflow_cnt = 0;
    17de:	10 92 69 05 	sts	0x0569, r1
    17e2:	10 92 6a 05 	sts	0x056A, r1
    17e6:	10 92 6b 05 	sts	0x056B, r1
    17ea:	10 92 6c 05 	sts	0x056C, r1
    17ee:	e6 e4       	ldi	r30, 0x46	; 70
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	10 82       	st	Z, r1
}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <reset_timer1>:
void reset_timer1(void)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = timer1_ovrflow_cnt = 0;
    1802:	10 92 65 05 	sts	0x0565, r1
    1806:	10 92 66 05 	sts	0x0566, r1
    180a:	10 92 67 05 	sts	0x0567, r1
    180e:	10 92 68 05 	sts	0x0568, r1
    1812:	e4 e8       	ldi	r30, 0x84	; 132
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	11 82       	std	Z+1, r1	; 0x01
    1818:	10 82       	st	Z, r1
}
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <reset_timer2>:
void reset_timer2(void)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    TCNT2 = timer2_ovrflow_cnt = 0;
    1828:	10 92 6d 05 	sts	0x056D, r1
    182c:	10 92 6e 05 	sts	0x056E, r1
    1830:	10 92 6f 05 	sts	0x056F, r1
    1834:	10 92 70 05 	sts	0x0570, r1
    1838:	e2 eb       	ldi	r30, 0xB2	; 178
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	10 82       	st	Z, r1
}
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <reset_timer3>:
void reset_timer3(void)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    TCNT3 = timer3_ovrflow_cnt = 0;
    184c:	10 92 75 05 	sts	0x0575, r1
    1850:	10 92 76 05 	sts	0x0576, r1
    1854:	10 92 77 05 	sts	0x0577, r1
    1858:	10 92 78 05 	sts	0x0578, r1
    185c:	e4 e9       	ldi	r30, 0x94	; 148
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	11 82       	std	Z+1, r1	; 0x01
    1862:	10 82       	st	Z, r1
}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <reset_timer4>:
void reset_timer4(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    TCNT4 = timer4_ovrflow_cnt = 0;
    1872:	10 92 61 05 	sts	0x0561, r1
    1876:	10 92 62 05 	sts	0x0562, r1
    187a:	10 92 63 05 	sts	0x0563, r1
    187e:	10 92 64 05 	sts	0x0564, r1
    1882:	e4 ea       	ldi	r30, 0xA4	; 164
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	11 82       	std	Z+1, r1	; 0x01
    1888:	10 82       	st	Z, r1
}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <reset_timer5>:
void reset_timer5(void)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    TCNT5 = timer5_ovrflow_cnt = 0;
    1898:	10 92 79 05 	sts	0x0579, r1
    189c:	10 92 7a 05 	sts	0x057A, r1
    18a0:	10 92 7b 05 	sts	0x057B, r1
    18a4:	10 92 7c 05 	sts	0x057C, r1
    18a8:	e4 e2       	ldi	r30, 0x24	; 36
    18aa:	f1 e0       	ldi	r31, 0x01	; 1
    18ac:	11 82       	std	Z+1, r1	; 0x01
    18ae:	10 82       	st	Z, r1
}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <delay_us>:

void delay_us(unsigned short time_us) 
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <delay_us+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <delay_us+0x8>
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <delay_us+0xa>
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	8b 83       	std	Y+3, r24	; 0x03
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / 5; // +3 for rounding up (dirty) 
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	cc 01       	movw	r24, r24
    18ce:	a0 e0       	ldi	r26, 0x00	; 0
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	aa 1f       	adc	r26, r26
    18d8:	bb 1f       	adc	r27, r27
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	aa 1f       	adc	r26, r26
    18e0:	bb 1f       	adc	r27, r27
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	aa 1f       	adc	r26, r26
    18e8:	bb 1f       	adc	r27, r27
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	aa 1f       	adc	r26, r26
    18f0:	bb 1f       	adc	r27, r27
    18f2:	03 96       	adiw	r24, 0x03	; 3
    18f4:	a1 1d       	adc	r26, r1
    18f6:	b1 1d       	adc	r27, r1
    18f8:	25 e0       	ldi	r18, 0x05	; 5
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__divmodsi4>
    1908:	da 01       	movw	r26, r20
    190a:	c9 01       	movw	r24, r18
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
    1910:	1e 82       	std	Y+6, r1	; 0x06
    1912:	1d 82       	std	Y+5, r1	; 0x05
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <delay_us+0x6c>
    1916:	2d 81       	ldd	r18, Y+5	; 0x05
    1918:	3e 81       	ldd	r19, Y+6	; 0x06
    191a:	2f 5f       	subi	r18, 0xFF	; 255
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	3e 83       	std	Y+6, r19	; 0x06
    1920:	2d 83       	std	Y+5, r18	; 0x05
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	2d 81       	ldd	r18, Y+5	; 0x05
    1928:	3e 81       	ldd	r19, Y+6	; 0x06
    192a:	28 17       	cp	r18, r24
    192c:	39 07       	cpc	r19, r25
    192e:	98 f3       	brcs	.-26     	; 0x1916 <delay_us+0x60>
}
    1930:	26 96       	adiw	r28, 0x06	; 6
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <init_timer0>:

void init_timer0(const uint8_t prescaler)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	0f 92       	push	r0
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	89 83       	std	Y+1, r24	; 0x01
  TCCR0B = prescaler;
    194e:	e5 e4       	ldi	r30, 0x45	; 69
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	80 83       	st	Z, r24
  TIMSK0 = _BV(TOIE0); // enable interrupts
    1956:	ee e6       	ldi	r30, 0x6E	; 110
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	80 83       	st	Z, r24
  reset_timer0(); // reset counter
    195e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <reset_timer0>
}
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <init_timer1>:
void init_timer1(const uint8_t prescaler)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	89 83       	std	Y+1, r24	; 0x01
  TCCR1B = prescaler;
    1976:	e1 e8       	ldi	r30, 0x81	; 129
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	80 83       	st	Z, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
    197e:	ef e6       	ldi	r30, 0x6F	; 111
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	80 83       	st	Z, r24
  reset_timer1(); // reset counter
    1986:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <reset_timer1>
}
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <init_timer2>:
void init_timer2(const uint8_t prescaler)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	0f 92       	push	r0
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	89 83       	std	Y+1, r24	; 0x01
  TCCR2B = prescaler;
    199e:	e1 eb       	ldi	r30, 0xB1	; 177
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	80 83       	st	Z, r24
  TIMSK2 = _BV(TOIE2); // enable interrupts
    19a6:	e0 e7       	ldi	r30, 0x70	; 112
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	80 83       	st	Z, r24
  reset_timer2(); // reset counter
    19ae:	0e 94 10 0c 	call	0x1820	; 0x1820 <reset_timer2>
}
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <init_timer3>:
void init_timer3(const uint8_t prescaler)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01
  TCCR3B = prescaler;
    19c6:	e1 e9       	ldi	r30, 0x91	; 145
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	80 83       	st	Z, r24
  TIMSK3 = _BV(TOIE3); // enable interrupts
    19ce:	e1 e7       	ldi	r30, 0x71	; 113
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	80 83       	st	Z, r24
  reset_timer3(); // reset counter
    19d6:	0e 94 22 0c 	call	0x1844	; 0x1844 <reset_timer3>
}
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <init_timer4>:
void init_timer4(const uint8_t prescaler)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	0f 92       	push	r0
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	89 83       	std	Y+1, r24	; 0x01
  TCCR4B = prescaler;
    19ee:	e1 ea       	ldi	r30, 0xA1	; 161
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	80 83       	st	Z, r24
  TIMSK4 = _BV(TOIE4); // enable interrupts
    19f6:	e2 e7       	ldi	r30, 0x72	; 114
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 83       	st	Z, r24
  reset_timer4(); // reset counter
    19fe:	0e 94 35 0c 	call	0x186a	; 0x186a <reset_timer4>
}
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <init_timer5>:
void init_timer5(const uint8_t prescaler)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	0f 92       	push	r0
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	89 83       	std	Y+1, r24	; 0x01
  TCCR5B = prescaler;
    1a16:	e1 e2       	ldi	r30, 0x21	; 33
    1a18:	f1 e0       	ldi	r31, 0x01	; 1
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	80 83       	st	Z, r24
  TIMSK5 = _BV(TOIE5); // enable interrupts
    1a1e:	e3 e7       	ldi	r30, 0x73	; 115
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	80 83       	st	Z, r24
  reset_timer5(); // reset counter
    1a26:	0e 94 48 0c 	call	0x1890	; 0x1890 <reset_timer5>
}
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <timer_attach>:

void timer_attach(TimerInterrupt_t interrupt, void (*user_func)(void) )
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <timer_attach+0x6>
    1a38:	0f 92       	push	r0
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	7b 83       	std	Y+3, r23	; 0x03
    1a42:	6a 83       	std	Y+2, r22	; 0x02
  // set the interrupt function to run
  // the supplied user's function
  TimerIntFunc[interrupt] = user_func;
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e6 52       	subi	r30, 0x26	; 38
    1a52:	fb 4f       	sbci	r31, 0xFB	; 251
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	9b 81       	ldd	r25, Y+3	; 0x03
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24
}
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <timer_detach>:

void timer_detach(TimerInterrupt_t interrupt)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	0f 92       	push	r0
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	89 83       	std	Y+1, r24	; 0x01
  // clear the user defined interrupt function
  TimerIntFunc[interrupt] = NULL;
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	fc 01       	movw	r30, r24
    1a80:	e6 52       	subi	r30, 0x26	; 38
    1a82:	fb 4f       	sbci	r31, 0xFB	; 251
    1a84:	11 82       	std	Z+1, r1	; 0x01
    1a86:	10 82       	st	Z, r1
}
    1a88:	0f 90       	pop	r0
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <_delay_loop_2>:

void
_delay_loop_2(uint16_t __count)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <_delay_loop_2+0x6>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
	__asm__ volatile (
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <_delay_loop_2+0x12>
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <sleep>:

void sleep(uint16_t time_ms)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	28 97       	sbiw	r28, 0x08	; 8
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	98 87       	std	Y+8, r25	; 0x08
    1aca:	8f 83       	std	Y+7, r24	; 0x07
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * time_ms;
    1acc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ace:	98 85       	ldd	r25, Y+8	; 0x08
    1ad0:	cc 01       	movw	r24, r24
    1ad2:	a0 e0       	ldi	r26, 0x00	; 0
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__floatunsisf>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a e7       	ldi	r20, 0x7A	; 122
    1aec:	55 e4       	ldi	r21, 0x45	; 69
    1aee:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	ab 83       	std	Y+3, r26	; 0x03
    1afc:	bc 83       	std	Y+4, r27	; 0x04
	if (__tmp < 1.0)
    1afe:	69 81       	ldd	r22, Y+1	; 0x01
    1b00:	7a 81       	ldd	r23, Y+2	; 0x02
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 75 26 	call	0x4cea	; 0x4cea <__cmpsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	2c f4       	brge	.+10     	; 0x1b20 <sleep+0x6c>
		__ticks = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
    1b1e:	42 c0       	rjmp	.+132    	; 0x1ba4 <sleep+0xf0>
	else if (__tmp > 65535)
    1b20:	69 81       	ldd	r22, Y+1	; 0x01
    1b22:	7a 81       	ldd	r23, Y+2	; 0x02
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	3f ef       	ldi	r19, 0xFF	; 255
    1b2c:	4f e7       	ldi	r20, 0x7F	; 127
    1b2e:	57 e4       	ldi	r21, 0x47	; 71
    1b30:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__gesf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	64 f5       	brge	.+88     	; 0x1b90 <sleep+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
    1b38:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3a:	98 85       	ldd	r25, Y+8	; 0x08
    1b3c:	cc 01       	movw	r24, r24
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__floatunsisf>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	09 c0       	rjmp	.+18     	; 0x1b86 <sleep+0xd2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
    1b74:	80 e9       	ldi	r24, 0x90	; 144
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_delay_loop_2>
			__ticks --;
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	9e 83       	std	Y+6, r25	; 0x06
    1b84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
    1b86:	8d 81       	ldd	r24, Y+5	; 0x05
    1b88:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	99 f7       	brne	.-26     	; 0x1b74 <sleep+0xc0>
    1b8e:	0e c0       	rjmp	.+28     	; 0x1bac <sleep+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b90:	69 81       	ldd	r22, Y+1	; 0x01
    1b92:	7a 81       	ldd	r23, Y+2	; 0x02
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9e 83       	std	Y+6, r25	; 0x06
    1ba2:	8d 83       	std	Y+5, r24	; 0x05
	_delay_loop_2(__ticks);
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_delay_loop_2>
}
    1bac:	28 96       	adiw	r28, 0x08	; 8
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <__vector_23>:
    }
  }
}*/

ISR(TIMER0_OVF_vect) 
{
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	2f 93       	push	r18
    1bca:	3f 93       	push	r19
    1bcc:	4f 93       	push	r20
    1bce:	5f 93       	push	r21
    1bd0:	6f 93       	push	r22
    1bd2:	7f 93       	push	r23
    1bd4:	8f 93       	push	r24
    1bd6:	9f 93       	push	r25
    1bd8:	af 93       	push	r26
    1bda:	bf 93       	push	r27
    1bdc:	ef 93       	push	r30
    1bde:	ff 93       	push	r31
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
  timer0_ovrflow_cnt++;
    1be8:	80 91 69 05 	lds	r24, 0x0569
    1bec:	90 91 6a 05 	lds	r25, 0x056A
    1bf0:	a0 91 6b 05 	lds	r26, 0x056B
    1bf4:	b0 91 6c 05 	lds	r27, 0x056C
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	a1 1d       	adc	r26, r1
    1bfc:	b1 1d       	adc	r27, r1
    1bfe:	80 93 69 05 	sts	0x0569, r24
    1c02:	90 93 6a 05 	sts	0x056A, r25
    1c06:	a0 93 6b 05 	sts	0x056B, r26
    1c0a:	b0 93 6c 05 	sts	0x056C, r27
  timer_sleep_cnt++;
    1c0e:	80 91 71 05 	lds	r24, 0x0571
    1c12:	90 91 72 05 	lds	r25, 0x0572
    1c16:	a0 91 73 05 	lds	r26, 0x0573
    1c1a:	b0 91 74 05 	lds	r27, 0x0574
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	a1 1d       	adc	r26, r1
    1c22:	b1 1d       	adc	r27, r1
    1c24:	80 93 71 05 	sts	0x0571, r24
    1c28:	90 93 72 05 	sts	0x0572, r25
    1c2c:	a0 93 73 05 	sts	0x0573, r26
    1c30:	b0 93 74 05 	sts	0x0574, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER0_OVF_interrupt);
    1c34:	80 91 de 04 	lds	r24, 0x04DE
    1c38:	90 91 df 04 	lds	r25, 0x04DF
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	29 f0       	breq	.+10     	; 0x1c4a <__vector_23+0x8c>
    1c40:	e0 91 de 04 	lds	r30, 0x04DE
    1c44:	f0 91 df 04 	lds	r31, 0x04DF
    1c48:	09 95       	icall
}
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	ff 91       	pop	r31
    1c50:	ef 91       	pop	r30
    1c52:	bf 91       	pop	r27
    1c54:	af 91       	pop	r26
    1c56:	9f 91       	pop	r25
    1c58:	8f 91       	pop	r24
    1c5a:	7f 91       	pop	r23
    1c5c:	6f 91       	pop	r22
    1c5e:	5f 91       	pop	r21
    1c60:	4f 91       	pop	r20
    1c62:	3f 91       	pop	r19
    1c64:	2f 91       	pop	r18
    1c66:	0f 90       	pop	r0
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	0f 90       	pop	r0
    1c6c:	1f 90       	pop	r1
    1c6e:	18 95       	reti

00001c70 <__vector_20>:
ISR(TIMER1_OVF_vect) 
{
    1c70:	1f 92       	push	r1
    1c72:	0f 92       	push	r0
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	0f 92       	push	r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	2f 93       	push	r18
    1c7c:	3f 93       	push	r19
    1c7e:	4f 93       	push	r20
    1c80:	5f 93       	push	r21
    1c82:	6f 93       	push	r22
    1c84:	7f 93       	push	r23
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	af 93       	push	r26
    1c8c:	bf 93       	push	r27
    1c8e:	ef 93       	push	r30
    1c90:	ff 93       	push	r31
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
  timer1_ovrflow_cnt++;
    1c9a:	80 91 65 05 	lds	r24, 0x0565
    1c9e:	90 91 66 05 	lds	r25, 0x0566
    1ca2:	a0 91 67 05 	lds	r26, 0x0567
    1ca6:	b0 91 68 05 	lds	r27, 0x0568
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	a1 1d       	adc	r26, r1
    1cae:	b1 1d       	adc	r27, r1
    1cb0:	80 93 65 05 	sts	0x0565, r24
    1cb4:	90 93 66 05 	sts	0x0566, r25
    1cb8:	a0 93 67 05 	sts	0x0567, r26
    1cbc:	b0 93 68 05 	sts	0x0568, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER1_OVF_interrupt);
    1cc0:	80 91 e8 04 	lds	r24, 0x04E8
    1cc4:	90 91 e9 04 	lds	r25, 0x04E9
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	29 f0       	breq	.+10     	; 0x1cd6 <__vector_20+0x66>
    1ccc:	e0 91 e8 04 	lds	r30, 0x04E8
    1cd0:	f0 91 e9 04 	lds	r31, 0x04E9
    1cd4:	09 95       	icall
}
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	ff 91       	pop	r31
    1cdc:	ef 91       	pop	r30
    1cde:	bf 91       	pop	r27
    1ce0:	af 91       	pop	r26
    1ce2:	9f 91       	pop	r25
    1ce4:	8f 91       	pop	r24
    1ce6:	7f 91       	pop	r23
    1ce8:	6f 91       	pop	r22
    1cea:	5f 91       	pop	r21
    1cec:	4f 91       	pop	r20
    1cee:	3f 91       	pop	r19
    1cf0:	2f 91       	pop	r18
    1cf2:	0f 90       	pop	r0
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	0f 90       	pop	r0
    1cf8:	1f 90       	pop	r1
    1cfa:	18 95       	reti

00001cfc <__vector_15>:
ISR(TIMER2_OVF_vect) 
{
    1cfc:	1f 92       	push	r1
    1cfe:	0f 92       	push	r0
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	0f 92       	push	r0
    1d04:	11 24       	eor	r1, r1
    1d06:	2f 93       	push	r18
    1d08:	3f 93       	push	r19
    1d0a:	4f 93       	push	r20
    1d0c:	5f 93       	push	r21
    1d0e:	6f 93       	push	r22
    1d10:	7f 93       	push	r23
    1d12:	8f 93       	push	r24
    1d14:	9f 93       	push	r25
    1d16:	af 93       	push	r26
    1d18:	bf 93       	push	r27
    1d1a:	ef 93       	push	r30
    1d1c:	ff 93       	push	r31
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
  timer2_ovrflow_cnt++;
    1d26:	80 91 6d 05 	lds	r24, 0x056D
    1d2a:	90 91 6e 05 	lds	r25, 0x056E
    1d2e:	a0 91 6f 05 	lds	r26, 0x056F
    1d32:	b0 91 70 05 	lds	r27, 0x0570
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	a1 1d       	adc	r26, r1
    1d3a:	b1 1d       	adc	r27, r1
    1d3c:	80 93 6d 05 	sts	0x056D, r24
    1d40:	90 93 6e 05 	sts	0x056E, r25
    1d44:	a0 93 6f 05 	sts	0x056F, r26
    1d48:	b0 93 70 05 	sts	0x0570, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER2_OVF_interrupt);
    1d4c:	80 91 ee 04 	lds	r24, 0x04EE
    1d50:	90 91 ef 04 	lds	r25, 0x04EF
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	29 f0       	breq	.+10     	; 0x1d62 <__vector_15+0x66>
    1d58:	e0 91 ee 04 	lds	r30, 0x04EE
    1d5c:	f0 91 ef 04 	lds	r31, 0x04EF
    1d60:	09 95       	icall
}
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	ff 91       	pop	r31
    1d68:	ef 91       	pop	r30
    1d6a:	bf 91       	pop	r27
    1d6c:	af 91       	pop	r26
    1d6e:	9f 91       	pop	r25
    1d70:	8f 91       	pop	r24
    1d72:	7f 91       	pop	r23
    1d74:	6f 91       	pop	r22
    1d76:	5f 91       	pop	r21
    1d78:	4f 91       	pop	r20
    1d7a:	3f 91       	pop	r19
    1d7c:	2f 91       	pop	r18
    1d7e:	0f 90       	pop	r0
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	0f 90       	pop	r0
    1d84:	1f 90       	pop	r1
    1d86:	18 95       	reti

00001d88 <__vector_35>:
ISR(TIMER3_OVF_vect) 
{
    1d88:	1f 92       	push	r1
    1d8a:	0f 92       	push	r0
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	0f 92       	push	r0
    1d90:	11 24       	eor	r1, r1
    1d92:	2f 93       	push	r18
    1d94:	3f 93       	push	r19
    1d96:	4f 93       	push	r20
    1d98:	5f 93       	push	r21
    1d9a:	6f 93       	push	r22
    1d9c:	7f 93       	push	r23
    1d9e:	8f 93       	push	r24
    1da0:	9f 93       	push	r25
    1da2:	af 93       	push	r26
    1da4:	bf 93       	push	r27
    1da6:	ef 93       	push	r30
    1da8:	ff 93       	push	r31
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
  timer3_ovrflow_cnt++;
    1db2:	80 91 75 05 	lds	r24, 0x0575
    1db6:	90 91 76 05 	lds	r25, 0x0576
    1dba:	a0 91 77 05 	lds	r26, 0x0577
    1dbe:	b0 91 78 05 	lds	r27, 0x0578
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	a1 1d       	adc	r26, r1
    1dc6:	b1 1d       	adc	r27, r1
    1dc8:	80 93 75 05 	sts	0x0575, r24
    1dcc:	90 93 76 05 	sts	0x0576, r25
    1dd0:	a0 93 77 05 	sts	0x0577, r26
    1dd4:	b0 93 78 05 	sts	0x0578, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER3_OVF_interrupt);
    1dd8:	80 91 f8 04 	lds	r24, 0x04F8
    1ddc:	90 91 f9 04 	lds	r25, 0x04F9
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	29 f0       	breq	.+10     	; 0x1dee <__vector_35+0x66>
    1de4:	e0 91 f8 04 	lds	r30, 0x04F8
    1de8:	f0 91 f9 04 	lds	r31, 0x04F9
    1dec:	09 95       	icall
}
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	ff 91       	pop	r31
    1df4:	ef 91       	pop	r30
    1df6:	bf 91       	pop	r27
    1df8:	af 91       	pop	r26
    1dfa:	9f 91       	pop	r25
    1dfc:	8f 91       	pop	r24
    1dfe:	7f 91       	pop	r23
    1e00:	6f 91       	pop	r22
    1e02:	5f 91       	pop	r21
    1e04:	4f 91       	pop	r20
    1e06:	3f 91       	pop	r19
    1e08:	2f 91       	pop	r18
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <__vector_45>:
ISR(TIMER4_OVF_vect) 
{
    1e14:	1f 92       	push	r1
    1e16:	0f 92       	push	r0
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	0f 92       	push	r0
    1e1c:	11 24       	eor	r1, r1
    1e1e:	2f 93       	push	r18
    1e20:	3f 93       	push	r19
    1e22:	4f 93       	push	r20
    1e24:	5f 93       	push	r21
    1e26:	6f 93       	push	r22
    1e28:	7f 93       	push	r23
    1e2a:	8f 93       	push	r24
    1e2c:	9f 93       	push	r25
    1e2e:	af 93       	push	r26
    1e30:	bf 93       	push	r27
    1e32:	ef 93       	push	r30
    1e34:	ff 93       	push	r31
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
  timer4_ovrflow_cnt++;
    1e3e:	80 91 61 05 	lds	r24, 0x0561
    1e42:	90 91 62 05 	lds	r25, 0x0562
    1e46:	a0 91 63 05 	lds	r26, 0x0563
    1e4a:	b0 91 64 05 	lds	r27, 0x0564
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	a1 1d       	adc	r26, r1
    1e52:	b1 1d       	adc	r27, r1
    1e54:	80 93 61 05 	sts	0x0561, r24
    1e58:	90 93 62 05 	sts	0x0562, r25
    1e5c:	a0 93 63 05 	sts	0x0563, r26
    1e60:	b0 93 64 05 	sts	0x0564, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER4_OVF_interrupt);
    1e64:	80 91 02 05 	lds	r24, 0x0502
    1e68:	90 91 03 05 	lds	r25, 0x0503
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	29 f0       	breq	.+10     	; 0x1e7a <__vector_45+0x66>
    1e70:	e0 91 02 05 	lds	r30, 0x0502
    1e74:	f0 91 03 05 	lds	r31, 0x0503
    1e78:	09 95       	icall
}
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	ff 91       	pop	r31
    1e80:	ef 91       	pop	r30
    1e82:	bf 91       	pop	r27
    1e84:	af 91       	pop	r26
    1e86:	9f 91       	pop	r25
    1e88:	8f 91       	pop	r24
    1e8a:	7f 91       	pop	r23
    1e8c:	6f 91       	pop	r22
    1e8e:	5f 91       	pop	r21
    1e90:	4f 91       	pop	r20
    1e92:	3f 91       	pop	r19
    1e94:	2f 91       	pop	r18
    1e96:	0f 90       	pop	r0
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	0f 90       	pop	r0
    1e9c:	1f 90       	pop	r1
    1e9e:	18 95       	reti

00001ea0 <__vector_50>:
ISR(TIMER5_OVF_vect) 
{
    1ea0:	1f 92       	push	r1
    1ea2:	0f 92       	push	r0
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	0f 92       	push	r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	2f 93       	push	r18
    1eac:	3f 93       	push	r19
    1eae:	4f 93       	push	r20
    1eb0:	5f 93       	push	r21
    1eb2:	6f 93       	push	r22
    1eb4:	7f 93       	push	r23
    1eb6:	8f 93       	push	r24
    1eb8:	9f 93       	push	r25
    1eba:	af 93       	push	r26
    1ebc:	bf 93       	push	r27
    1ebe:	ef 93       	push	r30
    1ec0:	ff 93       	push	r31
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
  timer5_ovrflow_cnt++;
    1eca:	80 91 79 05 	lds	r24, 0x0579
    1ece:	90 91 7a 05 	lds	r25, 0x057A
    1ed2:	a0 91 7b 05 	lds	r26, 0x057B
    1ed6:	b0 91 7c 05 	lds	r27, 0x057C
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	a1 1d       	adc	r26, r1
    1ede:	b1 1d       	adc	r27, r1
    1ee0:	80 93 79 05 	sts	0x0579, r24
    1ee4:	90 93 7a 05 	sts	0x057A, r25
    1ee8:	a0 93 7b 05 	sts	0x057B, r26
    1eec:	b0 93 7c 05 	sts	0x057C, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER5_OVF_interrupt);
    1ef0:	80 91 0c 05 	lds	r24, 0x050C
    1ef4:	90 91 0d 05 	lds	r25, 0x050D
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	29 f0       	breq	.+10     	; 0x1f06 <__vector_50+0x66>
    1efc:	e0 91 0c 05 	lds	r30, 0x050C
    1f00:	f0 91 0d 05 	lds	r31, 0x050D
    1f04:	09 95       	icall
}
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	ff 91       	pop	r31
    1f0c:	ef 91       	pop	r30
    1f0e:	bf 91       	pop	r27
    1f10:	af 91       	pop	r26
    1f12:	9f 91       	pop	r25
    1f14:	8f 91       	pop	r24
    1f16:	7f 91       	pop	r23
    1f18:	6f 91       	pop	r22
    1f1a:	5f 91       	pop	r21
    1f1c:	4f 91       	pop	r20
    1f1e:	3f 91       	pop	r19
    1f20:	2f 91       	pop	r18
    1f22:	0f 90       	pop	r0
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	0f 90       	pop	r0
    1f28:	1f 90       	pop	r1
    1f2a:	18 95       	reti

00001f2c <__vector_21>:
ISR(TIMER0_COMPA_vect)
{
    1f2c:	1f 92       	push	r1
    1f2e:	0f 92       	push	r0
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	0f 92       	push	r0
    1f34:	11 24       	eor	r1, r1
    1f36:	2f 93       	push	r18
    1f38:	3f 93       	push	r19
    1f3a:	4f 93       	push	r20
    1f3c:	5f 93       	push	r21
    1f3e:	6f 93       	push	r22
    1f40:	7f 93       	push	r23
    1f42:	8f 93       	push	r24
    1f44:	9f 93       	push	r25
    1f46:	af 93       	push	r26
    1f48:	bf 93       	push	r27
    1f4a:	ef 93       	push	r30
    1f4c:	ff 93       	push	r31
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPA_interrupt);
    1f56:	80 91 da 04 	lds	r24, 0x04DA
    1f5a:	90 91 db 04 	lds	r25, 0x04DB
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	29 f0       	breq	.+10     	; 0x1f6c <__vector_21+0x40>
    1f62:	e0 91 da 04 	lds	r30, 0x04DA
    1f66:	f0 91 db 04 	lds	r31, 0x04DB
    1f6a:	09 95       	icall
}
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	ff 91       	pop	r31
    1f72:	ef 91       	pop	r30
    1f74:	bf 91       	pop	r27
    1f76:	af 91       	pop	r26
    1f78:	9f 91       	pop	r25
    1f7a:	8f 91       	pop	r24
    1f7c:	7f 91       	pop	r23
    1f7e:	6f 91       	pop	r22
    1f80:	5f 91       	pop	r21
    1f82:	4f 91       	pop	r20
    1f84:	3f 91       	pop	r19
    1f86:	2f 91       	pop	r18
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

00001f92 <__vector_22>:
ISR(TIMER0_COMPB_vect)
{
    1f92:	1f 92       	push	r1
    1f94:	0f 92       	push	r0
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	0f 92       	push	r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	2f 93       	push	r18
    1f9e:	3f 93       	push	r19
    1fa0:	4f 93       	push	r20
    1fa2:	5f 93       	push	r21
    1fa4:	6f 93       	push	r22
    1fa6:	7f 93       	push	r23
    1fa8:	8f 93       	push	r24
    1faa:	9f 93       	push	r25
    1fac:	af 93       	push	r26
    1fae:	bf 93       	push	r27
    1fb0:	ef 93       	push	r30
    1fb2:	ff 93       	push	r31
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPB_interrupt);
    1fbc:	80 91 dc 04 	lds	r24, 0x04DC
    1fc0:	90 91 dd 04 	lds	r25, 0x04DD
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	29 f0       	breq	.+10     	; 0x1fd2 <__vector_22+0x40>
    1fc8:	e0 91 dc 04 	lds	r30, 0x04DC
    1fcc:	f0 91 dd 04 	lds	r31, 0x04DD
    1fd0:	09 95       	icall
}
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	ff 91       	pop	r31
    1fd8:	ef 91       	pop	r30
    1fda:	bf 91       	pop	r27
    1fdc:	af 91       	pop	r26
    1fde:	9f 91       	pop	r25
    1fe0:	8f 91       	pop	r24
    1fe2:	7f 91       	pop	r23
    1fe4:	6f 91       	pop	r22
    1fe6:	5f 91       	pop	r21
    1fe8:	4f 91       	pop	r20
    1fea:	3f 91       	pop	r19
    1fec:	2f 91       	pop	r18
    1fee:	0f 90       	pop	r0
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	0f 90       	pop	r0
    1ff4:	1f 90       	pop	r1
    1ff6:	18 95       	reti

00001ff8 <__vector_16>:
ISR(TIMER1_CAPT_vect)
{
    1ff8:	1f 92       	push	r1
    1ffa:	0f 92       	push	r0
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	0f 92       	push	r0
    2000:	11 24       	eor	r1, r1
    2002:	2f 93       	push	r18
    2004:	3f 93       	push	r19
    2006:	4f 93       	push	r20
    2008:	5f 93       	push	r21
    200a:	6f 93       	push	r22
    200c:	7f 93       	push	r23
    200e:	8f 93       	push	r24
    2010:	9f 93       	push	r25
    2012:	af 93       	push	r26
    2014:	bf 93       	push	r27
    2016:	ef 93       	push	r30
    2018:	ff 93       	push	r31
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER1_CAPT_interrupt);
    2022:	80 91 e0 04 	lds	r24, 0x04E0
    2026:	90 91 e1 04 	lds	r25, 0x04E1
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	29 f0       	breq	.+10     	; 0x2038 <__vector_16+0x40>
    202e:	e0 91 e0 04 	lds	r30, 0x04E0
    2032:	f0 91 e1 04 	lds	r31, 0x04E1
    2036:	09 95       	icall
}
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	ff 91       	pop	r31
    203e:	ef 91       	pop	r30
    2040:	bf 91       	pop	r27
    2042:	af 91       	pop	r26
    2044:	9f 91       	pop	r25
    2046:	8f 91       	pop	r24
    2048:	7f 91       	pop	r23
    204a:	6f 91       	pop	r22
    204c:	5f 91       	pop	r21
    204e:	4f 91       	pop	r20
    2050:	3f 91       	pop	r19
    2052:	2f 91       	pop	r18
    2054:	0f 90       	pop	r0
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	0f 90       	pop	r0
    205a:	1f 90       	pop	r1
    205c:	18 95       	reti

0000205e <__vector_17>:
ISR(TIMER1_COMPA_vect)
{
    205e:	1f 92       	push	r1
    2060:	0f 92       	push	r0
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	0f 92       	push	r0
    2066:	11 24       	eor	r1, r1
    2068:	2f 93       	push	r18
    206a:	3f 93       	push	r19
    206c:	4f 93       	push	r20
    206e:	5f 93       	push	r21
    2070:	6f 93       	push	r22
    2072:	7f 93       	push	r23
    2074:	8f 93       	push	r24
    2076:	9f 93       	push	r25
    2078:	af 93       	push	r26
    207a:	bf 93       	push	r27
    207c:	ef 93       	push	r30
    207e:	ff 93       	push	r31
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPA_interrupt);
    2088:	80 91 e2 04 	lds	r24, 0x04E2
    208c:	90 91 e3 04 	lds	r25, 0x04E3
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	29 f0       	breq	.+10     	; 0x209e <__vector_17+0x40>
    2094:	e0 91 e2 04 	lds	r30, 0x04E2
    2098:	f0 91 e3 04 	lds	r31, 0x04E3
    209c:	09 95       	icall
}
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	ff 91       	pop	r31
    20a4:	ef 91       	pop	r30
    20a6:	bf 91       	pop	r27
    20a8:	af 91       	pop	r26
    20aa:	9f 91       	pop	r25
    20ac:	8f 91       	pop	r24
    20ae:	7f 91       	pop	r23
    20b0:	6f 91       	pop	r22
    20b2:	5f 91       	pop	r21
    20b4:	4f 91       	pop	r20
    20b6:	3f 91       	pop	r19
    20b8:	2f 91       	pop	r18
    20ba:	0f 90       	pop	r0
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	0f 90       	pop	r0
    20c0:	1f 90       	pop	r1
    20c2:	18 95       	reti

000020c4 <__vector_18>:
ISR(TIMER1_COMPB_vect)
{
    20c4:	1f 92       	push	r1
    20c6:	0f 92       	push	r0
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	0f 92       	push	r0
    20cc:	11 24       	eor	r1, r1
    20ce:	2f 93       	push	r18
    20d0:	3f 93       	push	r19
    20d2:	4f 93       	push	r20
    20d4:	5f 93       	push	r21
    20d6:	6f 93       	push	r22
    20d8:	7f 93       	push	r23
    20da:	8f 93       	push	r24
    20dc:	9f 93       	push	r25
    20de:	af 93       	push	r26
    20e0:	bf 93       	push	r27
    20e2:	ef 93       	push	r30
    20e4:	ff 93       	push	r31
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPB_interrupt);
    20ee:	80 91 e4 04 	lds	r24, 0x04E4
    20f2:	90 91 e5 04 	lds	r25, 0x04E5
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	29 f0       	breq	.+10     	; 0x2104 <__vector_18+0x40>
    20fa:	e0 91 e4 04 	lds	r30, 0x04E4
    20fe:	f0 91 e5 04 	lds	r31, 0x04E5
    2102:	09 95       	icall
}
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	ff 91       	pop	r31
    210a:	ef 91       	pop	r30
    210c:	bf 91       	pop	r27
    210e:	af 91       	pop	r26
    2110:	9f 91       	pop	r25
    2112:	8f 91       	pop	r24
    2114:	7f 91       	pop	r23
    2116:	6f 91       	pop	r22
    2118:	5f 91       	pop	r21
    211a:	4f 91       	pop	r20
    211c:	3f 91       	pop	r19
    211e:	2f 91       	pop	r18
    2120:	0f 90       	pop	r0
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	0f 90       	pop	r0
    2126:	1f 90       	pop	r1
    2128:	18 95       	reti

0000212a <__vector_19>:
ISR(TIMER1_COMPC_vect)
{
    212a:	1f 92       	push	r1
    212c:	0f 92       	push	r0
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	0f 92       	push	r0
    2132:	11 24       	eor	r1, r1
    2134:	2f 93       	push	r18
    2136:	3f 93       	push	r19
    2138:	4f 93       	push	r20
    213a:	5f 93       	push	r21
    213c:	6f 93       	push	r22
    213e:	7f 93       	push	r23
    2140:	8f 93       	push	r24
    2142:	9f 93       	push	r25
    2144:	af 93       	push	r26
    2146:	bf 93       	push	r27
    2148:	ef 93       	push	r30
    214a:	ff 93       	push	r31
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPC_interrupt);
    2154:	80 91 e6 04 	lds	r24, 0x04E6
    2158:	90 91 e7 04 	lds	r25, 0x04E7
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	29 f0       	breq	.+10     	; 0x216a <__vector_19+0x40>
    2160:	e0 91 e6 04 	lds	r30, 0x04E6
    2164:	f0 91 e7 04 	lds	r31, 0x04E7
    2168:	09 95       	icall
}
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	ff 91       	pop	r31
    2170:	ef 91       	pop	r30
    2172:	bf 91       	pop	r27
    2174:	af 91       	pop	r26
    2176:	9f 91       	pop	r25
    2178:	8f 91       	pop	r24
    217a:	7f 91       	pop	r23
    217c:	6f 91       	pop	r22
    217e:	5f 91       	pop	r21
    2180:	4f 91       	pop	r20
    2182:	3f 91       	pop	r19
    2184:	2f 91       	pop	r18
    2186:	0f 90       	pop	r0
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	0f 90       	pop	r0
    218c:	1f 90       	pop	r1
    218e:	18 95       	reti

00002190 <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
    2190:	1f 92       	push	r1
    2192:	0f 92       	push	r0
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	0f 92       	push	r0
    2198:	11 24       	eor	r1, r1
    219a:	2f 93       	push	r18
    219c:	3f 93       	push	r19
    219e:	4f 93       	push	r20
    21a0:	5f 93       	push	r21
    21a2:	6f 93       	push	r22
    21a4:	7f 93       	push	r23
    21a6:	8f 93       	push	r24
    21a8:	9f 93       	push	r25
    21aa:	af 93       	push	r26
    21ac:	bf 93       	push	r27
    21ae:	ef 93       	push	r30
    21b0:	ff 93       	push	r31
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPA_interrupt);
    21ba:	80 91 ea 04 	lds	r24, 0x04EA
    21be:	90 91 eb 04 	lds	r25, 0x04EB
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	29 f0       	breq	.+10     	; 0x21d0 <__vector_13+0x40>
    21c6:	e0 91 ea 04 	lds	r30, 0x04EA
    21ca:	f0 91 eb 04 	lds	r31, 0x04EB
    21ce:	09 95       	icall
}
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	ff 91       	pop	r31
    21d6:	ef 91       	pop	r30
    21d8:	bf 91       	pop	r27
    21da:	af 91       	pop	r26
    21dc:	9f 91       	pop	r25
    21de:	8f 91       	pop	r24
    21e0:	7f 91       	pop	r23
    21e2:	6f 91       	pop	r22
    21e4:	5f 91       	pop	r21
    21e6:	4f 91       	pop	r20
    21e8:	3f 91       	pop	r19
    21ea:	2f 91       	pop	r18
    21ec:	0f 90       	pop	r0
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	0f 90       	pop	r0
    21f2:	1f 90       	pop	r1
    21f4:	18 95       	reti

000021f6 <__vector_14>:
ISR(TIMER2_COMPB_vect)
{
    21f6:	1f 92       	push	r1
    21f8:	0f 92       	push	r0
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	0f 92       	push	r0
    21fe:	11 24       	eor	r1, r1
    2200:	2f 93       	push	r18
    2202:	3f 93       	push	r19
    2204:	4f 93       	push	r20
    2206:	5f 93       	push	r21
    2208:	6f 93       	push	r22
    220a:	7f 93       	push	r23
    220c:	8f 93       	push	r24
    220e:	9f 93       	push	r25
    2210:	af 93       	push	r26
    2212:	bf 93       	push	r27
    2214:	ef 93       	push	r30
    2216:	ff 93       	push	r31
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPB_interrupt);
    2220:	80 91 ec 04 	lds	r24, 0x04EC
    2224:	90 91 ed 04 	lds	r25, 0x04ED
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	29 f0       	breq	.+10     	; 0x2236 <__stack+0x37>
    222c:	e0 91 ec 04 	lds	r30, 0x04EC
    2230:	f0 91 ed 04 	lds	r31, 0x04ED
    2234:	09 95       	icall
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	ff 91       	pop	r31
    223c:	ef 91       	pop	r30
    223e:	bf 91       	pop	r27
    2240:	af 91       	pop	r26
    2242:	9f 91       	pop	r25
    2244:	8f 91       	pop	r24
    2246:	7f 91       	pop	r23
    2248:	6f 91       	pop	r22
    224a:	5f 91       	pop	r21
    224c:	4f 91       	pop	r20
    224e:	3f 91       	pop	r19
    2250:	2f 91       	pop	r18
    2252:	0f 90       	pop	r0
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	0f 90       	pop	r0
    2258:	1f 90       	pop	r1
    225a:	18 95       	reti

0000225c <__vector_31>:
ISR(TIMER3_CAPT_vect)
{
    225c:	1f 92       	push	r1
    225e:	0f 92       	push	r0
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	0f 92       	push	r0
    2264:	11 24       	eor	r1, r1
    2266:	2f 93       	push	r18
    2268:	3f 93       	push	r19
    226a:	4f 93       	push	r20
    226c:	5f 93       	push	r21
    226e:	6f 93       	push	r22
    2270:	7f 93       	push	r23
    2272:	8f 93       	push	r24
    2274:	9f 93       	push	r25
    2276:	af 93       	push	r26
    2278:	bf 93       	push	r27
    227a:	ef 93       	push	r30
    227c:	ff 93       	push	r31
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER3_CAPT_interrupt);
    2286:	80 91 f0 04 	lds	r24, 0x04F0
    228a:	90 91 f1 04 	lds	r25, 0x04F1
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	29 f0       	breq	.+10     	; 0x229c <__vector_31+0x40>
    2292:	e0 91 f0 04 	lds	r30, 0x04F0
    2296:	f0 91 f1 04 	lds	r31, 0x04F1
    229a:	09 95       	icall
}
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	ff 91       	pop	r31
    22a2:	ef 91       	pop	r30
    22a4:	bf 91       	pop	r27
    22a6:	af 91       	pop	r26
    22a8:	9f 91       	pop	r25
    22aa:	8f 91       	pop	r24
    22ac:	7f 91       	pop	r23
    22ae:	6f 91       	pop	r22
    22b0:	5f 91       	pop	r21
    22b2:	4f 91       	pop	r20
    22b4:	3f 91       	pop	r19
    22b6:	2f 91       	pop	r18
    22b8:	0f 90       	pop	r0
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	0f 90       	pop	r0
    22be:	1f 90       	pop	r1
    22c0:	18 95       	reti

000022c2 <__vector_32>:
ISR(TIMER3_COMPA_vect)
{
    22c2:	1f 92       	push	r1
    22c4:	0f 92       	push	r0
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	0f 92       	push	r0
    22ca:	11 24       	eor	r1, r1
    22cc:	2f 93       	push	r18
    22ce:	3f 93       	push	r19
    22d0:	4f 93       	push	r20
    22d2:	5f 93       	push	r21
    22d4:	6f 93       	push	r22
    22d6:	7f 93       	push	r23
    22d8:	8f 93       	push	r24
    22da:	9f 93       	push	r25
    22dc:	af 93       	push	r26
    22de:	bf 93       	push	r27
    22e0:	ef 93       	push	r30
    22e2:	ff 93       	push	r31
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPA_interrupt);
    22ec:	80 91 f2 04 	lds	r24, 0x04F2
    22f0:	90 91 f3 04 	lds	r25, 0x04F3
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	29 f0       	breq	.+10     	; 0x2302 <__vector_32+0x40>
    22f8:	e0 91 f2 04 	lds	r30, 0x04F2
    22fc:	f0 91 f3 04 	lds	r31, 0x04F3
    2300:	09 95       	icall
}
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	ff 91       	pop	r31
    2308:	ef 91       	pop	r30
    230a:	bf 91       	pop	r27
    230c:	af 91       	pop	r26
    230e:	9f 91       	pop	r25
    2310:	8f 91       	pop	r24
    2312:	7f 91       	pop	r23
    2314:	6f 91       	pop	r22
    2316:	5f 91       	pop	r21
    2318:	4f 91       	pop	r20
    231a:	3f 91       	pop	r19
    231c:	2f 91       	pop	r18
    231e:	0f 90       	pop	r0
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	0f 90       	pop	r0
    2324:	1f 90       	pop	r1
    2326:	18 95       	reti

00002328 <__vector_33>:
ISR(TIMER3_COMPB_vect)
{
    2328:	1f 92       	push	r1
    232a:	0f 92       	push	r0
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	0f 92       	push	r0
    2330:	11 24       	eor	r1, r1
    2332:	2f 93       	push	r18
    2334:	3f 93       	push	r19
    2336:	4f 93       	push	r20
    2338:	5f 93       	push	r21
    233a:	6f 93       	push	r22
    233c:	7f 93       	push	r23
    233e:	8f 93       	push	r24
    2340:	9f 93       	push	r25
    2342:	af 93       	push	r26
    2344:	bf 93       	push	r27
    2346:	ef 93       	push	r30
    2348:	ff 93       	push	r31
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPB_interrupt);
    2352:	80 91 f4 04 	lds	r24, 0x04F4
    2356:	90 91 f5 04 	lds	r25, 0x04F5
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	29 f0       	breq	.+10     	; 0x2368 <__vector_33+0x40>
    235e:	e0 91 f4 04 	lds	r30, 0x04F4
    2362:	f0 91 f5 04 	lds	r31, 0x04F5
    2366:	09 95       	icall
}
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	ff 91       	pop	r31
    236e:	ef 91       	pop	r30
    2370:	bf 91       	pop	r27
    2372:	af 91       	pop	r26
    2374:	9f 91       	pop	r25
    2376:	8f 91       	pop	r24
    2378:	7f 91       	pop	r23
    237a:	6f 91       	pop	r22
    237c:	5f 91       	pop	r21
    237e:	4f 91       	pop	r20
    2380:	3f 91       	pop	r19
    2382:	2f 91       	pop	r18
    2384:	0f 90       	pop	r0
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	0f 90       	pop	r0
    238a:	1f 90       	pop	r1
    238c:	18 95       	reti

0000238e <__vector_34>:
ISR(TIMER3_COMPC_vect)
{
    238e:	1f 92       	push	r1
    2390:	0f 92       	push	r0
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	0f 92       	push	r0
    2396:	11 24       	eor	r1, r1
    2398:	2f 93       	push	r18
    239a:	3f 93       	push	r19
    239c:	4f 93       	push	r20
    239e:	5f 93       	push	r21
    23a0:	6f 93       	push	r22
    23a2:	7f 93       	push	r23
    23a4:	8f 93       	push	r24
    23a6:	9f 93       	push	r25
    23a8:	af 93       	push	r26
    23aa:	bf 93       	push	r27
    23ac:	ef 93       	push	r30
    23ae:	ff 93       	push	r31
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPC_interrupt);
    23b8:	80 91 f6 04 	lds	r24, 0x04F6
    23bc:	90 91 f7 04 	lds	r25, 0x04F7
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	29 f0       	breq	.+10     	; 0x23ce <__vector_34+0x40>
    23c4:	e0 91 f6 04 	lds	r30, 0x04F6
    23c8:	f0 91 f7 04 	lds	r31, 0x04F7
    23cc:	09 95       	icall
}
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	ff 91       	pop	r31
    23d4:	ef 91       	pop	r30
    23d6:	bf 91       	pop	r27
    23d8:	af 91       	pop	r26
    23da:	9f 91       	pop	r25
    23dc:	8f 91       	pop	r24
    23de:	7f 91       	pop	r23
    23e0:	6f 91       	pop	r22
    23e2:	5f 91       	pop	r21
    23e4:	4f 91       	pop	r20
    23e6:	3f 91       	pop	r19
    23e8:	2f 91       	pop	r18
    23ea:	0f 90       	pop	r0
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	0f 90       	pop	r0
    23f0:	1f 90       	pop	r1
    23f2:	18 95       	reti

000023f4 <__vector_41>:
ISR(TIMER4_CAPT_vect)
{
    23f4:	1f 92       	push	r1
    23f6:	0f 92       	push	r0
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	0f 92       	push	r0
    23fc:	11 24       	eor	r1, r1
    23fe:	2f 93       	push	r18
    2400:	3f 93       	push	r19
    2402:	4f 93       	push	r20
    2404:	5f 93       	push	r21
    2406:	6f 93       	push	r22
    2408:	7f 93       	push	r23
    240a:	8f 93       	push	r24
    240c:	9f 93       	push	r25
    240e:	af 93       	push	r26
    2410:	bf 93       	push	r27
    2412:	ef 93       	push	r30
    2414:	ff 93       	push	r31
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER4_CAPT_interrupt);
    241e:	80 91 fa 04 	lds	r24, 0x04FA
    2422:	90 91 fb 04 	lds	r25, 0x04FB
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	29 f0       	breq	.+10     	; 0x2434 <__vector_41+0x40>
    242a:	e0 91 fa 04 	lds	r30, 0x04FA
    242e:	f0 91 fb 04 	lds	r31, 0x04FB
    2432:	09 95       	icall
}
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	ff 91       	pop	r31
    243a:	ef 91       	pop	r30
    243c:	bf 91       	pop	r27
    243e:	af 91       	pop	r26
    2440:	9f 91       	pop	r25
    2442:	8f 91       	pop	r24
    2444:	7f 91       	pop	r23
    2446:	6f 91       	pop	r22
    2448:	5f 91       	pop	r21
    244a:	4f 91       	pop	r20
    244c:	3f 91       	pop	r19
    244e:	2f 91       	pop	r18
    2450:	0f 90       	pop	r0
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	0f 90       	pop	r0
    2456:	1f 90       	pop	r1
    2458:	18 95       	reti

0000245a <__vector_42>:
ISR(TIMER4_COMPA_vect)
{
    245a:	1f 92       	push	r1
    245c:	0f 92       	push	r0
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	0f 92       	push	r0
    2462:	11 24       	eor	r1, r1
    2464:	2f 93       	push	r18
    2466:	3f 93       	push	r19
    2468:	4f 93       	push	r20
    246a:	5f 93       	push	r21
    246c:	6f 93       	push	r22
    246e:	7f 93       	push	r23
    2470:	8f 93       	push	r24
    2472:	9f 93       	push	r25
    2474:	af 93       	push	r26
    2476:	bf 93       	push	r27
    2478:	ef 93       	push	r30
    247a:	ff 93       	push	r31
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPA_interrupt);
    2484:	80 91 fc 04 	lds	r24, 0x04FC
    2488:	90 91 fd 04 	lds	r25, 0x04FD
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	29 f0       	breq	.+10     	; 0x249a <__vector_42+0x40>
    2490:	e0 91 fc 04 	lds	r30, 0x04FC
    2494:	f0 91 fd 04 	lds	r31, 0x04FD
    2498:	09 95       	icall
}
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	ff 91       	pop	r31
    24a0:	ef 91       	pop	r30
    24a2:	bf 91       	pop	r27
    24a4:	af 91       	pop	r26
    24a6:	9f 91       	pop	r25
    24a8:	8f 91       	pop	r24
    24aa:	7f 91       	pop	r23
    24ac:	6f 91       	pop	r22
    24ae:	5f 91       	pop	r21
    24b0:	4f 91       	pop	r20
    24b2:	3f 91       	pop	r19
    24b4:	2f 91       	pop	r18
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	0f 90       	pop	r0
    24bc:	1f 90       	pop	r1
    24be:	18 95       	reti

000024c0 <__vector_43>:
ISR(TIMER4_COMPB_vect)
{
    24c0:	1f 92       	push	r1
    24c2:	0f 92       	push	r0
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	0f 92       	push	r0
    24c8:	11 24       	eor	r1, r1
    24ca:	2f 93       	push	r18
    24cc:	3f 93       	push	r19
    24ce:	4f 93       	push	r20
    24d0:	5f 93       	push	r21
    24d2:	6f 93       	push	r22
    24d4:	7f 93       	push	r23
    24d6:	8f 93       	push	r24
    24d8:	9f 93       	push	r25
    24da:	af 93       	push	r26
    24dc:	bf 93       	push	r27
    24de:	ef 93       	push	r30
    24e0:	ff 93       	push	r31
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPB_interrupt);
    24ea:	80 91 fe 04 	lds	r24, 0x04FE
    24ee:	90 91 ff 04 	lds	r25, 0x04FF
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	29 f0       	breq	.+10     	; 0x2500 <__vector_43+0x40>
    24f6:	e0 91 fe 04 	lds	r30, 0x04FE
    24fa:	f0 91 ff 04 	lds	r31, 0x04FF
    24fe:	09 95       	icall
}
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	ff 91       	pop	r31
    2506:	ef 91       	pop	r30
    2508:	bf 91       	pop	r27
    250a:	af 91       	pop	r26
    250c:	9f 91       	pop	r25
    250e:	8f 91       	pop	r24
    2510:	7f 91       	pop	r23
    2512:	6f 91       	pop	r22
    2514:	5f 91       	pop	r21
    2516:	4f 91       	pop	r20
    2518:	3f 91       	pop	r19
    251a:	2f 91       	pop	r18
    251c:	0f 90       	pop	r0
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	0f 90       	pop	r0
    2522:	1f 90       	pop	r1
    2524:	18 95       	reti

00002526 <__vector_44>:
ISR(TIMER4_COMPC_vect)
{
    2526:	1f 92       	push	r1
    2528:	0f 92       	push	r0
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	0f 92       	push	r0
    252e:	11 24       	eor	r1, r1
    2530:	2f 93       	push	r18
    2532:	3f 93       	push	r19
    2534:	4f 93       	push	r20
    2536:	5f 93       	push	r21
    2538:	6f 93       	push	r22
    253a:	7f 93       	push	r23
    253c:	8f 93       	push	r24
    253e:	9f 93       	push	r25
    2540:	af 93       	push	r26
    2542:	bf 93       	push	r27
    2544:	ef 93       	push	r30
    2546:	ff 93       	push	r31
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPC_interrupt);
    2550:	80 91 00 05 	lds	r24, 0x0500
    2554:	90 91 01 05 	lds	r25, 0x0501
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	29 f0       	breq	.+10     	; 0x2566 <__vector_44+0x40>
    255c:	e0 91 00 05 	lds	r30, 0x0500
    2560:	f0 91 01 05 	lds	r31, 0x0501
    2564:	09 95       	icall
}
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	ff 91       	pop	r31
    256c:	ef 91       	pop	r30
    256e:	bf 91       	pop	r27
    2570:	af 91       	pop	r26
    2572:	9f 91       	pop	r25
    2574:	8f 91       	pop	r24
    2576:	7f 91       	pop	r23
    2578:	6f 91       	pop	r22
    257a:	5f 91       	pop	r21
    257c:	4f 91       	pop	r20
    257e:	3f 91       	pop	r19
    2580:	2f 91       	pop	r18
    2582:	0f 90       	pop	r0
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	0f 90       	pop	r0
    2588:	1f 90       	pop	r1
    258a:	18 95       	reti

0000258c <__vector_46>:
ISR(TIMER5_CAPT_vect)
{
    258c:	1f 92       	push	r1
    258e:	0f 92       	push	r0
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	0f 92       	push	r0
    2594:	11 24       	eor	r1, r1
    2596:	2f 93       	push	r18
    2598:	3f 93       	push	r19
    259a:	4f 93       	push	r20
    259c:	5f 93       	push	r21
    259e:	6f 93       	push	r22
    25a0:	7f 93       	push	r23
    25a2:	8f 93       	push	r24
    25a4:	9f 93       	push	r25
    25a6:	af 93       	push	r26
    25a8:	bf 93       	push	r27
    25aa:	ef 93       	push	r30
    25ac:	ff 93       	push	r31
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER5_CAPT_interrupt);
    25b6:	80 91 04 05 	lds	r24, 0x0504
    25ba:	90 91 05 05 	lds	r25, 0x0505
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	29 f0       	breq	.+10     	; 0x25cc <__vector_46+0x40>
    25c2:	e0 91 04 05 	lds	r30, 0x0504
    25c6:	f0 91 05 05 	lds	r31, 0x0505
    25ca:	09 95       	icall
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	ff 91       	pop	r31
    25d2:	ef 91       	pop	r30
    25d4:	bf 91       	pop	r27
    25d6:	af 91       	pop	r26
    25d8:	9f 91       	pop	r25
    25da:	8f 91       	pop	r24
    25dc:	7f 91       	pop	r23
    25de:	6f 91       	pop	r22
    25e0:	5f 91       	pop	r21
    25e2:	4f 91       	pop	r20
    25e4:	3f 91       	pop	r19
    25e6:	2f 91       	pop	r18
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	0f 90       	pop	r0
    25ee:	1f 90       	pop	r1
    25f0:	18 95       	reti

000025f2 <__vector_47>:
ISR(TIMER5_COMPA_vect)
{
    25f2:	1f 92       	push	r1
    25f4:	0f 92       	push	r0
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	0f 92       	push	r0
    25fa:	11 24       	eor	r1, r1
    25fc:	2f 93       	push	r18
    25fe:	3f 93       	push	r19
    2600:	4f 93       	push	r20
    2602:	5f 93       	push	r21
    2604:	6f 93       	push	r22
    2606:	7f 93       	push	r23
    2608:	8f 93       	push	r24
    260a:	9f 93       	push	r25
    260c:	af 93       	push	r26
    260e:	bf 93       	push	r27
    2610:	ef 93       	push	r30
    2612:	ff 93       	push	r31
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPA_interrupt);
    261c:	80 91 06 05 	lds	r24, 0x0506
    2620:	90 91 07 05 	lds	r25, 0x0507
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	29 f0       	breq	.+10     	; 0x2632 <__vector_47+0x40>
    2628:	e0 91 06 05 	lds	r30, 0x0506
    262c:	f0 91 07 05 	lds	r31, 0x0507
    2630:	09 95       	icall
}
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	ff 91       	pop	r31
    2638:	ef 91       	pop	r30
    263a:	bf 91       	pop	r27
    263c:	af 91       	pop	r26
    263e:	9f 91       	pop	r25
    2640:	8f 91       	pop	r24
    2642:	7f 91       	pop	r23
    2644:	6f 91       	pop	r22
    2646:	5f 91       	pop	r21
    2648:	4f 91       	pop	r20
    264a:	3f 91       	pop	r19
    264c:	2f 91       	pop	r18
    264e:	0f 90       	pop	r0
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	0f 90       	pop	r0
    2654:	1f 90       	pop	r1
    2656:	18 95       	reti

00002658 <__vector_48>:
ISR(TIMER5_COMPB_vect)
{
    2658:	1f 92       	push	r1
    265a:	0f 92       	push	r0
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	0f 92       	push	r0
    2660:	11 24       	eor	r1, r1
    2662:	2f 93       	push	r18
    2664:	3f 93       	push	r19
    2666:	4f 93       	push	r20
    2668:	5f 93       	push	r21
    266a:	6f 93       	push	r22
    266c:	7f 93       	push	r23
    266e:	8f 93       	push	r24
    2670:	9f 93       	push	r25
    2672:	af 93       	push	r26
    2674:	bf 93       	push	r27
    2676:	ef 93       	push	r30
    2678:	ff 93       	push	r31
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPB_interrupt);
    2682:	80 91 08 05 	lds	r24, 0x0508
    2686:	90 91 09 05 	lds	r25, 0x0509
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	29 f0       	breq	.+10     	; 0x2698 <__vector_48+0x40>
    268e:	e0 91 08 05 	lds	r30, 0x0508
    2692:	f0 91 09 05 	lds	r31, 0x0509
    2696:	09 95       	icall
}
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	ff 91       	pop	r31
    269e:	ef 91       	pop	r30
    26a0:	bf 91       	pop	r27
    26a2:	af 91       	pop	r26
    26a4:	9f 91       	pop	r25
    26a6:	8f 91       	pop	r24
    26a8:	7f 91       	pop	r23
    26aa:	6f 91       	pop	r22
    26ac:	5f 91       	pop	r21
    26ae:	4f 91       	pop	r20
    26b0:	3f 91       	pop	r19
    26b2:	2f 91       	pop	r18
    26b4:	0f 90       	pop	r0
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	0f 90       	pop	r0
    26ba:	1f 90       	pop	r1
    26bc:	18 95       	reti

000026be <__vector_49>:
ISR(TIMER5_COMPC_vect)
{
    26be:	1f 92       	push	r1
    26c0:	0f 92       	push	r0
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	0f 92       	push	r0
    26c6:	11 24       	eor	r1, r1
    26c8:	2f 93       	push	r18
    26ca:	3f 93       	push	r19
    26cc:	4f 93       	push	r20
    26ce:	5f 93       	push	r21
    26d0:	6f 93       	push	r22
    26d2:	7f 93       	push	r23
    26d4:	8f 93       	push	r24
    26d6:	9f 93       	push	r25
    26d8:	af 93       	push	r26
    26da:	bf 93       	push	r27
    26dc:	ef 93       	push	r30
    26de:	ff 93       	push	r31
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPC_interrupt);
    26e8:	80 91 0a 05 	lds	r24, 0x050A
    26ec:	90 91 0b 05 	lds	r25, 0x050B
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	29 f0       	breq	.+10     	; 0x26fe <__vector_49+0x40>
    26f4:	e0 91 0a 05 	lds	r30, 0x050A
    26f8:	f0 91 0b 05 	lds	r31, 0x050B
    26fc:	09 95       	icall
}
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	ff 91       	pop	r31
    2704:	ef 91       	pop	r30
    2706:	bf 91       	pop	r27
    2708:	af 91       	pop	r26
    270a:	9f 91       	pop	r25
    270c:	8f 91       	pop	r24
    270e:	7f 91       	pop	r23
    2710:	6f 91       	pop	r22
    2712:	5f 91       	pop	r21
    2714:	4f 91       	pop	r20
    2716:	3f 91       	pop	r19
    2718:	2f 91       	pop	r18
    271a:	0f 90       	pop	r0
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	0f 90       	pop	r0
    2720:	1f 90       	pop	r1
    2722:	18 95       	reti

00002724 <__vector_default>:

ISR(BADISR_vect)
{
    2724:	1f 92       	push	r1
    2726:	0f 92       	push	r0
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	0f 92       	push	r0
    272c:	11 24       	eor	r1, r1
    272e:	2f 93       	push	r18
    2730:	3f 93       	push	r19
    2732:	4f 93       	push	r20
    2734:	5f 93       	push	r21
    2736:	6f 93       	push	r22
    2738:	7f 93       	push	r23
    273a:	8f 93       	push	r24
    273c:	9f 93       	push	r25
    273e:	af 93       	push	r26
    2740:	bf 93       	push	r27
    2742:	ef 93       	push	r30
    2744:	ff 93       	push	r31
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
  rprintf("BAD_vect called!");
    274e:	82 e8       	ldi	r24, 0x82	; 130
    2750:	91 e0       	ldi	r25, 0x01	; 1
    2752:	00 d0       	rcall	.+0      	; 0x2754 <__vector_default+0x30>
    2754:	0f 92       	push	r0
    2756:	ed b7       	in	r30, 0x3d	; 61
    2758:	fe b7       	in	r31, 0x3e	; 62
    275a:	31 96       	adiw	r30, 0x01	; 1
    275c:	21 e0       	ldi	r18, 0x01	; 1
    275e:	20 83       	st	Z, r18
    2760:	92 83       	std	Z+2, r25	; 0x02
    2762:	81 83       	std	Z+1, r24	; 0x01
    2764:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rprintf1RamRom>
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
}
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	ff 91       	pop	r31
    2774:	ef 91       	pop	r30
    2776:	bf 91       	pop	r27
    2778:	af 91       	pop	r26
    277a:	9f 91       	pop	r25
    277c:	8f 91       	pop	r24
    277e:	7f 91       	pop	r23
    2780:	6f 91       	pop	r22
    2782:	5f 91       	pop	r21
    2784:	4f 91       	pop	r20
    2786:	3f 91       	pop	r19
    2788:	2f 91       	pop	r18
    278a:	0f 90       	pop	r0
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	0f 90       	pop	r0
    2790:	1f 90       	pop	r1
    2792:	18 95       	reti

00002794 <rprintfInit>:

// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	00 d0       	rcall	.+0      	; 0x279a <rprintfInit+0x6>
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	9a 83       	std	Y+2, r25	; 0x02
    27a0:	89 83       	std	Y+1, r24	; 0x01
	rputchar = putchar_func;
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	90 93 0f 05 	sts	0x050F, r25
    27aa:	80 93 0e 05 	sts	0x050E, r24
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	0f 92       	push	r0
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	89 83       	std	Y+1, r24	; 0x01
	// do LF -> CR/LF translation
	if(c == '\n')
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	8a 30       	cpi	r24, 0x0A	; 10
    27c8:	31 f4       	brne	.+12     	; 0x27d6 <rprintfChar+0x1e>
		rputchar('\r');
    27ca:	e0 91 0e 05 	lds	r30, 0x050E
    27ce:	f0 91 0f 05 	lds	r31, 0x050F
    27d2:	8d e0       	ldi	r24, 0x0D	; 13
    27d4:	09 95       	icall
	// send character
	rputchar(c);
    27d6:	e0 91 0e 05 	lds	r30, 0x050E
    27da:	f0 91 0f 05 	lds	r31, 0x050F
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	09 95       	icall
}
    27e2:	0f 90       	pop	r0
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <rprintfStr+0x6>
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	9a 83       	std	Y+2, r25	; 0x02
    27f6:	89 83       	std	Y+1, r24	; 0x01
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	89 f0       	breq	.+34     	; 0x2822 <rprintfStr+0x38>
    2800:	0b c0       	rjmp	.+22     	; 0x2818 <rprintfStr+0x2e>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    2802:	e9 81       	ldd	r30, Y+1	; 0x01
    2804:	fa 81       	ldd	r31, Y+2	; 0x02
    2806:	20 81       	ld	r18, Z
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	9a 83       	std	Y+2, r25	; 0x02
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	82 2f       	mov	r24, r18
    2814:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    2818:	e9 81       	ldd	r30, Y+1	; 0x01
    281a:	fa 81       	ldd	r31, Y+2	; 0x02
    281c:	80 81       	ld	r24, Z
    281e:	88 23       	and	r24, r24
    2820:	81 f7       	brne	.-32     	; 0x2802 <rprintfStr+0x18>
		rprintfChar(*str++);
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	2a 97       	sbiw	r28, 0x0a	; 10
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	7c 83       	std	Y+4, r23	; 0x04
    2846:	6b 83       	std	Y+3, r22	; 0x03
    2848:	5e 83       	std	Y+6, r21	; 0x06
    284a:	4d 83       	std	Y+5, r20	; 0x05
	register int i=0;
    284c:	18 86       	std	Y+8, r1	; 0x08
    284e:	1f 82       	std	Y+7, r1	; 0x07

	// check to make sure we have a good pointer
	if (!str) return;
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	09 f4       	brne	.+2      	; 0x285a <rprintfStrLen+0x2e>
    2858:	49 c0       	rjmp	.+146    	; 0x28ec <rprintfStrLen+0xc0>
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    285a:	2f 81       	ldd	r18, Y+7	; 0x07
    285c:	38 85       	ldd	r19, Y+8	; 0x08
    285e:	19 86       	std	Y+9, r1	; 0x09
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	28 17       	cp	r18, r24
    2866:	39 07       	cpc	r19, r25
    2868:	10 f4       	brcc	.+4      	; 0x286e <rprintfStrLen+0x42>
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	89 87       	std	Y+9, r24	; 0x09
    286e:	8f 81       	ldd	r24, Y+7	; 0x07
    2870:	98 85       	ldd	r25, Y+8	; 0x08
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	98 87       	std	Y+8, r25	; 0x08
    2876:	8f 83       	std	Y+7, r24	; 0x07
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	99 85       	ldd	r25, Y+9	; 0x09
    287c:	89 27       	eor	r24, r25
    287e:	88 23       	and	r24, r24
    2880:	91 f4       	brne	.+36     	; 0x28a6 <rprintfStrLen+0x7a>
    2882:	e9 81       	ldd	r30, Y+1	; 0x01
    2884:	fa 81       	ldd	r31, Y+2	; 0x02
    2886:	80 81       	ld	r24, Z
    2888:	8a 87       	std	Y+10, r24	; 0x0a
    288a:	8a 85       	ldd	r24, Y+10	; 0x0a
    288c:	88 23       	and	r24, r24
    288e:	11 f0       	breq	.+4      	; 0x2894 <rprintfStrLen+0x68>
    2890:	91 e0       	ldi	r25, 0x01	; 1
    2892:	9a 87       	std	Y+10, r25	; 0x0a
    2894:	8a 85       	ldd	r24, Y+10	; 0x0a
    2896:	29 81       	ldd	r18, Y+1	; 0x01
    2898:	3a 81       	ldd	r19, Y+2	; 0x02
    289a:	2f 5f       	subi	r18, 0xFF	; 255
    289c:	3f 4f       	sbci	r19, 0xFF	; 255
    289e:	3a 83       	std	Y+2, r19	; 0x02
    28a0:	29 83       	std	Y+1, r18	; 0x01
    28a2:	88 23       	and	r24, r24
    28a4:	d1 f6       	brne	.-76     	; 0x285a <rprintfStrLen+0x2e>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    28a6:	18 86       	std	Y+8, r1	; 0x08
    28a8:	1f 82       	std	Y+7, r1	; 0x07
    28aa:	19 c0       	rjmp	.+50     	; 0x28de <rprintfStrLen+0xb2>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    28ac:	e9 81       	ldd	r30, Y+1	; 0x01
    28ae:	fa 81       	ldd	r31, Y+2	; 0x02
    28b0:	80 81       	ld	r24, Z
    28b2:	88 23       	and	r24, r24
    28b4:	61 f0       	breq	.+24     	; 0x28ce <rprintfStrLen+0xa2>
			rprintfChar(*str++);
    28b6:	e9 81       	ldd	r30, Y+1	; 0x01
    28b8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ba:	20 81       	ld	r18, Z
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	82 2f       	mov	r24, r18
    28c8:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
    28cc:	03 c0       	rjmp	.+6      	; 0x28d4 <rprintfStrLen+0xa8>
		else
			rprintfChar(' ');
    28ce:	80 e2       	ldi	r24, 0x20	; 32
    28d0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    28d4:	8f 81       	ldd	r24, Y+7	; 0x07
    28d6:	98 85       	ldd	r25, Y+8	; 0x08
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	98 87       	std	Y+8, r25	; 0x08
    28dc:	8f 83       	std	Y+7, r24	; 0x07
    28de:	2f 81       	ldd	r18, Y+7	; 0x07
    28e0:	38 85       	ldd	r19, Y+8	; 0x08
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	9e 81       	ldd	r25, Y+6	; 0x06
    28e6:	28 17       	cp	r18, r24
    28e8:	39 07       	cpc	r19, r25
    28ea:	00 f3       	brcs	.-64     	; 0x28ac <rprintfStrLen+0x80>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    28ec:	2a 96       	adiw	r28, 0x0a	; 10
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	00 d0       	rcall	.+0      	; 0x2904 <rprintfProgStr+0x6>
    2904:	00 d0       	rcall	.+0      	; 0x2906 <rprintfProgStr+0x8>
    2906:	00 d0       	rcall	.+0      	; 0x2908 <rprintfProgStr+0xa>
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	9d 83       	std	Y+5, r25	; 0x05
    290e:	8c 83       	std	Y+4, r24	; 0x04
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    2910:	8c 81       	ldd	r24, Y+4	; 0x04
    2912:	9d 81       	ldd	r25, Y+5	; 0x05
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	b1 f0       	breq	.+44     	; 0x2944 <rprintfProgStr+0x46>
    2918:	03 c0       	rjmp	.+6      	; 0x2920 <rprintfProgStr+0x22>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    291a:	8e 81       	ldd	r24, Y+6	; 0x06
    291c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    2920:	8c 81       	ldd	r24, Y+4	; 0x04
    2922:	9d 81       	ldd	r25, Y+5	; 0x05
    2924:	9b 83       	std	Y+3, r25	; 0x03
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	8c 81       	ldd	r24, Y+4	; 0x04
    292a:	9d 81       	ldd	r25, Y+5	; 0x05
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	9d 83       	std	Y+5, r25	; 0x05
    2930:	8c 83       	std	Y+4, r24	; 0x04
    2932:	ea 81       	ldd	r30, Y+2	; 0x02
    2934:	fb 81       	ldd	r31, Y+3	; 0x03
    2936:	84 91       	lpm	r24, Z+
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	8e 83       	std	Y+6, r24	; 0x06
    293e:	8e 81       	ldd	r24, Y+6	; 0x06
    2940:	88 23       	and	r24, r24
    2942:	59 f7       	brne	.-42     	; 0x291a <rprintfProgStr+0x1c>
		rprintfChar(c);
}
    2944:	26 96       	adiw	r28, 0x06	; 6
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	cd bf       	out	0x3d, r28	; 61
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <rprintfCRLF>:

// *** rprintfCRLF ***
// prints carriage return and line feed
void rprintfCRLF(void)
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    295e:	8a e0       	ldi	r24, 0x0A	; 10
    2960:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
}
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	08 95       	ret

0000296a <rprintfu04>:

// *** rprintfu04 ***
// prints an unsigned 4-bit number in hex (1 digit)
void rprintfu04(unsigned char data)
{
    296a:	df 93       	push	r29
    296c:	cf 93       	push	r28
    296e:	00 d0       	rcall	.+0      	; 0x2970 <rprintfu04+0x6>
    2970:	00 d0       	rcall	.+0      	; 0x2972 <rprintfu04+0x8>
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	8c 83       	std	Y+4, r24	; 0x04
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    2978:	8c 81       	ldd	r24, Y+4	; 0x04
    297a:	88 2f       	mov	r24, r24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	8f 70       	andi	r24, 0x0F	; 15
    2980:	90 70       	andi	r25, 0x00	; 0
    2982:	8d 56       	subi	r24, 0x6D	; 109
    2984:	9e 4f       	sbci	r25, 0xFE	; 254
    2986:	9b 83       	std	Y+3, r25	; 0x03
    2988:	8a 83       	std	Y+2, r24	; 0x02
    298a:	ea 81       	ldd	r30, Y+2	; 0x02
    298c:	fb 81       	ldd	r31, Y+3	; 0x03
    298e:	84 91       	lpm	r24, Z+
    2990:	89 83       	std	Y+1, r24	; 0x01
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	0f 92       	push	r0
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	89 83       	std	Y+1, r24	; 0x01
	// print 8-bit hex value
	rprintfu04(data>>4);
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	82 95       	swap	r24
    29b6:	8f 70       	andi	r24, 0x0F	; 15
    29b8:	0e 94 b5 14 	call	0x296a	; 0x296a <rprintfu04>
	rprintfu04(data);
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	0e 94 b5 14 	call	0x296a	; 0x296a <rprintfu04>
}
    29c2:	0f 90       	pop	r0
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <rprintfu16+0x6>
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
	// print 16-bit hex value
	rprintfu08(data>>8);
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	89 2f       	mov	r24, r25
    29de:	99 27       	eor	r25, r25
    29e0:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rprintfu08>
	rprintfu08(data);
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rprintfu08>
}
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <rprintfu32+0x6>
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <rprintfu32+0x8>
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	69 83       	std	Y+1, r22	; 0x01
    2a02:	7a 83       	std	Y+2, r23	; 0x02
    2a04:	8b 83       	std	Y+3, r24	; 0x03
    2a06:	9c 83       	std	Y+4, r25	; 0x04
	// print 32-bit hex value
	rprintfu16(data>>16);
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a0e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a10:	cd 01       	movw	r24, r26
    2a12:	aa 27       	eor	r26, r26
    2a14:	bb 27       	eor	r27, r27
    2a16:	0e 94 e5 14 	call	0x29ca	; 0x29ca <rprintfu16>
	rprintfu16(data);
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <rprintfu16>
}
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    2a30:	ef 92       	push	r14
    2a32:	ff 92       	push	r15
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	e8 97       	sbiw	r28, 0x38	; 56
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
    2a4c:	8e a7       	std	Y+46, r24	; 0x2e
    2a4e:	6f a7       	std	Y+47, r22	; 0x2f
    2a50:	48 ab       	std	Y+48, r20	; 0x30
    2a52:	29 ab       	std	Y+49, r18	; 0x31
    2a54:	ea aa       	std	Y+50, r14	; 0x32
    2a56:	fb aa       	std	Y+51, r15	; 0x33
    2a58:	0c ab       	std	Y+52, r16	; 0x34
    2a5a:	1d ab       	std	Y+53, r17	; 0x35
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    2a5c:	88 a9       	ldd	r24, Y+48	; 0x30
    2a5e:	88 23       	and	r24, r24
    2a60:	b1 f0       	breq	.+44     	; 0x2a8e <rprintfNum+0x5e>
    2a62:	8a a9       	ldd	r24, Y+50	; 0x32
    2a64:	9b a9       	ldd	r25, Y+51	; 0x33
    2a66:	ac a9       	ldd	r26, Y+52	; 0x34
    2a68:	bd a9       	ldd	r27, Y+53	; 0x35
    2a6a:	bb 23       	and	r27, r27
    2a6c:	84 f4       	brge	.+32     	; 0x2a8e <rprintfNum+0x5e>
	{
		x = -n;
    2a6e:	8a a9       	ldd	r24, Y+50	; 0x32
    2a70:	9b a9       	ldd	r25, Y+51	; 0x33
    2a72:	ac a9       	ldd	r26, Y+52	; 0x34
    2a74:	bd a9       	ldd	r27, Y+53	; 0x35
    2a76:	b0 95       	com	r27
    2a78:	a0 95       	com	r26
    2a7a:	90 95       	com	r25
    2a7c:	81 95       	neg	r24
    2a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a80:	af 4f       	sbci	r26, 0xFF	; 255
    2a82:	bf 4f       	sbci	r27, 0xFF	; 255
    2a84:	88 87       	std	Y+8, r24	; 0x08
    2a86:	99 87       	std	Y+9, r25	; 0x09
    2a88:	aa 87       	std	Y+10, r26	; 0x0a
    2a8a:	bb 87       	std	Y+11, r27	; 0x0b
    2a8c:	08 c0       	rjmp	.+16     	; 0x2a9e <rprintfNum+0x6e>
	}
	else
	{
	 	x = n;
    2a8e:	8a a9       	ldd	r24, Y+50	; 0x32
    2a90:	9b a9       	ldd	r25, Y+51	; 0x33
    2a92:	ac a9       	ldd	r26, Y+52	; 0x34
    2a94:	bd a9       	ldd	r27, Y+53	; 0x35
    2a96:	88 87       	std	Y+8, r24	; 0x08
    2a98:	99 87       	std	Y+9, r25	; 0x09
    2a9a:	aa 87       	std	Y+10, r26	; 0x0a
    2a9c:	bb 87       	std	Y+11, r27	; 0x0b
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    2a9e:	88 a9       	ldd	r24, Y+48	; 0x30
    2aa0:	8e ab       	std	Y+54, r24	; 0x36
    2aa2:	8e a9       	ldd	r24, Y+54	; 0x36
    2aa4:	88 23       	and	r24, r24
    2aa6:	11 f0       	breq	.+4      	; 0x2aac <rprintfNum+0x7c>
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	8e ab       	std	Y+54, r24	; 0x36
    2aac:	9e a9       	ldd	r25, Y+54	; 0x36
    2aae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab0:	89 1b       	sub	r24, r25
    2ab2:	81 50       	subi	r24, 0x01	; 1
    2ab4:	8f 83       	std	Y+7, r24	; 0x07
  	p = buf + sizeof (buf);
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	0e 96       	adiw	r24, 0x0e	; 14
    2aba:	80 96       	adiw	r24, 0x20	; 32
    2abc:	9d 87       	std	Y+13, r25	; 0x0d
    2abe:	8c 87       	std	Y+12, r24	; 0x0c
  	*--p = '\0';
    2ac0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ac2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	9d 87       	std	Y+13, r25	; 0x0d
    2ac8:	8c 87       	std	Y+12, r24	; 0x0c
    2aca:	ec 85       	ldd	r30, Y+12	; 0x0c
    2acc:	fd 85       	ldd	r31, Y+13	; 0x0d
    2ace:	10 82       	st	Z, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    2ad0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ad2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	9d 87       	std	Y+13, r25	; 0x0d
    2ad8:	8c 87       	std	Y+12, r24	; 0x0c
    2ada:	8e a5       	ldd	r24, Y+46	; 0x2e
    2adc:	28 2f       	mov	r18, r24
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	88 85       	ldd	r24, Y+8	; 0x08
    2ae6:	99 85       	ldd	r25, Y+9	; 0x09
    2ae8:	aa 85       	ldd	r26, Y+10	; 0x0a
    2aea:	bb 85       	ldd	r27, Y+11	; 0x0b
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__udivmodsi4>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	8f 70       	andi	r24, 0x0F	; 15
    2afa:	90 70       	andi	r25, 0x00	; 0
    2afc:	8d 56       	subi	r24, 0x6D	; 109
    2afe:	9e 4f       	sbci	r25, 0xFE	; 254
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
    2b04:	ed 81       	ldd	r30, Y+5	; 0x05
    2b06:	fe 81       	ldd	r31, Y+6	; 0x06
    2b08:	84 91       	lpm	r24, Z+
    2b0a:	8c 83       	std	Y+4, r24	; 0x04
    2b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b10:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b12:	80 83       	st	Z, r24
    2b14:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	88 85       	ldd	r24, Y+8	; 0x08
    2b20:	99 85       	ldd	r25, Y+9	; 0x09
    2b22:	aa 85       	ldd	r26, Y+10	; 0x0a
    2b24:	bb 85       	ldd	r27, Y+11	; 0x0b
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__udivmodsi4>
    2b2e:	da 01       	movw	r26, r20
    2b30:	c9 01       	movw	r24, r18
    2b32:	88 87       	std	Y+8, r24	; 0x08
    2b34:	99 87       	std	Y+9, r25	; 0x09
    2b36:	aa 87       	std	Y+10, r26	; 0x0a
    2b38:	bb 87       	std	Y+11, r27	; 0x0b
    2b3a:	47 c0       	rjmp	.+142    	; 0x2bca <rprintfNum+0x19a>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    2b3c:	88 85       	ldd	r24, Y+8	; 0x08
    2b3e:	99 85       	ldd	r25, Y+9	; 0x09
    2b40:	aa 85       	ldd	r26, Y+10	; 0x0a
    2b42:	bb 85       	ldd	r27, Y+11	; 0x0b
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	a1 05       	cpc	r26, r1
    2b48:	b1 05       	cpc	r27, r1
    2b4a:	b1 f1       	breq	.+108    	; 0x2bb8 <rprintfNum+0x188>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    2b4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	9d 87       	std	Y+13, r25	; 0x0d
    2b54:	8c 87       	std	Y+12, r24	; 0x0c
    2b56:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e0       	ldi	r20, 0x00	; 0
    2b5e:	50 e0       	ldi	r21, 0x00	; 0
    2b60:	88 85       	ldd	r24, Y+8	; 0x08
    2b62:	99 85       	ldd	r25, Y+9	; 0x09
    2b64:	aa 85       	ldd	r26, Y+10	; 0x0a
    2b66:	bb 85       	ldd	r27, Y+11	; 0x0b
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__udivmodsi4>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	8f 70       	andi	r24, 0x0F	; 15
    2b76:	90 70       	andi	r25, 0x00	; 0
    2b78:	8d 56       	subi	r24, 0x6D	; 109
    2b7a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b7c:	9b 83       	std	Y+3, r25	; 0x03
    2b7e:	8a 83       	std	Y+2, r24	; 0x02
    2b80:	ea 81       	ldd	r30, Y+2	; 0x02
    2b82:	fb 81       	ldd	r31, Y+3	; 0x03
    2b84:	84 91       	lpm	r24, Z+
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b8c:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b8e:	80 83       	st	Z, r24
    2b90:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b92:	28 2f       	mov	r18, r24
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	88 85       	ldd	r24, Y+8	; 0x08
    2b9c:	99 85       	ldd	r25, Y+9	; 0x09
    2b9e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2ba0:	bb 85       	ldd	r27, Y+11	; 0x0b
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__udivmodsi4>
    2baa:	da 01       	movw	r26, r20
    2bac:	c9 01       	movw	r24, r18
    2bae:	88 87       	std	Y+8, r24	; 0x08
    2bb0:	99 87       	std	Y+9, r25	; 0x09
    2bb2:	aa 87       	std	Y+10, r26	; 0x0a
    2bb4:	bb 87       	std	Y+11, r27	; 0x0b
    2bb6:	09 c0       	rjmp	.+18     	; 0x2bca <rprintfNum+0x19a>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    2bb8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bba:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	9d 87       	std	Y+13, r25	; 0x0d
    2bc0:	8c 87       	std	Y+12, r24	; 0x0c
    2bc2:	ec 85       	ldd	r30, Y+12	; 0x0c
    2bc4:	fd 85       	ldd	r31, Y+13	; 0x0d
    2bc6:	89 a9       	ldd	r24, Y+49	; 0x31
    2bc8:	80 83       	st	Z, r24
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    2bca:	8f 81       	ldd	r24, Y+7	; 0x07
    2bcc:	8f ab       	std	Y+55, r24	; 0x37
    2bce:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd0:	88 23       	and	r24, r24
    2bd2:	11 f0       	breq	.+4      	; 0x2bd8 <rprintfNum+0x1a8>
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	8f ab       	std	Y+55, r24	; 0x37
    2bd8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bda:	9f 81       	ldd	r25, Y+7	; 0x07
    2bdc:	91 50       	subi	r25, 0x01	; 1
    2bde:	9f 83       	std	Y+7, r25	; 0x07
    2be0:	88 23       	and	r24, r24
    2be2:	09 f0       	breq	.+2      	; 0x2be6 <rprintfNum+0x1b6>
    2be4:	ab cf       	rjmp	.-170    	; 0x2b3c <rprintfNum+0x10c>
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    2be6:	88 a9       	ldd	r24, Y+48	; 0x30
    2be8:	88 23       	and	r24, r24
    2bea:	61 f1       	breq	.+88     	; 0x2c44 <rprintfNum+0x214>
	{
		if(n < 0)
    2bec:	8a a9       	ldd	r24, Y+50	; 0x32
    2bee:	9b a9       	ldd	r25, Y+51	; 0x33
    2bf0:	ac a9       	ldd	r26, Y+52	; 0x34
    2bf2:	bd a9       	ldd	r27, Y+53	; 0x35
    2bf4:	bb 23       	and	r27, r27
    2bf6:	54 f4       	brge	.+20     	; 0x2c0c <rprintfNum+0x1dc>
		{
   			*--p = '-';
    2bf8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bfa:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	9d 87       	std	Y+13, r25	; 0x0d
    2c00:	8c 87       	std	Y+12, r24	; 0x0c
    2c02:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c04:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c06:	8d e2       	ldi	r24, 0x2D	; 45
    2c08:	80 83       	st	Z, r24
    2c0a:	1c c0       	rjmp	.+56     	; 0x2c44 <rprintfNum+0x214>
		}
		else if(n > 0)
    2c0c:	8a a9       	ldd	r24, Y+50	; 0x32
    2c0e:	9b a9       	ldd	r25, Y+51	; 0x33
    2c10:	ac a9       	ldd	r26, Y+52	; 0x34
    2c12:	bd a9       	ldd	r27, Y+53	; 0x35
    2c14:	18 16       	cp	r1, r24
    2c16:	19 06       	cpc	r1, r25
    2c18:	1a 06       	cpc	r1, r26
    2c1a:	1b 06       	cpc	r1, r27
    2c1c:	54 f4       	brge	.+20     	; 0x2c32 <rprintfNum+0x202>
		{
	   		*--p = '+';
    2c1e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c20:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9d 87       	std	Y+13, r25	; 0x0d
    2c26:	8c 87       	std	Y+12, r24	; 0x0c
    2c28:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c2a:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c2c:	8b e2       	ldi	r24, 0x2B	; 43
    2c2e:	80 83       	st	Z, r24
    2c30:	09 c0       	rjmp	.+18     	; 0x2c44 <rprintfNum+0x214>
		}
		else
		{
	   		*--p = ' ';
    2c32:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c34:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	9d 87       	std	Y+13, r25	; 0x0d
    2c3a:	8c 87       	std	Y+12, r24	; 0x0c
    2c3c:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c3e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c40:	80 e2       	ldi	r24, 0x20	; 32
    2c42:	80 83       	st	Z, r24
		}
	}

	// print the string right-justified
	count = numDigits;
    2c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c46:	8f 83       	std	Y+7, r24	; 0x07
    2c48:	0b c0       	rjmp	.+22     	; 0x2c60 <rprintfNum+0x230>
	while(count--)
	{
		rprintfChar(*p++);
    2c4a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c4c:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c4e:	20 81       	ld	r18, Z
    2c50:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c52:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	9d 87       	std	Y+13, r25	; 0x0d
    2c58:	8c 87       	std	Y+12, r24	; 0x0c
    2c5a:	82 2f       	mov	r24, r18
    2c5c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    2c60:	8f 81       	ldd	r24, Y+7	; 0x07
    2c62:	88 af       	std	Y+56, r24	; 0x38
    2c64:	88 ad       	ldd	r24, Y+56	; 0x38
    2c66:	88 23       	and	r24, r24
    2c68:	11 f0       	breq	.+4      	; 0x2c6e <rprintfNum+0x23e>
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	88 af       	std	Y+56, r24	; 0x38
    2c6e:	88 ad       	ldd	r24, Y+56	; 0x38
    2c70:	9f 81       	ldd	r25, Y+7	; 0x07
    2c72:	91 50       	subi	r25, 0x01	; 1
    2c74:	9f 83       	std	Y+7, r25	; 0x07
    2c76:	88 23       	and	r24, r24
    2c78:	41 f7       	brne	.-48     	; 0x2c4a <rprintfNum+0x21a>
	{
		rprintfChar(*p++);
	}
}
    2c7a:	e8 96       	adiw	r28, 0x38	; 56
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	ff 90       	pop	r15
    2c90:	ef 90       	pop	r14
    2c92:	08 95       	ret

00002c94 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	65 97       	sbiw	r28, 0x15	; 21
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	89 87       	std	Y+9, r24	; 0x09
    2caa:	4a 87       	std	Y+10, r20	; 0x0a
    2cac:	5b 87       	std	Y+11, r21	; 0x0b
    2cae:	6c 87       	std	Y+12, r22	; 0x0c
    2cb0:	7d 87       	std	Y+13, r23	; 0x0d
	unsigned char firstplace = FALSE;
    2cb2:	18 86       	std	Y+8, r1	; 0x08
	unsigned char negative;
	unsigned char i, digit;
	double place = 1.0;
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	a0 e8       	ldi	r26, 0x80	; 128
    2cba:	bf e3       	ldi	r27, 0x3F	; 63
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	ab 83       	std	Y+3, r26	; 0x03
    2cc2:	bc 83       	std	Y+4, r27	; 0x04
	
	// save sign
	negative = (x<0);
    2cc4:	1f 82       	std	Y+7, r1	; 0x07
    2cc6:	6a 85       	ldd	r22, Y+10	; 0x0a
    2cc8:	7b 85       	ldd	r23, Y+11	; 0x0b
    2cca:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ccc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	50 e0       	ldi	r21, 0x00	; 0
    2cd6:	0e 94 75 26 	call	0x4cea	; 0x4cea <__cmpsf2>
    2cda:	88 23       	and	r24, r24
    2cdc:	14 f4       	brge	.+4      	; 0x2ce2 <rprintfFloat+0x4e>
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	8f 83       	std	Y+7, r24	; 0x07
	// convert to absolute value
	x = (x>0)?(x):(-x);
    2ce2:	6a 85       	ldd	r22, Y+10	; 0x0a
    2ce4:	7b 85       	ldd	r23, Y+11	; 0x0b
    2ce6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ce8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	50 e0       	ldi	r21, 0x00	; 0
    2cf2:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__gesf2>
    2cf6:	18 16       	cp	r1, r24
    2cf8:	4c f4       	brge	.+18     	; 0x2d0c <rprintfFloat+0x78>
    2cfa:	2a 85       	ldd	r18, Y+10	; 0x0a
    2cfc:	3b 85       	ldd	r19, Y+11	; 0x0b
    2cfe:	4c 85       	ldd	r20, Y+12	; 0x0c
    2d00:	5d 85       	ldd	r21, Y+13	; 0x0d
    2d02:	2a 8b       	std	Y+18, r18	; 0x12
    2d04:	3b 8b       	std	Y+19, r19	; 0x13
    2d06:	4c 8b       	std	Y+20, r20	; 0x14
    2d08:	5d 8b       	std	Y+21, r21	; 0x15
    2d0a:	0b c0       	rjmp	.+22     	; 0x2d22 <rprintfFloat+0x8e>
    2d0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d10:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d12:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d14:	9c 01       	movw	r18, r24
    2d16:	ad 01       	movw	r20, r26
    2d18:	50 58       	subi	r21, 0x80	; 128
    2d1a:	2a 8b       	std	Y+18, r18	; 0x12
    2d1c:	3b 8b       	std	Y+19, r19	; 0x13
    2d1e:	4c 8b       	std	Y+20, r20	; 0x14
    2d20:	5d 8b       	std	Y+21, r21	; 0x15
    2d22:	8a 89       	ldd	r24, Y+18	; 0x12
    2d24:	9b 89       	ldd	r25, Y+19	; 0x13
    2d26:	ac 89       	ldd	r26, Y+20	; 0x14
    2d28:	bd 89       	ldd	r27, Y+21	; 0x15
    2d2a:	8a 87       	std	Y+10, r24	; 0x0a
    2d2c:	9b 87       	std	Y+11, r25	; 0x0b
    2d2e:	ac 87       	std	Y+12, r26	; 0x0c
    2d30:	bd 87       	std	Y+13, r27	; 0x0d
	
	// find starting digit place
	for(i=0; i<15; i++)
    2d32:	1e 82       	std	Y+6, r1	; 0x06
    2d34:	29 c0       	rjmp	.+82     	; 0x2d88 <rprintfFloat+0xf4>
	{
		if((x/place) < 10.0)
    2d36:	6a 85       	ldd	r22, Y+10	; 0x0a
    2d38:	7b 85       	ldd	r23, Y+11	; 0x0b
    2d3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d3e:	29 81       	ldd	r18, Y+1	; 0x01
    2d40:	3a 81       	ldd	r19, Y+2	; 0x02
    2d42:	4b 81       	ldd	r20, Y+3	; 0x03
    2d44:	5c 81       	ldd	r21, Y+4	; 0x04
    2d46:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__divsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e2       	ldi	r20, 0x20	; 32
    2d58:	51 e4       	ldi	r21, 0x41	; 65
    2d5a:	0e 94 75 26 	call	0x4cea	; 0x4cea <__cmpsf2>
    2d5e:	88 23       	and	r24, r24
    2d60:	b4 f0       	brlt	.+44     	; 0x2d8e <rprintfFloat+0xfa>
			break;
		else
			place *= 10.0;
    2d62:	69 81       	ldd	r22, Y+1	; 0x01
    2d64:	7a 81       	ldd	r23, Y+2	; 0x02
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e2       	ldi	r20, 0x20	; 32
    2d70:	51 e4       	ldi	r21, 0x41	; 65
    2d72:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	ab 83       	std	Y+3, r26	; 0x03
    2d80:	bc 83       	std	Y+4, r27	; 0x04
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    2d82:	8e 81       	ldd	r24, Y+6	; 0x06
    2d84:	8f 5f       	subi	r24, 0xFF	; 255
    2d86:	8e 83       	std	Y+6, r24	; 0x06
    2d88:	8e 81       	ldd	r24, Y+6	; 0x06
    2d8a:	8f 30       	cpi	r24, 0x0F	; 15
    2d8c:	a0 f2       	brcs	.-88     	; 0x2d36 <rprintfFloat+0xa2>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    2d8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d90:	88 23       	and	r24, r24
    2d92:	21 f0       	breq	.+8      	; 0x2d9c <rprintfFloat+0x108>
		rprintfChar('-');
    2d94:	8d e2       	ldi	r24, 0x2D	; 45
    2d96:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
    2d9a:	03 c0       	rjmp	.+6      	; 0x2da2 <rprintfFloat+0x10e>
	else
		rprintfChar('+');
    2d9c:	8b e2       	ldi	r24, 0x2B	; 43
    2d9e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>

	// print digits
	for(i=0; i<numDigits; i++)
    2da2:	1e 82       	std	Y+6, r1	; 0x06
    2da4:	85 c0       	rjmp	.+266    	; 0x2eb0 <rprintfFloat+0x21c>
	{
		digit = (x/place);
    2da6:	6a 85       	ldd	r22, Y+10	; 0x0a
    2da8:	7b 85       	ldd	r23, Y+11	; 0x0b
    2daa:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dac:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dae:	29 81       	ldd	r18, Y+1	; 0x01
    2db0:	3a 81       	ldd	r19, Y+2	; 0x02
    2db2:	4b 81       	ldd	r20, Y+3	; 0x03
    2db4:	5c 81       	ldd	r21, Y+4	; 0x04
    2db6:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__divsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	cd 01       	movw	r24, r26
    2dc2:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	8d 83       	std	Y+5, r24	; 0x05

		if(digit | firstplace | (place == 1.0))
    2dcc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dce:	88 85       	ldd	r24, Y+8	; 0x08
    2dd0:	89 2b       	or	r24, r25
    2dd2:	a8 2f       	mov	r26, r24
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	b9 8b       	std	Y+17, r27	; 0x11
    2dd8:	a8 8b       	std	Y+16, r26	; 0x10
    2dda:	1f 86       	std	Y+15, r1	; 0x0f
    2ddc:	1e 86       	std	Y+14, r1	; 0x0e
    2dde:	69 81       	ldd	r22, Y+1	; 0x01
    2de0:	7a 81       	ldd	r23, Y+2	; 0x02
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	9c 81       	ldd	r25, Y+4	; 0x04
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e8       	ldi	r20, 0x80	; 128
    2dec:	5f e3       	ldi	r21, 0x3F	; 63
    2dee:	0e 94 75 26 	call	0x4cea	; 0x4cea <__cmpsf2>
    2df2:	88 23       	and	r24, r24
    2df4:	21 f4       	brne	.+8      	; 0x2dfe <rprintfFloat+0x16a>
    2df6:	21 e0       	ldi	r18, 0x01	; 1
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	3f 87       	std	Y+15, r19	; 0x0f
    2dfc:	2e 87       	std	Y+14, r18	; 0x0e
    2dfe:	88 89       	ldd	r24, Y+16	; 0x10
    2e00:	99 89       	ldd	r25, Y+17	; 0x11
    2e02:	4e 85       	ldd	r20, Y+14	; 0x0e
    2e04:	5f 85       	ldd	r21, Y+15	; 0x0f
    2e06:	84 2b       	or	r24, r20
    2e08:	95 2b       	or	r25, r21
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	39 f0       	breq	.+14     	; 0x2e1c <rprintfFloat+0x188>
		{
			firstplace = TRUE;
    2e0e:	8f ef       	ldi	r24, 0xFF	; 255
    2e10:	88 87       	std	Y+8, r24	; 0x08
			rprintfChar(digit+0x30);
    2e12:	8d 81       	ldd	r24, Y+5	; 0x05
    2e14:	80 5d       	subi	r24, 0xD0	; 208
    2e16:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
    2e1a:	03 c0       	rjmp	.+6      	; 0x2e22 <rprintfFloat+0x18e>
		}
		else
			rprintfChar(' ');
    2e1c:	80 e2       	ldi	r24, 0x20	; 32
    2e1e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
		
		if(place == 1.0)
    2e22:	69 81       	ldd	r22, Y+1	; 0x01
    2e24:	7a 81       	ldd	r23, Y+2	; 0x02
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e8       	ldi	r20, 0x80	; 128
    2e30:	5f e3       	ldi	r21, 0x3F	; 63
    2e32:	0e 94 75 26 	call	0x4cea	; 0x4cea <__cmpsf2>
    2e36:	88 23       	and	r24, r24
    2e38:	19 f4       	brne	.+6      	; 0x2e40 <rprintfFloat+0x1ac>
		{
			rprintfChar('.');
    2e3a:	8e e2       	ldi	r24, 0x2E	; 46
    2e3c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
		}
		
		x -= (digit*place);
    2e40:	8d 81       	ldd	r24, Y+5	; 0x05
    2e42:	88 2f       	mov	r24, r24
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	aa 27       	eor	r26, r26
    2e48:	97 fd       	sbrc	r25, 7
    2e4a:	a0 95       	com	r26
    2e4c:	ba 2f       	mov	r27, r26
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	29 81       	ldd	r18, Y+1	; 0x01
    2e60:	3a 81       	ldd	r19, Y+2	; 0x02
    2e62:	4b 81       	ldd	r20, Y+3	; 0x03
    2e64:	5c 81       	ldd	r21, Y+4	; 0x04
    2e66:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	9c 01       	movw	r18, r24
    2e70:	ad 01       	movw	r20, r26
    2e72:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e74:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e76:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e78:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e7a:	0e 94 10 26 	call	0x4c20	; 0x4c20 <__subsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8a 87       	std	Y+10, r24	; 0x0a
    2e84:	9b 87       	std	Y+11, r25	; 0x0b
    2e86:	ac 87       	std	Y+12, r26	; 0x0c
    2e88:	bd 87       	std	Y+13, r27	; 0x0d
		place /= 10.0;
    2e8a:	69 81       	ldd	r22, Y+1	; 0x01
    2e8c:	7a 81       	ldd	r23, Y+2	; 0x02
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	9c 81       	ldd	r25, Y+4	; 0x04
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e2       	ldi	r20, 0x20	; 32
    2e98:	51 e4       	ldi	r21, 0x41	; 65
    2e9a:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__divsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	ab 83       	std	Y+3, r26	; 0x03
    2ea8:	bc 83       	std	Y+4, r27	; 0x04
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    2eaa:	8e 81       	ldd	r24, Y+6	; 0x06
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	8e 83       	std	Y+6, r24	; 0x06
    2eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb2:	89 85       	ldd	r24, Y+9	; 0x09
    2eb4:	98 17       	cp	r25, r24
    2eb6:	08 f4       	brcc	.+2      	; 0x2eba <rprintfFloat+0x226>
    2eb8:	76 cf       	rjmp	.-276    	; 0x2da6 <rprintfFloat+0x112>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    2eba:	65 96       	adiw	r28, 0x15	; 21
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	63 97       	sbiw	r28, 0x13	; 19
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	4b 96       	adiw	r24, 0x1b	; 27
    2ee4:	9f 87       	std	Y+15, r25	; 0x0f
    2ee6:	8e 87       	std	Y+14, r24	; 0x0e
    2ee8:	11 c0       	rjmp	.+34     	; 0x2f0c <rprintf1RamRom+0x40>
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    2eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eec:	88 23       	and	r24, r24
    2eee:	59 f4       	brne	.+22     	; 0x2f06 <rprintf1RamRom+0x3a>
			{
				va_end(ap);
				return(0);
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    2ef4:	63 96       	adiw	r28, 0x13	; 19
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	cf 91       	pop	r28
    2f02:	df 91       	pop	r29
    2f04:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    2f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f08:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    2f0c:	88 8d       	ldd	r24, Y+24	; 0x18
    2f0e:	88 23       	and	r24, r24
    2f10:	81 f0       	breq	.+32     	; 0x2f32 <rprintf1RamRom+0x66>
    2f12:	89 8d       	ldd	r24, Y+25	; 0x19
    2f14:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
    2f1a:	89 8d       	ldd	r24, Y+25	; 0x19
    2f1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f1e:	01 96       	adiw	r24, 0x01	; 1
    2f20:	9a 8f       	std	Y+26, r25	; 0x1a
    2f22:	89 8f       	std	Y+25, r24	; 0x19
    2f24:	ed 81       	ldd	r30, Y+5	; 0x05
    2f26:	fe 81       	ldd	r31, Y+6	; 0x06
    2f28:	84 91       	lpm	r24, Z+
    2f2a:	8c 83       	std	Y+4, r24	; 0x04
    2f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2e:	8b 8b       	std	Y+19, r24	; 0x13
    2f30:	09 c0       	rjmp	.+18     	; 0x2f44 <rprintf1RamRom+0x78>
    2f32:	e9 8d       	ldd	r30, Y+25	; 0x19
    2f34:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2f36:	20 81       	ld	r18, Z
    2f38:	2b 8b       	std	Y+19, r18	; 0x13
    2f3a:	89 8d       	ldd	r24, Y+25	; 0x19
    2f3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f3e:	01 96       	adiw	r24, 0x01	; 1
    2f40:	9a 8f       	std	Y+26, r25	; 0x1a
    2f42:	89 8f       	std	Y+25, r24	; 0x19
    2f44:	3b 89       	ldd	r19, Y+19	; 0x13
    2f46:	3d 87       	std	Y+13, r19	; 0x0d
    2f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4a:	85 32       	cpi	r24, 0x25	; 37
    2f4c:	71 f6       	brne	.-100    	; 0x2eea <rprintf1RamRom+0x1e>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    2f4e:	88 8d       	ldd	r24, Y+24	; 0x18
    2f50:	88 23       	and	r24, r24
    2f52:	81 f0       	breq	.+32     	; 0x2f74 <rprintf1RamRom+0xa8>
    2f54:	89 8d       	ldd	r24, Y+25	; 0x19
    2f56:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f58:	9b 83       	std	Y+3, r25	; 0x03
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
    2f5c:	89 8d       	ldd	r24, Y+25	; 0x19
    2f5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f60:	01 96       	adiw	r24, 0x01	; 1
    2f62:	9a 8f       	std	Y+26, r25	; 0x1a
    2f64:	89 8f       	std	Y+25, r24	; 0x19
    2f66:	ea 81       	ldd	r30, Y+2	; 0x02
    2f68:	fb 81       	ldd	r31, Y+3	; 0x03
    2f6a:	84 91       	lpm	r24, Z+
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	8a 8b       	std	Y+18, r24	; 0x12
    2f72:	09 c0       	rjmp	.+18     	; 0x2f86 <rprintf1RamRom+0xba>
    2f74:	e9 8d       	ldd	r30, Y+25	; 0x19
    2f76:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2f78:	80 81       	ld	r24, Z
    2f7a:	8a 8b       	std	Y+18, r24	; 0x12
    2f7c:	89 8d       	ldd	r24, Y+25	; 0x19
    2f7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f80:	01 96       	adiw	r24, 0x01	; 1
    2f82:	9a 8f       	std	Y+26, r25	; 0x1a
    2f84:	89 8f       	std	Y+25, r24	; 0x19
    2f86:	9a 89       	ldd	r25, Y+18	; 0x12
    2f88:	9d 87       	std	Y+13, r25	; 0x0d
    2f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	39 8b       	std	Y+17, r19	; 0x11
    2f92:	28 8b       	std	Y+16, r18	; 0x10
    2f94:	88 89       	ldd	r24, Y+16	; 0x10
    2f96:	99 89       	ldd	r25, Y+17	; 0x11
    2f98:	84 36       	cpi	r24, 0x64	; 100
    2f9a:	91 05       	cpc	r25, r1
    2f9c:	c1 f0       	breq	.+48     	; 0x2fce <rprintf1RamRom+0x102>
    2f9e:	28 89       	ldd	r18, Y+16	; 0x10
    2fa0:	39 89       	ldd	r19, Y+17	; 0x11
    2fa2:	28 37       	cpi	r18, 0x78	; 120
    2fa4:	31 05       	cpc	r19, r1
    2fa6:	e1 f0       	breq	.+56     	; 0x2fe0 <rprintf1RamRom+0x114>
    2fa8:	88 89       	ldd	r24, Y+16	; 0x10
    2faa:	99 89       	ldd	r25, Y+17	; 0x11
    2fac:	83 36       	cpi	r24, 0x63	; 99
    2fae:	91 05       	cpc	r25, r1
    2fb0:	51 f4       	brne	.+20     	; 0x2fc6 <rprintf1RamRom+0xfa>
		{
			case 'c': format_flag = va_arg(ap,int);
    2fb2:	2e 85       	ldd	r18, Y+14	; 0x0e
    2fb4:	3f 85       	ldd	r19, Y+15	; 0x0f
    2fb6:	c9 01       	movw	r24, r18
    2fb8:	02 96       	adiw	r24, 0x02	; 2
    2fba:	9f 87       	std	Y+15, r25	; 0x0f
    2fbc:	8e 87       	std	Y+14, r24	; 0x0e
    2fbe:	f9 01       	movw	r30, r18
    2fc0:	80 81       	ld	r24, Z
    2fc2:	91 81       	ldd	r25, Z+1	; 0x01
    2fc4:	8d 87       	std	Y+13, r24	; 0x0d
			default:  rprintfChar(format_flag); continue;
    2fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc8:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
    2fcc:	9f cf       	rjmp	.-194    	; 0x2f0c <rprintf1RamRom+0x40>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
    2fce:	8a e0       	ldi	r24, 0x0A	; 10
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	98 87       	std	Y+8, r25	; 0x08
    2fd4:	8f 83       	std	Y+7, r24	; 0x07
    2fd6:	80 e1       	ldi	r24, 0x10	; 16
    2fd8:	97 e2       	ldi	r25, 0x27	; 39
    2fda:	9a 87       	std	Y+10, r25	; 0x0a
    2fdc:	89 87       	std	Y+9, r24	; 0x09
    2fde:	08 c0       	rjmp	.+16     	; 0x2ff0 <rprintf1RamRom+0x124>
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
    2fe0:	80 e1       	ldi	r24, 0x10	; 16
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	98 87       	std	Y+8, r25	; 0x08
    2fe6:	8f 83       	std	Y+7, r24	; 0x07
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e1       	ldi	r25, 0x10	; 16
    2fec:	9a 87       	std	Y+10, r25	; 0x0a
    2fee:	89 87       	std	Y+9, r24	; 0x09

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    2ff0:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ff2:	3f 85       	ldd	r19, Y+15	; 0x0f
    2ff4:	c9 01       	movw	r24, r18
    2ff6:	02 96       	adiw	r24, 0x02	; 2
    2ff8:	9f 87       	std	Y+15, r25	; 0x0f
    2ffa:	8e 87       	std	Y+14, r24	; 0x0e
    2ffc:	f9 01       	movw	r30, r18
    2ffe:	80 81       	ld	r24, Z
    3000:	91 81       	ldd	r25, Z+1	; 0x01
    3002:	9c 87       	std	Y+12, r25	; 0x0c
    3004:	8b 87       	std	Y+11, r24	; 0x0b
			if (format_flag == 'd')
    3006:	8d 85       	ldd	r24, Y+13	; 0x0d
    3008:	84 36       	cpi	r24, 0x64	; 100
    300a:	29 f5       	brne	.+74     	; 0x3056 <rprintf1RamRom+0x18a>
			{
				if (((int)u_val) < 0)
    300c:	8b 85       	ldd	r24, Y+11	; 0x0b
    300e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3010:	99 23       	and	r25, r25
    3012:	ac f4       	brge	.+42     	; 0x303e <rprintf1RamRom+0x172>
				{
					u_val = - u_val;
    3014:	8b 85       	ldd	r24, Y+11	; 0x0b
    3016:	9c 85       	ldd	r25, Y+12	; 0x0c
    3018:	90 95       	com	r25
    301a:	81 95       	neg	r24
    301c:	9f 4f       	sbci	r25, 0xFF	; 255
    301e:	9c 87       	std	Y+12, r25	; 0x0c
    3020:	8b 87       	std	Y+11, r24	; 0x0b
					rprintfChar('-');
    3022:	8d e2       	ldi	r24, 0x2D	; 45
    3024:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <rprintfChar>
    3028:	0a c0       	rjmp	.+20     	; 0x303e <rprintf1RamRom+0x172>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    302a:	89 85       	ldd	r24, Y+9	; 0x09
    302c:	9a 85       	ldd	r25, Y+10	; 0x0a
    302e:	2a e0       	ldi	r18, 0x0A	; 10
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	b9 01       	movw	r22, r18
    3034:	0e 94 b1 29 	call	0x5362	; 0x5362 <__udivmodhi4>
    3038:	cb 01       	movw	r24, r22
    303a:	9a 87       	std	Y+10, r25	; 0x0a
    303c:	89 87       	std	Y+9, r24	; 0x09
    303e:	89 85       	ldd	r24, Y+9	; 0x09
    3040:	9a 85       	ldd	r25, Y+10	; 0x0a
    3042:	82 30       	cpi	r24, 0x02	; 2
    3044:	91 05       	cpc	r25, r1
    3046:	38 f0       	brcs	.+14     	; 0x3056 <rprintf1RamRom+0x18a>
    3048:	29 85       	ldd	r18, Y+9	; 0x09
    304a:	3a 85       	ldd	r19, Y+10	; 0x0a
    304c:	8b 85       	ldd	r24, Y+11	; 0x0b
    304e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3050:	82 17       	cp	r24, r18
    3052:	93 07       	cpc	r25, r19
    3054:	50 f3       	brcs	.-44     	; 0x302a <rprintf1RamRom+0x15e>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    3056:	8b 85       	ldd	r24, Y+11	; 0x0b
    3058:	9c 85       	ldd	r25, Y+12	; 0x0c
    305a:	29 85       	ldd	r18, Y+9	; 0x09
    305c:	3a 85       	ldd	r19, Y+10	; 0x0a
    305e:	b9 01       	movw	r22, r18
    3060:	0e 94 b1 29 	call	0x5362	; 0x5362 <__udivmodhi4>
    3064:	cb 01       	movw	r24, r22
    3066:	0e 94 b5 14 	call	0x296a	; 0x296a <rprintfu04>
				u_val %= div_val;
    306a:	8b 85       	ldd	r24, Y+11	; 0x0b
    306c:	9c 85       	ldd	r25, Y+12	; 0x0c
    306e:	29 85       	ldd	r18, Y+9	; 0x09
    3070:	3a 85       	ldd	r19, Y+10	; 0x0a
    3072:	b9 01       	movw	r22, r18
    3074:	0e 94 b1 29 	call	0x5362	; 0x5362 <__udivmodhi4>
    3078:	9c 87       	std	Y+12, r25	; 0x0c
    307a:	8b 87       	std	Y+11, r24	; 0x0b
				div_val /= base;
    307c:	89 85       	ldd	r24, Y+9	; 0x09
    307e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3080:	2f 81       	ldd	r18, Y+7	; 0x07
    3082:	38 85       	ldd	r19, Y+8	; 0x08
    3084:	b9 01       	movw	r22, r18
    3086:	0e 94 b1 29 	call	0x5362	; 0x5362 <__udivmodhi4>
    308a:	cb 01       	movw	r24, r22
    308c:	9a 87       	std	Y+10, r25	; 0x0a
    308e:	89 87       	std	Y+9, r24	; 0x09
			} while (div_val);
    3090:	89 85       	ldd	r24, Y+9	; 0x09
    3092:	9a 85       	ldd	r25, Y+10	; 0x0a
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	f9 f6       	brne	.-66     	; 0x3056 <rprintf1RamRom+0x18a>
    3098:	39 cf       	rjmp	.-398    	; 0x2f0c <rprintf1RamRom+0x40>

0000309a <PWM_Init_timer1_LED>:

//tested and working: H3, H6

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	0f 92       	push	r0
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	89 83       	std	Y+1, r24	; 0x01
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	89 30       	cpi	r24, 0x09	; 9
    30aa:	79 f4       	brne	.+30     	; 0x30ca <PWM_Init_timer1_LED+0x30>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
    30ac:	a0 e8       	ldi	r26, 0x80	; 128
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	e0 e8       	ldi	r30, 0x80	; 128
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	82 60       	ori	r24, 0x02	; 2
    30b8:	8c 93       	st	X, r24
		cbi(TCCR1A,PWM10);
    30ba:	a0 e8       	ldi	r26, 0x80	; 128
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e0 e8       	ldi	r30, 0x80	; 128
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	8e 7f       	andi	r24, 0xFE	; 254
    30c6:	8c 93       	st	X, r24
    30c8:	20 c0       	rjmp	.+64     	; 0x310a <PWM_Init_timer1_LED+0x70>
	}
	else if( bitRes == 10 )
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	8a 30       	cpi	r24, 0x0A	; 10
    30ce:	79 f4       	brne	.+30     	; 0x30ee <PWM_Init_timer1_LED+0x54>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
    30d0:	a0 e8       	ldi	r26, 0x80	; 128
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	e0 e8       	ldi	r30, 0x80	; 128
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	82 60       	ori	r24, 0x02	; 2
    30dc:	8c 93       	st	X, r24
		sbi(TCCR1A,PWM10);
    30de:	a0 e8       	ldi	r26, 0x80	; 128
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e0 e8       	ldi	r30, 0x80	; 128
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	81 60       	ori	r24, 0x01	; 1
    30ea:	8c 93       	st	X, r24
    30ec:	0e c0       	rjmp	.+28     	; 0x310a <PWM_Init_timer1_LED+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
    30ee:	a0 e8       	ldi	r26, 0x80	; 128
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	e0 e8       	ldi	r30, 0x80	; 128
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	8d 7f       	andi	r24, 0xFD	; 253
    30fa:	8c 93       	st	X, r24
		sbi(TCCR1A,PWM10);
    30fc:	a0 e8       	ldi	r26, 0x80	; 128
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e0 e8       	ldi	r30, 0x80	; 128
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	81 60       	ori	r24, 0x01	; 1
    3108:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR1B = 0;
    310a:	ea e8       	ldi	r30, 0x8A	; 138
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	11 82       	std	Z+1, r1	; 0x01
    3110:	10 82       	st	Z, r1
}
    3112:	0f 90       	pop	r0
    3114:	cf 91       	pop	r28
    3116:	df 91       	pop	r29
    3118:	08 95       	ret

0000311a <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
    311a:	df 93       	push	r29
    311c:	cf 93       	push	r28
    311e:	0f 92       	push	r0
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	89 83       	std	Y+1, r24	; 0x01
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	89 30       	cpi	r24, 0x09	; 9
    312a:	79 f4       	brne	.+30     	; 0x314a <PWM_Init_timer2_H6+0x30>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
    312c:	a0 eb       	ldi	r26, 0xB0	; 176
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e0 eb       	ldi	r30, 0xB0	; 176
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	82 60       	ori	r24, 0x02	; 2
    3138:	8c 93       	st	X, r24
		cbi(TCCR2A,PWM10);
    313a:	a0 eb       	ldi	r26, 0xB0	; 176
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e0 eb       	ldi	r30, 0xB0	; 176
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	8e 7f       	andi	r24, 0xFE	; 254
    3146:	8c 93       	st	X, r24
    3148:	20 c0       	rjmp	.+64     	; 0x318a <PWM_Init_timer2_H6+0x70>
	}
	else if( bitRes == 10 )
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	8a 30       	cpi	r24, 0x0A	; 10
    314e:	79 f4       	brne	.+30     	; 0x316e <PWM_Init_timer2_H6+0x54>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
    3150:	a0 eb       	ldi	r26, 0xB0	; 176
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e0 eb       	ldi	r30, 0xB0	; 176
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	82 60       	ori	r24, 0x02	; 2
    315c:	8c 93       	st	X, r24
		sbi(TCCR2A,PWM10);
    315e:	a0 eb       	ldi	r26, 0xB0	; 176
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	e0 eb       	ldi	r30, 0xB0	; 176
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	81 60       	ori	r24, 0x01	; 1
    316a:	8c 93       	st	X, r24
    316c:	0e c0       	rjmp	.+28     	; 0x318a <PWM_Init_timer2_H6+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
    316e:	a0 eb       	ldi	r26, 0xB0	; 176
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e0 eb       	ldi	r30, 0xB0	; 176
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	8d 7f       	andi	r24, 0xFD	; 253
    317a:	8c 93       	st	X, r24
		sbi(TCCR2A,PWM10);
    317c:	a0 eb       	ldi	r26, 0xB0	; 176
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e0 eb       	ldi	r30, 0xB0	; 176
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	81 60       	ori	r24, 0x01	; 1
    3188:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR2B = 0;
    318a:	e4 eb       	ldi	r30, 0xB4	; 180
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	10 82       	st	Z, r1
}
    3190:	0f 90       	pop	r0
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	0f 92       	push	r0
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	89 83       	std	Y+1, r24	; 0x01
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	89 30       	cpi	r24, 0x09	; 9
    31a8:	79 f4       	brne	.+30     	; 0x31c8 <PWM_Init_timer3_E3+0x30>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
    31aa:	a0 e9       	ldi	r26, 0x90	; 144
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e0 e9       	ldi	r30, 0x90	; 144
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	82 60       	ori	r24, 0x02	; 2
    31b6:	8c 93       	st	X, r24
		cbi(TCCR3A,PWM10);
    31b8:	a0 e9       	ldi	r26, 0x90	; 144
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	e0 e9       	ldi	r30, 0x90	; 144
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	8e 7f       	andi	r24, 0xFE	; 254
    31c4:	8c 93       	st	X, r24
    31c6:	20 c0       	rjmp	.+64     	; 0x3208 <PWM_Init_timer3_E3+0x70>
	}
	else if( bitRes == 10 )
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	8a 30       	cpi	r24, 0x0A	; 10
    31cc:	79 f4       	brne	.+30     	; 0x31ec <PWM_Init_timer3_E3+0x54>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
    31ce:	a0 e9       	ldi	r26, 0x90	; 144
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e0 e9       	ldi	r30, 0x90	; 144
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	82 60       	ori	r24, 0x02	; 2
    31da:	8c 93       	st	X, r24
		sbi(TCCR3A,PWM10);
    31dc:	a0 e9       	ldi	r26, 0x90	; 144
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	e0 e9       	ldi	r30, 0x90	; 144
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	81 60       	ori	r24, 0x01	; 1
    31e8:	8c 93       	st	X, r24
    31ea:	0e c0       	rjmp	.+28     	; 0x3208 <PWM_Init_timer3_E3+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
    31ec:	a0 e9       	ldi	r26, 0x90	; 144
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	e0 e9       	ldi	r30, 0x90	; 144
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 81       	ld	r24, Z
    31f6:	8d 7f       	andi	r24, 0xFD	; 253
    31f8:	8c 93       	st	X, r24
		sbi(TCCR3A,PWM10);
    31fa:	a0 e9       	ldi	r26, 0x90	; 144
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e0 e9       	ldi	r30, 0x90	; 144
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	81 60       	ori	r24, 0x01	; 1
    3206:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR3A = 0;
    3208:	e8 e9       	ldi	r30, 0x98	; 152
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	11 82       	std	Z+1, r1	; 0x01
    320e:	10 82       	st	Z, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    3210:	0f 90       	pop	r0
    3212:	cf 91       	pop	r28
    3214:	df 91       	pop	r29
    3216:	08 95       	ret

00003218 <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
    3218:	df 93       	push	r29
    321a:	cf 93       	push	r28
    321c:	0f 92       	push	r0
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
    3222:	89 83       	std	Y+1, r24	; 0x01
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	89 30       	cpi	r24, 0x09	; 9
    3228:	79 f4       	brne	.+30     	; 0x3248 <PWM_Init_timer3_E4+0x30>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
    322a:	a1 e9       	ldi	r26, 0x91	; 145
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	e1 e9       	ldi	r30, 0x91	; 145
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	82 60       	ori	r24, 0x02	; 2
    3236:	8c 93       	st	X, r24
		cbi(TCCR3B,PWM10);
    3238:	a1 e9       	ldi	r26, 0x91	; 145
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e1 e9       	ldi	r30, 0x91	; 145
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	8e 7f       	andi	r24, 0xFE	; 254
    3244:	8c 93       	st	X, r24
    3246:	20 c0       	rjmp	.+64     	; 0x3288 <PWM_Init_timer3_E4+0x70>
	}
	else if( bitRes == 10 )
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	8a 30       	cpi	r24, 0x0A	; 10
    324c:	79 f4       	brne	.+30     	; 0x326c <PWM_Init_timer3_E4+0x54>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
    324e:	a1 e9       	ldi	r26, 0x91	; 145
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e1 e9       	ldi	r30, 0x91	; 145
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	82 60       	ori	r24, 0x02	; 2
    325a:	8c 93       	st	X, r24
		sbi(TCCR3B,PWM10);
    325c:	a1 e9       	ldi	r26, 0x91	; 145
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	e1 e9       	ldi	r30, 0x91	; 145
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	81 60       	ori	r24, 0x01	; 1
    3268:	8c 93       	st	X, r24
    326a:	0e c0       	rjmp	.+28     	; 0x3288 <PWM_Init_timer3_E4+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
    326c:	a1 e9       	ldi	r26, 0x91	; 145
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e1 e9       	ldi	r30, 0x91	; 145
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	8d 7f       	andi	r24, 0xFD	; 253
    3278:	8c 93       	st	X, r24
		sbi(TCCR3B,PWM10);
    327a:	a1 e9       	ldi	r26, 0x91	; 145
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	e1 e9       	ldi	r30, 0x91	; 145
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	81 60       	ori	r24, 0x01	; 1
    3286:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR3B = 0;
    3288:	ea e9       	ldi	r30, 0x9A	; 154
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	11 82       	std	Z+1, r1	; 0x01
    328e:	10 82       	st	Z, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    3290:	0f 90       	pop	r0
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	08 95       	ret

00003298 <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	0f 92       	push	r0
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	89 83       	std	Y+1, r24	; 0x01
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	89 30       	cpi	r24, 0x09	; 9
    32a8:	79 f4       	brne	.+30     	; 0x32c8 <PWM_Init_timer3_E5+0x30>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
    32aa:	a2 e9       	ldi	r26, 0x92	; 146
    32ac:	b0 e0       	ldi	r27, 0x00	; 0
    32ae:	e2 e9       	ldi	r30, 0x92	; 146
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	82 60       	ori	r24, 0x02	; 2
    32b6:	8c 93       	st	X, r24
		cbi(TCCR3C,PWM10);
    32b8:	a2 e9       	ldi	r26, 0x92	; 146
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	e2 e9       	ldi	r30, 0x92	; 146
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	8e 7f       	andi	r24, 0xFE	; 254
    32c4:	8c 93       	st	X, r24
    32c6:	20 c0       	rjmp	.+64     	; 0x3308 <PWM_Init_timer3_E5+0x70>
	}
	else if( bitRes == 10 )
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	8a 30       	cpi	r24, 0x0A	; 10
    32cc:	79 f4       	brne	.+30     	; 0x32ec <PWM_Init_timer3_E5+0x54>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
    32ce:	a2 e9       	ldi	r26, 0x92	; 146
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	e2 e9       	ldi	r30, 0x92	; 146
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	82 60       	ori	r24, 0x02	; 2
    32da:	8c 93       	st	X, r24
		sbi(TCCR3C,PWM10);
    32dc:	a2 e9       	ldi	r26, 0x92	; 146
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	e2 e9       	ldi	r30, 0x92	; 146
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
    32e6:	81 60       	ori	r24, 0x01	; 1
    32e8:	8c 93       	st	X, r24
    32ea:	0e c0       	rjmp	.+28     	; 0x3308 <PWM_Init_timer3_E5+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
    32ec:	a2 e9       	ldi	r26, 0x92	; 146
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	e2 e9       	ldi	r30, 0x92	; 146
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	8d 7f       	andi	r24, 0xFD	; 253
    32f8:	8c 93       	st	X, r24
		sbi(TCCR3C,PWM10);
    32fa:	a2 e9       	ldi	r26, 0x92	; 146
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	e2 e9       	ldi	r30, 0x92	; 146
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	81 60       	ori	r24, 0x01	; 1
    3306:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR3C = 0;
    3308:	ec e9       	ldi	r30, 0x9C	; 156
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	11 82       	std	Z+1, r1	; 0x01
    330e:	10 82       	st	Z, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	0f 92       	push	r0
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	89 83       	std	Y+1, r24	; 0x01
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	89 30       	cpi	r24, 0x09	; 9
    3328:	79 f4       	brne	.+30     	; 0x3348 <PWM_Init_timer4_H3+0x30>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
    332a:	a0 ea       	ldi	r26, 0xA0	; 160
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e0 ea       	ldi	r30, 0xA0	; 160
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	82 60       	ori	r24, 0x02	; 2
    3336:	8c 93       	st	X, r24
		cbi(TCCR4A,PWM10);
    3338:	a0 ea       	ldi	r26, 0xA0	; 160
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e0 ea       	ldi	r30, 0xA0	; 160
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	8e 7f       	andi	r24, 0xFE	; 254
    3344:	8c 93       	st	X, r24
    3346:	20 c0       	rjmp	.+64     	; 0x3388 <PWM_Init_timer4_H3+0x70>
	}
	else if( bitRes == 10 )
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	8a 30       	cpi	r24, 0x0A	; 10
    334c:	79 f4       	brne	.+30     	; 0x336c <PWM_Init_timer4_H3+0x54>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
    334e:	a0 ea       	ldi	r26, 0xA0	; 160
    3350:	b0 e0       	ldi	r27, 0x00	; 0
    3352:	e0 ea       	ldi	r30, 0xA0	; 160
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	80 81       	ld	r24, Z
    3358:	82 60       	ori	r24, 0x02	; 2
    335a:	8c 93       	st	X, r24
		sbi(TCCR4A,PWM10);
    335c:	a0 ea       	ldi	r26, 0xA0	; 160
    335e:	b0 e0       	ldi	r27, 0x00	; 0
    3360:	e0 ea       	ldi	r30, 0xA0	; 160
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	80 81       	ld	r24, Z
    3366:	81 60       	ori	r24, 0x01	; 1
    3368:	8c 93       	st	X, r24
    336a:	0e c0       	rjmp	.+28     	; 0x3388 <PWM_Init_timer4_H3+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
    336c:	a0 ea       	ldi	r26, 0xA0	; 160
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	e0 ea       	ldi	r30, 0xA0	; 160
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	8d 7f       	andi	r24, 0xFD	; 253
    3378:	8c 93       	st	X, r24
		sbi(TCCR4A,PWM10);
    337a:	a0 ea       	ldi	r26, 0xA0	; 160
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	e0 ea       	ldi	r30, 0xA0	; 160
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	81 60       	ori	r24, 0x01	; 1
    3386:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR4A = 0;
    3388:	e8 ea       	ldi	r30, 0xA8	; 168
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	11 82       	std	Z+1, r1	; 0x01
    338e:	10 82       	st	Z, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    3390:	0f 90       	pop	r0
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	08 95       	ret

00003398 <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
    3398:	df 93       	push	r29
    339a:	cf 93       	push	r28
    339c:	0f 92       	push	r0
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	89 83       	std	Y+1, r24	; 0x01
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	89 30       	cpi	r24, 0x09	; 9
    33a8:	79 f4       	brne	.+30     	; 0x33c8 <PWM_Init_timer4_H4+0x30>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
    33aa:	a1 ea       	ldi	r26, 0xA1	; 161
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	e1 ea       	ldi	r30, 0xA1	; 161
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	82 60       	ori	r24, 0x02	; 2
    33b6:	8c 93       	st	X, r24
		cbi(TCCR4B,PWM10);
    33b8:	a1 ea       	ldi	r26, 0xA1	; 161
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	e1 ea       	ldi	r30, 0xA1	; 161
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	8e 7f       	andi	r24, 0xFE	; 254
    33c4:	8c 93       	st	X, r24
    33c6:	20 c0       	rjmp	.+64     	; 0x3408 <PWM_Init_timer4_H4+0x70>
	}
	else if( bitRes == 10 )
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	8a 30       	cpi	r24, 0x0A	; 10
    33cc:	79 f4       	brne	.+30     	; 0x33ec <PWM_Init_timer4_H4+0x54>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
    33ce:	a1 ea       	ldi	r26, 0xA1	; 161
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	e1 ea       	ldi	r30, 0xA1	; 161
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	80 81       	ld	r24, Z
    33d8:	82 60       	ori	r24, 0x02	; 2
    33da:	8c 93       	st	X, r24
		sbi(TCCR4B,PWM10);
    33dc:	a1 ea       	ldi	r26, 0xA1	; 161
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	e1 ea       	ldi	r30, 0xA1	; 161
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	81 60       	ori	r24, 0x01	; 1
    33e8:	8c 93       	st	X, r24
    33ea:	0e c0       	rjmp	.+28     	; 0x3408 <PWM_Init_timer4_H4+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
    33ec:	a1 ea       	ldi	r26, 0xA1	; 161
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	e1 ea       	ldi	r30, 0xA1	; 161
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	8d 7f       	andi	r24, 0xFD	; 253
    33f8:	8c 93       	st	X, r24
		sbi(TCCR4B,PWM10);
    33fa:	a1 ea       	ldi	r26, 0xA1	; 161
    33fc:	b0 e0       	ldi	r27, 0x00	; 0
    33fe:	e1 ea       	ldi	r30, 0xA1	; 161
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	81 60       	ori	r24, 0x01	; 1
    3406:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR4B = 0;
    3408:	ea ea       	ldi	r30, 0xAA	; 170
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	11 82       	std	Z+1, r1	; 0x01
    340e:	10 82       	st	Z, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    3410:	0f 90       	pop	r0
    3412:	cf 91       	pop	r28
    3414:	df 91       	pop	r29
    3416:	08 95       	ret

00003418 <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
    3418:	df 93       	push	r29
    341a:	cf 93       	push	r28
    341c:	0f 92       	push	r0
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    3422:	89 83       	std	Y+1, r24	; 0x01
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	89 30       	cpi	r24, 0x09	; 9
    3428:	79 f4       	brne	.+30     	; 0x3448 <PWM_Init_timer4_H5+0x30>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
    342a:	a0 ea       	ldi	r26, 0xA0	; 160
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	e0 ea       	ldi	r30, 0xA0	; 160
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	82 60       	ori	r24, 0x02	; 2
    3436:	8c 93       	st	X, r24
		cbi(TCCR4A,PWM10);
    3438:	a0 ea       	ldi	r26, 0xA0	; 160
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	e0 ea       	ldi	r30, 0xA0	; 160
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	8e 7f       	andi	r24, 0xFE	; 254
    3444:	8c 93       	st	X, r24
    3446:	20 c0       	rjmp	.+64     	; 0x3488 <PWM_Init_timer4_H5+0x70>
	}
	else if( bitRes == 10 )
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	8a 30       	cpi	r24, 0x0A	; 10
    344c:	79 f4       	brne	.+30     	; 0x346c <PWM_Init_timer4_H5+0x54>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
    344e:	a0 ea       	ldi	r26, 0xA0	; 160
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	e0 ea       	ldi	r30, 0xA0	; 160
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	80 81       	ld	r24, Z
    3458:	82 60       	ori	r24, 0x02	; 2
    345a:	8c 93       	st	X, r24
		sbi(TCCR4A,PWM10);
    345c:	a0 ea       	ldi	r26, 0xA0	; 160
    345e:	b0 e0       	ldi	r27, 0x00	; 0
    3460:	e0 ea       	ldi	r30, 0xA0	; 160
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	80 81       	ld	r24, Z
    3466:	81 60       	ori	r24, 0x01	; 1
    3468:	8c 93       	st	X, r24
    346a:	0e c0       	rjmp	.+28     	; 0x3488 <PWM_Init_timer4_H5+0x70>
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
    346c:	a0 ea       	ldi	r26, 0xA0	; 160
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	e0 ea       	ldi	r30, 0xA0	; 160
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	8d 7f       	andi	r24, 0xFD	; 253
    3478:	8c 93       	st	X, r24
		sbi(TCCR4A,PWM10);
    347a:	a0 ea       	ldi	r26, 0xA0	; 160
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	e0 ea       	ldi	r30, 0xA0	; 160
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	81 60       	ori	r24, 0x01	; 1
    3486:	8c 93       	st	X, r24
	}
	// clear output compare values
	OCR4C = 0;
    3488:	ec ea       	ldi	r30, 0xAC	; 172
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	11 82       	std	Z+1, r1	; 0x01
    348e:	10 82       	st	Z, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
    3490:	0f 90       	pop	r0
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	08 95       	ret

00003498 <timer1PWMInitICR>:

#ifdef WGM10
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
    3498:	df 93       	push	r29
    349a:	cf 93       	push	r28
    349c:	00 d0       	rcall	.+0      	; 0x349e <timer1PWMInitICR+0x6>
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
    34a6:	a0 e8       	ldi	r26, 0x80	; 128
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	e0 e8       	ldi	r30, 0x80	; 128
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	8e 7f       	andi	r24, 0xFE	; 254
    34b2:	8c 93       	st	X, r24
	sbi(TCCR1A,WGM11);
    34b4:	a0 e8       	ldi	r26, 0x80	; 128
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	e0 e8       	ldi	r30, 0x80	; 128
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	82 60       	ori	r24, 0x02	; 2
    34c0:	8c 93       	st	X, r24
	sbi(TCCR1B,WGM12);
    34c2:	a1 e8       	ldi	r26, 0x81	; 129
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	e1 e8       	ldi	r30, 0x81	; 129
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	80 81       	ld	r24, Z
    34cc:	88 60       	ori	r24, 0x08	; 8
    34ce:	8c 93       	st	X, r24
	sbi(TCCR1B,WGM13);
    34d0:	a1 e8       	ldi	r26, 0x81	; 129
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	e1 e8       	ldi	r30, 0x81	; 129
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	80 81       	ld	r24, Z
    34da:	80 61       	ori	r24, 0x10	; 16
    34dc:	8c 93       	st	X, r24
	
	// set top count value
	ICR1 = topcount;
    34de:	e6 e8       	ldi	r30, 0x86	; 134
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	9a 81       	ldd	r25, Y+2	; 0x02
    34e6:	91 83       	std	Z+1, r25	; 0x01
    34e8:	80 83       	st	Z, r24
	
	// clear output compare values
	OCR1A = 0;
    34ea:	e8 e8       	ldi	r30, 0x88	; 136
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	11 82       	std	Z+1, r1	; 0x01
    34f0:	10 82       	st	Z, r1
	OCR1B = 0;
    34f2:	ea e8       	ldi	r30, 0x8A	; 138
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	11 82       	std	Z+1, r1	; 0x01
    34f8:	10 82       	st	Z, r1
	OCR1C = 0;
    34fa:	ec e8       	ldi	r30, 0x8C	; 140
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	11 82       	std	Z+1, r1	; 0x01
    3500:	10 82       	st	Z, r1
}
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	00 d0       	rcall	.+0      	; 0x3512 <timer3PWMInitICR+0x6>
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	9a 83       	std	Y+2, r25	; 0x02
    3518:	89 83       	std	Y+1, r24	; 0x01
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
    351a:	a0 e9       	ldi	r26, 0x90	; 144
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	e0 e9       	ldi	r30, 0x90	; 144
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	80 81       	ld	r24, Z
    3524:	8e 7f       	andi	r24, 0xFE	; 254
    3526:	8c 93       	st	X, r24
	sbi(TCCR3A,WGM11);
    3528:	a0 e9       	ldi	r26, 0x90	; 144
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	e0 e9       	ldi	r30, 0x90	; 144
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	82 60       	ori	r24, 0x02	; 2
    3534:	8c 93       	st	X, r24
	sbi(TCCR3B,WGM12);
    3536:	a1 e9       	ldi	r26, 0x91	; 145
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	e1 e9       	ldi	r30, 0x91	; 145
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	88 60       	ori	r24, 0x08	; 8
    3542:	8c 93       	st	X, r24
	sbi(TCCR3B,WGM13);
    3544:	a1 e9       	ldi	r26, 0x91	; 145
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	e1 e9       	ldi	r30, 0x91	; 145
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	80 81       	ld	r24, Z
    354e:	80 61       	ori	r24, 0x10	; 16
    3550:	8c 93       	st	X, r24
	
	// set top count value
	ICR3 = topcount;
    3552:	e6 e9       	ldi	r30, 0x96	; 150
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	9a 81       	ldd	r25, Y+2	; 0x02
    355a:	91 83       	std	Z+1, r25	; 0x01
    355c:	80 83       	st	Z, r24
	
	// clear output compare values
	OCR3A = 0;
    355e:	e8 e9       	ldi	r30, 0x98	; 152
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	11 82       	std	Z+1, r1	; 0x01
    3564:	10 82       	st	Z, r1
	OCR3B = 0;
    3566:	ea e9       	ldi	r30, 0x9A	; 154
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	11 82       	std	Z+1, r1	; 0x01
    356c:	10 82       	st	Z, r1
	OCR3C = 0;
    356e:	ec e9       	ldi	r30, 0x9C	; 156
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	11 82       	std	Z+1, r1	; 0x01
    3574:	10 82       	st	Z, r1
}
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	00 d0       	rcall	.+0      	; 0x3586 <timer4PWMInitICR+0x6>
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	9a 83       	std	Y+2, r25	; 0x02
    358c:	89 83       	std	Y+1, r24	; 0x01
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
    358e:	a0 ea       	ldi	r26, 0xA0	; 160
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	e0 ea       	ldi	r30, 0xA0	; 160
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	8e 7f       	andi	r24, 0xFE	; 254
    359a:	8c 93       	st	X, r24
	sbi(TCCR4A,WGM11);
    359c:	a0 ea       	ldi	r26, 0xA0	; 160
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	e0 ea       	ldi	r30, 0xA0	; 160
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	82 60       	ori	r24, 0x02	; 2
    35a8:	8c 93       	st	X, r24
	sbi(TCCR4B,WGM12);
    35aa:	a1 ea       	ldi	r26, 0xA1	; 161
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	e1 ea       	ldi	r30, 0xA1	; 161
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	80 81       	ld	r24, Z
    35b4:	88 60       	ori	r24, 0x08	; 8
    35b6:	8c 93       	st	X, r24
	sbi(TCCR4B,WGM13);
    35b8:	a1 ea       	ldi	r26, 0xA1	; 161
    35ba:	b0 e0       	ldi	r27, 0x00	; 0
    35bc:	e1 ea       	ldi	r30, 0xA1	; 161
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	80 81       	ld	r24, Z
    35c2:	80 61       	ori	r24, 0x10	; 16
    35c4:	8c 93       	st	X, r24
	
	// set top count value
	ICR4 = topcount;
    35c6:	e6 ea       	ldi	r30, 0xA6	; 166
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	9a 81       	ldd	r25, Y+2	; 0x02
    35ce:	91 83       	std	Z+1, r25	; 0x01
    35d0:	80 83       	st	Z, r24
	
	// clear output compare values
	OCR4A = 0;
    35d2:	e8 ea       	ldi	r30, 0xA8	; 168
    35d4:	f0 e0       	ldi	r31, 0x00	; 0
    35d6:	11 82       	std	Z+1, r1	; 0x01
    35d8:	10 82       	st	Z, r1
	OCR4B = 0;
    35da:	ea ea       	ldi	r30, 0xAA	; 170
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	11 82       	std	Z+1, r1	; 0x01
    35e0:	10 82       	st	Z, r1
	OCR4C = 0;
    35e2:	ec ea       	ldi	r30, 0xAC	; 172
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	11 82       	std	Z+1, r1	; 0x01
    35e8:	10 82       	st	Z, r1
}
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	08 95       	ret

000035f4 <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
    35f4:	df 93       	push	r29
    35f6:	cf 93       	push	r28
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR1A,COM1B1);
    35fc:	a0 e8       	ldi	r26, 0x80	; 128
    35fe:	b0 e0       	ldi	r27, 0x00	; 0
    3600:	e0 e8       	ldi	r30, 0x80	; 128
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
    3606:	80 62       	ori	r24, 0x20	; 32
    3608:	8c 93       	st	X, r24
	cbi(TCCR1A,COM1B0);
    360a:	a0 e8       	ldi	r26, 0x80	; 128
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	e0 e8       	ldi	r30, 0x80	; 128
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	8f 7e       	andi	r24, 0xEF	; 239
    3616:	8c 93       	st	X, r24
}
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	08 95       	ret

0000361e <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR2A,COM2B1);
    3626:	a0 eb       	ldi	r26, 0xB0	; 176
    3628:	b0 e0       	ldi	r27, 0x00	; 0
    362a:	e0 eb       	ldi	r30, 0xB0	; 176
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	80 81       	ld	r24, Z
    3630:	80 62       	ori	r24, 0x20	; 32
    3632:	8c 93       	st	X, r24
	cbi(TCCR2A,COM2B0);
    3634:	a0 eb       	ldi	r26, 0xB0	; 176
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	e0 eb       	ldi	r30, 0xB0	; 176
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	8f 7e       	andi	r24, 0xEF	; 239
    3640:	8c 93       	st	X, r24
}
    3642:	cf 91       	pop	r28
    3644:	df 91       	pop	r29
    3646:	08 95       	ret

00003648 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
    3648:	df 93       	push	r29
    364a:	cf 93       	push	r28
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR3A,COM3A1);
    3650:	a0 e9       	ldi	r26, 0x90	; 144
    3652:	b0 e0       	ldi	r27, 0x00	; 0
    3654:	e0 e9       	ldi	r30, 0x90	; 144
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	80 81       	ld	r24, Z
    365a:	80 68       	ori	r24, 0x80	; 128
    365c:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3A0);
    365e:	a0 e9       	ldi	r26, 0x90	; 144
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	e0 e9       	ldi	r30, 0x90	; 144
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	8f 7b       	andi	r24, 0xBF	; 191
    366a:	8c 93       	st	X, r24
}
    366c:	cf 91       	pop	r28
    366e:	df 91       	pop	r29
    3670:	08 95       	ret

00003672 <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
    3672:	df 93       	push	r29
    3674:	cf 93       	push	r28
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR3A,COM3B1);
    367a:	a0 e9       	ldi	r26, 0x90	; 144
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	e0 e9       	ldi	r30, 0x90	; 144
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	80 81       	ld	r24, Z
    3684:	80 62       	ori	r24, 0x20	; 32
    3686:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3B0);
    3688:	a0 e9       	ldi	r26, 0x90	; 144
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	e0 e9       	ldi	r30, 0x90	; 144
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	8f 7e       	andi	r24, 0xEF	; 239
    3694:	8c 93       	st	X, r24
}
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	08 95       	ret

0000369c <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
    369c:	df 93       	push	r29
    369e:	cf 93       	push	r28
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR3A,COM3C1);
    36a4:	a0 e9       	ldi	r26, 0x90	; 144
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	e0 e9       	ldi	r30, 0x90	; 144
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	80 81       	ld	r24, Z
    36ae:	88 60       	ori	r24, 0x08	; 8
    36b0:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3C0);
    36b2:	a0 e9       	ldi	r26, 0x90	; 144
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	e0 e9       	ldi	r30, 0x90	; 144
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	80 81       	ld	r24, Z
    36bc:	8b 7f       	andi	r24, 0xFB	; 251
    36be:	8c 93       	st	X, r24
}
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	cd b7       	in	r28, 0x3d	; 61
    36cc:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR4A,COM4A1);
    36ce:	a0 ea       	ldi	r26, 0xA0	; 160
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	e0 ea       	ldi	r30, 0xA0	; 160
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	80 68       	ori	r24, 0x80	; 128
    36da:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4A0);
    36dc:	a0 ea       	ldi	r26, 0xA0	; 160
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	e0 ea       	ldi	r30, 0xA0	; 160
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	8f 7b       	andi	r24, 0xBF	; 191
    36e8:	8c 93       	st	X, r24
}
    36ea:	cf 91       	pop	r28
    36ec:	df 91       	pop	r29
    36ee:	08 95       	ret

000036f0 <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
    36f0:	df 93       	push	r29
    36f2:	cf 93       	push	r28
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR4A,COM4B1);
    36f8:	a0 ea       	ldi	r26, 0xA0	; 160
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	e0 ea       	ldi	r30, 0xA0	; 160
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	80 62       	ori	r24, 0x20	; 32
    3704:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4B0);
    3706:	a0 ea       	ldi	r26, 0xA0	; 160
    3708:	b0 e0       	ldi	r27, 0x00	; 0
    370a:	e0 ea       	ldi	r30, 0xA0	; 160
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	80 81       	ld	r24, Z
    3710:	8f 7e       	andi	r24, 0xEF	; 239
    3712:	8c 93       	st	X, r24
}
    3714:	cf 91       	pop	r28
    3716:	df 91       	pop	r29
    3718:	08 95       	ret

0000371a <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
	sbi(TCCR4A,COM4C1);
    3722:	a0 ea       	ldi	r26, 0xA0	; 160
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	e0 ea       	ldi	r30, 0xA0	; 160
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	88 60       	ori	r24, 0x08	; 8
    372e:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4C0);
    3730:	a0 ea       	ldi	r26, 0xA0	; 160
    3732:	b0 e0       	ldi	r27, 0x00	; 0
    3734:	e0 ea       	ldi	r30, 0xA0	; 160
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	80 81       	ld	r24, Z
    373a:	8b 7f       	andi	r24, 0xFB	; 251
    373c:	8c 93       	st	X, r24
}
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	08 95       	ret

00003744 <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
    3744:	df 93       	push	r29
    3746:	cf 93       	push	r28
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR1A,COM1B1);
    374c:	a0 e8       	ldi	r26, 0x80	; 128
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	e0 e8       	ldi	r30, 0x80	; 128
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	8f 7d       	andi	r24, 0xDF	; 223
    3758:	8c 93       	st	X, r24
	cbi(TCCR1A,COM1B0);
    375a:	a0 e8       	ldi	r26, 0x80	; 128
    375c:	b0 e0       	ldi	r27, 0x00	; 0
    375e:	e0 e8       	ldi	r30, 0x80	; 128
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	80 81       	ld	r24, Z
    3764:	8f 7e       	andi	r24, 0xEF	; 239
    3766:	8c 93       	st	X, r24
}
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	08 95       	ret

0000376e <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR2A,COM2B1);
    3776:	a0 eb       	ldi	r26, 0xB0	; 176
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	e0 eb       	ldi	r30, 0xB0	; 176
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	8f 7d       	andi	r24, 0xDF	; 223
    3782:	8c 93       	st	X, r24
	cbi(TCCR2A,COM2B0);
    3784:	a0 eb       	ldi	r26, 0xB0	; 176
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	e0 eb       	ldi	r30, 0xB0	; 176
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	8f 7e       	andi	r24, 0xEF	; 239
    3790:	8c 93       	st	X, r24
}
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR3A,COM3A1);
    37a0:	a0 e9       	ldi	r26, 0x90	; 144
    37a2:	b0 e0       	ldi	r27, 0x00	; 0
    37a4:	e0 e9       	ldi	r30, 0x90	; 144
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	80 81       	ld	r24, Z
    37aa:	8f 77       	andi	r24, 0x7F	; 127
    37ac:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3A0);
    37ae:	a0 e9       	ldi	r26, 0x90	; 144
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	e0 e9       	ldi	r30, 0x90	; 144
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	80 81       	ld	r24, Z
    37b8:	8f 7b       	andi	r24, 0xBF	; 191
    37ba:	8c 93       	st	X, r24
}
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR3A,COM3B1);
    37ca:	a0 e9       	ldi	r26, 0x90	; 144
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	e0 e9       	ldi	r30, 0x90	; 144
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	8f 7d       	andi	r24, 0xDF	; 223
    37d6:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3B0);
    37d8:	a0 e9       	ldi	r26, 0x90	; 144
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	e0 e9       	ldi	r30, 0x90	; 144
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	80 81       	ld	r24, Z
    37e2:	8f 7e       	andi	r24, 0xEF	; 239
    37e4:	8c 93       	st	X, r24
}
    37e6:	cf 91       	pop	r28
    37e8:	df 91       	pop	r29
    37ea:	08 95       	ret

000037ec <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR3A,COM3C1);
    37f4:	a0 e9       	ldi	r26, 0x90	; 144
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	e0 e9       	ldi	r30, 0x90	; 144
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	80 81       	ld	r24, Z
    37fe:	87 7f       	andi	r24, 0xF7	; 247
    3800:	8c 93       	st	X, r24
	cbi(TCCR3A,COM3C0);
    3802:	a0 e9       	ldi	r26, 0x90	; 144
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	e0 e9       	ldi	r30, 0x90	; 144
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	8b 7f       	andi	r24, 0xFB	; 251
    380e:	8c 93       	st	X, r24
}
    3810:	cf 91       	pop	r28
    3812:	df 91       	pop	r29
    3814:	08 95       	ret

00003816 <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
    3816:	df 93       	push	r29
    3818:	cf 93       	push	r28
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR4A,COM4A1);
    381e:	a0 ea       	ldi	r26, 0xA0	; 160
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	e0 ea       	ldi	r30, 0xA0	; 160
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 81       	ld	r24, Z
    3828:	8f 77       	andi	r24, 0x7F	; 127
    382a:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4A0);
    382c:	a0 ea       	ldi	r26, 0xA0	; 160
    382e:	b0 e0       	ldi	r27, 0x00	; 0
    3830:	e0 ea       	ldi	r30, 0xA0	; 160
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	80 81       	ld	r24, Z
    3836:	8f 7b       	andi	r24, 0xBF	; 191
    3838:	8c 93       	st	X, r24
}
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	08 95       	ret

00003840 <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
    3840:	df 93       	push	r29
    3842:	cf 93       	push	r28
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR4A,COM4B1);
    3848:	a0 ea       	ldi	r26, 0xA0	; 160
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	e0 ea       	ldi	r30, 0xA0	; 160
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	80 81       	ld	r24, Z
    3852:	8f 7d       	andi	r24, 0xDF	; 223
    3854:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4B0);
    3856:	a0 ea       	ldi	r26, 0xA0	; 160
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	e0 ea       	ldi	r30, 0xA0	; 160
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	80 81       	ld	r24, Z
    3860:	8f 7e       	andi	r24, 0xEF	; 239
    3862:	8c 93       	st	X, r24
}
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	08 95       	ret

0000386a <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR4A,COM4C1);
    3872:	a0 ea       	ldi	r26, 0xA0	; 160
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	e0 ea       	ldi	r30, 0xA0	; 160
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	87 7f       	andi	r24, 0xF7	; 247
    387e:	8c 93       	st	X, r24
	cbi(TCCR4A,COM4C0);
    3880:	a0 ea       	ldi	r26, 0xA0	; 160
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	e0 ea       	ldi	r30, 0xA0	; 160
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	8b 7f       	andi	r24, 0xFB	; 251
    388c:	8c 93       	st	X, r24
}
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	08 95       	ret

00003894 <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
    3894:	df 93       	push	r29
    3896:	cf 93       	push	r28
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR1A,PWM11);
    389c:	a0 e8       	ldi	r26, 0x80	; 128
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	e0 e8       	ldi	r30, 0x80	; 128
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	8d 7f       	andi	r24, 0xFD	; 253
    38a8:	8c 93       	st	X, r24
	cbi(TCCR1A,PWM10);
    38aa:	a0 e8       	ldi	r26, 0x80	; 128
    38ac:	b0 e0       	ldi	r27, 0x00	; 0
    38ae:	e0 e8       	ldi	r30, 0x80	; 128
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	80 81       	ld	r24, Z
    38b4:	8e 7f       	andi	r24, 0xFE	; 254
    38b6:	8c 93       	st	X, r24
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
    38b8:	0e 94 a2 1b 	call	0x3744	; 0x3744 <PWM_timer1_Off_LED>
	//timer2PWMCOff();
}
    38bc:	cf 91       	pop	r28
    38be:	df 91       	pop	r29
    38c0:	08 95       	ret

000038c2 <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
    38c2:	df 93       	push	r29
    38c4:	cf 93       	push	r28
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR2A,PWM11);
    38ca:	a0 eb       	ldi	r26, 0xB0	; 176
    38cc:	b0 e0       	ldi	r27, 0x00	; 0
    38ce:	e0 eb       	ldi	r30, 0xB0	; 176
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	80 81       	ld	r24, Z
    38d4:	8d 7f       	andi	r24, 0xFD	; 253
    38d6:	8c 93       	st	X, r24
	cbi(TCCR2A,PWM10);
    38d8:	a0 eb       	ldi	r26, 0xB0	; 176
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e0 eb       	ldi	r30, 0xB0	; 176
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	8e 7f       	andi	r24, 0xFE	; 254
    38e4:	8c 93       	st	X, r24
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
    38e6:	0e 94 b7 1b 	call	0x376e	; 0x376e <PWM_timer2_Off_H6>
	//timer2PWMCOff();
}
    38ea:	cf 91       	pop	r28
    38ec:	df 91       	pop	r29
    38ee:	08 95       	ret

000038f0 <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
    38f0:	df 93       	push	r29
    38f2:	cf 93       	push	r28
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR3A,PWM11);
    38f8:	a0 e9       	ldi	r26, 0x90	; 144
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	e0 e9       	ldi	r30, 0x90	; 144
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	80 81       	ld	r24, Z
    3902:	8d 7f       	andi	r24, 0xFD	; 253
    3904:	8c 93       	st	X, r24
	cbi(TCCR3A,PWM10);
    3906:	a0 e9       	ldi	r26, 0x90	; 144
    3908:	b0 e0       	ldi	r27, 0x00	; 0
    390a:	e0 e9       	ldi	r30, 0x90	; 144
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	80 81       	ld	r24, Z
    3910:	8e 7f       	andi	r24, 0xFE	; 254
    3912:	8c 93       	st	X, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
    3914:	0e 94 cc 1b 	call	0x3798	; 0x3798 <PWM_timer3_Off_E3>
	PWM_timer3_Off_E4();
    3918:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <PWM_timer3_Off_E4>
	PWM_timer3_Off_E5();
    391c:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <PWM_timer3_Off_E5>
	//timer2PWMCOff();
}
    3920:	cf 91       	pop	r28
    3922:	df 91       	pop	r29
    3924:	08 95       	ret

00003926 <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
	cbi(TCCR4A,PWM11);
    392e:	a0 ea       	ldi	r26, 0xA0	; 160
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	e0 ea       	ldi	r30, 0xA0	; 160
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	80 81       	ld	r24, Z
    3938:	8d 7f       	andi	r24, 0xFD	; 253
    393a:	8c 93       	st	X, r24
	cbi(TCCR4A,PWM10);
    393c:	a0 ea       	ldi	r26, 0xA0	; 160
    393e:	b0 e0       	ldi	r27, 0x00	; 0
    3940:	e0 ea       	ldi	r30, 0xA0	; 160
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	80 81       	ld	r24, Z
    3946:	8e 7f       	andi	r24, 0xFE	; 254
    3948:	8c 93       	st	X, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
    394a:	0e 94 0b 1c 	call	0x3816	; 0x3816 <PWM_timer4_Off_H3>
	PWM_timer4_Off_H4();
    394e:	0e 94 20 1c 	call	0x3840	; 0x3840 <PWM_timer4_Off_H4>
	PWM_timer4_Off_H5();
    3952:	0e 94 35 1c 	call	0x386a	; 0x386a <PWM_timer4_Off_H5>
	//timer2PWMCOff();
}
    3956:	cf 91       	pop	r28
    3958:	df 91       	pop	r29
    395a:	08 95       	ret

0000395c <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
    395c:	df 93       	push	r29
    395e:	cf 93       	push	r28
    3960:	00 d0       	rcall	.+0      	; 0x3962 <PWM_timer1_Set_LED+0x6>
    3962:	cd b7       	in	r28, 0x3d	; 61
    3964:	de b7       	in	r29, 0x3e	; 62
    3966:	9a 83       	std	Y+2, r25	; 0x02
    3968:	89 83       	std	Y+1, r24	; 0x01
    396a:	ea e8       	ldi	r30, 0x8A	; 138
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	89 81       	ldd	r24, Y+1	; 0x01
    3970:	9a 81       	ldd	r25, Y+2	; 0x02
    3972:	91 83       	std	Z+1, r25	; 0x01
    3974:	80 83       	st	Z, r24
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	00 d0       	rcall	.+0      	; 0x3986 <PWM_timer2_Set_H6+0x6>
    3986:	cd b7       	in	r28, 0x3d	; 61
    3988:	de b7       	in	r29, 0x3e	; 62
    398a:	9a 83       	std	Y+2, r25	; 0x02
    398c:	89 83       	std	Y+1, r24	; 0x01
    398e:	e4 eb       	ldi	r30, 0xB4	; 180
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	89 81       	ldd	r24, Y+1	; 0x01
    3994:	80 83       	st	Z, r24
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	08 95       	ret

000039a0 <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	00 d0       	rcall	.+0      	; 0x39a6 <PWM_timer3_Set_E3+0x6>
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	9a 83       	std	Y+2, r25	; 0x02
    39ac:	89 83       	std	Y+1, r24	; 0x01
    39ae:	e8 e9       	ldi	r30, 0x98	; 152
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	9a 81       	ldd	r25, Y+2	; 0x02
    39b6:	91 83       	std	Z+1, r25	; 0x01
    39b8:	80 83       	st	Z, r24
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	cf 91       	pop	r28
    39c0:	df 91       	pop	r29
    39c2:	08 95       	ret

000039c4 <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	00 d0       	rcall	.+0      	; 0x39ca <PWM_timer3_Set_E4+0x6>
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	9a 83       	std	Y+2, r25	; 0x02
    39d0:	89 83       	std	Y+1, r24	; 0x01
    39d2:	ea e9       	ldi	r30, 0x9A	; 154
    39d4:	f0 e0       	ldi	r31, 0x00	; 0
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	9a 81       	ldd	r25, Y+2	; 0x02
    39da:	91 83       	std	Z+1, r25	; 0x01
    39dc:	80 83       	st	Z, r24
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	cf 91       	pop	r28
    39e4:	df 91       	pop	r29
    39e6:	08 95       	ret

000039e8 <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
    39e8:	df 93       	push	r29
    39ea:	cf 93       	push	r28
    39ec:	00 d0       	rcall	.+0      	; 0x39ee <PWM_timer3_Set_E5+0x6>
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
    39f2:	9a 83       	std	Y+2, r25	; 0x02
    39f4:	89 83       	std	Y+1, r24	; 0x01
    39f6:	ec e9       	ldi	r30, 0x9C	; 156
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    39fc:	9a 81       	ldd	r25, Y+2	; 0x02
    39fe:	91 83       	std	Z+1, r25	; 0x01
    3a00:	80 83       	st	Z, r24
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
    3a0c:	df 93       	push	r29
    3a0e:	cf 93       	push	r28
    3a10:	00 d0       	rcall	.+0      	; 0x3a12 <PWM_timer4_Set_H3+0x6>
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	9a 83       	std	Y+2, r25	; 0x02
    3a18:	89 83       	std	Y+1, r24	; 0x01
    3a1a:	e8 ea       	ldi	r30, 0xA8	; 168
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	9a 81       	ldd	r25, Y+2	; 0x02
    3a22:	91 83       	std	Z+1, r25	; 0x01
    3a24:	80 83       	st	Z, r24
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	cf 91       	pop	r28
    3a2c:	df 91       	pop	r29
    3a2e:	08 95       	ret

00003a30 <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
    3a30:	df 93       	push	r29
    3a32:	cf 93       	push	r28
    3a34:	00 d0       	rcall	.+0      	; 0x3a36 <PWM_timer4_Set_H4+0x6>
    3a36:	cd b7       	in	r28, 0x3d	; 61
    3a38:	de b7       	in	r29, 0x3e	; 62
    3a3a:	9a 83       	std	Y+2, r25	; 0x02
    3a3c:	89 83       	std	Y+1, r24	; 0x01
    3a3e:	ea ea       	ldi	r30, 0xAA	; 170
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	9a 81       	ldd	r25, Y+2	; 0x02
    3a46:	91 83       	std	Z+1, r25	; 0x01
    3a48:	80 83       	st	Z, r24
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	cf 91       	pop	r28
    3a50:	df 91       	pop	r29
    3a52:	08 95       	ret

00003a54 <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
    3a54:	df 93       	push	r29
    3a56:	cf 93       	push	r28
    3a58:	00 d0       	rcall	.+0      	; 0x3a5a <PWM_timer4_Set_H5+0x6>
    3a5a:	cd b7       	in	r28, 0x3d	; 61
    3a5c:	de b7       	in	r29, 0x3e	; 62
    3a5e:	9a 83       	std	Y+2, r25	; 0x02
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	ec ea       	ldi	r30, 0xAC	; 172
    3a64:	f0 e0       	ldi	r31, 0x00	; 0
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
    3a68:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6a:	91 83       	std	Z+1, r25	; 0x01
    3a6c:	80 83       	st	Z, r24
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	cf 91       	pop	r28
    3a74:	df 91       	pop	r29
    3a76:	08 95       	ret

00003a78 <configure_ports>:


//************CONFIGURE PORTS************
//configure ports for input or output - specific to ATmega2560
void configure_ports(void)
	{
    3a78:	df 93       	push	r29
    3a7a:	cf 93       	push	r28
    3a7c:	cd b7       	in	r28, 0x3d	; 61
    3a7e:	de b7       	in	r29, 0x3e	; 62
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
    3a80:	e0 e3       	ldi	r30, 0x30	; 48
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	10 82       	st	Z, r1
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
    3a86:	e1 e3       	ldi	r30, 0x31	; 49
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	10 82       	st	Z, r1
	DDRK = 0b00000000;  //configure all K ports for input				0x00
    3a8c:	e7 e0       	ldi	r30, 0x07	; 7
    3a8e:	f1 e0       	ldi	r31, 0x01	; 1
    3a90:	10 82       	st	Z, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
    3a92:	e8 e0       	ldi	r30, 0x08	; 8
    3a94:	f1 e0       	ldi	r31, 0x01	; 1
    3a96:	10 82       	st	Z, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
    3a98:	e1 e2       	ldi	r30, 0x21	; 33
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	8f ef       	ldi	r24, 0xFF	; 255
    3a9e:	80 83       	st	Z, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
    3aa0:	e4 e2       	ldi	r30, 0x24	; 36
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	80 e4       	ldi	r24, 0x40	; 64
    3aa6:	80 83       	st	Z, r24
	DDRC = 0b11111111;  //configure ports for output
    3aa8:	e7 e2       	ldi	r30, 0x27	; 39
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	8f ef       	ldi	r24, 0xFF	; 255
    3aae:	80 83       	st	Z, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
    3ab0:	ab e2       	ldi	r26, 0x2B	; 43
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	eb e2       	ldi	r30, 0x2B	; 43
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	81 60       	ori	r24, 0x01	; 1
    3abc:	8c 93       	st	X, r24
	sbi(PORTD, PD1); // SDA pull-up
    3abe:	ab e2       	ldi	r26, 0x2B	; 43
    3ac0:	b0 e0       	ldi	r27, 0x00	; 0
    3ac2:	eb e2       	ldi	r30, 0x2B	; 43
    3ac4:	f0 e0       	ldi	r31, 0x00	; 0
    3ac6:	80 81       	ld	r24, Z
    3ac8:	82 60       	ori	r24, 0x02	; 2
    3aca:	8c 93       	st	X, r24
	DDRD = 0b11110011;  //configure ports for output
    3acc:	ea e2       	ldi	r30, 0x2A	; 42
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	83 ef       	ldi	r24, 0xF3	; 243
    3ad2:	80 83       	st	Z, r24
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
    3ad4:	ed e2       	ldi	r30, 0x2D	; 45
    3ad6:	f0 e0       	ldi	r31, 0x00	; 0
    3ad8:	8e ef       	ldi	r24, 0xFE	; 254
    3ada:	80 83       	st	Z, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
    3adc:	a4 e3       	ldi	r26, 0x34	; 52
    3ade:	b0 e0       	ldi	r27, 0x00	; 0
    3ae0:	e4 e3       	ldi	r30, 0x34	; 52
    3ae2:	f0 e0       	ldi	r31, 0x00	; 0
    3ae4:	80 81       	ld	r24, Z
    3ae6:	80 62       	ori	r24, 0x20	; 32
    3ae8:	8c 93       	st	X, r24
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
    3aea:	a3 e3       	ldi	r26, 0x33	; 51
    3aec:	b0 e0       	ldi	r27, 0x00	; 0
    3aee:	e3 e3       	ldi	r30, 0x33	; 51
    3af0:	f0 e0       	ldi	r31, 0x00	; 0
    3af2:	80 81       	ld	r24, Z
    3af4:	8f 7d       	andi	r24, 0xDF	; 223
    3af6:	8c 93       	st	X, r24
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
    3af8:	e1 e0       	ldi	r30, 0x01	; 1
    3afa:	f1 e0       	ldi	r31, 0x01	; 1
    3afc:	8e ef       	ldi	r24, 0xFE	; 254
    3afe:	80 83       	st	Z, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
    3b00:	e4 e0       	ldi	r30, 0x04	; 4
    3b02:	f1 e0       	ldi	r31, 0x01	; 1
    3b04:	8e ef       	ldi	r24, 0xFE	; 254
    3b06:	80 83       	st	Z, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
    3b08:	cf 91       	pop	r28
    3b0a:	df 91       	pop	r29
    3b0c:	08 95       	ret

00003b0e <delay_cycles>:

//************DELAY FUNCTIONS************
//wait for X amount of cycles (234 cycles is about 1.003 milliseconds)//incorrect
//to calculate: 234/1.003*(time in milliseconds) = number of cycles
void delay_cycles(unsigned long int cycles)
	{
    3b0e:	df 93       	push	r29
    3b10:	cf 93       	push	r28
    3b12:	00 d0       	rcall	.+0      	; 0x3b14 <delay_cycles+0x6>
    3b14:	00 d0       	rcall	.+0      	; 0x3b16 <delay_cycles+0x8>
    3b16:	cd b7       	in	r28, 0x3d	; 61
    3b18:	de b7       	in	r29, 0x3e	; 62
    3b1a:	69 83       	std	Y+1, r22	; 0x01
    3b1c:	7a 83       	std	Y+2, r23	; 0x02
    3b1e:	8b 83       	std	Y+3, r24	; 0x03
    3b20:	9c 83       	std	Y+4, r25	; 0x04
    3b22:	0b c0       	rjmp	.+22     	; 0x3b3a <delay_cycles+0x2c>
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	9a 81       	ldd	r25, Y+2	; 0x02
    3b28:	ab 81       	ldd	r26, Y+3	; 0x03
    3b2a:	bc 81       	ldd	r27, Y+4	; 0x04
    3b2c:	01 97       	sbiw	r24, 0x01	; 1
    3b2e:	a1 09       	sbc	r26, r1
    3b30:	b1 09       	sbc	r27, r1
    3b32:	89 83       	std	Y+1, r24	; 0x01
    3b34:	9a 83       	std	Y+2, r25	; 0x02
    3b36:	ab 83       	std	Y+3, r26	; 0x03
    3b38:	bc 83       	std	Y+4, r27	; 0x04
//wait for X amount of cycles (234 cycles is about 1.003 milliseconds)//incorrect
//to calculate: 234/1.003*(time in milliseconds) = number of cycles
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
    3b3a:	89 81       	ldd	r24, Y+1	; 0x01
    3b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3e:	ab 81       	ldd	r26, Y+3	; 0x03
    3b40:	bc 81       	ldd	r27, Y+4	; 0x04
    3b42:	00 97       	sbiw	r24, 0x00	; 0
    3b44:	a1 05       	cpc	r26, r1
    3b46:	b1 05       	cpc	r27, r1
    3b48:	69 f7       	brne	.-38     	; 0x3b24 <delay_cycles+0x16>
		cycles--;
	}
    3b4a:	0f 90       	pop	r0
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	cf 91       	pop	r28
    3b54:	df 91       	pop	r29
    3b56:	08 95       	ret

00003b58 <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
    3b58:	df 93       	push	r29
    3b5a:	cf 93       	push	r28
    3b5c:	cd b7       	in	r28, 0x3d	; 61
    3b5e:	de b7       	in	r29, 0x3e	; 62
    3b60:	a5 e2       	ldi	r26, 0x25	; 37
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	e5 e2       	ldi	r30, 0x25	; 37
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	80 81       	ld	r24, Z
    3b6a:	80 64       	ori	r24, 0x40	; 64
    3b6c:	8c 93       	st	X, r24
    3b6e:	cf 91       	pop	r28
    3b70:	df 91       	pop	r29
    3b72:	08 95       	ret

00003b74 <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
    3b7c:	a5 e2       	ldi	r26, 0x25	; 37
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	e5 e2       	ldi	r30, 0x25	; 37
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	8f 7b       	andi	r24, 0xBF	; 191
    3b88:	8c 93       	st	X, r24
    3b8a:	cf 91       	pop	r28
    3b8c:	df 91       	pop	r29
    3b8e:	08 95       	ret

00003b90 <button_pressed>:
//***************************************


//*****************BUTTON****************
int button_pressed(void)
	{
    3b90:	df 93       	push	r29
    3b92:	cf 93       	push	r28
    3b94:	00 d0       	rcall	.+0      	; 0x3b96 <button_pressed+0x6>
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
	return (bit_is_clear(PING, 5));
    3b9a:	e2 e3       	ldi	r30, 0x32	; 50
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	80 81       	ld	r24, Z
    3ba0:	88 2f       	mov	r24, r24
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	80 72       	andi	r24, 0x20	; 32
    3ba6:	90 70       	andi	r25, 0x00	; 0
    3ba8:	1a 82       	std	Y+2, r1	; 0x02
    3baa:	19 82       	std	Y+1, r1	; 0x01
    3bac:	00 97       	sbiw	r24, 0x00	; 0
    3bae:	21 f4       	brne	.+8      	; 0x3bb8 <button_pressed+0x28>
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	9a 83       	std	Y+2, r25	; 0x02
    3bb6:	89 83       	std	Y+1, r24	; 0x01
    3bb8:	89 81       	ldd	r24, Y+1	; 0x01
    3bba:	9a 81       	ldd	r25, Y+2	; 0x02
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
    3bbc:	0f 90       	pop	r0
    3bbe:	0f 90       	pop	r0
    3bc0:	cf 91       	pop	r28
    3bc2:	df 91       	pop	r29
    3bc4:	08 95       	ret

00003bc6 <cos_SoR>:
//multiplied by 100 so no floating point math
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
    3bc6:	df 93       	push	r29
    3bc8:	cf 93       	push	r28
    3bca:	00 d0       	rcall	.+0      	; 0x3bcc <cos_SoR+0x6>
    3bcc:	00 d0       	rcall	.+0      	; 0x3bce <cos_SoR+0x8>
    3bce:	00 d0       	rcall	.+0      	; 0x3bd0 <cos_SoR+0xa>
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
    3bd4:	69 83       	std	Y+1, r22	; 0x01
    3bd6:	7a 83       	std	Y+2, r23	; 0x02
    3bd8:	8b 83       	std	Y+3, r24	; 0x03
    3bda:	9c 83       	std	Y+4, r25	; 0x04
	if (degrees >= 0)//positive angles
    3bdc:	89 81       	ldd	r24, Y+1	; 0x01
    3bde:	9a 81       	ldd	r25, Y+2	; 0x02
    3be0:	ab 81       	ldd	r26, Y+3	; 0x03
    3be2:	bc 81       	ldd	r27, Y+4	; 0x04
    3be4:	bb 23       	and	r27, r27
    3be6:	c4 f0       	brlt	.+48     	; 0x3c18 <cos_SoR+0x52>
		return angtable[degrees/5];
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	9a 81       	ldd	r25, Y+2	; 0x02
    3bec:	ab 81       	ldd	r26, Y+3	; 0x03
    3bee:	bc 81       	ldd	r27, Y+4	; 0x04
    3bf0:	25 e0       	ldi	r18, 0x05	; 5
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	40 e0       	ldi	r20, 0x00	; 0
    3bf6:	50 e0       	ldi	r21, 0x00	; 0
    3bf8:	bc 01       	movw	r22, r24
    3bfa:	cd 01       	movw	r24, r26
    3bfc:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__divmodsi4>
    3c00:	da 01       	movw	r26, r20
    3c02:	c9 01       	movw	r24, r18
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	fc 01       	movw	r30, r24
    3c0a:	e0 50       	subi	r30, 0x00	; 0
    3c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0e:	20 81       	ld	r18, Z
    3c10:	31 81       	ldd	r19, Z+1	; 0x01
    3c12:	3e 83       	std	Y+6, r19	; 0x06
    3c14:	2d 83       	std	Y+5, r18	; 0x05
    3c16:	2c c0       	rjmp	.+88     	; 0x3c70 <cos_SoR+0xaa>
	else
		return -angtable[72-(-degrees)/5];
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1c:	ab 81       	ldd	r26, Y+3	; 0x03
    3c1e:	bc 81       	ldd	r27, Y+4	; 0x04
    3c20:	b0 95       	com	r27
    3c22:	a0 95       	com	r26
    3c24:	90 95       	com	r25
    3c26:	81 95       	neg	r24
    3c28:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2a:	af 4f       	sbci	r26, 0xFF	; 255
    3c2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c2e:	25 e0       	ldi	r18, 0x05	; 5
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	40 e0       	ldi	r20, 0x00	; 0
    3c34:	50 e0       	ldi	r21, 0x00	; 0
    3c36:	bc 01       	movw	r22, r24
    3c38:	cd 01       	movw	r24, r26
    3c3a:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__divmodsi4>
    3c3e:	da 01       	movw	r26, r20
    3c40:	c9 01       	movw	r24, r18
    3c42:	9c 01       	movw	r18, r24
    3c44:	ad 01       	movw	r20, r26
    3c46:	88 e4       	ldi	r24, 0x48	; 72
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	a0 e0       	ldi	r26, 0x00	; 0
    3c4c:	b0 e0       	ldi	r27, 0x00	; 0
    3c4e:	82 1b       	sub	r24, r18
    3c50:	93 0b       	sbc	r25, r19
    3c52:	a4 0b       	sbc	r26, r20
    3c54:	b5 0b       	sbc	r27, r21
    3c56:	88 0f       	add	r24, r24
    3c58:	99 1f       	adc	r25, r25
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	e0 50       	subi	r30, 0x00	; 0
    3c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c60:	80 81       	ld	r24, Z
    3c62:	91 81       	ldd	r25, Z+1	; 0x01
    3c64:	22 27       	eor	r18, r18
    3c66:	33 27       	eor	r19, r19
    3c68:	28 1b       	sub	r18, r24
    3c6a:	39 0b       	sbc	r19, r25
    3c6c:	3e 83       	std	Y+6, r19	; 0x06
    3c6e:	2d 83       	std	Y+5, r18	; 0x05
    3c70:	8d 81       	ldd	r24, Y+5	; 0x05
    3c72:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    3c74:	26 96       	adiw	r28, 0x06	; 6
    3c76:	0f b6       	in	r0, 0x3f	; 63
    3c78:	f8 94       	cli
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	cd bf       	out	0x3d, r28	; 61
    3c80:	cf 91       	pop	r28
    3c82:	df 91       	pop	r29
    3c84:	08 95       	ret

00003c86 <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	00 d0       	rcall	.+0      	; 0x3c8c <sin_SoR+0x6>
    3c8c:	00 d0       	rcall	.+0      	; 0x3c8e <sin_SoR+0x8>
    3c8e:	00 d0       	rcall	.+0      	; 0x3c90 <sin_SoR+0xa>
    3c90:	cd b7       	in	r28, 0x3d	; 61
    3c92:	de b7       	in	r29, 0x3e	; 62
    3c94:	69 83       	std	Y+1, r22	; 0x01
    3c96:	7a 83       	std	Y+2, r23	; 0x02
    3c98:	8b 83       	std	Y+3, r24	; 0x03
    3c9a:	9c 83       	std	Y+4, r25	; 0x04
	degrees=degrees - 90;//phase shift 90 degrees
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca0:	ab 81       	ldd	r26, Y+3	; 0x03
    3ca2:	bc 81       	ldd	r27, Y+4	; 0x04
    3ca4:	8a 55       	subi	r24, 0x5A	; 90
    3ca6:	90 40       	sbci	r25, 0x00	; 0
    3ca8:	a0 40       	sbci	r26, 0x00	; 0
    3caa:	b0 40       	sbci	r27, 0x00	; 0
    3cac:	89 83       	std	Y+1, r24	; 0x01
    3cae:	9a 83       	std	Y+2, r25	; 0x02
    3cb0:	ab 83       	std	Y+3, r26	; 0x03
    3cb2:	bc 83       	std	Y+4, r27	; 0x04

	if (degrees >= 0)//positive angles
    3cb4:	89 81       	ldd	r24, Y+1	; 0x01
    3cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb8:	ab 81       	ldd	r26, Y+3	; 0x03
    3cba:	bc 81       	ldd	r27, Y+4	; 0x04
    3cbc:	bb 23       	and	r27, r27
    3cbe:	c4 f0       	brlt	.+48     	; 0x3cf0 <sin_SoR+0x6a>
		return angtable[degrees/5];
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc4:	ab 81       	ldd	r26, Y+3	; 0x03
    3cc6:	bc 81       	ldd	r27, Y+4	; 0x04
    3cc8:	25 e0       	ldi	r18, 0x05	; 5
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	40 e0       	ldi	r20, 0x00	; 0
    3cce:	50 e0       	ldi	r21, 0x00	; 0
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__divmodsi4>
    3cd8:	da 01       	movw	r26, r20
    3cda:	c9 01       	movw	r24, r18
    3cdc:	88 0f       	add	r24, r24
    3cde:	99 1f       	adc	r25, r25
    3ce0:	fc 01       	movw	r30, r24
    3ce2:	e0 50       	subi	r30, 0x00	; 0
    3ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ce6:	20 81       	ld	r18, Z
    3ce8:	31 81       	ldd	r19, Z+1	; 0x01
    3cea:	3e 83       	std	Y+6, r19	; 0x06
    3cec:	2d 83       	std	Y+5, r18	; 0x05
    3cee:	2c c0       	rjmp	.+88     	; 0x3d48 <sin_SoR+0xc2>
	else
		return -angtable[72-(-degrees)/5];
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf4:	ab 81       	ldd	r26, Y+3	; 0x03
    3cf6:	bc 81       	ldd	r27, Y+4	; 0x04
    3cf8:	b0 95       	com	r27
    3cfa:	a0 95       	com	r26
    3cfc:	90 95       	com	r25
    3cfe:	81 95       	neg	r24
    3d00:	9f 4f       	sbci	r25, 0xFF	; 255
    3d02:	af 4f       	sbci	r26, 0xFF	; 255
    3d04:	bf 4f       	sbci	r27, 0xFF	; 255
    3d06:	25 e0       	ldi	r18, 0x05	; 5
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e0       	ldi	r20, 0x00	; 0
    3d0c:	50 e0       	ldi	r21, 0x00	; 0
    3d0e:	bc 01       	movw	r22, r24
    3d10:	cd 01       	movw	r24, r26
    3d12:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__divmodsi4>
    3d16:	da 01       	movw	r26, r20
    3d18:	c9 01       	movw	r24, r18
    3d1a:	9c 01       	movw	r18, r24
    3d1c:	ad 01       	movw	r20, r26
    3d1e:	88 e4       	ldi	r24, 0x48	; 72
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	a0 e0       	ldi	r26, 0x00	; 0
    3d24:	b0 e0       	ldi	r27, 0x00	; 0
    3d26:	82 1b       	sub	r24, r18
    3d28:	93 0b       	sbc	r25, r19
    3d2a:	a4 0b       	sbc	r26, r20
    3d2c:	b5 0b       	sbc	r27, r21
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	fc 01       	movw	r30, r24
    3d34:	e0 50       	subi	r30, 0x00	; 0
    3d36:	fe 4f       	sbci	r31, 0xFE	; 254
    3d38:	80 81       	ld	r24, Z
    3d3a:	91 81       	ldd	r25, Z+1	; 0x01
    3d3c:	22 27       	eor	r18, r18
    3d3e:	33 27       	eor	r19, r19
    3d40:	28 1b       	sub	r18, r24
    3d42:	39 0b       	sbc	r19, r25
    3d44:	3e 83       	std	Y+6, r19	; 0x06
    3d46:	2d 83       	std	Y+5, r18	; 0x05
    3d48:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4a:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    3d4c:	26 96       	adiw	r28, 0x06	; 6
    3d4e:	0f b6       	in	r0, 0x3f	; 63
    3d50:	f8 94       	cli
    3d52:	de bf       	out	0x3e, r29	; 62
    3d54:	0f be       	out	0x3f, r0	; 63
    3d56:	cd bf       	out	0x3d, r28	; 61
    3d58:	cf 91       	pop	r28
    3d5a:	df 91       	pop	r29
    3d5c:	08 95       	ret

00003d5e <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
    3d5e:	0f 93       	push	r16
    3d60:	1f 93       	push	r17
    3d62:	df 93       	push	r29
    3d64:	cf 93       	push	r28
    3d66:	00 d0       	rcall	.+0      	; 0x3d68 <tan_SoR+0xa>
    3d68:	00 d0       	rcall	.+0      	; 0x3d6a <tan_SoR+0xc>
    3d6a:	00 d0       	rcall	.+0      	; 0x3d6c <tan_SoR+0xe>
    3d6c:	cd b7       	in	r28, 0x3d	; 61
    3d6e:	de b7       	in	r29, 0x3e	; 62
    3d70:	69 83       	std	Y+1, r22	; 0x01
    3d72:	7a 83       	std	Y+2, r23	; 0x02
    3d74:	8b 83       	std	Y+3, r24	; 0x03
    3d76:	9c 83       	std	Y+4, r25	; 0x04
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7c:	ab 81       	ldd	r26, Y+3	; 0x03
    3d7e:	bc 81       	ldd	r27, Y+4	; 0x04
    3d80:	8a 35       	cpi	r24, 0x5A	; 90
    3d82:	91 05       	cpc	r25, r1
    3d84:	a1 05       	cpc	r26, r1
    3d86:	b1 05       	cpc	r27, r1
    3d88:	21 f1       	breq	.+72     	; 0x3dd2 <tan_SoR+0x74>
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8e:	ab 81       	ldd	r26, Y+3	; 0x03
    3d90:	bc 81       	ldd	r27, Y+4	; 0x04
    3d92:	86 3a       	cpi	r24, 0xA6	; 166
    3d94:	2f ef       	ldi	r18, 0xFF	; 255
    3d96:	92 07       	cpc	r25, r18
    3d98:	2f ef       	ldi	r18, 0xFF	; 255
    3d9a:	a2 07       	cpc	r26, r18
    3d9c:	2f ef       	ldi	r18, 0xFF	; 255
    3d9e:	b2 07       	cpc	r27, r18
    3da0:	c1 f0       	breq	.+48     	; 0x3dd2 <tan_SoR+0x74>
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	9a 81       	ldd	r25, Y+2	; 0x02
    3da6:	ab 81       	ldd	r26, Y+3	; 0x03
    3da8:	bc 81       	ldd	r27, Y+4	; 0x04
    3daa:	8e 30       	cpi	r24, 0x0E	; 14
    3dac:	41 e0       	ldi	r20, 0x01	; 1
    3dae:	94 07       	cpc	r25, r20
    3db0:	40 e0       	ldi	r20, 0x00	; 0
    3db2:	a4 07       	cpc	r26, r20
    3db4:	40 e0       	ldi	r20, 0x00	; 0
    3db6:	b4 07       	cpc	r27, r20
    3db8:	61 f0       	breq	.+24     	; 0x3dd2 <tan_SoR+0x74>
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbe:	ab 81       	ldd	r26, Y+3	; 0x03
    3dc0:	bc 81       	ldd	r27, Y+4	; 0x04
    3dc2:	82 3f       	cpi	r24, 0xF2	; 242
    3dc4:	5e ef       	ldi	r21, 0xFE	; 254
    3dc6:	95 07       	cpc	r25, r21
    3dc8:	5f ef       	ldi	r21, 0xFF	; 255
    3dca:	a5 07       	cpc	r26, r21
    3dcc:	5f ef       	ldi	r21, 0xFF	; 255
    3dce:	b5 07       	cpc	r27, r21
    3dd0:	19 f4       	brne	.+6      	; 0x3dd8 <tan_SoR+0x7a>
		return 0;//what else should I return?!?!?
    3dd2:	1e 82       	std	Y+6, r1	; 0x06
    3dd4:	1d 82       	std	Y+5, r1	; 0x05
    3dd6:	24 c0       	rjmp	.+72     	; 0x3e20 <tan_SoR+0xc2>
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	9a 81       	ldd	r25, Y+2	; 0x02
    3ddc:	ab 81       	ldd	r26, Y+3	; 0x03
    3dde:	bc 81       	ldd	r27, Y+4	; 0x04
    3de0:	bc 01       	movw	r22, r24
    3de2:	cd 01       	movw	r24, r26
    3de4:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <sin_SoR>
    3de8:	8c 01       	movw	r16, r24
    3dea:	89 81       	ldd	r24, Y+1	; 0x01
    3dec:	9a 81       	ldd	r25, Y+2	; 0x02
    3dee:	ab 81       	ldd	r26, Y+3	; 0x03
    3df0:	bc 81       	ldd	r27, Y+4	; 0x04
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <cos_SoR>
    3dfa:	9c 01       	movw	r18, r24
    3dfc:	c8 01       	movw	r24, r16
    3dfe:	b9 01       	movw	r22, r18
    3e00:	0e 94 c5 29 	call	0x538a	; 0x538a <__divmodhi4>
    3e04:	cb 01       	movw	r24, r22
    3e06:	9c 01       	movw	r18, r24
    3e08:	22 0f       	add	r18, r18
    3e0a:	33 1f       	adc	r19, r19
    3e0c:	c9 01       	movw	r24, r18
    3e0e:	88 0f       	add	r24, r24
    3e10:	99 1f       	adc	r25, r25
    3e12:	88 0f       	add	r24, r24
    3e14:	99 1f       	adc	r25, r25
    3e16:	a9 01       	movw	r20, r18
    3e18:	48 0f       	add	r20, r24
    3e1a:	59 1f       	adc	r21, r25
    3e1c:	5e 83       	std	Y+6, r21	; 0x06
    3e1e:	4d 83       	std	Y+5, r20	; 0x05
    3e20:	8d 81       	ldd	r24, Y+5	; 0x05
    3e22:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    3e24:	26 96       	adiw	r28, 0x06	; 6
    3e26:	0f b6       	in	r0, 0x3f	; 63
    3e28:	f8 94       	cli
    3e2a:	de bf       	out	0x3e, r29	; 62
    3e2c:	0f be       	out	0x3f, r0	; 63
    3e2e:	cd bf       	out	0x3d, r28	; 61
    3e30:	cf 91       	pop	r28
    3e32:	df 91       	pop	r29
    3e34:	1f 91       	pop	r17
    3e36:	0f 91       	pop	r16
    3e38:	08 95       	ret

00003e3a <sharp_IR_interpret_GP2D12>:
//you can power this sensor directly from the Axon's ADC header row


//Sharp GP2D12 IR Range Sensor -  claims 10cm to 80cm (I got 8cm to 150cm)
int sharp_IR_interpret_GP2D12(int value)
	{
    3e3a:	df 93       	push	r29
    3e3c:	cf 93       	push	r28
    3e3e:	00 d0       	rcall	.+0      	; 0x3e40 <sharp_IR_interpret_GP2D12+0x6>
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
    3e44:	9a 83       	std	Y+2, r25	; 0x02
    3e46:	89 83       	std	Y+1, r24	; 0x01
	return 1384.4*pow(value,-.9988);
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4c:	aa 27       	eor	r26, r26
    3e4e:	97 fd       	sbrc	r25, 7
    3e50:	a0 95       	com	r26
    3e52:	ba 2f       	mov	r27, r26
    3e54:	bc 01       	movw	r22, r24
    3e56:	cd 01       	movw	r24, r26
    3e58:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	bc 01       	movw	r22, r24
    3e62:	cd 01       	movw	r24, r26
    3e64:	2b e5       	ldi	r18, 0x5B	; 91
    3e66:	31 eb       	ldi	r19, 0xB1	; 177
    3e68:	4f e7       	ldi	r20, 0x7F	; 127
    3e6a:	5f eb       	ldi	r21, 0xBF	; 191
    3e6c:	0e 94 2b 28 	call	0x5056	; 0x5056 <pow>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	bc 01       	movw	r22, r24
    3e76:	cd 01       	movw	r24, r26
    3e78:	2d ec       	ldi	r18, 0xCD	; 205
    3e7a:	3c e0       	ldi	r19, 0x0C	; 12
    3e7c:	4d ea       	ldi	r20, 0xAD	; 173
    3e7e:	54 e4       	ldi	r21, 0x44	; 68
    3e80:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	bc 01       	movw	r22, r24
    3e8a:	cd 01       	movw	r24, r26
    3e8c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
	}
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	cf 91       	pop	r28
    3e9a:	df 91       	pop	r29
    3e9c:	08 95       	ret

00003e9e <sharp_IR_interpret_GP2Y0A02YK>:
//Sharp GP2Y0A02YK IR Range Sensor - 20 cm to 150 cm
int sharp_IR_interpret_GP2Y0A02YK(int value)
	{
    3e9e:	df 93       	push	r29
    3ea0:	cf 93       	push	r28
    3ea2:	00 d0       	rcall	.+0      	; 0x3ea4 <sharp_IR_interpret_GP2Y0A02YK+0x6>
    3ea4:	cd b7       	in	r28, 0x3d	; 61
    3ea6:	de b7       	in	r29, 0x3e	; 62
    3ea8:	9a 83       	std	Y+2, r25	; 0x02
    3eaa:	89 83       	std	Y+1, r24	; 0x01
	return 1904.5*pow(value,-.89);
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb0:	aa 27       	eor	r26, r26
    3eb2:	97 fd       	sbrc	r25, 7
    3eb4:	a0 95       	com	r26
    3eb6:	ba 2f       	mov	r27, r26
    3eb8:	bc 01       	movw	r22, r24
    3eba:	cd 01       	movw	r24, r26
    3ebc:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	bc 01       	movw	r22, r24
    3ec6:	cd 01       	movw	r24, r26
    3ec8:	2a e0       	ldi	r18, 0x0A	; 10
    3eca:	37 ed       	ldi	r19, 0xD7	; 215
    3ecc:	43 e6       	ldi	r20, 0x63	; 99
    3ece:	5f eb       	ldi	r21, 0xBF	; 191
    3ed0:	0e 94 2b 28 	call	0x5056	; 0x5056 <pow>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
    3ed8:	bc 01       	movw	r22, r24
    3eda:	cd 01       	movw	r24, r26
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e1       	ldi	r19, 0x10	; 16
    3ee0:	4e ee       	ldi	r20, 0xEE	; 238
    3ee2:	54 e4       	ldi	r21, 0x44	; 68
    3ee4:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	bc 01       	movw	r22, r24
    3eee:	cd 01       	movw	r24, r26
    3ef0:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	cb 01       	movw	r24, r22
	}
    3ef8:	0f 90       	pop	r0
    3efa:	0f 90       	pop	r0
    3efc:	cf 91       	pop	r28
    3efe:	df 91       	pop	r29
    3f00:	08 95       	ret

00003f02 <sharp_IR_interpret_GP2Y0A21YK>:
//Sharp GP2Y0A21YK IR Range Sensor - 4 cm to 30 cm
int sharp_IR_interpret_GP2Y0A21YK(int value)
	{
    3f02:	df 93       	push	r29
    3f04:	cf 93       	push	r28
    3f06:	00 d0       	rcall	.+0      	; 0x3f08 <sharp_IR_interpret_GP2Y0A21YK+0x6>
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
    3f0c:	9a 83       	std	Y+2, r25	; 0x02
    3f0e:	89 83       	std	Y+1, r24	; 0x01
	return 739.38*pow(value,-.8105);
    3f10:	89 81       	ldd	r24, Y+1	; 0x01
    3f12:	9a 81       	ldd	r25, Y+2	; 0x02
    3f14:	aa 27       	eor	r26, r26
    3f16:	97 fd       	sbrc	r25, 7
    3f18:	a0 95       	com	r26
    3f1a:	ba 2f       	mov	r27, r26
    3f1c:	bc 01       	movw	r22, r24
    3f1e:	cd 01       	movw	r24, r26
    3f20:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    3f24:	dc 01       	movw	r26, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	bc 01       	movw	r22, r24
    3f2a:	cd 01       	movw	r24, r26
    3f2c:	2e ee       	ldi	r18, 0xEE	; 238
    3f2e:	3c e7       	ldi	r19, 0x7C	; 124
    3f30:	4f e4       	ldi	r20, 0x4F	; 79
    3f32:	5f eb       	ldi	r21, 0xBF	; 191
    3f34:	0e 94 2b 28 	call	0x5056	; 0x5056 <pow>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	bc 01       	movw	r22, r24
    3f3e:	cd 01       	movw	r24, r26
    3f40:	22 e5       	ldi	r18, 0x52	; 82
    3f42:	38 ed       	ldi	r19, 0xD8	; 216
    3f44:	48 e3       	ldi	r20, 0x38	; 56
    3f46:	54 e4       	ldi	r21, 0x44	; 68
    3f48:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    3f4c:	dc 01       	movw	r26, r24
    3f4e:	cb 01       	movw	r24, r22
    3f50:	bc 01       	movw	r22, r24
    3f52:	cd 01       	movw	r24, r26
    3f54:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
	}
    3f5c:	0f 90       	pop	r0
    3f5e:	0f 90       	pop	r0
    3f60:	cf 91       	pop	r28
    3f62:	df 91       	pop	r29
    3f64:	08 95       	ret

00003f66 <sharp_IR_interpret_GP2D120>:
//Sharp GP2D120 IR Range Sensor - 4 to 30 cm 
int sharp_IR_interpret_GP2D120(int value)
	{
    3f66:	df 93       	push	r29
    3f68:	cf 93       	push	r28
    3f6a:	00 d0       	rcall	.+0      	; 0x3f6c <sharp_IR_interpret_GP2D120+0x6>
    3f6c:	cd b7       	in	r28, 0x3d	; 61
    3f6e:	de b7       	in	r29, 0x3e	; 62
    3f70:	9a 83       	std	Y+2, r25	; 0x02
    3f72:	89 83       	std	Y+1, r24	; 0x01
	return 509.88*pow(value,-.9154);
    3f74:	89 81       	ldd	r24, Y+1	; 0x01
    3f76:	9a 81       	ldd	r25, Y+2	; 0x02
    3f78:	aa 27       	eor	r26, r26
    3f7a:	97 fd       	sbrc	r25, 7
    3f7c:	a0 95       	com	r26
    3f7e:	ba 2f       	mov	r27, r26
    3f80:	bc 01       	movw	r22, r24
    3f82:	cd 01       	movw	r24, r26
    3f84:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	28 ea       	ldi	r18, 0xA8	; 168
    3f92:	37 e5       	ldi	r19, 0x57	; 87
    3f94:	4a e6       	ldi	r20, 0x6A	; 106
    3f96:	5f eb       	ldi	r21, 0xBF	; 191
    3f98:	0e 94 2b 28 	call	0x5056	; 0x5056 <pow>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	bc 01       	movw	r22, r24
    3fa2:	cd 01       	movw	r24, r26
    3fa4:	24 ea       	ldi	r18, 0xA4	; 164
    3fa6:	30 ef       	ldi	r19, 0xF0	; 240
    3fa8:	4e ef       	ldi	r20, 0xFE	; 254
    3faa:	53 e4       	ldi	r21, 0x43	; 67
    3fac:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	bc 01       	movw	r22, r24
    3fb6:	cd 01       	movw	r24, r26
    3fb8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
	}
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	08 95       	ret

00003fca <sharp_IR_interpret_GP2D15>:
//Sharp GP2D15 IR Range Sensor - 10cm to 80cm  
int sharp_IR_interpret_GP2D15(int value)
	{
    3fca:	df 93       	push	r29
    3fcc:	cf 93       	push	r28
    3fce:	00 d0       	rcall	.+0      	; 0x3fd0 <sharp_IR_interpret_GP2D15+0x6>
    3fd0:	cd b7       	in	r28, 0x3d	; 61
    3fd2:	de b7       	in	r29, 0x3e	; 62
    3fd4:	9a 83       	std	Y+2, r25	; 0x02
    3fd6:	89 83       	std	Y+1, r24	; 0x01
	return 736.21*pow(value,-.7922);
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	9a 81       	ldd	r25, Y+2	; 0x02
    3fdc:	aa 27       	eor	r26, r26
    3fde:	97 fd       	sbrc	r25, 7
    3fe0:	a0 95       	com	r26
    3fe2:	ba 2f       	mov	r27, r26
    3fe4:	bc 01       	movw	r22, r24
    3fe6:	cd 01       	movw	r24, r26
    3fe8:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	bc 01       	movw	r22, r24
    3ff2:	cd 01       	movw	r24, r26
    3ff4:	2f e9       	ldi	r18, 0x9F	; 159
    3ff6:	3d ec       	ldi	r19, 0xCD	; 205
    3ff8:	4a e4       	ldi	r20, 0x4A	; 74
    3ffa:	5f eb       	ldi	r21, 0xBF	; 191
    3ffc:	0e 94 2b 28 	call	0x5056	; 0x5056 <pow>
    4000:	dc 01       	movw	r26, r24
    4002:	cb 01       	movw	r24, r22
    4004:	bc 01       	movw	r22, r24
    4006:	cd 01       	movw	r24, r26
    4008:	21 e7       	ldi	r18, 0x71	; 113
    400a:	3d e0       	ldi	r19, 0x0D	; 13
    400c:	48 e3       	ldi	r20, 0x38	; 56
    400e:	54 e4       	ldi	r21, 0x44	; 68
    4010:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	bc 01       	movw	r22, r24
    401a:	cd 01       	movw	r24, r26
    401c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
	}
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	cf 91       	pop	r28
    402a:	df 91       	pop	r29
    402c:	08 95       	ret

0000402e <accelerometer_ACCM3D>:
//ACCM3D for more info, see:
//http://www.dimensionengineering.com/DE-ACCM3D.htm
//you can power this sensor directly from the Axon's 5V ADC header row
//converts ADC value to degrees
int accelerometer_ACCM3D(int value)
	{
    402e:	df 93       	push	r29
    4030:	cf 93       	push	r28
    4032:	00 d0       	rcall	.+0      	; 0x4034 <accelerometer_ACCM3D+0x6>
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	9a 83       	std	Y+2, r25	; 0x02
    403a:	89 83       	std	Y+1, r24	; 0x01
	return (8.1818*value-8.1818);
    403c:	89 81       	ldd	r24, Y+1	; 0x01
    403e:	9a 81       	ldd	r25, Y+2	; 0x02
    4040:	aa 27       	eor	r26, r26
    4042:	97 fd       	sbrc	r25, 7
    4044:	a0 95       	com	r26
    4046:	ba 2f       	mov	r27, r26
    4048:	bc 01       	movw	r22, r24
    404a:	cd 01       	movw	r24, r26
    404c:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    4050:	dc 01       	movw	r26, r24
    4052:	cb 01       	movw	r24, r22
    4054:	bc 01       	movw	r22, r24
    4056:	cd 01       	movw	r24, r26
    4058:	27 ea       	ldi	r18, 0xA7	; 167
    405a:	38 ee       	ldi	r19, 0xE8	; 232
    405c:	42 e0       	ldi	r20, 0x02	; 2
    405e:	51 e4       	ldi	r21, 0x41	; 65
    4060:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	bc 01       	movw	r22, r24
    406a:	cd 01       	movw	r24, r26
    406c:	27 ea       	ldi	r18, 0xA7	; 167
    406e:	38 ee       	ldi	r19, 0xE8	; 232
    4070:	42 e0       	ldi	r20, 0x02	; 2
    4072:	51 e4       	ldi	r21, 0x41	; 65
    4074:	0e 94 10 26 	call	0x4c20	; 0x4c20 <__subsf3>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	bc 01       	movw	r22, r24
    407e:	cd 01       	movw	r24, r26
    4080:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
	}
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
    408c:	cf 91       	pop	r28
    408e:	df 91       	pop	r29
    4090:	08 95       	ret

00004092 <accelerometer_SEN00741>:
//SEN-00741 for more info, see:
//http://www.sparkfun.com/commerce/product_info.php?products_id=741
//http://www.sparkfun.com/datasheets/Components/ADXL330_0.pdf
//use the 3.3V output on the Axon to power this sensor (giving it 5V will fry it!)
int accelerometer_SEN00741(int value)
	{
    4092:	df 93       	push	r29
    4094:	cf 93       	push	r28
    4096:	00 d0       	rcall	.+0      	; 0x4098 <accelerometer_SEN00741+0x6>
    4098:	cd b7       	in	r28, 0x3d	; 61
    409a:	de b7       	in	r29, 0x3e	; 62
    409c:	9a 83       	std	Y+2, r25	; 0x02
    409e:	89 83       	std	Y+1, r24	; 0x01
	return (8.1818*value-8.1818);
    40a0:	89 81       	ldd	r24, Y+1	; 0x01
    40a2:	9a 81       	ldd	r25, Y+2	; 0x02
    40a4:	aa 27       	eor	r26, r26
    40a6:	97 fd       	sbrc	r25, 7
    40a8:	a0 95       	com	r26
    40aa:	ba 2f       	mov	r27, r26
    40ac:	bc 01       	movw	r22, r24
    40ae:	cd 01       	movw	r24, r26
    40b0:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	bc 01       	movw	r22, r24
    40ba:	cd 01       	movw	r24, r26
    40bc:	27 ea       	ldi	r18, 0xA7	; 167
    40be:	38 ee       	ldi	r19, 0xE8	; 232
    40c0:	42 e0       	ldi	r20, 0x02	; 2
    40c2:	51 e4       	ldi	r21, 0x41	; 65
    40c4:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	bc 01       	movw	r22, r24
    40ce:	cd 01       	movw	r24, r26
    40d0:	27 ea       	ldi	r18, 0xA7	; 167
    40d2:	38 ee       	ldi	r19, 0xE8	; 232
    40d4:	42 e0       	ldi	r20, 0x02	; 2
    40d6:	51 e4       	ldi	r21, 0x41	; 65
    40d8:	0e 94 10 26 	call	0x4c20	; 0x4c20 <__subsf3>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	bc 01       	movw	r22, r24
    40e2:	cd 01       	movw	r24, r26
    40e4:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
	}
    40ec:	0f 90       	pop	r0
    40ee:	0f 90       	pop	r0
    40f0:	cf 91       	pop	r28
    40f2:	df 91       	pop	r29
    40f4:	08 95       	ret

000040f6 <gyro_SEN00741>:
//http://www.sparkfun.com/datasheets/Components/IDG-300_Datasheet.pdf
//use the 3.3V output on the Axon to power this sensor (giving it 5V will fry it!)
//converts ADC value to degrees
//2 mV/deg/second, effectively linear at 1%
int gyro_SEN00741(int value)
	{
    40f6:	df 93       	push	r29
    40f8:	cf 93       	push	r28
    40fa:	00 d0       	rcall	.+0      	; 0x40fc <gyro_SEN00741+0x6>
    40fc:	cd b7       	in	r28, 0x3d	; 61
    40fe:	de b7       	in	r29, 0x3e	; 62
    4100:	9a 83       	std	Y+2, r25	; 0x02
    4102:	89 83       	std	Y+1, r24	; 0x01
	return (15*value-180);
    4104:	29 81       	ldd	r18, Y+1	; 0x01
    4106:	3a 81       	ldd	r19, Y+2	; 0x02
    4108:	c9 01       	movw	r24, r18
    410a:	88 0f       	add	r24, r24
    410c:	99 1f       	adc	r25, r25
    410e:	82 0f       	add	r24, r18
    4110:	93 1f       	adc	r25, r19
    4112:	9c 01       	movw	r18, r24
    4114:	22 0f       	add	r18, r18
    4116:	33 1f       	adc	r19, r19
    4118:	22 0f       	add	r18, r18
    411a:	33 1f       	adc	r19, r19
    411c:	82 0f       	add	r24, r18
    411e:	93 1f       	adc	r25, r19
    4120:	84 5b       	subi	r24, 0xB4	; 180
    4122:	90 40       	sbci	r25, 0x00	; 0
	}
    4124:	0f 90       	pop	r0
    4126:	0f 90       	pop	r0
    4128:	cf 91       	pop	r28
    412a:	df 91       	pop	r29
    412c:	08 95       	ret

0000412e <sonar_MaxSonar>:
/******************SONAR******************/
//LV_MaxSonar_EZ1: http://www.maxbotix.com/uploads/LV-MaxSonar-EZ1-Datasheet.pdf
//you can power these sensors directly from the Axon's 5V ADC header row
//A supply of 5V yields ~9.8mV/in for all EZ versions
int sonar_MaxSonar(int value)
	{
    412e:	df 93       	push	r29
    4130:	cf 93       	push	r28
    4132:	00 d0       	rcall	.+0      	; 0x4134 <sonar_MaxSonar+0x6>
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
    4138:	9a 83       	std	Y+2, r25	; 0x02
    413a:	89 83       	std	Y+1, r24	; 0x01
	return (50.01*value-51.02);
    413c:	89 81       	ldd	r24, Y+1	; 0x01
    413e:	9a 81       	ldd	r25, Y+2	; 0x02
    4140:	aa 27       	eor	r26, r26
    4142:	97 fd       	sbrc	r25, 7
    4144:	a0 95       	com	r26
    4146:	ba 2f       	mov	r27, r26
    4148:	bc 01       	movw	r22, r24
    414a:	cd 01       	movw	r24, r26
    414c:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	bc 01       	movw	r22, r24
    4156:	cd 01       	movw	r24, r26
    4158:	2d e3       	ldi	r18, 0x3D	; 61
    415a:	3a e0       	ldi	r19, 0x0A	; 10
    415c:	48 e4       	ldi	r20, 0x48	; 72
    415e:	52 e4       	ldi	r21, 0x42	; 66
    4160:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	bc 01       	movw	r22, r24
    416a:	cd 01       	movw	r24, r26
    416c:	2b e7       	ldi	r18, 0x7B	; 123
    416e:	34 e1       	ldi	r19, 0x14	; 20
    4170:	4c e4       	ldi	r20, 0x4C	; 76
    4172:	52 e4       	ldi	r21, 0x42	; 66
    4174:	0e 94 10 26 	call	0x4c20	; 0x4c20 <__subsf3>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	bc 01       	movw	r22, r24
    417e:	cd 01       	movw	r24, r26
    4180:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
	}
    4188:	0f 90       	pop	r0
    418a:	0f 90       	pop	r0
    418c:	cf 91       	pop	r28
    418e:	df 91       	pop	r29
    4190:	08 95       	ret

00004192 <sonar_Ping>:
//http://www.societyofrobots.com/member_tutorials/node/174
//http://www.societyofrobots.com/robotforum/index.php?topic=5123.msg40008
//http://www.societyofrobots.com/robotforum/index.php?topic=4656.30
//uses timer0
int sonar_Ping(void)
	{
    4192:	df 93       	push	r29
    4194:	cf 93       	push	r28
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
	#define PINGPIN    3          // assign a pin to the Ping Sensor
	#define DDR        DDRA
	#define PORT       PORTA
	#define PIN        PINA

	PORT_ON(DDR, PINGPIN);   // Switch PingPin to OUPUT
    419a:	a1 e2       	ldi	r26, 0x21	; 33
    419c:	b0 e0       	ldi	r27, 0x00	; 0
    419e:	e1 e2       	ldi	r30, 0x21	; 33
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	80 81       	ld	r24, Z
    41a4:	88 60       	ori	r24, 0x08	; 8
    41a6:	8c 93       	st	X, r24
	// ------Trigger Pulse--------------
	PORT_OFF(PORT, PINGPIN);   // Bring PingPin low before starting trigger pulse
    41a8:	a2 e2       	ldi	r26, 0x22	; 34
    41aa:	b0 e0       	ldi	r27, 0x00	; 0
    41ac:	e2 e2       	ldi	r30, 0x22	; 34
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	80 81       	ld	r24, Z
    41b2:	87 7f       	andi	r24, 0xF7	; 247
    41b4:	8c 93       	st	X, r24
	delay_us(2);        //  Wait for 2 microseconds
    41b6:	82 e0       	ldi	r24, 0x02	; 2
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <delay_us>
	PORT_ON(PORT, PINGPIN);    // Bring PingPin High for 5us according to spec sheet.
    41be:	a2 e2       	ldi	r26, 0x22	; 34
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	e2 e2       	ldi	r30, 0x22	; 34
    41c4:	f0 e0       	ldi	r31, 0x00	; 0
    41c6:	80 81       	ld	r24, Z
    41c8:	88 60       	ori	r24, 0x08	; 8
    41ca:	8c 93       	st	X, r24
	delay_us(5);       // Wait for 5 microseconds
    41cc:	85 e0       	ldi	r24, 0x05	; 5
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <delay_us>
	PORT_OFF(PORT, PINGPIN);; //  Bring PingPin Low and standby
    41d4:	a2 e2       	ldi	r26, 0x22	; 34
    41d6:	b0 e0       	ldi	r27, 0x00	; 0
    41d8:	e2 e2       	ldi	r30, 0x22	; 34
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	80 81       	ld	r24, Z
    41de:	87 7f       	andi	r24, 0xF7	; 247
    41e0:	8c 93       	st	X, r24
	//--------End Trigger Pulse---------------------
	FLIP_PORT(DDR, PINGPIN);   // Switch PingPin to INPUT
    41e2:	a1 e2       	ldi	r26, 0x21	; 33
    41e4:	b0 e0       	ldi	r27, 0x00	; 0
    41e6:	e1 e2       	ldi	r30, 0x21	; 33
    41e8:	f0 e0       	ldi	r31, 0x00	; 0
    41ea:	90 81       	ld	r25, Z
    41ec:	88 e0       	ldi	r24, 0x08	; 8
    41ee:	89 27       	eor	r24, r25
    41f0:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIN, PINGPIN);     // Loop until the the PingPin goes high  (macro found in sfr_def.h)
    41f2:	e0 e2       	ldi	r30, 0x20	; 32
    41f4:	f0 e0       	ldi	r31, 0x00	; 0
    41f6:	80 81       	ld	r24, Z
    41f8:	88 2f       	mov	r24, r24
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	88 70       	andi	r24, 0x08	; 8
    41fe:	90 70       	andi	r25, 0x00	; 0
    4200:	00 97       	sbiw	r24, 0x00	; 0
    4202:	b9 f3       	breq	.-18     	; 0x41f2 <sonar_Ping+0x60>
	//clears timer, reset overflow counter
	reset_timer0();       //reset timer 0
    4204:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <reset_timer0>
	loop_until_bit_is_clear(PIN, PINGPIN);     // Loop until the the PingPin goes low  (macro found in sfr_def.h)
    4208:	e0 e2       	ldi	r30, 0x20	; 32
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	80 81       	ld	r24, Z
    420e:	88 2f       	mov	r24, r24
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	88 70       	andi	r24, 0x08	; 8
    4214:	90 70       	andi	r25, 0x00	; 0
    4216:	00 97       	sbiw	r24, 0x00	; 0
    4218:	b9 f7       	brne	.-18     	; 0x4208 <sonar_Ping+0x76>
	//read timer0's overflow counter
	//255 is count before overflow, dependent on clock
	
	return (get_timer0_overflow()*255+TCNT0) * 2.068965517;//elapsed time x conversion
    421a:	0e 94 45 0b 	call	0x168a	; 0x168a <get_timer0_overflow>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	2f ef       	ldi	r18, 0xFF	; 255
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	40 e0       	ldi	r20, 0x00	; 0
    4228:	50 e0       	ldi	r21, 0x00	; 0
    422a:	bc 01       	movw	r22, r24
    422c:	cd 01       	movw	r24, r26
    422e:	0e 94 92 29 	call	0x5324	; 0x5324 <__mulsi3>
    4232:	9b 01       	movw	r18, r22
    4234:	ac 01       	movw	r20, r24
    4236:	e6 e4       	ldi	r30, 0x46	; 70
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	80 81       	ld	r24, Z
    423c:	88 2f       	mov	r24, r24
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	a0 e0       	ldi	r26, 0x00	; 0
    4242:	b0 e0       	ldi	r27, 0x00	; 0
    4244:	82 0f       	add	r24, r18
    4246:	93 1f       	adc	r25, r19
    4248:	a4 1f       	adc	r26, r20
    424a:	b5 1f       	adc	r27, r21
    424c:	bc 01       	movw	r22, r24
    424e:	cd 01       	movw	r24, r26
    4250:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__floatunsisf>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	bc 01       	movw	r22, r24
    425a:	cd 01       	movw	r24, r26
    425c:	2e ee       	ldi	r18, 0xEE	; 238
    425e:	39 e6       	ldi	r19, 0x69	; 105
    4260:	44 e0       	ldi	r20, 0x04	; 4
    4262:	50 e4       	ldi	r21, 0x40	; 64
    4264:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	bc 01       	movw	r22, r24
    426e:	cd 01       	movw	r24, r26
    4270:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
	}
    4278:	cf 91       	pop	r28
    427a:	df 91       	pop	r29
    427c:	08 95       	ret

0000427e <pressure_phidget>:
//http://www.robotshop.us/PDF/Phidgets-Sensors.pdf
//you can power these sensors directly from the Axon's 5V ADC header row
//(unless otherwise specified)
//Gas Pressure Sensor
int pressure_phidget(int value)
	{
    427e:	df 93       	push	r29
    4280:	cf 93       	push	r28
    4282:	00 d0       	rcall	.+0      	; 0x4284 <pressure_phidget+0x6>
    4284:	cd b7       	in	r28, 0x3d	; 61
    4286:	de b7       	in	r29, 0x3e	; 62
    4288:	9a 83       	std	Y+2, r25	; 0x02
    428a:	89 83       	std	Y+1, r24	; 0x01
	return (value*0.25 + 10);//returns in kilopascals
    428c:	89 81       	ldd	r24, Y+1	; 0x01
    428e:	9a 81       	ldd	r25, Y+2	; 0x02
    4290:	aa 27       	eor	r26, r26
    4292:	97 fd       	sbrc	r25, 7
    4294:	a0 95       	com	r26
    4296:	ba 2f       	mov	r27, r26
    4298:	bc 01       	movw	r22, r24
    429a:	cd 01       	movw	r24, r26
    429c:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    42a0:	dc 01       	movw	r26, r24
    42a2:	cb 01       	movw	r24, r22
    42a4:	bc 01       	movw	r22, r24
    42a6:	cd 01       	movw	r24, r26
    42a8:	20 e0       	ldi	r18, 0x00	; 0
    42aa:	30 e0       	ldi	r19, 0x00	; 0
    42ac:	40 e8       	ldi	r20, 0x80	; 128
    42ae:	5e e3       	ldi	r21, 0x3E	; 62
    42b0:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	bc 01       	movw	r22, r24
    42ba:	cd 01       	movw	r24, r26
    42bc:	20 e0       	ldi	r18, 0x00	; 0
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	40 e2       	ldi	r20, 0x20	; 32
    42c2:	51 e4       	ldi	r21, 0x41	; 65
    42c4:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__addsf3>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	bc 01       	movw	r22, r24
    42ce:	cd 01       	movw	r24, r26
    42d0:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
	}
    42d8:	0f 90       	pop	r0
    42da:	0f 90       	pop	r0
    42dc:	cf 91       	pop	r28
    42de:	df 91       	pop	r29
    42e0:	08 95       	ret

000042e2 <voltage_phidget>:
//Voltage Sensor
int voltage_phidget(int value)
	{
    42e2:	df 93       	push	r29
    42e4:	cf 93       	push	r28
    42e6:	00 d0       	rcall	.+0      	; 0x42e8 <voltage_phidget+0x6>
    42e8:	cd b7       	in	r28, 0x3d	; 61
    42ea:	de b7       	in	r29, 0x3e	; 62
    42ec:	9a 83       	std	Y+2, r25	; 0x02
    42ee:	89 83       	std	Y+1, r24	; 0x01
	return ((value - 500) * 0.06);//returns in volts
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	9a 81       	ldd	r25, Y+2	; 0x02
    42f4:	84 5f       	subi	r24, 0xF4	; 244
    42f6:	91 40       	sbci	r25, 0x01	; 1
    42f8:	aa 27       	eor	r26, r26
    42fa:	97 fd       	sbrc	r25, 7
    42fc:	a0 95       	com	r26
    42fe:	ba 2f       	mov	r27, r26
    4300:	bc 01       	movw	r22, r24
    4302:	cd 01       	movw	r24, r26
    4304:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	bc 01       	movw	r22, r24
    430e:	cd 01       	movw	r24, r26
    4310:	2f e8       	ldi	r18, 0x8F	; 143
    4312:	32 ec       	ldi	r19, 0xC2	; 194
    4314:	45 e7       	ldi	r20, 0x75	; 117
    4316:	5d e3       	ldi	r21, 0x3D	; 61
    4318:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    431c:	dc 01       	movw	r26, r24
    431e:	cb 01       	movw	r24, r22
    4320:	bc 01       	movw	r22, r24
    4322:	cd 01       	movw	r24, r26
    4324:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    4328:	dc 01       	movw	r26, r24
    432a:	cb 01       	movw	r24, r22
	}
    432c:	0f 90       	pop	r0
    432e:	0f 90       	pop	r0
    4330:	cf 91       	pop	r28
    4332:	df 91       	pop	r29
    4334:	08 95       	ret

00004336 <magnetic_phidget>:
//Magnetic Sensor
int magnetic_phidget(int value)
	{
    4336:	df 93       	push	r29
    4338:	cf 93       	push	r28
    433a:	00 d0       	rcall	.+0      	; 0x433c <magnetic_phidget+0x6>
    433c:	cd b7       	in	r28, 0x3d	; 61
    433e:	de b7       	in	r29, 0x3e	; 62
    4340:	9a 83       	std	Y+2, r25	; 0x02
    4342:	89 83       	std	Y+1, r24	; 0x01
	return (500 - value);//returns in gauss
    4344:	24 ef       	ldi	r18, 0xF4	; 244
    4346:	31 e0       	ldi	r19, 0x01	; 1
    4348:	89 81       	ldd	r24, Y+1	; 0x01
    434a:	9a 81       	ldd	r25, Y+2	; 0x02
    434c:	a9 01       	movw	r20, r18
    434e:	48 1b       	sub	r20, r24
    4350:	59 0b       	sbc	r21, r25
    4352:	ca 01       	movw	r24, r20
	}
    4354:	0f 90       	pop	r0
    4356:	0f 90       	pop	r0
    4358:	cf 91       	pop	r28
    435a:	df 91       	pop	r29
    435c:	08 95       	ret

0000435e <temperature_phidget>:
//Temperature Sensor
int temperature_phidget(int value)
	{
    435e:	df 93       	push	r29
    4360:	cf 93       	push	r28
    4362:	00 d0       	rcall	.+0      	; 0x4364 <temperature_phidget+0x6>
    4364:	00 d0       	rcall	.+0      	; 0x4366 <temperature_phidget+0x8>
    4366:	cd b7       	in	r28, 0x3d	; 61
    4368:	de b7       	in	r29, 0x3e	; 62
    436a:	9a 83       	std	Y+2, r25	; 0x02
    436c:	89 83       	std	Y+1, r24	; 0x01
	return ((value-200)/4);//returns in celsius
    436e:	89 81       	ldd	r24, Y+1	; 0x01
    4370:	9a 81       	ldd	r25, Y+2	; 0x02
    4372:	88 5c       	subi	r24, 0xC8	; 200
    4374:	90 40       	sbci	r25, 0x00	; 0
    4376:	9c 83       	std	Y+4, r25	; 0x04
    4378:	8b 83       	std	Y+3, r24	; 0x03
    437a:	8b 81       	ldd	r24, Y+3	; 0x03
    437c:	9c 81       	ldd	r25, Y+4	; 0x04
    437e:	99 23       	and	r25, r25
    4380:	2c f4       	brge	.+10     	; 0x438c <temperature_phidget+0x2e>
    4382:	8b 81       	ldd	r24, Y+3	; 0x03
    4384:	9c 81       	ldd	r25, Y+4	; 0x04
    4386:	03 96       	adiw	r24, 0x03	; 3
    4388:	9c 83       	std	Y+4, r25	; 0x04
    438a:	8b 83       	std	Y+3, r24	; 0x03
    438c:	8b 81       	ldd	r24, Y+3	; 0x03
    438e:	9c 81       	ldd	r25, Y+4	; 0x04
    4390:	95 95       	asr	r25
    4392:	87 95       	ror	r24
    4394:	95 95       	asr	r25
    4396:	87 95       	ror	r24
	}
    4398:	0f 90       	pop	r0
    439a:	0f 90       	pop	r0
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	cf 91       	pop	r28
    43a2:	df 91       	pop	r29
    43a4:	08 95       	ret

000043a6 <currentDC50_phidget>:
//50A Current Sensor
int currentDC50_phidget(int value)
	{
    43a6:	df 93       	push	r29
    43a8:	cf 93       	push	r28
    43aa:	00 d0       	rcall	.+0      	; 0x43ac <currentDC50_phidget+0x6>
    43ac:	cd b7       	in	r28, 0x3d	; 61
    43ae:	de b7       	in	r29, 0x3e	; 62
    43b0:	9a 83       	std	Y+2, r25	; 0x02
    43b2:	89 83       	std	Y+1, r24	; 0x01
	return ((value-500)* 0.125);//returns in amps
    43b4:	89 81       	ldd	r24, Y+1	; 0x01
    43b6:	9a 81       	ldd	r25, Y+2	; 0x02
    43b8:	84 5f       	subi	r24, 0xF4	; 244
    43ba:	91 40       	sbci	r25, 0x01	; 1
    43bc:	aa 27       	eor	r26, r26
    43be:	97 fd       	sbrc	r25, 7
    43c0:	a0 95       	com	r26
    43c2:	ba 2f       	mov	r27, r26
    43c4:	bc 01       	movw	r22, r24
    43c6:	cd 01       	movw	r24, r26
    43c8:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
    43d0:	bc 01       	movw	r22, r24
    43d2:	cd 01       	movw	r24, r26
    43d4:	20 e0       	ldi	r18, 0x00	; 0
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	40 e0       	ldi	r20, 0x00	; 0
    43da:	5e e3       	ldi	r21, 0x3E	; 62
    43dc:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    43e0:	dc 01       	movw	r26, r24
    43e2:	cb 01       	movw	r24, r22
    43e4:	bc 01       	movw	r22, r24
    43e6:	cd 01       	movw	r24, r26
    43e8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
	}
    43f0:	0f 90       	pop	r0
    43f2:	0f 90       	pop	r0
    43f4:	cf 91       	pop	r28
    43f6:	df 91       	pop	r29
    43f8:	08 95       	ret

000043fa <currentAC50_phidget>:
//50A Current Sensor
int currentAC50_phidget(int value)
	{
    43fa:	df 93       	push	r29
    43fc:	cf 93       	push	r28
    43fe:	00 d0       	rcall	.+0      	; 0x4400 <currentAC50_phidget+0x6>
    4400:	cd b7       	in	r28, 0x3d	; 61
    4402:	de b7       	in	r29, 0x3e	; 62
    4404:	9a 83       	std	Y+2, r25	; 0x02
    4406:	89 83       	std	Y+1, r24	; 0x01
	return (value*0.0625);//returns in amps
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	9a 81       	ldd	r25, Y+2	; 0x02
    440c:	aa 27       	eor	r26, r26
    440e:	97 fd       	sbrc	r25, 7
    4410:	a0 95       	com	r26
    4412:	ba 2f       	mov	r27, r26
    4414:	bc 01       	movw	r22, r24
    4416:	cd 01       	movw	r24, r26
    4418:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	bc 01       	movw	r22, r24
    4422:	cd 01       	movw	r24, r26
    4424:	20 e0       	ldi	r18, 0x00	; 0
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	40 e8       	ldi	r20, 0x80	; 128
    442a:	5d e3       	ldi	r21, 0x3D	; 61
    442c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	bc 01       	movw	r22, r24
    4436:	cd 01       	movw	r24, r26
    4438:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
	}
    4440:	0f 90       	pop	r0
    4442:	0f 90       	pop	r0
    4444:	cf 91       	pop	r28
    4446:	df 91       	pop	r29
    4448:	08 95       	ret

0000444a <currentDC20_phidget>:
//20A Current Sensor
int currentDC20_phidget(int value)
	{
    444a:	df 93       	push	r29
    444c:	cf 93       	push	r28
    444e:	00 d0       	rcall	.+0      	; 0x4450 <currentDC20_phidget+0x6>
    4450:	cd b7       	in	r28, 0x3d	; 61
    4452:	de b7       	in	r29, 0x3e	; 62
    4454:	9a 83       	std	Y+2, r25	; 0x02
    4456:	89 83       	std	Y+1, r24	; 0x01
	return ((value-500)* 0.05);//returns in amps
    4458:	89 81       	ldd	r24, Y+1	; 0x01
    445a:	9a 81       	ldd	r25, Y+2	; 0x02
    445c:	84 5f       	subi	r24, 0xF4	; 244
    445e:	91 40       	sbci	r25, 0x01	; 1
    4460:	aa 27       	eor	r26, r26
    4462:	97 fd       	sbrc	r25, 7
    4464:	a0 95       	com	r26
    4466:	ba 2f       	mov	r27, r26
    4468:	bc 01       	movw	r22, r24
    446a:	cd 01       	movw	r24, r26
    446c:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
    4474:	bc 01       	movw	r22, r24
    4476:	cd 01       	movw	r24, r26
    4478:	2d ec       	ldi	r18, 0xCD	; 205
    447a:	3c ec       	ldi	r19, 0xCC	; 204
    447c:	4c e4       	ldi	r20, 0x4C	; 76
    447e:	5d e3       	ldi	r21, 0x3D	; 61
    4480:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    4484:	dc 01       	movw	r26, r24
    4486:	cb 01       	movw	r24, r22
    4488:	bc 01       	movw	r22, r24
    448a:	cd 01       	movw	r24, r26
    448c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
	}
    4494:	0f 90       	pop	r0
    4496:	0f 90       	pop	r0
    4498:	cf 91       	pop	r28
    449a:	df 91       	pop	r29
    449c:	08 95       	ret

0000449e <currentAC20_phidget>:
//20A Current Sensor
int currentAC20_phidget(int value)
	{
    449e:	df 93       	push	r29
    44a0:	cf 93       	push	r28
    44a2:	00 d0       	rcall	.+0      	; 0x44a4 <currentAC20_phidget+0x6>
    44a4:	cd b7       	in	r28, 0x3d	; 61
    44a6:	de b7       	in	r29, 0x3e	; 62
    44a8:	9a 83       	std	Y+2, r25	; 0x02
    44aa:	89 83       	std	Y+1, r24	; 0x01
	return (value*0.025);//returns in amps
    44ac:	89 81       	ldd	r24, Y+1	; 0x01
    44ae:	9a 81       	ldd	r25, Y+2	; 0x02
    44b0:	aa 27       	eor	r26, r26
    44b2:	97 fd       	sbrc	r25, 7
    44b4:	a0 95       	com	r26
    44b6:	ba 2f       	mov	r27, r26
    44b8:	bc 01       	movw	r22, r24
    44ba:	cd 01       	movw	r24, r26
    44bc:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
    44c4:	bc 01       	movw	r22, r24
    44c6:	cd 01       	movw	r24, r26
    44c8:	2d ec       	ldi	r18, 0xCD	; 205
    44ca:	3c ec       	ldi	r19, 0xCC	; 204
    44cc:	4c ec       	ldi	r20, 0xCC	; 204
    44ce:	5c e3       	ldi	r21, 0x3C	; 60
    44d0:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	bc 01       	movw	r22, r24
    44da:	cd 01       	movw	r24, r26
    44dc:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
	}
    44e4:	0f 90       	pop	r0
    44e6:	0f 90       	pop	r0
    44e8:	cf 91       	pop	r28
    44ea:	df 91       	pop	r29
    44ec:	08 95       	ret

000044ee <humidity_phidget>:
//Humidity Sensor
int humidity_phidget(int value)
	{
    44ee:	df 93       	push	r29
    44f0:	cf 93       	push	r28
    44f2:	00 d0       	rcall	.+0      	; 0x44f4 <humidity_phidget+0x6>
    44f4:	cd b7       	in	r28, 0x3d	; 61
    44f6:	de b7       	in	r29, 0x3e	; 62
    44f8:	9a 83       	std	Y+2, r25	; 0x02
    44fa:	89 83       	std	Y+1, r24	; 0x01
	return ((value*0.1946) - 41.98);//returns in RH (in %)
    44fc:	89 81       	ldd	r24, Y+1	; 0x01
    44fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4500:	aa 27       	eor	r26, r26
    4502:	97 fd       	sbrc	r25, 7
    4504:	a0 95       	com	r26
    4506:	ba 2f       	mov	r27, r26
    4508:	bc 01       	movw	r22, r24
    450a:	cd 01       	movw	r24, r26
    450c:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__floatsisf>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	bc 01       	movw	r22, r24
    4516:	cd 01       	movw	r24, r26
    4518:	29 e3       	ldi	r18, 0x39	; 57
    451a:	35 e4       	ldi	r19, 0x45	; 69
    451c:	47 e4       	ldi	r20, 0x47	; 71
    451e:	5e e3       	ldi	r21, 0x3E	; 62
    4520:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__mulsf3>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
    4528:	bc 01       	movw	r22, r24
    452a:	cd 01       	movw	r24, r26
    452c:	25 e8       	ldi	r18, 0x85	; 133
    452e:	3b ee       	ldi	r19, 0xEB	; 235
    4530:	47 e2       	ldi	r20, 0x27	; 39
    4532:	52 e4       	ldi	r21, 0x42	; 66
    4534:	0e 94 10 26 	call	0x4c20	; 0x4c20 <__subsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	bc 01       	movw	r22, r24
    453e:	cd 01       	movw	r24, r26
    4540:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__fixsfsi>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
	}
    4548:	0f 90       	pop	r0
    454a:	0f 90       	pop	r0
    454c:	cf 91       	pop	r28
    454e:	df 91       	pop	r29
    4550:	08 95       	ret

00004552 <sabertooth>:
//Character 0 will shut down both motors

//example: sabertooth(38,200);//send command to motors

void sabertooth(int m1, int m2)
	{
    4552:	df 93       	push	r29
    4554:	cf 93       	push	r28
    4556:	00 d0       	rcall	.+0      	; 0x4558 <sabertooth+0x6>
    4558:	00 d0       	rcall	.+0      	; 0x455a <sabertooth+0x8>
    455a:	cd b7       	in	r28, 0x3d	; 61
    455c:	de b7       	in	r29, 0x3e	; 62
    455e:	9a 83       	std	Y+2, r25	; 0x02
    4560:	89 83       	std	Y+1, r24	; 0x01
    4562:	7c 83       	std	Y+4, r23	; 0x04
    4564:	6b 83       	std	Y+3, r22	; 0x03
	//rprintfInit(uart2SendByte);//select uart2
	uartSetBaudRate(2, 38400);//select baud (see page 13/14 of datasheet)
    4566:	82 e0       	ldi	r24, 0x02	; 2
    4568:	40 e0       	ldi	r20, 0x00	; 0
    456a:	56 e9       	ldi	r21, 0x96	; 150
    456c:	60 e0       	ldi	r22, 0x00	; 0
    456e:	70 e0       	ldi	r23, 0x00	; 0
    4570:	0e 94 43 05 	call	0xa86	; 0xa86 <uartSetBaudRate>
	uart2SendByte(m1);//send a command for motor 1
    4574:	89 81       	ldd	r24, Y+1	; 0x01
    4576:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uart2SendByte>
	uart2SendByte(m2);//send a command for motor 2
    457a:	8b 81       	ldd	r24, Y+3	; 0x03
    457c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uart2SendByte>
	}
    4580:	0f 90       	pop	r0
    4582:	0f 90       	pop	r0
    4584:	0f 90       	pop	r0
    4586:	0f 90       	pop	r0
    4588:	cf 91       	pop	r28
    458a:	df 91       	pop	r29
    458c:	08 95       	ret

0000458e <syren>:
//http://www.dimensionengineering.com/datasheets/SyRen10-25.pdf

//0 represents full reverse and 255 represents full forward

void syren(int m1)
	{
    458e:	df 93       	push	r29
    4590:	cf 93       	push	r28
    4592:	00 d0       	rcall	.+0      	; 0x4594 <syren+0x6>
    4594:	cd b7       	in	r28, 0x3d	; 61
    4596:	de b7       	in	r29, 0x3e	; 62
    4598:	9a 83       	std	Y+2, r25	; 0x02
    459a:	89 83       	std	Y+1, r24	; 0x01
	//rprintfInit(uart2SendByte);//select uart2
	uartSetBaudRate(2, 38400);//select baud (see page 14 of datasheet)
    459c:	82 e0       	ldi	r24, 0x02	; 2
    459e:	40 e0       	ldi	r20, 0x00	; 0
    45a0:	56 e9       	ldi	r21, 0x96	; 150
    45a2:	60 e0       	ldi	r22, 0x00	; 0
    45a4:	70 e0       	ldi	r23, 0x00	; 0
    45a6:	0e 94 43 05 	call	0xa86	; 0xa86 <uartSetBaudRate>
	uart2SendByte(m1);//send a command for motor 1
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uart2SendByte>
	}
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	cf 91       	pop	r28
    45b6:	df 91       	pop	r29
    45b8:	08 95       	ret

000045ba <axon_DAQ>:

//this file contains code to convert the Axon into a DAQ (data acquisition device)


void axon_DAQ(void)
	{
    45ba:	0f 93       	push	r16
    45bc:	1f 93       	push	r17
    45be:	df 93       	push	r29
    45c0:	cf 93       	push	r28
    45c2:	cd b7       	in	r28, 0x3d	; 61
    45c4:	de b7       	in	r29, 0x3e	; 62
    45c6:	a0 97       	sbiw	r28, 0x20	; 32
    45c8:	0f b6       	in	r0, 0x3f	; 63
    45ca:	f8 94       	cli
    45cc:	de bf       	out	0x3e, r29	; 62
    45ce:	0f be       	out	0x3f, r0	; 63
    45d0:	cd bf       	out	0x3d, r28	; 61
	int a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;

	//select speed/accuracy of data conversion
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling, 32 default
    45d2:	85 e0       	ldi	r24, 0x05	; 5
    45d4:	0e 94 94 01 	call	0x328	; 0x328 <a2dSetPrescaler>
	// ADC_PRESCALE_DIV128		-> CPU clk/128

	while(1)
		{
		//clear timer
		reset_timer2();
    45d8:	0e 94 10 0c 	call	0x1820	; 0x1820 <reset_timer2>
		//add a delay here to slow it down
		//be careful that clock doesn't overflow!
		//delay_ms(1);

		//gather data
		a0=a2dConvert8bit(0);
    45dc:	80 e0       	ldi	r24, 0x00	; 0
    45de:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    45e2:	88 2f       	mov	r24, r24
    45e4:	90 e0       	ldi	r25, 0x00	; 0
    45e6:	98 a3       	std	Y+32, r25	; 0x20
    45e8:	8f 8f       	std	Y+31, r24	; 0x1f
		a1=a2dConvert8bit(1);
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    45f0:	88 2f       	mov	r24, r24
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	9e 8f       	std	Y+30, r25	; 0x1e
    45f6:	8d 8f       	std	Y+29, r24	; 0x1d
		a2=a2dConvert8bit(2);
    45f8:	82 e0       	ldi	r24, 0x02	; 2
    45fa:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    45fe:	88 2f       	mov	r24, r24
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	9c 8f       	std	Y+28, r25	; 0x1c
    4604:	8b 8f       	std	Y+27, r24	; 0x1b
		a3=a2dConvert8bit(3);
    4606:	83 e0       	ldi	r24, 0x03	; 3
    4608:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    460c:	88 2f       	mov	r24, r24
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	9a 8f       	std	Y+26, r25	; 0x1a
    4612:	89 8f       	std	Y+25, r24	; 0x19
		a4=a2dConvert8bit(4);
    4614:	84 e0       	ldi	r24, 0x04	; 4
    4616:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    461a:	88 2f       	mov	r24, r24
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	98 8f       	std	Y+24, r25	; 0x18
    4620:	8f 8b       	std	Y+23, r24	; 0x17
		a5=a2dConvert8bit(5);
    4622:	85 e0       	ldi	r24, 0x05	; 5
    4624:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4628:	88 2f       	mov	r24, r24
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	9e 8b       	std	Y+22, r25	; 0x16
    462e:	8d 8b       	std	Y+21, r24	; 0x15
		a6=a2dConvert8bit(6);
    4630:	86 e0       	ldi	r24, 0x06	; 6
    4632:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4636:	88 2f       	mov	r24, r24
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	9c 8b       	std	Y+20, r25	; 0x14
    463c:	8b 8b       	std	Y+19, r24	; 0x13
		a7=a2dConvert8bit(7);
    463e:	87 e0       	ldi	r24, 0x07	; 7
    4640:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4644:	88 2f       	mov	r24, r24
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	9a 8b       	std	Y+18, r25	; 0x12
    464a:	89 8b       	std	Y+17, r24	; 0x11
		a8=a2dConvert8bit(8);
    464c:	88 e0       	ldi	r24, 0x08	; 8
    464e:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4652:	88 2f       	mov	r24, r24
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	98 8b       	std	Y+16, r25	; 0x10
    4658:	8f 87       	std	Y+15, r24	; 0x0f
		a9=a2dConvert8bit(9);
    465a:	89 e0       	ldi	r24, 0x09	; 9
    465c:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4660:	88 2f       	mov	r24, r24
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	9e 87       	std	Y+14, r25	; 0x0e
    4666:	8d 87       	std	Y+13, r24	; 0x0d
		a10=a2dConvert8bit(10);
    4668:	8a e0       	ldi	r24, 0x0A	; 10
    466a:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    466e:	88 2f       	mov	r24, r24
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	9c 87       	std	Y+12, r25	; 0x0c
    4674:	8b 87       	std	Y+11, r24	; 0x0b
		a11=a2dConvert8bit(11);
    4676:	8b e0       	ldi	r24, 0x0B	; 11
    4678:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    467c:	88 2f       	mov	r24, r24
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	9a 87       	std	Y+10, r25	; 0x0a
    4682:	89 87       	std	Y+9, r24	; 0x09
		a12=a2dConvert8bit(12);
    4684:	8c e0       	ldi	r24, 0x0C	; 12
    4686:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    468a:	88 2f       	mov	r24, r24
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	98 87       	std	Y+8, r25	; 0x08
    4690:	8f 83       	std	Y+7, r24	; 0x07
		a13=a2dConvert8bit(13);
    4692:	8d e0       	ldi	r24, 0x0D	; 13
    4694:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4698:	88 2f       	mov	r24, r24
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	9e 83       	std	Y+6, r25	; 0x06
    469e:	8d 83       	std	Y+5, r24	; 0x05
		a14=a2dConvert8bit(14);
    46a0:	8e e0       	ldi	r24, 0x0E	; 14
    46a2:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    46a6:	88 2f       	mov	r24, r24
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	9c 83       	std	Y+4, r25	; 0x04
    46ac:	8b 83       	std	Y+3, r24	; 0x03
		a15=a2dConvert8bit(15);
    46ae:	8f e0       	ldi	r24, 0x0F	; 15
    46b0:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    46b4:	88 2f       	mov	r24, r24
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	9a 83       	std	Y+2, r25	; 0x02
    46ba:	89 83       	std	Y+1, r24	; 0x01

		//report data, add time stamp and overflow count at end of data
		rprintf("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,get_timer2_counter());
    46bc:	04 ea       	ldi	r16, 0xA4	; 164
    46be:	11 e0       	ldi	r17, 0x01	; 1
    46c0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <get_timer2_counter>
    46c4:	28 2f       	mov	r18, r24
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	8d b7       	in	r24, 0x3d	; 61
    46ca:	9e b7       	in	r25, 0x3e	; 62
    46cc:	85 97       	sbiw	r24, 0x25	; 37
    46ce:	0f b6       	in	r0, 0x3f	; 63
    46d0:	f8 94       	cli
    46d2:	9e bf       	out	0x3e, r25	; 62
    46d4:	0f be       	out	0x3f, r0	; 63
    46d6:	8d bf       	out	0x3d, r24	; 61
    46d8:	ed b7       	in	r30, 0x3d	; 61
    46da:	fe b7       	in	r31, 0x3e	; 62
    46dc:	31 96       	adiw	r30, 0x01	; 1
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	80 83       	st	Z, r24
    46e2:	12 83       	std	Z+2, r17	; 0x02
    46e4:	01 83       	std	Z+1, r16	; 0x01
    46e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46e8:	98 a1       	ldd	r25, Y+32	; 0x20
    46ea:	94 83       	std	Z+4, r25	; 0x04
    46ec:	83 83       	std	Z+3, r24	; 0x03
    46ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46f2:	96 83       	std	Z+6, r25	; 0x06
    46f4:	85 83       	std	Z+5, r24	; 0x05
    46f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46fa:	90 87       	std	Z+8, r25	; 0x08
    46fc:	87 83       	std	Z+7, r24	; 0x07
    46fe:	89 8d       	ldd	r24, Y+25	; 0x19
    4700:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4702:	92 87       	std	Z+10, r25	; 0x0a
    4704:	81 87       	std	Z+9, r24	; 0x09
    4706:	8f 89       	ldd	r24, Y+23	; 0x17
    4708:	98 8d       	ldd	r25, Y+24	; 0x18
    470a:	94 87       	std	Z+12, r25	; 0x0c
    470c:	83 87       	std	Z+11, r24	; 0x0b
    470e:	8d 89       	ldd	r24, Y+21	; 0x15
    4710:	9e 89       	ldd	r25, Y+22	; 0x16
    4712:	96 87       	std	Z+14, r25	; 0x0e
    4714:	85 87       	std	Z+13, r24	; 0x0d
    4716:	8b 89       	ldd	r24, Y+19	; 0x13
    4718:	9c 89       	ldd	r25, Y+20	; 0x14
    471a:	90 8b       	std	Z+16, r25	; 0x10
    471c:	87 87       	std	Z+15, r24	; 0x0f
    471e:	89 89       	ldd	r24, Y+17	; 0x11
    4720:	9a 89       	ldd	r25, Y+18	; 0x12
    4722:	92 8b       	std	Z+18, r25	; 0x12
    4724:	81 8b       	std	Z+17, r24	; 0x11
    4726:	8f 85       	ldd	r24, Y+15	; 0x0f
    4728:	98 89       	ldd	r25, Y+16	; 0x10
    472a:	94 8b       	std	Z+20, r25	; 0x14
    472c:	83 8b       	std	Z+19, r24	; 0x13
    472e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4730:	9e 85       	ldd	r25, Y+14	; 0x0e
    4732:	96 8b       	std	Z+22, r25	; 0x16
    4734:	85 8b       	std	Z+21, r24	; 0x15
    4736:	8b 85       	ldd	r24, Y+11	; 0x0b
    4738:	9c 85       	ldd	r25, Y+12	; 0x0c
    473a:	90 8f       	std	Z+24, r25	; 0x18
    473c:	87 8b       	std	Z+23, r24	; 0x17
    473e:	89 85       	ldd	r24, Y+9	; 0x09
    4740:	9a 85       	ldd	r25, Y+10	; 0x0a
    4742:	92 8f       	std	Z+26, r25	; 0x1a
    4744:	81 8f       	std	Z+25, r24	; 0x19
    4746:	8f 81       	ldd	r24, Y+7	; 0x07
    4748:	98 85       	ldd	r25, Y+8	; 0x08
    474a:	94 8f       	std	Z+28, r25	; 0x1c
    474c:	83 8f       	std	Z+27, r24	; 0x1b
    474e:	8d 81       	ldd	r24, Y+5	; 0x05
    4750:	9e 81       	ldd	r25, Y+6	; 0x06
    4752:	96 8f       	std	Z+30, r25	; 0x1e
    4754:	85 8f       	std	Z+29, r24	; 0x1d
    4756:	8b 81       	ldd	r24, Y+3	; 0x03
    4758:	9c 81       	ldd	r25, Y+4	; 0x04
    475a:	90 a3       	std	Z+32, r25	; 0x20
    475c:	87 8f       	std	Z+31, r24	; 0x1f
    475e:	89 81       	ldd	r24, Y+1	; 0x01
    4760:	9a 81       	ldd	r25, Y+2	; 0x02
    4762:	92 a3       	std	Z+34, r25	; 0x22
    4764:	81 a3       	std	Z+33, r24	; 0x21
    4766:	34 a3       	std	Z+36, r19	; 0x24
    4768:	23 a3       	std	Z+35, r18	; 0x23
    476a:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rprintf1RamRom>
    476e:	8d b7       	in	r24, 0x3d	; 61
    4770:	9e b7       	in	r25, 0x3e	; 62
    4772:	85 96       	adiw	r24, 0x25	; 37
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	f8 94       	cli
    4778:	9e bf       	out	0x3e, r25	; 62
    477a:	0f be       	out	0x3f, r0	; 63
    477c:	8d bf       	out	0x3d, r24	; 61
    477e:	2c cf       	rjmp	.-424    	; 0x45d8 <axon_DAQ+0x1e>

00004780 <axon_DAQ_fast>:
		}
	}

void axon_DAQ_fast(void)
	{
    4780:	df 93       	push	r29
    4782:	cf 93       	push	r28
    4784:	00 d0       	rcall	.+0      	; 0x4786 <axon_DAQ_fast+0x6>
    4786:	cd b7       	in	r28, 0x3d	; 61
    4788:	de b7       	in	r29, 0x3e	; 62
	int a9;

	//select speed/accuracy of data conversion
	a2dSetPrescaler(ADC_PRESCALE_DIV4); // configure ADC scaling
    478a:	82 e0       	ldi	r24, 0x02	; 2
    478c:	0e 94 94 01 	call	0x328	; 0x328 <a2dSetPrescaler>

	while(1)
		{
		//gather data
		a9=a2dConvert8bit(9);
    4790:	89 e0       	ldi	r24, 0x09	; 9
    4792:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4796:	88 2f       	mov	r24, r24
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	9a 83       	std	Y+2, r25	; 0x02
    479c:	89 83       	std	Y+1, r24	; 0x01

		//report data, add time stamp and overflow count at end of data
		rprintf("%d\r\n",a9);
    479e:	2c ed       	ldi	r18, 0xDC	; 220
    47a0:	31 e0       	ldi	r19, 0x01	; 1
    47a2:	00 d0       	rcall	.+0      	; 0x47a4 <axon_DAQ_fast+0x24>
    47a4:	00 d0       	rcall	.+0      	; 0x47a6 <axon_DAQ_fast+0x26>
    47a6:	0f 92       	push	r0
    47a8:	ed b7       	in	r30, 0x3d	; 61
    47aa:	fe b7       	in	r31, 0x3e	; 62
    47ac:	31 96       	adiw	r30, 0x01	; 1
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	80 83       	st	Z, r24
    47b2:	32 83       	std	Z+2, r19	; 0x02
    47b4:	21 83       	std	Z+1, r18	; 0x01
    47b6:	89 81       	ldd	r24, Y+1	; 0x01
    47b8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ba:	94 83       	std	Z+4, r25	; 0x04
    47bc:	83 83       	std	Z+3, r24	; 0x03
    47be:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rprintf1RamRom>
    47c2:	0f 90       	pop	r0
    47c4:	0f 90       	pop	r0
    47c6:	0f 90       	pop	r0
    47c8:	0f 90       	pop	r0
    47ca:	0f 90       	pop	r0
    47cc:	e1 cf       	rjmp	.-62     	; 0x4790 <axon_DAQ_fast+0x10>

000047ce <control>:
void control()
{
    47ce:	df 93       	push	r29
    47d0:	cf 93       	push	r28
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
    47d6:	64 97       	sbiw	r28, 0x14	; 20
    47d8:	0f b6       	in	r0, 0x3f	; 63
    47da:	f8 94       	cli
    47dc:	de bf       	out	0x3e, r29	; 62
    47de:	0f be       	out	0x3f, r0	; 63
    47e0:	cd bf       	out	0x3d, r28	; 61
unsigned right_rotHi = 0;
    47e2:	1c 8a       	std	Y+20, r1	; 0x14
    47e4:	1b 8a       	std	Y+19, r1	; 0x13

unsigned right_rotLo = 0;
    47e6:	1a 8a       	std	Y+18, r1	; 0x12
    47e8:	19 8a       	std	Y+17, r1	; 0x11

int rightCount = 0;
    47ea:	18 8a       	std	Y+16, r1	; 0x10
    47ec:	1f 86       	std	Y+15, r1	; 0x0f

unsigned left_rotHi = 0;
    47ee:	1e 86       	std	Y+14, r1	; 0x0e
    47f0:	1d 86       	std	Y+13, r1	; 0x0d

unsigned left_rotLo = 0;
    47f2:	1c 86       	std	Y+12, r1	; 0x0c
    47f4:	1b 86       	std	Y+11, r1	; 0x0b

int leftCount = 0;
    47f6:	1a 86       	std	Y+10, r1	; 0x0a
    47f8:	19 86       	std	Y+9, r1	; 0x09

int right_rotState =a2dConvert8bit(0);//right rotations
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4800:	88 2f       	mov	r24, r24
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	98 87       	std	Y+8, r25	; 0x08
    4806:	8f 83       	std	Y+7, r24	; 0x07

//int  se1 =a2dConvert8bit(1);

int  right_direction =a2dConvert8bit(3);//right direction, forward = low, reverse = hi
    4808:	83 e0       	ldi	r24, 0x03	; 3
    480a:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    480e:	88 2f       	mov	r24, r24
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	9e 83       	std	Y+6, r25	; 0x06
    4814:	8d 83       	std	Y+5, r24	; 0x05

int  left_direction =a2dConvert8bit(7);//left direction, forward = hi, reverse = low
    4816:	87 e0       	ldi	r24, 0x07	; 7
    4818:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    481c:	88 2f       	mov	r24, r24
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	9c 83       	std	Y+4, r25	; 0x04
    4822:	8b 83       	std	Y+3, r24	; 0x03

int  left_rotState =a2dConvert8bit(8);//left rotations
    4824:	88 e0       	ldi	r24, 0x08	; 8
    4826:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    482a:	88 2f       	mov	r24, r24
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	9a 83       	std	Y+2, r25	; 0x02
    4830:	89 83       	std	Y+1, r24	; 0x01
    4832:	12 c1       	rjmp	.+548    	; 0x4a58 <control+0x28a>
//int  se5 =a2dConvert8bit(9);

while( uart1GetByte() != 'x')
{

    if( 0 <= right_rotState && 10 > right_rotState ) //if rotState is low
    4834:	8f 81       	ldd	r24, Y+7	; 0x07
    4836:	98 85       	ldd	r25, Y+8	; 0x08
    4838:	99 23       	and	r25, r25
    483a:	54 f0       	brlt	.+20     	; 0x4850 <control+0x82>
    483c:	8f 81       	ldd	r24, Y+7	; 0x07
    483e:	98 85       	ldd	r25, Y+8	; 0x08
    4840:	8a 30       	cpi	r24, 0x0A	; 10
    4842:	91 05       	cpc	r25, r1
    4844:	2c f4       	brge	.+10     	; 0x4850 <control+0x82>

    {

        right_rotLo++;
    4846:	89 89       	ldd	r24, Y+17	; 0x11
    4848:	9a 89       	ldd	r25, Y+18	; 0x12
    484a:	01 96       	adiw	r24, 0x01	; 1
    484c:	9a 8b       	std	Y+18, r25	; 0x12
    484e:	89 8b       	std	Y+17, r24	; 0x11

    } 

    if( 250 < right_rotState && 255 >= right_rotState ) //if rotState is high
    4850:	8f 81       	ldd	r24, Y+7	; 0x07
    4852:	98 85       	ldd	r25, Y+8	; 0x08
    4854:	8b 3f       	cpi	r24, 0xFB	; 251
    4856:	91 05       	cpc	r25, r1
    4858:	5c f0       	brlt	.+22     	; 0x4870 <control+0xa2>
    485a:	8f 81       	ldd	r24, Y+7	; 0x07
    485c:	98 85       	ldd	r25, Y+8	; 0x08
    485e:	8f 3f       	cpi	r24, 0xFF	; 255
    4860:	91 05       	cpc	r25, r1
    4862:	09 f0       	breq	.+2      	; 0x4866 <control+0x98>
    4864:	2c f4       	brge	.+10     	; 0x4870 <control+0xa2>

    {

        right_rotHi++;
    4866:	8b 89       	ldd	r24, Y+19	; 0x13
    4868:	9c 89       	ldd	r25, Y+20	; 0x14
    486a:	01 96       	adiw	r24, 0x01	; 1
    486c:	9c 8b       	std	Y+20, r25	; 0x14
    486e:	8b 8b       	std	Y+19, r24	; 0x13

    }

    if( 0 <= left_rotState &&  10 > left_rotState) //if rotState is low
    4870:	89 81       	ldd	r24, Y+1	; 0x01
    4872:	9a 81       	ldd	r25, Y+2	; 0x02
    4874:	99 23       	and	r25, r25
    4876:	54 f0       	brlt	.+20     	; 0x488c <control+0xbe>
    4878:	89 81       	ldd	r24, Y+1	; 0x01
    487a:	9a 81       	ldd	r25, Y+2	; 0x02
    487c:	8a 30       	cpi	r24, 0x0A	; 10
    487e:	91 05       	cpc	r25, r1
    4880:	2c f4       	brge	.+10     	; 0x488c <control+0xbe>

    {

        left_rotLo++;
    4882:	8b 85       	ldd	r24, Y+11	; 0x0b
    4884:	9c 85       	ldd	r25, Y+12	; 0x0c
    4886:	01 96       	adiw	r24, 0x01	; 1
    4888:	9c 87       	std	Y+12, r25	; 0x0c
    488a:	8b 87       	std	Y+11, r24	; 0x0b

    } 

    if( 250 < left_rotState &&  255 >=left_rotState) //if rotState is high
    488c:	89 81       	ldd	r24, Y+1	; 0x01
    488e:	9a 81       	ldd	r25, Y+2	; 0x02
    4890:	8b 3f       	cpi	r24, 0xFB	; 251
    4892:	91 05       	cpc	r25, r1
    4894:	5c f0       	brlt	.+22     	; 0x48ac <control+0xde>
    4896:	89 81       	ldd	r24, Y+1	; 0x01
    4898:	9a 81       	ldd	r25, Y+2	; 0x02
    489a:	8f 3f       	cpi	r24, 0xFF	; 255
    489c:	91 05       	cpc	r25, r1
    489e:	09 f0       	breq	.+2      	; 0x48a2 <control+0xd4>
    48a0:	2c f4       	brge	.+10     	; 0x48ac <control+0xde>

    {

        left_rotHi++;
    48a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    48a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    48a6:	01 96       	adiw	r24, 0x01	; 1
    48a8:	9e 87       	std	Y+14, r25	; 0x0e
    48aa:	8d 87       	std	Y+13, r24	; 0x0d

    }

//---------------------------

    if( right_rotLo > 0 && right_rotHi > 0)//if the encoder has seen both white and black
    48ac:	89 89       	ldd	r24, Y+17	; 0x11
    48ae:	9a 89       	ldd	r25, Y+18	; 0x12
    48b0:	00 97       	sbiw	r24, 0x00	; 0
    48b2:	31 f1       	breq	.+76     	; 0x4900 <control+0x132>
    48b4:	8b 89       	ldd	r24, Y+19	; 0x13
    48b6:	9c 89       	ldd	r25, Y+20	; 0x14
    48b8:	00 97       	sbiw	r24, 0x00	; 0
    48ba:	11 f1       	breq	.+68     	; 0x4900 <control+0x132>

    {

        if( 0 <= right_direction && right_direction < 10)
    48bc:	8d 81       	ldd	r24, Y+5	; 0x05
    48be:	9e 81       	ldd	r25, Y+6	; 0x06
    48c0:	99 23       	and	r25, r25
    48c2:	54 f0       	brlt	.+20     	; 0x48d8 <control+0x10a>
    48c4:	8d 81       	ldd	r24, Y+5	; 0x05
    48c6:	9e 81       	ldd	r25, Y+6	; 0x06
    48c8:	8a 30       	cpi	r24, 0x0A	; 10
    48ca:	91 05       	cpc	r25, r1
    48cc:	2c f4       	brge	.+10     	; 0x48d8 <control+0x10a>

        {

            rightCount++;
    48ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    48d0:	98 89       	ldd	r25, Y+16	; 0x10
    48d2:	01 96       	adiw	r24, 0x01	; 1
    48d4:	98 8b       	std	Y+16, r25	; 0x10
    48d6:	8f 87       	std	Y+15, r24	; 0x0f

        }

        if( 250 < right_direction && right_direction <= 255)
    48d8:	8d 81       	ldd	r24, Y+5	; 0x05
    48da:	9e 81       	ldd	r25, Y+6	; 0x06
    48dc:	8b 3f       	cpi	r24, 0xFB	; 251
    48de:	91 05       	cpc	r25, r1
    48e0:	5c f0       	brlt	.+22     	; 0x48f8 <control+0x12a>
    48e2:	8d 81       	ldd	r24, Y+5	; 0x05
    48e4:	9e 81       	ldd	r25, Y+6	; 0x06
    48e6:	8f 3f       	cpi	r24, 0xFF	; 255
    48e8:	91 05       	cpc	r25, r1
    48ea:	09 f0       	breq	.+2      	; 0x48ee <control+0x120>
    48ec:	2c f4       	brge	.+10     	; 0x48f8 <control+0x12a>

        {

            rightCount--;
    48ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    48f0:	98 89       	ldd	r25, Y+16	; 0x10
    48f2:	01 97       	sbiw	r24, 0x01	; 1
    48f4:	98 8b       	std	Y+16, r25	; 0x10
    48f6:	8f 87       	std	Y+15, r24	; 0x0f

        }

        right_rotLo = 0;
    48f8:	1a 8a       	std	Y+18, r1	; 0x12
    48fa:	19 8a       	std	Y+17, r1	; 0x11

        right_rotHi = 0;
    48fc:	1c 8a       	std	Y+20, r1	; 0x14
    48fe:	1b 8a       	std	Y+19, r1	; 0x13

    }

    if( left_rotLo > 0 && left_rotHi > 0)//if the encoder has seen both white and black
    4900:	8b 85       	ldd	r24, Y+11	; 0x0b
    4902:	9c 85       	ldd	r25, Y+12	; 0x0c
    4904:	00 97       	sbiw	r24, 0x00	; 0
    4906:	31 f1       	breq	.+76     	; 0x4954 <control+0x186>
    4908:	8d 85       	ldd	r24, Y+13	; 0x0d
    490a:	9e 85       	ldd	r25, Y+14	; 0x0e
    490c:	00 97       	sbiw	r24, 0x00	; 0
    490e:	11 f1       	breq	.+68     	; 0x4954 <control+0x186>

    {

        if( 0 <= left_direction && left_direction  < 10)
    4910:	8b 81       	ldd	r24, Y+3	; 0x03
    4912:	9c 81       	ldd	r25, Y+4	; 0x04
    4914:	99 23       	and	r25, r25
    4916:	54 f0       	brlt	.+20     	; 0x492c <control+0x15e>
    4918:	8b 81       	ldd	r24, Y+3	; 0x03
    491a:	9c 81       	ldd	r25, Y+4	; 0x04
    491c:	8a 30       	cpi	r24, 0x0A	; 10
    491e:	91 05       	cpc	r25, r1
    4920:	2c f4       	brge	.+10     	; 0x492c <control+0x15e>

        {

            leftCount--;
    4922:	89 85       	ldd	r24, Y+9	; 0x09
    4924:	9a 85       	ldd	r25, Y+10	; 0x0a
    4926:	01 97       	sbiw	r24, 0x01	; 1
    4928:	9a 87       	std	Y+10, r25	; 0x0a
    492a:	89 87       	std	Y+9, r24	; 0x09

        }

        if( 250 < left_direction && left_direction  <= 255)
    492c:	8b 81       	ldd	r24, Y+3	; 0x03
    492e:	9c 81       	ldd	r25, Y+4	; 0x04
    4930:	8b 3f       	cpi	r24, 0xFB	; 251
    4932:	91 05       	cpc	r25, r1
    4934:	5c f0       	brlt	.+22     	; 0x494c <control+0x17e>
    4936:	8b 81       	ldd	r24, Y+3	; 0x03
    4938:	9c 81       	ldd	r25, Y+4	; 0x04
    493a:	8f 3f       	cpi	r24, 0xFF	; 255
    493c:	91 05       	cpc	r25, r1
    493e:	09 f0       	breq	.+2      	; 0x4942 <control+0x174>
    4940:	2c f4       	brge	.+10     	; 0x494c <control+0x17e>

        {

            leftCount++;
    4942:	89 85       	ldd	r24, Y+9	; 0x09
    4944:	9a 85       	ldd	r25, Y+10	; 0x0a
    4946:	01 96       	adiw	r24, 0x01	; 1
    4948:	9a 87       	std	Y+10, r25	; 0x0a
    494a:	89 87       	std	Y+9, r24	; 0x09

        }

        left_rotLo = 0;
    494c:	1c 86       	std	Y+12, r1	; 0x0c
    494e:	1b 86       	std	Y+11, r1	; 0x0b

        left_rotHi = 0;
    4950:	1e 86       	std	Y+14, r1	; 0x0e
    4952:	1d 86       	std	Y+13, r1	; 0x0d

    }

   rprintf(" %d, %d, %d, %d \n %d %d %d %d \n",left_rotLo,left_rotHi, left_direction,leftCount,right_rotLo,right_rotHi,right_direction,rightCount);
    4954:	28 e1       	ldi	r18, 0x18	; 24
    4956:	32 e0       	ldi	r19, 0x02	; 2
    4958:	8d b7       	in	r24, 0x3d	; 61
    495a:	9e b7       	in	r25, 0x3e	; 62
    495c:	43 97       	sbiw	r24, 0x13	; 19
    495e:	0f b6       	in	r0, 0x3f	; 63
    4960:	f8 94       	cli
    4962:	9e bf       	out	0x3e, r25	; 62
    4964:	0f be       	out	0x3f, r0	; 63
    4966:	8d bf       	out	0x3d, r24	; 61
    4968:	ed b7       	in	r30, 0x3d	; 61
    496a:	fe b7       	in	r31, 0x3e	; 62
    496c:	31 96       	adiw	r30, 0x01	; 1
    496e:	81 e0       	ldi	r24, 0x01	; 1
    4970:	80 83       	st	Z, r24
    4972:	32 83       	std	Z+2, r19	; 0x02
    4974:	21 83       	std	Z+1, r18	; 0x01
    4976:	8b 85       	ldd	r24, Y+11	; 0x0b
    4978:	9c 85       	ldd	r25, Y+12	; 0x0c
    497a:	94 83       	std	Z+4, r25	; 0x04
    497c:	83 83       	std	Z+3, r24	; 0x03
    497e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4980:	9e 85       	ldd	r25, Y+14	; 0x0e
    4982:	96 83       	std	Z+6, r25	; 0x06
    4984:	85 83       	std	Z+5, r24	; 0x05
    4986:	8b 81       	ldd	r24, Y+3	; 0x03
    4988:	9c 81       	ldd	r25, Y+4	; 0x04
    498a:	90 87       	std	Z+8, r25	; 0x08
    498c:	87 83       	std	Z+7, r24	; 0x07
    498e:	89 85       	ldd	r24, Y+9	; 0x09
    4990:	9a 85       	ldd	r25, Y+10	; 0x0a
    4992:	92 87       	std	Z+10, r25	; 0x0a
    4994:	81 87       	std	Z+9, r24	; 0x09
    4996:	89 89       	ldd	r24, Y+17	; 0x11
    4998:	9a 89       	ldd	r25, Y+18	; 0x12
    499a:	94 87       	std	Z+12, r25	; 0x0c
    499c:	83 87       	std	Z+11, r24	; 0x0b
    499e:	8b 89       	ldd	r24, Y+19	; 0x13
    49a0:	9c 89       	ldd	r25, Y+20	; 0x14
    49a2:	96 87       	std	Z+14, r25	; 0x0e
    49a4:	85 87       	std	Z+13, r24	; 0x0d
    49a6:	8d 81       	ldd	r24, Y+5	; 0x05
    49a8:	9e 81       	ldd	r25, Y+6	; 0x06
    49aa:	90 8b       	std	Z+16, r25	; 0x10
    49ac:	87 87       	std	Z+15, r24	; 0x0f
    49ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    49b0:	98 89       	ldd	r25, Y+16	; 0x10
    49b2:	92 8b       	std	Z+18, r25	; 0x12
    49b4:	81 8b       	std	Z+17, r24	; 0x11
    49b6:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rprintf1RamRom>
    49ba:	8d b7       	in	r24, 0x3d	; 61
    49bc:	9e b7       	in	r25, 0x3e	; 62
    49be:	43 96       	adiw	r24, 0x13	; 19
    49c0:	0f b6       	in	r0, 0x3f	; 63
    49c2:	f8 94       	cli
    49c4:	9e bf       	out	0x3e, r25	; 62
    49c6:	0f be       	out	0x3f, r0	; 63
    49c8:	8d bf       	out	0x3d, r24	; 61
   rprintf("LEFT DIR:%d, LEFT DST:%d, RIGHT DIR:%d, RIGHT DST:%d\n,",left_direction,leftCount,right_direction, rightCount);
    49ca:	21 ee       	ldi	r18, 0xE1	; 225
    49cc:	31 e0       	ldi	r19, 0x01	; 1
    49ce:	8d b7       	in	r24, 0x3d	; 61
    49d0:	9e b7       	in	r25, 0x3e	; 62
    49d2:	0b 97       	sbiw	r24, 0x0b	; 11
    49d4:	0f b6       	in	r0, 0x3f	; 63
    49d6:	f8 94       	cli
    49d8:	9e bf       	out	0x3e, r25	; 62
    49da:	0f be       	out	0x3f, r0	; 63
    49dc:	8d bf       	out	0x3d, r24	; 61
    49de:	ed b7       	in	r30, 0x3d	; 61
    49e0:	fe b7       	in	r31, 0x3e	; 62
    49e2:	31 96       	adiw	r30, 0x01	; 1
    49e4:	81 e0       	ldi	r24, 0x01	; 1
    49e6:	80 83       	st	Z, r24
    49e8:	32 83       	std	Z+2, r19	; 0x02
    49ea:	21 83       	std	Z+1, r18	; 0x01
    49ec:	8b 81       	ldd	r24, Y+3	; 0x03
    49ee:	9c 81       	ldd	r25, Y+4	; 0x04
    49f0:	94 83       	std	Z+4, r25	; 0x04
    49f2:	83 83       	std	Z+3, r24	; 0x03
    49f4:	89 85       	ldd	r24, Y+9	; 0x09
    49f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49f8:	96 83       	std	Z+6, r25	; 0x06
    49fa:	85 83       	std	Z+5, r24	; 0x05
    49fc:	8d 81       	ldd	r24, Y+5	; 0x05
    49fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4a00:	90 87       	std	Z+8, r25	; 0x08
    4a02:	87 83       	std	Z+7, r24	; 0x07
    4a04:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a06:	98 89       	ldd	r25, Y+16	; 0x10
    4a08:	92 87       	std	Z+10, r25	; 0x0a
    4a0a:	81 87       	std	Z+9, r24	; 0x09
    4a0c:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rprintf1RamRom>
    4a10:	8d b7       	in	r24, 0x3d	; 61
    4a12:	9e b7       	in	r25, 0x3e	; 62
    4a14:	0b 96       	adiw	r24, 0x0b	; 11
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	f8 94       	cli
    4a1a:	9e bf       	out	0x3e, r25	; 62
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	8d bf       	out	0x3d, r24	; 61

    

    right_rotState =a2dConvert8bit(0);//right rotations
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4a26:	88 2f       	mov	r24, r24
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	98 87       	std	Y+8, r25	; 0x08
    4a2c:	8f 83       	std	Y+7, r24	; 0x07

    right_direction =a2dConvert8bit(3);//right direction, forward = low, reverse = hi
    4a2e:	83 e0       	ldi	r24, 0x03	; 3
    4a30:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4a34:	88 2f       	mov	r24, r24
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	9e 83       	std	Y+6, r25	; 0x06
    4a3a:	8d 83       	std	Y+5, r24	; 0x05

    left_direction =a2dConvert8bit(7);//left direction, forward = hi, reverse = low
    4a3c:	87 e0       	ldi	r24, 0x07	; 7
    4a3e:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4a42:	88 2f       	mov	r24, r24
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	9c 83       	std	Y+4, r25	; 0x04
    4a48:	8b 83       	std	Y+3, r24	; 0x03

    left_rotState =a2dConvert8bit(8);//left rotations
    4a4a:	88 e0       	ldi	r24, 0x08	; 8
    4a4c:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4a50:	88 2f       	mov	r24, r24
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	9a 83       	std	Y+2, r25	; 0x02
    4a56:	89 83       	std	Y+1, r24	; 0x01

int  left_rotState =a2dConvert8bit(8);//left rotations

//int  se5 =a2dConvert8bit(9);

while( uart1GetByte() != 'x')
    4a58:	0e 94 a6 06 	call	0xd4c	; 0xd4c <uart1GetByte>
    4a5c:	88 37       	cpi	r24, 0x78	; 120
    4a5e:	91 05       	cpc	r25, r1
    4a60:	09 f0       	breq	.+2      	; 0x4a64 <control+0x296>
    4a62:	e8 ce       	rjmp	.-560    	; 0x4834 <control+0x66>
        if(motorRightSpeed<607||motorRightSpeed>640)
        {
            wheel_Right(motorRightSpeed);
        }  
}*/
}
    4a64:	64 96       	adiw	r28, 0x14	; 20
    4a66:	0f b6       	in	r0, 0x3f	; 63
    4a68:	f8 94       	cli
    4a6a:	de bf       	out	0x3e, r29	; 62
    4a6c:	0f be       	out	0x3f, r0	; 63
    4a6e:	cd bf       	out	0x3d, r28	; 61
    4a70:	cf 91       	pop	r28
    4a72:	df 91       	pop	r29
    4a74:	08 95       	ret

00004a76 <main>:
//#include "axon_test.c" //include this is doing a function test for the Axon
//#include "axon_oscope_test.c" //include this is doing a function test for the Axon


int main(void)
	{
    4a76:	df 93       	push	r29
    4a78:	cf 93       	push	r28
    4a7a:	00 d0       	rcall	.+0      	; 0x4a7c <main+0x6>
    4a7c:	00 d0       	rcall	.+0      	; 0x4a7e <main+0x8>
    4a7e:	cd b7       	in	r28, 0x3d	; 61
    4a80:	de b7       	in	r29, 0x3e	; 62
	//declare variables here
	int i=0;//useless variable
    4a82:	1c 82       	std	Y+4, r1	; 0x04
    4a84:	1b 82       	std	Y+3, r1	; 0x03
	int j=0;//useless variable
    4a86:	1a 82       	std	Y+2, r1	; 0x02
    4a88:	19 82       	std	Y+1, r1	; 0x01

	//add 1.7s delay for potential power issues
	delay_cycles(65535);
    4a8a:	6f ef       	ldi	r22, 0xFF	; 255
    4a8c:	7f ef       	ldi	r23, 0xFF	; 255
    4a8e:	80 e0       	ldi	r24, 0x00	; 0
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <delay_cycles>
	delay_cycles(65535);
    4a96:	6f ef       	ldi	r22, 0xFF	; 255
    4a98:	7f ef       	ldi	r23, 0xFF	; 255
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <delay_cycles>
	delay_cycles(65535);
    4aa2:	6f ef       	ldi	r22, 0xFF	; 255
    4aa4:	7f ef       	ldi	r23, 0xFF	; 255
    4aa6:	80 e0       	ldi	r24, 0x00	; 0
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <delay_cycles>
	delay_cycles(65535);
    4aae:	6f ef       	ldi	r22, 0xFF	; 255
    4ab0:	7f ef       	ldi	r23, 0xFF	; 255
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <delay_cycles>
	delay_cycles(65535);
    4aba:	6f ef       	ldi	r22, 0xFF	; 255
    4abc:	7f ef       	ldi	r23, 0xFF	; 255
    4abe:	80 e0       	ldi	r24, 0x00	; 0
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <delay_cycles>
	delay_cycles(65535);
    4ac6:	6f ef       	ldi	r22, 0xFF	; 255
    4ac8:	7f ef       	ldi	r23, 0xFF	; 255
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <delay_cycles>
	delay_cycles(65535);
    4ad2:	6f ef       	ldi	r22, 0xFF	; 255
    4ad4:	7f ef       	ldi	r23, 0xFF	; 255
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <delay_cycles>

	/****************INITIALIZATIONS*******************/
	//other stuff Im experimenting with for SoR
	uartInit();  // initialize the UART (serial port)
    4ade:	0e 94 2a 04 	call	0x854	; 0x854 <uartInit>
    uartSetBaudRate(0, 38400); // set UARTE speed, for Bluetooth
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	40 e0       	ldi	r20, 0x00	; 0
    4ae6:	56 e9       	ldi	r21, 0x96	; 150
    4ae8:	60 e0       	ldi	r22, 0x00	; 0
    4aea:	70 e0       	ldi	r23, 0x00	; 0
    4aec:	0e 94 43 05 	call	0xa86	; 0xa86 <uartSetBaudRate>
    uartSetBaudRate(1, 115200); // set UARTD speed, for USB connection, up to 500k, try 115200 if it doesn't work
    4af0:	81 e0       	ldi	r24, 0x01	; 1
    4af2:	40 e0       	ldi	r20, 0x00	; 0
    4af4:	52 ec       	ldi	r21, 0xC2	; 194
    4af6:	61 e0       	ldi	r22, 0x01	; 1
    4af8:	70 e0       	ldi	r23, 0x00	; 0
    4afa:	0e 94 43 05 	call	0xa86	; 0xa86 <uartSetBaudRate>
    uartSetBaudRate(2, 38400); // set UARTH speed
    4afe:	82 e0       	ldi	r24, 0x02	; 2
    4b00:	40 e0       	ldi	r20, 0x00	; 0
    4b02:	56 e9       	ldi	r21, 0x96	; 150
    4b04:	60 e0       	ldi	r22, 0x00	; 0
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	0e 94 43 05 	call	0xa86	; 0xa86 <uartSetBaudRate>
    uartSetBaudRate(3, 38400); // set UARTJ speed, for Blackfin
    4b0c:	83 e0       	ldi	r24, 0x03	; 3
    4b0e:	40 e0       	ldi	r20, 0x00	; 0
    4b10:	56 e9       	ldi	r21, 0x96	; 150
    4b12:	60 e0       	ldi	r22, 0x00	; 0
    4b14:	70 e0       	ldi	r23, 0x00	; 0
    4b16:	0e 94 43 05 	call	0xa86	; 0xa86 <uartSetBaudRate>
	//G=Ground, T=Tx (connect to external Rx), R=Rx (connect to external Tx)

	rprintfInit(uart1SendByte);// initialize rprintf system and configure uart1 (USB) for rprintf
    4b1a:	8b e5       	ldi	r24, 0x5B	; 91
    4b1c:	96 e0       	ldi	r25, 0x06	; 6
    4b1e:	0e 94 ca 13 	call	0x2794	; 0x2794 <rprintfInit>

	configure_ports(); // configure which ports are analog, digital, etc.
    4b22:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <configure_ports>

	LED_on();
    4b26:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <LED_on>

	rprintf("\r\nSystem Warmed Up");
    4b2a:	25 e5       	ldi	r18, 0x55	; 85
    4b2c:	32 e0       	ldi	r19, 0x02	; 2
    4b2e:	00 d0       	rcall	.+0      	; 0x4b30 <main+0xba>
    4b30:	0f 92       	push	r0
    4b32:	ed b7       	in	r30, 0x3d	; 61
    4b34:	fe b7       	in	r31, 0x3e	; 62
    4b36:	31 96       	adiw	r30, 0x01	; 1
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	80 83       	st	Z, r24
    4b3c:	32 83       	std	Z+2, r19	; 0x02
    4b3e:	21 83       	std	Z+1, r18	; 0x01
    4b40:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rprintf1RamRom>
    4b44:	0f 90       	pop	r0
    4b46:	0f 90       	pop	r0
    4b48:	0f 90       	pop	r0

	// initialize the timer system
 	init_timer0(TIMER_CLK_1024);
    4b4a:	85 e0       	ldi	r24, 0x05	; 5
    4b4c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <init_timer0>
 	init_timer1(TIMER_CLK_64);
    4b50:	83 e0       	ldi	r24, 0x03	; 3
    4b52:	0e 94 b5 0c 	call	0x196a	; 0x196a <init_timer1>
 	init_timer2(TIMER2_CLK_64);
    4b56:	84 e0       	ldi	r24, 0x04	; 4
    4b58:	0e 94 c9 0c 	call	0x1992	; 0x1992 <init_timer2>
 	init_timer3(TIMER_CLK_64);
    4b5c:	83 e0       	ldi	r24, 0x03	; 3
    4b5e:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <init_timer3>
 	init_timer4(TIMER_CLK_64);
    4b62:	83 e0       	ldi	r24, 0x03	; 3
    4b64:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <init_timer4>
 	init_timer5(TIMER_CLK_64);
    4b68:	83 e0       	ldi	r24, 0x03	; 3
    4b6a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <init_timer5>

	a2dInit(); // initialize analog to digital converter (ADC)
    4b6e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
    4b72:	85 e0       	ldi	r24, 0x05	; 5
    4b74:	0e 94 94 01 	call	0x328	; 0x328 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	0e 94 a8 01 	call	0x350	; 0x350 <a2dSetReference>

	//let system stabelize for X time
	for(i=0;i<16;i++)
    4b7e:	1c 82       	std	Y+4, r1	; 0x04
    4b80:	1b 82       	std	Y+3, r1	; 0x03
    4b82:	22 c0       	rjmp	.+68     	; 0x4bc8 <main+0x152>
		{
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
    4b84:	8b 81       	ldd	r24, Y+3	; 0x03
    4b86:	0e 94 40 02 	call	0x480	; 0x480 <a2dConvert8bit>
    4b8a:	88 2f       	mov	r24, r24
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	9a 83       	std	Y+2, r25	; 0x02
    4b90:	89 83       	std	Y+1, r24	; 0x01
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
    4b92:	68 e8       	ldi	r22, 0x88	; 136
    4b94:	73 e1       	ldi	r23, 0x13	; 19
    4b96:	80 e0       	ldi	r24, 0x00	; 0
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <delay_cycles>
		rprintf(".");
    4b9e:	23 e5       	ldi	r18, 0x53	; 83
    4ba0:	32 e0       	ldi	r19, 0x02	; 2
    4ba2:	00 d0       	rcall	.+0      	; 0x4ba4 <main+0x12e>
    4ba4:	0f 92       	push	r0
    4ba6:	ed b7       	in	r30, 0x3d	; 61
    4ba8:	fe b7       	in	r31, 0x3e	; 62
    4baa:	31 96       	adiw	r30, 0x01	; 1
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	80 83       	st	Z, r24
    4bb0:	32 83       	std	Z+2, r19	; 0x02
    4bb2:	21 83       	std	Z+1, r18	; 0x01
    4bb4:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rprintf1RamRom>
    4bb8:	0f 90       	pop	r0
    4bba:	0f 90       	pop	r0
    4bbc:	0f 90       	pop	r0
	a2dInit(); // initialize analog to digital converter (ADC)
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage

	//let system stabelize for X time
	for(i=0;i<16;i++)
    4bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc2:	01 96       	adiw	r24, 0x01	; 1
    4bc4:	9c 83       	std	Y+4, r25	; 0x04
    4bc6:	8b 83       	std	Y+3, r24	; 0x03
    4bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bca:	9c 81       	ldd	r25, Y+4	; 0x04
    4bcc:	80 31       	cpi	r24, 0x10	; 16
    4bce:	91 05       	cpc	r25, r1
    4bd0:	cc f2       	brlt	.-78     	; 0x4b84 <main+0x10e>
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
		rprintf(".");
		}

	LED_off();
    4bd2:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <LED_off>

	rprintf("Initialization Complete \r\n");
    4bd6:	88 e3       	ldi	r24, 0x38	; 56
    4bd8:	92 e0       	ldi	r25, 0x02	; 2
    4bda:	00 d0       	rcall	.+0      	; 0x4bdc <main+0x166>
    4bdc:	0f 92       	push	r0
    4bde:	ed b7       	in	r30, 0x3d	; 61
    4be0:	fe b7       	in	r31, 0x3e	; 62
    4be2:	31 96       	adiw	r30, 0x01	; 1
    4be4:	21 e0       	ldi	r18, 0x01	; 1
    4be6:	20 83       	st	Z, r18
    4be8:	92 83       	std	Z+2, r25	; 0x02
    4bea:	81 83       	std	Z+1, r24	; 0x01
    4bec:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rprintf1RamRom>
    4bf0:	0f 90       	pop	r0
    4bf2:	0f 90       	pop	r0
    4bf4:	0f 90       	pop	r0

	//wait until user pushes button
	//while(!button_pressed());

	//reset all timers to zero
	reset_timer0();
    4bf6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <reset_timer0>
	reset_timer1();
    4bfa:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <reset_timer1>
	reset_timer2();
    4bfe:	0e 94 10 0c 	call	0x1820	; 0x1820 <reset_timer2>
	reset_timer3();
    4c02:	0e 94 22 0c 	call	0x1844	; 0x1844 <reset_timer3>
	reset_timer4();
    4c06:	0e 94 35 0c 	call	0x186a	; 0x186a <reset_timer4>
	reset_timer5();
    4c0a:	0e 94 48 0c 	call	0x1890	; 0x1890 <reset_timer5>

	while(1)
		{
		
		control();
    4c0e:	0e 94 e7 23 	call	0x47ce	; 0x47ce <control>
PWM_timer4_Off_H3();
PWM_timer4_Off_H4();
PWM_timer4_Off_H5();
delay_ms(1000);
*/
		delay_cycles(100);//an optional small delay to prevent crazy oscillations
    4c12:	64 e6       	ldi	r22, 0x64	; 100
    4c14:	70 e0       	ldi	r23, 0x00	; 0
    4c16:	80 e0       	ldi	r24, 0x00	; 0
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <delay_cycles>
    4c1e:	f7 cf       	rjmp	.-18     	; 0x4c0e <main+0x198>

00004c20 <__subsf3>:
    4c20:	50 58       	subi	r21, 0x80	; 128

00004c22 <__addsf3>:
    4c22:	bb 27       	eor	r27, r27
    4c24:	aa 27       	eor	r26, r26
    4c26:	0e d0       	rcall	.+28     	; 0x4c44 <__addsf3x>
    4c28:	75 c1       	rjmp	.+746    	; 0x4f14 <__fp_round>
    4c2a:	66 d1       	rcall	.+716    	; 0x4ef8 <__fp_pscA>
    4c2c:	30 f0       	brcs	.+12     	; 0x4c3a <__addsf3+0x18>
    4c2e:	6b d1       	rcall	.+726    	; 0x4f06 <__fp_pscB>
    4c30:	20 f0       	brcs	.+8      	; 0x4c3a <__addsf3+0x18>
    4c32:	31 f4       	brne	.+12     	; 0x4c40 <__addsf3+0x1e>
    4c34:	9f 3f       	cpi	r25, 0xFF	; 255
    4c36:	11 f4       	brne	.+4      	; 0x4c3c <__addsf3+0x1a>
    4c38:	1e f4       	brtc	.+6      	; 0x4c40 <__addsf3+0x1e>
    4c3a:	5b c1       	rjmp	.+694    	; 0x4ef2 <__fp_nan>
    4c3c:	0e f4       	brtc	.+2      	; 0x4c40 <__addsf3+0x1e>
    4c3e:	e0 95       	com	r30
    4c40:	e7 fb       	bst	r30, 7
    4c42:	51 c1       	rjmp	.+674    	; 0x4ee6 <__fp_inf>

00004c44 <__addsf3x>:
    4c44:	e9 2f       	mov	r30, r25
    4c46:	77 d1       	rcall	.+750    	; 0x4f36 <__fp_split3>
    4c48:	80 f3       	brcs	.-32     	; 0x4c2a <__addsf3+0x8>
    4c4a:	ba 17       	cp	r27, r26
    4c4c:	62 07       	cpc	r22, r18
    4c4e:	73 07       	cpc	r23, r19
    4c50:	84 07       	cpc	r24, r20
    4c52:	95 07       	cpc	r25, r21
    4c54:	18 f0       	brcs	.+6      	; 0x4c5c <__addsf3x+0x18>
    4c56:	71 f4       	brne	.+28     	; 0x4c74 <__addsf3x+0x30>
    4c58:	9e f5       	brtc	.+102    	; 0x4cc0 <__addsf3x+0x7c>
    4c5a:	8f c1       	rjmp	.+798    	; 0x4f7a <__fp_zero>
    4c5c:	0e f4       	brtc	.+2      	; 0x4c60 <__addsf3x+0x1c>
    4c5e:	e0 95       	com	r30
    4c60:	0b 2e       	mov	r0, r27
    4c62:	ba 2f       	mov	r27, r26
    4c64:	a0 2d       	mov	r26, r0
    4c66:	0b 01       	movw	r0, r22
    4c68:	b9 01       	movw	r22, r18
    4c6a:	90 01       	movw	r18, r0
    4c6c:	0c 01       	movw	r0, r24
    4c6e:	ca 01       	movw	r24, r20
    4c70:	a0 01       	movw	r20, r0
    4c72:	11 24       	eor	r1, r1
    4c74:	ff 27       	eor	r31, r31
    4c76:	59 1b       	sub	r21, r25
    4c78:	99 f0       	breq	.+38     	; 0x4ca0 <__addsf3x+0x5c>
    4c7a:	59 3f       	cpi	r21, 0xF9	; 249
    4c7c:	50 f4       	brcc	.+20     	; 0x4c92 <__addsf3x+0x4e>
    4c7e:	50 3e       	cpi	r21, 0xE0	; 224
    4c80:	68 f1       	brcs	.+90     	; 0x4cdc <__addsf3x+0x98>
    4c82:	1a 16       	cp	r1, r26
    4c84:	f0 40       	sbci	r31, 0x00	; 0
    4c86:	a2 2f       	mov	r26, r18
    4c88:	23 2f       	mov	r18, r19
    4c8a:	34 2f       	mov	r19, r20
    4c8c:	44 27       	eor	r20, r20
    4c8e:	58 5f       	subi	r21, 0xF8	; 248
    4c90:	f3 cf       	rjmp	.-26     	; 0x4c78 <__addsf3x+0x34>
    4c92:	46 95       	lsr	r20
    4c94:	37 95       	ror	r19
    4c96:	27 95       	ror	r18
    4c98:	a7 95       	ror	r26
    4c9a:	f0 40       	sbci	r31, 0x00	; 0
    4c9c:	53 95       	inc	r21
    4c9e:	c9 f7       	brne	.-14     	; 0x4c92 <__addsf3x+0x4e>
    4ca0:	7e f4       	brtc	.+30     	; 0x4cc0 <__addsf3x+0x7c>
    4ca2:	1f 16       	cp	r1, r31
    4ca4:	ba 0b       	sbc	r27, r26
    4ca6:	62 0b       	sbc	r22, r18
    4ca8:	73 0b       	sbc	r23, r19
    4caa:	84 0b       	sbc	r24, r20
    4cac:	ba f0       	brmi	.+46     	; 0x4cdc <__addsf3x+0x98>
    4cae:	91 50       	subi	r25, 0x01	; 1
    4cb0:	a1 f0       	breq	.+40     	; 0x4cda <__addsf3x+0x96>
    4cb2:	ff 0f       	add	r31, r31
    4cb4:	bb 1f       	adc	r27, r27
    4cb6:	66 1f       	adc	r22, r22
    4cb8:	77 1f       	adc	r23, r23
    4cba:	88 1f       	adc	r24, r24
    4cbc:	c2 f7       	brpl	.-16     	; 0x4cae <__addsf3x+0x6a>
    4cbe:	0e c0       	rjmp	.+28     	; 0x4cdc <__addsf3x+0x98>
    4cc0:	ba 0f       	add	r27, r26
    4cc2:	62 1f       	adc	r22, r18
    4cc4:	73 1f       	adc	r23, r19
    4cc6:	84 1f       	adc	r24, r20
    4cc8:	48 f4       	brcc	.+18     	; 0x4cdc <__addsf3x+0x98>
    4cca:	87 95       	ror	r24
    4ccc:	77 95       	ror	r23
    4cce:	67 95       	ror	r22
    4cd0:	b7 95       	ror	r27
    4cd2:	f7 95       	ror	r31
    4cd4:	9e 3f       	cpi	r25, 0xFE	; 254
    4cd6:	08 f0       	brcs	.+2      	; 0x4cda <__addsf3x+0x96>
    4cd8:	b3 cf       	rjmp	.-154    	; 0x4c40 <__addsf3+0x1e>
    4cda:	93 95       	inc	r25
    4cdc:	88 0f       	add	r24, r24
    4cde:	08 f0       	brcs	.+2      	; 0x4ce2 <__addsf3x+0x9e>
    4ce0:	99 27       	eor	r25, r25
    4ce2:	ee 0f       	add	r30, r30
    4ce4:	97 95       	ror	r25
    4ce6:	87 95       	ror	r24
    4ce8:	08 95       	ret

00004cea <__cmpsf2>:
    4cea:	d9 d0       	rcall	.+434    	; 0x4e9e <__fp_cmp>
    4cec:	08 f4       	brcc	.+2      	; 0x4cf0 <__cmpsf2+0x6>
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	08 95       	ret

00004cf2 <__divsf3>:
    4cf2:	0c d0       	rcall	.+24     	; 0x4d0c <__divsf3x>
    4cf4:	0f c1       	rjmp	.+542    	; 0x4f14 <__fp_round>
    4cf6:	07 d1       	rcall	.+526    	; 0x4f06 <__fp_pscB>
    4cf8:	40 f0       	brcs	.+16     	; 0x4d0a <__divsf3+0x18>
    4cfa:	fe d0       	rcall	.+508    	; 0x4ef8 <__fp_pscA>
    4cfc:	30 f0       	brcs	.+12     	; 0x4d0a <__divsf3+0x18>
    4cfe:	21 f4       	brne	.+8      	; 0x4d08 <__divsf3+0x16>
    4d00:	5f 3f       	cpi	r21, 0xFF	; 255
    4d02:	19 f0       	breq	.+6      	; 0x4d0a <__divsf3+0x18>
    4d04:	f0 c0       	rjmp	.+480    	; 0x4ee6 <__fp_inf>
    4d06:	51 11       	cpse	r21, r1
    4d08:	39 c1       	rjmp	.+626    	; 0x4f7c <__fp_szero>
    4d0a:	f3 c0       	rjmp	.+486    	; 0x4ef2 <__fp_nan>

00004d0c <__divsf3x>:
    4d0c:	14 d1       	rcall	.+552    	; 0x4f36 <__fp_split3>
    4d0e:	98 f3       	brcs	.-26     	; 0x4cf6 <__divsf3+0x4>

00004d10 <__divsf3_pse>:
    4d10:	99 23       	and	r25, r25
    4d12:	c9 f3       	breq	.-14     	; 0x4d06 <__divsf3+0x14>
    4d14:	55 23       	and	r21, r21
    4d16:	b1 f3       	breq	.-20     	; 0x4d04 <__divsf3+0x12>
    4d18:	95 1b       	sub	r25, r21
    4d1a:	55 0b       	sbc	r21, r21
    4d1c:	bb 27       	eor	r27, r27
    4d1e:	aa 27       	eor	r26, r26
    4d20:	62 17       	cp	r22, r18
    4d22:	73 07       	cpc	r23, r19
    4d24:	84 07       	cpc	r24, r20
    4d26:	38 f0       	brcs	.+14     	; 0x4d36 <__divsf3_pse+0x26>
    4d28:	9f 5f       	subi	r25, 0xFF	; 255
    4d2a:	5f 4f       	sbci	r21, 0xFF	; 255
    4d2c:	22 0f       	add	r18, r18
    4d2e:	33 1f       	adc	r19, r19
    4d30:	44 1f       	adc	r20, r20
    4d32:	aa 1f       	adc	r26, r26
    4d34:	a9 f3       	breq	.-22     	; 0x4d20 <__divsf3_pse+0x10>
    4d36:	33 d0       	rcall	.+102    	; 0x4d9e <__divsf3_pse+0x8e>
    4d38:	0e 2e       	mov	r0, r30
    4d3a:	3a f0       	brmi	.+14     	; 0x4d4a <__divsf3_pse+0x3a>
    4d3c:	e0 e8       	ldi	r30, 0x80	; 128
    4d3e:	30 d0       	rcall	.+96     	; 0x4da0 <__divsf3_pse+0x90>
    4d40:	91 50       	subi	r25, 0x01	; 1
    4d42:	50 40       	sbci	r21, 0x00	; 0
    4d44:	e6 95       	lsr	r30
    4d46:	00 1c       	adc	r0, r0
    4d48:	ca f7       	brpl	.-14     	; 0x4d3c <__divsf3_pse+0x2c>
    4d4a:	29 d0       	rcall	.+82     	; 0x4d9e <__divsf3_pse+0x8e>
    4d4c:	fe 2f       	mov	r31, r30
    4d4e:	27 d0       	rcall	.+78     	; 0x4d9e <__divsf3_pse+0x8e>
    4d50:	66 0f       	add	r22, r22
    4d52:	77 1f       	adc	r23, r23
    4d54:	88 1f       	adc	r24, r24
    4d56:	bb 1f       	adc	r27, r27
    4d58:	26 17       	cp	r18, r22
    4d5a:	37 07       	cpc	r19, r23
    4d5c:	48 07       	cpc	r20, r24
    4d5e:	ab 07       	cpc	r26, r27
    4d60:	b0 e8       	ldi	r27, 0x80	; 128
    4d62:	09 f0       	breq	.+2      	; 0x4d66 <__divsf3_pse+0x56>
    4d64:	bb 0b       	sbc	r27, r27
    4d66:	80 2d       	mov	r24, r0
    4d68:	bf 01       	movw	r22, r30
    4d6a:	ff 27       	eor	r31, r31
    4d6c:	93 58       	subi	r25, 0x83	; 131
    4d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    4d70:	2a f0       	brmi	.+10     	; 0x4d7c <__divsf3_pse+0x6c>
    4d72:	9e 3f       	cpi	r25, 0xFE	; 254
    4d74:	51 05       	cpc	r21, r1
    4d76:	68 f0       	brcs	.+26     	; 0x4d92 <__divsf3_pse+0x82>
    4d78:	b6 c0       	rjmp	.+364    	; 0x4ee6 <__fp_inf>
    4d7a:	00 c1       	rjmp	.+512    	; 0x4f7c <__fp_szero>
    4d7c:	5f 3f       	cpi	r21, 0xFF	; 255
    4d7e:	ec f3       	brlt	.-6      	; 0x4d7a <__divsf3_pse+0x6a>
    4d80:	98 3e       	cpi	r25, 0xE8	; 232
    4d82:	dc f3       	brlt	.-10     	; 0x4d7a <__divsf3_pse+0x6a>
    4d84:	86 95       	lsr	r24
    4d86:	77 95       	ror	r23
    4d88:	67 95       	ror	r22
    4d8a:	b7 95       	ror	r27
    4d8c:	f7 95       	ror	r31
    4d8e:	9f 5f       	subi	r25, 0xFF	; 255
    4d90:	c9 f7       	brne	.-14     	; 0x4d84 <__divsf3_pse+0x74>
    4d92:	88 0f       	add	r24, r24
    4d94:	91 1d       	adc	r25, r1
    4d96:	96 95       	lsr	r25
    4d98:	87 95       	ror	r24
    4d9a:	97 f9       	bld	r25, 7
    4d9c:	08 95       	ret
    4d9e:	e1 e0       	ldi	r30, 0x01	; 1
    4da0:	66 0f       	add	r22, r22
    4da2:	77 1f       	adc	r23, r23
    4da4:	88 1f       	adc	r24, r24
    4da6:	bb 1f       	adc	r27, r27
    4da8:	62 17       	cp	r22, r18
    4daa:	73 07       	cpc	r23, r19
    4dac:	84 07       	cpc	r24, r20
    4dae:	ba 07       	cpc	r27, r26
    4db0:	20 f0       	brcs	.+8      	; 0x4dba <__divsf3_pse+0xaa>
    4db2:	62 1b       	sub	r22, r18
    4db4:	73 0b       	sbc	r23, r19
    4db6:	84 0b       	sbc	r24, r20
    4db8:	ba 0b       	sbc	r27, r26
    4dba:	ee 1f       	adc	r30, r30
    4dbc:	88 f7       	brcc	.-30     	; 0x4da0 <__divsf3_pse+0x90>
    4dbe:	e0 95       	com	r30
    4dc0:	08 95       	ret

00004dc2 <__fixsfsi>:
    4dc2:	04 d0       	rcall	.+8      	; 0x4dcc <__fixunssfsi>
    4dc4:	68 94       	set
    4dc6:	b1 11       	cpse	r27, r1
    4dc8:	d9 c0       	rjmp	.+434    	; 0x4f7c <__fp_szero>
    4dca:	08 95       	ret

00004dcc <__fixunssfsi>:
    4dcc:	bc d0       	rcall	.+376    	; 0x4f46 <__fp_splitA>
    4dce:	88 f0       	brcs	.+34     	; 0x4df2 <__fixunssfsi+0x26>
    4dd0:	9f 57       	subi	r25, 0x7F	; 127
    4dd2:	90 f0       	brcs	.+36     	; 0x4df8 <__fixunssfsi+0x2c>
    4dd4:	b9 2f       	mov	r27, r25
    4dd6:	99 27       	eor	r25, r25
    4dd8:	b7 51       	subi	r27, 0x17	; 23
    4dda:	a0 f0       	brcs	.+40     	; 0x4e04 <__fixunssfsi+0x38>
    4ddc:	d1 f0       	breq	.+52     	; 0x4e12 <__fixunssfsi+0x46>
    4dde:	66 0f       	add	r22, r22
    4de0:	77 1f       	adc	r23, r23
    4de2:	88 1f       	adc	r24, r24
    4de4:	99 1f       	adc	r25, r25
    4de6:	1a f0       	brmi	.+6      	; 0x4dee <__fixunssfsi+0x22>
    4de8:	ba 95       	dec	r27
    4dea:	c9 f7       	brne	.-14     	; 0x4dde <__fixunssfsi+0x12>
    4dec:	12 c0       	rjmp	.+36     	; 0x4e12 <__fixunssfsi+0x46>
    4dee:	b1 30       	cpi	r27, 0x01	; 1
    4df0:	81 f0       	breq	.+32     	; 0x4e12 <__fixunssfsi+0x46>
    4df2:	c3 d0       	rcall	.+390    	; 0x4f7a <__fp_zero>
    4df4:	b1 e0       	ldi	r27, 0x01	; 1
    4df6:	08 95       	ret
    4df8:	c0 c0       	rjmp	.+384    	; 0x4f7a <__fp_zero>
    4dfa:	67 2f       	mov	r22, r23
    4dfc:	78 2f       	mov	r23, r24
    4dfe:	88 27       	eor	r24, r24
    4e00:	b8 5f       	subi	r27, 0xF8	; 248
    4e02:	39 f0       	breq	.+14     	; 0x4e12 <__fixunssfsi+0x46>
    4e04:	b9 3f       	cpi	r27, 0xF9	; 249
    4e06:	cc f3       	brlt	.-14     	; 0x4dfa <__fixunssfsi+0x2e>
    4e08:	86 95       	lsr	r24
    4e0a:	77 95       	ror	r23
    4e0c:	67 95       	ror	r22
    4e0e:	b3 95       	inc	r27
    4e10:	d9 f7       	brne	.-10     	; 0x4e08 <__fixunssfsi+0x3c>
    4e12:	3e f4       	brtc	.+14     	; 0x4e22 <__fixunssfsi+0x56>
    4e14:	90 95       	com	r25
    4e16:	80 95       	com	r24
    4e18:	70 95       	com	r23
    4e1a:	61 95       	neg	r22
    4e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e1e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e20:	9f 4f       	sbci	r25, 0xFF	; 255
    4e22:	08 95       	ret

00004e24 <__floatunsisf>:
    4e24:	e8 94       	clt
    4e26:	09 c0       	rjmp	.+18     	; 0x4e3a <__floatsisf+0x12>

00004e28 <__floatsisf>:
    4e28:	97 fb       	bst	r25, 7
    4e2a:	3e f4       	brtc	.+14     	; 0x4e3a <__floatsisf+0x12>
    4e2c:	90 95       	com	r25
    4e2e:	80 95       	com	r24
    4e30:	70 95       	com	r23
    4e32:	61 95       	neg	r22
    4e34:	7f 4f       	sbci	r23, 0xFF	; 255
    4e36:	8f 4f       	sbci	r24, 0xFF	; 255
    4e38:	9f 4f       	sbci	r25, 0xFF	; 255
    4e3a:	99 23       	and	r25, r25
    4e3c:	a9 f0       	breq	.+42     	; 0x4e68 <__floatsisf+0x40>
    4e3e:	f9 2f       	mov	r31, r25
    4e40:	96 e9       	ldi	r25, 0x96	; 150
    4e42:	bb 27       	eor	r27, r27
    4e44:	93 95       	inc	r25
    4e46:	f6 95       	lsr	r31
    4e48:	87 95       	ror	r24
    4e4a:	77 95       	ror	r23
    4e4c:	67 95       	ror	r22
    4e4e:	b7 95       	ror	r27
    4e50:	f1 11       	cpse	r31, r1
    4e52:	f8 cf       	rjmp	.-16     	; 0x4e44 <__floatsisf+0x1c>
    4e54:	fa f4       	brpl	.+62     	; 0x4e94 <__floatsisf+0x6c>
    4e56:	bb 0f       	add	r27, r27
    4e58:	11 f4       	brne	.+4      	; 0x4e5e <__floatsisf+0x36>
    4e5a:	60 ff       	sbrs	r22, 0
    4e5c:	1b c0       	rjmp	.+54     	; 0x4e94 <__floatsisf+0x6c>
    4e5e:	6f 5f       	subi	r22, 0xFF	; 255
    4e60:	7f 4f       	sbci	r23, 0xFF	; 255
    4e62:	8f 4f       	sbci	r24, 0xFF	; 255
    4e64:	9f 4f       	sbci	r25, 0xFF	; 255
    4e66:	16 c0       	rjmp	.+44     	; 0x4e94 <__floatsisf+0x6c>
    4e68:	88 23       	and	r24, r24
    4e6a:	11 f0       	breq	.+4      	; 0x4e70 <__floatsisf+0x48>
    4e6c:	96 e9       	ldi	r25, 0x96	; 150
    4e6e:	11 c0       	rjmp	.+34     	; 0x4e92 <__floatsisf+0x6a>
    4e70:	77 23       	and	r23, r23
    4e72:	21 f0       	breq	.+8      	; 0x4e7c <__floatsisf+0x54>
    4e74:	9e e8       	ldi	r25, 0x8E	; 142
    4e76:	87 2f       	mov	r24, r23
    4e78:	76 2f       	mov	r23, r22
    4e7a:	05 c0       	rjmp	.+10     	; 0x4e86 <__floatsisf+0x5e>
    4e7c:	66 23       	and	r22, r22
    4e7e:	71 f0       	breq	.+28     	; 0x4e9c <__floatsisf+0x74>
    4e80:	96 e8       	ldi	r25, 0x86	; 134
    4e82:	86 2f       	mov	r24, r22
    4e84:	70 e0       	ldi	r23, 0x00	; 0
    4e86:	60 e0       	ldi	r22, 0x00	; 0
    4e88:	2a f0       	brmi	.+10     	; 0x4e94 <__floatsisf+0x6c>
    4e8a:	9a 95       	dec	r25
    4e8c:	66 0f       	add	r22, r22
    4e8e:	77 1f       	adc	r23, r23
    4e90:	88 1f       	adc	r24, r24
    4e92:	da f7       	brpl	.-10     	; 0x4e8a <__floatsisf+0x62>
    4e94:	88 0f       	add	r24, r24
    4e96:	96 95       	lsr	r25
    4e98:	87 95       	ror	r24
    4e9a:	97 f9       	bld	r25, 7
    4e9c:	08 95       	ret

00004e9e <__fp_cmp>:
    4e9e:	99 0f       	add	r25, r25
    4ea0:	00 08       	sbc	r0, r0
    4ea2:	55 0f       	add	r21, r21
    4ea4:	aa 0b       	sbc	r26, r26
    4ea6:	e0 e8       	ldi	r30, 0x80	; 128
    4ea8:	fe ef       	ldi	r31, 0xFE	; 254
    4eaa:	16 16       	cp	r1, r22
    4eac:	17 06       	cpc	r1, r23
    4eae:	e8 07       	cpc	r30, r24
    4eb0:	f9 07       	cpc	r31, r25
    4eb2:	c0 f0       	brcs	.+48     	; 0x4ee4 <__fp_cmp+0x46>
    4eb4:	12 16       	cp	r1, r18
    4eb6:	13 06       	cpc	r1, r19
    4eb8:	e4 07       	cpc	r30, r20
    4eba:	f5 07       	cpc	r31, r21
    4ebc:	98 f0       	brcs	.+38     	; 0x4ee4 <__fp_cmp+0x46>
    4ebe:	62 1b       	sub	r22, r18
    4ec0:	73 0b       	sbc	r23, r19
    4ec2:	84 0b       	sbc	r24, r20
    4ec4:	95 0b       	sbc	r25, r21
    4ec6:	39 f4       	brne	.+14     	; 0x4ed6 <__fp_cmp+0x38>
    4ec8:	0a 26       	eor	r0, r26
    4eca:	61 f0       	breq	.+24     	; 0x4ee4 <__fp_cmp+0x46>
    4ecc:	23 2b       	or	r18, r19
    4ece:	24 2b       	or	r18, r20
    4ed0:	25 2b       	or	r18, r21
    4ed2:	21 f4       	brne	.+8      	; 0x4edc <__fp_cmp+0x3e>
    4ed4:	08 95       	ret
    4ed6:	0a 26       	eor	r0, r26
    4ed8:	09 f4       	brne	.+2      	; 0x4edc <__fp_cmp+0x3e>
    4eda:	a1 40       	sbci	r26, 0x01	; 1
    4edc:	a6 95       	lsr	r26
    4ede:	8f ef       	ldi	r24, 0xFF	; 255
    4ee0:	81 1d       	adc	r24, r1
    4ee2:	81 1d       	adc	r24, r1
    4ee4:	08 95       	ret

00004ee6 <__fp_inf>:
    4ee6:	97 f9       	bld	r25, 7
    4ee8:	9f 67       	ori	r25, 0x7F	; 127
    4eea:	80 e8       	ldi	r24, 0x80	; 128
    4eec:	70 e0       	ldi	r23, 0x00	; 0
    4eee:	60 e0       	ldi	r22, 0x00	; 0
    4ef0:	08 95       	ret

00004ef2 <__fp_nan>:
    4ef2:	9f ef       	ldi	r25, 0xFF	; 255
    4ef4:	80 ec       	ldi	r24, 0xC0	; 192
    4ef6:	08 95       	ret

00004ef8 <__fp_pscA>:
    4ef8:	00 24       	eor	r0, r0
    4efa:	0a 94       	dec	r0
    4efc:	16 16       	cp	r1, r22
    4efe:	17 06       	cpc	r1, r23
    4f00:	18 06       	cpc	r1, r24
    4f02:	09 06       	cpc	r0, r25
    4f04:	08 95       	ret

00004f06 <__fp_pscB>:
    4f06:	00 24       	eor	r0, r0
    4f08:	0a 94       	dec	r0
    4f0a:	12 16       	cp	r1, r18
    4f0c:	13 06       	cpc	r1, r19
    4f0e:	14 06       	cpc	r1, r20
    4f10:	05 06       	cpc	r0, r21
    4f12:	08 95       	ret

00004f14 <__fp_round>:
    4f14:	09 2e       	mov	r0, r25
    4f16:	03 94       	inc	r0
    4f18:	00 0c       	add	r0, r0
    4f1a:	11 f4       	brne	.+4      	; 0x4f20 <__fp_round+0xc>
    4f1c:	88 23       	and	r24, r24
    4f1e:	52 f0       	brmi	.+20     	; 0x4f34 <__fp_round+0x20>
    4f20:	bb 0f       	add	r27, r27
    4f22:	40 f4       	brcc	.+16     	; 0x4f34 <__fp_round+0x20>
    4f24:	bf 2b       	or	r27, r31
    4f26:	11 f4       	brne	.+4      	; 0x4f2c <__fp_round+0x18>
    4f28:	60 ff       	sbrs	r22, 0
    4f2a:	04 c0       	rjmp	.+8      	; 0x4f34 <__fp_round+0x20>
    4f2c:	6f 5f       	subi	r22, 0xFF	; 255
    4f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f30:	8f 4f       	sbci	r24, 0xFF	; 255
    4f32:	9f 4f       	sbci	r25, 0xFF	; 255
    4f34:	08 95       	ret

00004f36 <__fp_split3>:
    4f36:	57 fd       	sbrc	r21, 7
    4f38:	90 58       	subi	r25, 0x80	; 128
    4f3a:	44 0f       	add	r20, r20
    4f3c:	55 1f       	adc	r21, r21
    4f3e:	59 f0       	breq	.+22     	; 0x4f56 <__fp_splitA+0x10>
    4f40:	5f 3f       	cpi	r21, 0xFF	; 255
    4f42:	71 f0       	breq	.+28     	; 0x4f60 <__fp_splitA+0x1a>
    4f44:	47 95       	ror	r20

00004f46 <__fp_splitA>:
    4f46:	88 0f       	add	r24, r24
    4f48:	97 fb       	bst	r25, 7
    4f4a:	99 1f       	adc	r25, r25
    4f4c:	61 f0       	breq	.+24     	; 0x4f66 <__fp_splitA+0x20>
    4f4e:	9f 3f       	cpi	r25, 0xFF	; 255
    4f50:	79 f0       	breq	.+30     	; 0x4f70 <__fp_splitA+0x2a>
    4f52:	87 95       	ror	r24
    4f54:	08 95       	ret
    4f56:	12 16       	cp	r1, r18
    4f58:	13 06       	cpc	r1, r19
    4f5a:	14 06       	cpc	r1, r20
    4f5c:	55 1f       	adc	r21, r21
    4f5e:	f2 cf       	rjmp	.-28     	; 0x4f44 <__fp_split3+0xe>
    4f60:	46 95       	lsr	r20
    4f62:	f1 df       	rcall	.-30     	; 0x4f46 <__fp_splitA>
    4f64:	08 c0       	rjmp	.+16     	; 0x4f76 <__fp_splitA+0x30>
    4f66:	16 16       	cp	r1, r22
    4f68:	17 06       	cpc	r1, r23
    4f6a:	18 06       	cpc	r1, r24
    4f6c:	99 1f       	adc	r25, r25
    4f6e:	f1 cf       	rjmp	.-30     	; 0x4f52 <__fp_splitA+0xc>
    4f70:	86 95       	lsr	r24
    4f72:	71 05       	cpc	r23, r1
    4f74:	61 05       	cpc	r22, r1
    4f76:	08 94       	sec
    4f78:	08 95       	ret

00004f7a <__fp_zero>:
    4f7a:	e8 94       	clt

00004f7c <__fp_szero>:
    4f7c:	bb 27       	eor	r27, r27
    4f7e:	66 27       	eor	r22, r22
    4f80:	77 27       	eor	r23, r23
    4f82:	cb 01       	movw	r24, r22
    4f84:	97 f9       	bld	r25, 7
    4f86:	08 95       	ret

00004f88 <__gesf2>:
    4f88:	8a df       	rcall	.-236    	; 0x4e9e <__fp_cmp>
    4f8a:	08 f4       	brcc	.+2      	; 0x4f8e <__gesf2+0x6>
    4f8c:	8f ef       	ldi	r24, 0xFF	; 255
    4f8e:	08 95       	ret

00004f90 <__mulsf3>:
    4f90:	0b d0       	rcall	.+22     	; 0x4fa8 <__mulsf3x>
    4f92:	c0 cf       	rjmp	.-128    	; 0x4f14 <__fp_round>
    4f94:	b1 df       	rcall	.-158    	; 0x4ef8 <__fp_pscA>
    4f96:	28 f0       	brcs	.+10     	; 0x4fa2 <__mulsf3+0x12>
    4f98:	b6 df       	rcall	.-148    	; 0x4f06 <__fp_pscB>
    4f9a:	18 f0       	brcs	.+6      	; 0x4fa2 <__mulsf3+0x12>
    4f9c:	95 23       	and	r25, r21
    4f9e:	09 f0       	breq	.+2      	; 0x4fa2 <__mulsf3+0x12>
    4fa0:	a2 cf       	rjmp	.-188    	; 0x4ee6 <__fp_inf>
    4fa2:	a7 cf       	rjmp	.-178    	; 0x4ef2 <__fp_nan>
    4fa4:	11 24       	eor	r1, r1
    4fa6:	ea cf       	rjmp	.-44     	; 0x4f7c <__fp_szero>

00004fa8 <__mulsf3x>:
    4fa8:	c6 df       	rcall	.-116    	; 0x4f36 <__fp_split3>
    4faa:	a0 f3       	brcs	.-24     	; 0x4f94 <__mulsf3+0x4>

00004fac <__mulsf3_pse>:
    4fac:	95 9f       	mul	r25, r21
    4fae:	d1 f3       	breq	.-12     	; 0x4fa4 <__mulsf3+0x14>
    4fb0:	95 0f       	add	r25, r21
    4fb2:	50 e0       	ldi	r21, 0x00	; 0
    4fb4:	55 1f       	adc	r21, r21
    4fb6:	62 9f       	mul	r22, r18
    4fb8:	f0 01       	movw	r30, r0
    4fba:	72 9f       	mul	r23, r18
    4fbc:	bb 27       	eor	r27, r27
    4fbe:	f0 0d       	add	r31, r0
    4fc0:	b1 1d       	adc	r27, r1
    4fc2:	63 9f       	mul	r22, r19
    4fc4:	aa 27       	eor	r26, r26
    4fc6:	f0 0d       	add	r31, r0
    4fc8:	b1 1d       	adc	r27, r1
    4fca:	aa 1f       	adc	r26, r26
    4fcc:	64 9f       	mul	r22, r20
    4fce:	66 27       	eor	r22, r22
    4fd0:	b0 0d       	add	r27, r0
    4fd2:	a1 1d       	adc	r26, r1
    4fd4:	66 1f       	adc	r22, r22
    4fd6:	82 9f       	mul	r24, r18
    4fd8:	22 27       	eor	r18, r18
    4fda:	b0 0d       	add	r27, r0
    4fdc:	a1 1d       	adc	r26, r1
    4fde:	62 1f       	adc	r22, r18
    4fe0:	73 9f       	mul	r23, r19
    4fe2:	b0 0d       	add	r27, r0
    4fe4:	a1 1d       	adc	r26, r1
    4fe6:	62 1f       	adc	r22, r18
    4fe8:	83 9f       	mul	r24, r19
    4fea:	a0 0d       	add	r26, r0
    4fec:	61 1d       	adc	r22, r1
    4fee:	22 1f       	adc	r18, r18
    4ff0:	74 9f       	mul	r23, r20
    4ff2:	33 27       	eor	r19, r19
    4ff4:	a0 0d       	add	r26, r0
    4ff6:	61 1d       	adc	r22, r1
    4ff8:	23 1f       	adc	r18, r19
    4ffa:	84 9f       	mul	r24, r20
    4ffc:	60 0d       	add	r22, r0
    4ffe:	21 1d       	adc	r18, r1
    5000:	82 2f       	mov	r24, r18
    5002:	76 2f       	mov	r23, r22
    5004:	6a 2f       	mov	r22, r26
    5006:	11 24       	eor	r1, r1
    5008:	9f 57       	subi	r25, 0x7F	; 127
    500a:	50 40       	sbci	r21, 0x00	; 0
    500c:	8a f0       	brmi	.+34     	; 0x5030 <__mulsf3_pse+0x84>
    500e:	e1 f0       	breq	.+56     	; 0x5048 <__mulsf3_pse+0x9c>
    5010:	88 23       	and	r24, r24
    5012:	4a f0       	brmi	.+18     	; 0x5026 <__mulsf3_pse+0x7a>
    5014:	ee 0f       	add	r30, r30
    5016:	ff 1f       	adc	r31, r31
    5018:	bb 1f       	adc	r27, r27
    501a:	66 1f       	adc	r22, r22
    501c:	77 1f       	adc	r23, r23
    501e:	88 1f       	adc	r24, r24
    5020:	91 50       	subi	r25, 0x01	; 1
    5022:	50 40       	sbci	r21, 0x00	; 0
    5024:	a9 f7       	brne	.-22     	; 0x5010 <__mulsf3_pse+0x64>
    5026:	9e 3f       	cpi	r25, 0xFE	; 254
    5028:	51 05       	cpc	r21, r1
    502a:	70 f0       	brcs	.+28     	; 0x5048 <__mulsf3_pse+0x9c>
    502c:	5c cf       	rjmp	.-328    	; 0x4ee6 <__fp_inf>
    502e:	a6 cf       	rjmp	.-180    	; 0x4f7c <__fp_szero>
    5030:	5f 3f       	cpi	r21, 0xFF	; 255
    5032:	ec f3       	brlt	.-6      	; 0x502e <__mulsf3_pse+0x82>
    5034:	98 3e       	cpi	r25, 0xE8	; 232
    5036:	dc f3       	brlt	.-10     	; 0x502e <__mulsf3_pse+0x82>
    5038:	86 95       	lsr	r24
    503a:	77 95       	ror	r23
    503c:	67 95       	ror	r22
    503e:	b7 95       	ror	r27
    5040:	f7 95       	ror	r31
    5042:	e7 95       	ror	r30
    5044:	9f 5f       	subi	r25, 0xFF	; 255
    5046:	c1 f7       	brne	.-16     	; 0x5038 <__mulsf3_pse+0x8c>
    5048:	fe 2b       	or	r31, r30
    504a:	88 0f       	add	r24, r24
    504c:	91 1d       	adc	r25, r1
    504e:	96 95       	lsr	r25
    5050:	87 95       	ror	r24
    5052:	97 f9       	bld	r25, 7
    5054:	08 95       	ret

00005056 <pow>:
    5056:	fa 01       	movw	r30, r20
    5058:	ee 0f       	add	r30, r30
    505a:	ff 1f       	adc	r31, r31
    505c:	30 96       	adiw	r30, 0x00	; 0
    505e:	21 05       	cpc	r18, r1
    5060:	31 05       	cpc	r19, r1
    5062:	99 f1       	breq	.+102    	; 0x50ca <pow+0x74>
    5064:	61 15       	cp	r22, r1
    5066:	71 05       	cpc	r23, r1
    5068:	61 f4       	brne	.+24     	; 0x5082 <pow+0x2c>
    506a:	80 38       	cpi	r24, 0x80	; 128
    506c:	bf e3       	ldi	r27, 0x3F	; 63
    506e:	9b 07       	cpc	r25, r27
    5070:	49 f1       	breq	.+82     	; 0x50c4 <pow+0x6e>
    5072:	68 94       	set
    5074:	90 38       	cpi	r25, 0x80	; 128
    5076:	81 05       	cpc	r24, r1
    5078:	61 f0       	breq	.+24     	; 0x5092 <pow+0x3c>
    507a:	80 38       	cpi	r24, 0x80	; 128
    507c:	bf ef       	ldi	r27, 0xFF	; 255
    507e:	9b 07       	cpc	r25, r27
    5080:	41 f0       	breq	.+16     	; 0x5092 <pow+0x3c>
    5082:	99 23       	and	r25, r25
    5084:	42 f5       	brpl	.+80     	; 0x50d6 <pow+0x80>
    5086:	ff 3f       	cpi	r31, 0xFF	; 255
    5088:	e1 05       	cpc	r30, r1
    508a:	31 05       	cpc	r19, r1
    508c:	21 05       	cpc	r18, r1
    508e:	11 f1       	breq	.+68     	; 0x50d4 <pow+0x7e>
    5090:	e8 94       	clt
    5092:	08 94       	sec
    5094:	e7 95       	ror	r30
    5096:	d9 01       	movw	r26, r18
    5098:	aa 23       	and	r26, r26
    509a:	29 f4       	brne	.+10     	; 0x50a6 <pow+0x50>
    509c:	ab 2f       	mov	r26, r27
    509e:	be 2f       	mov	r27, r30
    50a0:	f8 5f       	subi	r31, 0xF8	; 248
    50a2:	d0 f3       	brcs	.-12     	; 0x5098 <pow+0x42>
    50a4:	10 c0       	rjmp	.+32     	; 0x50c6 <pow+0x70>
    50a6:	ff 5f       	subi	r31, 0xFF	; 255
    50a8:	70 f4       	brcc	.+28     	; 0x50c6 <pow+0x70>
    50aa:	a6 95       	lsr	r26
    50ac:	e0 f7       	brcc	.-8      	; 0x50a6 <pow+0x50>
    50ae:	f7 39       	cpi	r31, 0x97	; 151
    50b0:	50 f0       	brcs	.+20     	; 0x50c6 <pow+0x70>
    50b2:	19 f0       	breq	.+6      	; 0x50ba <pow+0x64>
    50b4:	ff 3a       	cpi	r31, 0xAF	; 175
    50b6:	38 f4       	brcc	.+14     	; 0x50c6 <pow+0x70>
    50b8:	9f 77       	andi	r25, 0x7F	; 127
    50ba:	9f 93       	push	r25
    50bc:	0c d0       	rcall	.+24     	; 0x50d6 <pow+0x80>
    50be:	0f 90       	pop	r0
    50c0:	07 fc       	sbrc	r0, 7
    50c2:	90 58       	subi	r25, 0x80	; 128
    50c4:	08 95       	ret
    50c6:	3e f0       	brts	.+14     	; 0x50d6 <pow+0x80>
    50c8:	14 cf       	rjmp	.-472    	; 0x4ef2 <__fp_nan>
    50ca:	60 e0       	ldi	r22, 0x00	; 0
    50cc:	70 e0       	ldi	r23, 0x00	; 0
    50ce:	80 e8       	ldi	r24, 0x80	; 128
    50d0:	9f e3       	ldi	r25, 0x3F	; 63
    50d2:	08 95       	ret
    50d4:	4f e7       	ldi	r20, 0x7F	; 127
    50d6:	9f 77       	andi	r25, 0x7F	; 127
    50d8:	5f 93       	push	r21
    50da:	4f 93       	push	r20
    50dc:	3f 93       	push	r19
    50de:	2f 93       	push	r18
    50e0:	9e d0       	rcall	.+316    	; 0x521e <log>
    50e2:	2f 91       	pop	r18
    50e4:	3f 91       	pop	r19
    50e6:	4f 91       	pop	r20
    50e8:	5f 91       	pop	r21
    50ea:	52 df       	rcall	.-348    	; 0x4f90 <__mulsf3>
    50ec:	05 c0       	rjmp	.+10     	; 0x50f8 <exp>
    50ee:	19 f4       	brne	.+6      	; 0x50f6 <pow+0xa0>
    50f0:	0e f0       	brts	.+2      	; 0x50f4 <pow+0x9e>
    50f2:	f9 ce       	rjmp	.-526    	; 0x4ee6 <__fp_inf>
    50f4:	42 cf       	rjmp	.-380    	; 0x4f7a <__fp_zero>
    50f6:	fd ce       	rjmp	.-518    	; 0x4ef2 <__fp_nan>

000050f8 <exp>:
    50f8:	26 df       	rcall	.-436    	; 0x4f46 <__fp_splitA>
    50fa:	c8 f3       	brcs	.-14     	; 0x50ee <pow+0x98>
    50fc:	96 38       	cpi	r25, 0x86	; 134
    50fe:	c0 f7       	brcc	.-16     	; 0x50f0 <pow+0x9a>
    5100:	07 f8       	bld	r0, 7
    5102:	0f 92       	push	r0
    5104:	e8 94       	clt
    5106:	2b e3       	ldi	r18, 0x3B	; 59
    5108:	3a ea       	ldi	r19, 0xAA	; 170
    510a:	48 eb       	ldi	r20, 0xB8	; 184
    510c:	5f e7       	ldi	r21, 0x7F	; 127
    510e:	4e df       	rcall	.-356    	; 0x4fac <__mulsf3_pse>
    5110:	0f 92       	push	r0
    5112:	0f 92       	push	r0
    5114:	0f 92       	push	r0
    5116:	4d b7       	in	r20, 0x3d	; 61
    5118:	5e b7       	in	r21, 0x3e	; 62
    511a:	0f 92       	push	r0
    511c:	c0 d0       	rcall	.+384    	; 0x529e <modf>
    511e:	e4 ee       	ldi	r30, 0xE4	; 228
    5120:	f0 e0       	ldi	r31, 0x00	; 0
    5122:	16 d0       	rcall	.+44     	; 0x5150 <__fp_powser>
    5124:	4f 91       	pop	r20
    5126:	5f 91       	pop	r21
    5128:	ef 91       	pop	r30
    512a:	ff 91       	pop	r31
    512c:	e5 95       	asr	r30
    512e:	ee 1f       	adc	r30, r30
    5130:	ff 1f       	adc	r31, r31
    5132:	49 f0       	breq	.+18     	; 0x5146 <exp+0x4e>
    5134:	fe 57       	subi	r31, 0x7E	; 126
    5136:	e0 68       	ori	r30, 0x80	; 128
    5138:	44 27       	eor	r20, r20
    513a:	ee 0f       	add	r30, r30
    513c:	44 1f       	adc	r20, r20
    513e:	fa 95       	dec	r31
    5140:	e1 f7       	brne	.-8      	; 0x513a <exp+0x42>
    5142:	41 95       	neg	r20
    5144:	55 0b       	sbc	r21, r21
    5146:	32 d0       	rcall	.+100    	; 0x51ac <ldexp>
    5148:	0f 90       	pop	r0
    514a:	07 fe       	sbrs	r0, 7
    514c:	26 c0       	rjmp	.+76     	; 0x519a <inverse>
    514e:	08 95       	ret

00005150 <__fp_powser>:
    5150:	df 93       	push	r29
    5152:	cf 93       	push	r28
    5154:	1f 93       	push	r17
    5156:	0f 93       	push	r16
    5158:	ff 92       	push	r15
    515a:	ef 92       	push	r14
    515c:	df 92       	push	r13
    515e:	7b 01       	movw	r14, r22
    5160:	8c 01       	movw	r16, r24
    5162:	68 94       	set
    5164:	05 c0       	rjmp	.+10     	; 0x5170 <__fp_powser+0x20>
    5166:	da 2e       	mov	r13, r26
    5168:	ef 01       	movw	r28, r30
    516a:	1e df       	rcall	.-452    	; 0x4fa8 <__mulsf3x>
    516c:	fe 01       	movw	r30, r28
    516e:	e8 94       	clt
    5170:	a5 91       	lpm	r26, Z+
    5172:	25 91       	lpm	r18, Z+
    5174:	35 91       	lpm	r19, Z+
    5176:	45 91       	lpm	r20, Z+
    5178:	55 91       	lpm	r21, Z+
    517a:	ae f3       	brts	.-22     	; 0x5166 <__fp_powser+0x16>
    517c:	ef 01       	movw	r28, r30
    517e:	62 dd       	rcall	.-1340   	; 0x4c44 <__addsf3x>
    5180:	fe 01       	movw	r30, r28
    5182:	97 01       	movw	r18, r14
    5184:	a8 01       	movw	r20, r16
    5186:	da 94       	dec	r13
    5188:	79 f7       	brne	.-34     	; 0x5168 <__fp_powser+0x18>
    518a:	df 90       	pop	r13
    518c:	ef 90       	pop	r14
    518e:	ff 90       	pop	r15
    5190:	0f 91       	pop	r16
    5192:	1f 91       	pop	r17
    5194:	cf 91       	pop	r28
    5196:	df 91       	pop	r29
    5198:	08 95       	ret

0000519a <inverse>:
    519a:	9b 01       	movw	r18, r22
    519c:	ac 01       	movw	r20, r24
    519e:	60 e0       	ldi	r22, 0x00	; 0
    51a0:	70 e0       	ldi	r23, 0x00	; 0
    51a2:	80 e8       	ldi	r24, 0x80	; 128
    51a4:	9f e3       	ldi	r25, 0x3F	; 63
    51a6:	a5 cd       	rjmp	.-1206   	; 0x4cf2 <__divsf3>
    51a8:	9e ce       	rjmp	.-708    	; 0x4ee6 <__fp_inf>
    51aa:	ac c0       	rjmp	.+344    	; 0x5304 <__fp_mpack>

000051ac <ldexp>:
    51ac:	cc de       	rcall	.-616    	; 0x4f46 <__fp_splitA>
    51ae:	e8 f3       	brcs	.-6      	; 0x51aa <inverse+0x10>
    51b0:	99 23       	and	r25, r25
    51b2:	d9 f3       	breq	.-10     	; 0x51aa <inverse+0x10>
    51b4:	94 0f       	add	r25, r20
    51b6:	51 1d       	adc	r21, r1
    51b8:	bb f3       	brvs	.-18     	; 0x51a8 <inverse+0xe>
    51ba:	91 50       	subi	r25, 0x01	; 1
    51bc:	50 40       	sbci	r21, 0x00	; 0
    51be:	94 f0       	brlt	.+36     	; 0x51e4 <ldexp+0x38>
    51c0:	59 f0       	breq	.+22     	; 0x51d8 <ldexp+0x2c>
    51c2:	88 23       	and	r24, r24
    51c4:	32 f0       	brmi	.+12     	; 0x51d2 <ldexp+0x26>
    51c6:	66 0f       	add	r22, r22
    51c8:	77 1f       	adc	r23, r23
    51ca:	88 1f       	adc	r24, r24
    51cc:	91 50       	subi	r25, 0x01	; 1
    51ce:	50 40       	sbci	r21, 0x00	; 0
    51d0:	c1 f7       	brne	.-16     	; 0x51c2 <ldexp+0x16>
    51d2:	9e 3f       	cpi	r25, 0xFE	; 254
    51d4:	51 05       	cpc	r21, r1
    51d6:	44 f7       	brge	.-48     	; 0x51a8 <inverse+0xe>
    51d8:	88 0f       	add	r24, r24
    51da:	91 1d       	adc	r25, r1
    51dc:	96 95       	lsr	r25
    51de:	87 95       	ror	r24
    51e0:	97 f9       	bld	r25, 7
    51e2:	08 95       	ret
    51e4:	5f 3f       	cpi	r21, 0xFF	; 255
    51e6:	ac f0       	brlt	.+42     	; 0x5212 <ldexp+0x66>
    51e8:	98 3e       	cpi	r25, 0xE8	; 232
    51ea:	9c f0       	brlt	.+38     	; 0x5212 <ldexp+0x66>
    51ec:	bb 27       	eor	r27, r27
    51ee:	86 95       	lsr	r24
    51f0:	77 95       	ror	r23
    51f2:	67 95       	ror	r22
    51f4:	b7 95       	ror	r27
    51f6:	08 f4       	brcc	.+2      	; 0x51fa <ldexp+0x4e>
    51f8:	b1 60       	ori	r27, 0x01	; 1
    51fa:	93 95       	inc	r25
    51fc:	c1 f7       	brne	.-16     	; 0x51ee <ldexp+0x42>
    51fe:	bb 0f       	add	r27, r27
    5200:	58 f7       	brcc	.-42     	; 0x51d8 <ldexp+0x2c>
    5202:	11 f4       	brne	.+4      	; 0x5208 <ldexp+0x5c>
    5204:	60 ff       	sbrs	r22, 0
    5206:	e8 cf       	rjmp	.-48     	; 0x51d8 <ldexp+0x2c>
    5208:	6f 5f       	subi	r22, 0xFF	; 255
    520a:	7f 4f       	sbci	r23, 0xFF	; 255
    520c:	8f 4f       	sbci	r24, 0xFF	; 255
    520e:	9f 4f       	sbci	r25, 0xFF	; 255
    5210:	e3 cf       	rjmp	.-58     	; 0x51d8 <ldexp+0x2c>
    5212:	b4 ce       	rjmp	.-664    	; 0x4f7c <__fp_szero>
    5214:	0e f0       	brts	.+2      	; 0x5218 <ldexp+0x6c>
    5216:	76 c0       	rjmp	.+236    	; 0x5304 <__fp_mpack>
    5218:	6c ce       	rjmp	.-808    	; 0x4ef2 <__fp_nan>
    521a:	68 94       	set
    521c:	64 ce       	rjmp	.-824    	; 0x4ee6 <__fp_inf>

0000521e <log>:
    521e:	93 de       	rcall	.-730    	; 0x4f46 <__fp_splitA>
    5220:	c8 f3       	brcs	.-14     	; 0x5214 <ldexp+0x68>
    5222:	99 23       	and	r25, r25
    5224:	d1 f3       	breq	.-12     	; 0x521a <ldexp+0x6e>
    5226:	c6 f3       	brts	.-16     	; 0x5218 <ldexp+0x6c>
    5228:	df 93       	push	r29
    522a:	cf 93       	push	r28
    522c:	1f 93       	push	r17
    522e:	0f 93       	push	r16
    5230:	ff 92       	push	r15
    5232:	c9 2f       	mov	r28, r25
    5234:	dd 27       	eor	r29, r29
    5236:	88 23       	and	r24, r24
    5238:	2a f0       	brmi	.+10     	; 0x5244 <log+0x26>
    523a:	21 97       	sbiw	r28, 0x01	; 1
    523c:	66 0f       	add	r22, r22
    523e:	77 1f       	adc	r23, r23
    5240:	88 1f       	adc	r24, r24
    5242:	da f7       	brpl	.-10     	; 0x523a <log+0x1c>
    5244:	20 e0       	ldi	r18, 0x00	; 0
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	40 e8       	ldi	r20, 0x80	; 128
    524a:	5f eb       	ldi	r21, 0xBF	; 191
    524c:	9f e3       	ldi	r25, 0x3F	; 63
    524e:	88 39       	cpi	r24, 0x98	; 152
    5250:	20 f0       	brcs	.+8      	; 0x525a <log+0x3c>
    5252:	80 3e       	cpi	r24, 0xE0	; 224
    5254:	30 f0       	brcs	.+12     	; 0x5262 <log+0x44>
    5256:	21 96       	adiw	r28, 0x01	; 1
    5258:	8f 77       	andi	r24, 0x7F	; 127
    525a:	e3 dc       	rcall	.-1594   	; 0x4c22 <__addsf3>
    525c:	ec e0       	ldi	r30, 0x0C	; 12
    525e:	f1 e0       	ldi	r31, 0x01	; 1
    5260:	03 c0       	rjmp	.+6      	; 0x5268 <log+0x4a>
    5262:	df dc       	rcall	.-1602   	; 0x4c22 <__addsf3>
    5264:	e9 e3       	ldi	r30, 0x39	; 57
    5266:	f1 e0       	ldi	r31, 0x01	; 1
    5268:	73 df       	rcall	.-282    	; 0x5150 <__fp_powser>
    526a:	8b 01       	movw	r16, r22
    526c:	be 01       	movw	r22, r28
    526e:	ec 01       	movw	r28, r24
    5270:	fb 2e       	mov	r15, r27
    5272:	6f 57       	subi	r22, 0x7F	; 127
    5274:	71 09       	sbc	r23, r1
    5276:	75 95       	asr	r23
    5278:	77 1f       	adc	r23, r23
    527a:	88 0b       	sbc	r24, r24
    527c:	99 0b       	sbc	r25, r25
    527e:	d4 dd       	rcall	.-1112   	; 0x4e28 <__floatsisf>
    5280:	28 e1       	ldi	r18, 0x18	; 24
    5282:	32 e7       	ldi	r19, 0x72	; 114
    5284:	41 e3       	ldi	r20, 0x31	; 49
    5286:	5f e3       	ldi	r21, 0x3F	; 63
    5288:	8f de       	rcall	.-738    	; 0x4fa8 <__mulsf3x>
    528a:	af 2d       	mov	r26, r15
    528c:	98 01       	movw	r18, r16
    528e:	ae 01       	movw	r20, r28
    5290:	ff 90       	pop	r15
    5292:	0f 91       	pop	r16
    5294:	1f 91       	pop	r17
    5296:	cf 91       	pop	r28
    5298:	df 91       	pop	r29
    529a:	d4 dc       	rcall	.-1624   	; 0x4c44 <__addsf3x>
    529c:	3b ce       	rjmp	.-906    	; 0x4f14 <__fp_round>

0000529e <modf>:
    529e:	fa 01       	movw	r30, r20
    52a0:	dc 01       	movw	r26, r24
    52a2:	aa 0f       	add	r26, r26
    52a4:	bb 1f       	adc	r27, r27
    52a6:	9b 01       	movw	r18, r22
    52a8:	ac 01       	movw	r20, r24
    52aa:	bf 57       	subi	r27, 0x7F	; 127
    52ac:	28 f4       	brcc	.+10     	; 0x52b8 <modf+0x1a>
    52ae:	22 27       	eor	r18, r18
    52b0:	33 27       	eor	r19, r19
    52b2:	44 27       	eor	r20, r20
    52b4:	50 78       	andi	r21, 0x80	; 128
    52b6:	1f c0       	rjmp	.+62     	; 0x52f6 <modf+0x58>
    52b8:	b7 51       	subi	r27, 0x17	; 23
    52ba:	88 f4       	brcc	.+34     	; 0x52de <modf+0x40>
    52bc:	ab 2f       	mov	r26, r27
    52be:	00 24       	eor	r0, r0
    52c0:	46 95       	lsr	r20
    52c2:	37 95       	ror	r19
    52c4:	27 95       	ror	r18
    52c6:	01 1c       	adc	r0, r1
    52c8:	a3 95       	inc	r26
    52ca:	d2 f3       	brmi	.-12     	; 0x52c0 <modf+0x22>
    52cc:	00 20       	and	r0, r0
    52ce:	69 f0       	breq	.+26     	; 0x52ea <modf+0x4c>
    52d0:	22 0f       	add	r18, r18
    52d2:	33 1f       	adc	r19, r19
    52d4:	44 1f       	adc	r20, r20
    52d6:	b3 95       	inc	r27
    52d8:	da f3       	brmi	.-10     	; 0x52d0 <modf+0x32>
    52da:	0d d0       	rcall	.+26     	; 0x52f6 <modf+0x58>
    52dc:	a1 cc       	rjmp	.-1726   	; 0x4c20 <__subsf3>
    52de:	61 30       	cpi	r22, 0x01	; 1
    52e0:	71 05       	cpc	r23, r1
    52e2:	a0 e8       	ldi	r26, 0x80	; 128
    52e4:	8a 07       	cpc	r24, r26
    52e6:	b9 46       	sbci	r27, 0x69	; 105
    52e8:	30 f4       	brcc	.+12     	; 0x52f6 <modf+0x58>
    52ea:	9b 01       	movw	r18, r22
    52ec:	ac 01       	movw	r20, r24
    52ee:	66 27       	eor	r22, r22
    52f0:	77 27       	eor	r23, r23
    52f2:	88 27       	eor	r24, r24
    52f4:	90 78       	andi	r25, 0x80	; 128
    52f6:	30 96       	adiw	r30, 0x00	; 0
    52f8:	21 f0       	breq	.+8      	; 0x5302 <modf+0x64>
    52fa:	20 83       	st	Z, r18
    52fc:	31 83       	std	Z+1, r19	; 0x01
    52fe:	42 83       	std	Z+2, r20	; 0x02
    5300:	53 83       	std	Z+3, r21	; 0x03
    5302:	08 95       	ret

00005304 <__fp_mpack>:
    5304:	9f 3f       	cpi	r25, 0xFF	; 255
    5306:	49 f0       	breq	.+18     	; 0x531a <__fp_mpack+0x16>
    5308:	91 50       	subi	r25, 0x01	; 1
    530a:	28 f4       	brcc	.+10     	; 0x5316 <__fp_mpack+0x12>
    530c:	86 95       	lsr	r24
    530e:	77 95       	ror	r23
    5310:	67 95       	ror	r22
    5312:	b7 95       	ror	r27
    5314:	9f 5f       	subi	r25, 0xFF	; 255
    5316:	80 38       	cpi	r24, 0x80	; 128
    5318:	9f 4f       	sbci	r25, 0xFF	; 255
    531a:	88 0f       	add	r24, r24
    531c:	96 95       	lsr	r25
    531e:	87 95       	ror	r24
    5320:	97 f9       	bld	r25, 7
    5322:	08 95       	ret

00005324 <__mulsi3>:
    5324:	62 9f       	mul	r22, r18
    5326:	d0 01       	movw	r26, r0
    5328:	73 9f       	mul	r23, r19
    532a:	f0 01       	movw	r30, r0
    532c:	82 9f       	mul	r24, r18
    532e:	e0 0d       	add	r30, r0
    5330:	f1 1d       	adc	r31, r1
    5332:	64 9f       	mul	r22, r20
    5334:	e0 0d       	add	r30, r0
    5336:	f1 1d       	adc	r31, r1
    5338:	92 9f       	mul	r25, r18
    533a:	f0 0d       	add	r31, r0
    533c:	83 9f       	mul	r24, r19
    533e:	f0 0d       	add	r31, r0
    5340:	74 9f       	mul	r23, r20
    5342:	f0 0d       	add	r31, r0
    5344:	65 9f       	mul	r22, r21
    5346:	f0 0d       	add	r31, r0
    5348:	99 27       	eor	r25, r25
    534a:	72 9f       	mul	r23, r18
    534c:	b0 0d       	add	r27, r0
    534e:	e1 1d       	adc	r30, r1
    5350:	f9 1f       	adc	r31, r25
    5352:	63 9f       	mul	r22, r19
    5354:	b0 0d       	add	r27, r0
    5356:	e1 1d       	adc	r30, r1
    5358:	f9 1f       	adc	r31, r25
    535a:	bd 01       	movw	r22, r26
    535c:	cf 01       	movw	r24, r30
    535e:	11 24       	eor	r1, r1
    5360:	08 95       	ret

00005362 <__udivmodhi4>:
    5362:	aa 1b       	sub	r26, r26
    5364:	bb 1b       	sub	r27, r27
    5366:	51 e1       	ldi	r21, 0x11	; 17
    5368:	07 c0       	rjmp	.+14     	; 0x5378 <__udivmodhi4_ep>

0000536a <__udivmodhi4_loop>:
    536a:	aa 1f       	adc	r26, r26
    536c:	bb 1f       	adc	r27, r27
    536e:	a6 17       	cp	r26, r22
    5370:	b7 07       	cpc	r27, r23
    5372:	10 f0       	brcs	.+4      	; 0x5378 <__udivmodhi4_ep>
    5374:	a6 1b       	sub	r26, r22
    5376:	b7 0b       	sbc	r27, r23

00005378 <__udivmodhi4_ep>:
    5378:	88 1f       	adc	r24, r24
    537a:	99 1f       	adc	r25, r25
    537c:	5a 95       	dec	r21
    537e:	a9 f7       	brne	.-22     	; 0x536a <__udivmodhi4_loop>
    5380:	80 95       	com	r24
    5382:	90 95       	com	r25
    5384:	bc 01       	movw	r22, r24
    5386:	cd 01       	movw	r24, r26
    5388:	08 95       	ret

0000538a <__divmodhi4>:
    538a:	97 fb       	bst	r25, 7
    538c:	09 2e       	mov	r0, r25
    538e:	07 26       	eor	r0, r23
    5390:	0a d0       	rcall	.+20     	; 0x53a6 <__divmodhi4_neg1>
    5392:	77 fd       	sbrc	r23, 7
    5394:	04 d0       	rcall	.+8      	; 0x539e <__divmodhi4_neg2>
    5396:	e5 df       	rcall	.-54     	; 0x5362 <__udivmodhi4>
    5398:	06 d0       	rcall	.+12     	; 0x53a6 <__divmodhi4_neg1>
    539a:	00 20       	and	r0, r0
    539c:	1a f4       	brpl	.+6      	; 0x53a4 <__divmodhi4_exit>

0000539e <__divmodhi4_neg2>:
    539e:	70 95       	com	r23
    53a0:	61 95       	neg	r22
    53a2:	7f 4f       	sbci	r23, 0xFF	; 255

000053a4 <__divmodhi4_exit>:
    53a4:	08 95       	ret

000053a6 <__divmodhi4_neg1>:
    53a6:	f6 f7       	brtc	.-4      	; 0x53a4 <__divmodhi4_exit>
    53a8:	90 95       	com	r25
    53aa:	81 95       	neg	r24
    53ac:	9f 4f       	sbci	r25, 0xFF	; 255
    53ae:	08 95       	ret

000053b0 <__udivmodsi4>:
    53b0:	a1 e2       	ldi	r26, 0x21	; 33
    53b2:	1a 2e       	mov	r1, r26
    53b4:	aa 1b       	sub	r26, r26
    53b6:	bb 1b       	sub	r27, r27
    53b8:	fd 01       	movw	r30, r26
    53ba:	0d c0       	rjmp	.+26     	; 0x53d6 <__udivmodsi4_ep>

000053bc <__udivmodsi4_loop>:
    53bc:	aa 1f       	adc	r26, r26
    53be:	bb 1f       	adc	r27, r27
    53c0:	ee 1f       	adc	r30, r30
    53c2:	ff 1f       	adc	r31, r31
    53c4:	a2 17       	cp	r26, r18
    53c6:	b3 07       	cpc	r27, r19
    53c8:	e4 07       	cpc	r30, r20
    53ca:	f5 07       	cpc	r31, r21
    53cc:	20 f0       	brcs	.+8      	; 0x53d6 <__udivmodsi4_ep>
    53ce:	a2 1b       	sub	r26, r18
    53d0:	b3 0b       	sbc	r27, r19
    53d2:	e4 0b       	sbc	r30, r20
    53d4:	f5 0b       	sbc	r31, r21

000053d6 <__udivmodsi4_ep>:
    53d6:	66 1f       	adc	r22, r22
    53d8:	77 1f       	adc	r23, r23
    53da:	88 1f       	adc	r24, r24
    53dc:	99 1f       	adc	r25, r25
    53de:	1a 94       	dec	r1
    53e0:	69 f7       	brne	.-38     	; 0x53bc <__udivmodsi4_loop>
    53e2:	60 95       	com	r22
    53e4:	70 95       	com	r23
    53e6:	80 95       	com	r24
    53e8:	90 95       	com	r25
    53ea:	9b 01       	movw	r18, r22
    53ec:	ac 01       	movw	r20, r24
    53ee:	bd 01       	movw	r22, r26
    53f0:	cf 01       	movw	r24, r30
    53f2:	08 95       	ret

000053f4 <__divmodsi4>:
    53f4:	97 fb       	bst	r25, 7
    53f6:	09 2e       	mov	r0, r25
    53f8:	05 26       	eor	r0, r21
    53fa:	0e d0       	rcall	.+28     	; 0x5418 <__divmodsi4_neg1>
    53fc:	57 fd       	sbrc	r21, 7
    53fe:	04 d0       	rcall	.+8      	; 0x5408 <__divmodsi4_neg2>
    5400:	d7 df       	rcall	.-82     	; 0x53b0 <__udivmodsi4>
    5402:	0a d0       	rcall	.+20     	; 0x5418 <__divmodsi4_neg1>
    5404:	00 1c       	adc	r0, r0
    5406:	38 f4       	brcc	.+14     	; 0x5416 <__divmodsi4_exit>

00005408 <__divmodsi4_neg2>:
    5408:	50 95       	com	r21
    540a:	40 95       	com	r20
    540c:	30 95       	com	r19
    540e:	21 95       	neg	r18
    5410:	3f 4f       	sbci	r19, 0xFF	; 255
    5412:	4f 4f       	sbci	r20, 0xFF	; 255
    5414:	5f 4f       	sbci	r21, 0xFF	; 255

00005416 <__divmodsi4_exit>:
    5416:	08 95       	ret

00005418 <__divmodsi4_neg1>:
    5418:	f6 f7       	brtc	.-4      	; 0x5416 <__divmodsi4_exit>
    541a:	90 95       	com	r25
    541c:	80 95       	com	r24
    541e:	70 95       	com	r23
    5420:	61 95       	neg	r22
    5422:	7f 4f       	sbci	r23, 0xFF	; 255
    5424:	8f 4f       	sbci	r24, 0xFF	; 255
    5426:	9f 4f       	sbci	r25, 0xFF	; 255
    5428:	08 95       	ret

0000542a <_exit>:
    542a:	f8 94       	cli

0000542c <__stop_program>:
    542c:	ff cf       	rjmp	.-2      	; 0x542c <__stop_program>
