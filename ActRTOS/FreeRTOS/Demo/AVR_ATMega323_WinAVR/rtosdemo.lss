
rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800200  000024cc  00002560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000673  008002b2  008002b2  00002612  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00002612  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000009db  00000000  00000000  00002732  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002915  00000000  00000000  0000310d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bd5  00000000  00000000  00005a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002c5c  00000000  00000000  000065f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000780  00000000  00000000  00009254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001276  00000000  00000000  000099d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013c9  00000000  00000000  0000ac4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000c013  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 85 11 	jmp	0x230a	; 0x230a <__vector_17>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ec ec       	ldi	r30, 0xCC	; 204
      f8:	f4 e2       	ldi	r31, 0x24	; 36
      fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
     100:	a2 3b       	cpi	r26, 0xB2	; 178
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
     106:	19 e0       	ldi	r17, 0x09	; 9
     108:	a2 eb       	ldi	r26, 0xB2	; 178
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a5 32       	cpi	r26, 0x25	; 37
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <main>
     11a:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <PWM_Init_timer1_LED>:

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     122:	89 30       	cpi	r24, 0x09	; 9
     124:	49 f4       	brne	.+18     	; 0x138 <PWM_Init_timer1_LED+0x16>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     126:	80 91 80 00 	lds	r24, 0x0080
     12a:	82 60       	ori	r24, 0x02	; 2
     12c:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,PWM10);
     130:	80 91 80 00 	lds	r24, 0x0080
     134:	8e 7f       	andi	r24, 0xFE	; 254
     136:	0e c0       	rjmp	.+28     	; 0x154 <PWM_Init_timer1_LED+0x32>
	}
	else if( bitRes == 10 )
     138:	8a 30       	cpi	r24, 0x0A	; 10
     13a:	21 f4       	brne	.+8      	; 0x144 <PWM_Init_timer1_LED+0x22>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     13c:	80 91 80 00 	lds	r24, 0x0080
     140:	82 60       	ori	r24, 0x02	; 2
     142:	03 c0       	rjmp	.+6      	; 0x14a <PWM_Init_timer1_LED+0x28>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     144:	80 91 80 00 	lds	r24, 0x0080
     148:	8d 7f       	andi	r24, 0xFD	; 253
     14a:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,PWM10);
     14e:	80 91 80 00 	lds	r24, 0x0080
     152:	81 60       	ori	r24, 0x01	; 1
     154:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     158:	10 92 8b 00 	sts	0x008B, r1
     15c:	10 92 8a 00 	sts	0x008A, r1
}
     160:	08 95       	ret

00000162 <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     162:	89 30       	cpi	r24, 0x09	; 9
     164:	49 f4       	brne	.+18     	; 0x178 <PWM_Init_timer2_H6+0x16>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
     166:	80 91 b0 00 	lds	r24, 0x00B0
     16a:	82 60       	ori	r24, 0x02	; 2
     16c:	80 93 b0 00 	sts	0x00B0, r24
		cbi(TCCR2A,PWM10);
     170:	80 91 b0 00 	lds	r24, 0x00B0
     174:	8e 7f       	andi	r24, 0xFE	; 254
     176:	0e c0       	rjmp	.+28     	; 0x194 <PWM_Init_timer2_H6+0x32>
	}
	else if( bitRes == 10 )
     178:	8a 30       	cpi	r24, 0x0A	; 10
     17a:	21 f4       	brne	.+8      	; 0x184 <PWM_Init_timer2_H6+0x22>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
     17c:	80 91 b0 00 	lds	r24, 0x00B0
     180:	82 60       	ori	r24, 0x02	; 2
     182:	03 c0       	rjmp	.+6      	; 0x18a <PWM_Init_timer2_H6+0x28>
		sbi(TCCR2A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
     184:	80 91 b0 00 	lds	r24, 0x00B0
     188:	8d 7f       	andi	r24, 0xFD	; 253
     18a:	80 93 b0 00 	sts	0x00B0, r24
		sbi(TCCR2A,PWM10);
     18e:	80 91 b0 00 	lds	r24, 0x00B0
     192:	81 60       	ori	r24, 0x01	; 1
     194:	80 93 b0 00 	sts	0x00B0, r24
	}
	// clear output compare values
	OCR2B = 0;
     198:	10 92 b4 00 	sts	0x00B4, r1
}
     19c:	08 95       	ret

0000019e <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     19e:	89 30       	cpi	r24, 0x09	; 9
     1a0:	49 f4       	brne	.+18     	; 0x1b4 <PWM_Init_timer3_E3+0x16>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
     1a2:	80 91 90 00 	lds	r24, 0x0090
     1a6:	82 60       	ori	r24, 0x02	; 2
     1a8:	80 93 90 00 	sts	0x0090, r24
		cbi(TCCR3A,PWM10);
     1ac:	80 91 90 00 	lds	r24, 0x0090
     1b0:	8e 7f       	andi	r24, 0xFE	; 254
     1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <PWM_Init_timer3_E3+0x32>
	}
	else if( bitRes == 10 )
     1b4:	8a 30       	cpi	r24, 0x0A	; 10
     1b6:	21 f4       	brne	.+8      	; 0x1c0 <PWM_Init_timer3_E3+0x22>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
     1b8:	80 91 90 00 	lds	r24, 0x0090
     1bc:	82 60       	ori	r24, 0x02	; 2
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <PWM_Init_timer3_E3+0x28>
		sbi(TCCR3A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
     1c0:	80 91 90 00 	lds	r24, 0x0090
     1c4:	8d 7f       	andi	r24, 0xFD	; 253
     1c6:	80 93 90 00 	sts	0x0090, r24
		sbi(TCCR3A,PWM10);
     1ca:	80 91 90 00 	lds	r24, 0x0090
     1ce:	81 60       	ori	r24, 0x01	; 1
     1d0:	80 93 90 00 	sts	0x0090, r24
	}
	// clear output compare values
	OCR3A = 0;
     1d4:	10 92 99 00 	sts	0x0099, r1
     1d8:	10 92 98 00 	sts	0x0098, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     1dc:	08 95       	ret

000001de <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     1de:	89 30       	cpi	r24, 0x09	; 9
     1e0:	49 f4       	brne	.+18     	; 0x1f4 <PWM_Init_timer3_E4+0x16>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
     1e2:	80 91 91 00 	lds	r24, 0x0091
     1e6:	82 60       	ori	r24, 0x02	; 2
     1e8:	80 93 91 00 	sts	0x0091, r24
		cbi(TCCR3B,PWM10);
     1ec:	80 91 91 00 	lds	r24, 0x0091
     1f0:	8e 7f       	andi	r24, 0xFE	; 254
     1f2:	0e c0       	rjmp	.+28     	; 0x210 <PWM_Init_timer3_E4+0x32>
	}
	else if( bitRes == 10 )
     1f4:	8a 30       	cpi	r24, 0x0A	; 10
     1f6:	21 f4       	brne	.+8      	; 0x200 <PWM_Init_timer3_E4+0x22>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
     1f8:	80 91 91 00 	lds	r24, 0x0091
     1fc:	82 60       	ori	r24, 0x02	; 2
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <PWM_Init_timer3_E4+0x28>
		sbi(TCCR3B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
     200:	80 91 91 00 	lds	r24, 0x0091
     204:	8d 7f       	andi	r24, 0xFD	; 253
     206:	80 93 91 00 	sts	0x0091, r24
		sbi(TCCR3B,PWM10);
     20a:	80 91 91 00 	lds	r24, 0x0091
     20e:	81 60       	ori	r24, 0x01	; 1
     210:	80 93 91 00 	sts	0x0091, r24
	}
	// clear output compare values
	OCR3B = 0;
     214:	10 92 9b 00 	sts	0x009B, r1
     218:	10 92 9a 00 	sts	0x009A, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     21c:	08 95       	ret

0000021e <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     21e:	89 30       	cpi	r24, 0x09	; 9
     220:	49 f4       	brne	.+18     	; 0x234 <PWM_Init_timer3_E5+0x16>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
     222:	80 91 92 00 	lds	r24, 0x0092
     226:	82 60       	ori	r24, 0x02	; 2
     228:	80 93 92 00 	sts	0x0092, r24
		cbi(TCCR3C,PWM10);
     22c:	80 91 92 00 	lds	r24, 0x0092
     230:	8e 7f       	andi	r24, 0xFE	; 254
     232:	0e c0       	rjmp	.+28     	; 0x250 <PWM_Init_timer3_E5+0x32>
	}
	else if( bitRes == 10 )
     234:	8a 30       	cpi	r24, 0x0A	; 10
     236:	21 f4       	brne	.+8      	; 0x240 <PWM_Init_timer3_E5+0x22>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
     238:	80 91 92 00 	lds	r24, 0x0092
     23c:	82 60       	ori	r24, 0x02	; 2
     23e:	03 c0       	rjmp	.+6      	; 0x246 <PWM_Init_timer3_E5+0x28>
		sbi(TCCR3C,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
     240:	80 91 92 00 	lds	r24, 0x0092
     244:	8d 7f       	andi	r24, 0xFD	; 253
     246:	80 93 92 00 	sts	0x0092, r24
		sbi(TCCR3C,PWM10);
     24a:	80 91 92 00 	lds	r24, 0x0092
     24e:	81 60       	ori	r24, 0x01	; 1
     250:	80 93 92 00 	sts	0x0092, r24
	}
	// clear output compare values
	OCR3C = 0;
     254:	10 92 9d 00 	sts	0x009D, r1
     258:	10 92 9c 00 	sts	0x009C, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     25c:	08 95       	ret

0000025e <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     25e:	89 30       	cpi	r24, 0x09	; 9
     260:	49 f4       	brne	.+18     	; 0x274 <PWM_Init_timer4_H3+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     262:	80 91 a0 00 	lds	r24, 0x00A0
     266:	82 60       	ori	r24, 0x02	; 2
     268:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     26c:	80 91 a0 00 	lds	r24, 0x00A0
     270:	8e 7f       	andi	r24, 0xFE	; 254
     272:	0e c0       	rjmp	.+28     	; 0x290 <PWM_Init_timer4_H3+0x32>
	}
	else if( bitRes == 10 )
     274:	8a 30       	cpi	r24, 0x0A	; 10
     276:	21 f4       	brne	.+8      	; 0x280 <PWM_Init_timer4_H3+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     278:	80 91 a0 00 	lds	r24, 0x00A0
     27c:	82 60       	ori	r24, 0x02	; 2
     27e:	03 c0       	rjmp	.+6      	; 0x286 <PWM_Init_timer4_H3+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     280:	80 91 a0 00 	lds	r24, 0x00A0
     284:	8d 7f       	andi	r24, 0xFD	; 253
     286:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     28a:	80 91 a0 00 	lds	r24, 0x00A0
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4A = 0;
     294:	10 92 a9 00 	sts	0x00A9, r1
     298:	10 92 a8 00 	sts	0x00A8, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     29c:	08 95       	ret

0000029e <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     29e:	89 30       	cpi	r24, 0x09	; 9
     2a0:	49 f4       	brne	.+18     	; 0x2b4 <PWM_Init_timer4_H4+0x16>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
     2a2:	80 91 a1 00 	lds	r24, 0x00A1
     2a6:	82 60       	ori	r24, 0x02	; 2
     2a8:	80 93 a1 00 	sts	0x00A1, r24
		cbi(TCCR4B,PWM10);
     2ac:	80 91 a1 00 	lds	r24, 0x00A1
     2b0:	8e 7f       	andi	r24, 0xFE	; 254
     2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <PWM_Init_timer4_H4+0x32>
	}
	else if( bitRes == 10 )
     2b4:	8a 30       	cpi	r24, 0x0A	; 10
     2b6:	21 f4       	brne	.+8      	; 0x2c0 <PWM_Init_timer4_H4+0x22>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
     2b8:	80 91 a1 00 	lds	r24, 0x00A1
     2bc:	82 60       	ori	r24, 0x02	; 2
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <PWM_Init_timer4_H4+0x28>
		sbi(TCCR4B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
     2c0:	80 91 a1 00 	lds	r24, 0x00A1
     2c4:	8d 7f       	andi	r24, 0xFD	; 253
     2c6:	80 93 a1 00 	sts	0x00A1, r24
		sbi(TCCR4B,PWM10);
     2ca:	80 91 a1 00 	lds	r24, 0x00A1
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	80 93 a1 00 	sts	0x00A1, r24
	}
	// clear output compare values
	OCR4B = 0;
     2d4:	10 92 ab 00 	sts	0x00AB, r1
     2d8:	10 92 aa 00 	sts	0x00AA, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     2dc:	08 95       	ret

000002de <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     2de:	89 30       	cpi	r24, 0x09	; 9
     2e0:	49 f4       	brne	.+18     	; 0x2f4 <PWM_Init_timer4_H5+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     2e2:	80 91 a0 00 	lds	r24, 0x00A0
     2e6:	82 60       	ori	r24, 0x02	; 2
     2e8:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     2ec:	80 91 a0 00 	lds	r24, 0x00A0
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	0e c0       	rjmp	.+28     	; 0x310 <PWM_Init_timer4_H5+0x32>
	}
	else if( bitRes == 10 )
     2f4:	8a 30       	cpi	r24, 0x0A	; 10
     2f6:	21 f4       	brne	.+8      	; 0x300 <PWM_Init_timer4_H5+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     2f8:	80 91 a0 00 	lds	r24, 0x00A0
     2fc:	82 60       	ori	r24, 0x02	; 2
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <PWM_Init_timer4_H5+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     300:	80 91 a0 00 	lds	r24, 0x00A0
     304:	8d 7f       	andi	r24, 0xFD	; 253
     306:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     30a:	80 91 a0 00 	lds	r24, 0x00A0
     30e:	81 60       	ori	r24, 0x01	; 1
     310:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4C = 0;
     314:	10 92 ad 00 	sts	0x00AD, r1
     318:	10 92 ac 00 	sts	0x00AC, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     31c:	08 95       	ret

0000031e <timer1PWMInitICR>:
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     31e:	e0 e8       	ldi	r30, 0x80	; 128
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	20 81       	ld	r18, Z
     324:	2e 7f       	andi	r18, 0xFE	; 254
     326:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     328:	20 81       	ld	r18, Z
     32a:	22 60       	ori	r18, 0x02	; 2
     32c:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     32e:	e1 e8       	ldi	r30, 0x81	; 129
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	20 81       	ld	r18, Z
     334:	28 60       	ori	r18, 0x08	; 8
     336:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     338:	20 81       	ld	r18, Z
     33a:	20 61       	ori	r18, 0x10	; 16
     33c:	20 83       	st	Z, r18
	
	// set top count value
	ICR1 = topcount;
     33e:	90 93 87 00 	sts	0x0087, r25
     342:	80 93 86 00 	sts	0x0086, r24
	
	// clear output compare values
	OCR1A = 0;
     346:	10 92 89 00 	sts	0x0089, r1
     34a:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     34e:	10 92 8b 00 	sts	0x008B, r1
     352:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     356:	10 92 8d 00 	sts	0x008D, r1
     35a:	10 92 8c 00 	sts	0x008C, r1
}
     35e:	08 95       	ret

00000360 <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
     360:	e0 e9       	ldi	r30, 0x90	; 144
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	20 81       	ld	r18, Z
     366:	2e 7f       	andi	r18, 0xFE	; 254
     368:	20 83       	st	Z, r18
	sbi(TCCR3A,WGM11);
     36a:	20 81       	ld	r18, Z
     36c:	22 60       	ori	r18, 0x02	; 2
     36e:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM12);
     370:	e1 e9       	ldi	r30, 0x91	; 145
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	20 81       	ld	r18, Z
     376:	28 60       	ori	r18, 0x08	; 8
     378:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM13);
     37a:	20 81       	ld	r18, Z
     37c:	20 61       	ori	r18, 0x10	; 16
     37e:	20 83       	st	Z, r18
	
	// set top count value
	ICR3 = topcount;
     380:	90 93 97 00 	sts	0x0097, r25
     384:	80 93 96 00 	sts	0x0096, r24
	
	// clear output compare values
	OCR3A = 0;
     388:	10 92 99 00 	sts	0x0099, r1
     38c:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
     390:	10 92 9b 00 	sts	0x009B, r1
     394:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
     398:	10 92 9d 00 	sts	0x009D, r1
     39c:	10 92 9c 00 	sts	0x009C, r1
}
     3a0:	08 95       	ret

000003a2 <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
     3a2:	e0 ea       	ldi	r30, 0xA0	; 160
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	20 81       	ld	r18, Z
     3a8:	2e 7f       	andi	r18, 0xFE	; 254
     3aa:	20 83       	st	Z, r18
	sbi(TCCR4A,WGM11);
     3ac:	20 81       	ld	r18, Z
     3ae:	22 60       	ori	r18, 0x02	; 2
     3b0:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM12);
     3b2:	e1 ea       	ldi	r30, 0xA1	; 161
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	20 81       	ld	r18, Z
     3b8:	28 60       	ori	r18, 0x08	; 8
     3ba:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM13);
     3bc:	20 81       	ld	r18, Z
     3be:	20 61       	ori	r18, 0x10	; 16
     3c0:	20 83       	st	Z, r18
	
	// set top count value
	ICR4 = topcount;
     3c2:	90 93 a7 00 	sts	0x00A7, r25
     3c6:	80 93 a6 00 	sts	0x00A6, r24
	
	// clear output compare values
	OCR4A = 0;
     3ca:	10 92 a9 00 	sts	0x00A9, r1
     3ce:	10 92 a8 00 	sts	0x00A8, r1
	OCR4B = 0;
     3d2:	10 92 ab 00 	sts	0x00AB, r1
     3d6:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
     3da:	10 92 ad 00 	sts	0x00AD, r1
     3de:	10 92 ac 00 	sts	0x00AC, r1
}
     3e2:	08 95       	ret

000003e4 <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
	sbi(TCCR1A,COM1B1);
     3e4:	e0 e8       	ldi	r30, 0x80	; 128
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	80 62       	ori	r24, 0x20	; 32
     3ec:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     3ee:	80 81       	ld	r24, Z
     3f0:	8f 7e       	andi	r24, 0xEF	; 239
     3f2:	80 83       	st	Z, r24
}
     3f4:	08 95       	ret

000003f6 <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
	sbi(TCCR2A,COM2B1);
     3f6:	e0 eb       	ldi	r30, 0xB0	; 176
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     400:	80 81       	ld	r24, Z
     402:	8f 7e       	andi	r24, 0xEF	; 239
     404:	80 83       	st	Z, r24
}
     406:	08 95       	ret

00000408 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
	sbi(TCCR3A,COM3A1);
     408:	e0 e9       	ldi	r30, 0x90	; 144
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	80 68       	ori	r24, 0x80	; 128
     410:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     412:	80 81       	ld	r24, Z
     414:	8f 7b       	andi	r24, 0xBF	; 191
     416:	80 83       	st	Z, r24
}
     418:	08 95       	ret

0000041a <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
	sbi(TCCR3A,COM3B1);
     41a:	e0 e9       	ldi	r30, 0x90	; 144
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 62       	ori	r24, 0x20	; 32
     422:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     424:	80 81       	ld	r24, Z
     426:	8f 7e       	andi	r24, 0xEF	; 239
     428:	80 83       	st	Z, r24
}
     42a:	08 95       	ret

0000042c <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
	sbi(TCCR3A,COM3C1);
     42c:	e0 e9       	ldi	r30, 0x90	; 144
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	88 60       	ori	r24, 0x08	; 8
     434:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     436:	80 81       	ld	r24, Z
     438:	8b 7f       	andi	r24, 0xFB	; 251
     43a:	80 83       	st	Z, r24
}
     43c:	08 95       	ret

0000043e <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
	sbi(TCCR4A,COM4A1);
     43e:	e0 ea       	ldi	r30, 0xA0	; 160
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	80 68       	ori	r24, 0x80	; 128
     446:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     448:	80 81       	ld	r24, Z
     44a:	8f 7b       	andi	r24, 0xBF	; 191
     44c:	80 83       	st	Z, r24
}
     44e:	08 95       	ret

00000450 <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
	sbi(TCCR4A,COM4B1);
     450:	e0 ea       	ldi	r30, 0xA0	; 160
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	80 62       	ori	r24, 0x20	; 32
     458:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     45a:	80 81       	ld	r24, Z
     45c:	8f 7e       	andi	r24, 0xEF	; 239
     45e:	80 83       	st	Z, r24
}
     460:	08 95       	ret

00000462 <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
	sbi(TCCR4A,COM4C1);
     462:	e0 ea       	ldi	r30, 0xA0	; 160
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     46c:	80 81       	ld	r24, Z
     46e:	8b 7f       	andi	r24, 0xFB	; 251
     470:	80 83       	st	Z, r24
}
     472:	08 95       	ret

00000474 <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     474:	e0 e8       	ldi	r30, 0x80	; 128
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	8f 7d       	andi	r24, 0xDF	; 223
     47c:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     47e:	80 81       	ld	r24, Z
     480:	8f 7e       	andi	r24, 0xEF	; 239
     482:	80 83       	st	Z, r24
}
     484:	08 95       	ret

00000486 <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     486:	e0 eb       	ldi	r30, 0xB0	; 176
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8f 7d       	andi	r24, 0xDF	; 223
     48e:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     490:	80 81       	ld	r24, Z
     492:	8f 7e       	andi	r24, 0xEF	; 239
     494:	80 83       	st	Z, r24
}
     496:	08 95       	ret

00000498 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     498:	e0 e9       	ldi	r30, 0x90	; 144
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	8f 77       	andi	r24, 0x7F	; 127
     4a0:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     4a2:	80 81       	ld	r24, Z
     4a4:	8f 7b       	andi	r24, 0xBF	; 191
     4a6:	80 83       	st	Z, r24
}
     4a8:	08 95       	ret

000004aa <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     4aa:	e0 e9       	ldi	r30, 0x90	; 144
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	8f 7d       	andi	r24, 0xDF	; 223
     4b2:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     4b4:	80 81       	ld	r24, Z
     4b6:	8f 7e       	andi	r24, 0xEF	; 239
     4b8:	80 83       	st	Z, r24
}
     4ba:	08 95       	ret

000004bc <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     4bc:	e0 e9       	ldi	r30, 0x90	; 144
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	87 7f       	andi	r24, 0xF7	; 247
     4c4:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     4c6:	80 81       	ld	r24, Z
     4c8:	8b 7f       	andi	r24, 0xFB	; 251
     4ca:	80 83       	st	Z, r24
}
     4cc:	08 95       	ret

000004ce <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     4ce:	e0 ea       	ldi	r30, 0xA0	; 160
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	8f 77       	andi	r24, 0x7F	; 127
     4d6:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     4d8:	80 81       	ld	r24, Z
     4da:	8f 7b       	andi	r24, 0xBF	; 191
     4dc:	80 83       	st	Z, r24
}
     4de:	08 95       	ret

000004e0 <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     4e0:	e0 ea       	ldi	r30, 0xA0	; 160
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	8f 7d       	andi	r24, 0xDF	; 223
     4e8:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     4ea:	80 81       	ld	r24, Z
     4ec:	8f 7e       	andi	r24, 0xEF	; 239
     4ee:	80 83       	st	Z, r24
}
     4f0:	08 95       	ret

000004f2 <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     4f2:	e0 ea       	ldi	r30, 0xA0	; 160
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	87 7f       	andi	r24, 0xF7	; 247
     4fa:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     4fc:	80 81       	ld	r24, Z
     4fe:	8b 7f       	andi	r24, 0xFB	; 251
     500:	80 83       	st	Z, r24
}
     502:	08 95       	ret

00000504 <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
	cbi(TCCR1A,PWM11);
     504:	e0 e8       	ldi	r30, 0x80	; 128
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	8d 7f       	andi	r24, 0xFD	; 253
     50c:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM10);
     50e:	80 81       	ld	r24, Z
     510:	8e 7f       	andi	r24, 0xFE	; 254
     512:	80 83       	st	Z, r24
}

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     514:	80 81       	ld	r24, Z
     516:	8f 7d       	andi	r24, 0xDF	; 223
     518:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     51a:	80 81       	ld	r24, Z
     51c:	8f 7e       	andi	r24, 0xEF	; 239
     51e:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
	//timer2PWMCOff();
}
     520:	08 95       	ret

00000522 <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
	cbi(TCCR2A,PWM11);
     522:	e0 eb       	ldi	r30, 0xB0	; 176
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	8d 7f       	andi	r24, 0xFD	; 253
     52a:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM10);
     52c:	80 81       	ld	r24, Z
     52e:	8e 7f       	andi	r24, 0xFE	; 254
     530:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     532:	80 81       	ld	r24, Z
     534:	8f 7d       	andi	r24, 0xDF	; 223
     536:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     538:	80 81       	ld	r24, Z
     53a:	8f 7e       	andi	r24, 0xEF	; 239
     53c:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM11);
	cbi(TCCR2A,PWM10);
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
	//timer2PWMCOff();
}
     53e:	08 95       	ret

00000540 <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
	cbi(TCCR3A,PWM11);
     540:	e0 e9       	ldi	r30, 0x90	; 144
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	8d 7f       	andi	r24, 0xFD	; 253
     548:	80 83       	st	Z, r24
	cbi(TCCR3A,PWM10);
     54a:	80 81       	ld	r24, Z
     54c:	8e 7f       	andi	r24, 0xFE	; 254
     54e:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B1);
	cbi(TCCR2A,COM2B0);
}
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     550:	80 81       	ld	r24, Z
     552:	8f 77       	andi	r24, 0x7F	; 127
     554:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     556:	80 81       	ld	r24, Z
     558:	8f 7b       	andi	r24, 0xBF	; 191
     55a:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     55c:	80 81       	ld	r24, Z
     55e:	8f 7d       	andi	r24, 0xDF	; 223
     560:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     562:	80 81       	ld	r24, Z
     564:	8f 7e       	andi	r24, 0xEF	; 239
     566:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     568:	80 81       	ld	r24, Z
     56a:	87 7f       	andi	r24, 0xF7	; 247
     56c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     56e:	80 81       	ld	r24, Z
     570:	8b 7f       	andi	r24, 0xFB	; 251
     572:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
	PWM_timer3_Off_E4();
	PWM_timer3_Off_E5();
	//timer2PWMCOff();
}
     574:	08 95       	ret

00000576 <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
	cbi(TCCR4A,PWM11);
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	8d 7f       	andi	r24, 0xFD	; 253
     57e:	80 83       	st	Z, r24
	cbi(TCCR4A,PWM10);
     580:	80 81       	ld	r24, Z
     582:	8e 7f       	andi	r24, 0xFE	; 254
     584:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C1);
	cbi(TCCR3A,COM3C0);
}
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     586:	80 81       	ld	r24, Z
     588:	8f 77       	andi	r24, 0x7F	; 127
     58a:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     58c:	80 81       	ld	r24, Z
     58e:	8f 7b       	andi	r24, 0xBF	; 191
     590:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     592:	80 81       	ld	r24, Z
     594:	8f 7d       	andi	r24, 0xDF	; 223
     596:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     598:	80 81       	ld	r24, Z
     59a:	8f 7e       	andi	r24, 0xEF	; 239
     59c:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     59e:	80 81       	ld	r24, Z
     5a0:	87 7f       	andi	r24, 0xF7	; 247
     5a2:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     5a4:	80 81       	ld	r24, Z
     5a6:	8b 7f       	andi	r24, 0xFB	; 251
     5a8:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
	PWM_timer4_Off_H4();
	PWM_timer4_Off_H5();
	//timer2PWMCOff();
}
     5aa:	08 95       	ret

000005ac <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
     5ac:	90 93 8b 00 	sts	0x008B, r25
     5b0:	80 93 8a 00 	sts	0x008A, r24
     5b4:	08 95       	ret

000005b6 <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     5b6:	80 93 b4 00 	sts	0x00B4, r24
     5ba:	08 95       	ret

000005bc <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
     5bc:	90 93 99 00 	sts	0x0099, r25
     5c0:	80 93 98 00 	sts	0x0098, r24
     5c4:	08 95       	ret

000005c6 <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
     5c6:	90 93 9b 00 	sts	0x009B, r25
     5ca:	80 93 9a 00 	sts	0x009A, r24
     5ce:	08 95       	ret

000005d0 <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
     5d0:	90 93 9d 00 	sts	0x009D, r25
     5d4:	80 93 9c 00 	sts	0x009C, r24
     5d8:	08 95       	ret

000005da <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
     5da:	90 93 a9 00 	sts	0x00A9, r25
     5de:	80 93 a8 00 	sts	0x00A8, r24
     5e2:	08 95       	ret

000005e4 <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
     5e4:	90 93 ab 00 	sts	0x00AB, r25
     5e8:	80 93 aa 00 	sts	0x00AA, r24
     5ec:	08 95       	ret

000005ee <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
     5ee:	90 93 ad 00 	sts	0x00AD, r25
     5f2:	80 93 ac 00 	sts	0x00AC, r24
     5f6:	08 95       	ret

000005f8 <configure_ports>:
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
     5f8:	10 ba       	out	0x10, r1	; 16
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
     5fa:	11 ba       	out	0x11, r1	; 17
	DDRK = 0b00000000;  //configure all K ports for input				0x00
     5fc:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
     600:	10 92 08 01 	sts	0x0108, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	91 b9       	out	0x01, r25	; 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
     608:	80 e4       	ldi	r24, 0x40	; 64
     60a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;  //configure ports for output
     60c:	97 b9       	out	0x07, r25	; 7
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
     60e:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, PD1); // SDA pull-up
     610:	59 9a       	sbi	0x0b, 1	; 11
	DDRD = 0b11110011;  //configure ports for output
     612:	83 ef       	ldi	r24, 0xF3	; 243
     614:	8a b9       	out	0x0a, r24	; 10
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
     616:	8e ef       	ldi	r24, 0xFE	; 254
     618:	8d b9       	out	0x0d, r24	; 13
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
     61a:	a5 9a       	sbi	0x14, 5	; 20
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
     61c:	9d 98       	cbi	0x13, 5	; 19
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
     61e:	80 93 01 01 	sts	0x0101, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
     622:	80 93 04 01 	sts	0x0104, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
     626:	08 95       	ret

00000628 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
	}
     628:	08 95       	ret

0000062a <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     62a:	2e 9a       	sbi	0x05, 6	; 5
     62c:	08 95       	ret

0000062e <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     62e:	2e 98       	cbi	0x05, 6	; 5
     630:	08 95       	ret

00000632 <button_pressed>:


//*****************BUTTON****************
int button_pressed(void)
	{
	return (bit_is_clear(PING, 5));
     632:	22 b3       	in	r18, 0x12	; 18
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	85 e0       	ldi	r24, 0x05	; 5
     638:	36 95       	lsr	r19
     63a:	27 95       	ror	r18
     63c:	8a 95       	dec	r24
     63e:	e1 f7       	brne	.-8      	; 0x638 <button_pressed+0x6>
     640:	20 95       	com	r18
     642:	30 95       	com	r19
     644:	21 70       	andi	r18, 0x01	; 1
     646:	30 70       	andi	r19, 0x00	; 0
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
     648:	c9 01       	movw	r24, r18
     64a:	08 95       	ret

0000064c <cos_SoR>:
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
	if (degrees >= 0)//positive angles
     64c:	97 fd       	sbrc	r25, 7
     64e:	10 c0       	rjmp	.+32     	; 0x670 <cos_SoR+0x24>
		return angtable[degrees/5];
     650:	25 e0       	ldi	r18, 0x05	; 5
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	0e 94 13 12 	call	0x2426	; 0x2426 <__divmodsi4>
     65c:	da 01       	movw	r26, r20
     65e:	c9 01       	movw	r24, r18
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	81 5f       	subi	r24, 0xF1	; 241
     666:	9d 4f       	sbci	r25, 0xFD	; 253
     668:	fc 01       	movw	r30, r24
     66a:	20 81       	ld	r18, Z
     66c:	31 81       	ldd	r19, Z+1	; 0x01
     66e:	17 c0       	rjmp	.+46     	; 0x69e <cos_SoR+0x52>
	else
		return -angtable[72-(-degrees)/5];
     670:	25 e0       	ldi	r18, 0x05	; 5
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	0e 94 13 12 	call	0x2426	; 0x2426 <__divmodsi4>
     67c:	da 01       	movw	r26, r20
     67e:	c9 01       	movw	r24, r18
     680:	88 5b       	subi	r24, 0xB8	; 184
     682:	9f 4f       	sbci	r25, 0xFF	; 255
     684:	af 4f       	sbci	r26, 0xFF	; 255
     686:	bf 4f       	sbci	r27, 0xFF	; 255
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	81 5f       	subi	r24, 0xF1	; 241
     68e:	9d 4f       	sbci	r25, 0xFD	; 253
     690:	fc 01       	movw	r30, r24
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	22 27       	eor	r18, r18
     698:	33 27       	eor	r19, r19
     69a:	28 1b       	sub	r18, r24
     69c:	39 0b       	sbc	r19, r25
	}
     69e:	c9 01       	movw	r24, r18
     6a0:	08 95       	ret

000006a2 <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
	degrees=degrees - 90;//phase shift 90 degrees
     6a2:	6a 55       	subi	r22, 0x5A	; 90
     6a4:	70 40       	sbci	r23, 0x00	; 0
     6a6:	80 40       	sbci	r24, 0x00	; 0
     6a8:	90 40       	sbci	r25, 0x00	; 0

	if (degrees >= 0)//positive angles
     6aa:	97 fd       	sbrc	r25, 7
     6ac:	10 c0       	rjmp	.+32     	; 0x6ce <sin_SoR+0x2c>
		return angtable[degrees/5];
     6ae:	25 e0       	ldi	r18, 0x05	; 5
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	0e 94 13 12 	call	0x2426	; 0x2426 <__divmodsi4>
     6ba:	da 01       	movw	r26, r20
     6bc:	c9 01       	movw	r24, r18
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	81 5f       	subi	r24, 0xF1	; 241
     6c4:	9d 4f       	sbci	r25, 0xFD	; 253
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 81       	ld	r18, Z
     6ca:	31 81       	ldd	r19, Z+1	; 0x01
     6cc:	17 c0       	rjmp	.+46     	; 0x6fc <sin_SoR+0x5a>
	else
		return -angtable[72-(-degrees)/5];
     6ce:	25 e0       	ldi	r18, 0x05	; 5
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	0e 94 13 12 	call	0x2426	; 0x2426 <__divmodsi4>
     6da:	da 01       	movw	r26, r20
     6dc:	c9 01       	movw	r24, r18
     6de:	88 5b       	subi	r24, 0xB8	; 184
     6e0:	9f 4f       	sbci	r25, 0xFF	; 255
     6e2:	af 4f       	sbci	r26, 0xFF	; 255
     6e4:	bf 4f       	sbci	r27, 0xFF	; 255
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	81 5f       	subi	r24, 0xF1	; 241
     6ec:	9d 4f       	sbci	r25, 0xFD	; 253
     6ee:	fc 01       	movw	r30, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	91 81       	ldd	r25, Z+1	; 0x01
     6f4:	22 27       	eor	r18, r18
     6f6:	33 27       	eor	r19, r19
     6f8:	28 1b       	sub	r18, r24
     6fa:	39 0b       	sbc	r19, r25
	}
     6fc:	c9 01       	movw	r24, r18
     6fe:	08 95       	ret

00000700 <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
     710:	8a e5       	ldi	r24, 0x5A	; 90
     712:	c8 16       	cp	r12, r24
     714:	d1 04       	cpc	r13, r1
     716:	e1 04       	cpc	r14, r1
     718:	f1 04       	cpc	r15, r1
     71a:	a1 f1       	breq	.+104    	; 0x784 <tan_SoR+0x84>
     71c:	86 ea       	ldi	r24, 0xA6	; 166
     71e:	c8 16       	cp	r12, r24
     720:	8f ef       	ldi	r24, 0xFF	; 255
     722:	d8 06       	cpc	r13, r24
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	e8 06       	cpc	r14, r24
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	f8 06       	cpc	r15, r24
     72c:	59 f1       	breq	.+86     	; 0x784 <tan_SoR+0x84>
     72e:	8e e0       	ldi	r24, 0x0E	; 14
     730:	c8 16       	cp	r12, r24
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	d8 06       	cpc	r13, r24
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	e8 06       	cpc	r14, r24
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	f8 06       	cpc	r15, r24
     73e:	11 f1       	breq	.+68     	; 0x784 <tan_SoR+0x84>
     740:	82 ef       	ldi	r24, 0xF2	; 242
     742:	c8 16       	cp	r12, r24
     744:	8e ef       	ldi	r24, 0xFE	; 254
     746:	d8 06       	cpc	r13, r24
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	e8 06       	cpc	r14, r24
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	f8 06       	cpc	r15, r24
     750:	c9 f0       	breq	.+50     	; 0x784 <tan_SoR+0x84>
		return 0;//what else should I return?!?!?
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
     752:	c7 01       	movw	r24, r14
     754:	b6 01       	movw	r22, r12
     756:	0e 94 51 03 	call	0x6a2	; 0x6a2 <sin_SoR>
     75a:	8c 01       	movw	r16, r24
     75c:	c7 01       	movw	r24, r14
     75e:	b6 01       	movw	r22, r12
     760:	0e 94 26 03 	call	0x64c	; 0x64c <cos_SoR>
     764:	bc 01       	movw	r22, r24
     766:	c8 01       	movw	r24, r16
     768:	0e 94 00 12 	call	0x2400	; 0x2400 <__divmodhi4>
     76c:	cb 01       	movw	r24, r22
     76e:	9b 01       	movw	r18, r22
     770:	73 e0       	ldi	r23, 0x03	; 3
     772:	22 0f       	add	r18, r18
     774:	33 1f       	adc	r19, r19
     776:	7a 95       	dec	r23
     778:	e1 f7       	brne	.-8      	; 0x772 <tan_SoR+0x72>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	28 0f       	add	r18, r24
     780:	39 1f       	adc	r19, r25
     782:	02 c0       	rjmp	.+4      	; 0x788 <tan_SoR+0x88>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
	}
     788:	c9 01       	movw	r24, r18
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	08 95       	ret

00000798 <vLEDOn>:
//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     798:	2e 98       	cbi	0x05, 6	; 5
     79a:	fe cf       	rjmp	.-4      	; 0x798 <vLEDOn>

0000079c <vLEDOff>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     79c:	2e 9a       	sbi	0x05, 6	; 5
     79e:	fe cf       	rjmp	.-4      	; 0x79c <vLEDOff>

000007a0 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
	vCoRoutineSchedule();
     7a0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vCoRoutineSchedule>
}
     7a4:	08 95       	ret

000007a6 <main>:
}

/*-----------------------------------------------------------*/

short main( void )
{
     7a6:	af 92       	push	r10
     7a8:	bf 92       	push	r11
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     7b8:	2e 98       	cbi	0x05, 6	; 5

	for(int i=0; i<10000; i++) LED_on();
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	27 e2       	ldi	r18, 0x27	; 39
     7be:	80 31       	cpi	r24, 0x10	; 16
     7c0:	92 07       	cpc	r25, r18
     7c2:	d1 f7       	brne	.-12     	; 0x7b8 <main+0x12>
	
	xTaskCreate(vLEDOn, "LED ON", 100, NULL, 1, NULL);	
     7c4:	8c ec       	ldi	r24, 0xCC	; 204
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	72 e0       	ldi	r23, 0x02	; 2
     7cc:	44 e6       	ldi	r20, 0x64	; 100
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	01 e0       	ldi	r16, 0x01	; 1
     7d6:	ee 24       	eor	r14, r14
     7d8:	ff 24       	eor	r15, r15
     7da:	cc 24       	eor	r12, r12
     7dc:	dd 24       	eor	r13, r13
     7de:	aa 24       	eor	r10, r10
     7e0:	bb 24       	eor	r11, r11
     7e2:	0e 94 07 09 	call	0x120e	; 0x120e <xTaskGenericCreate>
	xTaskCreate(vLEDOff, "LED OFF", 100, NULL, 1, NULL);
     7e6:	8e ec       	ldi	r24, 0xCE	; 206
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	67 e0       	ldi	r22, 0x07	; 7
     7ec:	72 e0       	ldi	r23, 0x02	; 2
     7ee:	44 e6       	ldi	r20, 0x64	; 100
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	0e 94 07 09 	call	0x120e	; 0x120e <xTaskGenericCreate>

	vTaskStartScheduler();
     7fa:	0e 94 25 0a 	call	0x144a	; 0x144a <vTaskStartScheduler>

	return 0;
}
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	bf 90       	pop	r11
     80e:	af 90       	pop	r10
     810:	08 95       	ret

00000812 <vParTestInitialise>:

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
	ucCurrentOutputValue = partstALL_OUTPUTS_OFF;
     812:	8f ef       	ldi	r24, 0xFF	; 255
     814:	80 93 a1 02 	sts	0x02A1, r24

	/* Set port A direction to outputs.  Start with all output off. */
	DDRA = partstALL_BITS_OUTPUT;
     818:	81 b9       	out	0x01, r24	; 1
	PORTA = ucCurrentOutputValue;
     81a:	80 91 a1 02 	lds	r24, 0x02A1
     81e:	82 b9       	out	0x02, r24	; 2
}
     820:	08 95       	ret

00000822 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned portBASE_TYPE uxLED )
{
     822:	1f 93       	push	r17
     824:	28 2f       	mov	r18, r24
unsigned char ucBit;

	if( uxLED <= partstMAX_OUTPUT_LED )
     826:	88 30       	cpi	r24, 0x08	; 8
     828:	e8 f4       	brcc	.+58     	; 0x864 <vParTestToggleLED+0x42>
	{
		ucBit = ( ( unsigned char ) 1 ) << uxLED;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	02 c0       	rjmp	.+4      	; 0x834 <vParTestToggleLED+0x12>
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	2a 95       	dec	r18
     836:	e2 f7       	brpl	.-8      	; 0x830 <vParTestToggleLED+0xe>
     838:	18 2f       	mov	r17, r24

		vTaskSuspendAll();
     83a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vTaskSuspendAll>
		{
			if( ucCurrentOutputValue & ucBit )
     83e:	80 91 a1 02 	lds	r24, 0x02A1
     842:	81 23       	and	r24, r17
     844:	29 f0       	breq	.+10     	; 0x850 <vParTestToggleLED+0x2e>
			{
				ucCurrentOutputValue &= ~ucBit;
     846:	80 91 a1 02 	lds	r24, 0x02A1
     84a:	10 95       	com	r17
     84c:	18 23       	and	r17, r24
     84e:	03 c0       	rjmp	.+6      	; 0x856 <vParTestToggleLED+0x34>
			}
			else
			{
				ucCurrentOutputValue |= ucBit;
     850:	80 91 a1 02 	lds	r24, 0x02A1
     854:	18 2b       	or	r17, r24
     856:	10 93 a1 02 	sts	0x02A1, r17
			}

			PORTA = ucCurrentOutputValue;
     85a:	80 91 a1 02 	lds	r24, 0x02A1
     85e:	82 b9       	out	0x02, r24	; 2
		}
		xTaskResumeAll();			
     860:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>
	}
}
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <vParTestSetLED>:
	PORTA = ucCurrentOutputValue;
}
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	28 2f       	mov	r18, r24
     86e:	06 2f       	mov	r16, r22
unsigned char ucBit = ( unsigned char ) 1;

	if( uxLED <= partstMAX_OUTPUT_LED )
     870:	88 30       	cpi	r24, 0x08	; 8
     872:	d8 f4       	brcc	.+54     	; 0x8aa <vParTestSetLED+0x42>
	{
		ucBit <<= uxLED;	
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	02 c0       	rjmp	.+4      	; 0x87e <vParTestSetLED+0x16>
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	2a 95       	dec	r18
     880:	e2 f7       	brpl	.-8      	; 0x87a <vParTestSetLED+0x12>
     882:	18 2f       	mov	r17, r24

		vTaskSuspendAll();
     884:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vTaskSuspendAll>
		{
			if( xValue == pdTRUE )
     888:	01 30       	cpi	r16, 0x01	; 1
     88a:	29 f4       	brne	.+10     	; 0x896 <vParTestSetLED+0x2e>
			{
				ucBit ^= ( unsigned char ) 0xff;
				ucCurrentOutputValue &= ucBit;
     88c:	80 91 a1 02 	lds	r24, 0x02A1
     890:	10 95       	com	r17
     892:	18 23       	and	r17, r24
     894:	03 c0       	rjmp	.+6      	; 0x89c <vParTestSetLED+0x34>
			}
			else
			{
				ucCurrentOutputValue |= ucBit;
     896:	80 91 a1 02 	lds	r24, 0x02A1
     89a:	18 2b       	or	r17, r24
     89c:	10 93 a1 02 	sts	0x02A1, r17
			}

			PORTA = ucCurrentOutputValue;
     8a0:	80 91 a1 02 	lds	r24, 0x02A1
     8a4:	82 b9       	out	0x02, r24	; 2
		}
		xTaskResumeAll();
     8a6:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>
	}
}
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	08 95       	ret

000008b0 <xAreRegTestTasksStillRunning>:
	xTaskCreate( prvRegisterCheck2, ( signed char * ) "Reg2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );		
}
/*-----------------------------------------------------------*/

portBASE_TYPE xAreRegTestTasksStillRunning( void )
{
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	80 91 b2 02 	lds	r24, 0x02B2
     8b6:	88 23       	and	r24, r24
     8b8:	09 f4       	brne	.+2      	; 0x8bc <xAreRegTestTasksStillRunning+0xc>
     8ba:	91 e0       	ldi	r25, 0x01	; 1
	{
		xReturn = pdFALSE;
	}
	
	return xReturn;
}
     8bc:	89 2f       	mov	r24, r25
     8be:	08 95       	ret

000008c0 <prvRegisterCheck1>:
{
	( void ) pvParameters;

	for( ;; )
	{
		asm(	"LDI	r31,	5"		);		
     8c0:	f5 e0       	ldi	r31, 0x05	; 5
		asm( 	"MOV	r0,		r31"	);
     8c2:	0f 2e       	mov	r0, r31
		asm(	"LDI	r31,	6"		);
     8c4:	f6 e0       	ldi	r31, 0x06	; 6
		asm( 	"MOV	r1,		r31"	);
     8c6:	1f 2e       	mov	r1, r31
		asm(	"LDI	r31,	7"		);
     8c8:	f7 e0       	ldi	r31, 0x07	; 7
		asm( 	"MOV	r2,		r31"	);
     8ca:	2f 2e       	mov	r2, r31
		asm(	"LDI	r31,	8"		);
     8cc:	f8 e0       	ldi	r31, 0x08	; 8
		asm( 	"MOV	r3,		r31"	);
     8ce:	3f 2e       	mov	r3, r31
		asm(	"LDI	r31,	9"		);
     8d0:	f9 e0       	ldi	r31, 0x09	; 9
		asm( 	"MOV	r4,		r31"	);
     8d2:	4f 2e       	mov	r4, r31
		asm(	"LDI	r31,	10"		);
     8d4:	fa e0       	ldi	r31, 0x0A	; 10
		asm( 	"MOV	r5,		r31"	);
     8d6:	5f 2e       	mov	r5, r31
		asm(	"LDI	r31,	11"		);
     8d8:	fb e0       	ldi	r31, 0x0B	; 11
		asm( 	"MOV	r6,		r31"	);
     8da:	6f 2e       	mov	r6, r31
		asm(	"LDI	r31,	12"		);
     8dc:	fc e0       	ldi	r31, 0x0C	; 12
		asm( 	"MOV	r7,		r31"	);
     8de:	7f 2e       	mov	r7, r31
		asm(	"LDI	r31,	13"		);
     8e0:	fd e0       	ldi	r31, 0x0D	; 13
		asm( 	"MOV	r8,		r31"	);
     8e2:	8f 2e       	mov	r8, r31
		asm(	"LDI	r31,	14"		);
     8e4:	fe e0       	ldi	r31, 0x0E	; 14
		asm( 	"MOV	r9,		r31"	);
     8e6:	9f 2e       	mov	r9, r31
		asm(	"LDI	r31,	15"		);
     8e8:	ff e0       	ldi	r31, 0x0F	; 15
		asm( 	"MOV	r10,	r31"	);
     8ea:	af 2e       	mov	r10, r31
		asm(	"LDI	r31,	16"		);
     8ec:	f0 e1       	ldi	r31, 0x10	; 16
		asm( 	"MOV	r11,	r31"	);
     8ee:	bf 2e       	mov	r11, r31
		asm(	"LDI	r31,	17"		);
     8f0:	f1 e1       	ldi	r31, 0x11	; 17
		asm( 	"MOV	r12,	r31"	);
     8f2:	cf 2e       	mov	r12, r31
		asm(	"LDI	r31,	18"		);
     8f4:	f2 e1       	ldi	r31, 0x12	; 18
		asm( 	"MOV	r13,	r31"	);
     8f6:	df 2e       	mov	r13, r31
		asm(	"LDI	r31,	19"		);
     8f8:	f3 e1       	ldi	r31, 0x13	; 19
		asm( 	"MOV	r14,	r31"	);
     8fa:	ef 2e       	mov	r14, r31
		asm(	"LDI	r31,	20"		);
     8fc:	f4 e1       	ldi	r31, 0x14	; 20
		asm( 	"MOV	r15,	r31"	);
     8fe:	ff 2e       	mov	r15, r31
		asm(	"LDI	r16,	21"		);
     900:	05 e1       	ldi	r16, 0x15	; 21
		asm(	"LDI	r17,	22"		);
     902:	16 e1       	ldi	r17, 0x16	; 22
		asm(	"LDI	r18,	23"		);
     904:	27 e1       	ldi	r18, 0x17	; 23
		asm(	"LDI	r19,	24"		);
     906:	38 e1       	ldi	r19, 0x18	; 24
		asm(	"LDI	r20,	25"		);
     908:	49 e1       	ldi	r20, 0x19	; 25
		asm(	"LDI	r21,	26"		);
     90a:	5a e1       	ldi	r21, 0x1A	; 26
		asm(	"LDI	r22,	27"		);
     90c:	6b e1       	ldi	r22, 0x1B	; 27
		asm(	"LDI	r23,	28"		);
     90e:	7c e1       	ldi	r23, 0x1C	; 28
		asm(	"LDI	r24,	29"		);
     910:	8d e1       	ldi	r24, 0x1D	; 29
		asm(	"LDI	r25,	30"		);
     912:	9e e1       	ldi	r25, 0x1E	; 30
		asm(	"LDI	r26,	31"		);
     914:	af e1       	ldi	r26, 0x1F	; 31
		asm(	"LDI	r27,	32"		);
     916:	b0 e2       	ldi	r27, 0x20	; 32
		asm(	"LDI	r30,	33"		);
     918:	e1 e2       	ldi	r30, 0x21	; 33

		asm(	"LDI	r31,	5"			);
     91a:	f5 e0       	ldi	r31, 0x05	; 5
		asm(	"CPSE	r31,	r0"			);
     91c:	f0 11       	cpse	r31, r0
		asm(	"STS	xRegTestError, r0"	);
     91e:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	6"			);
     922:	f6 e0       	ldi	r31, 0x06	; 6
		asm(	"CPSE	r31,	r1"			);
     924:	f1 11       	cpse	r31, r1
		asm(	"STS	xRegTestError, r0"	);
     926:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	7"			);
     92a:	f7 e0       	ldi	r31, 0x07	; 7
		asm(	"CPSE	r31,	r2"			);
     92c:	f2 11       	cpse	r31, r2
		asm(	"STS	xRegTestError, r0"	);
     92e:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	8"			);
     932:	f8 e0       	ldi	r31, 0x08	; 8
		asm(	"CPSE	r31,	r3"			);
     934:	f3 11       	cpse	r31, r3
		asm(	"STS	xRegTestError, r0"	);
     936:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	9"			);
     93a:	f9 e0       	ldi	r31, 0x09	; 9
		asm(	"CPSE	r31,	r4"			);
     93c:	f4 11       	cpse	r31, r4
		asm(	"STS	xRegTestError, r0"	);
     93e:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	10"			);
     942:	fa e0       	ldi	r31, 0x0A	; 10
		asm(	"CPSE	r31,	r5"			);
     944:	f5 11       	cpse	r31, r5
		asm(	"STS	xRegTestError, r0"	);
     946:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	11"			);
     94a:	fb e0       	ldi	r31, 0x0B	; 11
		asm(	"CPSE	r31,	r6"			);
     94c:	f6 11       	cpse	r31, r6
		asm(	"STS	xRegTestError, r0"	);
     94e:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	12"			);
     952:	fc e0       	ldi	r31, 0x0C	; 12
		asm(	"CPSE	r31,	r7"			);
     954:	f7 11       	cpse	r31, r7
		asm(	"STS	xRegTestError, r0"	);
     956:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	13"			);
     95a:	fd e0       	ldi	r31, 0x0D	; 13
		asm(	"CPSE	r31,	r8"			);
     95c:	f8 11       	cpse	r31, r8
		asm(	"STS	xRegTestError, r0"	);
     95e:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	14"			);
     962:	fe e0       	ldi	r31, 0x0E	; 14
		asm(	"CPSE	r31,	r9"			);
     964:	f9 11       	cpse	r31, r9
		asm(	"STS	xRegTestError, r0"	);
     966:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	15"			);
     96a:	ff e0       	ldi	r31, 0x0F	; 15
		asm(	"CPSE	r31,	r10"		);
     96c:	fa 11       	cpse	r31, r10
		asm(	"STS	xRegTestError, r0"	);
     96e:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	16"			);
     972:	f0 e1       	ldi	r31, 0x10	; 16
		asm(	"CPSE	r31,	r11"		);
     974:	fb 11       	cpse	r31, r11
		asm(	"STS	xRegTestError, r0"	);
     976:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	17"			);
     97a:	f1 e1       	ldi	r31, 0x11	; 17
		asm(	"CPSE	r31,	r12"		);
     97c:	fc 11       	cpse	r31, r12
		asm(	"STS	xRegTestError, r0"	);
     97e:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	18"			);
     982:	f2 e1       	ldi	r31, 0x12	; 18
		asm(	"CPSE	r31,	r13"		);
     984:	fd 11       	cpse	r31, r13
		asm(	"STS	xRegTestError, r0"	);
     986:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	19"			);
     98a:	f3 e1       	ldi	r31, 0x13	; 19
		asm(	"CPSE	r31,	r14"		);
     98c:	fe 11       	cpse	r31, r14
		asm(	"STS	xRegTestError, r0"	);
     98e:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	20"			);
     992:	f4 e1       	ldi	r31, 0x14	; 20
		asm(	"CPSE	r31,	r15"		);
     994:	ff 11       	cpse	r31, r15
		asm(	"STS	xRegTestError, r0"	);
     996:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	21"			);
     99a:	f5 e1       	ldi	r31, 0x15	; 21
		asm(	"CPSE	r31,	r16"		);
     99c:	f0 13       	cpse	r31, r16
		asm(	"STS	xRegTestError, r0"	);
     99e:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	22"			);
     9a2:	f6 e1       	ldi	r31, 0x16	; 22
		asm(	"CPSE	r31,	r17"		);
     9a4:	f1 13       	cpse	r31, r17
		asm(	"STS	xRegTestError, r0"	);
     9a6:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	23"			);
     9aa:	f7 e1       	ldi	r31, 0x17	; 23
		asm(	"CPSE	r31,	r18"		);
     9ac:	f2 13       	cpse	r31, r18
		asm(	"STS	xRegTestError, r0"	);
     9ae:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	24"			);
     9b2:	f8 e1       	ldi	r31, 0x18	; 24
		asm(	"CPSE	r31,	r19"		);
     9b4:	f3 13       	cpse	r31, r19
		asm(	"STS	xRegTestError, r0"	);
     9b6:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	25"			);
     9ba:	f9 e1       	ldi	r31, 0x19	; 25
		asm(	"CPSE	r31,	r20"		);
     9bc:	f4 13       	cpse	r31, r20
		asm(	"STS	xRegTestError, r0"	);
     9be:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	26"			);
     9c2:	fa e1       	ldi	r31, 0x1A	; 26
		asm(	"CPSE	r31,	r21"		);
     9c4:	f5 13       	cpse	r31, r21
		asm(	"STS	xRegTestError, r0"	);
     9c6:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	27"			);
     9ca:	fb e1       	ldi	r31, 0x1B	; 27
		asm(	"CPSE	r31,	r22"		);
     9cc:	f6 13       	cpse	r31, r22
		asm(	"STS	xRegTestError, r0"	);
     9ce:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	28"			);
     9d2:	fc e1       	ldi	r31, 0x1C	; 28
		asm(	"CPSE	r31,	r23"		);
     9d4:	f7 13       	cpse	r31, r23
		asm(	"STS	xRegTestError, r0"	);
     9d6:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	29"			);
     9da:	fd e1       	ldi	r31, 0x1D	; 29
		asm(	"CPSE	r31,	r24"		);
     9dc:	f8 13       	cpse	r31, r24
		asm(	"STS	xRegTestError, r0"	);
     9de:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	30"			);
     9e2:	fe e1       	ldi	r31, 0x1E	; 30
		asm(	"CPSE	r31,	r25"		);
     9e4:	f9 13       	cpse	r31, r25
		asm(	"STS	xRegTestError, r0"	);
     9e6:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	31"			);
     9ea:	ff e1       	ldi	r31, 0x1F	; 31
		asm(	"CPSE	r31,	r26"		);
     9ec:	fa 13       	cpse	r31, r26
		asm(	"STS	xRegTestError, r0"	);
     9ee:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	32"			);
     9f2:	f0 e2       	ldi	r31, 0x20	; 32
		asm(	"CPSE	r31,	r27"		);
     9f4:	fb 13       	cpse	r31, r27
		asm(	"STS	xRegTestError, r0"	);
     9f6:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	33"			);
     9fa:	f1 e2       	ldi	r31, 0x21	; 33
		asm(	"CPSE	r31,	r30"		);
     9fc:	fe 13       	cpse	r31, r30
		asm(	"STS	xRegTestError, r0"	);
     9fe:	00 92 b2 02 	sts	0x02B2, r0
     a02:	5e cf       	rjmp	.-324    	; 0x8c0 <prvRegisterCheck1>

00000a04 <prvRegisterCheck2>:
{
	( void ) pvParameters;

	for( ;; )
	{
		asm(	"LDI	r31,	1"		);		
     a04:	f1 e0       	ldi	r31, 0x01	; 1
		asm( 	"MOV	r0,		r31"	);
     a06:	0f 2e       	mov	r0, r31
		asm(	"LDI	r31,	2"		);
     a08:	f2 e0       	ldi	r31, 0x02	; 2
		asm( 	"MOV	r1,		r31"	);
     a0a:	1f 2e       	mov	r1, r31
		asm(	"LDI	r31,	3"		);
     a0c:	f3 e0       	ldi	r31, 0x03	; 3
		asm( 	"MOV	r2,		r31"	);
     a0e:	2f 2e       	mov	r2, r31
		asm(	"LDI	r31,	4"		);
     a10:	f4 e0       	ldi	r31, 0x04	; 4
		asm( 	"MOV	r3,		r31"	);
     a12:	3f 2e       	mov	r3, r31
		asm(	"LDI	r31,	5"		);
     a14:	f5 e0       	ldi	r31, 0x05	; 5
		asm( 	"MOV	r4,		r31"	);
     a16:	4f 2e       	mov	r4, r31
		asm(	"LDI	r31,	6"		);
     a18:	f6 e0       	ldi	r31, 0x06	; 6
		asm( 	"MOV	r5,		r31"	);
     a1a:	5f 2e       	mov	r5, r31
		asm(	"LDI	r31,	7"		);
     a1c:	f7 e0       	ldi	r31, 0x07	; 7
		asm( 	"MOV	r6,		r31"	);
     a1e:	6f 2e       	mov	r6, r31
		asm(	"LDI	r31,	8"		);
     a20:	f8 e0       	ldi	r31, 0x08	; 8
		asm( 	"MOV	r7,		r31"	);
     a22:	7f 2e       	mov	r7, r31
		asm(	"LDI	r31,	9"		);
     a24:	f9 e0       	ldi	r31, 0x09	; 9
		asm( 	"MOV	r8,		r31"	);
     a26:	8f 2e       	mov	r8, r31
		asm(	"LDI	r31,	10"		);
     a28:	fa e0       	ldi	r31, 0x0A	; 10
		asm( 	"MOV	r9,		r31"	);
     a2a:	9f 2e       	mov	r9, r31
		asm(	"LDI	r31,	11"		);
     a2c:	fb e0       	ldi	r31, 0x0B	; 11
		asm( 	"MOV	r10,	r31"	);
     a2e:	af 2e       	mov	r10, r31
		asm(	"LDI	r31,	12"		);
     a30:	fc e0       	ldi	r31, 0x0C	; 12
		asm( 	"MOV	r11,	r31"	);
     a32:	bf 2e       	mov	r11, r31
		asm(	"LDI	r31,	13"		);
     a34:	fd e0       	ldi	r31, 0x0D	; 13
		asm( 	"MOV	r12,	r31"	);
     a36:	cf 2e       	mov	r12, r31
		asm(	"LDI	r31,	14"		);
     a38:	fe e0       	ldi	r31, 0x0E	; 14
		asm( 	"MOV	r13,	r31"	);
     a3a:	df 2e       	mov	r13, r31
		asm(	"LDI	r31,	15"		);
     a3c:	ff e0       	ldi	r31, 0x0F	; 15
		asm( 	"MOV	r14,	r31"	);
     a3e:	ef 2e       	mov	r14, r31
		asm(	"LDI	r31,	16"		);
     a40:	f0 e1       	ldi	r31, 0x10	; 16
		asm( 	"MOV	r15,	r31"	);
     a42:	ff 2e       	mov	r15, r31
		asm(	"LDI	r16,	17"		);
     a44:	01 e1       	ldi	r16, 0x11	; 17
		asm(	"LDI	r17,	18"		);
     a46:	12 e1       	ldi	r17, 0x12	; 18
		asm(	"LDI	r18,	19"		);
     a48:	23 e1       	ldi	r18, 0x13	; 19
		asm(	"LDI	r19,	20"		);
     a4a:	34 e1       	ldi	r19, 0x14	; 20
		asm(	"LDI	r20,	21"		);
     a4c:	45 e1       	ldi	r20, 0x15	; 21
		asm(	"LDI	r21,	22"		);
     a4e:	56 e1       	ldi	r21, 0x16	; 22
		asm(	"LDI	r22,	23"		);
     a50:	67 e1       	ldi	r22, 0x17	; 23
		asm(	"LDI	r23,	24"		);
     a52:	78 e1       	ldi	r23, 0x18	; 24
		asm(	"LDI	r24,	25"		);
     a54:	89 e1       	ldi	r24, 0x19	; 25
		asm(	"LDI	r25,	26"		);
     a56:	9a e1       	ldi	r25, 0x1A	; 26
		asm(	"LDI	r26,	27"		);
     a58:	ab e1       	ldi	r26, 0x1B	; 27
		asm(	"LDI	r27,	28"		);
     a5a:	bc e1       	ldi	r27, 0x1C	; 28
		asm(	"LDI	r30,	29"		);
     a5c:	ed e1       	ldi	r30, 0x1D	; 29

		asm(	"LDI	r31,	1"			);
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
		asm(	"CPSE	r31,	r0"			);
     a60:	f0 11       	cpse	r31, r0
		asm(	"STS	xRegTestError, r0"	);
     a62:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	2"			);
     a66:	f2 e0       	ldi	r31, 0x02	; 2
		asm(	"CPSE	r31,	r1"			);
     a68:	f1 11       	cpse	r31, r1
		asm(	"STS	xRegTestError, r0"	);
     a6a:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	3"			);
     a6e:	f3 e0       	ldi	r31, 0x03	; 3
		asm(	"CPSE	r31,	r2"			);
     a70:	f2 11       	cpse	r31, r2
		asm(	"STS	xRegTestError, r0"	);
     a72:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	4"			);
     a76:	f4 e0       	ldi	r31, 0x04	; 4
		asm(	"CPSE	r31,	r3"			);
     a78:	f3 11       	cpse	r31, r3
		asm(	"STS	xRegTestError, r0"	);
     a7a:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	5"			);
     a7e:	f5 e0       	ldi	r31, 0x05	; 5
		asm(	"CPSE	r31,	r4"			);
     a80:	f4 11       	cpse	r31, r4
		asm(	"STS	xRegTestError, r0"	);
     a82:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	6"			);
     a86:	f6 e0       	ldi	r31, 0x06	; 6
		asm(	"CPSE	r31,	r5"			);
     a88:	f5 11       	cpse	r31, r5
		asm(	"STS	xRegTestError, r0"	);
     a8a:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	7"			);
     a8e:	f7 e0       	ldi	r31, 0x07	; 7
		asm(	"CPSE	r31,	r6"			);
     a90:	f6 11       	cpse	r31, r6
		asm(	"STS	xRegTestError, r0"	);
     a92:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	8"			);
     a96:	f8 e0       	ldi	r31, 0x08	; 8
		asm(	"CPSE	r31,	r7"			);
     a98:	f7 11       	cpse	r31, r7
		asm(	"STS	xRegTestError, r0"	);
     a9a:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	9"			);
     a9e:	f9 e0       	ldi	r31, 0x09	; 9
		asm(	"CPSE	r31,	r8"			);
     aa0:	f8 11       	cpse	r31, r8
		asm(	"STS	xRegTestError, r0"	);
     aa2:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	10"			);
     aa6:	fa e0       	ldi	r31, 0x0A	; 10
		asm(	"CPSE	r31,	r9"			);
     aa8:	f9 11       	cpse	r31, r9
		asm(	"STS	xRegTestError, r0"	);
     aaa:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	11"			);
     aae:	fb e0       	ldi	r31, 0x0B	; 11
		asm(	"CPSE	r31,	r10"		);
     ab0:	fa 11       	cpse	r31, r10
		asm(	"STS	xRegTestError, r0"	);
     ab2:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	12"			);
     ab6:	fc e0       	ldi	r31, 0x0C	; 12
		asm(	"CPSE	r31,	r11"		);
     ab8:	fb 11       	cpse	r31, r11
		asm(	"STS	xRegTestError, r0"	);
     aba:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	13"			);
     abe:	fd e0       	ldi	r31, 0x0D	; 13
		asm(	"CPSE	r31,	r12"		);
     ac0:	fc 11       	cpse	r31, r12
		asm(	"STS	xRegTestError, r0"	);
     ac2:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	14"			);
     ac6:	fe e0       	ldi	r31, 0x0E	; 14
		asm(	"CPSE	r31,	r13"		);
     ac8:	fd 11       	cpse	r31, r13
		asm(	"STS	xRegTestError, r0"	);
     aca:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	15"			);
     ace:	ff e0       	ldi	r31, 0x0F	; 15
		asm(	"CPSE	r31,	r14"		);
     ad0:	fe 11       	cpse	r31, r14
		asm(	"STS	xRegTestError, r0"	);
     ad2:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	16"			);
     ad6:	f0 e1       	ldi	r31, 0x10	; 16
		asm(	"CPSE	r31,	r15"		);
     ad8:	ff 11       	cpse	r31, r15
		asm(	"STS	xRegTestError, r0"	);
     ada:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	17"			);
     ade:	f1 e1       	ldi	r31, 0x11	; 17
		asm(	"CPSE	r31,	r16"		);
     ae0:	f0 13       	cpse	r31, r16
		asm(	"STS	xRegTestError, r0"	);
     ae2:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	18"			);
     ae6:	f2 e1       	ldi	r31, 0x12	; 18
		asm(	"CPSE	r31,	r17"		);
     ae8:	f1 13       	cpse	r31, r17
		asm(	"STS	xRegTestError, r0"	);
     aea:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	19"			);
     aee:	f3 e1       	ldi	r31, 0x13	; 19
		asm(	"CPSE	r31,	r18"		);
     af0:	f2 13       	cpse	r31, r18
		asm(	"STS	xRegTestError, r0"	);
     af2:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	20"			);
     af6:	f4 e1       	ldi	r31, 0x14	; 20
		asm(	"CPSE	r31,	r19"		);
     af8:	f3 13       	cpse	r31, r19
		asm(	"STS	xRegTestError, r0"	);
     afa:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	21"			);
     afe:	f5 e1       	ldi	r31, 0x15	; 21
		asm(	"CPSE	r31,	r20"		);
     b00:	f4 13       	cpse	r31, r20
		asm(	"STS	xRegTestError, r0"	);
     b02:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	22"			);
     b06:	f6 e1       	ldi	r31, 0x16	; 22
		asm(	"CPSE	r31,	r21"		);
     b08:	f5 13       	cpse	r31, r21
		asm(	"STS	xRegTestError, r0"	);
     b0a:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	23"			);
     b0e:	f7 e1       	ldi	r31, 0x17	; 23
		asm(	"CPSE	r31,	r22"		);
     b10:	f6 13       	cpse	r31, r22
		asm(	"STS	xRegTestError, r0"	);
     b12:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	24"			);
     b16:	f8 e1       	ldi	r31, 0x18	; 24
		asm(	"CPSE	r31,	r23"		);
     b18:	f7 13       	cpse	r31, r23
		asm(	"STS	xRegTestError, r0"	);
     b1a:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	25"			);
     b1e:	f9 e1       	ldi	r31, 0x19	; 25
		asm(	"CPSE	r31,	r24"		);
     b20:	f8 13       	cpse	r31, r24
		asm(	"STS	xRegTestError, r0"	);
     b22:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	26"			);
     b26:	fa e1       	ldi	r31, 0x1A	; 26
		asm(	"CPSE	r31,	r25"		);
     b28:	f9 13       	cpse	r31, r25
		asm(	"STS	xRegTestError, r0"	);
     b2a:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	27"			);
     b2e:	fb e1       	ldi	r31, 0x1B	; 27
		asm(	"CPSE	r31,	r26"		);
     b30:	fa 13       	cpse	r31, r26
		asm(	"STS	xRegTestError, r0"	);
     b32:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	28"			);
     b36:	fc e1       	ldi	r31, 0x1C	; 28
		asm(	"CPSE	r31,	r27"		);
     b38:	fb 13       	cpse	r31, r27
		asm(	"STS	xRegTestError, r0"	);
     b3a:	00 92 b2 02 	sts	0x02B2, r0
		asm(	"LDI	r31,	29"			);
     b3e:	fd e1       	ldi	r31, 0x1D	; 29
		asm(	"CPSE	r31,	r30"		);
     b40:	fe 13       	cpse	r31, r30
		asm(	"STS	xRegTestError, r0"	);
     b42:	00 92 b2 02 	sts	0x02B2, r0
     b46:	5e cf       	rjmp	.-324    	; 0xa04 <prvRegisterCheck2>

00000b48 <vStartRegTestTasks>:
portBASE_TYPE xRegTestError = pdFALSE;

/*-----------------------------------------------------------*/

void vStartRegTestTasks( void )
{
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
	xTaskCreate( prvRegisterCheck1, ( signed char * ) "Reg1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
     b56:	80 e6       	ldi	r24, 0x60	; 96
     b58:	94 e0       	ldi	r25, 0x04	; 4
     b5a:	62 ea       	ldi	r22, 0xA2	; 162
     b5c:	72 e0       	ldi	r23, 0x02	; 2
     b5e:	45 e5       	ldi	r20, 0x55	; 85
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	00 e0       	ldi	r16, 0x00	; 0
     b68:	ee 24       	eor	r14, r14
     b6a:	ff 24       	eor	r15, r15
     b6c:	cc 24       	eor	r12, r12
     b6e:	dd 24       	eor	r13, r13
     b70:	aa 24       	eor	r10, r10
     b72:	bb 24       	eor	r11, r11
     b74:	0e 94 07 09 	call	0x120e	; 0x120e <xTaskGenericCreate>
	xTaskCreate( prvRegisterCheck2, ( signed char * ) "Reg2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );		
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	95 e0       	ldi	r25, 0x05	; 5
     b7c:	67 ea       	ldi	r22, 0xA7	; 167
     b7e:	72 e0       	ldi	r23, 0x02	; 2
     b80:	45 e5       	ldi	r20, 0x55	; 85
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	0e 94 07 09 	call	0x120e	; 0x120e <xTaskGenericCreate>
}
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	08 95       	ret

00000b9c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     b9c:	80 91 b9 02 	lds	r24, 0x02B9
     ba0:	8f 5f       	subi	r24, 0xFF	; 255
     ba2:	80 93 b9 02 	sts	0x02B9, r24
}
     ba6:	08 95       	ret

00000ba8 <xTaskGetTickCount>:
portTickType xTaskGetTickCount( void )
{
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portENTER_CRITICAL();
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	0f 92       	push	r0
	{
		xTicks = xTickCount;
     bae:	20 91 b7 02 	lds	r18, 0x02B7
     bb2:	30 91 b8 02 	lds	r19, 0x02B8
	}
	portEXIT_CRITICAL();
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
     bba:	c9 01       	movw	r24, r18
     bbc:	08 95       	ret

00000bbe <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
     bbe:	80 91 bc 02 	lds	r24, 0x02BC
}
     bc2:	08 95       	ret

00000bc4 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     bc4:	80 91 b9 02 	lds	r24, 0x02B9
     bc8:	88 23       	and	r24, r24
     bca:	51 f0       	breq	.+20     	; 0xbe0 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	80 93 b5 02 	sts	0x02B5, r24
     bd2:	08 95       	ret
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
	{
		--uxTopReadyPriority;
     bd4:	80 91 ba 02 	lds	r24, 0x02BA
     bd8:	81 50       	subi	r24, 0x01	; 1
     bda:	80 93 ba 02 	sts	0x02BA, r24
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <vTaskSwitchContext+0x1e>

	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
     be0:	99 e0       	ldi	r25, 0x09	; 9
     be2:	e0 91 ba 02 	lds	r30, 0x02BA
     be6:	e9 9f       	mul	r30, r25
     be8:	f0 01       	movw	r30, r0
     bea:	11 24       	eor	r1, r1
     bec:	ef 53       	subi	r30, 0x3F	; 63
     bee:	fd 4f       	sbci	r31, 0xFD	; 253
     bf0:	80 81       	ld	r24, Z
     bf2:	88 23       	and	r24, r24
     bf4:	79 f3       	breq	.-34     	; 0xbd4 <vTaskSwitchContext+0x10>
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
     bf6:	90 91 ba 02 	lds	r25, 0x02BA
     bfa:	89 e0       	ldi	r24, 0x09	; 9
     bfc:	98 9f       	mul	r25, r24
     bfe:	d0 01       	movw	r26, r0
     c00:	11 24       	eor	r1, r1
     c02:	af 53       	subi	r26, 0x3F	; 63
     c04:	bd 4f       	sbci	r27, 0xFD	; 253
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	ed 91       	ld	r30, X+
     c0a:	fc 91       	ld	r31, X
     c0c:	12 97       	sbiw	r26, 0x02	; 2
     c0e:	02 80       	ldd	r0, Z+2	; 0x02
     c10:	f3 81       	ldd	r31, Z+3	; 0x03
     c12:	e0 2d       	mov	r30, r0
     c14:	12 96       	adiw	r26, 0x02	; 2
     c16:	fc 93       	st	X, r31
     c18:	ee 93       	st	-X, r30
     c1a:	11 97       	sbiw	r26, 0x01	; 1
     c1c:	cd 01       	movw	r24, r26
     c1e:	03 96       	adiw	r24, 0x03	; 3
     c20:	e8 17       	cp	r30, r24
     c22:	f9 07       	cpc	r31, r25
     c24:	31 f4       	brne	.+12     	; 0xc32 <vTaskSwitchContext+0x6e>
     c26:	82 81       	ldd	r24, Z+2	; 0x02
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	12 96       	adiw	r26, 0x02	; 2
     c2c:	9c 93       	st	X, r25
     c2e:	8e 93       	st	-X, r24
     c30:	11 97       	sbiw	r26, 0x01	; 1
     c32:	11 96       	adiw	r26, 0x01	; 1
     c34:	ed 91       	ld	r30, X+
     c36:	fc 91       	ld	r31, X
     c38:	12 97       	sbiw	r26, 0x02	; 2
     c3a:	86 81       	ldd	r24, Z+6	; 0x06
     c3c:	97 81       	ldd	r25, Z+7	; 0x07
     c3e:	90 93 b4 02 	sts	0x02B4, r25
     c42:	80 93 b3 02 	sts	0x02B3, r24
     c46:	08 95       	ret

00000c48 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
     c48:	fc 01       	movw	r30, r24
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     c4a:	80 91 b6 02 	lds	r24, 0x02B6
     c4e:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
     c50:	80 91 b7 02 	lds	r24, 0x02B7
     c54:	90 91 b8 02 	lds	r25, 0x02B8
     c58:	92 83       	std	Z+2, r25	; 0x02
     c5a:	81 83       	std	Z+1, r24	; 0x01
}
     c5c:	08 95       	ret

00000c5e <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
     c5e:	fc 01       	movw	r30, r24
     c60:	db 01       	movw	r26, r22
portBASE_TYPE xReturn;

	portENTER_CRITICAL();
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
     c68:	90 91 b6 02 	lds	r25, 0x02B6
     c6c:	80 81       	ld	r24, Z
     c6e:	98 17       	cp	r25, r24
     c70:	49 f0       	breq	.+18     	; 0xc84 <xTaskCheckForTimeOut+0x26>
     c72:	20 91 b7 02 	lds	r18, 0x02B7
     c76:	30 91 b8 02 	lds	r19, 0x02B8
     c7a:	81 81       	ldd	r24, Z+1	; 0x01
     c7c:	92 81       	ldd	r25, Z+2	; 0x02
     c7e:	28 17       	cp	r18, r24
     c80:	39 07       	cpc	r19, r25
     c82:	18 f5       	brcc	.+70     	; 0xcca <xTaskCheckForTimeOut+0x6c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
     c84:	80 91 b7 02 	lds	r24, 0x02B7
     c88:	90 91 b8 02 	lds	r25, 0x02B8
     c8c:	21 81       	ldd	r18, Z+1	; 0x01
     c8e:	32 81       	ldd	r19, Z+2	; 0x02
     c90:	4d 91       	ld	r20, X+
     c92:	5c 91       	ld	r21, X
     c94:	11 97       	sbiw	r26, 0x01	; 1
     c96:	82 1b       	sub	r24, r18
     c98:	93 0b       	sbc	r25, r19
     c9a:	84 17       	cp	r24, r20
     c9c:	95 07       	cpc	r25, r21
     c9e:	a8 f4       	brcc	.+42     	; 0xcca <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
     ca0:	80 91 b7 02 	lds	r24, 0x02B7
     ca4:	90 91 b8 02 	lds	r25, 0x02B8
     ca8:	28 1b       	sub	r18, r24
     caa:	39 0b       	sbc	r19, r25
     cac:	24 0f       	add	r18, r20
     cae:	35 1f       	adc	r19, r21
     cb0:	2d 93       	st	X+, r18
     cb2:	3c 93       	st	X, r19
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     cb4:	80 91 b6 02 	lds	r24, 0x02B6
     cb8:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
     cba:	80 91 b7 02 	lds	r24, 0x02B7
     cbe:	90 91 b8 02 	lds	r25, 0x02B8
     cc2:	92 83       	std	Z+2, r25	; 0x02
     cc4:	81 83       	std	Z+1, r24	; 0x01
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <xTaskCheckForTimeOut+0x6e>
     cca:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	portEXIT_CRITICAL();
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
     cd0:	08 95       	ret

00000cd2 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 93 b5 02 	sts	0x02B5, r24
}
     cd8:	08 95       	ret

00000cda <xTaskRemoveFromEventList>:
	#endif
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	fc 01       	movw	r30, r24
	it to the ready list.

	If an event is for a queue that is locked then this function will never
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     ce4:	80 81       	ld	r24, Z
     ce6:	88 23       	and	r24, r24
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <xTaskRemoveFromEventList+0x16>
     cea:	c0 e0       	ldi	r28, 0x00	; 0
     cec:	d0 e0       	ldi	r29, 0x00	; 0
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <xTaskRemoveFromEventList+0x20>
     cf0:	05 80       	ldd	r0, Z+5	; 0x05
     cf2:	f6 81       	ldd	r31, Z+6	; 0x06
     cf4:	e0 2d       	mov	r30, r0
     cf6:	c6 81       	ldd	r28, Z+6	; 0x06
     cf8:	d7 81       	ldd	r29, Z+7	; 0x07
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
     cfa:	8e 01       	movw	r16, r28
     cfc:	04 5f       	subi	r16, 0xF4	; 244
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	c8 01       	movw	r24, r16
     d02:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     d06:	80 91 b9 02 	lds	r24, 0x02B9
     d0a:	88 23       	and	r24, r24
     d0c:	a1 f4       	brne	.+40     	; 0xd36 <xTaskRemoveFromEventList+0x5c>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
     d0e:	8e 01       	movw	r16, r28
     d10:	0e 5f       	subi	r16, 0xFE	; 254
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	c8 01       	movw	r24, r16
     d16:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
     d1a:	9e 89       	ldd	r25, Y+22	; 0x16
     d1c:	80 91 ba 02 	lds	r24, 0x02BA
     d20:	89 17       	cp	r24, r25
     d22:	10 f4       	brcc	.+4      	; 0xd28 <xTaskRemoveFromEventList+0x4e>
     d24:	90 93 ba 02 	sts	0x02BA, r25
     d28:	89 e0       	ldi	r24, 0x09	; 9
     d2a:	98 9f       	mul	r25, r24
     d2c:	c0 01       	movw	r24, r0
     d2e:	11 24       	eor	r1, r1
     d30:	8f 53       	subi	r24, 0x3F	; 63
     d32:	9d 4f       	sbci	r25, 0xFD	; 253
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     d36:	8b ef       	ldi	r24, 0xFB	; 251
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	b8 01       	movw	r22, r16
     d3c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
     d40:	e0 91 b3 02 	lds	r30, 0x02B3
     d44:	f0 91 b4 02 	lds	r31, 0x02B4
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	9e 89       	ldd	r25, Y+22	; 0x16
     d4c:	86 89       	ldd	r24, Z+22	; 0x16
     d4e:	98 17       	cp	r25, r24
     d50:	08 f0       	brcs	.+2      	; 0xd54 <xTaskRemoveFromEventList+0x7a>
     d52:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     d54:	82 2f       	mov	r24, r18
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     d6a:	80 91 b9 02 	lds	r24, 0x02B9
     d6e:	88 23       	and	r24, r24
     d70:	09 f0       	breq	.+2      	; 0xd74 <vTaskIncrementTick+0x14>
     d72:	61 c0       	rjmp	.+194    	; 0xe36 <vTaskIncrementTick+0xd6>
	{
		++xTickCount;
     d74:	80 91 b7 02 	lds	r24, 0x02B7
     d78:	90 91 b8 02 	lds	r25, 0x02B8
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	90 93 b8 02 	sts	0x02B8, r25
     d82:	80 93 b7 02 	sts	0x02B7, r24
		if( xTickCount == ( portTickType ) 0 )
     d86:	80 91 b7 02 	lds	r24, 0x02B7
     d8a:	90 91 b8 02 	lds	r25, 0x02B8
     d8e:	89 2b       	or	r24, r25
     d90:	e9 f5       	brne	.+122    	; 0xe0c <vTaskIncrementTick+0xac>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
     d92:	80 91 f7 02 	lds	r24, 0x02F7
     d96:	90 91 f8 02 	lds	r25, 0x02F8
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     d9a:	20 91 f9 02 	lds	r18, 0x02F9
     d9e:	30 91 fa 02 	lds	r19, 0x02FA
     da2:	30 93 f8 02 	sts	0x02F8, r19
     da6:	20 93 f7 02 	sts	0x02F7, r18
			pxOverflowDelayedTaskList = pxTemp;
     daa:	90 93 fa 02 	sts	0x02FA, r25
     dae:	80 93 f9 02 	sts	0x02F9, r24
			xNumOfOverflows++;
     db2:	80 91 b6 02 	lds	r24, 0x02B6
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	80 93 b6 02 	sts	0x02B6, r24
     dbc:	27 c0       	rjmp	.+78     	; 0xe0c <vTaskIncrementTick+0xac>
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
     dbe:	20 91 b7 02 	lds	r18, 0x02B7
     dc2:	30 91 b8 02 	lds	r19, 0x02B8
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	9b 81       	ldd	r25, Y+3	; 0x03
     dca:	28 17       	cp	r18, r24
     dcc:	39 07       	cpc	r19, r25
     dce:	c0 f1       	brcs	.+112    	; 0xe40 <vTaskIncrementTick+0xe0>
     dd0:	8e 01       	movw	r16, r28
     dd2:	0e 5f       	subi	r16, 0xFE	; 254
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255
     dd6:	c8 01       	movw	r24, r16
     dd8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
     ddc:	8c 89       	ldd	r24, Y+20	; 0x14
     dde:	9d 89       	ldd	r25, Y+21	; 0x15
     de0:	89 2b       	or	r24, r25
     de2:	21 f0       	breq	.+8      	; 0xdec <vTaskIncrementTick+0x8c>
     de4:	ce 01       	movw	r24, r28
     de6:	0c 96       	adiw	r24, 0x0c	; 12
     de8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
     dec:	9e 89       	ldd	r25, Y+22	; 0x16
     dee:	80 91 ba 02 	lds	r24, 0x02BA
     df2:	89 17       	cp	r24, r25
     df4:	10 f4       	brcc	.+4      	; 0xdfa <vTaskIncrementTick+0x9a>
     df6:	90 93 ba 02 	sts	0x02BA, r25
     dfa:	9f 9d       	mul	r25, r15
     dfc:	c0 01       	movw	r24, r0
     dfe:	11 24       	eor	r1, r1
     e00:	8f 53       	subi	r24, 0x3F	; 63
     e02:	9d 4f       	sbci	r25, 0xFD	; 253
     e04:	b8 01       	movw	r22, r16
     e06:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <vListInsertEnd>
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vTaskIncrementTick+0xb0>
     e0c:	89 e0       	ldi	r24, 0x09	; 9
     e0e:	f8 2e       	mov	r15, r24
     e10:	e0 91 f7 02 	lds	r30, 0x02F7
     e14:	f0 91 f8 02 	lds	r31, 0x02F8
     e18:	80 81       	ld	r24, Z
     e1a:	88 23       	and	r24, r24
     e1c:	89 f0       	breq	.+34     	; 0xe40 <vTaskIncrementTick+0xe0>
     e1e:	e0 91 f7 02 	lds	r30, 0x02F7
     e22:	f0 91 f8 02 	lds	r31, 0x02F8
     e26:	05 80       	ldd	r0, Z+5	; 0x05
     e28:	f6 81       	ldd	r31, Z+6	; 0x06
     e2a:	e0 2d       	mov	r30, r0
     e2c:	c6 81       	ldd	r28, Z+6	; 0x06
     e2e:	d7 81       	ldd	r29, Z+7	; 0x07
     e30:	20 97       	sbiw	r28, 0x00	; 0
     e32:	29 f6       	brne	.-118    	; 0xdbe <vTaskIncrementTick+0x5e>
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <vTaskIncrementTick+0xe0>
	}
	else
	{
		++uxMissedTicks;
     e36:	80 91 bb 02 	lds	r24, 0x02BB
     e3a:	8f 5f       	subi	r24, 0xFF	; 255
     e3c:	80 93 bb 02 	sts	0x02BB, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	08 95       	ret

00000e4c <vTaskPlaceOnEventList>:
	vWriteTraceToBuffer();
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	8b 01       	movw	r16, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
     e52:	60 91 b3 02 	lds	r22, 0x02B3
     e56:	70 91 b4 02 	lds	r23, 0x02B4
     e5a:	64 5f       	subi	r22, 0xF4	; 244
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     e62:	80 91 b3 02 	lds	r24, 0x02B3
     e66:	90 91 b4 02 	lds	r25, 0x02B4
     e6a:	02 96       	adiw	r24, 0x02	; 2
     e6c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
     e70:	80 91 b7 02 	lds	r24, 0x02B7
     e74:	90 91 b8 02 	lds	r25, 0x02B8
     e78:	80 0f       	add	r24, r16
     e7a:	91 1f       	adc	r25, r17

			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
     e7c:	e0 91 b3 02 	lds	r30, 0x02B3
     e80:	f0 91 b4 02 	lds	r31, 0x02B4
     e84:	93 83       	std	Z+3, r25	; 0x03
     e86:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xTickCount )
     e88:	20 91 b7 02 	lds	r18, 0x02B7
     e8c:	30 91 b8 02 	lds	r19, 0x02B8
     e90:	82 17       	cp	r24, r18
     e92:	93 07       	cpc	r25, r19
     e94:	28 f4       	brcc	.+10     	; 0xea0 <vTaskPlaceOnEventList+0x54>
			{
				/* Wake time has overflowed.  Place this item in the overflow list. */
				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     e96:	80 91 f9 02 	lds	r24, 0x02F9
     e9a:	90 91 fa 02 	lds	r25, 0x02FA
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <vTaskPlaceOnEventList+0x5c>
			}
			else
			{
				/* The wake time has not overflowed, so we can use the current block list. */
				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     ea0:	80 91 f7 02 	lds	r24, 0x02F7
     ea4:	90 91 f8 02 	lds	r25, 0x02F8
     ea8:	60 91 b3 02 	lds	r22, 0x02B3
     eac:	70 91 b4 02 	lds	r23, 0x02B4
     eb0:	6e 5f       	subi	r22, 0xFE	; 254
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <vListInsert>
			}
	}
	#endif
}
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	08 95       	ret

00000ebe <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	portENTER_CRITICAL();
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
     ed8:	80 91 b9 02 	lds	r24, 0x02B9
     edc:	81 50       	subi	r24, 0x01	; 1
     ede:	80 93 b9 02 	sts	0x02B9, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     ee2:	80 91 b9 02 	lds	r24, 0x02B9
     ee6:	88 23       	and	r24, r24
     ee8:	09 f0       	breq	.+2      	; 0xeec <xTaskResumeAll+0x2e>
     eea:	5b c0       	rjmp	.+182    	; 0xfa2 <xTaskResumeAll+0xe4>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
     eec:	80 91 bc 02 	lds	r24, 0x02BC
     ef0:	88 23       	and	r24, r24
     ef2:	09 f4       	brne	.+2      	; 0xef6 <xTaskResumeAll+0x38>
     ef4:	56 c0       	rjmp	.+172    	; 0xfa2 <xTaskResumeAll+0xe4>
     ef6:	19 82       	std	Y+1, r1	; 0x01
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
     ef8:	99 e0       	ldi	r25, 0x09	; 9
     efa:	f9 2e       	mov	r15, r25
     efc:	27 c0       	rjmp	.+78     	; 0xf4c <xTaskResumeAll+0x8e>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
     efe:	c6 01       	movw	r24, r12
     f00:	0c 96       	adiw	r24, 0x0c	; 12
     f02:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
     f06:	86 01       	movw	r16, r12
     f08:	0e 5f       	subi	r16, 0xFE	; 254
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	c8 01       	movw	r24, r16
     f0e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     f12:	d6 01       	movw	r26, r12
     f14:	56 96       	adiw	r26, 0x16	; 22
     f16:	9c 91       	ld	r25, X
     f18:	80 91 ba 02 	lds	r24, 0x02BA
     f1c:	89 17       	cp	r24, r25
     f1e:	10 f4       	brcc	.+4      	; 0xf24 <xTaskResumeAll+0x66>
     f20:	90 93 ba 02 	sts	0x02BA, r25
     f24:	9f 9d       	mul	r25, r15
     f26:	c0 01       	movw	r24, r0
     f28:	11 24       	eor	r1, r1
     f2a:	8f 53       	subi	r24, 0x3F	; 63
     f2c:	9d 4f       	sbci	r25, 0xFD	; 253
     f2e:	b8 01       	movw	r22, r16
     f30:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     f34:	e0 91 b3 02 	lds	r30, 0x02B3
     f38:	f0 91 b4 02 	lds	r31, 0x02B4
     f3c:	d6 01       	movw	r26, r12
     f3e:	56 96       	adiw	r26, 0x16	; 22
     f40:	9c 91       	ld	r25, X
     f42:	86 89       	ldd	r24, Z+22	; 0x16
     f44:	98 17       	cp	r25, r24
     f46:	10 f0       	brcs	.+4      	; 0xf4c <xTaskResumeAll+0x8e>
     f48:	b1 e0       	ldi	r27, 0x01	; 1
     f4a:	b9 83       	std	Y+1, r27	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
     f4c:	80 91 fb 02 	lds	r24, 0x02FB
     f50:	88 23       	and	r24, r24
     f52:	49 f0       	breq	.+18     	; 0xf66 <xTaskResumeAll+0xa8>
     f54:	e0 91 00 03 	lds	r30, 0x0300
     f58:	f0 91 01 03 	lds	r31, 0x0301
     f5c:	c6 80       	ldd	r12, Z+6	; 0x06
     f5e:	d7 80       	ldd	r13, Z+7	; 0x07
     f60:	c1 14       	cp	r12, r1
     f62:	d1 04       	cpc	r13, r1
     f64:	61 f6       	brne	.-104    	; 0xefe <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
     f66:	80 91 bb 02 	lds	r24, 0x02BB
     f6a:	88 23       	and	r24, r24
     f6c:	41 f4       	brne	.+16     	; 0xf7e <xTaskResumeAll+0xc0>
     f6e:	0c c0       	rjmp	.+24     	; 0xf88 <xTaskResumeAll+0xca>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
     f70:	0e 94 b0 06 	call	0xd60	; 0xd60 <vTaskIncrementTick>
						--uxMissedTicks;
     f74:	80 91 bb 02 	lds	r24, 0x02BB
     f78:	81 50       	subi	r24, 0x01	; 1
     f7a:	80 93 bb 02 	sts	0x02BB, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
     f7e:	80 91 bb 02 	lds	r24, 0x02BB
     f82:	88 23       	and	r24, r24
     f84:	a9 f7       	brne	.-22     	; 0xf70 <xTaskResumeAll+0xb2>
     f86:	07 c0       	rjmp	.+14     	; 0xf96 <xTaskResumeAll+0xd8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     f88:	e9 81       	ldd	r30, Y+1	; 0x01
     f8a:	e1 30       	cpi	r30, 0x01	; 1
     f8c:	21 f0       	breq	.+8      	; 0xf96 <xTaskResumeAll+0xd8>
     f8e:	80 91 b5 02 	lds	r24, 0x02B5
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	31 f4       	brne	.+12     	; 0xfa2 <xTaskResumeAll+0xe4>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
     f96:	10 92 b5 02 	sts	0x02B5, r1
					portYIELD_WITHIN_API();
     f9a:	0e 94 88 11 	call	0x2310	; 0x2310 <vPortYield>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <xTaskResumeAll+0xe6>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	portEXIT_CRITICAL();
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	08 95       	ret

00000fba <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	9c 01       	movw	r18, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	a1 f1       	breq	.+104    	; 0x102c <vTaskDelay+0x72>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     fc4:	80 91 b9 02 	lds	r24, 0x02B9
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	80 93 b9 02 	sts	0x02B9, r24
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     fce:	00 91 b7 02 	lds	r16, 0x02B7
     fd2:	10 91 b8 02 	lds	r17, 0x02B8
     fd6:	02 0f       	add	r16, r18
     fd8:	13 1f       	adc	r17, r19

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     fda:	80 91 b3 02 	lds	r24, 0x02B3
     fde:	90 91 b4 02 	lds	r25, 0x02B4
     fe2:	02 96       	adiw	r24, 0x02	; 2
     fe4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
     fe8:	e0 91 b3 02 	lds	r30, 0x02B3
     fec:	f0 91 b4 02 	lds	r31, 0x02B4
     ff0:	13 83       	std	Z+3, r17	; 0x03
     ff2:	02 83       	std	Z+2, r16	; 0x02

				if( xTimeToWake < xTickCount )
     ff4:	80 91 b7 02 	lds	r24, 0x02B7
     ff8:	90 91 b8 02 	lds	r25, 0x02B8
     ffc:	08 17       	cp	r16, r24
     ffe:	19 07       	cpc	r17, r25
    1000:	28 f4       	brcc	.+10     	; 0x100c <vTaskDelay+0x52>
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1002:	80 91 f9 02 	lds	r24, 0x02F9
    1006:	90 91 fa 02 	lds	r25, 0x02FA
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <vTaskDelay+0x5a>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    100c:	80 91 f7 02 	lds	r24, 0x02F7
    1010:	90 91 f8 02 	lds	r25, 0x02F8
    1014:	60 91 b3 02 	lds	r22, 0x02B3
    1018:	70 91 b4 02 	lds	r23, 0x02B4
    101c:	6e 5f       	subi	r22, 0xFE	; 254
    101e:	7f 4f       	sbci	r23, 0xFF	; 255
    1020:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <vListInsert>
				}
			}
			xAlreadyYielded = xTaskResumeAll();
    1024:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    1028:	88 23       	and	r24, r24
    102a:	11 f4       	brne	.+4      	; 0x1030 <vTaskDelay+0x76>
		{
			portYIELD_WITHIN_API();
    102c:	0e 94 88 11 	call	0x2310	; 0x2310 <vPortYield>
		}
	}
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	fc 01       	movw	r30, r24
    103c:	eb 01       	movw	r28, r22

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    103e:	80 91 b9 02 	lds	r24, 0x02B9
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	80 93 b9 02 	sts	0x02B9, r24
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1048:	20 81       	ld	r18, Z
    104a:	31 81       	ldd	r19, Z+1	; 0x01
    104c:	c2 0f       	add	r28, r18
    104e:	d3 1f       	adc	r29, r19

			if( xTickCount < *pxPreviousWakeTime )
    1050:	80 91 b7 02 	lds	r24, 0x02B7
    1054:	90 91 b8 02 	lds	r25, 0x02B8
    1058:	82 17       	cp	r24, r18
    105a:	93 07       	cpc	r25, r19
    105c:	28 f4       	brcc	.+10     	; 0x1068 <vTaskDelayUntil+0x32>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    105e:	c2 17       	cp	r28, r18
    1060:	d3 07       	cpc	r29, r19
    1062:	28 f0       	brcs	.+10     	; 0x106e <vTaskDelayUntil+0x38>
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	0c c0       	rjmp	.+24     	; 0x1080 <vTaskDelayUntil+0x4a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1068:	c2 17       	cp	r28, r18
    106a:	d3 07       	cpc	r29, r19
    106c:	40 f0       	brcs	.+16     	; 0x107e <vTaskDelayUntil+0x48>
    106e:	80 91 b7 02 	lds	r24, 0x02B7
    1072:	90 91 b8 02 	lds	r25, 0x02B8
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	8c 17       	cp	r24, r28
    107a:	9d 07       	cpc	r25, r29
    107c:	08 f4       	brcc	.+2      	; 0x1080 <vTaskDelayUntil+0x4a>
    107e:	21 e0       	ldi	r18, 0x01	; 1
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1080:	d1 83       	std	Z+1, r29	; 0x01
    1082:	c0 83       	st	Z, r28

			if( xShouldDelay )
    1084:	22 23       	and	r18, r18
    1086:	29 f1       	breq	.+74     	; 0x10d2 <vTaskDelayUntil+0x9c>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1088:	80 91 b3 02 	lds	r24, 0x02B3
    108c:	90 91 b4 02 	lds	r25, 0x02B4
    1090:	02 96       	adiw	r24, 0x02	; 2
    1092:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1096:	e0 91 b3 02 	lds	r30, 0x02B3
    109a:	f0 91 b4 02 	lds	r31, 0x02B4
    109e:	d3 83       	std	Z+3, r29	; 0x03
    10a0:	c2 83       	std	Z+2, r28	; 0x02

				if( xTimeToWake < xTickCount )
    10a2:	80 91 b7 02 	lds	r24, 0x02B7
    10a6:	90 91 b8 02 	lds	r25, 0x02B8
    10aa:	c8 17       	cp	r28, r24
    10ac:	d9 07       	cpc	r29, r25
    10ae:	28 f4       	brcc	.+10     	; 0x10ba <vTaskDelayUntil+0x84>
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    10b0:	80 91 f9 02 	lds	r24, 0x02F9
    10b4:	90 91 fa 02 	lds	r25, 0x02FA
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <vTaskDelayUntil+0x8c>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    10ba:	80 91 f7 02 	lds	r24, 0x02F7
    10be:	90 91 f8 02 	lds	r25, 0x02F8
    10c2:	60 91 b3 02 	lds	r22, 0x02B3
    10c6:	70 91 b4 02 	lds	r23, 0x02B4
    10ca:	6e 5f       	subi	r22, 0xFE	; 254
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <vListInsert>
				}
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    10d2:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    10d6:	88 23       	and	r24, r24
    10d8:	11 f4       	brne	.+4      	; 0x10de <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
    10da:	0e 94 88 11 	call	0x2310	; 0x2310 <vPortYield>
		}
	}
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		portENTER_CRITICAL();
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    10f8:	80 91 b3 02 	lds	r24, 0x02B3
    10fc:	90 91 b4 02 	lds	r25, 0x02B4
    1100:	08 17       	cp	r16, r24
    1102:	19 07       	cpc	r17, r25
    1104:	19 f4       	brne	.+6      	; 0x110c <vTaskDelete+0x28>
    1106:	00 e0       	ldi	r16, 0x00	; 0
    1108:	10 e0       	ldi	r17, 0x00	; 0
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    110c:	01 15       	cp	r16, r1
    110e:	11 05       	cpc	r17, r1
    1110:	29 f4       	brne	.+10     	; 0x111c <vTaskDelete+0x38>
    1112:	c0 91 b3 02 	lds	r28, 0x02B3
    1116:	d0 91 b4 02 	lds	r29, 0x02B4
    111a:	01 c0       	rjmp	.+2      	; 0x111e <vTaskDelete+0x3a>
    111c:	e8 01       	movw	r28, r16

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    111e:	22 e0       	ldi	r18, 0x02	; 2
    1120:	e2 2e       	mov	r14, r18
    1122:	f1 2c       	mov	r15, r1
    1124:	ec 0e       	add	r14, r28
    1126:	fd 1e       	adc	r15, r29
    1128:	c7 01       	movw	r24, r14
    112a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
    112e:	8c 89       	ldd	r24, Y+20	; 0x14
    1130:	9d 89       	ldd	r25, Y+21	; 0x15
    1132:	89 2b       	or	r24, r25
    1134:	21 f0       	breq	.+8      	; 0x113e <vTaskDelete+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1136:	ce 01       	movw	r24, r28
    1138:	0c 96       	adiw	r24, 0x0c	; 12
    113a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    113e:	84 e0       	ldi	r24, 0x04	; 4
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	b7 01       	movw	r22, r14
    1144:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    1148:	80 91 be 02 	lds	r24, 0x02BE
    114c:	8f 5f       	subi	r24, 0xFF	; 255
    114e:	80 93 be 02 	sts	0x02BE, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    1152:	80 91 bf 02 	lds	r24, 0x02BF
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	80 93 bf 02 	sts	0x02BF, r24

			traceTASK_DELETE( pxTCB );
		}
		portEXIT_CRITICAL();
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    1160:	80 91 bd 02 	lds	r24, 0x02BD
    1164:	88 23       	and	r24, r24
    1166:	21 f0       	breq	.+8      	; 0x1170 <vTaskDelete+0x8c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    1168:	01 2b       	or	r16, r17
    116a:	11 f4       	brne	.+4      	; 0x1170 <vTaskDelete+0x8c>
			{
				portYIELD_WITHIN_API();
    116c:	0e 94 88 11 	call	0x2310	; 0x2310 <vPortYield>
			}
		}
	}
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	08 95       	ret

0000117e <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    117e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1180:	10 92 bd 02 	sts	0x02BD, r1
	vPortEndScheduler();
    1184:	0e 94 29 11 	call	0x2252	; 0x2252 <vPortEndScheduler>
}
    1188:	08 95       	ret

0000118a <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
    1190:	80 91 be 02 	lds	r24, 0x02BE
    1194:	88 23       	and	r24, r24
    1196:	91 f1       	breq	.+100    	; 0x11fc <prvIdleTask+0x72>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1198:	80 91 b9 02 	lds	r24, 0x02B9
    119c:	8f 5f       	subi	r24, 0xFF	; 255
    119e:	80 93 b9 02 	sts	0x02B9, r24
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    11a2:	10 91 04 03 	lds	r17, 0x0304
			xTaskResumeAll();
    11a6:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>

			if( !xListIsEmpty )
    11aa:	11 23       	and	r17, r17
    11ac:	39 f1       	breq	.+78     	; 0x11fc <prvIdleTask+0x72>
			{
				tskTCB *pxTCB;

				portENTER_CRITICAL();
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    11b4:	80 91 04 03 	lds	r24, 0x0304
    11b8:	88 23       	and	r24, r24
    11ba:	19 f4       	brne	.+6      	; 0x11c2 <prvIdleTask+0x38>
    11bc:	c0 e0       	ldi	r28, 0x00	; 0
    11be:	d0 e0       	ldi	r29, 0x00	; 0
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <prvIdleTask+0x44>
    11c2:	e0 91 09 03 	lds	r30, 0x0309
    11c6:	f0 91 0a 03 	lds	r31, 0x030A
    11ca:	c6 81       	ldd	r28, Z+6	; 0x06
    11cc:	d7 81       	ldd	r29, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    11ce:	ce 01       	movw	r24, r28
    11d0:	02 96       	adiw	r24, 0x02	; 2
    11d2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
					--uxCurrentNumberOfTasks;
    11d6:	80 91 bc 02 	lds	r24, 0x02BC
    11da:	81 50       	subi	r24, 0x01	; 1
    11dc:	80 93 bc 02 	sts	0x02BC, r24
					--uxTasksDeleted;
    11e0:	80 91 be 02 	lds	r24, 0x02BE
    11e4:	81 50       	subi	r24, 0x01	; 1
    11e6:	80 93 be 02 	sts	0x02BE, r24
				}
				portEXIT_CRITICAL();
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    11ee:	8f 89       	ldd	r24, Y+23	; 0x17
    11f0:	98 8d       	ldd	r25, Y+24	; 0x18
    11f2:	0e 94 70 10 	call	0x20e0	; 0x20e0 <vPortFree>
		vPortFree( pxTCB );
    11f6:	ce 01       	movw	r24, r28
    11f8:	0e 94 70 10 	call	0x20e0	; 0x20e0 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    11fc:	80 91 c1 02 	lds	r24, 0x02C1
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	10 f0       	brcs	.+4      	; 0x1208 <prvIdleTask+0x7e>
			{
				taskYIELD();
    1204:	0e 94 88 11 	call	0x2310	; 0x2310 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    1208:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vApplicationIdleHook>
    120c:	c1 cf       	rjmp	.-126    	; 0x1190 <prvIdleTask+0x6>

0000120e <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    120e:	2f 92       	push	r2
    1210:	3f 92       	push	r3
    1212:	4f 92       	push	r4
    1214:	5f 92       	push	r5
    1216:	7f 92       	push	r7
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <xTaskGenericCreate+0x24>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <xTaskGenericCreate+0x26>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	1c 01       	movw	r2, r24
    123a:	4b 01       	movw	r8, r22
    123c:	5a 01       	movw	r10, r20
    123e:	29 01       	movw	r4, r18
    1240:	70 2e       	mov	r7, r16
    1242:	fa 82       	std	Y+2, r15	; 0x02
    1244:	e9 82       	std	Y+1, r14	; 0x01
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    1246:	81 e2       	ldi	r24, 0x21	; 33
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 80 10 	call	0x2100	; 0x2100 <pvPortMalloc>
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	9c 83       	std	Y+4, r25	; 0x04

	if( pxNewTCB != NULL )
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	89 2b       	or	r24, r25
    1258:	89 f0       	breq	.+34     	; 0x127c <xTaskGenericCreate+0x6e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    125a:	c1 14       	cp	r12, r1
    125c:	d1 04       	cpc	r13, r1
    125e:	21 f4       	brne	.+8      	; 0x1268 <xTaskGenericCreate+0x5a>
    1260:	c5 01       	movw	r24, r10
    1262:	0e 94 80 10 	call	0x2100	; 0x2100 <pvPortMalloc>
    1266:	6c 01       	movw	r12, r24
    1268:	eb 81       	ldd	r30, Y+3	; 0x03
    126a:	fc 81       	ldd	r31, Y+4	; 0x04
    126c:	d0 8e       	std	Z+24, r13	; 0x18
    126e:	c7 8a       	std	Z+23, r12	; 0x17

		if( pxNewTCB->pxStack == NULL )
    1270:	c1 14       	cp	r12, r1
    1272:	d1 04       	cpc	r13, r1
    1274:	29 f4       	brne	.+10     	; 0x1280 <xTaskGenericCreate+0x72>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    1276:	cf 01       	movw	r24, r30
    1278:	0e 94 70 10 	call	0x20e0	; 0x20e0 <vPortFree>
    127c:	8f ef       	ldi	r24, 0xFF	; 255
    127e:	cf c0       	rjmp	.+414    	; 0x141e <xTaskGenericCreate+0x210>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
    1280:	c6 01       	movw	r24, r12
    1282:	65 ea       	ldi	r22, 0xA5	; 165
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	a5 01       	movw	r20, r10
    1288:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    128c:	08 94       	sec
    128e:	a1 08       	sbc	r10, r1
    1290:	b1 08       	sbc	r11, r1
    1292:	eb 81       	ldd	r30, Y+3	; 0x03
    1294:	fc 81       	ldd	r31, Y+4	; 0x04
    1296:	e7 88       	ldd	r14, Z+23	; 0x17
    1298:	f0 8c       	ldd	r15, Z+24	; 0x18
    129a:	ea 0c       	add	r14, r10
    129c:	fb 1c       	adc	r15, r11
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    129e:	cf 01       	movw	r24, r30
    12a0:	49 96       	adiw	r24, 0x19	; 25
    12a2:	b4 01       	movw	r22, r8
    12a4:	48 e0       	ldi	r20, 0x08	; 8
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    12ac:	eb 81       	ldd	r30, Y+3	; 0x03
    12ae:	fc 81       	ldd	r31, Y+4	; 0x04
    12b0:	10 a2       	std	Z+32, r1	; 0x20
    12b2:	07 2d       	mov	r16, r7
    12b4:	f3 e0       	ldi	r31, 0x03	; 3
    12b6:	f7 15       	cp	r31, r7
    12b8:	08 f4       	brcc	.+2      	; 0x12bc <xTaskGenericCreate+0xae>
    12ba:	03 e0       	ldi	r16, 0x03	; 3
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - 1;
	}

	pxTCB->uxPriority = uxPriority;
    12bc:	eb 81       	ldd	r30, Y+3	; 0x03
    12be:	fc 81       	ldd	r31, Y+4	; 0x04
    12c0:	06 8b       	std	Z+22, r16	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    12c2:	42 e0       	ldi	r20, 0x02	; 2
    12c4:	c4 2e       	mov	r12, r20
    12c6:	d1 2c       	mov	r13, r1
    12c8:	ce 0e       	add	r12, r30
    12ca:	df 1e       	adc	r13, r31
    12cc:	c6 01       	movw	r24, r12
    12ce:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	0c 96       	adiw	r24, 0x0c	; 12
    12d8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	fc 01       	movw	r30, r24
    12e2:	91 87       	std	Z+9, r25	; 0x09
    12e4:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    12e6:	84 e0       	ldi	r24, 0x04	; 4
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	80 1b       	sub	r24, r16
    12ec:	91 09       	sbc	r25, r1
    12ee:	95 87       	std	Z+13, r25	; 0x0d
    12f0:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    12f2:	f3 8b       	std	Z+19, r31	; 0x13
    12f4:	e2 8b       	std	Z+18, r30	; 0x12
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    12f6:	c7 01       	movw	r24, r14
    12f8:	b1 01       	movw	r22, r2
    12fa:	a2 01       	movw	r20, r4
    12fc:	0e 94 a7 10 	call	0x214e	; 0x214e <pxPortInitialiseStack>
    1300:	eb 81       	ldd	r30, Y+3	; 0x03
    1302:	fc 81       	ldd	r31, Y+4	; 0x04
    1304:	91 83       	std	Z+1, r25	; 0x01
    1306:	80 83       	st	Z, r24
		}
		#endif

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		portENTER_CRITICAL();
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    130e:	80 91 bc 02 	lds	r24, 0x02BC
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	80 93 bc 02 	sts	0x02BC, r24
			if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1318:	80 91 bc 02 	lds	r24, 0x02BC
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	89 f5       	brne	.+98     	; 0x1382 <xTaskGenericCreate+0x174>
			{
				/* As this is the first task it must also be the current task. */
				pxCurrentTCB =  pxNewTCB;
    1320:	f0 93 b4 02 	sts	0x02B4, r31
    1324:	e0 93 b3 02 	sts	0x02B3, r30
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    1328:	81 ec       	ldi	r24, 0xC1	; 193
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
    1330:	8a ec       	ldi	r24, 0xCA	; 202
    1332:	92 e0       	ldi	r25, 0x02	; 2
    1334:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
    1338:	83 ed       	ldi	r24, 0xD3	; 211
    133a:	92 e0       	ldi	r25, 0x02	; 2
    133c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
    1340:	8c ed       	ldi	r24, 0xDC	; 220
    1342:	92 e0       	ldi	r25, 0x02	; 2
    1344:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    1348:	35 ee       	ldi	r19, 0xE5	; 229
    134a:	e3 2e       	mov	r14, r19
    134c:	32 e0       	ldi	r19, 0x02	; 2
    134e:	f3 2e       	mov	r15, r19
    1350:	c7 01       	movw	r24, r14
    1352:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    1356:	0e ee       	ldi	r16, 0xEE	; 238
    1358:	12 e0       	ldi	r17, 0x02	; 2
    135a:	c8 01       	movw	r24, r16
    135c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    1360:	8b ef       	ldi	r24, 0xFB	; 251
    1362:	92 e0       	ldi	r25, 0x02	; 2
    1364:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    1368:	84 e0       	ldi	r24, 0x04	; 4
    136a:	93 e0       	ldi	r25, 0x03	; 3
    136c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1370:	f0 92 f8 02 	sts	0x02F8, r15
    1374:	e0 92 f7 02 	sts	0x02F7, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1378:	10 93 fa 02 	sts	0x02FA, r17
    137c:	00 93 f9 02 	sts	0x02F9, r16
    1380:	11 c0       	rjmp	.+34     	; 0x13a4 <xTaskGenericCreate+0x196>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1382:	80 91 bd 02 	lds	r24, 0x02BD
    1386:	88 23       	and	r24, r24
    1388:	69 f4       	brne	.+26     	; 0x13a4 <xTaskGenericCreate+0x196>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    138a:	e0 91 b3 02 	lds	r30, 0x02B3
    138e:	f0 91 b4 02 	lds	r31, 0x02B4
    1392:	86 89       	ldd	r24, Z+22	; 0x16
    1394:	78 16       	cp	r7, r24
    1396:	30 f0       	brcs	.+12     	; 0x13a4 <xTaskGenericCreate+0x196>
					{
						pxCurrentTCB = pxNewTCB;
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	90 93 b4 02 	sts	0x02B4, r25
    13a0:	80 93 b3 02 	sts	0x02B3, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    13a4:	eb 81       	ldd	r30, Y+3	; 0x03
    13a6:	fc 81       	ldd	r31, Y+4	; 0x04
    13a8:	96 89       	ldd	r25, Z+22	; 0x16
    13aa:	80 91 c0 02 	lds	r24, 0x02C0
    13ae:	89 17       	cp	r24, r25
    13b0:	10 f4       	brcc	.+4      	; 0x13b6 <xTaskGenericCreate+0x1a8>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    13b2:	90 93 c0 02 	sts	0x02C0, r25
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    13b6:	80 91 bf 02 	lds	r24, 0x02BF
    13ba:	8f 5f       	subi	r24, 0xFF	; 255
    13bc:	80 93 bf 02 	sts	0x02BF, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    13c0:	eb 81       	ldd	r30, Y+3	; 0x03
    13c2:	fc 81       	ldd	r31, Y+4	; 0x04
    13c4:	96 89       	ldd	r25, Z+22	; 0x16
    13c6:	80 91 ba 02 	lds	r24, 0x02BA
    13ca:	89 17       	cp	r24, r25
    13cc:	10 f4       	brcc	.+4      	; 0x13d2 <xTaskGenericCreate+0x1c4>
    13ce:	90 93 ba 02 	sts	0x02BA, r25
    13d2:	eb 81       	ldd	r30, Y+3	; 0x03
    13d4:	fc 81       	ldd	r31, Y+4	; 0x04
    13d6:	86 89       	ldd	r24, Z+22	; 0x16
    13d8:	29 e0       	ldi	r18, 0x09	; 9
    13da:	82 9f       	mul	r24, r18
    13dc:	c0 01       	movw	r24, r0
    13de:	11 24       	eor	r1, r1
    13e0:	8f 53       	subi	r24, 0x3F	; 63
    13e2:	9d 4f       	sbci	r25, 0xFD	; 253
    13e4:	b6 01       	movw	r22, r12
    13e6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		portEXIT_CRITICAL();
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED( pxNewTCB );
	}

	if( xReturn == pdPASS )
	{
		if( ( void * ) pxCreatedTask != NULL )
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	89 2b       	or	r24, r25
    13f4:	31 f0       	breq	.+12     	; 0x1402 <xTaskGenericCreate+0x1f4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	e9 81       	ldd	r30, Y+1	; 0x01
    13fc:	fa 81       	ldd	r31, Y+2	; 0x02
    13fe:	91 83       	std	Z+1, r25	; 0x01
    1400:	80 83       	st	Z, r24
		}

		if( xSchedulerRunning != pdFALSE )
    1402:	80 91 bd 02 	lds	r24, 0x02BD
    1406:	88 23       	and	r24, r24
    1408:	49 f0       	breq	.+18     	; 0x141c <xTaskGenericCreate+0x20e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    140a:	e0 91 b3 02 	lds	r30, 0x02B3
    140e:	f0 91 b4 02 	lds	r31, 0x02B4
    1412:	86 89       	ldd	r24, Z+22	; 0x16
    1414:	87 15       	cp	r24, r7
    1416:	10 f4       	brcc	.+4      	; 0x141c <xTaskGenericCreate+0x20e>
			{
				portYIELD_WITHIN_API();
    1418:	0e 94 88 11 	call	0x2310	; 0x2310 <vPortYield>
    141c:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return xReturn;
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	df 90       	pop	r13
    1434:	cf 90       	pop	r12
    1436:	bf 90       	pop	r11
    1438:	af 90       	pop	r10
    143a:	9f 90       	pop	r9
    143c:	8f 90       	pop	r8
    143e:	7f 90       	pop	r7
    1440:	5f 90       	pop	r5
    1442:	4f 90       	pop	r4
    1444:	3f 90       	pop	r3
    1446:	2f 90       	pop	r2
    1448:	08 95       	ret

0000144a <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    144a:	af 92       	push	r10
    144c:	bf 92       	push	r11
    144e:	cf 92       	push	r12
    1450:	df 92       	push	r13
    1452:	ef 92       	push	r14
    1454:	ff 92       	push	r15
    1456:	0f 93       	push	r16
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
    1458:	85 ec       	ldi	r24, 0xC5	; 197
    145a:	98 e0       	ldi	r25, 0x08	; 8
    145c:	6c ea       	ldi	r22, 0xAC	; 172
    145e:	72 e0       	ldi	r23, 0x02	; 2
    1460:	45 e5       	ldi	r20, 0x55	; 85
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	00 e0       	ldi	r16, 0x00	; 0
    146a:	ee 24       	eor	r14, r14
    146c:	ff 24       	eor	r15, r15
    146e:	cc 24       	eor	r12, r12
    1470:	dd 24       	eor	r13, r13
    1472:	aa 24       	eor	r10, r10
    1474:	bb 24       	eor	r11, r11
    1476:	0e 94 07 09 	call	0x120e	; 0x120e <xTaskGenericCreate>

	if( xReturn == pdPASS )
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	49 f4       	brne	.+18     	; 0x1490 <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    147e:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    1480:	80 93 bd 02 	sts	0x02BD, r24
		xTickCount = ( portTickType ) 0;
    1484:	10 92 b8 02 	sts	0x02B8, r1
    1488:	10 92 b7 02 	sts	0x02B7, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
    148c:	0e 94 ef 10 	call	0x21de	; 0x21de <xPortStartScheduler>
		else
		{
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}
}
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	bf 90       	pop	r11
    149c:	af 90       	pop	r10
    149e:	08 95       	ret

000014a0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    14a0:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	taskENTER_CRITICAL();
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    14a8:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    14ae:	08 95       	ret

000014b0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    14b0:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	uxReturn = pxQueue->uxMessagesWaiting;
    14b2:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
}
    14b4:	08 95       	ret

000014b6 <xQueueIsQueueEmptyFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    14b6:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    14b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <xQueueIsQueueEmptyFromISR+0xc>
    14c0:	91 e0       	ldi	r25, 0x01	; 1

	return xReturn;
}
    14c2:	89 2f       	mov	r24, r25
    14c4:	08 95       	ret

000014c6 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    14c6:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    14c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	83 8d       	ldd	r24, Z+27	; 0x1b
    14ce:	98 17       	cp	r25, r24
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <xQueueIsQueueFullFromISR+0xe>
    14d2:	21 e0       	ldi	r18, 0x01	; 1

	return xReturn;
}
    14d4:	82 2f       	mov	r24, r18
    14d6:	08 95       	ret

000014d8 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	ec 01       	movw	r28, r24
    14de:	84 2f       	mov	r24, r20
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    14e0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    14e2:	44 23       	and	r20, r20
    14e4:	a1 f1       	breq	.+104    	; 0x154e <prvCopyDataToQueue+0x76>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    14e6:	88 23       	and	r24, r24
    14e8:	b1 f4       	brne	.+44     	; 0x1516 <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    14f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14f6:	2c 81       	ldd	r18, Y+4	; 0x04
    14f8:	3d 81       	ldd	r19, Y+5	; 0x05
    14fa:	28 0f       	add	r18, r24
    14fc:	31 1d       	adc	r19, r1
    14fe:	3d 83       	std	Y+5, r19	; 0x05
    1500:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	9b 81       	ldd	r25, Y+3	; 0x03
    1506:	28 17       	cp	r18, r24
    1508:	39 07       	cpc	r19, r25
    150a:	08 f1       	brcs	.+66     	; 0x154e <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    150c:	88 81       	ld	r24, Y
    150e:	99 81       	ldd	r25, Y+1	; 0x01
    1510:	9d 83       	std	Y+5, r25	; 0x05
    1512:	8c 83       	std	Y+4, r24	; 0x04
    1514:	1c c0       	rjmp	.+56     	; 0x154e <prvCopyDataToQueue+0x76>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1516:	8e 81       	ldd	r24, Y+6	; 0x06
    1518:	9f 81       	ldd	r25, Y+7	; 0x07
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1520:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	44 27       	eor	r20, r20
    1526:	55 27       	eor	r21, r21
    1528:	48 1b       	sub	r20, r24
    152a:	59 0b       	sbc	r21, r25
    152c:	8e 81       	ldd	r24, Y+6	; 0x06
    152e:	9f 81       	ldd	r25, Y+7	; 0x07
    1530:	84 0f       	add	r24, r20
    1532:	95 1f       	adc	r25, r21
    1534:	9f 83       	std	Y+7, r25	; 0x07
    1536:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1538:	28 81       	ld	r18, Y
    153a:	39 81       	ldd	r19, Y+1	; 0x01
    153c:	82 17       	cp	r24, r18
    153e:	93 07       	cpc	r25, r19
    1540:	30 f4       	brcc	.+12     	; 0x154e <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	9b 81       	ldd	r25, Y+3	; 0x03
    1546:	84 0f       	add	r24, r20
    1548:	95 1f       	adc	r25, r21
    154a:	9f 83       	std	Y+7, r25	; 0x07
    154c:	8e 83       	std	Y+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    154e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1550:	8f 5f       	subi	r24, 0xFF	; 255
    1552:	8a 8f       	std	Y+26, r24	; 0x1a
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <xQueueCRReceiveFromISR>:
#endif
/*-----------------------------------------------------------*/

#if configUSE_CO_ROUTINES == 1
signed portBASE_TYPE xQueueCRReceiveFromISR( xQueueHandle pxQueue, void *pvBuffer, signed portBASE_TYPE *pxCoRoutineWoken )
{
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	ec 01       	movw	r28, r24
    1564:	fb 01       	movw	r30, r22
    1566:	8a 01       	movw	r16, r20
signed portBASE_TYPE xReturn;

	/* We cannot block from an ISR, so check there is data available. If
	not then just leave without doing anything. */
	if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1568:	8a 8d       	ldd	r24, Y+26	; 0x1a
    156a:	88 23       	and	r24, r24
    156c:	61 f1       	breq	.+88     	; 0x15c6 <xQueueCRReceiveFromISR+0x6c>
	{
		/* Copy the data from the queue. */
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    156e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1570:	2e 81       	ldd	r18, Y+6	; 0x06
    1572:	3f 81       	ldd	r19, Y+7	; 0x07
    1574:	28 0f       	add	r18, r24
    1576:	31 1d       	adc	r19, r1
    1578:	3f 83       	std	Y+7, r19	; 0x07
    157a:	2e 83       	std	Y+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	9b 81       	ldd	r25, Y+3	; 0x03
    1580:	28 17       	cp	r18, r24
    1582:	39 07       	cpc	r19, r25
    1584:	20 f0       	brcs	.+8      	; 0x158e <xQueueCRReceiveFromISR+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1586:	88 81       	ld	r24, Y
    1588:	99 81       	ldd	r25, Y+1	; 0x01
    158a:	9f 83       	std	Y+7, r25	; 0x07
    158c:	8e 83       	std	Y+6, r24	; 0x06
		}
		--( pxQueue->uxMessagesWaiting );
    158e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1590:	81 50       	subi	r24, 0x01	; 1
    1592:	8a 8f       	std	Y+26, r24	; 0x1a
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1594:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1596:	6e 81       	ldd	r22, Y+6	; 0x06
    1598:	7f 81       	ldd	r23, Y+7	; 0x07
    159a:	cf 01       	movw	r24, r30
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <memcpy>

		if( !( *pxCoRoutineWoken ) )
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 81       	ld	r24, Z
    15a6:	88 23       	and	r24, r24
    15a8:	69 f4       	brne	.+26     	; 0x15c4 <xQueueCRReceiveFromISR+0x6a>
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    15aa:	88 85       	ldd	r24, Y+8	; 0x08
    15ac:	88 23       	and	r24, r24
    15ae:	51 f0       	breq	.+20     	; 0x15c4 <xQueueCRReceiveFromISR+0x6a>
			{
				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    15b0:	ce 01       	movw	r24, r28
    15b2:	08 96       	adiw	r24, 0x08	; 8
    15b4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xCoRoutineRemoveFromEventList>
    15b8:	88 23       	and	r24, r24
    15ba:	21 f0       	breq	.+8      	; 0x15c4 <xQueueCRReceiveFromISR+0x6a>
				{
					*pxCoRoutineWoken = pdTRUE;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	f8 01       	movw	r30, r16
    15c0:	80 83       	st	Z, r24
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <xQueueCRReceiveFromISR+0x6c>
    15c4:	81 e0       	ldi	r24, 0x01	; 1
	{
		xReturn = pdFAIL;
	}

	return xReturn;
}
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	08 95       	ret

000015d0 <xQueueCRSendFromISR>:



#if configUSE_CO_ROUTINES == 1
signed portBASE_TYPE xQueueCRSendFromISR( xQueueHandle pxQueue, const void *pvItemToQueue, signed portBASE_TYPE xCoRoutinePreviouslyWoken )
{
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	ec 01       	movw	r28, r24
    15d8:	14 2f       	mov	r17, r20
	/* Cannot block within an ISR so if there is no space on the queue then
	exit without doing anything. */
	if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    15da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15de:	98 17       	cp	r25, r24
    15e0:	88 f4       	brcc	.+34     	; 0x1604 <xQueueCRSendFromISR+0x34>
	{
		prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    15e2:	ce 01       	movw	r24, r28
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <prvCopyDataToQueue>

		/* We only want to wake one co-routine per ISR, so check that a
		co-routine has not already been woken. */
		if( !xCoRoutinePreviouslyWoken )
    15ea:	11 23       	and	r17, r17
    15ec:	59 f4       	brne	.+22     	; 0x1604 <xQueueCRSendFromISR+0x34>
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    15ee:	89 89       	ldd	r24, Y+17	; 0x11
    15f0:	88 23       	and	r24, r24
    15f2:	41 f0       	breq	.+16     	; 0x1604 <xQueueCRSendFromISR+0x34>
			{
				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    15f4:	ce 01       	movw	r24, r28
    15f6:	41 96       	adiw	r24, 0x11	; 17
    15f8:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xCoRoutineRemoveFromEventList>
    15fc:	48 2f       	mov	r20, r24
    15fe:	81 11       	cpse	r24, r1
    1600:	41 e0       	ldi	r20, 0x01	; 1
    1602:	14 2f       	mov	r17, r20
			}
		}
	}

	return xCoRoutinePreviouslyWoken;
}
    1604:	81 2f       	mov	r24, r17
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	08 95       	ret

0000160e <xQueueCRReceive>:
#endif
/*-----------------------------------------------------------*/

#if configUSE_CO_ROUTINES == 1
signed portBASE_TYPE xQueueCRReceive( xQueueHandle pxQueue, void *pvBuffer, portTickType xTicksToWait )
{
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	fb 01       	movw	r30, r22
signed portBASE_TYPE xReturn;

	/* If the queue is already empty we may have to block.  A critical section
	is required to prevent an interrupt adding something to the queue
	between the check to see if the queue is empty and blocking on the queue. */
	portDISABLE_INTERRUPTS();
    1616:	f8 94       	cli
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 )
    1618:	8a 8d       	ldd	r24, Y+26	; 0x1a
    161a:	88 23       	and	r24, r24
    161c:	71 f4       	brne	.+28     	; 0x163a <xQueueCRReceive+0x2c>
		{
			/* There are no messages in the queue, do we want to block or just
			leave with nothing? */
			if( xTicksToWait > ( portTickType ) 0 )
    161e:	41 15       	cp	r20, r1
    1620:	51 05       	cpc	r21, r1
    1622:	41 f0       	breq	.+16     	; 0x1634 <xQueueCRReceive+0x26>
			{
				/* As this is a co-routine we cannot block directly, but return
				indicating that we need to block. */
				vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    1624:	61 96       	adiw	r28, 0x11	; 17
    1626:	ca 01       	movw	r24, r20
    1628:	be 01       	movw	r22, r28
    162a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <vCoRoutineAddToDelayedList>
				portENABLE_INTERRUPTS();
    162e:	78 94       	sei
    1630:	8c ef       	ldi	r24, 0xFC	; 252
    1632:	30 c0       	rjmp	.+96     	; 0x1694 <xQueueCRReceive+0x86>
				return errQUEUE_BLOCKED;
			}
			else
			{
				portENABLE_INTERRUPTS();
    1634:	78 94       	sei
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	2d c0       	rjmp	.+90     	; 0x1694 <xQueueCRReceive+0x86>
				return errQUEUE_FULL;
			}
		}
	}
	portENABLE_INTERRUPTS();
    163a:	78 94       	sei

	portNOP();
    163c:	00 00       	nop

	portDISABLE_INTERRUPTS();
    163e:	f8 94       	cli
	{
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1640:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1642:	88 23       	and	r24, r24
    1644:	31 f1       	breq	.+76     	; 0x1692 <xQueueCRReceive+0x84>
		{
			/* Data is available from the queue. */
			pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1646:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1648:	2e 81       	ldd	r18, Y+6	; 0x06
    164a:	3f 81       	ldd	r19, Y+7	; 0x07
    164c:	28 0f       	add	r18, r24
    164e:	31 1d       	adc	r19, r1
    1650:	3f 83       	std	Y+7, r19	; 0x07
    1652:	2e 83       	std	Y+6, r18	; 0x06
			if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	28 17       	cp	r18, r24
    165a:	39 07       	cpc	r19, r25
    165c:	20 f0       	brcs	.+8      	; 0x1666 <xQueueCRReceive+0x58>
			{
				pxQueue->pcReadFrom = pxQueue->pcHead;
    165e:	88 81       	ld	r24, Y
    1660:	99 81       	ldd	r25, Y+1	; 0x01
    1662:	9f 83       	std	Y+7, r25	; 0x07
    1664:	8e 83       	std	Y+6, r24	; 0x06
			}
			--( pxQueue->uxMessagesWaiting );
    1666:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1668:	81 50       	subi	r24, 0x01	; 1
    166a:	8a 8f       	std	Y+26, r24	; 0x1a
			memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    166c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    166e:	6e 81       	ldd	r22, Y+6	; 0x06
    1670:	7f 81       	ldd	r23, Y+7	; 0x07
    1672:	cf 01       	movw	r24, r30
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <memcpy>

			xReturn = pdPASS;

			/* Were any co-routines waiting for space to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    167a:	88 85       	ldd	r24, Y+8	; 0x08
    167c:	88 23       	and	r24, r24
    167e:	41 f0       	breq	.+16     	; 0x1690 <xQueueCRReceive+0x82>
			{
				/* In this instance the co-routine could be placed directly
				into the ready list as we are within a critical section.
				Instead the same pending ready list mechanism is used as if
				the event were caused from within an interrupt. */
				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1680:	ce 01       	movw	r24, r28
    1682:	08 96       	adiw	r24, 0x08	; 8
    1684:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xCoRoutineRemoveFromEventList>
    1688:	88 23       	and	r24, r24
    168a:	11 f0       	breq	.+4      	; 0x1690 <xQueueCRReceive+0x82>
    168c:	8b ef       	ldi	r24, 0xFB	; 251
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <xQueueCRReceive+0x84>
    1690:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdFAIL;
		}
	}
	portENABLE_INTERRUPTS();
    1692:	78 94       	sei

	return xReturn;
}
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	08 95       	ret

0000169a <xQueueCRSend>:
}
/*-----------------------------------------------------------*/

#if configUSE_CO_ROUTINES == 1
signed portBASE_TYPE xQueueCRSend( xQueueHandle pxQueue, const void *pvItemToQueue, portTickType xTicksToWait )
{
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	ec 01       	movw	r28, r24
signed portBASE_TYPE xReturn;

	/* If the queue is already full we may have to block.  A critical section
	is required to prevent an interrupt removing something from the queue
	between the check to see if the queue is full and blocking on the queue. */
	portDISABLE_INTERRUPTS();
    16a0:	f8 94       	cli

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    16a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
	taskEXIT_CRITICAL();
    16ac:	0f 90       	pop	r0
    16ae:	0f be       	out	0x3f, r0	; 63
	/* If the queue is already full we may have to block.  A critical section
	is required to prevent an interrupt removing something from the queue
	between the check to see if the queue is full and blocking on the queue. */
	portDISABLE_INTERRUPTS();
	{
		if( prvIsQueueFull( pxQueue ) )
    16b0:	89 17       	cp	r24, r25
    16b2:	71 f4       	brne	.+28     	; 0x16d0 <xQueueCRSend+0x36>
		{
			/* The queue is full - do we want to block or just leave without
			posting? */
			if( xTicksToWait > ( portTickType ) 0 )
    16b4:	41 15       	cp	r20, r1
    16b6:	51 05       	cpc	r21, r1
    16b8:	41 f0       	breq	.+16     	; 0x16ca <xQueueCRSend+0x30>
			{
				/* As this is called from a coroutine we cannot block directly, but
				return indicating that we need to block. */
				vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    16ba:	28 96       	adiw	r28, 0x08	; 8
    16bc:	ca 01       	movw	r24, r20
    16be:	be 01       	movw	r22, r28
    16c0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <vCoRoutineAddToDelayedList>
				portENABLE_INTERRUPTS();
    16c4:	78 94       	sei
    16c6:	8c ef       	ldi	r24, 0xFC	; 252
    16c8:	1c c0       	rjmp	.+56     	; 0x1702 <xQueueCRSend+0x68>
				return errQUEUE_BLOCKED;
			}
			else
			{
				portENABLE_INTERRUPTS();
    16ca:	78 94       	sei
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	19 c0       	rjmp	.+50     	; 0x1702 <xQueueCRSend+0x68>
				return errQUEUE_FULL;
			}
		}
	}
	portENABLE_INTERRUPTS();
    16d0:	78 94       	sei

	portNOP();
    16d2:	00 00       	nop

	portDISABLE_INTERRUPTS();
    16d4:	f8 94       	cli
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    16d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16d8:	89 17       	cp	r24, r25
    16da:	10 f0       	brcs	.+4      	; 0x16e0 <xQueueCRSend+0x46>
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	10 c0       	rjmp	.+32     	; 0x1700 <xQueueCRSend+0x66>
		{
			/* There is room in the queue, copy the data into the queue. */
			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    16e0:	ce 01       	movw	r24, r28
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <prvCopyDataToQueue>
			xReturn = pdPASS;

			/* Were any co-routines waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    16e8:	89 89       	ldd	r24, Y+17	; 0x11
    16ea:	88 23       	and	r24, r24
    16ec:	41 f0       	breq	.+16     	; 0x16fe <xQueueCRSend+0x64>
			{
				/* In this instance the co-routine could be placed directly
				into the ready list as we are within a critical section.
				Instead the same pending ready list mechanism is used as if
				the event were caused from within an interrupt. */
				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    16ee:	ce 01       	movw	r24, r28
    16f0:	41 96       	adiw	r24, 0x11	; 17
    16f2:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xCoRoutineRemoveFromEventList>
    16f6:	88 23       	and	r24, r24
    16f8:	11 f0       	breq	.+4      	; 0x16fe <xQueueCRSend+0x64>
    16fa:	8b ef       	ldi	r24, 0xFB	; 251
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <xQueueCRSend+0x66>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = errQUEUE_FULL;
		}
	}
	portENABLE_INTERRUPTS();
    1700:	78 94       	sei

	return xReturn;
}
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <vQueueDelete>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	8c 01       	movw	r16, r24
	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    170e:	fc 01       	movw	r30, r24
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	0e 94 70 10 	call	0x20e0	; 0x20e0 <vPortFree>
	vPortFree( pxQueue );
    1718:	c8 01       	movw	r24, r16
    171a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <vPortFree>
}
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	08 95       	ret

00001724 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	ec 01       	movw	r28, r24
    172e:	fb 01       	movw	r30, r22
    1730:	8a 01       	movw	r16, r20
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1732:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1734:	88 23       	and	r24, r24
    1736:	81 f1       	breq	.+96     	; 0x1798 <xQueueReceiveFromISR+0x74>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1738:	48 81       	ld	r20, Y
    173a:	59 81       	ldd	r21, Y+1	; 0x01
    173c:	41 15       	cp	r20, r1
    173e:	51 05       	cpc	r21, r1
    1740:	a9 f0       	breq	.+42     	; 0x176c <xQueueReceiveFromISR+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1742:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1744:	2e 81       	ldd	r18, Y+6	; 0x06
    1746:	3f 81       	ldd	r19, Y+7	; 0x07
    1748:	28 0f       	add	r18, r24
    174a:	31 1d       	adc	r19, r1
    174c:	3f 83       	std	Y+7, r19	; 0x07
    174e:	2e 83       	std	Y+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	9b 81       	ldd	r25, Y+3	; 0x03
    1754:	28 17       	cp	r18, r24
    1756:	39 07       	cpc	r19, r25
    1758:	10 f0       	brcs	.+4      	; 0x175e <xQueueReceiveFromISR+0x3a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    175a:	5f 83       	std	Y+7, r21	; 0x07
    175c:	4e 83       	std	Y+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    175e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1760:	6e 81       	ldd	r22, Y+6	; 0x06
    1762:	7f 81       	ldd	r23, Y+7	; 0x07
    1764:	cf 01       	movw	r24, r30
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    176c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    176e:	81 50       	subi	r24, 0x01	; 1
    1770:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1772:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1774:	8f 3f       	cpi	r24, 0xFF	; 255
    1776:	69 f4       	brne	.+26     	; 0x1792 <xQueueReceiveFromISR+0x6e>
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    1778:	88 85       	ldd	r24, Y+8	; 0x08
    177a:	88 23       	and	r24, r24
    177c:	61 f0       	breq	.+24     	; 0x1796 <xQueueReceiveFromISR+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    177e:	ce 01       	movw	r24, r28
    1780:	08 96       	adiw	r24, 0x08	; 8
    1782:	0e 94 6d 06 	call	0xcda	; 0xcda <xTaskRemoveFromEventList>
    1786:	88 23       	and	r24, r24
    1788:	31 f0       	breq	.+12     	; 0x1796 <xQueueReceiveFromISR+0x72>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	f8 01       	movw	r30, r16
    178e:	80 83       	st	Z, r24
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <xQueueReceiveFromISR+0x74>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1792:	8f 5f       	subi	r24, 0xFF	; 255
    1794:	8d 8f       	std	Y+29, r24	; 0x1d
    1796:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	08 95       	ret

000017a2 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	ec 01       	movw	r28, r24
    17ac:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    17ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b2:	98 17       	cp	r25, r24
    17b4:	10 f0       	brcs	.+4      	; 0x17ba <xQueueGenericSendFromISR+0x18>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	17 c0       	rjmp	.+46     	; 0x17e8 <xQueueGenericSendFromISR+0x46>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    17ba:	ce 01       	movw	r24, r28
    17bc:	42 2f       	mov	r20, r18
    17be:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    17c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17c4:	8f 3f       	cpi	r24, 0xFF	; 255
    17c6:	69 f4       	brne	.+26     	; 0x17e2 <xQueueGenericSendFromISR+0x40>
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    17c8:	89 89       	ldd	r24, Y+17	; 0x11
    17ca:	88 23       	and	r24, r24
    17cc:	61 f0       	breq	.+24     	; 0x17e6 <xQueueGenericSendFromISR+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17ce:	ce 01       	movw	r24, r28
    17d0:	41 96       	adiw	r24, 0x11	; 17
    17d2:	0e 94 6d 06 	call	0xcda	; 0xcda <xTaskRemoveFromEventList>
    17d6:	88 23       	and	r24, r24
    17d8:	31 f0       	breq	.+12     	; 0x17e6 <xQueueGenericSendFromISR+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	f8 01       	movw	r30, r16
    17de:	80 83       	st	Z, r24
    17e0:	03 c0       	rjmp	.+6      	; 0x17e8 <xQueueGenericSendFromISR+0x46>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    17e2:	8f 5f       	subi	r24, 0xFF	; 255
    17e4:	8e 8f       	std	Y+30, r24	; 0x1e
    17e6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

000017f2 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	0f 92       	push	r0
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1802:	8c 01       	movw	r16, r24
    1804:	0f 5e       	subi	r16, 0xEF	; 239
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <prvUnlockQueue+0x32>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    180a:	89 89       	ldd	r24, Y+17	; 0x11
    180c:	88 23       	and	r24, r24
    180e:	69 f0       	breq	.+26     	; 0x182a <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1810:	c8 01       	movw	r24, r16
    1812:	0e 94 6d 06 	call	0xcda	; 0xcda <xTaskRemoveFromEventList>
    1816:	88 23       	and	r24, r24
    1818:	11 f0       	breq	.+4      	; 0x181e <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    181a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    181e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1820:	81 50       	subi	r24, 0x01	; 1
    1822:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1824:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1826:	18 16       	cp	r1, r24
    1828:	84 f3       	brlt	.-32     	; 0x180a <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    182a:	8f ef       	ldi	r24, 0xFF	; 255
    182c:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1838:	8e 01       	movw	r16, r28
    183a:	08 5f       	subi	r16, 0xF8	; 248
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	0d c0       	rjmp	.+26     	; 0x185a <prvUnlockQueue+0x68>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    1840:	88 85       	ldd	r24, Y+8	; 0x08
    1842:	88 23       	and	r24, r24
    1844:	69 f0       	breq	.+26     	; 0x1860 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1846:	c8 01       	movw	r24, r16
    1848:	0e 94 6d 06 	call	0xcda	; 0xcda <xTaskRemoveFromEventList>
    184c:	88 23       	and	r24, r24
    184e:	11 f0       	breq	.+4      	; 0x1854 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    1850:	0e 94 69 06 	call	0xcd2	; 0xcd2 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    1854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1856:	81 50       	subi	r24, 0x01	; 1
    1858:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    185a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    185c:	18 16       	cp	r1, r24
    185e:	84 f3       	brlt	.-32     	; 0x1840 <prvUnlockQueue+0x4e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1860:	8f ef       	ldi	r24, 0xFF	; 255
    1862:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	08 95       	ret

00001872 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1872:	7f 92       	push	r7
    1874:	8f 92       	push	r8
    1876:	9f 92       	push	r9
    1878:	af 92       	push	r10
    187a:	bf 92       	push	r11
    187c:	cf 92       	push	r12
    187e:	df 92       	push	r13
    1880:	ef 92       	push	r14
    1882:	ff 92       	push	r15
    1884:	0f 93       	push	r16
    1886:	1f 93       	push	r17
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <xQueueGenericReceive+0x1c>
    188e:	00 d0       	rcall	.+0      	; 0x1890 <xQueueGenericReceive+0x1e>
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	8c 01       	movw	r16, r24
    1898:	96 2e       	mov	r9, r22
    189a:	87 2e       	mov	r8, r23
    189c:	5d 83       	std	Y+5, r21	; 0x05
    189e:	4c 83       	std	Y+4, r20	; 0x04
    18a0:	72 2e       	mov	r7, r18
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    18a2:	91 e1       	ldi	r25, 0x11	; 17
    18a4:	c9 2e       	mov	r12, r25
    18a6:	d1 2c       	mov	r13, r1
    18a8:	c0 0e       	add	r12, r16
    18aa:	d1 1e       	adc	r13, r17
    18ac:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    18ae:	7e 01       	movw	r14, r28
    18b0:	08 94       	sec
    18b2:	e1 1c       	adc	r14, r1
    18b4:	f1 1c       	adc	r15, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    18b6:	84 e0       	ldi	r24, 0x04	; 4
    18b8:	a8 2e       	mov	r10, r24
    18ba:	b1 2c       	mov	r11, r1
    18bc:	ac 0e       	add	r10, r28
    18be:	bd 1e       	adc	r11, r29
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <xQueueGenericReceive+0x52>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    18c2:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    18ca:	f8 01       	movw	r30, r16
    18cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ce:	88 23       	and	r24, r24
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <xQueueGenericReceive+0x62>
    18d2:	3e c0       	rjmp	.+124    	; 0x1950 <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    18d4:	e6 80       	ldd	r14, Z+6	; 0x06
    18d6:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    18d8:	40 81       	ld	r20, Z
    18da:	51 81       	ldd	r21, Z+1	; 0x01
    18dc:	41 15       	cp	r20, r1
    18de:	51 05       	cpc	r21, r1
    18e0:	b1 f0       	breq	.+44     	; 0x190e <xQueueGenericReceive+0x9c>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    18e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    18e4:	97 01       	movw	r18, r14
    18e6:	28 0f       	add	r18, r24
    18e8:	31 1d       	adc	r19, r1
    18ea:	37 83       	std	Z+7, r19	; 0x07
    18ec:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	28 17       	cp	r18, r24
    18f4:	39 07       	cpc	r19, r25
    18f6:	10 f0       	brcs	.+4      	; 0x18fc <xQueueGenericReceive+0x8a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    18f8:	57 83       	std	Z+7, r21	; 0x07
    18fa:	46 83       	std	Z+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    18fc:	f8 01       	movw	r30, r16
    18fe:	44 8d       	ldd	r20, Z+28	; 0x1c
    1900:	66 81       	ldd	r22, Z+6	; 0x06
    1902:	77 81       	ldd	r23, Z+7	; 0x07
    1904:	89 2d       	mov	r24, r9
    1906:	98 2d       	mov	r25, r8
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    190e:	77 20       	and	r7, r7
    1910:	71 f4       	brne	.+28     	; 0x192e <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1912:	f8 01       	movw	r30, r16
    1914:	82 8d       	ldd	r24, Z+26	; 0x1a
    1916:	81 50       	subi	r24, 0x01	; 1
    1918:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    191a:	80 85       	ldd	r24, Z+8	; 0x08
    191c:	88 23       	and	r24, r24
    191e:	a1 f0       	breq	.+40     	; 0x1948 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1920:	c8 01       	movw	r24, r16
    1922:	08 96       	adiw	r24, 0x08	; 8
    1924:	0e 94 6d 06 	call	0xcda	; 0xcda <xTaskRemoveFromEventList>
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	71 f4       	brne	.+28     	; 0x1948 <xQueueGenericReceive+0xd6>
    192c:	0b c0       	rjmp	.+22     	; 0x1944 <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    192e:	f8 01       	movw	r30, r16
    1930:	f7 82       	std	Z+7, r15	; 0x07
    1932:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    1934:	81 89       	ldd	r24, Z+17	; 0x11
    1936:	88 23       	and	r24, r24
    1938:	39 f0       	breq	.+14     	; 0x1948 <xQueueGenericReceive+0xd6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    193a:	c6 01       	movw	r24, r12
    193c:	0e 94 6d 06 	call	0xcda	; 0xcda <xTaskRemoveFromEventList>
    1940:	88 23       	and	r24, r24
    1942:	11 f0       	breq	.+4      	; 0x1948 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1944:	0e 94 88 11 	call	0x2310	; 0x2310 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	4a c0       	rjmp	.+148    	; 0x19e4 <xQueueGenericReceive+0x172>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	9d 81       	ldd	r25, Y+5	; 0x05
    1954:	89 2b       	or	r24, r25
    1956:	19 f4       	brne	.+6      	; 0x195e <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	42 c0       	rjmp	.+132    	; 0x19e2 <xQueueGenericReceive+0x170>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    195e:	22 23       	and	r18, r18
    1960:	19 f4       	brne	.+6      	; 0x1968 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1962:	c7 01       	movw	r24, r14
    1964:	0e 94 24 06 	call	0xc48	; 0xc48 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    196c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	0f 92       	push	r0
    1976:	f8 01       	movw	r30, r16
    1978:	85 8d       	ldd	r24, Z+29	; 0x1d
    197a:	8f 3f       	cpi	r24, 0xFF	; 255
    197c:	09 f4       	brne	.+2      	; 0x1980 <xQueueGenericReceive+0x10e>
    197e:	15 8e       	std	Z+29, r1	; 0x1d
    1980:	f8 01       	movw	r30, r16
    1982:	86 8d       	ldd	r24, Z+30	; 0x1e
    1984:	8f 3f       	cpi	r24, 0xFF	; 255
    1986:	09 f4       	brne	.+2      	; 0x198a <xQueueGenericReceive+0x118>
    1988:	16 8e       	std	Z+30, r1	; 0x1e
    198a:	0f 90       	pop	r0
    198c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    198e:	c7 01       	movw	r24, r14
    1990:	b5 01       	movw	r22, r10
    1992:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xTaskCheckForTimeOut>
    1996:	88 23       	and	r24, r24
    1998:	f9 f4       	brne	.+62     	; 0x19d8 <xQueueGenericReceive+0x166>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    19a0:	f8 01       	movw	r30, r16
    19a2:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
    19a8:	88 23       	and	r24, r24
    19aa:	81 f4       	brne	.+32     	; 0x19cc <xQueueGenericReceive+0x15a>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    19ac:	6c 81       	ldd	r22, Y+4	; 0x04
    19ae:	7d 81       	ldd	r23, Y+5	; 0x05
    19b0:	c6 01       	movw	r24, r12
    19b2:	0e 94 26 07 	call	0xe4c	; 0xe4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    19b6:	c8 01       	movw	r24, r16
    19b8:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <prvUnlockQueue>
				if( !xTaskResumeAll() )
    19bc:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>
    19c0:	88 23       	and	r24, r24
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <xQueueGenericReceive+0x154>
    19c4:	7e cf       	rjmp	.-260    	; 0x18c2 <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    19c6:	0e 94 88 11 	call	0x2310	; 0x2310 <vPortYield>
    19ca:	7b cf       	rjmp	.-266    	; 0x18c2 <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    19cc:	c8 01       	movw	r24, r16
    19ce:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    19d2:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>
    19d6:	75 cf       	rjmp	.-278    	; 0x18c2 <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    19d8:	c8 01       	movw	r24, r16
    19da:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    19de:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	1f 91       	pop	r17
    19f4:	0f 91       	pop	r16
    19f6:	ff 90       	pop	r15
    19f8:	ef 90       	pop	r14
    19fa:	df 90       	pop	r13
    19fc:	cf 90       	pop	r12
    19fe:	bf 90       	pop	r11
    1a00:	af 90       	pop	r10
    1a02:	9f 90       	pop	r9
    1a04:	8f 90       	pop	r8
    1a06:	7f 90       	pop	r7
    1a08:	08 95       	ret

00001a0a <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1a0a:	7f 92       	push	r7
    1a0c:	8f 92       	push	r8
    1a0e:	9f 92       	push	r9
    1a10:	af 92       	push	r10
    1a12:	bf 92       	push	r11
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <xQueueGenericSend+0x1c>
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <xQueueGenericSend+0x1e>
    1a28:	0f 92       	push	r0
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	8c 01       	movw	r16, r24
    1a30:	6b 01       	movw	r12, r22
    1a32:	5d 83       	std	Y+5, r21	; 0x05
    1a34:	4c 83       	std	Y+4, r20	; 0x04
    1a36:	72 2e       	mov	r7, r18
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1a38:	48 e0       	ldi	r20, 0x08	; 8
    1a3a:	e4 2e       	mov	r14, r20
    1a3c:	f1 2c       	mov	r15, r1
    1a3e:	e8 0e       	add	r14, r24
    1a40:	f9 1e       	adc	r15, r25
    1a42:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1a44:	5e 01       	movw	r10, r28
    1a46:	08 94       	sec
    1a48:	a1 1c       	adc	r10, r1
    1a4a:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a4c:	34 e0       	ldi	r19, 0x04	; 4
    1a4e:	83 2e       	mov	r8, r19
    1a50:	91 2c       	mov	r9, r1
    1a52:	8c 0e       	add	r8, r28
    1a54:	9d 1e       	adc	r9, r29
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1a58:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1a60:	f8 01       	movw	r30, r16
    1a62:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a64:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a66:	98 17       	cp	r25, r24
    1a68:	a8 f4       	brcc	.+42     	; 0x1a94 <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	b6 01       	movw	r22, r12
    1a6e:	47 2d       	mov	r20, r7
    1a70:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a74:	f8 01       	movw	r30, r16
    1a76:	81 89       	ldd	r24, Z+17	; 0x11
    1a78:	88 23       	and	r24, r24
    1a7a:	41 f0       	breq	.+16     	; 0x1a8c <xQueueGenericSend+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1a7c:	c8 01       	movw	r24, r16
    1a7e:	41 96       	adiw	r24, 0x11	; 17
    1a80:	0e 94 6d 06 	call	0xcda	; 0xcda <xTaskRemoveFromEventList>
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	11 f4       	brne	.+4      	; 0x1a8c <xQueueGenericSend+0x82>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    1a88:	0e 94 88 11 	call	0x2310	; 0x2310 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	4c c0       	rjmp	.+152    	; 0x1b2c <xQueueGenericSend+0x122>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1a94:	8c 81       	ldd	r24, Y+4	; 0x04
    1a96:	9d 81       	ldd	r25, Y+5	; 0x05
    1a98:	89 2b       	or	r24, r25
    1a9a:	19 f4       	brne	.+6      	; 0x1aa2 <xQueueGenericSend+0x98>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	44 c0       	rjmp	.+136    	; 0x1b2a <xQueueGenericSend+0x120>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    1aa2:	22 23       	and	r18, r18
    1aa4:	19 f4       	brne	.+6      	; 0x1aac <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1aa6:	c5 01       	movw	r24, r10
    1aa8:	0e 94 24 06 	call	0xc48	; 0xc48 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ab0:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	0f 92       	push	r0
    1aba:	f8 01       	movw	r30, r16
    1abc:	85 8d       	ldd	r24, Z+29	; 0x1d
    1abe:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <xQueueGenericSend+0xba>
    1ac2:	15 8e       	std	Z+29, r1	; 0x1d
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ac8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aca:	09 f4       	brne	.+2      	; 0x1ace <xQueueGenericSend+0xc4>
    1acc:	16 8e       	std	Z+30, r1	; 0x1e
    1ace:	0f 90       	pop	r0
    1ad0:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ad2:	c5 01       	movw	r24, r10
    1ad4:	b4 01       	movw	r22, r8
    1ad6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xTaskCheckForTimeOut>
    1ada:	88 23       	and	r24, r24
    1adc:	09 f5       	brne	.+66     	; 0x1b20 <xQueueGenericSend+0x116>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	92 8d       	ldd	r25, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
    1aec:	f8 01       	movw	r30, r16
    1aee:	83 8d       	ldd	r24, Z+27	; 0x1b
    1af0:	98 17       	cp	r25, r24
    1af2:	81 f4       	brne	.+32     	; 0x1b14 <xQueueGenericSend+0x10a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1af4:	6c 81       	ldd	r22, Y+4	; 0x04
    1af6:	7d 81       	ldd	r23, Y+5	; 0x05
    1af8:	c7 01       	movw	r24, r14
    1afa:	0e 94 26 07 	call	0xe4c	; 0xe4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1afe:	c8 01       	movw	r24, r16
    1b00:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
    1b04:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>
    1b08:	88 23       	and	r24, r24
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <xQueueGenericSend+0x104>
    1b0c:	a5 cf       	rjmp	.-182    	; 0x1a58 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    1b0e:	0e 94 88 11 	call	0x2310	; 0x2310 <vPortYield>
    1b12:	a2 cf       	rjmp	.-188    	; 0x1a58 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1b14:	c8 01       	movw	r24, r16
    1b16:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1b1a:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>
    1b1e:	9c cf       	rjmp	.-200    	; 0x1a58 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1b20:	c8 01       	movw	r24, r16
    1b22:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1b26:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	ff 90       	pop	r15
    1b40:	ef 90       	pop	r14
    1b42:	df 90       	pop	r13
    1b44:	cf 90       	pop	r12
    1b46:	bf 90       	pop	r11
    1b48:	af 90       	pop	r10
    1b4a:	9f 90       	pop	r9
    1b4c:	8f 90       	pop	r8
    1b4e:	7f 90       	pop	r7
    1b50:	08 95       	ret

00001b52 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    1b52:	8f 92       	push	r8
    1b54:	9f 92       	push	r9
    1b56:	af 92       	push	r10
    1b58:	bf 92       	push	r11
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	98 2e       	mov	r9, r24
    1b6c:	86 2e       	mov	r8, r22
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1b6e:	88 23       	and	r24, r24
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <xQueueCreate+0x22>
    1b72:	42 c0       	rjmp	.+132    	; 0x1bf8 <xQueueCreate+0xa6>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1b74:	8f e1       	ldi	r24, 0x1F	; 31
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 80 10 	call	0x2100	; 0x2100 <pvPortMalloc>
    1b7c:	8c 01       	movw	r16, r24
    1b7e:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	e1 f1       	breq	.+120    	; 0x1bfc <xQueueCreate+0xaa>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1b84:	c9 2c       	mov	r12, r9
    1b86:	dd 24       	eor	r13, r13
    1b88:	a8 2c       	mov	r10, r8
    1b8a:	bb 24       	eor	r11, r11
    1b8c:	ac 9c       	mul	r10, r12
    1b8e:	70 01       	movw	r14, r0
    1b90:	ad 9c       	mul	r10, r13
    1b92:	f0 0c       	add	r15, r0
    1b94:	bc 9c       	mul	r11, r12
    1b96:	f0 0c       	add	r15, r0
    1b98:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1b9a:	c7 01       	movw	r24, r14
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	0e 94 80 10 	call	0x2100	; 0x2100 <pvPortMalloc>
    1ba2:	9c 01       	movw	r18, r24
    1ba4:	99 83       	std	Y+1, r25	; 0x01
    1ba6:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	19 f1       	breq	.+70     	; 0x1bf2 <xQueueCreate+0xa0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    1bac:	e8 0e       	add	r14, r24
    1bae:	f9 1e       	adc	r15, r25
    1bb0:	fb 82       	std	Y+3, r15	; 0x03
    1bb2:	ea 82       	std	Y+2, r14	; 0x02
				pxNewQueue->uxMessagesWaiting = 0;
    1bb4:	1a 8e       	std	Y+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    1bb6:	9d 83       	std	Y+5, r25	; 0x05
    1bb8:	8c 83       	std	Y+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    1bba:	08 94       	sec
    1bbc:	c1 08       	sbc	r12, r1
    1bbe:	d1 08       	sbc	r13, r1
    1bc0:	ca 9c       	mul	r12, r10
    1bc2:	c0 01       	movw	r24, r0
    1bc4:	cb 9c       	mul	r12, r11
    1bc6:	90 0d       	add	r25, r0
    1bc8:	da 9c       	mul	r13, r10
    1bca:	90 0d       	add	r25, r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	28 0f       	add	r18, r24
    1bd0:	39 1f       	adc	r19, r25
    1bd2:	3f 83       	std	Y+7, r19	; 0x07
    1bd4:	2e 83       	std	Y+6, r18	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    1bd6:	9b 8e       	std	Y+27, r9	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1bd8:	8c 8e       	std	Y+28, r8	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    1bda:	8f ef       	ldi	r24, 0xFF	; 255
    1bdc:	8d 8f       	std	Y+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    1bde:	8e 8f       	std	Y+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1be0:	c8 01       	movw	r24, r16
    1be2:	08 96       	adiw	r24, 0x08	; 8
    1be4:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1be8:	c8 01       	movw	r24, r16
    1bea:	41 96       	adiw	r24, 0x11	; 17
    1bec:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <xQueueCreate+0xaa>
				return  pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    1bf2:	c8 01       	movw	r24, r16
    1bf4:	0e 94 70 10 	call	0x20e0	; 0x20e0 <vPortFree>
    1bf8:	c0 e0       	ldi	r28, 0x00	; 0
    1bfa:	d0 e0       	ldi	r29, 0x00	; 0
	}

	/* Will only reach here if we could not allocate enough memory or no memory
	was required. */
	return NULL;
}
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	df 90       	pop	r13
    1c0c:	cf 90       	pop	r12
    1c0e:	bf 90       	pop	r11
    1c10:	af 90       	pop	r10
    1c12:	9f 90       	pop	r9
    1c14:	8f 90       	pop	r8
    1c16:	08 95       	ret

00001c18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    1c18:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    1c1a:	9c 01       	movw	r18, r24
    1c1c:	2d 5f       	subi	r18, 0xFD	; 253
    1c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c20:	32 83       	std	Z+2, r19	; 0x02
    1c22:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	9f ef       	ldi	r25, 0xFF	; 255
    1c28:	94 83       	std	Z+4, r25	; 0x04
    1c2a:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1c2c:	36 83       	std	Z+6, r19	; 0x06
    1c2e:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1c30:	30 87       	std	Z+8, r19	; 0x08
    1c32:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = 0;
    1c34:	10 82       	st	Z, r1
}
    1c36:	08 95       	ret

00001c38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1c38:	fc 01       	movw	r30, r24
    1c3a:	11 86       	std	Z+9, r1	; 0x09
    1c3c:	10 86       	std	Z+8, r1	; 0x08
}
    1c3e:	08 95       	ret

00001c40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	ac 01       	movw	r20, r24
    1c46:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1c48:	ec 01       	movw	r28, r24
    1c4a:	29 81       	ldd	r18, Y+1	; 0x01
    1c4c:	3a 81       	ldd	r19, Y+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    1c4e:	f9 01       	movw	r30, r18
    1c50:	82 81       	ldd	r24, Z+2	; 0x02
    1c52:	93 81       	ldd	r25, Z+3	; 0x03
    1c54:	13 96       	adiw	r26, 0x03	; 3
    1c56:	9c 93       	st	X, r25
    1c58:	8e 93       	st	-X, r24
    1c5a:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	15 96       	adiw	r26, 0x05	; 5
    1c62:	9c 93       	st	X, r25
    1c64:	8e 93       	st	-X, r24
    1c66:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1c68:	02 80       	ldd	r0, Z+2	; 0x02
    1c6a:	f3 81       	ldd	r31, Z+3	; 0x03
    1c6c:	e0 2d       	mov	r30, r0
    1c6e:	75 83       	std	Z+5, r23	; 0x05
    1c70:	64 83       	std	Z+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1c72:	e9 01       	movw	r28, r18
    1c74:	7b 83       	std	Y+3, r23	; 0x03
    1c76:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1c78:	fa 01       	movw	r30, r20
    1c7a:	72 83       	std	Z+2, r23	; 0x02
    1c7c:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1c7e:	19 96       	adiw	r26, 0x09	; 9
    1c80:	5c 93       	st	X, r21
    1c82:	4e 93       	st	-X, r20
    1c84:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
    1c86:	80 81       	ld	r24, Z
    1c88:	8f 5f       	subi	r24, 0xFF	; 255
    1c8a:	80 83       	st	Z, r24
}
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	9c 01       	movw	r18, r24
    1c98:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1c9a:	48 81       	ld	r20, Y
    1c9c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as 
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the 
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1c9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ca0:	4f 3f       	cpi	r20, 0xFF	; 255
    1ca2:	58 07       	cpc	r21, r24
    1ca4:	21 f4       	brne	.+8      	; 0x1cae <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1ca6:	f9 01       	movw	r30, r18
    1ca8:	a7 81       	ldd	r26, Z+7	; 0x07
    1caa:	b0 85       	ldd	r27, Z+8	; 0x08
    1cac:	10 c0       	rjmp	.+32     	; 0x1cce <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips. 
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1cae:	d9 01       	movw	r26, r18
    1cb0:	13 96       	adiw	r26, 0x03	; 3
    1cb2:	04 c0       	rjmp	.+8      	; 0x1cbc <vListInsert+0x2a>
    1cb4:	12 96       	adiw	r26, 0x02	; 2
    1cb6:	0d 90       	ld	r0, X+
    1cb8:	bc 91       	ld	r27, X
    1cba:	a0 2d       	mov	r26, r0
    1cbc:	12 96       	adiw	r26, 0x02	; 2
    1cbe:	ed 91       	ld	r30, X+
    1cc0:	fc 91       	ld	r31, X
    1cc2:	13 97       	sbiw	r26, 0x03	; 3
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	48 17       	cp	r20, r24
    1cca:	59 07       	cpc	r21, r25
    1ccc:	98 f7       	brcc	.-26     	; 0x1cb4 <vListInsert+0x22>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1cce:	12 96       	adiw	r26, 0x02	; 2
    1cd0:	ed 91       	ld	r30, X+
    1cd2:	fc 91       	ld	r31, X
    1cd4:	13 97       	sbiw	r26, 0x03	; 3
    1cd6:	fb 83       	std	Y+3, r31	; 0x03
    1cd8:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1cda:	d5 83       	std	Z+5, r29	; 0x05
    1cdc:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1cde:	bd 83       	std	Y+5, r27	; 0x05
    1ce0:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    1ce2:	13 96       	adiw	r26, 0x03	; 3
    1ce4:	dc 93       	st	X, r29
    1ce6:	ce 93       	st	-X, r28
    1ce8:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1cea:	39 87       	std	Y+9, r19	; 0x09
    1cec:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1cee:	f9 01       	movw	r30, r18
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	80 83       	st	Z, r24
}
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	08 95       	ret

00001cfc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	dc 01       	movw	r26, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1d02:	12 96       	adiw	r26, 0x02	; 2
    1d04:	ed 91       	ld	r30, X+
    1d06:	fc 91       	ld	r31, X
    1d08:	13 97       	sbiw	r26, 0x03	; 3
    1d0a:	14 96       	adiw	r26, 0x04	; 4
    1d0c:	8d 91       	ld	r24, X+
    1d0e:	9c 91       	ld	r25, X
    1d10:	15 97       	sbiw	r26, 0x05	; 5
    1d12:	95 83       	std	Z+5, r25	; 0x05
    1d14:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1d16:	14 96       	adiw	r26, 0x04	; 4
    1d18:	cd 91       	ld	r28, X+
    1d1a:	dc 91       	ld	r29, X
    1d1c:	15 97       	sbiw	r26, 0x05	; 5
    1d1e:	fb 83       	std	Y+3, r31	; 0x03
    1d20:	ea 83       	std	Y+2, r30	; 0x02
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1d22:	18 96       	adiw	r26, 0x08	; 8
    1d24:	ed 91       	ld	r30, X+
    1d26:	fc 91       	ld	r31, X
    1d28:	19 97       	sbiw	r26, 0x09	; 9

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1d2a:	81 81       	ldd	r24, Z+1	; 0x01
    1d2c:	92 81       	ldd	r25, Z+2	; 0x02
    1d2e:	8a 17       	cp	r24, r26
    1d30:	9b 07       	cpc	r25, r27
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <vListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1d34:	d2 83       	std	Z+2, r29	; 0x02
    1d36:	c1 83       	std	Z+1, r28	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    1d38:	19 96       	adiw	r26, 0x09	; 9
    1d3a:	1c 92       	st	X, r1
    1d3c:	1e 92       	st	-X, r1
    1d3e:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    1d40:	80 81       	ld	r24, Z
    1d42:	81 50       	subi	r24, 0x01	; 1
    1d44:	80 83       	st	Z, r24
}
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	fc 01       	movw	r30, r24
corCRCB *pxUnblockedCRCB;
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1d56:	80 81       	ld	r24, Z
    1d58:	88 23       	and	r24, r24
    1d5a:	19 f4       	brne	.+6      	; 0x1d62 <xCoRoutineRemoveFromEventList+0x16>
    1d5c:	c0 e0       	ldi	r28, 0x00	; 0
    1d5e:	d0 e0       	ldi	r29, 0x00	; 0
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <xCoRoutineRemoveFromEventList+0x20>
    1d62:	05 80       	ldd	r0, Z+5	; 0x05
    1d64:	f6 81       	ldd	r31, Z+6	; 0x06
    1d66:	e0 2d       	mov	r30, r0
    1d68:	c6 81       	ldd	r28, Z+6	; 0x06
    1d6a:	d7 81       	ldd	r29, Z+7	; 0x07
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	04 5f       	subi	r16, 0xF4	; 244
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	c8 01       	movw	r24, r16
    1d74:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    1d78:	8e e3       	ldi	r24, 0x3E	; 62
    1d7a:	93 e0       	ldi	r25, 0x03	; 3
    1d7c:	b8 01       	movw	r22, r16
    1d7e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <vListInsertEnd>
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	e0 91 0d 03 	lds	r30, 0x030D
    1d88:	f0 91 0e 03 	lds	r31, 0x030E
    1d8c:	9e 89       	ldd	r25, Y+22	; 0x16
    1d8e:	86 89       	ldd	r24, Z+22	; 0x16
    1d90:	98 17       	cp	r25, r24
    1d92:	08 f0       	brcs	.+2      	; 0x1d96 <xCoRoutineRemoveFromEventList+0x4a>
    1d94:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    1d96:	82 2f       	mov	r24, r18
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	08 95       	ret

00001da2 <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    1dac:	99 e0       	ldi	r25, 0x09	; 9
    1dae:	f9 2e       	mov	r15, r25
    1db0:	28 c0       	rjmp	.+80     	; 0x1e02 <vCoRoutineSchedule+0x60>
	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    1db2:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    1db4:	80 91 3e 03 	lds	r24, 0x033E
    1db8:	88 23       	and	r24, r24
    1dba:	19 f4       	brne	.+6      	; 0x1dc2 <vCoRoutineSchedule+0x20>
    1dbc:	c0 e0       	ldi	r28, 0x00	; 0
    1dbe:	d0 e0       	ldi	r29, 0x00	; 0
    1dc0:	06 c0       	rjmp	.+12     	; 0x1dce <vCoRoutineSchedule+0x2c>
    1dc2:	e0 91 43 03 	lds	r30, 0x0343
    1dc6:	f0 91 44 03 	lds	r31, 0x0344
    1dca:	c6 81       	ldd	r28, Z+6	; 0x06
    1dcc:	d7 81       	ldd	r29, Z+7	; 0x07
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1dce:	ce 01       	movw	r24, r28
    1dd0:	0c 96       	adiw	r24, 0x0c	; 12
    1dd2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
		}
		portENABLE_INTERRUPTS();
    1dd6:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    1dd8:	8e 01       	movw	r16, r28
    1dda:	0e 5f       	subi	r16, 0xFE	; 254
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	c8 01       	movw	r24, r16
    1de0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    1de4:	9e 89       	ldd	r25, Y+22	; 0x16
    1de6:	80 91 0f 03 	lds	r24, 0x030F
    1dea:	89 17       	cp	r24, r25
    1dec:	10 f4       	brcc	.+4      	; 0x1df2 <vCoRoutineSchedule+0x50>
    1dee:	90 93 0f 03 	sts	0x030F, r25
    1df2:	9f 9d       	mul	r25, r15
    1df4:	c0 01       	movw	r24, r0
    1df6:	11 24       	eor	r1, r1
    1df8:	8a 5e       	subi	r24, 0xEA	; 234
    1dfa:	9c 4f       	sbci	r25, 0xFC	; 252
    1dfc:	b8 01       	movw	r22, r16
    1dfe:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
    1e02:	80 91 3e 03 	lds	r24, 0x033E
    1e06:	88 23       	and	r24, r24
    1e08:	a1 f6       	brne	.-88     	; 0x1db2 <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    1e0a:	0e 94 d4 05 	call	0xba8	; 0xba8 <xTaskGetTickCount>
    1e0e:	20 91 10 03 	lds	r18, 0x0310
    1e12:	30 91 11 03 	lds	r19, 0x0311
    1e16:	82 1b       	sub	r24, r18
    1e18:	93 0b       	sbc	r25, r19
    1e1a:	90 93 13 03 	sts	0x0313, r25
    1e1e:	80 93 12 03 	sts	0x0312, r24
					vListRemove( &( pxCRCB->xEventListItem ) );											
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    1e22:	89 e0       	ldi	r24, 0x09	; 9
    1e24:	f8 2e       	mov	r15, r24
    1e26:	54 c0       	rjmp	.+168    	; 0x1ed0 <vCoRoutineSchedule+0x12e>
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	90 93 15 03 	sts	0x0315, r25
    1e2e:	80 93 14 03 	sts	0x0314, r24
		xPassedTicks--;
    1e32:	21 50       	subi	r18, 0x01	; 1
    1e34:	30 40       	sbci	r19, 0x00	; 0
    1e36:	30 93 13 03 	sts	0x0313, r19
    1e3a:	20 93 12 03 	sts	0x0312, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    1e3e:	89 2b       	or	r24, r25
    1e40:	c9 f5       	brne	.+114    	; 0x1eb4 <vCoRoutineSchedule+0x112>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    1e42:	20 91 3a 03 	lds	r18, 0x033A
    1e46:	30 91 3b 03 	lds	r19, 0x033B
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1e4a:	80 91 3c 03 	lds	r24, 0x033C
    1e4e:	90 91 3d 03 	lds	r25, 0x033D
    1e52:	90 93 3b 03 	sts	0x033B, r25
    1e56:	80 93 3a 03 	sts	0x033A, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    1e5a:	30 93 3d 03 	sts	0x033D, r19
    1e5e:	20 93 3c 03 	sts	0x033C, r18
    1e62:	28 c0       	rjmp	.+80     	; 0x1eb4 <vCoRoutineSchedule+0x112>
		}

		/* See if this tick has made a timeout expire. */
		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
		{	
			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    1e64:	20 91 14 03 	lds	r18, 0x0314
    1e68:	30 91 15 03 	lds	r19, 0x0315
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e70:	28 17       	cp	r18, r24
    1e72:	39 07       	cpc	r19, r25
    1e74:	68 f1       	brcs	.+90     	; 0x1ed0 <vCoRoutineSchedule+0x12e>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    1e76:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    1e78:	8e 01       	movw	r16, r28
    1e7a:	0e 5f       	subi	r16, 0xFE	; 254
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	c8 01       	movw	r24, r16
    1e80:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    1e84:	8c 89       	ldd	r24, Y+20	; 0x14
    1e86:	9d 89       	ldd	r25, Y+21	; 0x15
    1e88:	89 2b       	or	r24, r25
    1e8a:	21 f0       	breq	.+8      	; 0x1e94 <vCoRoutineSchedule+0xf2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	0c 96       	adiw	r24, 0x0c	; 12
    1e90:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    1e94:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    1e96:	9e 89       	ldd	r25, Y+22	; 0x16
    1e98:	80 91 0f 03 	lds	r24, 0x030F
    1e9c:	89 17       	cp	r24, r25
    1e9e:	10 f4       	brcc	.+4      	; 0x1ea4 <vCoRoutineSchedule+0x102>
    1ea0:	90 93 0f 03 	sts	0x030F, r25
    1ea4:	9f 9d       	mul	r25, r15
    1ea6:	c0 01       	movw	r24, r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	8a 5e       	subi	r24, 0xEA	; 234
    1eac:	9c 4f       	sbci	r25, 0xFC	; 252
    1eae:	b8 01       	movw	r22, r16
    1eb0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
    1eb4:	e0 91 3a 03 	lds	r30, 0x033A
    1eb8:	f0 91 3b 03 	lds	r31, 0x033B
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 23       	and	r24, r24
    1ec0:	39 f0       	breq	.+14     	; 0x1ed0 <vCoRoutineSchedule+0x12e>
    1ec2:	05 80       	ldd	r0, Z+5	; 0x05
    1ec4:	f6 81       	ldd	r31, Z+6	; 0x06
    1ec6:	e0 2d       	mov	r30, r0
    1ec8:	c6 81       	ldd	r28, Z+6	; 0x06
    1eca:	d7 81       	ldd	r29, Z+7	; 0x07
    1ecc:	20 97       	sbiw	r28, 0x00	; 0
    1ece:	51 f6       	brne	.-108    	; 0x1e64 <vCoRoutineSchedule+0xc2>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    1ed0:	20 91 12 03 	lds	r18, 0x0312
    1ed4:	30 91 13 03 	lds	r19, 0x0313
    1ed8:	80 91 14 03 	lds	r24, 0x0314
    1edc:	90 91 15 03 	lds	r25, 0x0315
    1ee0:	21 15       	cp	r18, r1
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <vCoRoutineSchedule+0x146>
    1ee6:	a0 cf       	rjmp	.-192    	; 0x1e28 <vCoRoutineSchedule+0x86>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    1ee8:	90 93 11 03 	sts	0x0311, r25
    1eec:	80 93 10 03 	sts	0x0310, r24
    1ef0:	90 91 0f 03 	lds	r25, 0x030F

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1ef4:	29 e0       	ldi	r18, 0x09	; 9
    1ef6:	06 c0       	rjmp	.+12     	; 0x1f04 <vCoRoutineSchedule+0x162>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    1ef8:	99 23       	and	r25, r25
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <vCoRoutineSchedule+0x160>
    1efc:	10 92 0f 03 	sts	0x030F, r1
    1f00:	32 c0       	rjmp	.+100    	; 0x1f66 <vCoRoutineSchedule+0x1c4>
    1f02:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1f04:	92 9f       	mul	r25, r18
    1f06:	d0 01       	movw	r26, r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	aa 5e       	subi	r26, 0xEA	; 234
    1f0c:	bc 4f       	sbci	r27, 0xFC	; 252
    1f0e:	8c 91       	ld	r24, X
    1f10:	88 23       	and	r24, r24
    1f12:	91 f3       	breq	.-28     	; 0x1ef8 <vCoRoutineSchedule+0x156>
    1f14:	90 93 0f 03 	sts	0x030F, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    1f18:	11 96       	adiw	r26, 0x01	; 1
    1f1a:	ed 91       	ld	r30, X+
    1f1c:	fc 91       	ld	r31, X
    1f1e:	12 97       	sbiw	r26, 0x02	; 2
    1f20:	02 80       	ldd	r0, Z+2	; 0x02
    1f22:	f3 81       	ldd	r31, Z+3	; 0x03
    1f24:	e0 2d       	mov	r30, r0
    1f26:	12 96       	adiw	r26, 0x02	; 2
    1f28:	fc 93       	st	X, r31
    1f2a:	ee 93       	st	-X, r30
    1f2c:	11 97       	sbiw	r26, 0x01	; 1
    1f2e:	cd 01       	movw	r24, r26
    1f30:	03 96       	adiw	r24, 0x03	; 3
    1f32:	e8 17       	cp	r30, r24
    1f34:	f9 07       	cpc	r31, r25
    1f36:	31 f4       	brne	.+12     	; 0x1f44 <vCoRoutineSchedule+0x1a2>
    1f38:	82 81       	ldd	r24, Z+2	; 0x02
    1f3a:	93 81       	ldd	r25, Z+3	; 0x03
    1f3c:	12 96       	adiw	r26, 0x02	; 2
    1f3e:	9c 93       	st	X, r25
    1f40:	8e 93       	st	-X, r24
    1f42:	11 97       	sbiw	r26, 0x01	; 1
    1f44:	11 96       	adiw	r26, 0x01	; 1
    1f46:	ed 91       	ld	r30, X+
    1f48:	fc 91       	ld	r31, X
    1f4a:	12 97       	sbiw	r26, 0x02	; 2
    1f4c:	06 80       	ldd	r0, Z+6	; 0x06
    1f4e:	f7 81       	ldd	r31, Z+7	; 0x07
    1f50:	e0 2d       	mov	r30, r0
    1f52:	f0 93 0e 03 	sts	0x030E, r31
    1f56:	e0 93 0d 03 	sts	0x030D, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    1f5a:	20 81       	ld	r18, Z
    1f5c:	31 81       	ldd	r19, Z+1	; 0x01
    1f5e:	cf 01       	movw	r24, r30
    1f60:	67 89       	ldd	r22, Z+23	; 0x17
    1f62:	f9 01       	movw	r30, r18
    1f64:	09 95       	icall

	return;
}
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	ff 90       	pop	r15
    1f70:	08 95       	ret

00001f72 <vCoRoutineAddToDelayedList>:
	return xReturn;	
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    1f72:	0f 93       	push	r16
    1f74:	1f 93       	push	r17
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	eb 01       	movw	r28, r22
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    1f7c:	00 91 14 03 	lds	r16, 0x0314
    1f80:	10 91 15 03 	lds	r17, 0x0315
    1f84:	08 0f       	add	r16, r24
    1f86:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1f88:	80 91 0d 03 	lds	r24, 0x030D
    1f8c:	90 91 0e 03 	lds	r25, 0x030E
    1f90:	02 96       	adiw	r24, 0x02	; 2
    1f92:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    1f96:	e0 91 0d 03 	lds	r30, 0x030D
    1f9a:	f0 91 0e 03 	lds	r31, 0x030E
    1f9e:	13 83       	std	Z+3, r17	; 0x03
    1fa0:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    1fa2:	80 91 14 03 	lds	r24, 0x0314
    1fa6:	90 91 15 03 	lds	r25, 0x0315
    1faa:	bf 01       	movw	r22, r30
    1fac:	6e 5f       	subi	r22, 0xFE	; 254
    1fae:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb0:	08 17       	cp	r16, r24
    1fb2:	19 07       	cpc	r17, r25
    1fb4:	28 f4       	brcc	.+10     	; 0x1fc0 <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1fb6:	80 91 3c 03 	lds	r24, 0x033C
    1fba:	90 91 3d 03 	lds	r25, 0x033D
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1fc0:	80 91 3a 03 	lds	r24, 0x033A
    1fc4:	90 91 3b 03 	lds	r25, 0x033B
    1fc8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <vListInsert>
	}

	if( pxEventList )
    1fcc:	20 97       	sbiw	r28, 0x00	; 0
    1fce:	49 f0       	breq	.+18     	; 0x1fe2 <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    1fd0:	60 91 0d 03 	lds	r22, 0x030D
    1fd4:	70 91 0e 03 	lds	r23, 0x030E
    1fd8:	64 5f       	subi	r22, 0xF4	; 244
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255
    1fdc:	ce 01       	movw	r24, r28
    1fde:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <vListInsert>
	}
}
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	08 95       	ret

00001fec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    1fec:	af 92       	push	r10
    1fee:	bf 92       	push	r11
    1ff0:	cf 92       	push	r12
    1ff2:	df 92       	push	r13
    1ff4:	ef 92       	push	r14
    1ff6:	ff 92       	push	r15
    1ff8:	0f 93       	push	r16
    1ffa:	1f 93       	push	r17
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	6c 01       	movw	r12, r24
    2002:	b6 2e       	mov	r11, r22
    2004:	a4 2e       	mov	r10, r20
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    2006:	8a e1       	ldi	r24, 0x1A	; 26
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 80 10 	call	0x2100	; 0x2100 <pvPortMalloc>
    200e:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	11 f4       	brne	.+4      	; 0x2018 <xCoRoutineCreate+0x2c>
    2014:	8f ef       	ldi	r24, 0xFF	; 255
    2016:	59 c0       	rjmp	.+178    	; 0x20ca <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2018:	80 91 0d 03 	lds	r24, 0x030D
    201c:	90 91 0e 03 	lds	r25, 0x030E
    2020:	89 2b       	or	r24, r25
    2022:	21 f5       	brne	.+72     	; 0x206c <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2024:	d0 93 0e 03 	sts	0x030E, r29
    2028:	c0 93 0d 03 	sts	0x030D, r28
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    202c:	86 e1       	ldi	r24, 0x16	; 22
    202e:	93 e0       	ldi	r25, 0x03	; 3
    2030:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
    2034:	8f e1       	ldi	r24, 0x1F	; 31
    2036:	93 e0       	ldi	r25, 0x03	; 3
    2038:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    203c:	28 e2       	ldi	r18, 0x28	; 40
    203e:	e2 2e       	mov	r14, r18
    2040:	23 e0       	ldi	r18, 0x03	; 3
    2042:	f2 2e       	mov	r15, r18
    2044:	c7 01       	movw	r24, r14
    2046:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    204a:	01 e3       	ldi	r16, 0x31	; 49
    204c:	13 e0       	ldi	r17, 0x03	; 3
    204e:	c8 01       	movw	r24, r16
    2050:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    2054:	8e e3       	ldi	r24, 0x3E	; 62
    2056:	93 e0       	ldi	r25, 0x03	; 3
    2058:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    205c:	f0 92 3b 03 	sts	0x033B, r15
    2060:	e0 92 3a 03 	sts	0x033A, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    2064:	10 93 3d 03 	sts	0x033D, r17
    2068:	00 93 3c 03 	sts	0x033C, r16
    206c:	eb 2c       	mov	r14, r11
    206e:	bb 20       	and	r11, r11
    2070:	11 f0       	breq	.+4      	; 0x2076 <xCoRoutineCreate+0x8a>
    2072:	ee 24       	eor	r14, r14
    2074:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    2076:	19 8e       	std	Y+25, r1	; 0x19
    2078:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    207a:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    207c:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    207e:	fe 01       	movw	r30, r28
    2080:	c1 92       	st	Z+, r12
    2082:	d1 92       	st	Z+, r13
    2084:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2086:	cf 01       	movw	r24, r30
    2088:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    208c:	ce 01       	movw	r24, r28
    208e:	0c 96       	adiw	r24, 0x0c	; 12
    2090:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    2094:	d9 87       	std	Y+9, r29	; 0x09
    2096:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2098:	db 8b       	std	Y+19, r29	; 0x13
    209a:	ca 8b       	std	Y+18, r28	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    209c:	84 e0       	ldi	r24, 0x04	; 4
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	8e 19       	sub	r24, r14
    20a2:	91 09       	sbc	r25, r1
    20a4:	9d 87       	std	Y+13, r25	; 0x0d
    20a6:	8c 87       	std	Y+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    20a8:	9e 89       	ldd	r25, Y+22	; 0x16
    20aa:	80 91 0f 03 	lds	r24, 0x030F
    20ae:	89 17       	cp	r24, r25
    20b0:	10 f4       	brcc	.+4      	; 0x20b6 <xCoRoutineCreate+0xca>
    20b2:	90 93 0f 03 	sts	0x030F, r25
    20b6:	89 e0       	ldi	r24, 0x09	; 9
    20b8:	98 9f       	mul	r25, r24
    20ba:	c0 01       	movw	r24, r0
    20bc:	11 24       	eor	r1, r1
    20be:	8a 5e       	subi	r24, 0xEA	; 234
    20c0:	9c 4f       	sbci	r25, 0xFC	; 252
    20c2:	b8 01       	movw	r22, r16
    20c4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <vListInsertEnd>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}
	
	return xReturn;	
}
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	ff 90       	pop	r15
    20d4:	ef 90       	pop	r14
    20d6:	df 90       	pop	r13
    20d8:	cf 90       	pop	r12
    20da:	bf 90       	pop	r11
    20dc:	af 90       	pop	r10
    20de:	08 95       	ret

000020e0 <vPortFree>:
{
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    20e0:	08 95       	ret

000020e2 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    20e2:	10 92 48 03 	sts	0x0348, r1
    20e6:	10 92 47 03 	sts	0x0347, r1
}
    20ea:	08 95       	ret

000020ec <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    20ec:	2c ed       	ldi	r18, 0xDC	; 220
    20ee:	35 e0       	ldi	r19, 0x05	; 5
    20f0:	80 91 47 03 	lds	r24, 0x0347
    20f4:	90 91 48 03 	lds	r25, 0x0348
    20f8:	28 1b       	sub	r18, r24
    20fa:	39 0b       	sbc	r19, r25
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
}
    20fc:	c9 01       	movw	r24, r18
    20fe:	08 95       	ret

00002100 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	8c 01       	movw	r16, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    210a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    210e:	80 91 47 03 	lds	r24, 0x0347
    2112:	90 91 48 03 	lds	r25, 0x0348
    2116:	98 01       	movw	r18, r16
    2118:	28 0f       	add	r18, r24
    211a:	39 1f       	adc	r19, r25
    211c:	45 e0       	ldi	r20, 0x05	; 5
    211e:	2c 3d       	cpi	r18, 0xDC	; 220
    2120:	34 07       	cpc	r19, r20
    2122:	58 f4       	brcc	.+22     	; 0x213a <pvPortMalloc+0x3a>
    2124:	82 17       	cp	r24, r18
    2126:	93 07       	cpc	r25, r19
    2128:	40 f4       	brcc	.+16     	; 0x213a <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    212a:	ec 01       	movw	r28, r24
    212c:	c7 5b       	subi	r28, 0xB7	; 183
    212e:	dc 4f       	sbci	r29, 0xFC	; 252
			xNextFreeByte += xWantedSize;			
    2130:	30 93 48 03 	sts	0x0348, r19
    2134:	20 93 47 03 	sts	0x0347, r18
    2138:	02 c0       	rjmp	.+4      	; 0x213e <pvPortMalloc+0x3e>
    213a:	c0 e0       	ldi	r28, 0x00	; 0
    213c:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}
	xTaskResumeAll();
    213e:	0e 94 5f 07 	call	0xebe	; 0xebe <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
    2142:	ce 01       	movw	r24, r28
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	08 95       	ret

0000214e <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    214e:	fc 01       	movw	r30, r24
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2150:	91 e1       	ldi	r25, 0x11	; 17
    2152:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    2154:	22 e2       	ldi	r18, 0x22	; 34
    2156:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    2158:	83 e3       	ldi	r24, 0x33	; 51
    215a:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    215c:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    215e:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    2160:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2162:	80 e8       	ldi	r24, 0x80	; 128
    2164:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2166:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2168:	82 e0       	ldi	r24, 0x02	; 2
    216a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2170:	84 e0       	ldi	r24, 0x04	; 4
    2172:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    2174:	85 e0       	ldi	r24, 0x05	; 5
    2176:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    2178:	86 e0       	ldi	r24, 0x06	; 6
    217a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    217c:	87 e0       	ldi	r24, 0x07	; 7
    217e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    2180:	88 e0       	ldi	r24, 0x08	; 8
    2182:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    2184:	89 e0       	ldi	r24, 0x09	; 9
    2186:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    2188:	80 e1       	ldi	r24, 0x10	; 16
    218a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    218c:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    218e:	82 e1       	ldi	r24, 0x12	; 18
    2190:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2192:	83 e1       	ldi	r24, 0x13	; 19
    2194:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    2196:	84 e1       	ldi	r24, 0x14	; 20
    2198:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    219a:	85 e1       	ldi	r24, 0x15	; 21
    219c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    219e:	86 e1       	ldi	r24, 0x16	; 22
    21a0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    21a2:	87 e1       	ldi	r24, 0x17	; 23
    21a4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    21a6:	88 e1       	ldi	r24, 0x18	; 24
    21a8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    21aa:	89 e1       	ldi	r24, 0x19	; 25
    21ac:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    21b2:	81 e2       	ldi	r24, 0x21	; 33
    21b4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    21b6:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    21b8:	83 e2       	ldi	r24, 0x23	; 35
    21ba:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    21bc:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    21be:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    21c0:	86 e2       	ldi	r24, 0x26	; 38
    21c2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    21c4:	87 e2       	ldi	r24, 0x27	; 39
    21c6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    21c8:	88 e2       	ldi	r24, 0x28	; 40
    21ca:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    21cc:	89 e2       	ldi	r24, 0x29	; 41
    21ce:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    21d0:	80 e3       	ldi	r24, 0x30	; 48
    21d2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    21d4:	81 e3       	ldi	r24, 0x31	; 49
    21d6:	82 93       	st	-Z, r24
    21d8:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    21da:	cf 01       	movw	r24, r30
    21dc:	08 95       	ret

000021de <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	OCR1AH = ucHighByte;
    21de:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = ucLowByte;
    21e2:	89 ef       	ldi	r24, 0xF9	; 249
    21e4:	80 93 88 00 	sts	0x0088, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    21e8:	8b e0       	ldi	r24, 0x0B	; 11
    21ea:	80 93 81 00 	sts	0x0081, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK0;
    21ee:	ee e6       	ldi	r30, 0x6E	; 110
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    21f4:	80 61       	ori	r24, 0x10	; 16
	TIMSK0 = ucLowByte;
    21f6:	80 83       	st	Z, r24
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    21f8:	a0 91 b3 02 	lds	r26, 0x02B3
    21fc:	b0 91 b4 02 	lds	r27, 0x02B4
    2200:	cd 91       	ld	r28, X+
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	dd 91       	ld	r29, X+
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	ff 91       	pop	r31
    220a:	ef 91       	pop	r30
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	bf 91       	pop	r27
    2212:	af 91       	pop	r26
    2214:	9f 91       	pop	r25
    2216:	8f 91       	pop	r24
    2218:	7f 91       	pop	r23
    221a:	6f 91       	pop	r22
    221c:	5f 91       	pop	r21
    221e:	4f 91       	pop	r20
    2220:	3f 91       	pop	r19
    2222:	2f 91       	pop	r18
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	df 90       	pop	r13
    222e:	cf 90       	pop	r12
    2230:	bf 90       	pop	r11
    2232:	af 90       	pop	r10
    2234:	9f 90       	pop	r9
    2236:	8f 90       	pop	r8
    2238:	7f 90       	pop	r7
    223a:	6f 90       	pop	r6
    223c:	5f 90       	pop	r5
    223e:	4f 90       	pop	r4
    2240:	3f 90       	pop	r3
    2242:	2f 90       	pop	r2
    2244:	1f 90       	pop	r1
    2246:	0f 90       	pop	r0
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    224c:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	08 95       	ret

00002252 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2252:	08 95       	ret

00002254 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2254:	0f 92       	push	r0
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	0f 92       	push	r0
    225c:	1f 92       	push	r1
    225e:	11 24       	eor	r1, r1
    2260:	2f 92       	push	r2
    2262:	3f 92       	push	r3
    2264:	4f 92       	push	r4
    2266:	5f 92       	push	r5
    2268:	6f 92       	push	r6
    226a:	7f 92       	push	r7
    226c:	8f 92       	push	r8
    226e:	9f 92       	push	r9
    2270:	af 92       	push	r10
    2272:	bf 92       	push	r11
    2274:	cf 92       	push	r12
    2276:	df 92       	push	r13
    2278:	ef 92       	push	r14
    227a:	ff 92       	push	r15
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	2f 93       	push	r18
    2282:	3f 93       	push	r19
    2284:	4f 93       	push	r20
    2286:	5f 93       	push	r21
    2288:	6f 93       	push	r22
    228a:	7f 93       	push	r23
    228c:	8f 93       	push	r24
    228e:	9f 93       	push	r25
    2290:	af 93       	push	r26
    2292:	bf 93       	push	r27
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	ef 93       	push	r30
    229a:	ff 93       	push	r31
    229c:	a0 91 b3 02 	lds	r26, 0x02B3
    22a0:	b0 91 b4 02 	lds	r27, 0x02B4
    22a4:	0d b6       	in	r0, 0x3d	; 61
    22a6:	0d 92       	st	X+, r0
    22a8:	0e b6       	in	r0, 0x3e	; 62
    22aa:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    22ac:	0e 94 b0 06 	call	0xd60	; 0xd60 <vTaskIncrementTick>
	vTaskSwitchContext();
    22b0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    22b4:	a0 91 b3 02 	lds	r26, 0x02B3
    22b8:	b0 91 b4 02 	lds	r27, 0x02B4
    22bc:	cd 91       	ld	r28, X+
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	dd 91       	ld	r29, X+
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	ff 91       	pop	r31
    22c6:	ef 91       	pop	r30
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	bf 91       	pop	r27
    22ce:	af 91       	pop	r26
    22d0:	9f 91       	pop	r25
    22d2:	8f 91       	pop	r24
    22d4:	7f 91       	pop	r23
    22d6:	6f 91       	pop	r22
    22d8:	5f 91       	pop	r21
    22da:	4f 91       	pop	r20
    22dc:	3f 91       	pop	r19
    22de:	2f 91       	pop	r18
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	df 90       	pop	r13
    22ea:	cf 90       	pop	r12
    22ec:	bf 90       	pop	r11
    22ee:	af 90       	pop	r10
    22f0:	9f 90       	pop	r9
    22f2:	8f 90       	pop	r8
    22f4:	7f 90       	pop	r7
    22f6:	6f 90       	pop	r6
    22f8:	5f 90       	pop	r5
    22fa:	4f 90       	pop	r4
    22fc:	3f 90       	pop	r3
    22fe:	2f 90       	pop	r2
    2300:	1f 90       	pop	r1
    2302:	0f 90       	pop	r0
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2308:	08 95       	ret

0000230a <__vector_17>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    230a:	0e 94 2a 11 	call	0x2254	; 0x2254 <vPortYieldFromTick>
		asm volatile ( "reti" );
    230e:	18 95       	reti

00002310 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2310:	0f 92       	push	r0
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	0f 92       	push	r0
    2318:	1f 92       	push	r1
    231a:	11 24       	eor	r1, r1
    231c:	2f 92       	push	r2
    231e:	3f 92       	push	r3
    2320:	4f 92       	push	r4
    2322:	5f 92       	push	r5
    2324:	6f 92       	push	r6
    2326:	7f 92       	push	r7
    2328:	8f 92       	push	r8
    232a:	9f 92       	push	r9
    232c:	af 92       	push	r10
    232e:	bf 92       	push	r11
    2330:	cf 92       	push	r12
    2332:	df 92       	push	r13
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	2f 93       	push	r18
    233e:	3f 93       	push	r19
    2340:	4f 93       	push	r20
    2342:	5f 93       	push	r21
    2344:	6f 93       	push	r22
    2346:	7f 93       	push	r23
    2348:	8f 93       	push	r24
    234a:	9f 93       	push	r25
    234c:	af 93       	push	r26
    234e:	bf 93       	push	r27
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	ef 93       	push	r30
    2356:	ff 93       	push	r31
    2358:	a0 91 b3 02 	lds	r26, 0x02B3
    235c:	b0 91 b4 02 	lds	r27, 0x02B4
    2360:	0d b6       	in	r0, 0x3d	; 61
    2362:	0d 92       	st	X+, r0
    2364:	0e b6       	in	r0, 0x3e	; 62
    2366:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2368:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    236c:	a0 91 b3 02 	lds	r26, 0x02B3
    2370:	b0 91 b4 02 	lds	r27, 0x02B4
    2374:	cd 91       	ld	r28, X+
    2376:	cd bf       	out	0x3d, r28	; 61
    2378:	dd 91       	ld	r29, X+
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	ff 91       	pop	r31
    237e:	ef 91       	pop	r30
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	bf 91       	pop	r27
    2386:	af 91       	pop	r26
    2388:	9f 91       	pop	r25
    238a:	8f 91       	pop	r24
    238c:	7f 91       	pop	r23
    238e:	6f 91       	pop	r22
    2390:	5f 91       	pop	r21
    2392:	4f 91       	pop	r20
    2394:	3f 91       	pop	r19
    2396:	2f 91       	pop	r18
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	ef 90       	pop	r14
    23a0:	df 90       	pop	r13
    23a2:	cf 90       	pop	r12
    23a4:	bf 90       	pop	r11
    23a6:	af 90       	pop	r10
    23a8:	9f 90       	pop	r9
    23aa:	8f 90       	pop	r8
    23ac:	7f 90       	pop	r7
    23ae:	6f 90       	pop	r6
    23b0:	5f 90       	pop	r5
    23b2:	4f 90       	pop	r4
    23b4:	3f 90       	pop	r3
    23b6:	2f 90       	pop	r2
    23b8:	1f 90       	pop	r1
    23ba:	0f 90       	pop	r0
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	0f 90       	pop	r0

	asm volatile ( "ret" );
    23c0:	08 95       	ret

000023c2 <memcpy>:
    23c2:	fb 01       	movw	r30, r22
    23c4:	dc 01       	movw	r26, r24
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <memcpy+0xa>
    23c8:	01 90       	ld	r0, Z+
    23ca:	0d 92       	st	X+, r0
    23cc:	41 50       	subi	r20, 0x01	; 1
    23ce:	50 40       	sbci	r21, 0x00	; 0
    23d0:	d8 f7       	brcc	.-10     	; 0x23c8 <memcpy+0x6>
    23d2:	08 95       	ret

000023d4 <memset>:
    23d4:	dc 01       	movw	r26, r24
    23d6:	01 c0       	rjmp	.+2      	; 0x23da <memset+0x6>
    23d8:	6d 93       	st	X+, r22
    23da:	41 50       	subi	r20, 0x01	; 1
    23dc:	50 40       	sbci	r21, 0x00	; 0
    23de:	e0 f7       	brcc	.-8      	; 0x23d8 <memset+0x4>
    23e0:	08 95       	ret

000023e2 <strncpy>:
    23e2:	fb 01       	movw	r30, r22
    23e4:	dc 01       	movw	r26, r24
    23e6:	41 50       	subi	r20, 0x01	; 1
    23e8:	50 40       	sbci	r21, 0x00	; 0
    23ea:	48 f0       	brcs	.+18     	; 0x23fe <strncpy+0x1c>
    23ec:	01 90       	ld	r0, Z+
    23ee:	0d 92       	st	X+, r0
    23f0:	00 20       	and	r0, r0
    23f2:	c9 f7       	brne	.-14     	; 0x23e6 <strncpy+0x4>
    23f4:	01 c0       	rjmp	.+2      	; 0x23f8 <strncpy+0x16>
    23f6:	1d 92       	st	X+, r1
    23f8:	41 50       	subi	r20, 0x01	; 1
    23fa:	50 40       	sbci	r21, 0x00	; 0
    23fc:	e0 f7       	brcc	.-8      	; 0x23f6 <strncpy+0x14>
    23fe:	08 95       	ret

00002400 <__divmodhi4>:
    2400:	97 fb       	bst	r25, 7
    2402:	09 2e       	mov	r0, r25
    2404:	07 26       	eor	r0, r23
    2406:	0a d0       	rcall	.+20     	; 0x241c <__divmodhi4_neg1>
    2408:	77 fd       	sbrc	r23, 7
    240a:	04 d0       	rcall	.+8      	; 0x2414 <__divmodhi4_neg2>
    240c:	27 d0       	rcall	.+78     	; 0x245c <__udivmodhi4>
    240e:	06 d0       	rcall	.+12     	; 0x241c <__divmodhi4_neg1>
    2410:	00 20       	and	r0, r0
    2412:	1a f4       	brpl	.+6      	; 0x241a <__divmodhi4_exit>

00002414 <__divmodhi4_neg2>:
    2414:	70 95       	com	r23
    2416:	61 95       	neg	r22
    2418:	7f 4f       	sbci	r23, 0xFF	; 255

0000241a <__divmodhi4_exit>:
    241a:	08 95       	ret

0000241c <__divmodhi4_neg1>:
    241c:	f6 f7       	brtc	.-4      	; 0x241a <__divmodhi4_exit>
    241e:	90 95       	com	r25
    2420:	81 95       	neg	r24
    2422:	9f 4f       	sbci	r25, 0xFF	; 255
    2424:	08 95       	ret

00002426 <__divmodsi4>:
    2426:	97 fb       	bst	r25, 7
    2428:	09 2e       	mov	r0, r25
    242a:	05 26       	eor	r0, r21
    242c:	0e d0       	rcall	.+28     	; 0x244a <__divmodsi4_neg1>
    242e:	57 fd       	sbrc	r21, 7
    2430:	04 d0       	rcall	.+8      	; 0x243a <__divmodsi4_neg2>
    2432:	28 d0       	rcall	.+80     	; 0x2484 <__udivmodsi4>
    2434:	0a d0       	rcall	.+20     	; 0x244a <__divmodsi4_neg1>
    2436:	00 1c       	adc	r0, r0
    2438:	38 f4       	brcc	.+14     	; 0x2448 <__divmodsi4_exit>

0000243a <__divmodsi4_neg2>:
    243a:	50 95       	com	r21
    243c:	40 95       	com	r20
    243e:	30 95       	com	r19
    2440:	21 95       	neg	r18
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
    2444:	4f 4f       	sbci	r20, 0xFF	; 255
    2446:	5f 4f       	sbci	r21, 0xFF	; 255

00002448 <__divmodsi4_exit>:
    2448:	08 95       	ret

0000244a <__divmodsi4_neg1>:
    244a:	f6 f7       	brtc	.-4      	; 0x2448 <__divmodsi4_exit>
    244c:	90 95       	com	r25
    244e:	80 95       	com	r24
    2450:	70 95       	com	r23
    2452:	61 95       	neg	r22
    2454:	7f 4f       	sbci	r23, 0xFF	; 255
    2456:	8f 4f       	sbci	r24, 0xFF	; 255
    2458:	9f 4f       	sbci	r25, 0xFF	; 255
    245a:	08 95       	ret

0000245c <__udivmodhi4>:
    245c:	aa 1b       	sub	r26, r26
    245e:	bb 1b       	sub	r27, r27
    2460:	51 e1       	ldi	r21, 0x11	; 17
    2462:	07 c0       	rjmp	.+14     	; 0x2472 <__udivmodhi4_ep>

00002464 <__udivmodhi4_loop>:
    2464:	aa 1f       	adc	r26, r26
    2466:	bb 1f       	adc	r27, r27
    2468:	a6 17       	cp	r26, r22
    246a:	b7 07       	cpc	r27, r23
    246c:	10 f0       	brcs	.+4      	; 0x2472 <__udivmodhi4_ep>
    246e:	a6 1b       	sub	r26, r22
    2470:	b7 0b       	sbc	r27, r23

00002472 <__udivmodhi4_ep>:
    2472:	88 1f       	adc	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	5a 95       	dec	r21
    2478:	a9 f7       	brne	.-22     	; 0x2464 <__udivmodhi4_loop>
    247a:	80 95       	com	r24
    247c:	90 95       	com	r25
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	08 95       	ret

00002484 <__udivmodsi4>:
    2484:	a1 e2       	ldi	r26, 0x21	; 33
    2486:	1a 2e       	mov	r1, r26
    2488:	aa 1b       	sub	r26, r26
    248a:	bb 1b       	sub	r27, r27
    248c:	fd 01       	movw	r30, r26
    248e:	0d c0       	rjmp	.+26     	; 0x24aa <__udivmodsi4_ep>

00002490 <__udivmodsi4_loop>:
    2490:	aa 1f       	adc	r26, r26
    2492:	bb 1f       	adc	r27, r27
    2494:	ee 1f       	adc	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	a2 17       	cp	r26, r18
    249a:	b3 07       	cpc	r27, r19
    249c:	e4 07       	cpc	r30, r20
    249e:	f5 07       	cpc	r31, r21
    24a0:	20 f0       	brcs	.+8      	; 0x24aa <__udivmodsi4_ep>
    24a2:	a2 1b       	sub	r26, r18
    24a4:	b3 0b       	sbc	r27, r19
    24a6:	e4 0b       	sbc	r30, r20
    24a8:	f5 0b       	sbc	r31, r21

000024aa <__udivmodsi4_ep>:
    24aa:	66 1f       	adc	r22, r22
    24ac:	77 1f       	adc	r23, r23
    24ae:	88 1f       	adc	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	1a 94       	dec	r1
    24b4:	69 f7       	brne	.-38     	; 0x2490 <__udivmodsi4_loop>
    24b6:	60 95       	com	r22
    24b8:	70 95       	com	r23
    24ba:	80 95       	com	r24
    24bc:	90 95       	com	r25
    24be:	9b 01       	movw	r18, r22
    24c0:	ac 01       	movw	r20, r24
    24c2:	bd 01       	movw	r22, r26
    24c4:	cf 01       	movw	r24, r30
    24c6:	08 95       	ret

000024c8 <_exit>:
    24c8:	f8 94       	cli

000024ca <__stop_program>:
    24ca:	ff cf       	rjmp	.-2      	; 0x24ca <__stop_program>
