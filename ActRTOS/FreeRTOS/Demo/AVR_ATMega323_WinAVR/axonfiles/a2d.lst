   1               		.file	"a2d.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  94               	.global	a2dInit
  96               	a2dInit:
   1:a2d.c         **** /*! \file a2d.c \brief Analog-to-Digital converter function library. */
   2:a2d.c         **** //*****************************************************************************
   3:a2d.c         **** //
   4:a2d.c         **** // File Name	: 'a2d.c'
   5:a2d.c         **** // Title		: Analog-to-digital converter functions
   6:a2d.c         **** // Author		: Pascal Stang - Copyright (C) 2002
   7:a2d.c         **** // Created		: 2002-04-08
   8:a2d.c         **** // Revised		: 2002-09-30
   9:a2d.c         **** // Version		: 1.1
  10:a2d.c         **** // Target MCU	: Atmel AVR series
  11:a2d.c         **** // Editor Tabs	: 4
  12:a2d.c         **** //
  13:a2d.c         **** // This code is distributed under the GNU Public License
  14:a2d.c         **** //		which can be found at http://www.gnu.org/licenses/gpl.txt
  15:a2d.c         **** //
  16:a2d.c         **** //	modified by societyofrobots.com to handle 16 channels of ADC
  17:a2d.c         **** //		- required for ATmega2560, 1280
  18:a2d.c         **** //		- define mistakes found, masking mistakes found, all corrected
  19:a2d.c         **** //
  20:a2d.c         **** //*****************************************************************************
  21:a2d.c         **** 
  22:a2d.c         **** #include <avr/io.h>
  23:a2d.c         **** #include <avr/interrupt.h>
  24:a2d.c         **** 
  25:a2d.c         **** #include "global.h"
  26:a2d.c         **** #include "a2d.h"
  27:a2d.c         **** 
  28:a2d.c         **** // global variables
  29:a2d.c         **** 
  30:a2d.c         **** //! Software flag used to indicate when
  31:a2d.c         **** /// the a2d conversion is complete.
  32:a2d.c         **** volatile unsigned char a2dCompleteFlag;
  33:a2d.c         **** 
  34:a2d.c         **** // functions
  35:a2d.c         **** 
  36:a2d.c         **** // initialize a2d converter
  37:a2d.c         **** void a2dInit(void)
  38:a2d.c         **** {
  97               	/* prologue: function */
  98               	/* frame size = 0 */
 100 0000 DF93      	.LM1:
 101 0002 CF93      		ldi r26,lo8(122)
 102 0004 CDB7      		ldi r27,hi8(122)
 103 0006 DEB7      		ldi r30,lo8(122)
 104               		ldi r31,hi8(122)
 105               		ld r24,Z
  39:a2d.c         **** 	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
 106               	lo8(-128)
 107               		st X,r24
 109 000a B0E0      	.LM2:
 110 000c EAE7      		ldi r26,lo8(122)
 111 000e F0E0      		ldi r27,hi8(122)
 112 0010 8081      		ldi r30,lo8(122)
 113 0012 8068      		ldi r31,hi8(122)
 114 0014 8C93      		ld r24,Z
  40:a2d.c         **** 	cbi(ADCSR, ADFR);				// default to single sample convert mode
 115               	,lo8(-33)
 116               		st X,r24
 118 0018 B0E0      	.LM3:
 119 001a EAE7      		ldi r24,lo8(6)
 120 001c F0E0      		call a2dSetPrescaler
 122 0020 8F7D      	.LM4:
 123 0022 8C93      		ldi r24,lo8(1)
  41:a2d.c         **** 	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
 124               	SetReference
 126 0024 86E0      	.LM5:
 127 0026 0E94 0000 		ldi r26,lo8(124)
  42:a2d.c         **** 	a2dSetReference(ADC_REFERENCE);	// set default reference
 128               	 r27,hi8(124)
 129               		ldi r30,lo8(124)
 130 002a 81E0      		ldi r31,hi8(124)
 131 002c 0E94 0000 		ld r24,Z
  43:a2d.c         **** 	cbi(ADMUX, ADLAR);				// set to right-adjusted result
 132               	i r24,lo8(-33)
 133               		st X,r24
 135 0032 B0E0      	.LM6:
 136 0034 ECE7      		ldi r26,lo8(122)
 137 0036 F0E0      		ldi r27,hi8(122)
 138 0038 8081      		ldi r30,lo8(122)
 139 003a 8F7D      		ldi r31,hi8(122)
 140 003c 8C93      		ld r24,Z
  44:a2d.c         **** 
  45:a2d.c         **** 	sbi(ADCSR, ADIE);				// enable ADC interrupts
 141               	lo8(8)
 142               		st X,r24
 144 0040 B0E0      	.LM7:
 145 0042 EAE7      		sts a2dCompleteFlag,__zero_reg__
 147 0046 8081      	.LM8:
 148 0048 8860      	/* #APP */
 149 004a 8C93      	 ;  48 "a2d.c" 1
  46:a2d.c         **** 
  47:a2d.c         **** 	a2dCompleteFlag = FALSE;		// clear conversion complete flag
 150               	0 "" 2
 151               	/* epilogue start */
  48:a2d.c         **** 	sei();							// turn on interrupts (if not already on)
 153               	9:
 154               	/* #NOAPP */
 155               		pop r28
 156               		pop r29
 157 0050 7894      		ret
 159               	.Lscope1:
  49:a2d.c         **** }
 160               		"a2dOff:F(0,15)",36,0,0,a2dOff
 161               	.global	a2dOff
 163 0052 CF91      	a2dOff:
 165 0056 0895      	.LM10:
 166               	.LFBB2:
 167               		push r29
 168               		push r28
 169               		in r28,__SP_L__
 170               		in r29,__SP_H__
 171               	/* prologue: function */
  50:a2d.c         **** 
  51:a2d.c         **** // turn off a2d converter
  52:a2d.c         **** void a2dOff(void)
  53:a2d.c         **** {
 172               	e = 0 */
 174               	.LM11:
 175 0058 DF93      		ldi r26,lo8(122)
 176 005a CF93      		ldi r27,hi8(122)
 177 005c CDB7      		ldi r30,lo8(122)
 178 005e DEB7      		ldi r31,hi8(122)
 179               		ld r24,Z
 180               		andi r24,lo8(-9)
  54:a2d.c         **** 	cbi(ADCSR, ADIE);				// disable ADC interrupts
 181               	
 183 0060 AAE7      	.LM12:
 184 0062 B0E0      		ldi r26,lo8(122)
 185 0064 EAE7      		ldi r27,hi8(122)
 186 0066 F0E0      		ldi r30,lo8(122)
 187 0068 8081      		ldi r31,hi8(122)
 188 006a 877F      		ld r24,Z
 189 006c 8C93      		andi r24,lo8(127)
  55:a2d.c         **** 	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
 190               	4
 191               	/* epilogue start */
 193 0070 B0E0      	.LM13:
 194 0072 EAE7      		pop r28
 195 0074 F0E0      		pop r29
 196 0076 8081      		ret
 198 007a 8C93      	.Lscope2:
  56:a2d.c         **** }
 200               	rescale:p(0,11)",160,0,0,1
 201               	.global	a2dSetPrescaler
 203 007e DF91      	a2dSetPrescaler:
 205               	.LM14:
 206               	.LFBB3:
 207               		push r29
 208               		push r28
 209               		push __tmp_reg__
 210               		in r28,__SP_L__
 211               		in r29,__SP_H__
  57:a2d.c         **** 
  58:a2d.c         **** // configure A2D converter clock division (prescaling)
  59:a2d.c         **** void a2dSetPrescaler(unsigned char prescale)
  60:a2d.c         **** {
 212               	 function */
 213               	/* frame size = 1 */
 214               		std Y+1,r24
 216 0084 CF93      	.LM15:
 217 0086 0F92      		ldi r26,lo8(122)
 218 0088 CDB7      		ldi r27,hi8(122)
 219 008a DEB7      		ldi r30,lo8(122)
 220               		ldi r31,hi8(122)
 221               		ld r24,Z
 222 008c 8983      		mov r25,r24
  61:a2d.c         **** 	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
 223               	o8(-8)
 224               		ldd r24,Y+1
 225 008e AAE7      		or r24,r25
 226 0090 B0E0      		st X,r24
 227 0092 EAE7      	/* epilogue start */
 229 0096 8081      	.LM16:
 230 0098 982F      		pop __tmp_reg__
 231 009a 987F      		pop r28
 232 009c 8981      		pop r29
 233 009e 892B      		ret
 235               	.Lscope3:
  62:a2d.c         **** }
 236               	etReference:F(0,15)",36,0,0,a2dSetReference
 238 00a2 0F90      	.global	a2dSetReference
 240 00a6 DF91      	a2dSetReference:
 242               	.LM17:
 243               	.LFBB4:
 244               		push r29
 245               		push r28
 246               		push __tmp_reg__
 247               		in r28,__SP_L__
 248               		in r29,__SP_H__
  63:a2d.c         **** 
  64:a2d.c         **** // configure A2D converter voltage reference
  65:a2d.c         **** void a2dSetReference(unsigned char ref)
  66:a2d.c         **** {
 249               	function */
 250               	/* frame size = 1 */
 251               		std Y+1,r24
 253 00ac CF93      	.LM18:
 254 00ae 0F92      		ldi r26,lo8(124)
 255 00b0 CDB7      		ldi r27,hi8(124)
 256 00b2 DEB7      		ldi r30,lo8(124)
 257               		ldi r31,hi8(124)
 258               		ld r24,Z
 259 00b4 8983      		mov r18,r24
  67:a2d.c         **** 	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
 260               	o8(63)
 261               		ldd r24,Y+1
 262 00b6 ACE7      		mov r24,r24
 263 00b8 B0E0      		ldi r25,lo8(0)
 264 00ba ECE7      		clr __tmp_reg__
 265 00bc F0E0      		lsr r25
 266 00be 8081      		ror r24
 267 00c0 282F      		ror __tmp_reg__
 268 00c2 2F73      		lsr r25
 269 00c4 8981      		ror r24
 270 00c6 882F      		ror __tmp_reg__
 271 00c8 90E0      		mov r25,r24
 272 00ca 0024      		mov r24,__tmp_reg__
 273 00cc 9695      		or r24,r18
 274 00ce 8795      		st X,r24
 275 00d0 0794      	/* epilogue start */
 277 00d4 8795      	.LM19:
 278 00d6 0794      		pop __tmp_reg__
 279 00d8 982F      		pop r28
 280 00da 802D      		pop r29
 281 00dc 822B      		ret
 283               	.Lscope4:
  68:a2d.c         **** }
 284               	(0,15)",36,0,0,a2dSetChannel
 286 00e0 0F90      	.global	a2dSetChannel
 288 00e4 DF91      	a2dSetChannel:
 290               	.LM20:
 291               	.LFBB5:
 292               		push r29
 293               		push r28
 294               		push __tmp_reg__
 295               		in r28,__SP_L__
 296               		in r29,__SP_H__
  69:a2d.c         **** 
  70:a2d.c         **** // sets the a2d input channel
  71:a2d.c         **** void a2dSetChannel(unsigned char ch)
  72:a2d.c         **** {
 297               	function */
 298               	/* frame size = 1 */
 299               		std Y+1,r24
 301 00ea CF93      	.LM21:
 302 00ec 0F92      		ldi r26,lo8(124)
 303 00ee CDB7      		ldi r27,hi8(124)
 304 00f0 DEB7      		ldi r30,lo8(124)
 305               		ldi r31,hi8(124)
 306               		ld r24,Z
 307 00f2 8983      		mov r25,r24
  73:a2d.c         **** 	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 308               	o8(-32)
 309               		ldd r24,Y+1
 310 00f4 ACE7      		andi r24,lo8(31)
 311 00f6 B0E0      		or r24,r25
 312 00f8 ECE7      		st X,r24
 313 00fa F0E0      	/* epilogue start */
 315 00fe 982F      	.LM22:
 316 0100 907E      		pop __tmp_reg__
 317 0102 8981      		pop r28
 318 0104 8F71      		pop r29
 319 0106 892B      		ret
 321               	.Lscope5:
  74:a2d.c         **** }
 322               	artConvert:F(0,15)",36,0,0,a2dStartConvert
 323               	.global	a2dStartConvert
 325 010c CF91      	a2dStartConvert:
 327 0110 0895      	.LM23:
 328               	.LFBB6:
 329               		push r29
 330               		push r28
 331               		in r28,__SP_L__
 332               		in r29,__SP_H__
 333               	/* prologue: function */
  75:a2d.c         **** 
  76:a2d.c         **** // start a conversion on the current a2d input channel
  77:a2d.c         **** void a2dStartConvert(void)
  78:a2d.c         **** {
 334               	e = 0 */
 336               	.LM24:
 337 0112 DF93      		ldi r26,lo8(122)
 338 0114 CF93      		ldi r27,hi8(122)
 339 0116 CDB7      		ldi r30,lo8(122)
 340 0118 DEB7      		ldi r31,hi8(122)
 341               		ld r24,Z
 342               		ori r24,lo8(16)
  79:a2d.c         **** 	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
 343               	h r28
 344               		in r28,__SP_L__
 345 011a AAE7      		in r29,__SP_H__
 346 011c B0E0      	/* prologue: function */
 347 011e EAE7      	/* frame size = 0 */
 349 0122 8081      	.LM24:
 350 0124 8061      		ldi r26,lo8(122)
 351 0126 8C93      		ldi r27,hi8(122)
  80:a2d.c         **** 	sbi(ADCSR, ADSC);	// start conversion
 352               	Convert:
 354 0128 AAE7      	.LM23:
 355 012a B0E0      	.LFBB6:
 356 012c EAE7      		push r29
 357 012e F0E0      		push r28
 358 0130 8081      		in r28,__SP_L__
 359 0132 8064      		in r29,__SP_H__
 360 0134 8C93      	/* prologue: function */
 361               	/* frame size = 0 */
  81:a2d.c         **** }
 362               	rtConvert
 363               	.global	a2dStartConvert
 365 0138 DF91      	a2dStartConvert:
 367               	.LM23:
 368               	.LFBB6:
 369               		push r29
 370               		push r28
 371               		in r28,__SP_L__
 372               		in r29,__SP_H__
  82:a2d.c         **** 
  83:a2d.c         **** // return TRUE if conversion is complete
  84:a2d.c         **** u08 a2dIsComplete(void)
  85:a2d.c         **** {
 373               	: function */
 374               	/* frame size = 0 */
 376 013c DF93      	.LM24:
 377 013e CF93      		ldi r26,lo8(122)
 378 0140 CDB7      		ldi r27,hi8(122)
 379 0142 DEB7      		ldi r30,lo8(122)
 380               		ldi r31,hi8(122)
 381               		ld r24,Z
  86:a2d.c         **** 	return bit_is_set(ADCSR, ADSC);
 382               	B6:
 383               		push r29
 384 0144 EAE7      		push r28
 385 0146 F0E0      		in r28,__SP_L__
 386 0148 8081      		in r29,__SP_H__
 387 014a 8074      	/* prologue: function */
 388               	/* frame size = 0 */
  87:a2d.c         **** }
 389               	rtConvert
 390               	.global	a2dStartConvert
 392 014e DF91      	a2dStartConvert:
 394               	.LM23:
 395               	.LFBB6:
 396               		push r29
 397               		push r28
 398               		in r28,__SP_L__
 399               		in r29,__SP_H__
 400               	/* prologue: function */
  88:a2d.c         **** 
  89:a2d.c         **** // Perform a 10-bit conversion
  90:a2d.c         **** // starts conversion, waits until conversion is done, and returns result
  91:a2d.c         **** unsigned short a2dConvert10bit(unsigned char ch)
  92:a2d.c         **** {
 401               	e = 0 */
 403               	.LM24:
 404 0152 DF93      		ldi r26,lo8(122)
 405 0154 CF93      		ldi r27,hi8(122)
 406 0156 0F92      		ldi r30,lo8(122)
 407 0158 CDB7      		ldi r31,hi8(122)
 408 015a DEB7      		ld r24,Z
 409               		ori r24,lo8(16)
 410               		st X,r24
  93:a2d.c         **** 	a2dCompleteFlag = FALSE;				// clear conversion complete flag
 412               	* prologue: function */
 413               	/* frame size = 0 */
  94:a2d.c         **** 
  95:a2d.c         **** if (ch >= 8)
 415               	ert
 417 0162 8981      	a2dStartConvert:
 419 0166 00F0      	.LM23:
  96:a2d.c         ****     ADCSRB |= _BV(MUX5);
 420               	6:
 421               		push r29
 422 0168 ABE7      		push r28
 423 016a B0E0      		in r28,__SP_L__
 424 016c EBE7      		in r29,__SP_H__
 425 016e F0E0      	/* prologue: function */
 426 0170 8081      	/* frame size = 0 */
 428 0174 8C93      	.LM24:
 429 0176 00C0      		ldi r26,lo8(122)
 430               		ldi r27,hi8(122)
  97:a2d.c         **** else
  98:a2d.c         ****     ADCSRB &= ~_BV(MUX5);
 431               	Convert:
 433 0178 ABE7      	.LM23:
 434 017a B0E0      	.LFBB6:
 435 017c EBE7      		push r29
 436 017e F0E0      		push r28
 437 0180 8081      		in r28,__SP_L__
 438 0182 877F      		in r29,__SP_H__
 439 0184 8C93      	/* prologue: function */
 440               	/* frame size = 0 */
  99:a2d.c         **** 
 100:a2d.c         ****    outb(ADMUX, (inb(ADMUX) & ~7) | (ch & 7));   // set channel
 441               	rtConvert
 442               	.global	a2dStartConvert
 444 0188 B0E0      	a2dStartConvert:
 446 018c F0E0      	.LM23:
 447 018e 8081      	.LFBB6:
 448 0190 982F      		push r29
 449 0192 987F      		push r28
 450 0194 8981      		in r28,__SP_L__
 451 0196 8770      		in r29,__SP_H__
 452 0198 892B      	/* prologue: function */
 453 019a 8C93      	/* frame size = 0 */
 101:a2d.c         **** 
 102:a2d.c         **** 	//outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 103:a2d.c         **** 	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
 454               	79,.LM24-.LFBB6
 455               	.LM24:
 456 019c AAE7      		ldi r26,lo8(122)
 457 019e B0E0      		ldi r27,hi8(122)
 458 01a0 EAE7      		ldi r30,lo8(122)
 459 01a2 F0E0      		ldi r31,hi8(122)
 460 01a4 8081      		ld r24,Z
 461 01a6 8061      		ori r24,lo8(16)
 462 01a8 8C93      		st X,r24
 104:a2d.c         **** 	sbi(ADCSR, ADSC);						// start conversion
 463               	28,__SP_L__
 464               		in r29,__SP_H__
 465 01aa AAE7      	/* prologue: function */
 466 01ac B0E0      	/* frame size = 0 */
 468 01b0 F0E0      	.LM24:
 469 01b2 8081      		ldi r26,lo8(122)
 470 01b4 8064      		ldi r27,hi8(122)
 471 01b6 8C93      		ldi r30,lo8(122)
 472               		ldi r31,hi8(122)
 105:a2d.c         **** 	//while(!a2dCompleteFlag);				// wait until conversion complete
 106:a2d.c         **** 	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
 107:a2d.c         **** 	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
 473               	.LM23:
 474               	.LFBB6:
 475 01b8 EAE7      		push r29
 476 01ba F0E0      		push r28
 477 01bc 8081      		in r28,__SP_L__
 478 01be 882F      		in r29,__SP_H__
 479 01c0 90E0      	/* prologue: function */
 480 01c2 8074      	/* frame size = 0 */
 482 01c6 0097      	.LM24:
 483 01c8 01F4      		ldi r26,lo8(122)
 108:a2d.c         **** 
 109:a2d.c         **** 	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
 110:a2d.c         **** 	//return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits) //old version
 111:a2d.c         **** 	return ADC;//new version code
 484               	 @function
 485               	a2dStartConvert:
 487 01cc F0E0      	.LM23:
 488 01ce 8081      	.LFBB6:
 489 01d0 9181      		push r29
 490               		push r28
 112:a2d.c         **** }
 491               	,__SP_L__
 492               		in r29,__SP_H__
 493 01d2 0F90      	/* prologue: function */
 494 01d4 CF91      	/* frame size = 0 */
 496 01d8 0895      	.LM24:
 497               		ldi r26,lo8(122)
 498               		ldi r27,hi8(122)
 499               		ldi r30,lo8(122)
 500               		ldi r31,hi8(122)
 501               		ld r24,Z
 502               		ori r24,lo8(16)
 503               		st X,r24
 113:a2d.c         **** 
 114:a2d.c         **** // Perform a 8-bit conversion.
 115:a2d.c         **** // starts conversion, waits until conversion is done, and returns result
 116:a2d.c         **** unsigned char a2dConvert8bit(unsigned char ch)
 117:a2d.c         **** {
 504               	28,__SP_L__
 505               		in r29,__SP_H__
 506               	/* prologue: function */
 507 01da DF93      	/* frame size = 0 */
 509 01de 0F92      	.LM24:
 510 01e0 CDB7      		ldi r26,lo8(122)
 511 01e2 DEB7      		ldi r27,hi8(122)
 512               		ldi r30,lo8(122)
 513               		ldi r31,hi8(122)
 514 01e4 8983      		ld r24,Z
 118:a2d.c         **** 	// do 10-bit conversion and return highest 8 bits
 119:a2d.c         **** 	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
 515               	B6:
 516               		push r29
 517 01e6 8981      		push r28
 518 01e8 0E94 0000 		in r28,__SP_L__
 519 01ec 9695      		in r29,__SP_H__
 520 01ee 8795      	/* prologue: function */
 521 01f0 9695      	/* frame size = 0 */
 523               	.LM24:
 120:a2d.c         **** }
 524               	pe	a2dStartConvert, @function
 525               	a2dStartConvert:
 527 01f6 CF91      	.LM23:
 528 01f8 DF91      	.LFBB6:
 529 01fa 0895      		push r29
 530               		push r28
 531               		in r28,__SP_L__
 532               		in r29,__SP_H__
 533               	/* prologue: function */
 534               	/* frame size = 0 */
 121:a2d.c         **** 
 122:a2d.c         **** //! Interrupt handler for ADC complete interrupt.
 123:a2d.c         **** SIGNAL(SIG_ADC)
 124:a2d.c         **** {
 536               	r26,lo8(122)
 537               		ldi r27,hi8(122)
 538               		ldi r30,lo8(122)
 539 01fc 1F92      		ldi r31,hi8(122)
 540 01fe 0F92      		ld r24,Z
 541 0200 0FB6      		ori r24,lo8(16)
 542 0202 0F92      		st X,r24
 544 0206 8F93      	.LM25:
 545 0208 DF93      		ldi r26,lo8(122)
 546 020a CF93      		ldi r27,hi8(122)
 547 020c CDB7      		ldi r30,lo8(122)
 548 020e DEB7      		ldi r31,hi8(122)
 549               		ld r24,Z
 550               		ori r24,lo8(64)
 125:a2d.c         **** 	// set the a2d conversion flag to indicate "complete"
 126:a2d.c         **** 	a2dCompleteFlag = TRUE;
 551               	22)
 552               		ldi r30,lo8(122)
 553 0210 8FEF      		ldi r31,hi8(122)
 554 0212 8093 0000 		ld r24,Z
 555               		ori r24,lo8(16)
 127:a2d.c         **** }
 556               	h r28
 557               		in r28,__SP_L__
 558 0216 CF91      		in r29,__SP_H__
 559 0218 DF91      	/* prologue: function */
 560 021a 8F91      	/* frame size = 0 */
 562 021e 0FBE      	.LM24:
 563 0220 0F90      		ldi r26,lo8(122)
 564 0222 1F90      		ldi r27,hi8(122)
 565 0224 1895      		ldi r30,lo8(122)
 566               		ldi r31,hi8(122)
 567               		ld r24,Z
 568               		ori r24,lo8(16)
 569               		st X,r24
 571               	.LM25:
DEFINED SYMBOLS
                            *ABS*:00000000 a2d.c
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:2      *ABS*:0000003f __SREG__
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:3      *ABS*:0000003e __SP_H__
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:4      *ABS*:0000003d __SP_L__
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:5      *ABS*:00000034 __CCP__
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:96     .text:00000000 a2dInit
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:211    .text:00000082 a2dSetPrescaler
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:248    .text:000000aa a2dSetReference
                            *COM*:00000001 a2dCompleteFlag
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:171    .text:00000058 a2dOff
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:296    .text:000000e8 a2dSetChannel
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:333    .text:00000112 a2dStartConvert
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:372    .text:0000013c a2dIsComplete
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:400    .text:00000152 a2dConvert10bit
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:503    .text:000001da a2dConvert8bit
C:\Users\Owner\AppData\Local\Temp/ccT5kq7w.s:535    .text:000001fc __vector_29

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
